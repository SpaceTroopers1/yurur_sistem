
custom_msgs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  08015480  08015480  00016480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015fd8  08015fd8  00017184  2**0
                  CONTENTS
  4 .ARM          00000008  08015fd8  08015fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015fe0  08015fe0  00017184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015fe0  08015fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015fe4  08015fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08015fe8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc60  20000188  0801616c  00017188  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dde8  0801616c  00017de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a010  00000000  00000000  000171b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c0c  00000000  00000000  000311c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115f  00000000  00000000  00036438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008608  00000000  00000000  00037597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019734  00000000  00000000  0003fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2921  00000000  00000000  000592d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  000fbbf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c7c  00000000  00000000  000fbc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000188 	.word	0x20000188
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015468 	.word	0x08015468

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	08015468 	.word	0x08015468

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2uiz>:
 8000628:	004a      	lsls	r2, r1, #1
 800062a:	d211      	bcs.n	8000650 <__aeabi_d2uiz+0x28>
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000630:	d211      	bcs.n	8000656 <__aeabi_d2uiz+0x2e>
 8000632:	d50d      	bpl.n	8000650 <__aeabi_d2uiz+0x28>
 8000634:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d40e      	bmi.n	800065c <__aeabi_d2uiz+0x34>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	fa23 f002 	lsr.w	r0, r3, r2
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065a:	d102      	bne.n	8000662 <__aeabi_d2uiz+0x3a>
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000660:	4770      	bx	lr
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	4770      	bx	lr

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000a04:	f006 ff60 	bl	80078c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a08:	4b5a      	ldr	r3, [pc, #360]	@ (8000b74 <pvPortMallocMicroROS+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000a10:	f000 f986 	bl	8000d20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a14:	4b58      	ldr	r3, [pc, #352]	@ (8000b78 <pvPortMallocMicroROS+0x180>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f040 8090 	bne.w	8000b42 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01e      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d015      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f023 0307 	bic.w	r3, r3, #7
 8000a40:	3308      	adds	r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00b      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a52:	f383 8811 	msr	BASEPRI, r3
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	f3bf 8f4f 	dsb	sy
 8000a5e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d06a      	beq.n	8000b42 <pvPortMallocMicroROS+0x14a>
 8000a6c:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d865      	bhi.n	8000b42 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a76:	4b42      	ldr	r3, [pc, #264]	@ (8000b80 <pvPortMallocMicroROS+0x188>)
 8000a78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <pvPortMallocMicroROS+0x188>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a80:	e004      	b.n	8000a8c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d903      	bls.n	8000a9e <pvPortMallocMicroROS+0xa6>
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f1      	bne.n	8000a82 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a9e:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <pvPortMallocMicroROS+0x17c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d04c      	beq.n	8000b42 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2208      	movs	r2, #8
 8000aae:	4413      	add	r3, r2
 8000ab0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d920      	bls.n	8000b0c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae0:	f383 8811 	msr	BASEPRI, r3
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	613b      	str	r3, [r7, #16]
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1ad2      	subs	r2, r2, r3
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b06:	69b8      	ldr	r0, [r7, #24]
 8000b08:	f000 f96c 	bl	8000de4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <pvPortMallocMicroROS+0x18c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d203      	bcs.n	8000b2e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <pvPortMallocMicroROS+0x18c>)
 8000b2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <pvPortMallocMicroROS+0x180>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b42:	f006 fecf 	bl	80078e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	60fb      	str	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b68:	69fb      	ldr	r3, [r7, #28]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3728      	adds	r7, #40	@ 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20003dac 	.word	0x20003dac
 8000b78:	20003db8 	.word	0x20003db8
 8000b7c:	20003db0 	.word	0x20003db0
 8000b80:	20003da4 	.word	0x20003da4
 8000b84:	20003db4 	.word	0x20003db4

08000b88 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d04a      	beq.n	8000c30 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10b      	bne.n	8000bce <vPortFreeMicroROS+0x46>
	__asm volatile
 8000bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bba:	f383 8811 	msr	BASEPRI, r3
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	60fb      	str	r3, [r7, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00b      	beq.n	8000bee <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bda:	f383 8811 	msr	BASEPRI, r3
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	60bb      	str	r3, [r7, #8]
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d019      	beq.n	8000c30 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d115      	bne.n	8000c30 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c14:	f006 fe58 	bl	80078c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <vPortFreeMicroROS+0xb4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <vPortFreeMicroROS+0xb4>)
 8000c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c26:	6938      	ldr	r0, [r7, #16]
 8000c28:	f000 f8dc 	bl	8000de4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c2c:	f006 fe5a 	bl	80078e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20003db8 	.word	0x20003db8
 8000c3c:	20003db0 	.word	0x20003db0

08000c40 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	425b      	negs	r3, r3
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4413      	add	r3, r2
 8000c54:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <getBlockSize+0x38>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

	return count;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20003db8 	.word	0x20003db8

08000c7c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c86:	f006 fe1f 	bl	80078c8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c8a:	6838      	ldr	r0, [r7, #0]
 8000c8c:	f7ff feb4 	bl	80009f8 <pvPortMallocMicroROS>
 8000c90:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d017      	beq.n	8000cc8 <pvPortReallocMicroROS+0x4c>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d014      	beq.n	8000cc8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffce 	bl	8000c40 <getBlockSize>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d201      	bcs.n	8000cb8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f013 fd00 	bl	80146c2 <memcpy>

		vPortFreeMicroROS(pv);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff60 	bl	8000b88 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cc8:	f006 fe0c 	bl	80078e4 <xTaskResumeAll>

	return newmem;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ce0:	f006 fdf2 	bl	80078c8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff fe82 	bl	80009f8 <pvPortMallocMicroROS>
 8000cf4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cfa:	e004      	b.n	8000d06 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	613a      	str	r2, [r7, #16]
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	617a      	str	r2, [r7, #20]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f5      	bne.n	8000cfc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d10:	f006 fde8 	bl	80078e4 <xTaskResumeAll>
  	return mem;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <prvHeapInit+0xac>)
 8000d2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00c      	beq.n	8000d54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3307      	adds	r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f023 0307 	bic.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <prvHeapInit+0xac>)
 8000d50:	4413      	add	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d58:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <prvHeapInit+0xb0>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <prvHeapInit+0xb0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 0307 	bic.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <prvHeapInit+0xb8>)
 8000dae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <prvHeapInit+0xbc>)
 8000db6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <prvHeapInit+0xc0>)
 8000dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	200001a4 	.word	0x200001a4
 8000dd0:	20003da4 	.word	0x20003da4
 8000dd4:	20003dac 	.word	0x20003dac
 8000dd8:	20003db4 	.word	0x20003db4
 8000ddc:	20003db0 	.word	0x20003db0
 8000de0:	20003db8 	.word	0x20003db8

08000de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <prvInsertBlockIntoFreeList+0xac>)
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e002      	b.n	8000df8 <prvInsertBlockIntoFreeList+0x14>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8f7      	bhi.n	8000df2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d108      	bne.n	8000e26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	441a      	add	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d118      	bne.n	8000e6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <prvInsertBlockIntoFreeList+0xb0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d00d      	beq.n	8000e62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	441a      	add	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e008      	b.n	8000e74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <prvInsertBlockIntoFreeList+0xb0>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e003      	b.n	8000e74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d002      	beq.n	8000e82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20003da4 	.word	0x20003da4
 8000e94:	20003dac 	.word	0x20003dac

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 ff2a 	bl	8002cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f832 	bl	8000f08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fafe 	bl	80014a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fad4 	bl	8001454 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 faa8 	bl	8001400 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f896 	bl	8000fe0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eb4:	f000 f968 	bl	8001188 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f9fa 	bl	80012b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <main+0x60>)
 8000ec0:	f003 fb7c 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <main+0x60>)
 8000ec8:	f003 fb78 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	480a      	ldr	r0, [pc, #40]	@ (8000ef8 <main+0x60>)
 8000ed0:	f003 fb74 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <main+0x60>)
 8000ed8:	f003 fb70 	bl	80045bc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000edc:	f005 fbd6 	bl	800668c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <main+0x64>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <main+0x68>)
 8000ee6:	f005 fc1b 	bl	8006720 <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <main+0x6c>)
 8000eee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ef0:	f005 fbf0 	bl	80066d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <main+0x5c>
 8000ef8:	20003dc0 	.word	0x20003dc0
 8000efc:	0801550c 	.word	0x0801550c
 8000f00:	08002079 	.word	0x08002079
 8000f04:	20003fa0 	.word	0x20003fa0

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	@ 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f013 fb0a 	bl	8014530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <SystemClock_Config+0xd4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f54:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <SystemClock_Config+0xd4>)
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <SystemClock_Config+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f86:	2304      	movs	r3, #4
 8000f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fdd2 	bl	8003b3c <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f9e:	f001 f955 	bl	800224c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 f834 	bl	800402c <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fca:	f001 f93f 	bl	800224c <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	@ 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b096      	sub	sp, #88	@ 0x58
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2220      	movs	r2, #32
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f013 fa89 	bl	8014530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101e:	4b58      	ldr	r3, [pc, #352]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001020:	4a58      	ldr	r2, [pc, #352]	@ (8001184 <MX_TIM1_Init+0x1a4>)
 8001022:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001024:	4b56      	ldr	r3, [pc, #344]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001026:	2206      	movs	r2, #6
 8001028:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b55      	ldr	r3, [pc, #340]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001030:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001032:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103e:	4b50      	ldr	r3, [pc, #320]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b4e      	ldr	r3, [pc, #312]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800104a:	484d      	ldr	r0, [pc, #308]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800104c:	f003 fa0e 	bl	800446c <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001056:	f001 f8f9 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001060:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001064:	4619      	mov	r1, r3
 8001066:	4846      	ldr	r0, [pc, #280]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001068:	f003 fc1a 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001072:	f001 f8eb 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001076:	4842      	ldr	r0, [pc, #264]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001078:	f003 fa47 	bl	800450a <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001082:	f001 f8e3 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001092:	4619      	mov	r1, r3
 8001094:	483a      	ldr	r0, [pc, #232]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001096:	f003 ffa3 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010a0:	f001 f8d4 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	@ 0x60
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	482d      	ldr	r0, [pc, #180]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 80010ca:	f003 fb27 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010d4:	f001 f8ba 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4827      	ldr	r0, [pc, #156]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 80010e2:	f003 fb1b 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010ec:	f001 f8ae 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	4821      	ldr	r0, [pc, #132]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 80010fa:	f003 fb0f 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001104:	f001 f8a2 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110c:	220c      	movs	r2, #12
 800110e:	4619      	mov	r1, r3
 8001110:	481b      	ldr	r0, [pc, #108]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001112:	f003 fb03 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800111c:	f001 f896 	bl	800224c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001138:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	480f      	ldr	r0, [pc, #60]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001144:	f003 ffba 	bl	80050bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800114e:	f001 f87d 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001152:	2100      	movs	r1, #0
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001156:	f003 fa31 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800115a:	2104      	movs	r1, #4
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800115e:	f003 fa2d 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001162:	2108      	movs	r1, #8
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001166:	f003 fa29 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800116a:	210c      	movs	r1, #12
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800116e:	f003 fa25 	bl	80045bc <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001174:	f001 fa4c 	bl	8002610 <HAL_TIM_MspPostInit>

}
 8001178:	bf00      	nop
 800117a:	3758      	adds	r7, #88	@ 0x58
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20003dc0 	.word	0x20003dc0
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	@ 0x38
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011c2:	2253      	movs	r2, #83	@ 0x53
 80011c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011ce:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e0:	4832      	ldr	r0, [pc, #200]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011e2:	f003 f943 	bl	800446c <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011ec:	f001 f82e 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fa:	4619      	mov	r1, r3
 80011fc:	482b      	ldr	r0, [pc, #172]	@ (80012ac <MX_TIM2_Init+0x124>)
 80011fe:	f003 fb4f 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001208:	f001 f820 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800120c:	4827      	ldr	r0, [pc, #156]	@ (80012ac <MX_TIM2_Init+0x124>)
 800120e:	f003 f97c 	bl	800450a <HAL_TIM_PWM_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001218:	f001 f818 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	4619      	mov	r1, r3
 800122a:	4820      	ldr	r0, [pc, #128]	@ (80012ac <MX_TIM2_Init+0x124>)
 800122c:	f003 fed8 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001236:	f001 f809 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	@ 0x60
 800123c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	4816      	ldr	r0, [pc, #88]	@ (80012ac <MX_TIM2_Init+0x124>)
 8001252:	f003 fa63 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800125c:	f000 fff6 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4811      	ldr	r0, [pc, #68]	@ (80012ac <MX_TIM2_Init+0x124>)
 8001268:	f003 fa58 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001272:	f000 ffeb 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2208      	movs	r2, #8
 800127a:	4619      	mov	r1, r3
 800127c:	480b      	ldr	r0, [pc, #44]	@ (80012ac <MX_TIM2_Init+0x124>)
 800127e:	f003 fa4d 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001288:	f000 ffe0 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <MX_TIM2_Init+0x124>)
 8001290:	f003 f994 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001294:	2104      	movs	r1, #4
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_TIM2_Init+0x124>)
 8001298:	f003 f990 	bl	80045bc <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <MX_TIM2_Init+0x124>)
 800129e:	f001 f9b7 	bl	8002610 <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3738      	adds	r7, #56	@ 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20003e08 	.word	0x20003e08

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e0:	4b45      	ldr	r3, [pc, #276]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80012e2:	4a46      	ldr	r2, [pc, #280]	@ (80013fc <MX_TIM3_Init+0x14c>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80012e8:	2206      	movs	r2, #6
 80012ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b42      	ldr	r3, [pc, #264]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80012f2:	4b41      	ldr	r3, [pc, #260]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80012f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <MX_TIM3_Init+0x148>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001306:	483c      	ldr	r0, [pc, #240]	@ (80013f8 <MX_TIM3_Init+0x148>)
 8001308:	f003 f8b0 	bl	800446c <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001312:	f000 ff9b 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001320:	4619      	mov	r1, r3
 8001322:	4835      	ldr	r0, [pc, #212]	@ (80013f8 <MX_TIM3_Init+0x148>)
 8001324:	f003 fabc 	bl	80048a0 <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800132e:	f000 ff8d 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001332:	4831      	ldr	r0, [pc, #196]	@ (80013f8 <MX_TIM3_Init+0x148>)
 8001334:	f003 f8e9 	bl	800450a <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800133e:	f000 ff85 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	4829      	ldr	r0, [pc, #164]	@ (80013f8 <MX_TIM3_Init+0x148>)
 8001352:	f003 fe45 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800135c:	f000 ff76 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	2360      	movs	r3, #96	@ 0x60
 8001362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	4820      	ldr	r0, [pc, #128]	@ (80013f8 <MX_TIM3_Init+0x148>)
 8001378:	f003 f9d0 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001382:	f000 ff63 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2204      	movs	r2, #4
 800138a:	4619      	mov	r1, r3
 800138c:	481a      	ldr	r0, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0x148>)
 800138e:	f003 f9c5 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001398:	f000 ff58 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2208      	movs	r2, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013a4:	f003 f9ba 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80013ae:	f000 ff4d 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	220c      	movs	r2, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013ba:	f003 f9af 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80013c4:	f000 ff42 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013cc:	f003 f8f6 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013d0:	2104      	movs	r1, #4
 80013d2:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013d4:	f003 f8f2 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013d8:	2108      	movs	r1, #8
 80013da:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013dc:	f003 f8ee 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80013e0:	210c      	movs	r1, #12
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013e4:	f003 f8ea 	bl	80045bc <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e8:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <MX_TIM3_Init+0x148>)
 80013ea:	f001 f911 	bl	8002610 <HAL_TIM_MspPostInit>

}
 80013ee:	bf00      	nop
 80013f0:	3738      	adds	r7, #56	@ 0x38
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20003e50 	.word	0x20003e50
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <MX_USART2_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001438:	f003 fe92 	bl	8005160 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 ff03 	bl	800224c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20003e98 	.word	0x20003e98
 8001450:	40004400 	.word	0x40004400

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_DMA_Init+0x4c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a0f      	ldr	r2, [pc, #60]	@ (80014a0 <MX_DMA_Init+0x4c>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <MX_DMA_Init+0x4c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	2010      	movs	r0, #16
 800147c:	f001 fd87 	bl	8002f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001480:	2010      	movs	r0, #16
 8001482:	f001 fda0 	bl	8002fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2011      	movs	r0, #17
 800148c:	f001 fd7f 	bl	8002f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001490:	2011      	movs	r0, #17
 8001492:	f001 fd98 	bl	8002fc6 <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a25      	ldr	r2, [pc, #148]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001574 <MX_GPIO_Init+0xd0>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <MX_GPIO_Init+0xd0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_GPIO_Init+0xd0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <MX_GPIO_Init+0xd0>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_GPIO_Init+0xd0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2120      	movs	r1, #32
 800152e:	4812      	ldr	r0, [pc, #72]	@ (8001578 <MX_GPIO_Init+0xd4>)
 8001530:	f002 faea 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	480c      	ldr	r0, [pc, #48]	@ (800157c <MX_GPIO_Init+0xd8>)
 800154c:	f002 f958 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001550:	2320      	movs	r3, #32
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4804      	ldr	r0, [pc, #16]	@ (8001578 <MX_GPIO_Init+0xd4>)
 8001568:	f002 f94a 	bl	8003800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020800 	.word	0x40020800

08001580 <SetServoPosition>:
bool connection_lost = false;


//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CAMERA KONTROL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//--------------------------------------------------------------------------------------------------------------------
void SetServoPosition(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t* position, uint8_t step, uint8_t servoDirection, uint16_t camera) {
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	70fb      	strb	r3, [r7, #3]
    if (servoDirection > 0) {
 800158e:	7e3b      	ldrb	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00d      	beq.n	80015b0 <SetServoPosition+0x30>
        *position = (*position + step <= DEGREE_MAX) ? *position + step : DEGREE_MAX;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	4413      	add	r3, r2
 800159e:	f640 2228 	movw	r2, #2600	@ 0xa28
 80015a2:	4293      	cmp	r3, r2
 80015a4:	bfa8      	it	ge
 80015a6:	4613      	movge	r3, r2
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	e013      	b.n	80015d8 <SetServoPosition+0x58>
    }
    	else if (servoDirection < 0) {
        *position = (*position - step >= DEGREE_MIN) ? *position - step : DEGREE_MIN;
    }
    	else if (servoDirection == 0) {
 80015b0:	7e3b      	ldrb	r3, [r7, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d110      	bne.n	80015d8 <SetServoPosition+0x58>
    	*position = (camera > DEGREE_MAX) ? DEGREE_MAX : (camera < DEGREE_MIN) ? DEGREE_MIN : camera;
 80015b6:	8bbb      	ldrh	r3, [r7, #28]
 80015b8:	f640 2228 	movw	r2, #2600	@ 0xa28
 80015bc:	4293      	cmp	r3, r2
 80015be:	d807      	bhi.n	80015d0 <SetServoPosition+0x50>
 80015c0:	8bbb      	ldrh	r3, [r7, #28]
 80015c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80015c6:	bf38      	it	cc
 80015c8:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	e001      	b.n	80015d4 <SetServoPosition+0x54>
 80015d0:	f640 2228 	movw	r2, #2600	@ 0xa28
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	801a      	strh	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <SetServoPosition+0x6a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015e8:	e019      	b.n	800161e <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d106      	bne.n	80015fe <SetServoPosition+0x7e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8819      	ldrh	r1, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	460b      	mov	r3, r1
 80015fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015fc:	e00f      	b.n	800161e <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d106      	bne.n	8001612 <SetServoPosition+0x92>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	460b      	mov	r3, r1
 800160e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001610:	e005      	b.n	800161e <SetServoPosition+0x9e>
    __HAL_TIM_SET_COMPARE(htim, channel, *position);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8819      	ldrh	r1, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	460b      	mov	r3, r1
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <KameraKontrol>:

void KameraKontrol()
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af02      	add	r7, sp, #8
    static uint16_t degreey = 2200;
    static uint16_t degreex = 1500;

    degreex = (degreex > DEGREE_MAX) ? DEGREE_MAX : (degreex < DEGREE_MIN) ? DEGREE_MIN : degreex;
 8001632:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <KameraKontrol+0xdc>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	f640 2228 	movw	r2, #2600	@ 0xa28
 800163a:	4293      	cmp	r3, r2
 800163c:	d808      	bhi.n	8001650 <KameraKontrol+0x24>
 800163e:	4b32      	ldr	r3, [pc, #200]	@ (8001708 <KameraKontrol+0xdc>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001646:	bf38      	it	cc
 8001648:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 800164c:	b29b      	uxth	r3, r3
 800164e:	e001      	b.n	8001654 <KameraKontrol+0x28>
 8001650:	f640 2328 	movw	r3, #2600	@ 0xa28
 8001654:	4a2c      	ldr	r2, [pc, #176]	@ (8001708 <KameraKontrol+0xdc>)
 8001656:	8013      	strh	r3, [r2, #0]
    degreey = (degreey > DEGREE_MAX) ? DEGREE_MAX : (degreey < DEGREE_MIN) ? DEGREE_MIN : degreey;
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <KameraKontrol+0xe0>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001660:	4293      	cmp	r3, r2
 8001662:	d808      	bhi.n	8001676 <KameraKontrol+0x4a>
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <KameraKontrol+0xe0>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800166c:	bf38      	it	cc
 800166e:	f44f 73c8 	movcc.w	r3, #400	@ 0x190
 8001672:	b29b      	uxth	r3, r3
 8001674:	e001      	b.n	800167a <KameraKontrol+0x4e>
 8001676:	f640 2328 	movw	r3, #2600	@ 0xa28
 800167a:	4a24      	ldr	r2, [pc, #144]	@ (800170c <KameraKontrol+0xe0>)
 800167c:	8013      	strh	r3, [r2, #0]



    		SetServoPosition(&htim2, TIM_CHANNEL_2, &degreey, DEGREE_STEP, 0, rcjoystick.cameray);
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <KameraKontrol+0xe4>)
 8001680:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001684:	b29b      	uxth	r3, r3
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	230a      	movs	r3, #10
 800168e:	4a1f      	ldr	r2, [pc, #124]	@ (800170c <KameraKontrol+0xe0>)
 8001690:	2104      	movs	r1, #4
 8001692:	4820      	ldr	r0, [pc, #128]	@ (8001714 <KameraKontrol+0xe8>)
 8001694:	f7ff ff74 	bl	8001580 <SetServoPosition>


    switch (rcjoystick.camerax)
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <KameraKontrol+0xe4>)
 800169a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d011      	beq.n	80016c6 <KameraKontrol+0x9a>
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	dc2b      	bgt.n	80016fe <KameraKontrol+0xd2>
 80016a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016aa:	d01a      	beq.n	80016e2 <KameraKontrol+0xb6>
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d126      	bne.n	80016fe <KameraKontrol+0xd2>
    {
    	case 0: // Dur
    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, degreex);
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <KameraKontrol+0xdc>)
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <KameraKontrol+0xe8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2120      	movs	r1, #32
 80016be:	4816      	ldr	r0, [pc, #88]	@ (8001718 <KameraKontrol+0xec>)
 80016c0:	f002 fa22 	bl	8003b08 <HAL_GPIO_WritePin>
    		break;
 80016c4:	e01c      	b.n	8001700 <KameraKontrol+0xd4>

        case 1: // Sağa
            SetServoPosition(&htim2, TIM_CHANNEL_1, &degreex, DEGREE_STEP, 1, rcjoystick.camerax);
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <KameraKontrol+0xe4>)
 80016c8:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	230a      	movs	r3, #10
 80016d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <KameraKontrol+0xdc>)
 80016d8:	2100      	movs	r1, #0
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <KameraKontrol+0xe8>)
 80016dc:	f7ff ff50 	bl	8001580 <SetServoPosition>
            break;
 80016e0:	e00e      	b.n	8001700 <KameraKontrol+0xd4>

        case -1: // Sola
            SetServoPosition(&htim2, TIM_CHANNEL_1, &degreex, DEGREE_STEP, -1, rcjoystick.camerax);
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <KameraKontrol+0xe4>)
 80016e4:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	23ff      	movs	r3, #255	@ 0xff
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	230a      	movs	r3, #10
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <KameraKontrol+0xdc>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	4807      	ldr	r0, [pc, #28]	@ (8001714 <KameraKontrol+0xe8>)
 80016f8:	f7ff ff42 	bl	8001580 <SetServoPosition>
            break;
 80016fc:	e000      	b.n	8001700 <KameraKontrol+0xd4>

        default:
            // Geçersiz joystick z değeri
            break;
 80016fe:	bf00      	nop
    }
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000090 	.word	0x20000090
 800170c:	20000092 	.word	0x20000092
 8001710:	20000000 	.word	0x20000000
 8001714:	20003e08 	.word	0x20003e08
 8001718:	40020000 	.word	0x40020000

0800171c <speedToPWM>:

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< MOTOR KONTROL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//--------------------------------------------------------------------------------------------------------------------
/* --- Hız-PWM Uyumluluğu --- */
int16_t speedToPWM(int16_t speed, int16_t max_speed) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	80fb      	strh	r3, [r7, #6]
 8001728:	4613      	mov	r3, r2
 800172a:	80bb      	strh	r3, [r7, #4]
    return speed;
 800172c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <setPWM>:

/* --- PWM Ayarı --- */
void setPWM(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3, uint32_t channel, int16_t pwmvalue) {
 800173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001740:	b08f      	sub	sp, #60	@ 0x3c
 8001742:	af00      	add	r7, sp, #0
 8001744:	6378      	str	r0, [r7, #52]	@ 0x34
 8001746:	6339      	str	r1, [r7, #48]	@ 0x30
 8001748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800174a:	857b      	strh	r3, [r7, #42]	@ 0x2a



	if (pwmvalue >= 0 && pwmvalue <= 1000) {
 800174c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001750:	2b00      	cmp	r3, #0
 8001752:	db79      	blt.n	8001848 <setPWM+0x10c>
 8001754:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800175c:	dc74      	bgt.n	8001848 <setPWM+0x10c>
        __HAL_TIM_SET_COMPARE(htim1, channel, fabs(pwmvalue));
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d113      	bne.n	800178c <setPWM+0x50>
 8001764:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fef3 	bl	8000554 <__aeabi_i2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	623a      	str	r2, [r7, #32]
 8001774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001782:	f7fe ff51 	bl	8000628 <__aeabi_d2uiz>
 8001786:	4603      	mov	r3, r0
 8001788:	6363      	str	r3, [r4, #52]	@ 0x34
 800178a:	e040      	b.n	800180e <setPWM+0xd2>
 800178c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178e:	2b04      	cmp	r3, #4
 8001790:	d113      	bne.n	80017ba <setPWM+0x7e>
 8001792:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fedc 	bl	8000554 <__aeabi_i2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	61ba      	str	r2, [r7, #24]
 80017a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b0:	f7fe ff3a 	bl	8000628 <__aeabi_d2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80017b8:	e029      	b.n	800180e <setPWM+0xd2>
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d113      	bne.n	80017e8 <setPWM+0xac>
 80017c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fec5 	bl	8000554 <__aeabi_i2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	613a      	str	r2, [r7, #16]
 80017d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017de:	f7fe ff23 	bl	8000628 <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80017e6:	e012      	b.n	800180e <setPWM+0xd2>
 80017e8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feb1 	bl	8000554 <__aeabi_i2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001800:	681c      	ldr	r4, [r3, #0]
 8001802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001806:	f7fe ff0f 	bl	8000628 <__aeabi_d2uiz>
 800180a:	4603      	mov	r3, r0
 800180c:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, 0);
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <setPWM+0xe2>
 8001814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	635a      	str	r2, [r3, #52]	@ 0x34
 800181c:	e113      	b.n	8001a46 <setPWM+0x30a>
 800181e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001820:	2b04      	cmp	r3, #4
 8001822:	d104      	bne.n	800182e <setPWM+0xf2>
 8001824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	6393      	str	r3, [r2, #56]	@ 0x38
 800182c:	e10b      	b.n	8001a46 <setPWM+0x30a>
 800182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001830:	2b08      	cmp	r3, #8
 8001832:	d104      	bne.n	800183e <setPWM+0x102>
 8001834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800183c:	e103      	b.n	8001a46 <setPWM+0x30a>
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	6413      	str	r3, [r2, #64]	@ 0x40
 8001846:	e0fe      	b.n	8001a46 <setPWM+0x30a>
    }

    else if(pwmvalue >= -1000 && pwmvalue < 0 ) {
 8001848:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800184c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001850:	db75      	blt.n	800193e <setPWM+0x202>
 8001852:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001856:	2b00      	cmp	r3, #0
 8001858:	da71      	bge.n	800193e <setPWM+0x202>
        __HAL_TIM_SET_COMPARE(htim1, channel, 0);
 800185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <setPWM+0x12e>
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	@ 0x34
 8001868:	e013      	b.n	8001892 <setPWM+0x156>
 800186a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186c:	2b04      	cmp	r3, #4
 800186e:	d104      	bne.n	800187a <setPWM+0x13e>
 8001870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	6393      	str	r3, [r2, #56]	@ 0x38
 8001878:	e00b      	b.n	8001892 <setPWM+0x156>
 800187a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187c:	2b08      	cmp	r3, #8
 800187e:	d104      	bne.n	800188a <setPWM+0x14e>
 8001880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2300      	movs	r3, #0
 8001886:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001888:	e003      	b.n	8001892 <setPWM+0x156>
 800188a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, fabs(pwmvalue));
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d113      	bne.n	80018c0 <setPWM+0x184>
 8001898:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe59 	bl	8000554 <__aeabi_i2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	603a      	str	r2, [r7, #0]
 80018a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b0:	681c      	ldr	r4, [r3, #0]
 80018b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018b6:	f7fe feb7 	bl	8000628 <__aeabi_d2uiz>
 80018ba:	4603      	mov	r3, r0
 80018bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80018be:	e0c2      	b.n	8001a46 <setPWM+0x30a>
 80018c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d112      	bne.n	80018ec <setPWM+0x1b0>
 80018c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe42 	bl	8000554 <__aeabi_i2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4615      	mov	r5, r2
 80018d6:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80018da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018dc:	681c      	ldr	r4, [r3, #0]
 80018de:	4628      	mov	r0, r5
 80018e0:	4631      	mov	r1, r6
 80018e2:	f7fe fea1 	bl	8000628 <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80018ea:	e0ac      	b.n	8001a46 <setPWM+0x30a>
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d112      	bne.n	8001918 <setPWM+0x1dc>
 80018f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe2c 	bl	8000554 <__aeabi_i2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4692      	mov	sl, r2
 8001902:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001908:	681c      	ldr	r4, [r3, #0]
 800190a:	4650      	mov	r0, sl
 800190c:	4659      	mov	r1, fp
 800190e:	f7fe fe8b 	bl	8000628 <__aeabi_d2uiz>
 8001912:	4603      	mov	r3, r0
 8001914:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001916:	e096      	b.n	8001a46 <setPWM+0x30a>
 8001918:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe19 	bl	8000554 <__aeabi_i2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4690      	mov	r8, r2
 8001928:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800192e:	681c      	ldr	r4, [r3, #0]
 8001930:	4640      	mov	r0, r8
 8001932:	4649      	mov	r1, r9
 8001934:	f7fe fe78 	bl	8000628 <__aeabi_d2uiz>
 8001938:	4603      	mov	r3, r0
 800193a:	6423      	str	r3, [r4, #64]	@ 0x40
 800193c:	e083      	b.n	8001a46 <setPWM+0x30a>
    }

    else if(pwmvalue > 1000 ) {
 800193e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001942:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001946:	dd3c      	ble.n	80019c2 <setPWM+0x286>
        __HAL_TIM_SET_COMPARE(htim1, channel, 1000);
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <setPWM+0x21e>
 800194e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001956:	635a      	str	r2, [r3, #52]	@ 0x34
 8001958:	e016      	b.n	8001988 <setPWM+0x24c>
 800195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195c:	2b04      	cmp	r3, #4
 800195e:	d105      	bne.n	800196c <setPWM+0x230>
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001968:	6393      	str	r3, [r2, #56]	@ 0x38
 800196a:	e00d      	b.n	8001988 <setPWM+0x24c>
 800196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196e:	2b08      	cmp	r3, #8
 8001970:	d105      	bne.n	800197e <setPWM+0x242>
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800197c:	e004      	b.n	8001988 <setPWM+0x24c>
 800197e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, 0);
 8001988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198a:	2b00      	cmp	r3, #0
 800198c:	d104      	bne.n	8001998 <setPWM+0x25c>
 800198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 8001996:	e056      	b.n	8001a46 <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 0);
 8001998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199a:	2b04      	cmp	r3, #4
 800199c:	d104      	bne.n	80019a8 <setPWM+0x26c>
 800199e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80019a6:	e04e      	b.n	8001a46 <setPWM+0x30a>
 80019a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d104      	bne.n	80019b8 <setPWM+0x27c>
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2300      	movs	r3, #0
 80019b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019b6:	e046      	b.n	8001a46 <setPWM+0x30a>
 80019b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80019c0:	e041      	b.n	8001a46 <setPWM+0x30a>
    else if(pwmvalue < -1000 ) {
 80019c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80019c6:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80019ca:	da3c      	bge.n	8001a46 <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim1, channel, 0);
 80019cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d104      	bne.n	80019dc <setPWM+0x2a0>
 80019d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019da:	e013      	b.n	8001a04 <setPWM+0x2c8>
 80019dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d104      	bne.n	80019ec <setPWM+0x2b0>
 80019e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2300      	movs	r3, #0
 80019e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80019ea:	e00b      	b.n	8001a04 <setPWM+0x2c8>
 80019ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d104      	bne.n	80019fc <setPWM+0x2c0>
 80019f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80019fa:	e003      	b.n	8001a04 <setPWM+0x2c8>
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <setPWM+0x2da>
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a14:	e017      	b.n	8001a46 <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d105      	bne.n	8001a28 <setPWM+0x2ec>
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a24:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a26:	e00e      	b.n	8001a46 <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d105      	bne.n	8001a3a <setPWM+0x2fe>
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a36:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a38:	e005      	b.n	8001a46 <setPWM+0x30a>
        __HAL_TIM_SET_COMPARE(htim3, channel, 1000);
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a42:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a44:	e7ff      	b.n	8001a46 <setPWM+0x30a>
 8001a46:	bf00      	nop
 8001a48:	373c      	adds	r7, #60	@ 0x3c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a50 <calculatePID>:

/* --- PID Hesaplama --- */
float calculatePID(Wheel *wheel, int max_pwm, int min_pwm, int dt) {
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]


	float error = wheel->targetSpeed-wheel->currentSpeed;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a76:	edc7 7a06 	vstr	s15, [r7, #24]
    wheel->integralSpeed += error / dt;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a90:	ed97 6a06 	vldr	s12, [r7, #24]
 8001a94:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 2a90 	vmov	r2, s15
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]
    if (wheel->integralSpeed > wheel->integralLimit) wheel->integralSpeed = max_pwm / wheel->KP;  // Anti-windup
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	dd0f      	ble.n	8001ae4 <calculatePID+0x94>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001adc:	ee17 2a90 	vmov	r2, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]
    if (wheel->integralSpeed < -wheel->integralLimit) wheel->integralSpeed = min_pwm / wheel->KP;  // Anti-windup
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001af6:	eef1 7a67 	vneg.f32	s15, s15
 8001afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	d50f      	bpl.n	8001b24 <calculatePID+0xd4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 2a90 	vmov	r2, s15
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]

    float derivative = (error - wheel->previousErrorSpeed) * dt;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel->previousErrorSpeed = error;
 8001b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b54:	ee17 3a90 	vmov	r3, s15
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	809a      	strh	r2, [r3, #4]

    float output = wheel->KP * error + wheel->KI * wheel->integralSpeed + wheel->KD * derivative;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	edc7 7a07 	vstr	s15, [r7, #28]

    if (output > max_pwm) output = max_pwm;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dd06      	ble.n	8001bc2 <calculatePID+0x172>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbe:	edc7 7a07 	vstr	s15, [r7, #28]
    if (output < min_pwm) output = min_pwm;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	d506      	bpl.n	8001be8 <calculatePID+0x198>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	edc7 7a07 	vstr	s15, [r7, #28]

    return output;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	ee07 3a90 	vmov	s15, r3
}
 8001bee:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf2:	3724      	adds	r7, #36	@ 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <limitSpeedToPWM>:


/* --- Hız Sınırlandırma --- */
int16_t limitSpeedToPWM(int16_t speed, GroundType groundType, int16_t max_speed) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
 8001c06:	460b      	mov	r3, r1
 8001c08:	717b      	strb	r3, [r7, #5]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	807b      	strh	r3, [r7, #2]

	if(rcjoystick.light==1){
 8001c0e:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <limitSpeedToPWM+0xf0>)
 8001c10:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10f      	bne.n	8001c38 <limitSpeedToPWM+0x3c>
		speed=speed*(MAX_SPEED_S/1000);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	80fb      	strh	r3, [r7, #6]
		if (speed > MAX_SPEED_S) {speed = MAX_SPEED_S;}/*rgb yak*/
 8001c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c28:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	dd0b      	ble.n	8001c48 <limitSpeedToPWM+0x4c>
 8001c30:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	e007      	b.n	8001c48 <limitSpeedToPWM+0x4c>
	}/*rgb yak*/

	else{
		if (speed > max_speed) {speed = max_speed;}/*rgb yak*/
 8001c38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dd01      	ble.n	8001c48 <limitSpeedToPWM+0x4c>
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	80fb      	strh	r3, [r7, #6]
	}

	if (speed < MIN_SPEED_D) {speed = MIN_SPEED_D;}/*rgb yak*/
 8001c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c50:	da02      	bge.n	8001c58 <limitSpeedToPWM+0x5c>
 8001c52:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8001c56:	80fb      	strh	r3, [r7, #6]





	if (speed < MIN_SPEED_D) {speed = MIN_SPEED_D;}/*rgb yak*/
 8001c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c60:	da02      	bge.n	8001c68 <limitSpeedToPWM+0x6c>
 8001c62:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8001c66:	80fb      	strh	r3, [r7, #6]


	switch (groundType) {
 8001c68:	797b      	ldrb	r3, [r7, #5]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d002      	beq.n	8001c74 <limitSpeedToPWM+0x78>
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d017      	beq.n	8001ca2 <limitSpeedToPWM+0xa6>
 8001c72:	e02d      	b.n	8001cd0 <limitSpeedToPWM+0xd4>
        case GROUND_SLIPPERY:
            return speedToPWM(speed, max_speed)*0.5f; // Kaygan zemin: %50 hız
 8001c74:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fd4c 	bl	800171c <speedToPWM>
 8001c84:	4603      	mov	r3, r0
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9a:	ee17 3a90 	vmov	r3, s15
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	e01f      	b.n	8001ce2 <limitSpeedToPWM+0xe6>
        case GROUND_ROUGH:
            return speedToPWM(speed, max_speed)*0.8f; // Engebeli zemin: %80 hız
 8001ca2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd35 	bl	800171c <speedToPWM>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001cf0 <limitSpeedToPWM+0xf4>
 8001cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	e008      	b.n	8001ce2 <limitSpeedToPWM+0xe6>
        default:
            return speedToPWM(speed, max_speed);        // Normal zemin: Tam hız
 8001cd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fd1e 	bl	800171c <speedToPWM>
 8001ce0:	4603      	mov	r3, r0
		}
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	3f4ccccd 	.word	0x3f4ccccd

08001cf4 <controlWheel>:

uint64_t now;
/* --- Tekerlek Kontrolü --- */
void controlWheel(TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim3, uint32_t channel, Wheel *wheel) {
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]

	now = HAL_GetTick();
 8001d02:	f001 f85d 	bl	8002dc0 <HAL_GetTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	4615      	mov	r5, r2
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <controlWheel+0x70>)
 8001d10:	e9c3 4500 	strd	r4, r5, [r3]
	dt = now - last_heartbeat_time;
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <controlWheel+0x70>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <controlWheel+0x74>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <controlWheel+0x78>)
 8001d24:	601a      	str	r2, [r3, #0]

	int16_t pwmValue = calculatePID(wheel, MAX_SPEED_PWM, MIN_SPEED_PWM, dt);
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <controlWheel+0x78>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <controlWheel+0x7c>)
 8001d2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f7ff fe8d 	bl	8001a50 <calculatePID>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3e:	ee17 3a90 	vmov	r3, s15
 8001d42:	82fb      	strh	r3, [r7, #22]
	last_heartbeat_time = HAL_GetTick();
 8001d44:	f001 f83c 	bl	8002dc0 <HAL_GetTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <controlWheel+0x74>)
 8001d4c:	6013      	str	r3, [r2, #0]
	setPWM(htim1, htim3, channel, pwmValue);
 8001d4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fcf0 	bl	800173c <setPWM>

}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	20003fd0 	.word	0x20003fd0
 8001d68:	20003fbc 	.word	0x20003fbc
 8001d6c:	20003fb8 	.word	0x20003fb8
 8001d70:	fffffc18 	.word	0xfffffc18

08001d74 <controlDirection>:

/* --- Yon Kontrolü --- */
void controlDirection(int16_t Y, int16_t X, Direction *direction, int16_t *rotation_speedL, int16_t *rotation_speedR, uint8_t Gear){
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60ba      	str	r2, [r7, #8]
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	81fb      	strh	r3, [r7, #14]
 8001d82:	460b      	mov	r3, r1
 8001d84:	81bb      	strh	r3, [r7, #12]
    int16_t derivative = (error - direction->previousErrorDirection);
    direction->previousErrorDirection = error;

    int16_t output = Direction_KP * error + Direction_KI * direction->integralDirection + Direction_KD * derivative;*/

    int16_t output = X;
 8001d86:	89bb      	ldrh	r3, [r7, #12]
 8001d88:	82fb      	strh	r3, [r7, #22]
    if (output > MAX_DIRECTION_SPEED) output = MAX_DIRECTION_SPEED;
 8001d8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d8e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d92:	dd02      	ble.n	8001d9a <controlDirection+0x26>
 8001d94:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001d98:	82fb      	strh	r3, [r7, #22]
    if (output < MIN_DIRECTION_SPEED) output = MIN_DIRECTION_SPEED;
 8001d9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d9e:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001da2:	da02      	bge.n	8001daa <controlDirection+0x36>
 8001da4:	f64f 63d4 	movw	r3, #65236	@ 0xfed4
 8001da8:	82fb      	strh	r3, [r7, #22]


		*rotation_speedL=-output;
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	425b      	negs	r3, r3
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	801a      	strh	r2, [r3, #0]
		*rotation_speedR=output;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	8afa      	ldrh	r2, [r7, #22]
 8001dba:	801a      	strh	r2, [r3, #0]




}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <controlRover>:


/* --- Rover Kontrol Fonksiyonu --- */
void controlRover(TIM_HandleTypeDef *htim1,TIM_HandleTypeDef *htim3 , int16_t rotation_speedL, int16_t rotation_speedR, uint16_t throttle) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80bb      	strh	r3, [r7, #4]


	    leftFrontWheel.targetSpeed  = (limitSpeedToPWM(throttle+rotation_speedL , currentGround, MAX_SPEED_D));
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	8b3b      	ldrh	r3, [r7, #24]
 8001de2:	4413      	add	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e98 <controlRover+0xd0>)
 8001dea:	7811      	ldrb	r1, [r2, #0]
 8001dec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff03 	bl	8001bfc <limitSpeedToPWM>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <controlRover+0xd4>)
 8001dfc:	801a      	strh	r2, [r3, #0]
	    leftBackWheel.targetSpeed   = (limitSpeedToPWM(throttle+rotation_speedL , currentGround, MAX_SPEED_D));
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	8b3b      	ldrh	r3, [r7, #24]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <controlRover+0xd0>)
 8001e0a:	7811      	ldrb	r1, [r2, #0]
 8001e0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fef3 	bl	8001bfc <limitSpeedToPWM>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <controlRover+0xd8>)
 8001e1c:	801a      	strh	r2, [r3, #0]
	    rightFrontWheel.targetSpeed = (limitSpeedToPWM(throttle+rotation_speedR , currentGround, MAX_SPEED_D));
 8001e1e:	88ba      	ldrh	r2, [r7, #4]
 8001e20:	8b3b      	ldrh	r3, [r7, #24]
 8001e22:	4413      	add	r3, r2
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <controlRover+0xd0>)
 8001e2a:	7811      	ldrb	r1, [r2, #0]
 8001e2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fee3 	bl	8001bfc <limitSpeedToPWM>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <controlRover+0xdc>)
 8001e3c:	801a      	strh	r2, [r3, #0]
	    rightBackWheel.targetSpeed  = (limitSpeedToPWM(throttle+rotation_speedR , currentGround, MAX_SPEED_D));
 8001e3e:	88ba      	ldrh	r2, [r7, #4]
 8001e40:	8b3b      	ldrh	r3, [r7, #24]
 8001e42:	4413      	add	r3, r2
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <controlRover+0xd0>)
 8001e4a:	7811      	ldrb	r1, [r2, #0]
 8001e4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fed3 	bl	8001bfc <limitSpeedToPWM>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <controlRover+0xe0>)
 8001e5c:	801a      	strh	r2, [r3, #0]


	    controlWheel(htim1, htim3, TIM_CHANNEL_1, &leftFrontWheel);
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <controlRover+0xd4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff ff45 	bl	8001cf4 <controlWheel>
	    controlWheel(htim1, htim3, TIM_CHANNEL_2, &rightFrontWheel);
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <controlRover+0xdc>)
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff ff3f 	bl	8001cf4 <controlWheel>
	    controlWheel(htim1, htim3, TIM_CHANNEL_3, &leftBackWheel);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <controlRover+0xd8>)
 8001e78:	2208      	movs	r2, #8
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7ff ff39 	bl	8001cf4 <controlWheel>
	    controlWheel(htim1, htim3, TIM_CHANNEL_4, &rightBackWheel);
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <controlRover+0xe0>)
 8001e84:	220c      	movs	r2, #12
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff ff33 	bl	8001cf4 <controlWheel>



}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20003dbc 	.word	0x20003dbc
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	2000004c 	.word	0x2000004c
 8001ea4:	20000030 	.word	0x20000030
 8001ea8:	20000068 	.word	0x20000068

08001eac <subscription_callback_encoder>:



void subscription_callback_encoder(const void * msgin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	const rover_msgs__msg__EncoderMsg * incoming_msg = (const rover_msgs__msg__EncoderMsg *)msgin;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]

	leftFrontWheel.currentSpeed = incoming_msg->m1*2.6f ;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001f4c <subscription_callback_encoder+0xa0>
 8001ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed0:	ee17 3a90 	vmov	r3, s15
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <subscription_callback_encoder+0xa4>)
 8001ed8:	805a      	strh	r2, [r3, #2]
	rightFrontWheel.currentSpeed = incoming_msg->m2*2.6f;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001f4c <subscription_callback_encoder+0xa0>
 8001eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef2:	ee17 3a90 	vmov	r3, s15
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <subscription_callback_encoder+0xa8>)
 8001efa:	805a      	strh	r2, [r3, #2]
	leftBackWheel.currentSpeed = incoming_msg->m3*2.6f;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f08:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001f4c <subscription_callback_encoder+0xa0>
 8001f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <subscription_callback_encoder+0xac>)
 8001f1c:	805a      	strh	r2, [r3, #2]
	rightBackWheel.currentSpeed = incoming_msg->m4*2.6f;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f4c <subscription_callback_encoder+0xa0>
 8001f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f36:	ee17 3a90 	vmov	r3, s15
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <subscription_callback_encoder+0xb0>)
 8001f3e:	805a      	strh	r2, [r3, #2]

}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40266666 	.word	0x40266666
 8001f50:	20000014 	.word	0x20000014
 8001f54:	20000030 	.word	0x20000030
 8001f58:	2000004c 	.word	0x2000004c
 8001f5c:	20000068 	.word	0x20000068

08001f60 <subscription_callback_controller>:


void subscription_callback_controller(const void * msgin){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	6078      	str	r0, [r7, #4]


	// Cast received message to used type
	const rover_msgs__msg__ControllerMsg * incoming_msg = (const rover_msgs__msg__ControllerMsg *)msgin;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2120      	movs	r1, #32
 8001f70:	4839      	ldr	r0, [pc, #228]	@ (8002058 <subscription_callback_controller+0xf8>)
 8001f72:	f001 fdc9 	bl	8003b08 <HAL_GPIO_WritePin>
    //en son alinan mesajin kacinci saniyede alindigini tut
	last_message_time = HAL_GetTick();
 8001f76:	f000 ff23 	bl	8002dc0 <HAL_GetTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a37      	ldr	r2, [pc, #220]	@ (800205c <subscription_callback_controller+0xfc>)
 8001f7e:	6013      	str	r3, [r2, #0]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2120      	movs	r1, #32
 8001f84:	4834      	ldr	r0, [pc, #208]	@ (8002058 <subscription_callback_controller+0xf8>)
 8001f86:	f001 fdbf 	bl	8003b08 <HAL_GPIO_WritePin>
	rcjoystick.x = (int)incoming_msg->x;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <subscription_callback_controller+0x100>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
	rcjoystick.y = (int)incoming_msg->y;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <subscription_callback_controller+0x100>)
 8001fae:	edc3 7a01 	vstr	s15, [r3, #4]
	rcjoystick.throttle = (int)incoming_msg->throttle;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <subscription_callback_controller+0x100>)
 8001fc4:	811a      	strh	r2, [r3, #8]
	rcjoystick.camerax = (int)incoming_msg->camerax;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	b25a      	sxtb	r2, r3
 8001fcc:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <subscription_callback_controller+0x100>)
 8001fce:	735a      	strb	r2, [r3, #13]
	rcjoystick.cameray = (int)incoming_msg->cameray;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <subscription_callback_controller+0x100>)
 8001fd8:	815a      	strh	r2, [r3, #10]
	rcjoystick.light = (uint8_t)incoming_msg->light;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	b25a      	sxtb	r2, r3
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <subscription_callback_controller+0x100>)
 8001fe2:	731a      	strb	r2, [r3, #12]
	rcjoystick.gear = incoming_msg->gear;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <subscription_callback_controller+0x100>)
 8001fee:	741a      	strb	r2, [r3, #16]
	roverDirection.currentDirection = incoming_msg->yaw;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <subscription_callback_controller+0x104>)
 8001ff8:	805a      	strh	r2, [r3, #2]

    // Rover'ı kontrol et
    controlDirection(rcjoystick.y, rcjoystick.x, &roverDirection, &rotation_speedL, &rotation_speedR, rcjoystick.gear);
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <subscription_callback_controller+0x100>)
 8001ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002004:	ee17 3a90 	vmov	r3, s15
 8002008:	b218      	sxth	r0, r3
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <subscription_callback_controller+0x100>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	b219      	sxth	r1, r3
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <subscription_callback_controller+0x100>)
 800201c:	7c1b      	ldrb	r3, [r3, #16]
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <subscription_callback_controller+0x108>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <subscription_callback_controller+0x10c>)
 8002026:	4a0f      	ldr	r2, [pc, #60]	@ (8002064 <subscription_callback_controller+0x104>)
 8002028:	f7ff fea4 	bl	8001d74 <controlDirection>
    controlRover(&htim1, &htim3, rotation_speedL, rotation_speedR, rcjoystick.throttle);
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <subscription_callback_controller+0x10c>)
 800202e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <subscription_callback_controller+0x108>)
 8002034:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <subscription_callback_controller+0x100>)
 800203a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800203e:	b29b      	uxth	r3, r3
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	460b      	mov	r3, r1
 8002044:	490a      	ldr	r1, [pc, #40]	@ (8002070 <subscription_callback_controller+0x110>)
 8002046:	480b      	ldr	r0, [pc, #44]	@ (8002074 <subscription_callback_controller+0x114>)
 8002048:	f7ff febe 	bl	8001dc8 <controlRover>
    KameraKontrol();
 800204c:	f7ff faee 	bl	800162c <KameraKontrol>
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40020000 	.word	0x40020000
 800205c:	20003fc4 	.word	0x20003fc4
 8002060:	20000000 	.word	0x20000000
 8002064:	20000084 	.word	0x20000084
 8002068:	20003fb6 	.word	0x20003fb6
 800206c:	20003fb4 	.word	0x20003fb4
 8002070:	20003e50 	.word	0x20003e50
 8002074:	20003dc0 	.word	0x20003dc0

08002078 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b0d0      	sub	sp, #320	@ 0x140
 800207c:	af02      	add	r7, sp, #8
 800207e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002082:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002086:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8002088:	4b58      	ldr	r3, [pc, #352]	@ (80021ec <StartDefaultTask+0x174>)
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	4b58      	ldr	r3, [pc, #352]	@ (80021f0 <StartDefaultTask+0x178>)
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4b58      	ldr	r3, [pc, #352]	@ (80021f4 <StartDefaultTask+0x17c>)
 8002092:	4a59      	ldr	r2, [pc, #356]	@ (80021f8 <StartDefaultTask+0x180>)
 8002094:	4959      	ldr	r1, [pc, #356]	@ (80021fc <StartDefaultTask+0x184>)
 8002096:	2001      	movs	r0, #1
 8002098:	f007 fd5e 	bl	8009b58 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800209c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80020a0:	4618      	mov	r0, r3
 80020a2:	f007 fcb1 	bl	8009a08 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80020a6:	4b56      	ldr	r3, [pc, #344]	@ (8002200 <StartDefaultTask+0x188>)
 80020a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80020ac:	4b55      	ldr	r3, [pc, #340]	@ (8002204 <StartDefaultTask+0x18c>)
 80020ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80020b2:	4b55      	ldr	r3, [pc, #340]	@ (8002208 <StartDefaultTask+0x190>)
 80020b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80020b8:	4b54      	ldr	r3, [pc, #336]	@ (800220c <StartDefaultTask+0x194>)
 80020ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	      rclc_support_t support;
	      rclc_executor_t executor;
	      rcl_allocator_t allocator;


	      allocator = rcl_get_default_allocator();
 80020be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020c2:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 80020c6:	463b      	mov	r3, r7
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 fcab 	bl	8009a24 <rcutils_get_default_allocator>
 80020ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020d6:	461d      	mov	r5, r3
 80020d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020dc:	682b      	ldr	r3, [r5, #0]
 80020de:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 80020e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e4:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	f007 fbc6 	bl	800987c <rclc_support_init>


	      	    // create node
	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 80020f0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80020f4:	4a46      	ldr	r2, [pc, #280]	@ (8002210 <StartDefaultTask+0x198>)
 80020f6:	4947      	ldr	r1, [pc, #284]	@ (8002214 <StartDefaultTask+0x19c>)
 80020f8:	4847      	ldr	r0, [pc, #284]	@ (8002218 <StartDefaultTask+0x1a0>)
 80020fa:	f007 fc0d 	bl	8009918 <rclc_node_init_default>
	      rclc_executor_init(&executor, &support.context, 2, &allocator);
 80020fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002102:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002106:	1d19      	adds	r1, r3, #4
 8002108:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800210c:	4613      	mov	r3, r2
 800210e:	2202      	movs	r2, #2
 8002110:	f007 f956 	bl	80093c0 <rclc_executor_init>


	      	    // create subscription
	      rclc_subscription_init_default(
 8002114:	f007 fd36 	bl	8009b84 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>
 8002118:	4602      	mov	r2, r0
 800211a:	4b40      	ldr	r3, [pc, #256]	@ (800221c <StartDefaultTask+0x1a4>)
 800211c:	493e      	ldr	r1, [pc, #248]	@ (8002218 <StartDefaultTask+0x1a0>)
 800211e:	4840      	ldr	r0, [pc, #256]	@ (8002220 <StartDefaultTask+0x1a8>)
 8002120:	f007 fc36 	bl	8009990 <rclc_subscription_init_default>
	      	        &subscriber,
	      	        &nodesub,
	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, ControllerMsg),
	      	        "joystick_cmd");

	      rclc_subscription_init_default(
 8002124:	f007 fd30 	bl	8009b88 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8002128:	4602      	mov	r2, r0
 800212a:	4b3e      	ldr	r3, [pc, #248]	@ (8002224 <StartDefaultTask+0x1ac>)
 800212c:	493a      	ldr	r1, [pc, #232]	@ (8002218 <StartDefaultTask+0x1a0>)
 800212e:	483e      	ldr	r0, [pc, #248]	@ (8002228 <StartDefaultTask+0x1b0>)
 8002130:	f007 fc2e 	bl	8009990 <rclc_subscription_init_default>
	      	      	        &subscriber2,
	      	      	        &nodesub,
	      	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, EncoderMsg),
	      	      	        "encoder");

	      rclc_executor_add_subscription(
 8002134:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002138:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800213c:	2300      	movs	r3, #0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <StartDefaultTask+0x1b4>)
 8002142:	4939      	ldr	r1, [pc, #228]	@ (8002228 <StartDefaultTask+0x1b0>)
 8002144:	f007 f9b0 	bl	80094a8 <rclc_executor_add_subscription>
	      	      	      &executor, &subscriber2, &encodermsg,
	      	      	      &subscription_callback_encoder, ON_NEW_DATA);



	      rclc_executor_add_subscription(
 8002148:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 800214c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002150:	2300      	movs	r3, #0
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <StartDefaultTask+0x1b8>)
 8002156:	4932      	ldr	r1, [pc, #200]	@ (8002220 <StartDefaultTask+0x1a8>)
 8002158:	f007 f9a6 	bl	80094a8 <rclc_executor_add_subscription>


	  while(1)
	  {
		  //mesaj gelip gelmedigini kontrol et
		  rclc_executor_spin_some(&executor,100);
 800215c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002160:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	4608      	mov	r0, r1
 800216a:	f007 fb51 	bl	8009810 <rclc_executor_spin_some>

		  //programin calisma zamani
		  heartbeat_time = HAL_GetTick();
 800216e:	f000 fe27 	bl	8002dc0 <HAL_GetTick>
 8002172:	4603      	mov	r3, r0
 8002174:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <StartDefaultTask+0x1bc>)
 8002176:	6013      	str	r3, [r2, #0]

		  //250 milisaniye boyunca mesaj alinmamissa motorlari durdur.
		  if (HAL_GetTick() - last_message_time > 250) {
 8002178:	f000 fe22 	bl	8002dc0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <StartDefaultTask+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2bfa      	cmp	r3, #250	@ 0xfa
 8002186:	d903      	bls.n	8002190 <StartDefaultTask+0x118>
		      connection_lost = true;
 8002188:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <StartDefaultTask+0x1c4>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e002      	b.n	8002196 <StartDefaultTask+0x11e>
		  }
		  else {
		      connection_lost = false;
 8002190:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <StartDefaultTask+0x1c4>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
		  }

		  if(connection_lost == true){
 8002196:	4b29      	ldr	r3, [pc, #164]	@ (800223c <StartDefaultTask+0x1c4>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0de      	beq.n	800215c <StartDefaultTask+0xe4>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800219e:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <StartDefaultTask+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80021a6:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <StartDefaultTask+0x1c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <StartDefaultTask+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 80021b6:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <StartDefaultTask+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40

		    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80021be:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <StartDefaultTask+0x1cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <StartDefaultTask+0x1cc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80021ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <StartDefaultTask+0x1cc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80021d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <StartDefaultTask+0x1cc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2120      	movs	r1, #32
 80021e2:	4819      	ldr	r0, [pc, #100]	@ (8002248 <StartDefaultTask+0x1d0>)
 80021e4:	f001 fc90 	bl	8003b08 <HAL_GPIO_WritePin>
		  rclc_executor_spin_some(&executor,100);
 80021e8:	e7b8      	b.n	800215c <StartDefaultTask+0xe4>
 80021ea:	bf00      	nop
 80021ec:	08002bf9 	.word	0x08002bf9
 80021f0:	08002b91 	.word	0x08002b91
 80021f4:	08002b71 	.word	0x08002b71
 80021f8:	08002b45 	.word	0x08002b45
 80021fc:	20003e98 	.word	0x20003e98
 8002200:	08002255 	.word	0x08002255
 8002204:	08002299 	.word	0x08002299
 8002208:	080022d1 	.word	0x080022d1
 800220c:	0800233d 	.word	0x0800233d
 8002210:	0801548c 	.word	0x0801548c
 8002214:	08015490 	.word	0x08015490
 8002218:	20003fa4 	.word	0x20003fa4
 800221c:	0801549c 	.word	0x0801549c
 8002220:	20003fac 	.word	0x20003fac
 8002224:	080154ac 	.word	0x080154ac
 8002228:	20003fb0 	.word	0x20003fb0
 800222c:	08001ead 	.word	0x08001ead
 8002230:	08001f61 	.word	0x08001f61
 8002234:	20003fc0 	.word	0x20003fc0
 8002238:	20003fc4 	.word	0x20003fc4
 800223c:	20003fc8 	.word	0x20003fc8
 8002240:	20003dc0 	.word	0x20003dc0
 8002244:	20003e50 	.word	0x20003e50
 8002248:	40020000 	.word	0x40020000

0800224c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <Error_Handler+0x4>

08002254 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <microros_allocate+0x3c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <microros_allocate+0x3c>)
 800226c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <microros_allocate+0x40>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <microros_allocate+0x40>)
 800227c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fbba 	bl	80009f8 <pvPortMallocMicroROS>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20003fd8 	.word	0x20003fd8
 8002294:	20003fdc 	.word	0x20003fdc

08002298 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00c      	beq.n	80022c2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe fcc9 	bl	8000c40 <getBlockSize>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a06      	ldr	r2, [pc, #24]	@ (80022cc <microros_deallocate+0x34>)
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <microros_deallocate+0x34>)
 80022ba:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7fe fc63 	bl	8000b88 <vPortFreeMicroROS>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20003fdc 	.word	0x20003fdc

080022d0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022dc:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <microros_reallocate+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4413      	add	r3, r2
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <microros_reallocate+0x64>)
 80022ea:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80022ec:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <microros_reallocate+0x68>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <microros_reallocate+0x68>)
 80022fa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d104      	bne.n	800230c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002302:	68b8      	ldr	r0, [r7, #8]
 8002304:	f7fe fb78 	bl	80009f8 <pvPortMallocMicroROS>
 8002308:	4603      	mov	r3, r0
 800230a:	e00e      	b.n	800232a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7fe fc97 	bl	8000c40 <getBlockSize>
 8002312:	4603      	mov	r3, r0
 8002314:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <microros_reallocate+0x68>)
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	461a      	mov	r2, r3
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <microros_reallocate+0x68>)
 800231e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7fe fcaa 	bl	8000c7c <pvPortReallocMicroROS>
 8002328:	4603      	mov	r3, r0
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20003fd8 	.word	0x20003fd8
 8002338:	20003fdc 	.word	0x20003fdc

0800233c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	4a0c      	ldr	r2, [pc, #48]	@ (8002384 <microros_zero_allocate+0x48>)
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	4413      	add	r3, r2
 8002356:	461a      	mov	r2, r3
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <microros_zero_allocate+0x48>)
 800235a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	4a08      	ldr	r2, [pc, #32]	@ (8002388 <microros_zero_allocate+0x4c>)
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	4413      	add	r3, r2
 800236a:	461a      	mov	r2, r3
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <microros_zero_allocate+0x4c>)
 800236e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7fe fcaf 	bl	8000cd6 <pvPortCallocMicroROS>
 8002378:	4603      	mov	r3, r0
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20003fd8 	.word	0x20003fd8
 8002388:	20003fdc 	.word	0x20003fdc
 800238c:	00000000 	.word	0x00000000

08002390 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002390:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80023a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023a6:	a320      	add	r3, pc, #128	@ (adr r3, 8002428 <UTILS_NanosecondsToTimespec+0x98>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f95c 	bl	8000668 <__aeabi_ldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80023ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023be:	a31a      	add	r3, pc, #104	@ (adr r3, 8002428 <UTILS_NanosecondsToTimespec+0x98>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe f950 	bl	8000668 <__aeabi_ldivmod>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da20      	bge.n	8002416 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a11      	ldr	r2, [pc, #68]	@ (8002420 <UTILS_NanosecondsToTimespec+0x90>)
 80023da:	fb82 1203 	smull	r1, r2, r2, r3
 80023de:	1712      	asrs	r2, r2, #28
 80023e0:	17db      	asrs	r3, r3, #31
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	6979      	ldr	r1, [r7, #20]
 80023f0:	17c8      	asrs	r0, r1, #31
 80023f2:	460c      	mov	r4, r1
 80023f4:	4605      	mov	r5, r0
 80023f6:	ebb2 0804 	subs.w	r8, r2, r4
 80023fa:	eb63 0905 	sbc.w	r9, r3, r5
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4906      	ldr	r1, [pc, #24]	@ (8002424 <UTILS_NanosecondsToTimespec+0x94>)
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
    }
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002420:	44b82fa1 	.word	0x44b82fa1
 8002424:	3b9aca00 	.word	0x3b9aca00
 8002428:	3b9aca00 	.word	0x3b9aca00
 800242c:	00000000 	.word	0x00000000

08002430 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002434:	b08e      	sub	sp, #56	@ 0x38
 8002436:	af00      	add	r7, sp, #0
 8002438:	6278      	str	r0, [r7, #36]	@ 0x24
 800243a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800243c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002440:	2300      	movs	r3, #0
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002456:	4618      	mov	r0, r3
 8002458:	f005 fcc0 	bl	8007ddc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245e:	17da      	asrs	r2, r3, #31
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	61fa      	str	r2, [r7, #28]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	000b      	movs	r3, r1
 8002470:	2200      	movs	r2, #0
 8002472:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002478:	2200      	movs	r2, #0
 800247a:	461c      	mov	r4, r3
 800247c:	4615      	mov	r5, r2
 800247e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002482:	1911      	adds	r1, r2, r4
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	416b      	adcs	r3, r5
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800248e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002492:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	f04f 0400 	mov.w	r4, #0
 800249e:	f04f 0500 	mov.w	r5, #0
 80024a2:	015d      	lsls	r5, r3, #5
 80024a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80024a8:	0154      	lsls	r4, r2, #5
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	ebb2 0800 	subs.w	r8, r2, r0
 80024b2:	eb63 0901 	sbc.w	r9, r3, r1
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80024c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80024c6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80024ca:	4690      	mov	r8, r2
 80024cc:	4699      	mov	r9, r3
 80024ce:	eb18 0a00 	adds.w	sl, r8, r0
 80024d2:	eb49 0b01 	adc.w	fp, r9, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024ea:	ebb2 040a 	subs.w	r4, r2, sl
 80024ee:	603c      	str	r4, [r7, #0]
 80024f0:	eb63 030b 	sbc.w	r3, r3, fp
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fa:	4623      	mov	r3, r4
 80024fc:	181b      	adds	r3, r3, r0
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	462b      	mov	r3, r5
 8002502:	eb41 0303 	adc.w	r3, r1, r3
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800250e:	f7ff ff3f 	bl	8002390 <UTILS_NanosecondsToTimespec>

    return 0;
 8002512:	2300      	movs	r3, #0
 8002514:	4618      	mov	r0, r3
 8002516:	3738      	adds	r7, #56	@ 0x38
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_MspInit+0x54>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	4a11      	ldr	r2, [pc, #68]	@ (8002574 <HAL_MspInit+0x54>)
 8002530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002534:	6453      	str	r3, [r2, #68]	@ 0x44
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_MspInit+0x54>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_MspInit+0x54>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_MspInit+0x54>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	@ 0x40
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_MspInit+0x54>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	f06f 0001 	mvn.w	r0, #1
 8002566:	f000 fd12 	bl	8002f8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_TIM_Base_MspInit+0x8c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025a6:	e026      	b.n	80025f6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	4a13      	ldr	r2, [pc, #76]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
}
 80025ce:	e012      	b.n	80025f6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <HAL_TIM_Base_MspInit+0x94>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10d      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a09      	ldr	r2, [pc, #36]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <HAL_TIM_Base_MspInit+0x90>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000
 8002608:	40023800 	.word	0x40023800
 800260c:	40000400 	.word	0x40000400

08002610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a55      	ldr	r2, [pc, #340]	@ (8002784 <HAL_TIM_MspPostInit+0x174>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d11f      	bne.n	8002672 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	4b54      	ldr	r3, [pc, #336]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a53      	ldr	r2, [pc, #332]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b51      	ldr	r3, [pc, #324]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800264e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002660:	2301      	movs	r3, #1
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	4848      	ldr	r0, [pc, #288]	@ (800278c <HAL_TIM_MspPostInit+0x17c>)
 800266c:	f001 f8c8 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002670:	e083      	b.n	800277a <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267a:	d13d      	bne.n	80026f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	4b41      	ldr	r3, [pc, #260]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	4a40      	ldr	r2, [pc, #256]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6313      	str	r3, [r2, #48]	@ 0x30
 800268c:	4b3e      	ldr	r3, [pc, #248]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	4b3a      	ldr	r3, [pc, #232]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a8:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Camera_X_Pin|Camera_Y_Pin;
 80026b4:	2303      	movs	r3, #3
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c4:	2301      	movs	r3, #1
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	4619      	mov	r1, r3
 80026ce:	482f      	ldr	r0, [pc, #188]	@ (800278c <HAL_TIM_MspPostInit+0x17c>)
 80026d0:	f001 f896 	bl	8003800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	4827      	ldr	r0, [pc, #156]	@ (8002790 <HAL_TIM_MspPostInit+0x180>)
 80026f2:	f001 f885 	bl	8003800 <HAL_GPIO_Init>
}
 80026f6:	e040      	b.n	800277a <HAL_TIM_MspPostInit+0x16a>
  else if(htim->Instance==TIM3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a25      	ldr	r2, [pc, #148]	@ (8002794 <HAL_TIM_MspPostInit+0x184>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d13b      	bne.n	800277a <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a1f      	ldr	r2, [pc, #124]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <HAL_TIM_MspPostInit+0x178>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800273a:	23c0      	movs	r3, #192	@ 0xc0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800274a:	2302      	movs	r3, #2
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	480d      	ldr	r0, [pc, #52]	@ (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002756:	f001 f853 	bl	8003800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800275a:	2303      	movs	r3, #3
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800276a:	2302      	movs	r3, #2
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276e:	f107 031c 	add.w	r3, r7, #28
 8002772:	4619      	mov	r1, r3
 8002774:	4806      	ldr	r0, [pc, #24]	@ (8002790 <HAL_TIM_MspPostInit+0x180>)
 8002776:	f001 f843 	bl	8003800 <HAL_GPIO_Init>
}
 800277a:	bf00      	nop
 800277c:	3730      	adds	r7, #48	@ 0x30
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40000400 	.word	0x40000400

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4d      	ldr	r2, [pc, #308]	@ (80028ec <HAL_UART_MspInit+0x154>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f040 8093 	bne.w	80028e2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	4b4b      	ldr	r3, [pc, #300]	@ (80028f0 <HAL_UART_MspInit+0x158>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <HAL_UART_MspInit+0x158>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80027cc:	4b48      	ldr	r3, [pc, #288]	@ (80028f0 <HAL_UART_MspInit+0x158>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b44      	ldr	r3, [pc, #272]	@ (80028f0 <HAL_UART_MspInit+0x158>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	4a43      	ldr	r2, [pc, #268]	@ (80028f0 <HAL_UART_MspInit+0x158>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e8:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <HAL_UART_MspInit+0x158>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027f4:	230c      	movs	r3, #12
 80027f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002804:	2307      	movs	r3, #7
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	4839      	ldr	r0, [pc, #228]	@ (80028f4 <HAL_UART_MspInit+0x15c>)
 8002810:	f000 fff6 	bl	8003800 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002814:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002816:	4a39      	ldr	r2, [pc, #228]	@ (80028fc <HAL_UART_MspInit+0x164>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800281a:	4b37      	ldr	r3, [pc, #220]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 800281c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002820:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002822:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002828:	4b33      	ldr	r3, [pc, #204]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800282e:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002830:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002834:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002836:	4b30      	ldr	r3, [pc, #192]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283c:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002842:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002848:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800284a:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 800284c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002850:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002854:	2200      	movs	r2, #0
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002858:	4827      	ldr	r0, [pc, #156]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 800285a:	f000 fbcf 	bl	8002ffc <HAL_DMA_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002864:	f7ff fcf2 	bl	800224c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a23      	ldr	r2, [pc, #140]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 800286c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800286e:	4a22      	ldr	r2, [pc, #136]	@ (80028f8 <HAL_UART_MspInit+0x160>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002874:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <HAL_UART_MspInit+0x168>)
 8002876:	4a23      	ldr	r2, [pc, #140]	@ (8002904 <HAL_UART_MspInit+0x16c>)
 8002878:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800287a:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <HAL_UART_MspInit+0x168>)
 800287c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002880:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002882:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <HAL_UART_MspInit+0x168>)
 8002884:	2240      	movs	r2, #64	@ 0x40
 8002886:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002888:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_UART_MspInit+0x168>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800288e:	4b1c      	ldr	r3, [pc, #112]	@ (8002900 <HAL_UART_MspInit+0x168>)
 8002890:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002894:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002896:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <HAL_UART_MspInit+0x168>)
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800289c:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <HAL_UART_MspInit+0x168>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028a2:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_UART_MspInit+0x168>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028a8:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_UART_MspInit+0x168>)
 80028aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HAL_UART_MspInit+0x168>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028b6:	4812      	ldr	r0, [pc, #72]	@ (8002900 <HAL_UART_MspInit+0x168>)
 80028b8:	f000 fba0 	bl	8002ffc <HAL_DMA_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80028c2:	f7ff fcc3 	bl	800224c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_UART_MspInit+0x168>)
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80028cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002900 <HAL_UART_MspInit+0x168>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2105      	movs	r1, #5
 80028d6:	2026      	movs	r0, #38	@ 0x26
 80028d8:	f000 fb59 	bl	8002f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028dc:	2026      	movs	r0, #38	@ 0x26
 80028de:	f000 fb72 	bl	8002fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40004400 	.word	0x40004400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	20003ee0 	.word	0x20003ee0
 80028fc:	40026088 	.word	0x40026088
 8002900:	20003f40 	.word	0x20003f40
 8002904:	400260a0 	.word	0x400260a0

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <NMI_Handler+0x4>

08002910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <MemManage_Handler+0x4>

08002920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <UsageFault_Handler+0x4>

08002930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002942:	f000 fa29 	bl	8002d98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002946:	f005 fbcd 	bl	80080e4 <xTaskGetSchedulerState>
 800294a:	4603      	mov	r3, r0
 800294c:	2b01      	cmp	r3, #1
 800294e:	d001      	beq.n	8002954 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002950:	f006 f9c2 	bl	8008cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <DMA1_Stream5_IRQHandler+0x10>)
 800295e:	f000 fce5 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20003ee0 	.word	0x20003ee0

0800296c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002970:	4802      	ldr	r0, [pc, #8]	@ (800297c <DMA1_Stream6_IRQHandler+0x10>)
 8002972:	f000 fcdb 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20003f40 	.word	0x20003f40

08002980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002984:	4802      	ldr	r0, [pc, #8]	@ (8002990 <USART2_IRQHandler+0x10>)
 8002986:	f002 fd4f 	bl	8005428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20003e98 	.word	0x20003e98

08002994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return 1;
 8002998:	2301      	movs	r3, #1
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_kill>:

int _kill(int pid, int sig)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ae:	f011 fe53 	bl	8014658 <__errno>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2216      	movs	r2, #22
 80029b6:	601a      	str	r2, [r3, #0]
  return -1;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_exit>:

void _exit (int status)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ffe7 	bl	80029a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029d6:	bf00      	nop
 80029d8:	e7fd      	b.n	80029d6 <_exit+0x12>

080029da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e00a      	b.n	8002a02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ec:	f3af 8000 	nop.w
 80029f0:	4601      	mov	r1, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	60ba      	str	r2, [r7, #8]
 80029f8:	b2ca      	uxtb	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	dbf0      	blt.n	80029ec <_read+0x12>
  }

  return len;
 8002a0a:	687b      	ldr	r3, [r7, #4]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e009      	b.n	8002a3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	60ba      	str	r2, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3301      	adds	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dbf1      	blt.n	8002a26 <_write+0x12>
  }
  return len;
 8002a42:	687b      	ldr	r3, [r7, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_close>:

int _close(int file)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a74:	605a      	str	r2, [r3, #4]
  return 0;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_isatty>:

int _isatty(int file)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002abc:	4a14      	ldr	r2, [pc, #80]	@ (8002b10 <_sbrk+0x5c>)
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <_sbrk+0x60>)
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac8:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <_sbrk+0x64>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <_sbrk+0x64>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <_sbrk+0x68>)
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <_sbrk+0x64>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d207      	bcs.n	8002af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae4:	f011 fdb8 	bl	8014658 <__errno>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	220c      	movs	r2, #12
 8002aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002af2:	e009      	b.n	8002b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af4:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <_sbrk+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <_sbrk+0x64>)
 8002b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20018000 	.word	0x20018000
 8002b14:	00000400 	.word	0x00000400
 8002b18:	20003fe4 	.word	0x20003fe4
 8002b1c:	2000dde8 	.word	0x2000dde8

08002b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <SystemInit+0x20>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	4a05      	ldr	r2, [pc, #20]	@ (8002b40 <SystemInit+0x20>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b52:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b58:	4904      	ldr	r1, [pc, #16]	@ (8002b6c <cubemx_transport_open+0x28>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f002 fbc0 	bl	80052e0 <HAL_UART_Receive_DMA>
    return true;
 8002b60:	2301      	movs	r3, #1
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20003fe8 	.word	0x20003fe8

08002b70 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b7e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f002 fbd2 	bl	800532a <HAL_UART_DMAStop>
    return true;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ba4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d11c      	bne.n	8002bec <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f002 fb20 	bl	8005200 <HAL_UART_Transmit_DMA>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bc4:	e002      	b.n	8002bcc <cubemx_transport_write+0x3c>
            osDelay(1);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f003 fe3c 	bl	8006844 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <cubemx_transport_write+0x4e>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d1f3      	bne.n	8002bc6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <cubemx_transport_write+0x58>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	e002      	b.n	8002bee <cubemx_transport_write+0x5e>
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002bec:	2300      	movs	r3, #0
    }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002c0c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c12:	b672      	cpsid	i
}
 8002c14:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002c22:	4a1c      	ldr	r2, [pc, #112]	@ (8002c94 <cubemx_transport_read+0x9c>)
 8002c24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c26:	b662      	cpsie	i
}
 8002c28:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f003 fe07 	bl	8006844 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002c36:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <cubemx_transport_read+0xa0>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <cubemx_transport_read+0x9c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d103      	bne.n	8002c4a <cubemx_transport_read+0x52>
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dbe3      	blt.n	8002c12 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c4e:	e011      	b.n	8002c74 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <cubemx_transport_read+0xa0>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	440b      	add	r3, r1
 8002c5a:	4910      	ldr	r1, [pc, #64]	@ (8002c9c <cubemx_transport_read+0xa4>)
 8002c5c:	5c8a      	ldrb	r2, [r1, r2]
 8002c5e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002c60:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <cubemx_transport_read+0xa0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c98 <cubemx_transport_read+0xa0>)
 8002c6c:	6013      	str	r3, [r2, #0]
        wrote++;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <cubemx_transport_read+0xa0>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <cubemx_transport_read+0x9c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d003      	beq.n	8002c88 <cubemx_transport_read+0x90>
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3e3      	bcc.n	8002c50 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002c88:	69bb      	ldr	r3, [r7, #24]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200047ec 	.word	0x200047ec
 8002c98:	200047e8 	.word	0x200047e8
 8002c9c:	20003fe8 	.word	0x20003fe8

08002ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ca4:	f7ff ff3c 	bl	8002b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca8:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002caa:	490d      	ldr	r1, [pc, #52]	@ (8002ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002cce:	f011 fcc9 	bl	8014664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd2:	f7fe f8e1 	bl	8000e98 <main>
  bx  lr    
 8002cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002ce4:	08015fe8 	.word	0x08015fe8
  ldr r2, =_sbss
 8002ce8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8002cec:	2000dde8 	.word	0x2000dde8

08002cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC_IRQHandler>
	...

08002cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d34 <HAL_Init+0x40>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <HAL_Init+0x40>)
 8002cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <HAL_Init+0x40>)
 8002d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d10:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a07      	ldr	r2, [pc, #28]	@ (8002d34 <HAL_Init+0x40>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d1c:	2003      	movs	r0, #3
 8002d1e:	f000 f92b 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d22:	200f      	movs	r0, #15
 8002d24:	f000 f808 	bl	8002d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d28:	f7ff fbfa 	bl	8002520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00

08002d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_InitTick+0x54>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_InitTick+0x58>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f943 	bl	8002fe2 <HAL_SYSTICK_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00e      	b.n	8002d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b0f      	cmp	r3, #15
 8002d6a:	d80a      	bhi.n	8002d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d74:	f000 f90b 	bl	8002f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d78:	4a06      	ldr	r2, [pc, #24]	@ (8002d94 <HAL_InitTick+0x5c>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000098 	.word	0x20000098
 8002d90:	200000a0 	.word	0x200000a0
 8002d94:	2000009c 	.word	0x2000009c

08002d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_IncTick+0x20>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_IncTick+0x24>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <HAL_IncTick+0x24>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200000a0 	.word	0x200000a0
 8002dbc:	200047f0 	.word	0x200047f0

08002dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <HAL_GetTick+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	200047f0 	.word	0x200047f0

08002dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0a:	4a04      	ldr	r2, [pc, #16]	@ (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db0b      	blt.n	8002e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4907      	ldr	r1, [pc, #28]	@ (8002e74 <__NVIC_EnableIRQ+0x38>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	@ (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	@ (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	@ 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	@ 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f44:	d301      	bcc.n	8002f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <SysTick_Config+0x40>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f52:	210f      	movs	r1, #15
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f58:	f7ff ff8e 	bl	8002e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <SysTick_Config+0x40>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <SysTick_Config+0x40>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff29 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa0:	f7ff ff3e 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff8e 	bl	8002ecc <NVIC_EncodePriority>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff5d 	bl	8002e78 <__NVIC_SetPriority>
}
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff31 	bl	8002e3c <__NVIC_EnableIRQ>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ffa2 	bl	8002f34 <SysTick_Config>
 8002ff0:	4603      	mov	r3, r0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff feda 	bl	8002dc0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e099      	b.n	800314c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003038:	e00f      	b.n	800305a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303a:	f7ff fec1 	bl	8002dc0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b05      	cmp	r3, #5
 8003046:	d908      	bls.n	800305a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e078      	b.n	800314c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e8      	bne.n	800303a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4b38      	ldr	r3, [pc, #224]	@ (8003154 <HAL_DMA_Init+0x158>)
 8003074:	4013      	ands	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d107      	bne.n	80030c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0307 	bic.w	r3, r3, #7
 80030da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d117      	bne.n	800311e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fb01 	bl	8003708 <DMA_CheckFifoParam>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2240      	movs	r2, #64	@ 0x40
 8003110:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800311a:	2301      	movs	r3, #1
 800311c:	e016      	b.n	800314c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fab8 	bl	800369c <DMA_CalcBaseAndBitshift>
 800312c:	4603      	mov	r3, r0
 800312e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	223f      	movs	r2, #63	@ 0x3f
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	f010803f 	.word	0xf010803f

08003158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_DMA_Start_IT+0x26>
 800317a:	2302      	movs	r3, #2
 800317c:	e040      	b.n	8003200 <HAL_DMA_Start_IT+0xa8>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d12f      	bne.n	80031f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fa4a 	bl	8003640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	223f      	movs	r2, #63	@ 0x3f
 80031b2:	409a      	lsls	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0216 	orr.w	r2, r2, #22
 80031c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e005      	b.n	80031fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003216:	f7ff fdd3 	bl	8002dc0 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d008      	beq.n	800323a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2280      	movs	r2, #128	@ 0x80
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e052      	b.n	80032e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0216 	bic.w	r2, r2, #22
 8003248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_DMA_Abort+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0208 	bic.w	r2, r2, #8
 8003278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328a:	e013      	b.n	80032b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328c:	f7ff fd98 	bl	8002dc0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b05      	cmp	r3, #5
 8003298:	d90c      	bls.n	80032b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e015      	b.n	80032e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	223f      	movs	r2, #63	@ 0x3f
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00c      	b.n	8003320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2205      	movs	r2, #5
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003338:	4b8e      	ldr	r3, [pc, #568]	@ (8003574 <HAL_DMA_IRQHandler+0x248>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a8e      	ldr	r2, [pc, #568]	@ (8003578 <HAL_DMA_IRQHandler+0x24c>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	2208      	movs	r2, #8
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	2208      	movs	r2, #8
 8003386:	409a      	lsls	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	2204      	movs	r2, #4
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d043      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03c      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	2210      	movs	r2, #16
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d018      	beq.n	800346e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d024      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e01f      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e016      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0208 	bic.w	r2, r2, #8
 800348a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	2220      	movs	r2, #32
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808f 	beq.w	80035cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8087 	beq.w	80035cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	2220      	movs	r2, #32
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d136      	bne.n	8003544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0216 	bic.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_DMA_IRQHandler+0x1da>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	223f      	movs	r2, #63	@ 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d07e      	beq.n	8003638 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
        }
        return;
 8003542:	e079      	b.n	8003638 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01d      	beq.n	800358e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	2b00      	cmp	r3, #0
 8003566:	d031      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
 8003570:	e02c      	b.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
 8003572:	bf00      	nop
 8003574:	20000098 	.word	0x20000098
 8003578:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	e01e      	b.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10f      	bne.n	80035bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0210 	bic.w	r2, r2, #16
 80035aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d032      	beq.n	800363a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d022      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2205      	movs	r2, #5
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	d307      	bcc.n	8003614 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f2      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x2cc>
 8003612:	e000      	b.n	8003616 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003614:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4798      	blx	r3
 8003636:	e000      	b.n	800363a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003638:	bf00      	nop
    }
  }
}
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800365c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d108      	bne.n	8003680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800367e:	e007      	b.n	8003690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3b10      	subs	r3, #16
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <DMA_CalcBaseAndBitshift+0x64>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b6:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <DMA_CalcBaseAndBitshift+0x68>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d909      	bls.n	80036de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	@ 0x58
 80036dc:	e007      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	08015548 	.word	0x08015548

08003708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d856      	bhi.n	80037d6 <DMA_CheckFifoParam+0xce>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <DMA_CheckFifoParam+0x28>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003741 	.word	0x08003741
 8003734:	08003753 	.word	0x08003753
 8003738:	08003741 	.word	0x08003741
 800373c:	080037d7 	.word	0x080037d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d046      	beq.n	80037da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e043      	b.n	80037da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800375a:	d140      	bne.n	80037de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e03d      	b.n	80037de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376a:	d121      	bne.n	80037b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d837      	bhi.n	80037e2 <DMA_CheckFifoParam+0xda>
 8003772:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <DMA_CheckFifoParam+0x70>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	08003789 	.word	0x08003789
 800377c:	0800378f 	.word	0x0800378f
 8003780:	08003789 	.word	0x08003789
 8003784:	080037a1 	.word	0x080037a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e030      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d025      	beq.n	80037e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379e:	e022      	b.n	80037e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037a8:	d11f      	bne.n	80037ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ae:	e01c      	b.n	80037ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d903      	bls.n	80037be <DMA_CheckFifoParam+0xb6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037bc:	e018      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      break;
 80037c2:	e015      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e00b      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037d6:	bf00      	nop
 80037d8:	e00a      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e008      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e006      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e004      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
    }
  } 
  
  return status; 
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	@ 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e159      	b.n	8003ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800381c:	2201      	movs	r2, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	f040 8148 	bne.w	8003aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d005      	beq.n	8003852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384e:	2b02      	cmp	r3, #2
 8003850:	d130      	bne.n	80038b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2203      	movs	r2, #3
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003888:	2201      	movs	r2, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 0201 	and.w	r2, r3, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d017      	beq.n	80038f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d123      	bne.n	8003944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a2 	beq.w	8003aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b57      	ldr	r3, [pc, #348]	@ (8003ae8 <HAL_GPIO_Init+0x2e8>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	4a56      	ldr	r2, [pc, #344]	@ (8003ae8 <HAL_GPIO_Init+0x2e8>)
 8003990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003994:	6453      	str	r3, [r2, #68]	@ 0x44
 8003996:	4b54      	ldr	r3, [pc, #336]	@ (8003ae8 <HAL_GPIO_Init+0x2e8>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a2:	4a52      	ldr	r2, [pc, #328]	@ (8003aec <HAL_GPIO_Init+0x2ec>)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a49      	ldr	r2, [pc, #292]	@ (8003af0 <HAL_GPIO_Init+0x2f0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_GPIO_Init+0x202>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a48      	ldr	r2, [pc, #288]	@ (8003af4 <HAL_GPIO_Init+0x2f4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_GPIO_Init+0x1fe>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a47      	ldr	r2, [pc, #284]	@ (8003af8 <HAL_GPIO_Init+0x2f8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_GPIO_Init+0x1fa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a46      	ldr	r2, [pc, #280]	@ (8003afc <HAL_GPIO_Init+0x2fc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <HAL_GPIO_Init+0x1f6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a45      	ldr	r2, [pc, #276]	@ (8003b00 <HAL_GPIO_Init+0x300>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_GPIO_Init+0x1f2>
 80039ee:	2304      	movs	r3, #4
 80039f0:	e008      	b.n	8003a04 <HAL_GPIO_Init+0x204>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e006      	b.n	8003a04 <HAL_GPIO_Init+0x204>
 80039f6:	2303      	movs	r3, #3
 80039f8:	e004      	b.n	8003a04 <HAL_GPIO_Init+0x204>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e002      	b.n	8003a04 <HAL_GPIO_Init+0x204>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_GPIO_Init+0x204>
 8003a02:	2300      	movs	r3, #0
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	f002 0203 	and.w	r2, r2, #3
 8003a0a:	0092      	lsls	r2, r2, #2
 8003a0c:	4093      	lsls	r3, r2
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a14:	4935      	ldr	r1, [pc, #212]	@ (8003aec <HAL_GPIO_Init+0x2ec>)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a22:	4b38      	ldr	r3, [pc, #224]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a46:	4a2f      	ldr	r2, [pc, #188]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a70:	4a24      	ldr	r2, [pc, #144]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a76:	4b23      	ldr	r3, [pc, #140]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa0:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8003b04 <HAL_GPIO_Init+0x304>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b0f      	cmp	r3, #15
 8003ad4:	f67f aea2 	bls.w	800381c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	3724      	adds	r7, #36	@ 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40013800 	.word	0x40013800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020c00 	.word	0x40020c00
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40013c00 	.word	0x40013c00

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b24:	e003      	b.n	8003b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	041a      	lsls	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	619a      	str	r2, [r3, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e267      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d075      	beq.n	8003c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b5a:	4b88      	ldr	r3, [pc, #544]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b85      	ldr	r3, [pc, #532]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d112      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4b82      	ldr	r3, [pc, #520]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	4b7e      	ldr	r3, [pc, #504]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05b      	beq.n	8003c44 <HAL_RCC_OscConfig+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d157      	bne.n	8003c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e242      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x74>
 8003ba2:	4b76      	ldr	r3, [pc, #472]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x98>
 8003bba:	4b70      	ldr	r3, [pc, #448]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6f      	ldr	r2, [pc, #444]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6c      	ldr	r2, [pc, #432]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bd4:	4b69      	ldr	r3, [pc, #420]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a68      	ldr	r2, [pc, #416]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b66      	ldr	r3, [pc, #408]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a65      	ldr	r2, [pc, #404]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7ff f8e4 	bl	8002dc0 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7ff f8e0 	bl	8002dc0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	@ 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e207      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xc0>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7ff f8d0 	bl	8002dc0 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c24:	f7ff f8cc 	bl	8002dc0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	@ 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e1f3      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b51      	ldr	r3, [pc, #324]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0xe8>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c52:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b44      	ldr	r3, [pc, #272]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	4b41      	ldr	r3, [pc, #260]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1c7      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4937      	ldr	r1, [pc, #220]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	e03a      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <HAL_RCC_OscConfig+0x244>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7ff f885 	bl	8002dc0 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7ff f881 	bl	8002dc0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1a8      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b28      	ldr	r3, [pc, #160]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4925      	ldr	r1, [pc, #148]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_RCC_OscConfig+0x244>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7ff f864 	bl	8002dc0 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7ff f860 	bl	8002dc0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e187      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d036      	beq.n	8003d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <HAL_RCC_OscConfig+0x248>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7ff f844 	bl	8002dc0 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7ff f840 	bl	8002dc0 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e167      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HAL_RCC_OscConfig+0x240>)
 8003d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x200>
 8003d5a:	e01b      	b.n	8003d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <HAL_RCC_OscConfig+0x248>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7ff f82d 	bl	8002dc0 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e00e      	b.n	8003d88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7ff f829 	bl	8002dc0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d907      	bls.n	8003d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e150      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470000 	.word	0x42470000
 8003d84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	4b88      	ldr	r3, [pc, #544]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ea      	bne.n	8003d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8097 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b81      	ldr	r3, [pc, #516]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	4b7d      	ldr	r3, [pc, #500]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	4a7c      	ldr	r2, [pc, #496]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b77      	ldr	r3, [pc, #476]	@ (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b74      	ldr	r3, [pc, #464]	@ (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a73      	ldr	r2, [pc, #460]	@ (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fe ffe9 	bl	8002dc0 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fe ffe5 	bl	8002dc0 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e10c      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb0 <HAL_RCC_OscConfig+0x474>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2ea>
 8003e18:	4b64      	ldr	r3, [pc, #400]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1c:	4a63      	ldr	r2, [pc, #396]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e24:	e01c      	b.n	8003e60 <HAL_RCC_OscConfig+0x324>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x30c>
 8003e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	4a5e      	ldr	r2, [pc, #376]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0x324>
 8003e48:	4b58      	ldr	r3, [pc, #352]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4c:	4a57      	ldr	r2, [pc, #348]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e54:	4b55      	ldr	r3, [pc, #340]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	4a54      	ldr	r2, [pc, #336]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fe ffaa 	bl	8002dc0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fe ffa6 	bl	8002dc0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0cb      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	4b49      	ldr	r3, [pc, #292]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ee      	beq.n	8003e70 <HAL_RCC_OscConfig+0x334>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e94:	f7fe ff94 	bl	8002dc0 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fe ff90 	bl	8002dc0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e0b5      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ee      	bne.n	8003e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b39      	ldr	r3, [pc, #228]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	4a38      	ldr	r2, [pc, #224]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80a1 	beq.w	800401c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eda:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d05c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d141      	bne.n	8003f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eee:	4b31      	ldr	r3, [pc, #196]	@ (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fe ff64 	bl	8002dc0 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fe ff60 	bl	8002dc0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e087      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	041b      	lsls	r3, r3, #16
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	491b      	ldr	r1, [pc, #108]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe ff39 	bl	8002dc0 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fe ff35 	bl	8002dc0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e05c      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f64:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x416>
 8003f70:	e054      	b.n	800401c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <HAL_RCC_OscConfig+0x478>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe ff22 	bl	8002dc0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe ff1e 	bl	8002dc0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e045      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <HAL_RCC_OscConfig+0x470>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x444>
 8003f9e:	e03d      	b.n	800401c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e038      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x4ec>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d028      	beq.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d121      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d11a      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cc      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b68      	ldr	r3, [pc, #416]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d90c      	bls.n	8004068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b65      	ldr	r3, [pc, #404]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b63      	ldr	r3, [pc, #396]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b8      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a58      	ldr	r2, [pc, #352]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800408a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004098:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a52      	ldr	r2, [pc, #328]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	494d      	ldr	r1, [pc, #308]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d119      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b3f      	ldr	r3, [pc, #252]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e067      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b37      	ldr	r3, [pc, #220]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4934      	ldr	r1, [pc, #208]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7fe fe50 	bl	8002dc0 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe fe4c 	bl	8002dc0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b25      	ldr	r3, [pc, #148]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4916      	ldr	r1, [pc, #88]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b12      	ldr	r3, [pc, #72]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	490e      	ldr	r1, [pc, #56]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041b2:	f000 f821 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	490a      	ldr	r1, [pc, #40]	@ (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	4a09      	ldr	r2, [pc, #36]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041ce:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fdb0 	bl	8002d38 <HAL_InitTick>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023c00 	.word	0x40023c00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	08015530 	.word	0x08015530
 80041f0:	20000098 	.word	0x20000098
 80041f4:	2000009c 	.word	0x2000009c

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fc:	b094      	sub	sp, #80	@ 0x50
 80041fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004210:	4b79      	ldr	r3, [pc, #484]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d00d      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x40>
 800421c:	2b08      	cmp	r3, #8
 800421e:	f200 80e1 	bhi.w	80043e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x34>
 8004226:	2b04      	cmp	r3, #4
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x3a>
 800422a:	e0db      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b73      	ldr	r3, [pc, #460]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x204>)
 800422e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004230:	e0db      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004232:	4b73      	ldr	r3, [pc, #460]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x208>)
 8004234:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004236:	e0d8      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b6f      	ldr	r3, [pc, #444]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004240:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004242:	4b6d      	ldr	r3, [pc, #436]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d063      	beq.n	8004316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4b6a      	ldr	r3, [pc, #424]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	2200      	movs	r2, #0
 8004256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004258:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
 8004262:	2300      	movs	r3, #0
 8004264:	637b      	str	r3, [r7, #52]	@ 0x34
 8004266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	0159      	lsls	r1, r3, #5
 8004278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427c:	0150      	lsls	r0, r2, #5
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4621      	mov	r1, r4
 8004284:	1a51      	subs	r1, r2, r1
 8004286:	6139      	str	r1, [r7, #16]
 8004288:	4629      	mov	r1, r5
 800428a:	eb63 0301 	sbc.w	r3, r3, r1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800429c:	4659      	mov	r1, fp
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a6:	4651      	mov	r1, sl
 80042a8:	018a      	lsls	r2, r1, #6
 80042aa:	4651      	mov	r1, sl
 80042ac:	ebb2 0801 	subs.w	r8, r2, r1
 80042b0:	4659      	mov	r1, fp
 80042b2:	eb63 0901 	sbc.w	r9, r3, r1
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ca:	4690      	mov	r8, r2
 80042cc:	4699      	mov	r9, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	eb18 0303 	adds.w	r3, r8, r3
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	462b      	mov	r3, r5
 80042d8:	eb49 0303 	adc.w	r3, r9, r3
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ea:	4629      	mov	r1, r5
 80042ec:	024b      	lsls	r3, r1, #9
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f4:	4621      	mov	r1, r4
 80042f6:	024a      	lsls	r2, r1, #9
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fe:	2200      	movs	r2, #0
 8004300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004308:	f7fc f9fe 	bl	8000708 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004314:	e058      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b38      	ldr	r3, [pc, #224]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	2200      	movs	r2, #0
 800431e:	4618      	mov	r0, r3
 8004320:	4611      	mov	r1, r2
 8004322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
 800432c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	0159      	lsls	r1, r3, #5
 800433e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004342:	0150      	lsls	r0, r2, #5
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4641      	mov	r1, r8
 800434a:	ebb2 0a01 	subs.w	sl, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb63 0b01 	sbc.w	fp, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004368:	ebb2 040a 	subs.w	r4, r2, sl
 800436c:	eb63 050b 	sbc.w	r5, r3, fp
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	00eb      	lsls	r3, r5, #3
 800437a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437e:	00e2      	lsls	r2, r4, #3
 8004380:	4614      	mov	r4, r2
 8004382:	461d      	mov	r5, r3
 8004384:	4643      	mov	r3, r8
 8004386:	18e3      	adds	r3, r4, r3
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	464b      	mov	r3, r9
 800438c:	eb45 0303 	adc.w	r3, r5, r3
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800439e:	4629      	mov	r1, r5
 80043a0:	028b      	lsls	r3, r1, #10
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a8:	4621      	mov	r1, r4
 80043aa:	028a      	lsls	r2, r1, #10
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	61fa      	str	r2, [r7, #28]
 80043b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043bc:	f7fc f9a4 	bl	8000708 <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	3301      	adds	r3, #1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x204>)
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3750      	adds	r7, #80	@ 0x50
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200

08004404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b03      	ldr	r3, [pc, #12]	@ (8004418 <HAL_RCC_GetHCLKFreq+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000098 	.word	0x20000098

0800441c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004420:	f7ff fff0 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	@ (8004440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	08015540 	.word	0x08015540

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004448:	f7ff ffdc 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0b5b      	lsrs	r3, r3, #13
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4903      	ldr	r1, [pc, #12]	@ (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	08015540 	.word	0x08015540

0800446c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e041      	b.n	8004502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fe f870 	bl	8002578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 fac0 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e041      	b.n	80045a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f839 	bl	80045a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f000 fa71 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x24>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e022      	b.n	8004626 <HAL_TIM_PWM_Start+0x6a>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d109      	bne.n	80045fa <HAL_TIM_PWM_Start+0x3e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e015      	b.n	8004626 <HAL_TIM_PWM_Start+0x6a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x58>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e008      	b.n	8004626 <HAL_TIM_PWM_Start+0x6a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e068      	b.n	8004700 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0x82>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	e013      	b.n	8004666 <HAL_TIM_PWM_Start+0xaa>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0x92>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800464c:	e00b      	b.n	8004666 <HAL_TIM_PWM_Start+0xaa>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xa2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800465c:	e003      	b.n	8004666 <HAL_TIM_PWM_Start+0xaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2201      	movs	r2, #1
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fc90 	bl	8004f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a23      	ldr	r2, [pc, #140]	@ (8004708 <HAL_TIM_PWM_Start+0x14c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d107      	bne.n	800468e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <HAL_TIM_PWM_Start+0x14c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIM_PWM_Start+0x10e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a0:	d013      	beq.n	80046ca <HAL_TIM_PWM_Start+0x10e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a19      	ldr	r2, [pc, #100]	@ (800470c <HAL_TIM_PWM_Start+0x150>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIM_PWM_Start+0x10e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a17      	ldr	r2, [pc, #92]	@ (8004710 <HAL_TIM_PWM_Start+0x154>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIM_PWM_Start+0x10e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a16      	ldr	r2, [pc, #88]	@ (8004714 <HAL_TIM_PWM_Start+0x158>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIM_PWM_Start+0x10e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a14      	ldr	r2, [pc, #80]	@ (8004718 <HAL_TIM_PWM_Start+0x15c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d010      	beq.n	80046fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	e007      	b.n	80046fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40010000 	.word	0x40010000
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40014000 	.word	0x40014000

0800471c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004736:	2302      	movs	r3, #2
 8004738:	e0ae      	b.n	8004898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b0c      	cmp	r3, #12
 8004746:	f200 809f 	bhi.w	8004888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800474a:	a201      	add	r2, pc, #4	@ (adr r2, 8004750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004785 	.word	0x08004785
 8004754:	08004889 	.word	0x08004889
 8004758:	08004889 	.word	0x08004889
 800475c:	08004889 	.word	0x08004889
 8004760:	080047c5 	.word	0x080047c5
 8004764:	08004889 	.word	0x08004889
 8004768:	08004889 	.word	0x08004889
 800476c:	08004889 	.word	0x08004889
 8004770:	08004807 	.word	0x08004807
 8004774:	08004889 	.word	0x08004889
 8004778:	08004889 	.word	0x08004889
 800477c:	08004889 	.word	0x08004889
 8004780:	08004847 	.word	0x08004847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f9dc 	bl	8004b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0208 	orr.w	r2, r2, #8
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0204 	bic.w	r2, r2, #4
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	619a      	str	r2, [r3, #24]
      break;
 80047c2:	e064      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fa22 	bl	8004c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	619a      	str	r2, [r3, #24]
      break;
 8004804:	e043      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fa6d 	bl	8004cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0208 	orr.w	r2, r2, #8
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0204 	bic.w	r2, r2, #4
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      break;
 8004844:	e023      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fab7 	bl	8004dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	021a      	lsls	r2, r3, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	61da      	str	r2, [r3, #28]
      break;
 8004886:	e002      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
      break;
 800488c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIM_ConfigClockSource+0x1c>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0b4      	b.n	8004a26 <HAL_TIM_ConfigClockSource+0x186>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f4:	d03e      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0xd4>
 80048f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048fa:	f200 8087 	bhi.w	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004902:	f000 8086 	beq.w	8004a12 <HAL_TIM_ConfigClockSource+0x172>
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490a:	d87f      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b70      	cmp	r3, #112	@ 0x70
 800490e:	d01a      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0xa6>
 8004910:	2b70      	cmp	r3, #112	@ 0x70
 8004912:	d87b      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 8004914:	2b60      	cmp	r3, #96	@ 0x60
 8004916:	d050      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x11a>
 8004918:	2b60      	cmp	r3, #96	@ 0x60
 800491a:	d877      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 800491c:	2b50      	cmp	r3, #80	@ 0x50
 800491e:	d03c      	beq.n	800499a <HAL_TIM_ConfigClockSource+0xfa>
 8004920:	2b50      	cmp	r3, #80	@ 0x50
 8004922:	d873      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d058      	beq.n	80049da <HAL_TIM_ConfigClockSource+0x13a>
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d86f      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 800492c:	2b30      	cmp	r3, #48	@ 0x30
 800492e:	d064      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 8004930:	2b30      	cmp	r3, #48	@ 0x30
 8004932:	d86b      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d060      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 8004938:	2b20      	cmp	r3, #32
 800493a:	d867      	bhi.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d05c      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 8004940:	2b10      	cmp	r3, #16
 8004942:	d05a      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x15a>
 8004944:	e062      	b.n	8004a0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004956:	f000 fafd 	bl	8004f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	609a      	str	r2, [r3, #8]
      break;
 8004972:	e04f      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004984:	f000 fae6 	bl	8004f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004996:	609a      	str	r2, [r3, #8]
      break;
 8004998:	e03c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 fa5a 	bl	8004e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2150      	movs	r1, #80	@ 0x50
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fab3 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80049b8:	e02c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049c6:	461a      	mov	r2, r3
 80049c8:	f000 fa79 	bl	8004ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2160      	movs	r1, #96	@ 0x60
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 faa3 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80049d8:	e01c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	461a      	mov	r2, r3
 80049e8:	f000 fa3a 	bl	8004e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2140      	movs	r1, #64	@ 0x40
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa93 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80049f8:	e00c      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fa8a 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 8004a0a:	e003      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a10:	e000      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3a      	ldr	r2, [pc, #232]	@ (8004b2c <TIM_Base_SetConfig+0xfc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a37      	ldr	r2, [pc, #220]	@ (8004b30 <TIM_Base_SetConfig+0x100>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a36      	ldr	r2, [pc, #216]	@ (8004b34 <TIM_Base_SetConfig+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a35      	ldr	r2, [pc, #212]	@ (8004b38 <TIM_Base_SetConfig+0x108>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <TIM_Base_SetConfig+0xfc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01b      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a88:	d017      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <TIM_Base_SetConfig+0x100>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a27      	ldr	r2, [pc, #156]	@ (8004b34 <TIM_Base_SetConfig+0x104>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <TIM_Base_SetConfig+0x108>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	@ (8004b3c <TIM_Base_SetConfig+0x10c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a24      	ldr	r2, [pc, #144]	@ (8004b40 <TIM_Base_SetConfig+0x110>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a23      	ldr	r2, [pc, #140]	@ (8004b44 <TIM_Base_SetConfig+0x114>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b2c <TIM_Base_SetConfig+0xfc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]
  }
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800

08004b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f023 0201 	bic.w	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 0302 	bic.w	r3, r3, #2
 8004b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <TIM_OC1_SetConfig+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10c      	bne.n	8004bbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0308 	bic.w	r3, r3, #8
 8004baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <TIM_OC1_SetConfig+0xc8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d111      	bne.n	8004bea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40010000 	.word	0x40010000

08004c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f023 0210 	bic.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0320 	bic.w	r3, r3, #32
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <TIM_OC2_SetConfig+0xd4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10d      	bne.n	8004c90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <TIM_OC2_SetConfig+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d113      	bne.n	8004cc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000

08004cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <TIM_OC3_SetConfig+0xd0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10d      	bne.n	8004d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <TIM_OC3_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d113      	bne.n	8004d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40010000 	.word	0x40010000

08004dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	031b      	lsls	r3, r3, #12
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a10      	ldr	r2, [pc, #64]	@ (8004e5c <TIM_OC4_SetConfig+0x9c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d109      	bne.n	8004e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	019b      	lsls	r3, r3, #6
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000

08004e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 030a 	bic.w	r3, r3, #10
 8004e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f023 0210 	bic.w	r2, r3, #16
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	031b      	lsls	r3, r3, #12
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004efa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f043 0307 	orr.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	609a      	str	r2, [r3, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e050      	b.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d018      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d013      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a18      	ldr	r2, [pc, #96]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a15      	ldr	r2, [pc, #84]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a13      	ldr	r2, [pc, #76]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10c      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40014000 	.word	0x40014000

080050bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e03d      	b.n	8005154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e042      	b.n	80051f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd fb06 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	@ 0x24
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ffc9 	bl	800613c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b20      	cmp	r3, #32
 8005218:	d156      	bne.n	80052c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_UART_Transmit_DMA+0x26>
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e04f      	b.n	80052ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	@ 0x21
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	4a21      	ldr	r2, [pc, #132]	@ (80052d4 <HAL_UART_Transmit_DMA+0xd4>)
 8005250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005256:	4a20      	ldr	r2, [pc, #128]	@ (80052d8 <HAL_UART_Transmit_DMA+0xd8>)
 8005258:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <HAL_UART_Transmit_DMA+0xdc>)
 8005260:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	2200      	movs	r2, #0
 8005268:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005276:	6819      	ldr	r1, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3304      	adds	r3, #4
 800527e:	461a      	mov	r2, r3
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	f7fd ff69 	bl	8003158 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800528e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	617b      	str	r3, [r7, #20]
   return(result);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3314      	adds	r3, #20
 80052ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80052b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6a39      	ldr	r1, [r7, #32]
 80052b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e000      	b.n	80052ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3730      	adds	r7, #48	@ 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	080059c9 	.word	0x080059c9
 80052d8:	08005a63 	.word	0x08005a63
 80052dc:	08005be7 	.word	0x08005be7

080052e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d112      	bne.n	8005320 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_UART_Receive_DMA+0x26>
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e00b      	b.n	8005322 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	461a      	mov	r2, r3
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fcb0 	bl	8005c7c <UART_Start_Receive_DMA>
 800531c:	4603      	mov	r3, r0
 800531e:	e000      	b.n	8005322 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b090      	sub	sp, #64	@ 0x40
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	2b80      	cmp	r3, #128	@ 0x80
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b21      	cmp	r3, #33	@ 0x21
 8005356:	d128      	bne.n	80053aa <HAL_UART_DMAStop+0x80>
 8005358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d025      	beq.n	80053aa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	623b      	str	r3, [r7, #32]
   return(result);
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005374:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800537e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fd ff32 	bl	8003208 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fd03 	bl	8005db0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b40      	cmp	r3, #64	@ 0x40
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b22      	cmp	r3, #34	@ 0x22
 80053ca:	d128      	bne.n	800541e <HAL_UART_DMAStop+0xf4>
 80053cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d025      	beq.n	800541e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053f2:	61fa      	str	r2, [r7, #28]
 80053f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	4618      	mov	r0, r3
 8005414:	f7fd fef8 	bl	8003208 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fcf1 	bl	8005e00 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3740      	adds	r7, #64	@ 0x40
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b0ba      	sub	sp, #232	@ 0xe8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fd99 	bl	8005fbe <UART_Receive_IT>
      return;
 800548c:	e25b      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800548e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80de 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
 8005498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80d1 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
 80054e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f2:	f043 0202 	orr.w	r2, r3, #2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005516:	f043 0204 	orr.w	r2, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	f043 0208 	orr.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 81f2 	beq.w	800593c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fd24 	bl	8005fbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b40      	cmp	r3, #64	@ 0x40
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <HAL_UART_IRQHandler+0x17a>
 800559a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04f      	beq.n	8005642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fc2c 	bl	8005e00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b2:	2b40      	cmp	r3, #64	@ 0x40
 80055b4:	d141      	bne.n	800563a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1d9      	bne.n	80055b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d013      	beq.n	8005632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	4a7e      	ldr	r2, [pc, #504]	@ (8005808 <HAL_UART_IRQHandler+0x3e0>)
 8005610:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd fe66 	bl	80032e8 <HAL_DMA_Abort_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00e      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9b2 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e00a      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9ae 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e006      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9aa 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800564e:	e175      	b.n	800593c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	bf00      	nop
    return;
 8005652:	e173      	b.n	800593c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 814f 	bne.w	80058fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8148 	beq.w	80058fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8141 	beq.w	80058fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	f040 80b6 	bne.w	800580c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8145 	beq.w	8005940 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056be:	429a      	cmp	r2, r3
 80056c0:	f080 813e 	bcs.w	8005940 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d6:	f000 8088 	beq.w	80057ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005706:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800570a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800571e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1d9      	bne.n	80056da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800574a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800574e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005752:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800575c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e1      	bne.n	8005726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800578c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ba:	f023 0310 	bic.w	r3, r3, #16
 80057be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e3      	bne.n	80057a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd fd0f 	bl	8003208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f8d5 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005806:	e09b      	b.n	8005940 <HAL_UART_IRQHandler+0x518>
 8005808:	08005ec7 	.word	0x08005ec7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005814:	b29b      	uxth	r3, r3
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 808e 	beq.w	8005944 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8089 	beq.w	8005944 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	330c      	adds	r3, #12
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005856:	647a      	str	r2, [r7, #68]	@ 0x44
 8005858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800585c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e3      	bne.n	8005832 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	623b      	str	r3, [r7, #32]
   return(result);
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3314      	adds	r3, #20
 800588a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800588e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e3      	bne.n	800586a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058d4:	61fa      	str	r2, [r7, #28]
 80058d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	617b      	str	r3, [r7, #20]
   return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e3      	bne.n	80058b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f85b 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fa:	e023      	b.n	8005944 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_UART_IRQHandler+0x4f4>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800590c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 faea 	bl	8005eee <UART_Transmit_IT>
    return;
 800591a:	e014      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00e      	beq.n	8005946 <HAL_UART_IRQHandler+0x51e>
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fb2a 	bl	8005f8e <UART_EndTransmit_IT>
    return;
 800593a:	e004      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
    return;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
      return;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_UART_IRQHandler+0x51e>
      return;
 8005944:	bf00      	nop
  }
}
 8005946:	37e8      	adds	r7, #232	@ 0xe8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b090      	sub	sp, #64	@ 0x40
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d137      	bne.n	8005a54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80059e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e6:	2200      	movs	r2, #0
 80059e8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	623b      	str	r3, [r7, #32]
   return(result);
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3314      	adds	r3, #20
 8005a08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e5      	bne.n	80059ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a3e:	61fa      	str	r2, [r7, #28]
 8005a40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a52:	e002      	b.n	8005a5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a56:	f7ff ff79 	bl	800594c <HAL_UART_TxCpltCallback>
}
 8005a5a:	bf00      	nop
 8005a5c:	3740      	adds	r7, #64	@ 0x40
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ff75 	bl	8005960 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b09c      	sub	sp, #112	@ 0x70
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d172      	bne.n	8005b80 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ac0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ac2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ac6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e5      	bne.n	8005aa0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005af4:	647a      	str	r2, [r7, #68]	@ 0x44
 8005af6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	623b      	str	r3, [r7, #32]
   return(result);
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b28:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d119      	bne.n	8005b80 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0310 	bic.w	r3, r3, #16
 8005b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b6c:	61fa      	str	r2, [r7, #28]
 8005b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	617b      	str	r3, [r7, #20]
   return(result);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e5      	bne.n	8005b4c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b82:	2200      	movs	r2, #0
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d106      	bne.n	8005b9c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b92:	4619      	mov	r1, r3
 8005b94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b96:	f7ff ff0b 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b9a:	e002      	b.n	8005ba2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b9e:	f7ff fee9 	bl	8005974 <HAL_UART_RxCpltCallback>
}
 8005ba2:	bf00      	nop
 8005ba4:	3770      	adds	r7, #112	@ 0x70
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d108      	bne.n	8005bd8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff feed 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bd6:	e002      	b.n	8005bde <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fed5 	bl	8005988 <HAL_UART_RxHalfCpltCallback>
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c02:	2b80      	cmp	r3, #128	@ 0x80
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b21      	cmp	r3, #33	@ 0x21
 8005c18:	d108      	bne.n	8005c2c <UART_DMAError+0x46>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005c26:	68b8      	ldr	r0, [r7, #8]
 8005c28:	f000 f8c2 	bl	8005db0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b22      	cmp	r3, #34	@ 0x22
 8005c4c:	d108      	bne.n	8005c60 <UART_DMAError+0x7a>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c5a:	68b8      	ldr	r0, [r7, #8]
 8005c5c:	f000 f8d0 	bl	8005e00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c64:	f043 0210 	orr.w	r2, r3, #16
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c6c:	68b8      	ldr	r0, [r7, #8]
 8005c6e:	f7ff fe95 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b098      	sub	sp, #96	@ 0x60
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2222      	movs	r2, #34	@ 0x22
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8005da4 <UART_Start_Receive_DMA+0x128>)
 8005caa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb0:	4a3d      	ldr	r2, [pc, #244]	@ (8005da8 <UART_Start_Receive_DMA+0x12c>)
 8005cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dac <UART_Start_Receive_DMA+0x130>)
 8005cba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005cc4:	f107 0308 	add.w	r3, r7, #8
 8005cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	f7fd fa3c 	bl	8003158 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d52:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e5      	bne.n	8005d32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	617b      	str	r3, [r7, #20]
   return(result);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d86:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6a39      	ldr	r1, [r7, #32]
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e5      	bne.n	8005d66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3760      	adds	r7, #96	@ 0x60
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	08005a7f 	.word	0x08005a7f
 8005da8:	08005bab 	.word	0x08005bab
 8005dac:	08005be7 	.word	0x08005be7

08005db0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	@ 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	61ba      	str	r2, [r7, #24]
 8005dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	613b      	str	r3, [r7, #16]
   return(result);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e5      	bne.n	8005db8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005df4:	bf00      	nop
 8005df6:	3724      	adds	r7, #36	@ 0x24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b095      	sub	sp, #84	@ 0x54
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	330c      	adds	r3, #12
 8005e26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e28:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3314      	adds	r3, #20
 8005e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3314      	adds	r3, #20
 8005e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d119      	bne.n	8005eac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 0310 	bic.w	r3, r3, #16
 8005e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e98:	61ba      	str	r2, [r7, #24]
 8005e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6979      	ldr	r1, [r7, #20]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005eba:	bf00      	nop
 8005ebc:	3754      	adds	r7, #84	@ 0x54
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7ff fd5b 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b21      	cmp	r3, #33	@ 0x21
 8005f00:	d13e      	bne.n	8005f80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0a:	d114      	bne.n	8005f36 <UART_Transmit_IT+0x48>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d110      	bne.n	8005f36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]
 8005f34:	e008      	b.n	8005f48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6211      	str	r1, [r2, #32]
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4619      	mov	r1, r3
 8005f56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10f      	bne.n	8005f7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e000      	b.n	8005f82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f80:	2302      	movs	r3, #2
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fccc 	bl	800594c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b08c      	sub	sp, #48	@ 0x30
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b22      	cmp	r3, #34	@ 0x22
 8005fd0:	f040 80ae 	bne.w	8006130 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fdc:	d117      	bne.n	800600e <UART_Receive_IT+0x50>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d113      	bne.n	800600e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	629a      	str	r2, [r3, #40]	@ 0x28
 800600c:	e026      	b.n	800605c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006020:	d007      	beq.n	8006032 <UART_Receive_IT+0x74>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <UART_Receive_IT+0x82>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	b2da      	uxtb	r2, r3
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e008      	b.n	8006052 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29b      	uxth	r3, r3
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4619      	mov	r1, r3
 800606a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800606c:	2b00      	cmp	r3, #0
 800606e:	d15d      	bne.n	800612c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0220 	bic.w	r2, r2, #32
 800607e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800608e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d135      	bne.n	8006122 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	613b      	str	r3, [r7, #16]
   return(result);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 0310 	bic.w	r3, r3, #16
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060dc:	623a      	str	r2, [r7, #32]
 80060de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	69f9      	ldr	r1, [r7, #28]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e5      	bne.n	80060bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d10a      	bne.n	8006114 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fc48 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
 8006120:	e002      	b.n	8006128 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fc26 	bl	8005974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e002      	b.n	8006132 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3730      	adds	r7, #48	@ 0x30
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800613c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006140:	b0c0      	sub	sp, #256	@ 0x100
 8006142:	af00      	add	r7, sp, #0
 8006144:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	68d9      	ldr	r1, [r3, #12]
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	ea40 0301 	orr.w	r3, r0, r1
 8006164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	431a      	orrs	r2, r3
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	431a      	orrs	r2, r3
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006194:	f021 010c 	bic.w	r1, r1, #12
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061a2:	430b      	orrs	r3, r1
 80061a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b6:	6999      	ldr	r1, [r3, #24]
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	ea40 0301 	orr.w	r3, r0, r1
 80061c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006408 <UART_SetConfig+0x2cc>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d005      	beq.n	80061dc <UART_SetConfig+0xa0>
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4b8d      	ldr	r3, [pc, #564]	@ (800640c <UART_SetConfig+0x2d0>)
 80061d8:	429a      	cmp	r2, r3
 80061da:	d104      	bne.n	80061e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061dc:	f7fe f932 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80061e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061e4:	e003      	b.n	80061ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061e6:	f7fe f919 	bl	800441c <HAL_RCC_GetPCLK1Freq>
 80061ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f8:	f040 810c 	bne.w	8006414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006200:	2200      	movs	r2, #0
 8006202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006206:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800620a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800620e:	4622      	mov	r2, r4
 8006210:	462b      	mov	r3, r5
 8006212:	1891      	adds	r1, r2, r2
 8006214:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006216:	415b      	adcs	r3, r3
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800621a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800621e:	4621      	mov	r1, r4
 8006220:	eb12 0801 	adds.w	r8, r2, r1
 8006224:	4629      	mov	r1, r5
 8006226:	eb43 0901 	adc.w	r9, r3, r1
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800623a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623e:	4690      	mov	r8, r2
 8006240:	4699      	mov	r9, r3
 8006242:	4623      	mov	r3, r4
 8006244:	eb18 0303 	adds.w	r3, r8, r3
 8006248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800624c:	462b      	mov	r3, r5
 800624e:	eb49 0303 	adc.w	r3, r9, r3
 8006252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006262:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800626a:	460b      	mov	r3, r1
 800626c:	18db      	adds	r3, r3, r3
 800626e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006270:	4613      	mov	r3, r2
 8006272:	eb42 0303 	adc.w	r3, r2, r3
 8006276:	657b      	str	r3, [r7, #84]	@ 0x54
 8006278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800627c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006280:	f7fa fa42 	bl	8000708 <__aeabi_uldivmod>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4b61      	ldr	r3, [pc, #388]	@ (8006410 <UART_SetConfig+0x2d4>)
 800628a:	fba3 2302 	umull	r2, r3, r3, r2
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	011c      	lsls	r4, r3, #4
 8006292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800629c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062a4:	4642      	mov	r2, r8
 80062a6:	464b      	mov	r3, r9
 80062a8:	1891      	adds	r1, r2, r2
 80062aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062ac:	415b      	adcs	r3, r3
 80062ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062b4:	4641      	mov	r1, r8
 80062b6:	eb12 0a01 	adds.w	sl, r2, r1
 80062ba:	4649      	mov	r1, r9
 80062bc:	eb43 0b01 	adc.w	fp, r3, r1
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d4:	4692      	mov	sl, r2
 80062d6:	469b      	mov	fp, r3
 80062d8:	4643      	mov	r3, r8
 80062da:	eb1a 0303 	adds.w	r3, sl, r3
 80062de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062e2:	464b      	mov	r3, r9
 80062e4:	eb4b 0303 	adc.w	r3, fp, r3
 80062e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006300:	460b      	mov	r3, r1
 8006302:	18db      	adds	r3, r3, r3
 8006304:	643b      	str	r3, [r7, #64]	@ 0x40
 8006306:	4613      	mov	r3, r2
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006316:	f7fa f9f7 	bl	8000708 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4611      	mov	r1, r2
 8006320:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <UART_SetConfig+0x2d4>)
 8006322:	fba3 2301 	umull	r2, r3, r3, r1
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	2264      	movs	r2, #100	@ 0x64
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	1acb      	subs	r3, r1, r3
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006336:	4b36      	ldr	r3, [pc, #216]	@ (8006410 <UART_SetConfig+0x2d4>)
 8006338:	fba3 2302 	umull	r2, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006344:	441c      	add	r4, r3
 8006346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006350:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006358:	4642      	mov	r2, r8
 800635a:	464b      	mov	r3, r9
 800635c:	1891      	adds	r1, r2, r2
 800635e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006360:	415b      	adcs	r3, r3
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006368:	4641      	mov	r1, r8
 800636a:	1851      	adds	r1, r2, r1
 800636c:	6339      	str	r1, [r7, #48]	@ 0x30
 800636e:	4649      	mov	r1, r9
 8006370:	414b      	adcs	r3, r1
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006380:	4659      	mov	r1, fp
 8006382:	00cb      	lsls	r3, r1, #3
 8006384:	4651      	mov	r1, sl
 8006386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638a:	4651      	mov	r1, sl
 800638c:	00ca      	lsls	r2, r1, #3
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	4603      	mov	r3, r0
 8006394:	4642      	mov	r2, r8
 8006396:	189b      	adds	r3, r3, r2
 8006398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800639c:	464b      	mov	r3, r9
 800639e:	460a      	mov	r2, r1
 80063a0:	eb42 0303 	adc.w	r3, r2, r3
 80063a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063bc:	460b      	mov	r3, r1
 80063be:	18db      	adds	r3, r3, r3
 80063c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c2:	4613      	mov	r3, r2
 80063c4:	eb42 0303 	adc.w	r3, r2, r3
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063d2:	f7fa f999 	bl	8000708 <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <UART_SetConfig+0x2d4>)
 80063dc:	fba3 1302 	umull	r1, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2164      	movs	r1, #100	@ 0x64
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	3332      	adds	r3, #50	@ 0x32
 80063ee:	4a08      	ldr	r2, [pc, #32]	@ (8006410 <UART_SetConfig+0x2d4>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 0207 	and.w	r2, r3, #7
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4422      	add	r2, r4
 8006402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006404:	e106      	b.n	8006614 <UART_SetConfig+0x4d8>
 8006406:	bf00      	nop
 8006408:	40011000 	.word	0x40011000
 800640c:	40011400 	.word	0x40011400
 8006410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006418:	2200      	movs	r2, #0
 800641a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800641e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	1891      	adds	r1, r2, r2
 800642c:	6239      	str	r1, [r7, #32]
 800642e:	415b      	adcs	r3, r3
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
 8006432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006436:	4641      	mov	r1, r8
 8006438:	1854      	adds	r4, r2, r1
 800643a:	4649      	mov	r1, r9
 800643c:	eb43 0501 	adc.w	r5, r3, r1
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	00eb      	lsls	r3, r5, #3
 800644a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800644e:	00e2      	lsls	r2, r4, #3
 8006450:	4614      	mov	r4, r2
 8006452:	461d      	mov	r5, r3
 8006454:	4643      	mov	r3, r8
 8006456:	18e3      	adds	r3, r4, r3
 8006458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800645c:	464b      	mov	r3, r9
 800645e:	eb45 0303 	adc.w	r3, r5, r3
 8006462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006482:	4629      	mov	r1, r5
 8006484:	008b      	lsls	r3, r1, #2
 8006486:	4621      	mov	r1, r4
 8006488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800648c:	4621      	mov	r1, r4
 800648e:	008a      	lsls	r2, r1, #2
 8006490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006494:	f7fa f938 	bl	8000708 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4b60      	ldr	r3, [pc, #384]	@ (8006620 <UART_SetConfig+0x4e4>)
 800649e:	fba3 2302 	umull	r2, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	011c      	lsls	r4, r3, #4
 80064a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	1891      	adds	r1, r2, r2
 80064be:	61b9      	str	r1, [r7, #24]
 80064c0:	415b      	adcs	r3, r3
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c8:	4641      	mov	r1, r8
 80064ca:	1851      	adds	r1, r2, r1
 80064cc:	6139      	str	r1, [r7, #16]
 80064ce:	4649      	mov	r1, r9
 80064d0:	414b      	adcs	r3, r1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064e0:	4659      	mov	r1, fp
 80064e2:	00cb      	lsls	r3, r1, #3
 80064e4:	4651      	mov	r1, sl
 80064e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ea:	4651      	mov	r1, sl
 80064ec:	00ca      	lsls	r2, r1, #3
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	4603      	mov	r3, r0
 80064f4:	4642      	mov	r2, r8
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064fc:	464b      	mov	r3, r9
 80064fe:	460a      	mov	r2, r1
 8006500:	eb42 0303 	adc.w	r3, r2, r3
 8006504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006512:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006520:	4649      	mov	r1, r9
 8006522:	008b      	lsls	r3, r1, #2
 8006524:	4641      	mov	r1, r8
 8006526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800652a:	4641      	mov	r1, r8
 800652c:	008a      	lsls	r2, r1, #2
 800652e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006532:	f7fa f8e9 	bl	8000708 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4611      	mov	r1, r2
 800653c:	4b38      	ldr	r3, [pc, #224]	@ (8006620 <UART_SetConfig+0x4e4>)
 800653e:	fba3 2301 	umull	r2, r3, r3, r1
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	@ 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	3332      	adds	r3, #50	@ 0x32
 8006550:	4a33      	ldr	r2, [pc, #204]	@ (8006620 <UART_SetConfig+0x4e4>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800655c:	441c      	add	r4, r3
 800655e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006562:	2200      	movs	r2, #0
 8006564:	673b      	str	r3, [r7, #112]	@ 0x70
 8006566:	677a      	str	r2, [r7, #116]	@ 0x74
 8006568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	1891      	adds	r1, r2, r2
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	415b      	adcs	r3, r3
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800657c:	4641      	mov	r1, r8
 800657e:	1851      	adds	r1, r2, r1
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	4649      	mov	r1, r9
 8006584:	414b      	adcs	r3, r1
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006594:	4659      	mov	r1, fp
 8006596:	00cb      	lsls	r3, r1, #3
 8006598:	4651      	mov	r1, sl
 800659a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800659e:	4651      	mov	r1, sl
 80065a0:	00ca      	lsls	r2, r1, #3
 80065a2:	4610      	mov	r0, r2
 80065a4:	4619      	mov	r1, r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	4642      	mov	r2, r8
 80065aa:	189b      	adds	r3, r3, r2
 80065ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ae:	464b      	mov	r3, r9
 80065b0:	460a      	mov	r2, r1
 80065b2:	eb42 0303 	adc.w	r3, r2, r3
 80065b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065d0:	4649      	mov	r1, r9
 80065d2:	008b      	lsls	r3, r1, #2
 80065d4:	4641      	mov	r1, r8
 80065d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065da:	4641      	mov	r1, r8
 80065dc:	008a      	lsls	r2, r1, #2
 80065de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065e2:	f7fa f891 	bl	8000708 <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006620 <UART_SetConfig+0x4e4>)
 80065ec:	fba3 1302 	umull	r1, r3, r3, r2
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	2164      	movs	r1, #100	@ 0x64
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	3332      	adds	r3, #50	@ 0x32
 80065fe:	4a08      	ldr	r2, [pc, #32]	@ (8006620 <UART_SetConfig+0x4e4>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4422      	add	r2, r4
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	bf00      	nop
 8006616:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800661a:	46bd      	mov	sp, r7
 800661c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006620:	51eb851f 	.word	0x51eb851f

08006624 <__NVIC_SetPriority>:
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	6039      	str	r1, [r7, #0]
 800662e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006634:	2b00      	cmp	r3, #0
 8006636:	db0a      	blt.n	800664e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	490c      	ldr	r1, [pc, #48]	@ (8006670 <__NVIC_SetPriority+0x4c>)
 800663e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006642:	0112      	lsls	r2, r2, #4
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	440b      	add	r3, r1
 8006648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800664c:	e00a      	b.n	8006664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4908      	ldr	r1, [pc, #32]	@ (8006674 <__NVIC_SetPriority+0x50>)
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	3b04      	subs	r3, #4
 800665c:	0112      	lsls	r2, r2, #4
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	440b      	add	r3, r1
 8006662:	761a      	strb	r2, [r3, #24]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000e100 	.word	0xe000e100
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800667c:	2100      	movs	r1, #0
 800667e:	f06f 0004 	mvn.w	r0, #4
 8006682:	f7ff ffcf 	bl	8006624 <__NVIC_SetPriority>
#endif
}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006692:	f3ef 8305 	mrs	r3, IPSR
 8006696:	603b      	str	r3, [r7, #0]
  return(result);
 8006698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800669e:	f06f 0305 	mvn.w	r3, #5
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	e00c      	b.n	80066c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <osKernelInitialize+0x44>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066ae:	4b08      	ldr	r3, [pc, #32]	@ (80066d0 <osKernelInitialize+0x44>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	e002      	b.n	80066c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066c0:	687b      	ldr	r3, [r7, #4]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	200047f4 	.word	0x200047f4

080066d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066da:	f3ef 8305 	mrs	r3, IPSR
 80066de:	603b      	str	r3, [r7, #0]
  return(result);
 80066e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80066e6:	f06f 0305 	mvn.w	r3, #5
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e010      	b.n	8006710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <osKernelStart+0x48>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d109      	bne.n	800670a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066f6:	f7ff ffbf 	bl	8006678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <osKernelStart+0x48>)
 80066fc:	2202      	movs	r2, #2
 80066fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006700:	f001 f87a 	bl	80077f8 <vTaskStartScheduler>
      stat = osOK;
 8006704:	2300      	movs	r3, #0
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e002      	b.n	8006710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800670e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006710:	687b      	ldr	r3, [r7, #4]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200047f4 	.word	0x200047f4

08006720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	@ 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006730:	f3ef 8305 	mrs	r3, IPSR
 8006734:	617b      	str	r3, [r7, #20]
  return(result);
 8006736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006738:	2b00      	cmp	r3, #0
 800673a:	d17e      	bne.n	800683a <osThreadNew+0x11a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d07b      	beq.n	800683a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006746:	2318      	movs	r3, #24
 8006748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d045      	beq.n	80067e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <osThreadNew+0x48>
        name = attr->name;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <osThreadNew+0x6e>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b38      	cmp	r3, #56	@ 0x38
 8006780:	d805      	bhi.n	800678e <osThreadNew+0x6e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <osThreadNew+0x72>
        return (NULL);
 800678e:	2300      	movs	r3, #0
 8006790:	e054      	b.n	800683c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <osThreadNew+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80067b0:	d90a      	bls.n	80067c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <osThreadNew+0xa8>
        mem = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	e010      	b.n	80067ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <osThreadNew+0xca>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d108      	bne.n	80067ea <osThreadNew+0xca>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <osThreadNew+0xca>
          mem = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e001      	b.n	80067ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d110      	bne.n	8006812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f8:	9202      	str	r2, [sp, #8]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fe1a 	bl	8007440 <xTaskCreateStatic>
 800680c:	4603      	mov	r3, r0
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	e013      	b.n	800683a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d110      	bne.n	800683a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	b29a      	uxth	r2, r3
 800681c:	f107 0310 	add.w	r3, r7, #16
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fe68 	bl	8007500 <xTaskCreate>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d001      	beq.n	800683a <osThreadNew+0x11a>
            hTask = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800683a:	693b      	ldr	r3, [r7, #16]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3728      	adds	r7, #40	@ 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	60bb      	str	r3, [r7, #8]
  return(result);
 8006852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <osDelay+0x1c>
    stat = osErrorISR;
 8006858:	f06f 0305 	mvn.w	r3, #5
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e007      	b.n	8006870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 ff8e 	bl	800778c <vTaskDelay>
    }
  }

  return (stat);
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a07      	ldr	r2, [pc, #28]	@ (80068a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800688c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4a06      	ldr	r2, [pc, #24]	@ (80068ac <vApplicationGetIdleTaskMemory+0x30>)
 8006892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2280      	movs	r2, #128	@ 0x80
 8006898:	601a      	str	r2, [r3, #0]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	200047f8 	.word	0x200047f8
 80068ac:	20004854 	.word	0x20004854

080068b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a07      	ldr	r2, [pc, #28]	@ (80068dc <vApplicationGetTimerTaskMemory+0x2c>)
 80068c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a06      	ldr	r2, [pc, #24]	@ (80068e0 <vApplicationGetTimerTaskMemory+0x30>)
 80068c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068ce:	601a      	str	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20004a54 	.word	0x20004a54
 80068e0:	20004ab0 	.word	0x20004ab0

080068e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f103 0208 	add.w	r2, r3, #8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f103 0208 	add.w	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f103 0208 	add.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800699c:	d103      	bne.n	80069a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e00c      	b.n	80069c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3308      	adds	r3, #8
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e002      	b.n	80069b4 <vListInsert+0x2e>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d2f6      	bcs.n	80069ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6892      	ldr	r2, [r2, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d103      	bne.n	8006a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <xQueueGenericReset+0x2c>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60bb      	str	r3, [r7, #8]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a78:	f002 f89e 	bl	8008bb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	441a      	add	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	441a      	add	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	22ff      	movs	r2, #255	@ 0xff
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	22ff      	movs	r2, #255	@ 0xff
 8006ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d114      	bne.n	8006af8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01a      	beq.n	8006b0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3310      	adds	r3, #16
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f91a 	bl	8007d14 <xTaskRemoveFromEventList>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d012      	beq.n	8006b0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <xQueueGenericReset+0xd0>)
 8006ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	e009      	b.n	8006b0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3310      	adds	r3, #16
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fef1 	bl	80068e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3324      	adds	r3, #36	@ 0x24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff feec 	bl	80068e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b0c:	f002 f886 	bl	8008c1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b10:	2301      	movs	r3, #1
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	@ 0x38
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <xQueueGenericCreateStatic+0x56>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <xQueueGenericCreateStatic+0x5a>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericCreateStatic+0x5c>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10b      	bne.n	8006b98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	623b      	str	r3, [r7, #32]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <xQueueGenericCreateStatic+0x84>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueGenericCreateStatic+0x88>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueGenericCreateStatic+0x8a>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61fb      	str	r3, [r7, #28]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bc6:	2350      	movs	r3, #80	@ 0x50
 8006bc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b50      	cmp	r3, #80	@ 0x50
 8006bce:	d00b      	beq.n	8006be8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61bb      	str	r3, [r7, #24]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006be8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00d      	beq.n	8006c10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f805 	bl	8006c1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3730      	adds	r7, #48	@ 0x30
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e002      	b.n	8006c3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c48:	2101      	movs	r1, #1
 8006c4a:	69b8      	ldr	r0, [r7, #24]
 8006c4c:	f7ff fefe 	bl	8006a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	@ 0x38
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueGenericSend+0x34>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x42>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueGenericSend+0x46>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueGenericSend+0x48>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <xQueueGenericSend+0x64>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSend+0x72>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <xQueueGenericSend+0x76>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <xQueueGenericSend+0x78>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xQueueGenericSend+0x94>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf4:	f001 f9f6 	bl	80080e4 <xTaskGetSchedulerState>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <xQueueGenericSend+0xa4>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <xQueueGenericSend+0xa8>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <xQueueGenericSend+0xaa>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	61fb      	str	r3, [r7, #28]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d26:	f001 ff47 	bl	8008bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <xQueueGenericSend+0xdc>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d129      	bne.n	8006d90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d42:	f000 fa0f 	bl	8007164 <prvCopyDataToQueue>
 8006d46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	3324      	adds	r3, #36	@ 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 ffdd 	bl	8007d14 <xTaskRemoveFromEventList>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d013      	beq.n	8006d88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b3f      	ldr	r3, [pc, #252]	@ (8006e60 <xQueueGenericSend+0x200>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	e00a      	b.n	8006d88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d78:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <xQueueGenericSend+0x200>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d88:	f001 ff48 	bl	8008c1c <vPortExitCritical>
				return pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e063      	b.n	8006e58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d96:	f001 ff41 	bl	8008c1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e05c      	b.n	8006e58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 f83f 	bl	8007e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db2:	f001 ff33 	bl	8008c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006db6:	f000 fd87 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dba:	f001 fefd 	bl	8008bb8 <vPortEnterCritical>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dca:	d103      	bne.n	8006dd4 <xQueueGenericSend+0x174>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x18a>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dea:	f001 ff17 	bl	8008c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dee:	1d3a      	adds	r2, r7, #4
 8006df0:	f107 0314 	add.w	r3, r7, #20
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 f82e 	bl	8007e58 <xTaskCheckForTimeOut>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d124      	bne.n	8006e4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e04:	f000 faa6 	bl	8007354 <prvIsQueueFull>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	3310      	adds	r3, #16
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 ff2a 	bl	8007c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e1e:	f000 fa31 	bl	8007284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e22:	f000 fd5f 	bl	80078e4 <xTaskResumeAll>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f af7c 	bne.w	8006d26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <xQueueGenericSend+0x200>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	e772      	b.n	8006d26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e42:	f000 fa1f 	bl	8007284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e46:	f000 fd4d 	bl	80078e4 <xTaskResumeAll>
 8006e4a:	e76c      	b.n	8006d26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e4e:	f000 fa19 	bl	8007284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e52:	f000 fd47 	bl	80078e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3738      	adds	r7, #56	@ 0x38
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b090      	sub	sp, #64	@ 0x40
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	e7fd      	b.n	8006e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <xQueueGenericSendFromISR+0x3e>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <xQueueGenericSendFromISR+0x42>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <xQueueGenericSendFromISR+0x44>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d103      	bne.n	8006ed2 <xQueueGenericSendFromISR+0x6e>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <xQueueGenericSendFromISR+0x72>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <xQueueGenericSendFromISR+0x74>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	623b      	str	r3, [r7, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ef4:	f001 ff40 	bl	8008d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8006efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d302      	bcc.n	8006f26 <xQueueGenericSendFromISR+0xc2>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d12f      	bne.n	8006f86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f3c:	f000 f912 	bl	8007164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f48:	d112      	bne.n	8006f70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	3324      	adds	r3, #36	@ 0x24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fedc 	bl	8007d14 <xTaskRemoveFromEventList>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00e      	beq.n	8006f80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e007      	b.n	8006f80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f74:	3301      	adds	r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	b25a      	sxtb	r2, r3
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f80:	2301      	movs	r3, #1
 8006f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f84:	e001      	b.n	8006f8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3740      	adds	r7, #64	@ 0x40
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	@ 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <xQueueReceive+0x32>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	623b      	str	r3, [r7, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <xQueueReceive+0x40>
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueReceive+0x44>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueReceive+0x46>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <xQueueReceive+0x62>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61fb      	str	r3, [r7, #28]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007002:	f001 f86f 	bl	80080e4 <xTaskGetSchedulerState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <xQueueReceive+0x72>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <xQueueReceive+0x76>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueReceive+0x78>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xQueueReceive+0x94>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	61bb      	str	r3, [r7, #24]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007034:	f001 fdc0 	bl	8008bb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01f      	beq.n	8007084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007048:	f000 f8f6 	bl	8007238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	1e5a      	subs	r2, r3, #1
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	3310      	adds	r3, #16
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fe57 	bl	8007d14 <xTaskRemoveFromEventList>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800706c:	4b3c      	ldr	r3, [pc, #240]	@ (8007160 <xQueueReceive+0x1c0>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800707c:	f001 fdce 	bl	8008c1c <vPortExitCritical>
				return pdPASS;
 8007080:	2301      	movs	r3, #1
 8007082:	e069      	b.n	8007158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800708a:	f001 fdc7 	bl	8008c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800708e:	2300      	movs	r3, #0
 8007090:	e062      	b.n	8007158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007098:	f107 0310 	add.w	r3, r7, #16
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fec5 	bl	8007e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070a6:	f001 fdb9 	bl	8008c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070aa:	f000 fc0d 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ae:	f001 fd83 	bl	8008bb8 <vPortEnterCritical>
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070be:	d103      	bne.n	80070c8 <xQueueReceive+0x128>
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070d4:	d103      	bne.n	80070de <xQueueReceive+0x13e>
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070de:	f001 fd9d 	bl	8008c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e2:	1d3a      	adds	r2, r7, #4
 80070e4:	f107 0310 	add.w	r3, r7, #16
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 feb4 	bl	8007e58 <xTaskCheckForTimeOut>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d123      	bne.n	800713e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070f8:	f000 f916 	bl	8007328 <prvIsQueueEmpty>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	3324      	adds	r3, #36	@ 0x24
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fdb0 	bl	8007c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007112:	f000 f8b7 	bl	8007284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007116:	f000 fbe5 	bl	80078e4 <xTaskResumeAll>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d189      	bne.n	8007034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007120:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <xQueueReceive+0x1c0>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	e780      	b.n	8007034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007134:	f000 f8a6 	bl	8007284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007138:	f000 fbd4 	bl	80078e4 <xTaskResumeAll>
 800713c:	e77a      	b.n	8007034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800713e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007140:	f000 f8a0 	bl	8007284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007144:	f000 fbce 	bl	80078e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800714a:	f000 f8ed 	bl	8007328 <prvIsQueueEmpty>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	f43f af6f 	beq.w	8007034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007158:	4618      	mov	r0, r3
 800715a:	3730      	adds	r7, #48	@ 0x30
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	e000ed04 	.word	0xe000ed04

08007164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10d      	bne.n	800719e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d14d      	bne.n	8007226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 ffc6 	bl	8008120 <xTaskPriorityDisinherit>
 8007194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	e043      	b.n	8007226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d119      	bne.n	80071d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6858      	ldr	r0, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ac:	461a      	mov	r2, r3
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	f00d fa87 	bl	80146c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d32b      	bcc.n	8007226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	e026      	b.n	8007226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68d8      	ldr	r0, [r3, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	461a      	mov	r2, r3
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	f00d fa6d 	bl	80146c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f0:	425b      	negs	r3, r3
 80071f2:	441a      	add	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d207      	bcs.n	8007214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720c:	425b      	negs	r3, r3
 800720e:	441a      	add	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d105      	bne.n	8007226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	3b01      	subs	r3, #1
 8007224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800722e:	697b      	ldr	r3, [r7, #20]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d018      	beq.n	800727c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	441a      	add	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	429a      	cmp	r2, r3
 8007262:	d303      	bcc.n	800726c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68d9      	ldr	r1, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007274:	461a      	mov	r2, r3
 8007276:	6838      	ldr	r0, [r7, #0]
 8007278:	f00d fa23 	bl	80146c2 <memcpy>
	}
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800728c:	f001 fc94 	bl	8008bb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007298:	e011      	b.n	80072be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d012      	beq.n	80072c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3324      	adds	r3, #36	@ 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fd34 	bl	8007d14 <xTaskRemoveFromEventList>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072b2:	f000 fe35 	bl	8007f20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dce9      	bgt.n	800729a <prvUnlockQueue+0x16>
 80072c6:	e000      	b.n	80072ca <prvUnlockQueue+0x46>
					break;
 80072c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	22ff      	movs	r2, #255	@ 0xff
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 fca3 	bl	8008c1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072d6:	f001 fc6f 	bl	8008bb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072e2:	e011      	b.n	8007308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d012      	beq.n	8007312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3310      	adds	r3, #16
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fd0f 	bl	8007d14 <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072fc:	f000 fe10 	bl	8007f20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	3b01      	subs	r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	dce9      	bgt.n	80072e4 <prvUnlockQueue+0x60>
 8007310:	e000      	b.n	8007314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	22ff      	movs	r2, #255	@ 0xff
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800731c:	f001 fc7e 	bl	8008c1c <vPortExitCritical>
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007330:	f001 fc42 	bl	8008bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e001      	b.n	8007346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007346:	f001 fc69 	bl	8008c1c <vPortExitCritical>

	return xReturn;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800735c:	f001 fc2c 	bl	8008bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	429a      	cmp	r2, r3
 800736a:	d102      	bne.n	8007372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e001      	b.n	8007376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007376:	f001 fc51 	bl	8008c1c <vPortExitCritical>

	return xReturn;
 800737a:	68fb      	ldr	r3, [r7, #12]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e014      	b.n	80073be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007394:	4a0f      	ldr	r2, [pc, #60]	@ (80073d4 <vQueueAddToRegistry+0x50>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073a0:	490c      	ldr	r1, [pc, #48]	@ (80073d4 <vQueueAddToRegistry+0x50>)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073aa:	4a0a      	ldr	r2, [pc, #40]	@ (80073d4 <vQueueAddToRegistry+0x50>)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073b6:	e006      	b.n	80073c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b07      	cmp	r3, #7
 80073c2:	d9e7      	bls.n	8007394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20004eb0 	.word	0x20004eb0

080073d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073e8:	f001 fbe6 	bl	8008bb8 <vPortEnterCritical>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f8:	d103      	bne.n	8007402 <vQueueWaitForMessageRestricted+0x2a>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007408:	b25b      	sxtb	r3, r3
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800740e:	d103      	bne.n	8007418 <vQueueWaitForMessageRestricted+0x40>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007418:	f001 fc00 	bl	8008c1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	3324      	adds	r3, #36	@ 0x24
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fc45 	bl	8007cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007432:	6978      	ldr	r0, [r7, #20]
 8007434:	f7ff ff26 	bl	8007284 <prvUnlockQueue>
	}
 8007438:	bf00      	nop
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	@ 0x38
 8007444:	af04      	add	r7, sp, #16
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	623b      	str	r3, [r7, #32]
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	61fb      	str	r3, [r7, #28]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800748a:	235c      	movs	r3, #92	@ 0x5c
 800748c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b5c      	cmp	r3, #92	@ 0x5c
 8007492:	d00b      	beq.n	80074ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	61bb      	str	r3, [r7, #24]
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01e      	beq.n	80074f2 <xTaskCreateStatic+0xb2>
 80074b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01b      	beq.n	80074f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074cc:	2300      	movs	r3, #0
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	9302      	str	r3, [sp, #8]
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f850 	bl	800758a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074ec:	f000 f8de 	bl	80076ac <prvAddNewTaskToReadyList>
 80074f0:	e001      	b.n	80074f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074f6:	697b      	ldr	r3, [r7, #20]
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3728      	adds	r7, #40	@ 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08c      	sub	sp, #48	@ 0x30
 8007504:	af04      	add	r7, sp, #16
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4618      	mov	r0, r3
 8007516:	f001 fc71 	bl	8008dfc <pvPortMalloc>
 800751a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007522:	205c      	movs	r0, #92	@ 0x5c
 8007524:	f001 fc6a 	bl	8008dfc <pvPortMalloc>
 8007528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	631a      	str	r2, [r3, #48]	@ 0x30
 8007536:	e005      	b.n	8007544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007538:	6978      	ldr	r0, [r7, #20]
 800753a:	f001 fd2d 	bl	8008f98 <vPortFree>
 800753e:	e001      	b.n	8007544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007540:	2300      	movs	r3, #0
 8007542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d017      	beq.n	800757a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	2300      	movs	r3, #0
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	9302      	str	r3, [sp, #8]
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f80e 	bl	800758a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800756e:	69f8      	ldr	r0, [r7, #28]
 8007570:	f000 f89c 	bl	80076ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007574:	2301      	movs	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	e002      	b.n	8007580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800757a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800757e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007580:	69bb      	ldr	r3, [r7, #24]
	}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b088      	sub	sp, #32
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	461a      	mov	r2, r3
 80075a2:	21a5      	movs	r1, #165	@ 0xa5
 80075a4:	f00c ffc4 	bl	8014530 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075b2:	3b01      	subs	r3, #1
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f023 0307 	bic.w	r3, r3, #7
 80075c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	617b      	str	r3, [r7, #20]
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	e7fd      	b.n	80075e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01f      	beq.n	800762a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	e012      	b.n	8007616 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	7819      	ldrb	r1, [r3, #0]
 80075f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	3334      	adds	r3, #52	@ 0x34
 8007600:	460a      	mov	r2, r1
 8007602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	3301      	adds	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	2b0f      	cmp	r3, #15
 800761a:	d9e9      	bls.n	80075f0 <prvInitialiseNewTask+0x66>
 800761c:	e000      	b.n	8007620 <prvInitialiseNewTask+0x96>
			{
				break;
 800761e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007628:	e003      	b.n	8007632 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	2b37      	cmp	r3, #55	@ 0x37
 8007636:	d901      	bls.n	800763c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007638:	2337      	movs	r3, #55	@ 0x37
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007640:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007646:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	2200      	movs	r2, #0
 800764c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f966 	bl	8006924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	3318      	adds	r3, #24
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff f961 	bl	8006924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007676:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	2200      	movs	r2, #0
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	68f9      	ldr	r1, [r7, #12]
 800768a:	69b8      	ldr	r0, [r7, #24]
 800768c:	f001 f966 	bl	800895c <pxPortInitialiseStack>
 8007690:	4602      	mov	r2, r0
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a2:	bf00      	nop
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 fa80 	bl	8008bb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a2c      	ldr	r2, [pc, #176]	@ (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076d0:	4b27      	ldr	r3, [pc, #156]	@ (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d110      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076d8:	f000 fc46 	bl	8007f68 <prvInitialiseTaskLists>
 80076dc:	e00d      	b.n	80076fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076de:	4b26      	ldr	r3, [pc, #152]	@ (8007778 <prvAddNewTaskToReadyList+0xcc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076e6:	4b23      	ldr	r3, [pc, #140]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d802      	bhi.n	80076fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076fa:	4b20      	ldr	r3, [pc, #128]	@ (800777c <prvAddNewTaskToReadyList+0xd0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	4a1e      	ldr	r2, [pc, #120]	@ (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007704:	4b1d      	ldr	r3, [pc, #116]	@ (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007710:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <prvAddNewTaskToReadyList+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <prvAddNewTaskToReadyList+0x74>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771c:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <prvAddNewTaskToReadyList+0xd4>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <prvAddNewTaskToReadyList+0xd8>)
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7ff f901 	bl	800693e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800773c:	f001 fa6e 	bl	8008c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007740:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <prvAddNewTaskToReadyList+0xcc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007748:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d207      	bcs.n	8007766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007756:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <prvAddNewTaskToReadyList+0xdc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200053c4 	.word	0x200053c4
 8007774:	20004ef0 	.word	0x20004ef0
 8007778:	200053d0 	.word	0x200053d0
 800777c:	200053e0 	.word	0x200053e0
 8007780:	200053cc 	.word	0x200053cc
 8007784:	20004ef4 	.word	0x20004ef4
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d018      	beq.n	80077d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800779e:	4b14      	ldr	r3, [pc, #80]	@ (80077f0 <vTaskDelay+0x64>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <vTaskDelay+0x32>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077be:	f000 f883 	bl	80078c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c2:	2100      	movs	r1, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fd1b 	bl	8008200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077ca:	f000 f88b 	bl	80078e4 <xTaskResumeAll>
 80077ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d107      	bne.n	80077e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077d6:	4b07      	ldr	r3, [pc, #28]	@ (80077f4 <vTaskDelay+0x68>)
 80077d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	200053ec 	.word	0x200053ec
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007806:	463a      	mov	r2, r7
 8007808:	1d39      	adds	r1, r7, #4
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f834 	bl	800687c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	9202      	str	r2, [sp, #8]
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	2300      	movs	r3, #0
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	460a      	mov	r2, r1
 8007826:	4922      	ldr	r1, [pc, #136]	@ (80078b0 <vTaskStartScheduler+0xb8>)
 8007828:	4822      	ldr	r0, [pc, #136]	@ (80078b4 <vTaskStartScheduler+0xbc>)
 800782a:	f7ff fe09 	bl	8007440 <xTaskCreateStatic>
 800782e:	4603      	mov	r3, r0
 8007830:	4a21      	ldr	r2, [pc, #132]	@ (80078b8 <vTaskStartScheduler+0xc0>)
 8007832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007834:	4b20      	ldr	r3, [pc, #128]	@ (80078b8 <vTaskStartScheduler+0xc0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e001      	b.n	8007846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d102      	bne.n	8007852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800784c:	f000 fd2c 	bl	80082a8 <xTimerCreateTimerTask>
 8007850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d116      	bne.n	8007886 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	613b      	str	r3, [r7, #16]
}
 800786a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800786c:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <vTaskStartScheduler+0xc4>)
 800786e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007874:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <vTaskStartScheduler+0xc8>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800787a:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <vTaskStartScheduler+0xcc>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007880:	f001 f8f6 	bl	8008a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007884:	e00f      	b.n	80078a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800788c:	d10b      	bne.n	80078a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <vTaskStartScheduler+0xaa>
}
 80078a6:	bf00      	nop
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	080154b4 	.word	0x080154b4
 80078b4:	08007f39 	.word	0x08007f39
 80078b8:	200053e8 	.word	0x200053e8
 80078bc:	200053e4 	.word	0x200053e4
 80078c0:	200053d0 	.word	0x200053d0
 80078c4:	200053c8 	.word	0x200053c8

080078c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078cc:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <vTaskSuspendAll+0x18>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a03      	ldr	r2, [pc, #12]	@ (80078e0 <vTaskSuspendAll+0x18>)
 80078d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078d6:	bf00      	nop
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	200053ec 	.word	0x200053ec

080078e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078f2:	4b42      	ldr	r3, [pc, #264]	@ (80079fc <xTaskResumeAll+0x118>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <xTaskResumeAll+0x2e>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007912:	f001 f951 	bl	8008bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007916:	4b39      	ldr	r3, [pc, #228]	@ (80079fc <xTaskResumeAll+0x118>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	4a37      	ldr	r2, [pc, #220]	@ (80079fc <xTaskResumeAll+0x118>)
 800791e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007920:	4b36      	ldr	r3, [pc, #216]	@ (80079fc <xTaskResumeAll+0x118>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d162      	bne.n	80079ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007928:	4b35      	ldr	r3, [pc, #212]	@ (8007a00 <xTaskResumeAll+0x11c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05e      	beq.n	80079ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007930:	e02f      	b.n	8007992 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007932:	4b34      	ldr	r3, [pc, #208]	@ (8007a04 <xTaskResumeAll+0x120>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3318      	adds	r3, #24
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff f85a 	bl	80069f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3304      	adds	r3, #4
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff f855 	bl	80069f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007952:	4b2d      	ldr	r3, [pc, #180]	@ (8007a08 <xTaskResumeAll+0x124>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <xTaskResumeAll+0x7e>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a08 <xTaskResumeAll+0x124>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a27      	ldr	r2, [pc, #156]	@ (8007a0c <xTaskResumeAll+0x128>)
 8007970:	441a      	add	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fe ffe0 	bl	800693e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007982:	4b23      	ldr	r3, [pc, #140]	@ (8007a10 <xTaskResumeAll+0x12c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800798c:	4b21      	ldr	r3, [pc, #132]	@ (8007a14 <xTaskResumeAll+0x130>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007992:	4b1c      	ldr	r3, [pc, #112]	@ (8007a04 <xTaskResumeAll+0x120>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1cb      	bne.n	8007932 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079a0:	f000 fb80 	bl	80080a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a18 <xTaskResumeAll+0x134>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d010      	beq.n	80079d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079b0:	f000 f846 	bl	8007a40 <xTaskIncrementTick>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079ba:	4b16      	ldr	r3, [pc, #88]	@ (8007a14 <xTaskResumeAll+0x130>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f1      	bne.n	80079b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079cc:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <xTaskResumeAll+0x134>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <xTaskResumeAll+0x130>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079de:	4b0f      	ldr	r3, [pc, #60]	@ (8007a1c <xTaskResumeAll+0x138>)
 80079e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ee:	f001 f915 	bl	8008c1c <vPortExitCritical>

	return xAlreadyYielded;
 80079f2:	68bb      	ldr	r3, [r7, #8]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200053ec 	.word	0x200053ec
 8007a00:	200053c4 	.word	0x200053c4
 8007a04:	20005384 	.word	0x20005384
 8007a08:	200053cc 	.word	0x200053cc
 8007a0c:	20004ef4 	.word	0x20004ef4
 8007a10:	20004ef0 	.word	0x20004ef0
 8007a14:	200053d8 	.word	0x200053d8
 8007a18:	200053d4 	.word	0x200053d4
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a26:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <xTaskGetTickCount+0x1c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a2c:	687b      	ldr	r3, [r7, #4]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	200053c8 	.word	0x200053c8

08007a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b88 <xTaskIncrementTick+0x148>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 8090 	bne.w	8007b74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a54:	4b4d      	ldr	r3, [pc, #308]	@ (8007b8c <xTaskIncrementTick+0x14c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b8c <xTaskIncrementTick+0x14c>)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d121      	bne.n	8007aac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a68:	4b49      	ldr	r3, [pc, #292]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	603b      	str	r3, [r7, #0]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xTaskIncrementTick+0x46>
 8007a8a:	4b41      	ldr	r3, [pc, #260]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	4b40      	ldr	r3, [pc, #256]	@ (8007b94 <xTaskIncrementTick+0x154>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a3e      	ldr	r2, [pc, #248]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	4a3e      	ldr	r2, [pc, #248]	@ (8007b94 <xTaskIncrementTick+0x154>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <xTaskIncrementTick+0x158>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8007b98 <xTaskIncrementTick+0x158>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	f000 fafc 	bl	80080a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aac:	4b3b      	ldr	r3, [pc, #236]	@ (8007b9c <xTaskIncrementTick+0x15c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d349      	bcc.n	8007b4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab6:	4b36      	ldr	r3, [pc, #216]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac0:	4b36      	ldr	r3, [pc, #216]	@ (8007b9c <xTaskIncrementTick+0x15c>)
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ac6:	601a      	str	r2, [r3, #0]
					break;
 8007ac8:	e03f      	b.n	8007b4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aca:	4b31      	ldr	r3, [pc, #196]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d203      	bcs.n	8007aea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8007b9c <xTaskIncrementTick+0x15c>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ae8:	e02f      	b.n	8007b4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe ff82 	bl	80069f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	3318      	adds	r3, #24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe ff79 	bl	80069f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0a:	4b25      	ldr	r3, [pc, #148]	@ (8007ba0 <xTaskIncrementTick+0x160>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d903      	bls.n	8007b1a <xTaskIncrementTick+0xda>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	4a22      	ldr	r2, [pc, #136]	@ (8007ba0 <xTaskIncrementTick+0x160>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba4 <xTaskIncrementTick+0x164>)
 8007b28:	441a      	add	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7fe ff04 	bl	800693e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <xTaskIncrementTick+0x168>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d3b8      	bcc.n	8007ab6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b48:	e7b5      	b.n	8007ab6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <xTaskIncrementTick+0x168>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b50:	4914      	ldr	r1, [pc, #80]	@ (8007ba4 <xTaskIncrementTick+0x164>)
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d901      	bls.n	8007b66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b66:	4b11      	ldr	r3, [pc, #68]	@ (8007bac <xTaskIncrementTick+0x16c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	e004      	b.n	8007b7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b74:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <xTaskIncrementTick+0x170>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8007bb0 <xTaskIncrementTick+0x170>)
 8007b7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b7e:	697b      	ldr	r3, [r7, #20]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200053ec 	.word	0x200053ec
 8007b8c:	200053c8 	.word	0x200053c8
 8007b90:	2000537c 	.word	0x2000537c
 8007b94:	20005380 	.word	0x20005380
 8007b98:	200053dc 	.word	0x200053dc
 8007b9c:	200053e4 	.word	0x200053e4
 8007ba0:	200053cc 	.word	0x200053cc
 8007ba4:	20004ef4 	.word	0x20004ef4
 8007ba8:	20004ef0 	.word	0x20004ef0
 8007bac:	200053d8 	.word	0x200053d8
 8007bb0:	200053d4 	.word	0x200053d4

08007bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bba:	4b28      	ldr	r3, [pc, #160]	@ (8007c5c <vTaskSwitchContext+0xa8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bc2:	4b27      	ldr	r3, [pc, #156]	@ (8007c60 <vTaskSwitchContext+0xac>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bc8:	e042      	b.n	8007c50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bca:	4b25      	ldr	r3, [pc, #148]	@ (8007c60 <vTaskSwitchContext+0xac>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd0:	4b24      	ldr	r3, [pc, #144]	@ (8007c64 <vTaskSwitchContext+0xb0>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e011      	b.n	8007bfc <vTaskSwitchContext+0x48>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10b      	bne.n	8007bf6 <vTaskSwitchContext+0x42>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	e7fd      	b.n	8007bf2 <vTaskSwitchContext+0x3e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	491a      	ldr	r1, [pc, #104]	@ (8007c68 <vTaskSwitchContext+0xb4>)
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0e3      	beq.n	8007bd8 <vTaskSwitchContext+0x24>
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a13      	ldr	r2, [pc, #76]	@ (8007c68 <vTaskSwitchContext+0xb4>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	3308      	adds	r3, #8
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d104      	bne.n	8007c40 <vTaskSwitchContext+0x8c>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	605a      	str	r2, [r3, #4]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	4a09      	ldr	r2, [pc, #36]	@ (8007c6c <vTaskSwitchContext+0xb8>)
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	4a06      	ldr	r2, [pc, #24]	@ (8007c64 <vTaskSwitchContext+0xb0>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6013      	str	r3, [r2, #0]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	200053ec 	.word	0x200053ec
 8007c60:	200053d8 	.word	0x200053d8
 8007c64:	200053cc 	.word	0x200053cc
 8007c68:	20004ef4 	.word	0x20004ef4
 8007c6c:	20004ef0 	.word	0x20004ef0

08007c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c98:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <vTaskPlaceOnEventList+0x48>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3318      	adds	r3, #24
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe fe70 	bl	8006986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	6838      	ldr	r0, [r7, #0]
 8007caa:	f000 faa9 	bl	8008200 <prvAddCurrentTaskToDelayedList>
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20004ef0 	.word	0x20004ef0

08007cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10b      	bne.n	8007ce6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3318      	adds	r3, #24
 8007cec:	4619      	mov	r1, r3
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7fe fe25 	bl	800693e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f000 fa7c 	bl	8008200 <prvAddCurrentTaskToDelayedList>
	}
 8007d08:	bf00      	nop
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20004ef0 	.word	0x20004ef0

08007d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60fb      	str	r3, [r7, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3318      	adds	r3, #24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fe56 	bl	80069f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <xTaskRemoveFromEventList+0xb0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11d      	bne.n	8007d90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fe4d 	bl	80069f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d62:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <xTaskRemoveFromEventList+0xb4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <xTaskRemoveFromEventList+0x5e>
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6e:	4a16      	ldr	r2, [pc, #88]	@ (8007dc8 <xTaskRemoveFromEventList+0xb4>)
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4a13      	ldr	r2, [pc, #76]	@ (8007dcc <xTaskRemoveFromEventList+0xb8>)
 8007d80:	441a      	add	r2, r3
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fe fdd8 	bl	800693e <vListInsertEnd>
 8007d8e:	e005      	b.n	8007d9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3318      	adds	r3, #24
 8007d94:	4619      	mov	r1, r3
 8007d96:	480e      	ldr	r0, [pc, #56]	@ (8007dd0 <xTaskRemoveFromEventList+0xbc>)
 8007d98:	f7fe fdd1 	bl	800693e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da0:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd4 <xTaskRemoveFromEventList+0xc0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d905      	bls.n	8007db6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dae:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd8 <xTaskRemoveFromEventList+0xc4>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e001      	b.n	8007dba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dba:	697b      	ldr	r3, [r7, #20]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200053ec 	.word	0x200053ec
 8007dc8:	200053cc 	.word	0x200053cc
 8007dcc:	20004ef4 	.word	0x20004ef4
 8007dd0:	20005384 	.word	0x20005384
 8007dd4:	20004ef0 	.word	0x20004ef0
 8007dd8:	200053d8 	.word	0x200053d8

08007ddc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	60fb      	str	r3, [r7, #12]
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	e7fd      	b.n	8007dfe <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007e02:	f000 fed9 	bl	8008bb8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e06:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <vTaskSetTimeOutState+0x48>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007e0e:	4b06      	ldr	r3, [pc, #24]	@ (8007e28 <vTaskSetTimeOutState+0x4c>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007e16:	f000 ff01 	bl	8008c1c <vPortExitCritical>
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	200053dc 	.word	0x200053dc
 8007e28:	200053c8 	.word	0x200053c8

08007e2c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e34:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <vTaskInternalSetTimeOutState+0x24>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e3c:	4b05      	ldr	r3, [pc, #20]	@ (8007e54 <vTaskInternalSetTimeOutState+0x28>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	605a      	str	r2, [r3, #4]
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	200053dc 	.word	0x200053dc
 8007e54:	200053c8 	.word	0x200053c8

08007e58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	613b      	str	r3, [r7, #16]
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60fb      	str	r3, [r7, #12]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e9e:	f000 fe8b 	bl	8008bb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8007f18 <xTaskCheckForTimeOut+0xc0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eba:	d102      	bne.n	8007ec2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	e023      	b.n	8007f0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b15      	ldr	r3, [pc, #84]	@ (8007f1c <xTaskCheckForTimeOut+0xc4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d007      	beq.n	8007ede <xTaskCheckForTimeOut+0x86>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d302      	bcc.n	8007ede <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e015      	b.n	8007f0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d20b      	bcs.n	8007f00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff ff99 	bl	8007e2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	61fb      	str	r3, [r7, #28]
 8007efe:	e004      	b.n	8007f0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f0a:	f000 fe87 	bl	8008c1c <vPortExitCritical>

	return xReturn;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3720      	adds	r7, #32
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	200053c8 	.word	0x200053c8
 8007f1c:	200053dc 	.word	0x200053dc

08007f20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f24:	4b03      	ldr	r3, [pc, #12]	@ (8007f34 <vTaskMissedYield+0x14>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
}
 8007f2a:	bf00      	nop
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	200053d8 	.word	0x200053d8

08007f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f40:	f000 f852 	bl	8007fe8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <prvIdleTask+0x28>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d9f9      	bls.n	8007f40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <prvIdleTask+0x2c>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f5c:	e7f0      	b.n	8007f40 <prvIdleTask+0x8>
 8007f5e:	bf00      	nop
 8007f60:	20004ef4 	.word	0x20004ef4
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f6e:	2300      	movs	r3, #0
 8007f70:	607b      	str	r3, [r7, #4]
 8007f72:	e00c      	b.n	8007f8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4a12      	ldr	r2, [pc, #72]	@ (8007fc8 <prvInitialiseTaskLists+0x60>)
 8007f80:	4413      	add	r3, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fcae 	bl	80068e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	607b      	str	r3, [r7, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b37      	cmp	r3, #55	@ 0x37
 8007f92:	d9ef      	bls.n	8007f74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f94:	480d      	ldr	r0, [pc, #52]	@ (8007fcc <prvInitialiseTaskLists+0x64>)
 8007f96:	f7fe fca5 	bl	80068e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f9a:	480d      	ldr	r0, [pc, #52]	@ (8007fd0 <prvInitialiseTaskLists+0x68>)
 8007f9c:	f7fe fca2 	bl	80068e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fa0:	480c      	ldr	r0, [pc, #48]	@ (8007fd4 <prvInitialiseTaskLists+0x6c>)
 8007fa2:	f7fe fc9f 	bl	80068e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fa6:	480c      	ldr	r0, [pc, #48]	@ (8007fd8 <prvInitialiseTaskLists+0x70>)
 8007fa8:	f7fe fc9c 	bl	80068e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fac:	480b      	ldr	r0, [pc, #44]	@ (8007fdc <prvInitialiseTaskLists+0x74>)
 8007fae:	f7fe fc99 	bl	80068e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe0 <prvInitialiseTaskLists+0x78>)
 8007fb4:	4a05      	ldr	r2, [pc, #20]	@ (8007fcc <prvInitialiseTaskLists+0x64>)
 8007fb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe4 <prvInitialiseTaskLists+0x7c>)
 8007fba:	4a05      	ldr	r2, [pc, #20]	@ (8007fd0 <prvInitialiseTaskLists+0x68>)
 8007fbc:	601a      	str	r2, [r3, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20004ef4 	.word	0x20004ef4
 8007fcc:	20005354 	.word	0x20005354
 8007fd0:	20005368 	.word	0x20005368
 8007fd4:	20005384 	.word	0x20005384
 8007fd8:	20005398 	.word	0x20005398
 8007fdc:	200053b0 	.word	0x200053b0
 8007fe0:	2000537c 	.word	0x2000537c
 8007fe4:	20005380 	.word	0x20005380

08007fe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fee:	e019      	b.n	8008024 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ff0:	f000 fde2 	bl	8008bb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff4:	4b10      	ldr	r3, [pc, #64]	@ (8008038 <prvCheckTasksWaitingTermination+0x50>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3304      	adds	r3, #4
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fcf9 	bl	80069f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <prvCheckTasksWaitingTermination+0x54>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3b01      	subs	r3, #1
 800800c:	4a0b      	ldr	r2, [pc, #44]	@ (800803c <prvCheckTasksWaitingTermination+0x54>)
 800800e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008010:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <prvCheckTasksWaitingTermination+0x58>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3b01      	subs	r3, #1
 8008016:	4a0a      	ldr	r2, [pc, #40]	@ (8008040 <prvCheckTasksWaitingTermination+0x58>)
 8008018:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800801a:	f000 fdff 	bl	8008c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f810 	bl	8008044 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008024:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <prvCheckTasksWaitingTermination+0x58>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e1      	bne.n	8007ff0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20005398 	.word	0x20005398
 800803c:	200053c4 	.word	0x200053c4
 8008040:	200053ac 	.word	0x200053ac

08008044 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008052:	2b00      	cmp	r3, #0
 8008054:	d108      	bne.n	8008068 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff9c 	bl	8008f98 <vPortFree>
				vPortFree( pxTCB );
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 ff99 	bl	8008f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008066:	e019      	b.n	800809c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800806e:	2b01      	cmp	r3, #1
 8008070:	d103      	bne.n	800807a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 ff90 	bl	8008f98 <vPortFree>
	}
 8008078:	e010      	b.n	800809c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008080:	2b02      	cmp	r3, #2
 8008082:	d00b      	beq.n	800809c <prvDeleteTCB+0x58>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <prvDeleteTCB+0x54>
	}
 800809c:	bf00      	nop
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080aa:	4b0c      	ldr	r3, [pc, #48]	@ (80080dc <prvResetNextTaskUnblockTime+0x38>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080b4:	4b0a      	ldr	r3, [pc, #40]	@ (80080e0 <prvResetNextTaskUnblockTime+0x3c>)
 80080b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080bc:	e008      	b.n	80080d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080be:	4b07      	ldr	r3, [pc, #28]	@ (80080dc <prvResetNextTaskUnblockTime+0x38>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a04      	ldr	r2, [pc, #16]	@ (80080e0 <prvResetNextTaskUnblockTime+0x3c>)
 80080ce:	6013      	str	r3, [r2, #0]
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	2000537c 	.word	0x2000537c
 80080e0:	200053e4 	.word	0x200053e4

080080e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008118 <xTaskGetSchedulerState+0x34>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080f2:	2301      	movs	r3, #1
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	e008      	b.n	800810a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f8:	4b08      	ldr	r3, [pc, #32]	@ (800811c <xTaskGetSchedulerState+0x38>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008100:	2302      	movs	r3, #2
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e001      	b.n	800810a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800810a:	687b      	ldr	r3, [r7, #4]
	}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	200053d0 	.word	0x200053d0
 800811c:	200053ec 	.word	0x200053ec

08008120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d058      	beq.n	80081e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008136:	4b2f      	ldr	r3, [pc, #188]	@ (80081f4 <xTaskPriorityDisinherit+0xd4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	429a      	cmp	r2, r3
 800813e:	d00b      	beq.n	8008158 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60bb      	str	r3, [r7, #8]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818a:	429a      	cmp	r2, r3
 800818c:	d02c      	beq.n	80081e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008192:	2b00      	cmp	r3, #0
 8008194:	d128      	bne.n	80081e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	3304      	adds	r3, #4
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fc2c 	bl	80069f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b8:	4b0f      	ldr	r3, [pc, #60]	@ (80081f8 <xTaskPriorityDisinherit+0xd8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d903      	bls.n	80081c8 <xTaskPriorityDisinherit+0xa8>
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c4:	4a0c      	ldr	r2, [pc, #48]	@ (80081f8 <xTaskPriorityDisinherit+0xd8>)
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4a09      	ldr	r2, [pc, #36]	@ (80081fc <xTaskPriorityDisinherit+0xdc>)
 80081d6:	441a      	add	r2, r3
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	3304      	adds	r3, #4
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f7fe fbad 	bl	800693e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081e8:	697b      	ldr	r3, [r7, #20]
	}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20004ef0 	.word	0x20004ef0
 80081f8:	200053cc 	.word	0x200053cc
 80081fc:	20004ef4 	.word	0x20004ef4

08008200 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800820a:	4b21      	ldr	r3, [pc, #132]	@ (8008290 <prvAddCurrentTaskToDelayedList+0x90>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008210:	4b20      	ldr	r3, [pc, #128]	@ (8008294 <prvAddCurrentTaskToDelayedList+0x94>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3304      	adds	r3, #4
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fbee 	bl	80069f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008222:	d10a      	bne.n	800823a <prvAddCurrentTaskToDelayedList+0x3a>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822a:	4b1a      	ldr	r3, [pc, #104]	@ (8008294 <prvAddCurrentTaskToDelayedList+0x94>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3304      	adds	r3, #4
 8008230:	4619      	mov	r1, r3
 8008232:	4819      	ldr	r0, [pc, #100]	@ (8008298 <prvAddCurrentTaskToDelayedList+0x98>)
 8008234:	f7fe fb83 	bl	800693e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008238:	e026      	b.n	8008288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4413      	add	r3, r2
 8008240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <prvAddCurrentTaskToDelayedList+0x94>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	429a      	cmp	r2, r3
 8008250:	d209      	bcs.n	8008266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008252:	4b12      	ldr	r3, [pc, #72]	@ (800829c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <prvAddCurrentTaskToDelayedList+0x94>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f7fe fb91 	bl	8006986 <vListInsert>
}
 8008264:	e010      	b.n	8008288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008266:	4b0e      	ldr	r3, [pc, #56]	@ (80082a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4b0a      	ldr	r3, [pc, #40]	@ (8008294 <prvAddCurrentTaskToDelayedList+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f7fe fb87 	bl	8006986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008278:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	429a      	cmp	r2, r3
 8008280:	d202      	bcs.n	8008288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008282:	4a08      	ldr	r2, [pc, #32]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6013      	str	r3, [r2, #0]
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200053c8 	.word	0x200053c8
 8008294:	20004ef0 	.word	0x20004ef0
 8008298:	200053b0 	.word	0x200053b0
 800829c:	20005380 	.word	0x20005380
 80082a0:	2000537c 	.word	0x2000537c
 80082a4:	200053e4 	.word	0x200053e4

080082a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082b2:	f000 fb13 	bl	80088dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082b6:	4b1d      	ldr	r3, [pc, #116]	@ (800832c <xTimerCreateTimerTask+0x84>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d021      	beq.n	8008302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082c6:	1d3a      	adds	r2, r7, #4
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fe faed 	bl	80068b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	9202      	str	r2, [sp, #8]
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	2302      	movs	r3, #2
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	460a      	mov	r2, r1
 80082e8:	4911      	ldr	r1, [pc, #68]	@ (8008330 <xTimerCreateTimerTask+0x88>)
 80082ea:	4812      	ldr	r0, [pc, #72]	@ (8008334 <xTimerCreateTimerTask+0x8c>)
 80082ec:	f7ff f8a8 	bl	8007440 <xTaskCreateStatic>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4a11      	ldr	r2, [pc, #68]	@ (8008338 <xTimerCreateTimerTask+0x90>)
 80082f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082f6:	4b10      	ldr	r3, [pc, #64]	@ (8008338 <xTimerCreateTimerTask+0x90>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082fe:	2301      	movs	r3, #1
 8008300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10b      	bne.n	8008320 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	613b      	str	r3, [r7, #16]
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008320:	697b      	ldr	r3, [r7, #20]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20005420 	.word	0x20005420
 8008330:	080154bc 	.word	0x080154bc
 8008334:	08008475 	.word	0x08008475
 8008338:	20005424 	.word	0x20005424

0800833c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	@ 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xTimerGenericCommand+0x30>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	623b      	str	r3, [r7, #32]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800836c:	4b19      	ldr	r3, [pc, #100]	@ (80083d4 <xTimerGenericCommand+0x98>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d02a      	beq.n	80083ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b05      	cmp	r3, #5
 8008384:	dc18      	bgt.n	80083b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008386:	f7ff fead 	bl	80080e4 <xTaskGetSchedulerState>
 800838a:	4603      	mov	r3, r0
 800838c:	2b02      	cmp	r3, #2
 800838e:	d109      	bne.n	80083a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008390:	4b10      	ldr	r3, [pc, #64]	@ (80083d4 <xTimerGenericCommand+0x98>)
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	f107 0110 	add.w	r1, r7, #16
 8008398:	2300      	movs	r3, #0
 800839a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800839c:	f7fe fc60 	bl	8006c60 <xQueueGenericSend>
 80083a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80083a2:	e012      	b.n	80083ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083a4:	4b0b      	ldr	r3, [pc, #44]	@ (80083d4 <xTimerGenericCommand+0x98>)
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	f107 0110 	add.w	r1, r7, #16
 80083ac:	2300      	movs	r3, #0
 80083ae:	2200      	movs	r2, #0
 80083b0:	f7fe fc56 	bl	8006c60 <xQueueGenericSend>
 80083b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80083b6:	e008      	b.n	80083ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083b8:	4b06      	ldr	r3, [pc, #24]	@ (80083d4 <xTimerGenericCommand+0x98>)
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	f107 0110 	add.w	r1, r7, #16
 80083c0:	2300      	movs	r3, #0
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	f7fe fd4e 	bl	8006e64 <xQueueGenericSendFromISR>
 80083c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3728      	adds	r7, #40	@ 0x28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20005420 	.word	0x20005420

080083d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af02      	add	r7, sp, #8
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e2:	4b23      	ldr	r3, [pc, #140]	@ (8008470 <prvProcessExpiredTimer+0x98>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe fb01 	bl	80069f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d023      	beq.n	800844c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	699a      	ldr	r2, [r3, #24]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	18d1      	adds	r1, r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	6978      	ldr	r0, [r7, #20]
 8008412:	f000 f8d5 	bl	80085c0 <prvInsertTimerInActiveList>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800841c:	2300      	movs	r3, #0
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	2100      	movs	r1, #0
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7ff ff88 	bl	800833c <xTimerGenericCommand>
 800842c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d114      	bne.n	800845e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	60fb      	str	r3, [r7, #12]
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	6978      	ldr	r0, [r7, #20]
 8008464:	4798      	blx	r3
}
 8008466:	bf00      	nop
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20005418 	.word	0x20005418

08008474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800847c:	f107 0308 	add.w	r3, r7, #8
 8008480:	4618      	mov	r0, r3
 8008482:	f000 f859 	bl	8008538 <prvGetNextExpireTime>
 8008486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4619      	mov	r1, r3
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 f805 	bl	800849c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008492:	f000 f8d7 	bl	8008644 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008496:	bf00      	nop
 8008498:	e7f0      	b.n	800847c <prvTimerTask+0x8>
	...

0800849c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084a6:	f7ff fa0f 	bl	80078c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084aa:	f107 0308 	add.w	r3, r7, #8
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f866 	bl	8008580 <prvSampleTimeNow>
 80084b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d130      	bne.n	800851e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <prvProcessTimerOrBlockTask+0x3c>
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d806      	bhi.n	80084d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084ca:	f7ff fa0b 	bl	80078e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ff81 	bl	80083d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084d6:	e024      	b.n	8008522 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084de:	4b13      	ldr	r3, [pc, #76]	@ (800852c <prvProcessTimerOrBlockTask+0x90>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <prvProcessTimerOrBlockTask+0x50>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <prvProcessTimerOrBlockTask+0x52>
 80084ec:	2300      	movs	r3, #0
 80084ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008530 <prvProcessTimerOrBlockTask+0x94>)
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4619      	mov	r1, r3
 80084fe:	f7fe ff6b 	bl	80073d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008502:	f7ff f9ef 	bl	80078e4 <xTaskResumeAll>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800850c:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <prvProcessTimerOrBlockTask+0x98>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
}
 800851c:	e001      	b.n	8008522 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800851e:	f7ff f9e1 	bl	80078e4 <xTaskResumeAll>
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	2000541c 	.word	0x2000541c
 8008530:	20005420 	.word	0x20005420
 8008534:	e000ed04 	.word	0xe000ed04

08008538 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008540:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <prvGetNextExpireTime+0x44>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <prvGetNextExpireTime+0x16>
 800854a:	2201      	movs	r2, #1
 800854c:	e000      	b.n	8008550 <prvGetNextExpireTime+0x18>
 800854e:	2200      	movs	r2, #0
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800855c:	4b07      	ldr	r3, [pc, #28]	@ (800857c <prvGetNextExpireTime+0x44>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	e001      	b.n	800856c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800856c:	68fb      	ldr	r3, [r7, #12]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20005418 	.word	0x20005418

08008580 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008588:	f7ff fa4a 	bl	8007a20 <xTaskGetTickCount>
 800858c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800858e:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <prvSampleTimeNow+0x3c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	429a      	cmp	r2, r3
 8008596:	d205      	bcs.n	80085a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008598:	f000 f93a 	bl	8008810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	e002      	b.n	80085aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085aa:	4a04      	ldr	r2, [pc, #16]	@ (80085bc <prvSampleTimeNow+0x3c>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085b0:	68fb      	ldr	r3, [r7, #12]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20005428 	.word	0x20005428

080085c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d812      	bhi.n	800860c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	1ad2      	subs	r2, r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d302      	bcc.n	80085fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e01b      	b.n	8008632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085fa:	4b10      	ldr	r3, [pc, #64]	@ (800863c <prvInsertTimerInActiveList+0x7c>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3304      	adds	r3, #4
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f7fe f9be 	bl	8006986 <vListInsert>
 800860a:	e012      	b.n	8008632 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	429a      	cmp	r2, r3
 8008612:	d206      	bcs.n	8008622 <prvInsertTimerInActiveList+0x62>
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d302      	bcc.n	8008622 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800861c:	2301      	movs	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	e007      	b.n	8008632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008622:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <prvInsertTimerInActiveList+0x80>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3304      	adds	r3, #4
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f7fe f9aa 	bl	8006986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008632:	697b      	ldr	r3, [r7, #20]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	2000541c 	.word	0x2000541c
 8008640:	20005418 	.word	0x20005418

08008644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08e      	sub	sp, #56	@ 0x38
 8008648:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800864a:	e0ce      	b.n	80087ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	da19      	bge.n	8008686 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008652:	1d3b      	adds	r3, r7, #4
 8008654:	3304      	adds	r3, #4
 8008656:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	61fb      	str	r3, [r7, #28]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800867c:	6850      	ldr	r0, [r2, #4]
 800867e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008680:	6892      	ldr	r2, [r2, #8]
 8008682:	4611      	mov	r1, r2
 8008684:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f2c0 80ae 	blt.w	80087ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	3304      	adds	r3, #4
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe f9aa 	bl	80069f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086a4:	463b      	mov	r3, r7
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff ff6a 	bl	8008580 <prvSampleTimeNow>
 80086ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b09      	cmp	r3, #9
 80086b2:	f200 8097 	bhi.w	80087e4 <prvProcessReceivedCommands+0x1a0>
 80086b6:	a201      	add	r2, pc, #4	@ (adr r2, 80086bc <prvProcessReceivedCommands+0x78>)
 80086b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086bc:	080086e5 	.word	0x080086e5
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086e5 	.word	0x080086e5
 80086c8:	0800875b 	.word	0x0800875b
 80086cc:	0800876f 	.word	0x0800876f
 80086d0:	080087bb 	.word	0x080087bb
 80086d4:	080086e5 	.word	0x080086e5
 80086d8:	080086e5 	.word	0x080086e5
 80086dc:	0800875b 	.word	0x0800875b
 80086e0:	0800876f 	.word	0x0800876f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ea:	f043 0301 	orr.w	r3, r3, #1
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	18d1      	adds	r1, r2, r3
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008704:	f7ff ff5c 	bl	80085c0 <prvInsertTimerInActiveList>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d06c      	beq.n	80087e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008714:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d061      	beq.n	80087e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	441a      	add	r2, r3
 800872c:	2300      	movs	r3, #0
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	2300      	movs	r3, #0
 8008732:	2100      	movs	r1, #0
 8008734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008736:	f7ff fe01 	bl	800833c <xTimerGenericCommand>
 800873a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d152      	bne.n	80087e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	61bb      	str	r3, [r7, #24]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800875a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800876c:	e03d      	b.n	80087ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	b2da      	uxtb	r2, r3
 800877a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10b      	bne.n	80087a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	617b      	str	r3, [r7, #20]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	18d1      	adds	r1, r2, r3
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b4:	f7ff ff04 	bl	80085c0 <prvInsertTimerInActiveList>
					break;
 80087b8:	e017      	b.n	80087ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d103      	bne.n	80087d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ca:	f000 fbe5 	bl	8008f98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087ce:	e00c      	b.n	80087ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087e2:	e002      	b.n	80087ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087e4:	bf00      	nop
 80087e6:	e000      	b.n	80087ea <prvProcessReceivedCommands+0x1a6>
					break;
 80087e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087ea:	4b08      	ldr	r3, [pc, #32]	@ (800880c <prvProcessReceivedCommands+0x1c8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	1d39      	adds	r1, r7, #4
 80087f0:	2200      	movs	r2, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fbd4 	bl	8006fa0 <xQueueReceive>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f47f af26 	bne.w	800864c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	3730      	adds	r7, #48	@ 0x30
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20005420 	.word	0x20005420

08008810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008816:	e049      	b.n	80088ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008818:	4b2e      	ldr	r3, [pc, #184]	@ (80088d4 <prvSwitchTimerLists+0xc4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008822:	4b2c      	ldr	r3, [pc, #176]	@ (80088d4 <prvSwitchTimerLists+0xc4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3304      	adds	r3, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe f8e1 	bl	80069f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d02f      	beq.n	80088ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4413      	add	r3, r2
 8008854:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	d90e      	bls.n	800887c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800886a:	4b1a      	ldr	r3, [pc, #104]	@ (80088d4 <prvSwitchTimerLists+0xc4>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3304      	adds	r3, #4
 8008872:	4619      	mov	r1, r3
 8008874:	4610      	mov	r0, r2
 8008876:	f7fe f886 	bl	8006986 <vListInsert>
 800887a:	e017      	b.n	80088ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800887c:	2300      	movs	r3, #0
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	2300      	movs	r3, #0
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	2100      	movs	r1, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fd58 	bl	800833c <xTimerGenericCommand>
 800888c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	603b      	str	r3, [r7, #0]
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ac:	4b09      	ldr	r3, [pc, #36]	@ (80088d4 <prvSwitchTimerLists+0xc4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1b0      	bne.n	8008818 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088b6:	4b07      	ldr	r3, [pc, #28]	@ (80088d4 <prvSwitchTimerLists+0xc4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <prvSwitchTimerLists+0xc8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a04      	ldr	r2, [pc, #16]	@ (80088d4 <prvSwitchTimerLists+0xc4>)
 80088c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088c4:	4a04      	ldr	r2, [pc, #16]	@ (80088d8 <prvSwitchTimerLists+0xc8>)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6013      	str	r3, [r2, #0]
}
 80088ca:	bf00      	nop
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20005418 	.word	0x20005418
 80088d8:	2000541c 	.word	0x2000541c

080088dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088e2:	f000 f969 	bl	8008bb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088e6:	4b15      	ldr	r3, [pc, #84]	@ (800893c <prvCheckForValidListAndQueue+0x60>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d120      	bne.n	8008930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ee:	4814      	ldr	r0, [pc, #80]	@ (8008940 <prvCheckForValidListAndQueue+0x64>)
 80088f0:	f7fd fff8 	bl	80068e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088f4:	4813      	ldr	r0, [pc, #76]	@ (8008944 <prvCheckForValidListAndQueue+0x68>)
 80088f6:	f7fd fff5 	bl	80068e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088fa:	4b13      	ldr	r3, [pc, #76]	@ (8008948 <prvCheckForValidListAndQueue+0x6c>)
 80088fc:	4a10      	ldr	r2, [pc, #64]	@ (8008940 <prvCheckForValidListAndQueue+0x64>)
 80088fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008900:	4b12      	ldr	r3, [pc, #72]	@ (800894c <prvCheckForValidListAndQueue+0x70>)
 8008902:	4a10      	ldr	r2, [pc, #64]	@ (8008944 <prvCheckForValidListAndQueue+0x68>)
 8008904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008906:	2300      	movs	r3, #0
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <prvCheckForValidListAndQueue+0x74>)
 800890c:	4a11      	ldr	r2, [pc, #68]	@ (8008954 <prvCheckForValidListAndQueue+0x78>)
 800890e:	2110      	movs	r1, #16
 8008910:	200a      	movs	r0, #10
 8008912:	f7fe f905 	bl	8006b20 <xQueueGenericCreateStatic>
 8008916:	4603      	mov	r3, r0
 8008918:	4a08      	ldr	r2, [pc, #32]	@ (800893c <prvCheckForValidListAndQueue+0x60>)
 800891a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800891c:	4b07      	ldr	r3, [pc, #28]	@ (800893c <prvCheckForValidListAndQueue+0x60>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008924:	4b05      	ldr	r3, [pc, #20]	@ (800893c <prvCheckForValidListAndQueue+0x60>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	490b      	ldr	r1, [pc, #44]	@ (8008958 <prvCheckForValidListAndQueue+0x7c>)
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fd2a 	bl	8007384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008930:	f000 f974 	bl	8008c1c <vPortExitCritical>
}
 8008934:	bf00      	nop
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20005420 	.word	0x20005420
 8008940:	200053f0 	.word	0x200053f0
 8008944:	20005404 	.word	0x20005404
 8008948:	20005418 	.word	0x20005418
 800894c:	2000541c 	.word	0x2000541c
 8008950:	200054cc 	.word	0x200054cc
 8008954:	2000542c 	.word	0x2000542c
 8008958:	080154c4 	.word	0x080154c4

0800895c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3b04      	subs	r3, #4
 800896c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b04      	subs	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f023 0201 	bic.w	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800898c:	4a0c      	ldr	r2, [pc, #48]	@ (80089c0 <pxPortInitialiseStack+0x64>)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3b14      	subs	r3, #20
 8008996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b04      	subs	r3, #4
 80089a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f06f 0202 	mvn.w	r2, #2
 80089aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3b20      	subs	r3, #32
 80089b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089b2:	68fb      	ldr	r3, [r7, #12]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	080089c5 	.word	0x080089c5

080089c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ce:	4b13      	ldr	r3, [pc, #76]	@ (8008a1c <prvTaskExitError+0x58>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089d6:	d00b      	beq.n	80089f0 <prvTaskExitError+0x2c>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	60fb      	str	r3, [r7, #12]
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	e7fd      	b.n	80089ec <prvTaskExitError+0x28>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60bb      	str	r3, [r7, #8]
}
 8008a02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a04:	bf00      	nop
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0fc      	beq.n	8008a06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	200000a4 	.word	0x200000a4

08008a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <pxCurrentTCBConst2>)
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	6808      	ldr	r0, [r1, #0]
 8008a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	f380 8809 	msr	PSP, r0
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8811 	msr	BASEPRI, r0
 8008a3a:	4770      	bx	lr
 8008a3c:	f3af 8000 	nop.w

08008a40 <pxCurrentTCBConst2>:
 8008a40:	20004ef0 	.word	0x20004ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop

08008a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a48:	4808      	ldr	r0, [pc, #32]	@ (8008a6c <prvPortStartFirstTask+0x24>)
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f380 8808 	msr	MSP, r0
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	f380 8814 	msr	CONTROL, r0
 8008a5a:	b662      	cpsie	i
 8008a5c:	b661      	cpsie	f
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	df00      	svc	0
 8008a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a6a:	bf00      	nop
 8008a6c:	e000ed08 	.word	0xe000ed08

08008a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a76:	4b47      	ldr	r3, [pc, #284]	@ (8008b94 <xPortStartScheduler+0x124>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a47      	ldr	r2, [pc, #284]	@ (8008b98 <xPortStartScheduler+0x128>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d10b      	bne.n	8008a98 <xPortStartScheduler+0x28>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	613b      	str	r3, [r7, #16]
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a98:	4b3e      	ldr	r3, [pc, #248]	@ (8008b94 <xPortStartScheduler+0x124>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b9c <xPortStartScheduler+0x12c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d10b      	bne.n	8008aba <xPortStartScheduler+0x4a>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60fb      	str	r3, [r7, #12]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aba:	4b39      	ldr	r3, [pc, #228]	@ (8008ba0 <xPortStartScheduler+0x130>)
 8008abc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	22ff      	movs	r2, #255	@ 0xff
 8008aca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	4b31      	ldr	r3, [pc, #196]	@ (8008ba4 <xPortStartScheduler+0x134>)
 8008ae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ae2:	4b31      	ldr	r3, [pc, #196]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ae8:	e009      	b.n	8008afe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008aea:	4b2f      	ldr	r3, [pc, #188]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	4a2d      	ldr	r2, [pc, #180]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008af2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008afe:	78fb      	ldrb	r3, [r7, #3]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b06:	2b80      	cmp	r3, #128	@ 0x80
 8008b08:	d0ef      	beq.n	8008aea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b0a:	4b27      	ldr	r3, [pc, #156]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f1c3 0307 	rsb	r3, r3, #7
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d00b      	beq.n	8008b2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	60bb      	str	r3, [r7, #8]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b38:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b40:	4a19      	ldr	r2, [pc, #100]	@ (8008ba8 <xPortStartScheduler+0x138>)
 8008b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b4c:	4b17      	ldr	r3, [pc, #92]	@ (8008bac <xPortStartScheduler+0x13c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a16      	ldr	r2, [pc, #88]	@ (8008bac <xPortStartScheduler+0x13c>)
 8008b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b58:	4b14      	ldr	r3, [pc, #80]	@ (8008bac <xPortStartScheduler+0x13c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a13      	ldr	r2, [pc, #76]	@ (8008bac <xPortStartScheduler+0x13c>)
 8008b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b64:	f000 f8da 	bl	8008d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b68:	4b11      	ldr	r3, [pc, #68]	@ (8008bb0 <xPortStartScheduler+0x140>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b6e:	f000 f8f9 	bl	8008d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b72:	4b10      	ldr	r3, [pc, #64]	@ (8008bb4 <xPortStartScheduler+0x144>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a0f      	ldr	r2, [pc, #60]	@ (8008bb4 <xPortStartScheduler+0x144>)
 8008b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b7e:	f7ff ff63 	bl	8008a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b82:	f7ff f817 	bl	8007bb4 <vTaskSwitchContext>
	prvTaskExitError();
 8008b86:	f7ff ff1d 	bl	80089c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	e000ed00 	.word	0xe000ed00
 8008b98:	410fc271 	.word	0x410fc271
 8008b9c:	410fc270 	.word	0x410fc270
 8008ba0:	e000e400 	.word	0xe000e400
 8008ba4:	2000551c 	.word	0x2000551c
 8008ba8:	20005520 	.word	0x20005520
 8008bac:	e000ed20 	.word	0xe000ed20
 8008bb0:	200000a4 	.word	0x200000a4
 8008bb4:	e000ef34 	.word	0xe000ef34

08008bb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bd2:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <vPortEnterCritical+0x5c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c14 <vPortEnterCritical+0x5c>)
 8008bda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c14 <vPortEnterCritical+0x5c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d110      	bne.n	8008c06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008be4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <vPortEnterCritical+0x60>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	603b      	str	r3, [r7, #0]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <vPortEnterCritical+0x4a>
	}
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	200000a4 	.word	0x200000a4
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c22:	4b12      	ldr	r3, [pc, #72]	@ (8008c6c <vPortExitCritical+0x50>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10b      	bne.n	8008c42 <vPortExitCritical+0x26>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	607b      	str	r3, [r7, #4]
}
 8008c3c:	bf00      	nop
 8008c3e:	bf00      	nop
 8008c40:	e7fd      	b.n	8008c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c42:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <vPortExitCritical+0x50>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	4a08      	ldr	r2, [pc, #32]	@ (8008c6c <vPortExitCritical+0x50>)
 8008c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c4c:	4b07      	ldr	r3, [pc, #28]	@ (8008c6c <vPortExitCritical+0x50>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d105      	bne.n	8008c60 <vPortExitCritical+0x44>
 8008c54:	2300      	movs	r3, #0
 8008c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f383 8811 	msr	BASEPRI, r3
}
 8008c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	200000a4 	.word	0x200000a4

08008c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c70:	f3ef 8009 	mrs	r0, PSP
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	4b15      	ldr	r3, [pc, #84]	@ (8008cd0 <pxCurrentTCBConst>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f01e 0f10 	tst.w	lr, #16
 8008c80:	bf08      	it	eq
 8008c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	6010      	str	r0, [r2, #0]
 8008c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c94:	f380 8811 	msr	BASEPRI, r0
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f7fe ff88 	bl	8007bb4 <vTaskSwitchContext>
 8008ca4:	f04f 0000 	mov.w	r0, #0
 8008ca8:	f380 8811 	msr	BASEPRI, r0
 8008cac:	bc09      	pop	{r0, r3}
 8008cae:	6819      	ldr	r1, [r3, #0]
 8008cb0:	6808      	ldr	r0, [r1, #0]
 8008cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb6:	f01e 0f10 	tst.w	lr, #16
 8008cba:	bf08      	it	eq
 8008cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cc0:	f380 8809 	msr	PSP, r0
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	f3af 8000 	nop.w

08008cd0 <pxCurrentTCBConst>:
 8008cd0:	20004ef0 	.word	0x20004ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop

08008cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	607b      	str	r3, [r7, #4]
}
 8008cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cf2:	f7fe fea5 	bl	8007a40 <xTaskIncrementTick>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <xPortSysTickHandler+0x40>)
 8008cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	2300      	movs	r3, #0
 8008d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f383 8811 	msr	BASEPRI, r3
}
 8008d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d20:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <vPortSetupTimerInterrupt+0x34>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d26:	4b0b      	ldr	r3, [pc, #44]	@ (8008d54 <vPortSetupTimerInterrupt+0x38>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d58 <vPortSetupTimerInterrupt+0x3c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a0a      	ldr	r2, [pc, #40]	@ (8008d5c <vPortSetupTimerInterrupt+0x40>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	099b      	lsrs	r3, r3, #6
 8008d38:	4a09      	ldr	r2, [pc, #36]	@ (8008d60 <vPortSetupTimerInterrupt+0x44>)
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d3e:	4b04      	ldr	r3, [pc, #16]	@ (8008d50 <vPortSetupTimerInterrupt+0x34>)
 8008d40:	2207      	movs	r2, #7
 8008d42:	601a      	str	r2, [r3, #0]
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	e000e010 	.word	0xe000e010
 8008d54:	e000e018 	.word	0xe000e018
 8008d58:	20000098 	.word	0x20000098
 8008d5c:	10624dd3 	.word	0x10624dd3
 8008d60:	e000e014 	.word	0xe000e014

08008d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d74 <vPortEnableVFP+0x10>
 8008d68:	6801      	ldr	r1, [r0, #0]
 8008d6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d6e:	6001      	str	r1, [r0, #0]
 8008d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d72:	bf00      	nop
 8008d74:	e000ed88 	.word	0xe000ed88

08008d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d7e:	f3ef 8305 	mrs	r3, IPSR
 8008d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b0f      	cmp	r3, #15
 8008d88:	d915      	bls.n	8008db6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d8a:	4a18      	ldr	r2, [pc, #96]	@ (8008dec <vPortValidateInterruptPriority+0x74>)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d94:	4b16      	ldr	r3, [pc, #88]	@ (8008df0 <vPortValidateInterruptPriority+0x78>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	7afa      	ldrb	r2, [r7, #11]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d20b      	bcs.n	8008db6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008db6:	4b0f      	ldr	r3, [pc, #60]	@ (8008df4 <vPortValidateInterruptPriority+0x7c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008df8 <vPortValidateInterruptPriority+0x80>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d90b      	bls.n	8008dde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	603b      	str	r3, [r7, #0]
}
 8008dd8:	bf00      	nop
 8008dda:	bf00      	nop
 8008ddc:	e7fd      	b.n	8008dda <vPortValidateInterruptPriority+0x62>
	}
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	e000e3f0 	.word	0xe000e3f0
 8008df0:	2000551c 	.word	0x2000551c
 8008df4:	e000ed0c 	.word	0xe000ed0c
 8008df8:	20005520 	.word	0x20005520

08008dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	@ 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e08:	f7fe fd5e 	bl	80078c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008f80 <pvPortMalloc+0x184>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e14:	f000 f924 	bl	8009060 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e18:	4b5a      	ldr	r3, [pc, #360]	@ (8008f84 <pvPortMalloc+0x188>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f040 8095 	bne.w	8008f50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01e      	beq.n	8008e6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f003 0307 	and.w	r3, r3, #7
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d015      	beq.n	8008e6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f023 0307 	bic.w	r3, r3, #7
 8008e44:	3308      	adds	r3, #8
 8008e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <pvPortMalloc+0x6e>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	617b      	str	r3, [r7, #20]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d06f      	beq.n	8008f50 <pvPortMalloc+0x154>
 8008e70:	4b45      	ldr	r3, [pc, #276]	@ (8008f88 <pvPortMalloc+0x18c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d86a      	bhi.n	8008f50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e7a:	4b44      	ldr	r3, [pc, #272]	@ (8008f8c <pvPortMalloc+0x190>)
 8008e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e7e:	4b43      	ldr	r3, [pc, #268]	@ (8008f8c <pvPortMalloc+0x190>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e84:	e004      	b.n	8008e90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d903      	bls.n	8008ea2 <pvPortMalloc+0xa6>
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f1      	bne.n	8008e86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ea2:	4b37      	ldr	r3, [pc, #220]	@ (8008f80 <pvPortMalloc+0x184>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d051      	beq.n	8008f50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	4413      	add	r3, r2
 8008eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	1ad2      	subs	r2, r2, r3
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d920      	bls.n	8008f10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	613b      	str	r3, [r7, #16]
}
 8008ef2:	bf00      	nop
 8008ef4:	bf00      	nop
 8008ef6:	e7fd      	b.n	8008ef4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f0a:	69b8      	ldr	r0, [r7, #24]
 8008f0c:	f000 f90a 	bl	8009124 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f10:	4b1d      	ldr	r3, [pc, #116]	@ (8008f88 <pvPortMalloc+0x18c>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f88 <pvPortMalloc+0x18c>)
 8008f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f88 <pvPortMalloc+0x18c>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b1b      	ldr	r3, [pc, #108]	@ (8008f90 <pvPortMalloc+0x194>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d203      	bcs.n	8008f32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f2a:	4b17      	ldr	r3, [pc, #92]	@ (8008f88 <pvPortMalloc+0x18c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a18      	ldr	r2, [pc, #96]	@ (8008f90 <pvPortMalloc+0x194>)
 8008f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	4b13      	ldr	r3, [pc, #76]	@ (8008f84 <pvPortMalloc+0x188>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f46:	4b13      	ldr	r3, [pc, #76]	@ (8008f94 <pvPortMalloc+0x198>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	4a11      	ldr	r2, [pc, #68]	@ (8008f94 <pvPortMalloc+0x198>)
 8008f4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f50:	f7fe fcc8 	bl	80078e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <pvPortMalloc+0x17a>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	60fb      	str	r3, [r7, #12]
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	e7fd      	b.n	8008f72 <pvPortMalloc+0x176>
	return pvReturn;
 8008f76:	69fb      	ldr	r3, [r7, #28]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3728      	adds	r7, #40	@ 0x28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	2000912c 	.word	0x2000912c
 8008f84:	20009140 	.word	0x20009140
 8008f88:	20009130 	.word	0x20009130
 8008f8c:	20009124 	.word	0x20009124
 8008f90:	20009134 	.word	0x20009134
 8008f94:	20009138 	.word	0x20009138

08008f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d04f      	beq.n	800904a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008faa:	2308      	movs	r3, #8
 8008fac:	425b      	negs	r3, r3
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	4b25      	ldr	r3, [pc, #148]	@ (8009054 <vPortFree+0xbc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10b      	bne.n	8008fde <vPortFree+0x46>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60fb      	str	r3, [r7, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <vPortFree+0x66>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	60bb      	str	r3, [r7, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	4b14      	ldr	r3, [pc, #80]	@ (8009054 <vPortFree+0xbc>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4013      	ands	r3, r2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01e      	beq.n	800904a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d11a      	bne.n	800904a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <vPortFree+0xbc>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	43db      	mvns	r3, r3
 800901e:	401a      	ands	r2, r3
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009024:	f7fe fc50 	bl	80078c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	4b0a      	ldr	r3, [pc, #40]	@ (8009058 <vPortFree+0xc0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4413      	add	r3, r2
 8009032:	4a09      	ldr	r2, [pc, #36]	@ (8009058 <vPortFree+0xc0>)
 8009034:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009036:	6938      	ldr	r0, [r7, #16]
 8009038:	f000 f874 	bl	8009124 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800903c:	4b07      	ldr	r3, [pc, #28]	@ (800905c <vPortFree+0xc4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	4a06      	ldr	r2, [pc, #24]	@ (800905c <vPortFree+0xc4>)
 8009044:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009046:	f7fe fc4d 	bl	80078e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904a:	bf00      	nop
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20009140 	.word	0x20009140
 8009058:	20009130 	.word	0x20009130
 800905c:	2000913c 	.word	0x2000913c

08009060 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009066:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800906a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800906c:	4b27      	ldr	r3, [pc, #156]	@ (800910c <prvHeapInit+0xac>)
 800906e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00c      	beq.n	8009094 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3307      	adds	r3, #7
 800907e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0307 	bic.w	r3, r3, #7
 8009086:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	4a1f      	ldr	r2, [pc, #124]	@ (800910c <prvHeapInit+0xac>)
 8009090:	4413      	add	r3, r2
 8009092:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009098:	4a1d      	ldr	r2, [pc, #116]	@ (8009110 <prvHeapInit+0xb0>)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800909e:	4b1c      	ldr	r3, [pc, #112]	@ (8009110 <prvHeapInit+0xb0>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	4413      	add	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090ac:	2208      	movs	r2, #8
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4a15      	ldr	r2, [pc, #84]	@ (8009114 <prvHeapInit+0xb4>)
 80090c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c2:	4b14      	ldr	r3, [pc, #80]	@ (8009114 <prvHeapInit+0xb4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2200      	movs	r2, #0
 80090c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ca:	4b12      	ldr	r3, [pc, #72]	@ (8009114 <prvHeapInit+0xb4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009114 <prvHeapInit+0xb4>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009118 <prvHeapInit+0xb8>)
 80090ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4a09      	ldr	r2, [pc, #36]	@ (800911c <prvHeapInit+0xbc>)
 80090f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090f8:	4b09      	ldr	r3, [pc, #36]	@ (8009120 <prvHeapInit+0xc0>)
 80090fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090fe:	601a      	str	r2, [r3, #0]
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20005524 	.word	0x20005524
 8009110:	20009124 	.word	0x20009124
 8009114:	2000912c 	.word	0x2000912c
 8009118:	20009134 	.word	0x20009134
 800911c:	20009130 	.word	0x20009130
 8009120:	20009140 	.word	0x20009140

08009124 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800912c:	4b28      	ldr	r3, [pc, #160]	@ (80091d0 <prvInsertBlockIntoFreeList+0xac>)
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	e002      	b.n	8009138 <prvInsertBlockIntoFreeList+0x14>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	429a      	cmp	r2, r3
 8009140:	d8f7      	bhi.n	8009132 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	4413      	add	r3, r2
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d108      	bne.n	8009166 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	441a      	add	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	441a      	add	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d118      	bne.n	80091ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b15      	ldr	r3, [pc, #84]	@ (80091d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d00d      	beq.n	80091a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	441a      	add	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	e008      	b.n	80091b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a2:	4b0c      	ldr	r3, [pc, #48]	@ (80091d4 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	e003      	b.n	80091b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d002      	beq.n	80091c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c2:	bf00      	nop
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	20009124 	.word	0x20009124
 80091d4:	2000912c 	.word	0x2000912c

080091d8 <_rclc_check_for_new_data>:
 80091d8:	b1e0      	cbz	r0, 8009214 <_rclc_check_for_new_data+0x3c>
 80091da:	7803      	ldrb	r3, [r0, #0]
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d81b      	bhi.n	8009218 <_rclc_check_for_new_data+0x40>
 80091e0:	e8df f003 	tbb	[pc, r3]
 80091e4:	12161010 	.word	0x12161010
 80091e8:	05050512 	.word	0x05050512
 80091ec:	14          	.byte	0x14
 80091ed:	00          	.byte	0x00
 80091ee:	6a0b      	ldr	r3, [r1, #32]
 80091f0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	3b00      	subs	r3, #0
 80091f8:	bf18      	it	ne
 80091fa:	2301      	movne	r3, #1
 80091fc:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 8009200:	2000      	movs	r0, #0
 8009202:	4770      	bx	lr
 8009204:	680b      	ldr	r3, [r1, #0]
 8009206:	e7f3      	b.n	80091f0 <_rclc_check_for_new_data+0x18>
 8009208:	698b      	ldr	r3, [r1, #24]
 800920a:	e7f1      	b.n	80091f0 <_rclc_check_for_new_data+0x18>
 800920c:	688b      	ldr	r3, [r1, #8]
 800920e:	e7ef      	b.n	80091f0 <_rclc_check_for_new_data+0x18>
 8009210:	690b      	ldr	r3, [r1, #16]
 8009212:	e7ed      	b.n	80091f0 <_rclc_check_for_new_data+0x18>
 8009214:	200b      	movs	r0, #11
 8009216:	4770      	bx	lr
 8009218:	2300      	movs	r3, #0
 800921a:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800921e:	2001      	movs	r0, #1
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop

08009224 <_rclc_take_new_data>:
 8009224:	2800      	cmp	r0, #0
 8009226:	d049      	beq.n	80092bc <_rclc_take_new_data+0x98>
 8009228:	b510      	push	{r4, lr}
 800922a:	7803      	ldrb	r3, [r0, #0]
 800922c:	b08e      	sub	sp, #56	@ 0x38
 800922e:	4604      	mov	r4, r0
 8009230:	2b08      	cmp	r3, #8
 8009232:	d84a      	bhi.n	80092ca <_rclc_take_new_data+0xa6>
 8009234:	e8df f003 	tbb	[pc, r3]
 8009238:	2b121515 	.word	0x2b121515
 800923c:	0505052b 	.word	0x0505052b
 8009240:	12          	.byte	0x12
 8009241:	00          	.byte	0x00
 8009242:	6a0b      	ldr	r3, [r1, #32]
 8009244:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924a:	b13b      	cbz	r3, 800925c <_rclc_take_new_data+0x38>
 800924c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009250:	f104 0110 	add.w	r1, r4, #16
 8009254:	f002 fee2 	bl	800c01c <rcl_take_request>
 8009258:	2800      	cmp	r0, #0
 800925a:	d131      	bne.n	80092c0 <_rclc_take_new_data+0x9c>
 800925c:	2000      	movs	r0, #0
 800925e:	b00e      	add	sp, #56	@ 0x38
 8009260:	bd10      	pop	{r4, pc}
 8009262:	680b      	ldr	r3, [r1, #0]
 8009264:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0f6      	beq.n	800925c <_rclc_take_new_data+0x38>
 800926e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009272:	2300      	movs	r3, #0
 8009274:	aa02      	add	r2, sp, #8
 8009276:	f003 f847 	bl	800c308 <rcl_take>
 800927a:	2800      	cmp	r0, #0
 800927c:	d0ef      	beq.n	800925e <_rclc_take_new_data+0x3a>
 800927e:	f240 1391 	movw	r3, #401	@ 0x191
 8009282:	4298      	cmp	r0, r3
 8009284:	d115      	bne.n	80092b2 <_rclc_take_new_data+0x8e>
 8009286:	2300      	movs	r3, #0
 8009288:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800928c:	e7e7      	b.n	800925e <_rclc_take_new_data+0x3a>
 800928e:	698b      	ldr	r3, [r1, #24]
 8009290:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0e0      	beq.n	800925c <_rclc_take_new_data+0x38>
 800929a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800929e:	f104 0110 	add.w	r1, r4, #16
 80092a2:	f001 ff7f 	bl	800b1a4 <rcl_take_response>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d0d8      	beq.n	800925c <_rclc_take_new_data+0x38>
 80092aa:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80092ae:	4298      	cmp	r0, r3
 80092b0:	d0d5      	beq.n	800925e <_rclc_take_new_data+0x3a>
 80092b2:	9001      	str	r0, [sp, #4]
 80092b4:	f000 fbe8 	bl	8009a88 <rcutils_reset_error>
 80092b8:	9801      	ldr	r0, [sp, #4]
 80092ba:	e7d0      	b.n	800925e <_rclc_take_new_data+0x3a>
 80092bc:	200b      	movs	r0, #11
 80092be:	4770      	bx	lr
 80092c0:	f240 2359 	movw	r3, #601	@ 0x259
 80092c4:	4298      	cmp	r0, r3
 80092c6:	d0de      	beq.n	8009286 <_rclc_take_new_data+0x62>
 80092c8:	e7f3      	b.n	80092b2 <_rclc_take_new_data+0x8e>
 80092ca:	2001      	movs	r0, #1
 80092cc:	e7c7      	b.n	800925e <_rclc_take_new_data+0x3a>
 80092ce:	bf00      	nop

080092d0 <rclc_executor_trigger_any>:
 80092d0:	b170      	cbz	r0, 80092f0 <rclc_executor_trigger_any+0x20>
 80092d2:	b179      	cbz	r1, 80092f4 <rclc_executor_trigger_any+0x24>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2200      	movs	r2, #0
 80092d8:	e005      	b.n	80092e6 <rclc_executor_trigger_any+0x16>
 80092da:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80092de:	3340      	adds	r3, #64	@ 0x40
 80092e0:	b930      	cbnz	r0, 80092f0 <rclc_executor_trigger_any+0x20>
 80092e2:	4291      	cmp	r1, r2
 80092e4:	d005      	beq.n	80092f2 <rclc_executor_trigger_any+0x22>
 80092e6:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80092ea:	3201      	adds	r2, #1
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1f4      	bne.n	80092da <rclc_executor_trigger_any+0xa>
 80092f0:	4770      	bx	lr
 80092f2:	4770      	bx	lr
 80092f4:	4608      	mov	r0, r1
 80092f6:	e7fb      	b.n	80092f0 <rclc_executor_trigger_any+0x20>

080092f8 <_rclc_execute.part.0>:
 80092f8:	b530      	push	{r4, r5, lr}
 80092fa:	7803      	ldrb	r3, [r0, #0]
 80092fc:	b083      	sub	sp, #12
 80092fe:	4604      	mov	r4, r0
 8009300:	2b08      	cmp	r3, #8
 8009302:	d85b      	bhi.n	80093bc <_rclc_execute.part.0+0xc4>
 8009304:	e8df f003 	tbb	[pc, r3]
 8009308:	3036271f 	.word	0x3036271f
 800930c:	0505053f 	.word	0x0505053f
 8009310:	1a          	.byte	0x1a
 8009311:	00          	.byte	0x00
 8009312:	2b06      	cmp	r3, #6
 8009314:	d049      	beq.n	80093aa <_rclc_execute.part.0+0xb2>
 8009316:	2b07      	cmp	r3, #7
 8009318:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800931a:	d140      	bne.n	800939e <_rclc_execute.part.0+0xa6>
 800931c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009320:	6880      	ldr	r0, [r0, #8]
 8009322:	4798      	blx	r3
 8009324:	f104 0110 	add.w	r1, r4, #16
 8009328:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800932a:	6860      	ldr	r0, [r4, #4]
 800932c:	f002 feae 	bl	800c08c <rcl_send_response>
 8009330:	b138      	cbz	r0, 8009342 <_rclc_execute.part.0+0x4a>
 8009332:	9001      	str	r0, [sp, #4]
 8009334:	f000 fba8 	bl	8009a88 <rcutils_reset_error>
 8009338:	9801      	ldr	r0, [sp, #4]
 800933a:	e002      	b.n	8009342 <_rclc_execute.part.0+0x4a>
 800933c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800933e:	4798      	blx	r3
 8009340:	2000      	movs	r0, #0
 8009342:	b003      	add	sp, #12
 8009344:	bd30      	pop	{r4, r5, pc}
 8009346:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800934a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800934c:	b96d      	cbnz	r5, 800936a <_rclc_execute.part.0+0x72>
 800934e:	4628      	mov	r0, r5
 8009350:	4798      	blx	r3
 8009352:	4628      	mov	r0, r5
 8009354:	e7f5      	b.n	8009342 <_rclc_execute.part.0+0x4a>
 8009356:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800935a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800935e:	b1d5      	cbz	r5, 8009396 <_rclc_execute.part.0+0x9e>
 8009360:	6880      	ldr	r0, [r0, #8]
 8009362:	4798      	blx	r3
 8009364:	2000      	movs	r0, #0
 8009366:	e7ec      	b.n	8009342 <_rclc_execute.part.0+0x4a>
 8009368:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800936a:	68a0      	ldr	r0, [r4, #8]
 800936c:	4798      	blx	r3
 800936e:	2000      	movs	r0, #0
 8009370:	b003      	add	sp, #12
 8009372:	bd30      	pop	{r4, r5, pc}
 8009374:	6840      	ldr	r0, [r0, #4]
 8009376:	f003 f8bd 	bl	800c4f4 <rcl_timer_call>
 800937a:	f240 3321 	movw	r3, #801	@ 0x321
 800937e:	4298      	cmp	r0, r3
 8009380:	d1d6      	bne.n	8009330 <_rclc_execute.part.0+0x38>
 8009382:	2000      	movs	r0, #0
 8009384:	e7dd      	b.n	8009342 <_rclc_execute.part.0+0x4a>
 8009386:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009388:	6880      	ldr	r0, [r0, #8]
 800938a:	f104 0110 	add.w	r1, r4, #16
 800938e:	4798      	blx	r3
 8009390:	2000      	movs	r0, #0
 8009392:	b003      	add	sp, #12
 8009394:	bd30      	pop	{r4, r5, pc}
 8009396:	4628      	mov	r0, r5
 8009398:	4798      	blx	r3
 800939a:	4628      	mov	r0, r5
 800939c:	e7d1      	b.n	8009342 <_rclc_execute.part.0+0x4a>
 800939e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80093a0:	6880      	ldr	r0, [r0, #8]
 80093a2:	4798      	blx	r3
 80093a4:	f104 0110 	add.w	r1, r4, #16
 80093a8:	e7be      	b.n	8009328 <_rclc_execute.part.0+0x30>
 80093aa:	f100 0110 	add.w	r1, r0, #16
 80093ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80093b0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80093b2:	6880      	ldr	r0, [r0, #8]
 80093b4:	9101      	str	r1, [sp, #4]
 80093b6:	4798      	blx	r3
 80093b8:	9901      	ldr	r1, [sp, #4]
 80093ba:	e7b5      	b.n	8009328 <_rclc_execute.part.0+0x30>
 80093bc:	2001      	movs	r0, #1
 80093be:	e7c0      	b.n	8009342 <_rclc_execute.part.0+0x4a>

080093c0 <rclc_executor_init>:
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d063      	beq.n	800948c <rclc_executor_init+0xcc>
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	460f      	mov	r7, r1
 80093ca:	b0ae      	sub	sp, #184	@ 0xb8
 80093cc:	2900      	cmp	r1, #0
 80093ce:	d055      	beq.n	800947c <rclc_executor_init+0xbc>
 80093d0:	4605      	mov	r5, r0
 80093d2:	4618      	mov	r0, r3
 80093d4:	4616      	mov	r6, r2
 80093d6:	4698      	mov	r8, r3
 80093d8:	f000 fb32 	bl	8009a40 <rcutils_allocator_is_valid>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d04d      	beq.n	800947c <rclc_executor_init+0xbc>
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	d04b      	beq.n	800947c <rclc_executor_init+0xbc>
 80093e4:	492e      	ldr	r1, [pc, #184]	@ (80094a0 <rclc_executor_init+0xe0>)
 80093e6:	2280      	movs	r2, #128	@ 0x80
 80093e8:	a80e      	add	r0, sp, #56	@ 0x38
 80093ea:	f00b f96a 	bl	80146c2 <memcpy>
 80093ee:	2400      	movs	r4, #0
 80093f0:	a90e      	add	r1, sp, #56	@ 0x38
 80093f2:	2280      	movs	r2, #128	@ 0x80
 80093f4:	4628      	mov	r0, r5
 80093f6:	f00b f964 	bl	80146c2 <memcpy>
 80093fa:	602f      	str	r7, [r5, #0]
 80093fc:	4668      	mov	r0, sp
 80093fe:	e9c5 6402 	strd	r6, r4, [r5, #8]
 8009402:	466f      	mov	r7, sp
 8009404:	f003 fad0 	bl	800c9a8 <rcl_get_zero_initialized_wait_set>
 8009408:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800940a:	f105 0c14 	add.w	ip, r5, #20
 800940e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009412:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009418:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800941a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800941e:	a31e      	add	r3, pc, #120	@ (adr r3, 8009498 <rclc_executor_init+0xd8>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	f8cc 1000 	str.w	r1, [ip]
 800942a:	f8d8 7000 	ldr.w	r7, [r8]
 800942e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009432:	f8c5 8010 	str.w	r8, [r5, #16]
 8009436:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 800943a:	01b0      	lsls	r0, r6, #6
 800943c:	47b8      	blx	r7
 800943e:	6068      	str	r0, [r5, #4]
 8009440:	b908      	cbnz	r0, 8009446 <rclc_executor_init+0x86>
 8009442:	e025      	b.n	8009490 <rclc_executor_init+0xd0>
 8009444:	6868      	ldr	r0, [r5, #4]
 8009446:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800944a:	4631      	mov	r1, r6
 800944c:	3401      	adds	r4, #1
 800944e:	f000 fa01 	bl	8009854 <rclc_executor_handle_init>
 8009452:	42a6      	cmp	r6, r4
 8009454:	d1f6      	bne.n	8009444 <rclc_executor_init+0x84>
 8009456:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800945a:	f000 f9ef 	bl	800983c <rclc_executor_handle_counters_zero_init>
 800945e:	686b      	ldr	r3, [r5, #4]
 8009460:	4a10      	ldr	r2, [pc, #64]	@ (80094a4 <rclc_executor_init+0xe4>)
 8009462:	672a      	str	r2, [r5, #112]	@ 0x70
 8009464:	2000      	movs	r0, #0
 8009466:	6768      	str	r0, [r5, #116]	@ 0x74
 8009468:	b163      	cbz	r3, 8009484 <rclc_executor_init+0xc4>
 800946a:	692b      	ldr	r3, [r5, #16]
 800946c:	b153      	cbz	r3, 8009484 <rclc_executor_init+0xc4>
 800946e:	68ab      	ldr	r3, [r5, #8]
 8009470:	b143      	cbz	r3, 8009484 <rclc_executor_init+0xc4>
 8009472:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 8009476:	b02e      	add	sp, #184	@ 0xb8
 8009478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947c:	200b      	movs	r0, #11
 800947e:	b02e      	add	sp, #184	@ 0xb8
 8009480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009484:	4618      	mov	r0, r3
 8009486:	b02e      	add	sp, #184	@ 0xb8
 8009488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948c:	200b      	movs	r0, #11
 800948e:	4770      	bx	lr
 8009490:	200a      	movs	r0, #10
 8009492:	e7f4      	b.n	800947e <rclc_executor_init+0xbe>
 8009494:	f3af 8000 	nop.w
 8009498:	3b9aca00 	.word	0x3b9aca00
 800949c:	00000000 	.word	0x00000000
 80094a0:	08015550 	.word	0x08015550
 80094a4:	080092d1 	.word	0x080092d1

080094a8 <rclc_executor_add_subscription>:
 80094a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ac:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80094b0:	b358      	cbz	r0, 800950a <rclc_executor_add_subscription+0x62>
 80094b2:	b351      	cbz	r1, 800950a <rclc_executor_add_subscription+0x62>
 80094b4:	b34a      	cbz	r2, 800950a <rclc_executor_add_subscription+0x62>
 80094b6:	b343      	cbz	r3, 800950a <rclc_executor_add_subscription+0x62>
 80094b8:	4604      	mov	r4, r0
 80094ba:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 80094be:	4285      	cmp	r5, r0
 80094c0:	d302      	bcc.n	80094c8 <rclc_executor_add_subscription+0x20>
 80094c2:	2001      	movs	r0, #1
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80094cc:	ea4f 1885 	mov.w	r8, r5, lsl #6
 80094d0:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 80094d4:	f04f 0c00 	mov.w	ip, #0
 80094d8:	f80e c008 	strb.w	ip, [lr, r8]
 80094dc:	2001      	movs	r0, #1
 80094de:	3501      	adds	r5, #1
 80094e0:	f104 0814 	add.w	r8, r4, #20
 80094e4:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 80094e8:	e9c6 1201 	strd	r1, r2, [r6, #4]
 80094ec:	6333      	str	r3, [r6, #48]	@ 0x30
 80094ee:	7077      	strb	r7, [r6, #1]
 80094f0:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 80094f4:	4640      	mov	r0, r8
 80094f6:	60e5      	str	r5, [r4, #12]
 80094f8:	f003 fa68 	bl	800c9cc <rcl_wait_set_is_valid>
 80094fc:	b940      	cbnz	r0, 8009510 <rclc_executor_add_subscription+0x68>
 80094fe:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009500:	3301      	adds	r3, #1
 8009502:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009504:	2000      	movs	r0, #0
 8009506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950a:	200b      	movs	r0, #11
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	4640      	mov	r0, r8
 8009512:	f003 fa61 	bl	800c9d8 <rcl_wait_set_fini>
 8009516:	2800      	cmp	r0, #0
 8009518:	d0f1      	beq.n	80094fe <rclc_executor_add_subscription+0x56>
 800951a:	e7d3      	b.n	80094c4 <rclc_executor_add_subscription+0x1c>

0800951c <rclc_executor_prepare>:
 800951c:	2800      	cmp	r0, #0
 800951e:	d03d      	beq.n	800959c <rclc_executor_prepare+0x80>
 8009520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009524:	f100 0814 	add.w	r8, r0, #20
 8009528:	b09a      	sub	sp, #104	@ 0x68
 800952a:	4604      	mov	r4, r0
 800952c:	4640      	mov	r0, r8
 800952e:	f003 fa4d 	bl	800c9cc <rcl_wait_set_is_valid>
 8009532:	b118      	cbz	r0, 800953c <rclc_executor_prepare+0x20>
 8009534:	2000      	movs	r0, #0
 8009536:	b01a      	add	sp, #104	@ 0x68
 8009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953c:	4640      	mov	r0, r8
 800953e:	f003 fa4b 	bl	800c9d8 <rcl_wait_set_fini>
 8009542:	2800      	cmp	r0, #0
 8009544:	d127      	bne.n	8009596 <rclc_executor_prepare+0x7a>
 8009546:	a80c      	add	r0, sp, #48	@ 0x30
 8009548:	ad0c      	add	r5, sp, #48	@ 0x30
 800954a:	f003 fa2d 	bl	800c9a8 <rcl_get_zero_initialized_wait_set>
 800954e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009550:	4646      	mov	r6, r8
 8009552:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009556:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800955a:	6927      	ldr	r7, [r4, #16]
 800955c:	682d      	ldr	r5, [r5, #0]
 800955e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009560:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009562:	6035      	str	r5, [r6, #0]
 8009564:	ad04      	add	r5, sp, #16
 8009566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009568:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800956c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800956e:	6826      	ldr	r6, [r4, #0]
 8009570:	6838      	ldr	r0, [r7, #0]
 8009572:	6028      	str	r0, [r5, #0]
 8009574:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8009578:	e9cd 3200 	strd	r3, r2, [sp]
 800957c:	4640      	mov	r0, r8
 800957e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009580:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009582:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009584:	f003 fd46 	bl	800d014 <rcl_wait_set_init>
 8009588:	2800      	cmp	r0, #0
 800958a:	d0d4      	beq.n	8009536 <rclc_executor_prepare+0x1a>
 800958c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800958e:	f000 fa7b 	bl	8009a88 <rcutils_reset_error>
 8009592:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009594:	e7cf      	b.n	8009536 <rclc_executor_prepare+0x1a>
 8009596:	f000 fa77 	bl	8009a88 <rcutils_reset_error>
 800959a:	e7d4      	b.n	8009546 <rclc_executor_prepare+0x2a>
 800959c:	200b      	movs	r0, #11
 800959e:	4770      	bx	lr

080095a0 <rclc_executor_spin_some.part.0>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	f100 0814 	add.w	r8, r0, #20
 80095a8:	b083      	sub	sp, #12
 80095aa:	4692      	mov	sl, r2
 80095ac:	4699      	mov	r9, r3
 80095ae:	4605      	mov	r5, r0
 80095b0:	f7ff ffb4 	bl	800951c <rclc_executor_prepare>
 80095b4:	4640      	mov	r0, r8
 80095b6:	f003 fadb 	bl	800cb70 <rcl_wait_set_clear>
 80095ba:	4607      	mov	r7, r0
 80095bc:	2800      	cmp	r0, #0
 80095be:	f040 80be 	bne.w	800973e <rclc_executor_spin_some.part.0+0x19e>
 80095c2:	68ab      	ldr	r3, [r5, #8]
 80095c4:	4604      	mov	r4, r0
 80095c6:	b1eb      	cbz	r3, 8009604 <rclc_executor_spin_some.part.0+0x64>
 80095c8:	686e      	ldr	r6, [r5, #4]
 80095ca:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 80095ce:	01a2      	lsls	r2, r4, #6
 80095d0:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 80095d4:	b1b3      	cbz	r3, 8009604 <rclc_executor_spin_some.part.0+0x64>
 80095d6:	5cb3      	ldrb	r3, [r6, r2]
 80095d8:	2b08      	cmp	r3, #8
 80095da:	f200 80a9 	bhi.w	8009730 <rclc_executor_spin_some.part.0+0x190>
 80095de:	e8df f003 	tbb	[pc, r3]
 80095e2:	8989      	.short	0x8989
 80095e4:	057b7b93 	.word	0x057b7b93
 80095e8:	0505      	.short	0x0505
 80095ea:	9d          	.byte	0x9d
 80095eb:	00          	.byte	0x00
 80095ec:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 80095f0:	4640      	mov	r0, r8
 80095f2:	6849      	ldr	r1, [r1, #4]
 80095f4:	f003 fe24 	bl	800d240 <rcl_wait_set_add_service>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d175      	bne.n	80096e8 <rclc_executor_spin_some.part.0+0x148>
 80095fc:	68ab      	ldr	r3, [r5, #8]
 80095fe:	3401      	adds	r4, #1
 8009600:	429c      	cmp	r4, r3
 8009602:	d3e1      	bcc.n	80095c8 <rclc_executor_spin_some.part.0+0x28>
 8009604:	464b      	mov	r3, r9
 8009606:	4652      	mov	r2, sl
 8009608:	4640      	mov	r0, r8
 800960a:	f003 fe45 	bl	800d298 <rcl_wait>
 800960e:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 809b 	beq.w	800974e <rclc_executor_spin_some.part.0+0x1ae>
 8009618:	2b01      	cmp	r3, #1
 800961a:	f040 8089 	bne.w	8009730 <rclc_executor_spin_some.part.0+0x190>
 800961e:	68ab      	ldr	r3, [r5, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80ef 	beq.w	8009804 <rclc_executor_spin_some.part.0+0x264>
 8009626:	2400      	movs	r4, #0
 8009628:	4626      	mov	r6, r4
 800962a:	f240 1991 	movw	r9, #401	@ 0x191
 800962e:	e00a      	b.n	8009646 <rclc_executor_spin_some.part.0+0xa6>
 8009630:	f7ff fdd2 	bl	80091d8 <_rclc_check_for_new_data>
 8009634:	4604      	mov	r4, r0
 8009636:	b110      	cbz	r0, 800963e <rclc_executor_spin_some.part.0+0x9e>
 8009638:	4548      	cmp	r0, r9
 800963a:	f040 8086 	bne.w	800974a <rclc_executor_spin_some.part.0+0x1aa>
 800963e:	68ab      	ldr	r3, [r5, #8]
 8009640:	429e      	cmp	r6, r3
 8009642:	f080 80db 	bcs.w	80097fc <rclc_executor_spin_some.part.0+0x25c>
 8009646:	686a      	ldr	r2, [r5, #4]
 8009648:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800964c:	4641      	mov	r1, r8
 800964e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009652:	3601      	adds	r6, #1
 8009654:	f1bc 0f00 	cmp.w	ip, #0
 8009658:	d1ea      	bne.n	8009630 <rclc_executor_spin_some.part.0+0x90>
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8009662:	4798      	blx	r3
 8009664:	2800      	cmp	r0, #0
 8009666:	d070      	beq.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 8009668:	68aa      	ldr	r2, [r5, #8]
 800966a:	2a00      	cmp	r2, #0
 800966c:	d06d      	beq.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 800966e:	2600      	movs	r6, #0
 8009670:	f240 1991 	movw	r9, #401	@ 0x191
 8009674:	e008      	b.n	8009688 <rclc_executor_spin_some.part.0+0xe8>
 8009676:	f7ff fdd5 	bl	8009224 <_rclc_take_new_data>
 800967a:	4604      	mov	r4, r0
 800967c:	b108      	cbz	r0, 8009682 <rclc_executor_spin_some.part.0+0xe2>
 800967e:	4548      	cmp	r0, r9
 8009680:	d163      	bne.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 8009682:	68aa      	ldr	r2, [r5, #8]
 8009684:	4296      	cmp	r6, r2
 8009686:	d208      	bcs.n	800969a <rclc_executor_spin_some.part.0+0xfa>
 8009688:	6868      	ldr	r0, [r5, #4]
 800968a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800968e:	4641      	mov	r1, r8
 8009690:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009694:	3601      	adds	r6, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1ed      	bne.n	8009676 <rclc_executor_spin_some.part.0+0xd6>
 800969a:	2600      	movs	r6, #0
 800969c:	b932      	cbnz	r2, 80096ac <rclc_executor_spin_some.part.0+0x10c>
 800969e:	e054      	b.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 80096a0:	2901      	cmp	r1, #1
 80096a2:	d012      	beq.n	80096ca <rclc_executor_spin_some.part.0+0x12a>
 80096a4:	3601      	adds	r6, #1
 80096a6:	4296      	cmp	r6, r2
 80096a8:	d245      	bcs.n	8009736 <rclc_executor_spin_some.part.0+0x196>
 80096aa:	2400      	movs	r4, #0
 80096ac:	686b      	ldr	r3, [r5, #4]
 80096ae:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 80096b2:	4618      	mov	r0, r3
 80096b4:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 80096b8:	2900      	cmp	r1, #0
 80096ba:	d046      	beq.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 80096bc:	7859      	ldrb	r1, [r3, #1]
 80096be:	2900      	cmp	r1, #0
 80096c0:	d1ee      	bne.n	80096a0 <rclc_executor_spin_some.part.0+0x100>
 80096c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0ec      	beq.n	80096a4 <rclc_executor_spin_some.part.0+0x104>
 80096ca:	f7ff fe15 	bl	80092f8 <_rclc_execute.part.0>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f040 8096 	bne.w	8009800 <rclc_executor_spin_some.part.0+0x260>
 80096d4:	68aa      	ldr	r2, [r5, #8]
 80096d6:	e7e5      	b.n	80096a4 <rclc_executor_spin_some.part.0+0x104>
 80096d8:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 80096dc:	4640      	mov	r0, r8
 80096de:	6849      	ldr	r1, [r1, #4]
 80096e0:	f003 fd82 	bl	800d1e8 <rcl_wait_set_add_client>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d089      	beq.n	80095fc <rclc_executor_spin_some.part.0+0x5c>
 80096e8:	9001      	str	r0, [sp, #4]
 80096ea:	f000 f9cd 	bl	8009a88 <rcutils_reset_error>
 80096ee:	9801      	ldr	r0, [sp, #4]
 80096f0:	4607      	mov	r7, r0
 80096f2:	e020      	b.n	8009736 <rclc_executor_spin_some.part.0+0x196>
 80096f4:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 80096f8:	4640      	mov	r0, r8
 80096fa:	6849      	ldr	r1, [r1, #4]
 80096fc:	f003 fa0c 	bl	800cb18 <rcl_wait_set_add_subscription>
 8009700:	2800      	cmp	r0, #0
 8009702:	f43f af7b 	beq.w	80095fc <rclc_executor_spin_some.part.0+0x5c>
 8009706:	e7ef      	b.n	80096e8 <rclc_executor_spin_some.part.0+0x148>
 8009708:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800970c:	4640      	mov	r0, r8
 800970e:	6849      	ldr	r1, [r1, #4]
 8009710:	f003 fd3a 	bl	800d188 <rcl_wait_set_add_timer>
 8009714:	2800      	cmp	r0, #0
 8009716:	f43f af71 	beq.w	80095fc <rclc_executor_spin_some.part.0+0x5c>
 800971a:	e7e5      	b.n	80096e8 <rclc_executor_spin_some.part.0+0x148>
 800971c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 8009720:	4640      	mov	r0, r8
 8009722:	6849      	ldr	r1, [r1, #4]
 8009724:	f003 fd04 	bl	800d130 <rcl_wait_set_add_guard_condition>
 8009728:	2800      	cmp	r0, #0
 800972a:	f43f af67 	beq.w	80095fc <rclc_executor_spin_some.part.0+0x5c>
 800972e:	e7db      	b.n	80096e8 <rclc_executor_spin_some.part.0+0x148>
 8009730:	f000 f9aa 	bl	8009a88 <rcutils_reset_error>
 8009734:	2701      	movs	r7, #1
 8009736:	4638      	mov	r0, r7
 8009738:	b003      	add	sp, #12
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	f000 f9a3 	bl	8009a88 <rcutils_reset_error>
 8009742:	4638      	mov	r0, r7
 8009744:	b003      	add	sp, #12
 8009746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974a:	4627      	mov	r7, r4
 800974c:	e7f3      	b.n	8009736 <rclc_executor_spin_some.part.0+0x196>
 800974e:	68ab      	ldr	r3, [r5, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d05a      	beq.n	800980a <rclc_executor_spin_some.part.0+0x26a>
 8009754:	2400      	movs	r4, #0
 8009756:	4626      	mov	r6, r4
 8009758:	f240 1991 	movw	r9, #401	@ 0x191
 800975c:	e008      	b.n	8009770 <rclc_executor_spin_some.part.0+0x1d0>
 800975e:	f7ff fd3b 	bl	80091d8 <_rclc_check_for_new_data>
 8009762:	4604      	mov	r4, r0
 8009764:	b108      	cbz	r0, 800976a <rclc_executor_spin_some.part.0+0x1ca>
 8009766:	4548      	cmp	r0, r9
 8009768:	d1ef      	bne.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 800976a:	68ab      	ldr	r3, [r5, #8]
 800976c:	429e      	cmp	r6, r3
 800976e:	d243      	bcs.n	80097f8 <rclc_executor_spin_some.part.0+0x258>
 8009770:	686a      	ldr	r2, [r5, #4]
 8009772:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009776:	4641      	mov	r1, r8
 8009778:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800977c:	3601      	adds	r6, #1
 800977e:	f1bc 0f00 	cmp.w	ip, #0
 8009782:	d1ec      	bne.n	800975e <rclc_executor_spin_some.part.0+0x1be>
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800978c:	4798      	blx	r3
 800978e:	2800      	cmp	r0, #0
 8009790:	d0db      	beq.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 8009792:	68ab      	ldr	r3, [r5, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d0d8      	beq.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 8009798:	f04f 0a00 	mov.w	sl, #0
 800979c:	f240 1691 	movw	r6, #401	@ 0x191
 80097a0:	f240 2959 	movw	r9, #601	@ 0x259
 80097a4:	e00b      	b.n	80097be <rclc_executor_spin_some.part.0+0x21e>
 80097a6:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80097aa:	b113      	cbz	r3, 80097b2 <rclc_executor_spin_some.part.0+0x212>
 80097ac:	f7ff fda4 	bl	80092f8 <_rclc_execute.part.0>
 80097b0:	bb30      	cbnz	r0, 8009800 <rclc_executor_spin_some.part.0+0x260>
 80097b2:	68ab      	ldr	r3, [r5, #8]
 80097b4:	f10a 0a01 	add.w	sl, sl, #1
 80097b8:	459a      	cmp	sl, r3
 80097ba:	d2bc      	bcs.n	8009736 <rclc_executor_spin_some.part.0+0x196>
 80097bc:	2400      	movs	r4, #0
 80097be:	6868      	ldr	r0, [r5, #4]
 80097c0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 80097c4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 80097c8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0bc      	beq.n	800974a <rclc_executor_spin_some.part.0+0x1aa>
 80097d0:	4641      	mov	r1, r8
 80097d2:	f7ff fd27 	bl	8009224 <_rclc_take_new_data>
 80097d6:	b118      	cbz	r0, 80097e0 <rclc_executor_spin_some.part.0+0x240>
 80097d8:	42b0      	cmp	r0, r6
 80097da:	d001      	beq.n	80097e0 <rclc_executor_spin_some.part.0+0x240>
 80097dc:	4548      	cmp	r0, r9
 80097de:	d10f      	bne.n	8009800 <rclc_executor_spin_some.part.0+0x260>
 80097e0:	6868      	ldr	r0, [r5, #4]
 80097e2:	eb10 000b 	adds.w	r0, r0, fp
 80097e6:	d005      	beq.n	80097f4 <rclc_executor_spin_some.part.0+0x254>
 80097e8:	7843      	ldrb	r3, [r0, #1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0db      	beq.n	80097a6 <rclc_executor_spin_some.part.0+0x206>
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d1df      	bne.n	80097b2 <rclc_executor_spin_some.part.0+0x212>
 80097f2:	e7db      	b.n	80097ac <rclc_executor_spin_some.part.0+0x20c>
 80097f4:	270b      	movs	r7, #11
 80097f6:	e79e      	b.n	8009736 <rclc_executor_spin_some.part.0+0x196>
 80097f8:	686a      	ldr	r2, [r5, #4]
 80097fa:	e7c3      	b.n	8009784 <rclc_executor_spin_some.part.0+0x1e4>
 80097fc:	686a      	ldr	r2, [r5, #4]
 80097fe:	e72c      	b.n	800965a <rclc_executor_spin_some.part.0+0xba>
 8009800:	4607      	mov	r7, r0
 8009802:	e798      	b.n	8009736 <rclc_executor_spin_some.part.0+0x196>
 8009804:	686a      	ldr	r2, [r5, #4]
 8009806:	461c      	mov	r4, r3
 8009808:	e727      	b.n	800965a <rclc_executor_spin_some.part.0+0xba>
 800980a:	686a      	ldr	r2, [r5, #4]
 800980c:	461c      	mov	r4, r3
 800980e:	e7b9      	b.n	8009784 <rclc_executor_spin_some.part.0+0x1e4>

08009810 <rclc_executor_spin_some>:
 8009810:	b190      	cbz	r0, 8009838 <rclc_executor_spin_some+0x28>
 8009812:	b570      	push	{r4, r5, r6, lr}
 8009814:	4604      	mov	r4, r0
 8009816:	6800      	ldr	r0, [r0, #0]
 8009818:	4616      	mov	r6, r2
 800981a:	461d      	mov	r5, r3
 800981c:	f001 fd08 	bl	800b230 <rcl_context_is_valid>
 8009820:	b130      	cbz	r0, 8009830 <rclc_executor_spin_some+0x20>
 8009822:	4632      	mov	r2, r6
 8009824:	462b      	mov	r3, r5
 8009826:	4620      	mov	r0, r4
 8009828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800982c:	f7ff beb8 	b.w	80095a0 <rclc_executor_spin_some.part.0>
 8009830:	f000 f92a 	bl	8009a88 <rcutils_reset_error>
 8009834:	2001      	movs	r0, #1
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	200b      	movs	r0, #11
 800983a:	4770      	bx	lr

0800983c <rclc_executor_handle_counters_zero_init>:
 800983c:	b140      	cbz	r0, 8009850 <rclc_executor_handle_counters_zero_init+0x14>
 800983e:	2300      	movs	r3, #0
 8009840:	6003      	str	r3, [r0, #0]
 8009842:	6043      	str	r3, [r0, #4]
 8009844:	6083      	str	r3, [r0, #8]
 8009846:	60c3      	str	r3, [r0, #12]
 8009848:	6103      	str	r3, [r0, #16]
 800984a:	6143      	str	r3, [r0, #20]
 800984c:	4618      	mov	r0, r3
 800984e:	4770      	bx	lr
 8009850:	200b      	movs	r0, #11
 8009852:	4770      	bx	lr

08009854 <rclc_executor_handle_init>:
 8009854:	b178      	cbz	r0, 8009876 <rclc_executor_handle_init+0x22>
 8009856:	b430      	push	{r4, r5}
 8009858:	4603      	mov	r3, r0
 800985a:	2209      	movs	r2, #9
 800985c:	2000      	movs	r0, #0
 800985e:	2400      	movs	r4, #0
 8009860:	2500      	movs	r5, #0
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 8009868:	bc30      	pop	{r4, r5}
 800986a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800986e:	6359      	str	r1, [r3, #52]	@ 0x34
 8009870:	6318      	str	r0, [r3, #48]	@ 0x30
 8009872:	8718      	strh	r0, [r3, #56]	@ 0x38
 8009874:	4770      	bx	lr
 8009876:	200b      	movs	r0, #11
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop

0800987c <rclc_support_init>:
 800987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009880:	b086      	sub	sp, #24
 8009882:	2800      	cmp	r0, #0
 8009884:	d042      	beq.n	800990c <rclc_support_init+0x90>
 8009886:	461c      	mov	r4, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d03f      	beq.n	800990c <rclc_support_init+0x90>
 800988c:	460f      	mov	r7, r1
 800988e:	4690      	mov	r8, r2
 8009890:	4606      	mov	r6, r0
 8009892:	f001 ffad 	bl	800b7f0 <rcl_get_zero_initialized_init_options>
 8009896:	4603      	mov	r3, r0
 8009898:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800989c:	e88d 0003 	stmia.w	sp, {r0, r1}
 80098a0:	9305      	str	r3, [sp, #20]
 80098a2:	a805      	add	r0, sp, #20
 80098a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80098a8:	f001 ffa4 	bl	800b7f4 <rcl_init_options_init>
 80098ac:	4605      	mov	r5, r0
 80098ae:	bb38      	cbnz	r0, 8009900 <rclc_support_init+0x84>
 80098b0:	f001 ff9e 	bl	800b7f0 <rcl_get_zero_initialized_init_options>
 80098b4:	4631      	mov	r1, r6
 80098b6:	6030      	str	r0, [r6, #0]
 80098b8:	a805      	add	r0, sp, #20
 80098ba:	f002 f811 	bl	800b8e0 <rcl_init_options_copy>
 80098be:	4605      	mov	r5, r0
 80098c0:	b9c0      	cbnz	r0, 80098f4 <rclc_support_init+0x78>
 80098c2:	ad02      	add	r5, sp, #8
 80098c4:	4628      	mov	r0, r5
 80098c6:	f001 fca9 	bl	800b21c <rcl_get_zero_initialized_context>
 80098ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098ce:	1d33      	adds	r3, r6, #4
 80098d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80098d4:	4632      	mov	r2, r6
 80098d6:	4641      	mov	r1, r8
 80098d8:	4638      	mov	r0, r7
 80098da:	f001 fe7f 	bl	800b5dc <rcl_init>
 80098de:	4605      	mov	r5, r0
 80098e0:	b940      	cbnz	r0, 80098f4 <rclc_support_init+0x78>
 80098e2:	60f4      	str	r4, [r6, #12]
 80098e4:	4622      	mov	r2, r4
 80098e6:	f106 0110 	add.w	r1, r6, #16
 80098ea:	2003      	movs	r0, #3
 80098ec:	f002 fd76 	bl	800c3dc <rcl_clock_init>
 80098f0:	4605      	mov	r5, r0
 80098f2:	b108      	cbz	r0, 80098f8 <rclc_support_init+0x7c>
 80098f4:	f000 f8c8 	bl	8009a88 <rcutils_reset_error>
 80098f8:	a805      	add	r0, sp, #20
 80098fa:	f001 ffcd 	bl	800b898 <rcl_init_options_fini>
 80098fe:	b108      	cbz	r0, 8009904 <rclc_support_init+0x88>
 8009900:	f000 f8c2 	bl	8009a88 <rcutils_reset_error>
 8009904:	4628      	mov	r0, r5
 8009906:	b006      	add	sp, #24
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	250b      	movs	r5, #11
 800990e:	4628      	mov	r0, r5
 8009910:	b006      	add	sp, #24
 8009912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009916:	bf00      	nop

08009918 <rclc_node_init_default>:
 8009918:	b3b8      	cbz	r0, 800998a <rclc_node_init_default+0x72>
 800991a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800991e:	460d      	mov	r5, r1
 8009920:	b08f      	sub	sp, #60	@ 0x3c
 8009922:	b329      	cbz	r1, 8009970 <rclc_node_init_default+0x58>
 8009924:	4616      	mov	r6, r2
 8009926:	b31a      	cbz	r2, 8009970 <rclc_node_init_default+0x58>
 8009928:	461f      	mov	r7, r3
 800992a:	b30b      	cbz	r3, 8009970 <rclc_node_init_default+0x58>
 800992c:	f10d 0810 	add.w	r8, sp, #16
 8009930:	4604      	mov	r4, r0
 8009932:	4640      	mov	r0, r8
 8009934:	f002 f89c 	bl	800ba70 <rcl_get_zero_initialized_node>
 8009938:	e898 0003 	ldmia.w	r8, {r0, r1}
 800993c:	f10d 091c 	add.w	r9, sp, #28
 8009940:	e884 0003 	stmia.w	r4, {r0, r1}
 8009944:	4648      	mov	r0, r9
 8009946:	f002 fa35 	bl	800bdb4 <rcl_node_get_default_options>
 800994a:	4640      	mov	r0, r8
 800994c:	f002 f890 	bl	800ba70 <rcl_get_zero_initialized_node>
 8009950:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009954:	1d3b      	adds	r3, r7, #4
 8009956:	f8cd 9000 	str.w	r9, [sp]
 800995a:	4632      	mov	r2, r6
 800995c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f002 f88e 	bl	800ba84 <rcl_node_init>
 8009968:	b930      	cbnz	r0, 8009978 <rclc_node_init_default+0x60>
 800996a:	b00f      	add	sp, #60	@ 0x3c
 800996c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009970:	200b      	movs	r0, #11
 8009972:	b00f      	add	sp, #60	@ 0x3c
 8009974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009978:	9003      	str	r0, [sp, #12]
 800997a:	f000 f885 	bl	8009a88 <rcutils_reset_error>
 800997e:	f000 f883 	bl	8009a88 <rcutils_reset_error>
 8009982:	9803      	ldr	r0, [sp, #12]
 8009984:	b00f      	add	sp, #60	@ 0x3c
 8009986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800998a:	200b      	movs	r0, #11
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <rclc_subscription_init_default>:
 8009990:	b368      	cbz	r0, 80099ee <rclc_subscription_init_default+0x5e>
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	460d      	mov	r5, r1
 8009998:	b0a0      	sub	sp, #128	@ 0x80
 800999a:	b321      	cbz	r1, 80099e6 <rclc_subscription_init_default+0x56>
 800999c:	4616      	mov	r6, r2
 800999e:	b312      	cbz	r2, 80099e6 <rclc_subscription_init_default+0x56>
 80099a0:	461f      	mov	r7, r3
 80099a2:	b303      	cbz	r3, 80099e6 <rclc_subscription_init_default+0x56>
 80099a4:	4604      	mov	r4, r0
 80099a6:	f002 fb87 	bl	800c0b8 <rcl_get_zero_initialized_subscription>
 80099aa:	f10d 0810 	add.w	r8, sp, #16
 80099ae:	6020      	str	r0, [r4, #0]
 80099b0:	4640      	mov	r0, r8
 80099b2:	f002 fc7d 	bl	800c2b0 <rcl_subscription_get_default_options>
 80099b6:	490f      	ldr	r1, [pc, #60]	@ (80099f4 <rclc_subscription_init_default+0x64>)
 80099b8:	2250      	movs	r2, #80	@ 0x50
 80099ba:	4640      	mov	r0, r8
 80099bc:	f00a fe81 	bl	80146c2 <memcpy>
 80099c0:	f8cd 8000 	str.w	r8, [sp]
 80099c4:	463b      	mov	r3, r7
 80099c6:	4632      	mov	r2, r6
 80099c8:	4629      	mov	r1, r5
 80099ca:	4620      	mov	r0, r4
 80099cc:	f002 fb7a 	bl	800c0c4 <rcl_subscription_init>
 80099d0:	b910      	cbnz	r0, 80099d8 <rclc_subscription_init_default+0x48>
 80099d2:	b020      	add	sp, #128	@ 0x80
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	9003      	str	r0, [sp, #12]
 80099da:	f000 f855 	bl	8009a88 <rcutils_reset_error>
 80099de:	9803      	ldr	r0, [sp, #12]
 80099e0:	b020      	add	sp, #128	@ 0x80
 80099e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e6:	200b      	movs	r0, #11
 80099e8:	b020      	add	sp, #128	@ 0x80
 80099ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ee:	200b      	movs	r0, #11
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	080155d0 	.word	0x080155d0

080099f8 <__default_zero_allocate>:
 80099f8:	f00a b9d2 	b.w	8013da0 <calloc>

080099fc <__default_reallocate>:
 80099fc:	f00a bb5e 	b.w	80140bc <realloc>

08009a00 <__default_deallocate>:
 8009a00:	f00a ba3a 	b.w	8013e78 <free>

08009a04 <__default_allocate>:
 8009a04:	f00a ba30 	b.w	8013e68 <malloc>

08009a08 <rcutils_get_zero_initialized_allocator>:
 8009a08:	b470      	push	{r4, r5, r6}
 8009a0a:	4d05      	ldr	r5, [pc, #20]	@ (8009a20 <rcutils_get_zero_initialized_allocator+0x18>)
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a10:	4634      	mov	r4, r6
 8009a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	4630      	mov	r0, r6
 8009a1a:	bc70      	pop	{r4, r5, r6}
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	08015620 	.word	0x08015620

08009a24 <rcutils_get_default_allocator>:
 8009a24:	b470      	push	{r4, r5, r6}
 8009a26:	4d05      	ldr	r5, [pc, #20]	@ (8009a3c <rcutils_get_default_allocator+0x18>)
 8009a28:	4606      	mov	r6, r0
 8009a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a2c:	4634      	mov	r4, r6
 8009a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	4630      	mov	r0, r6
 8009a36:	bc70      	pop	{r4, r5, r6}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	200000a8 	.word	0x200000a8

08009a40 <rcutils_allocator_is_valid>:
 8009a40:	b158      	cbz	r0, 8009a5a <rcutils_allocator_is_valid+0x1a>
 8009a42:	6803      	ldr	r3, [r0, #0]
 8009a44:	b143      	cbz	r3, 8009a58 <rcutils_allocator_is_valid+0x18>
 8009a46:	6843      	ldr	r3, [r0, #4]
 8009a48:	b133      	cbz	r3, 8009a58 <rcutils_allocator_is_valid+0x18>
 8009a4a:	68c3      	ldr	r3, [r0, #12]
 8009a4c:	b123      	cbz	r3, 8009a58 <rcutils_allocator_is_valid+0x18>
 8009a4e:	6880      	ldr	r0, [r0, #8]
 8009a50:	3800      	subs	r0, #0
 8009a52:	bf18      	it	ne
 8009a54:	2001      	movne	r0, #1
 8009a56:	4770      	bx	lr
 8009a58:	4618      	mov	r0, r3
 8009a5a:	4770      	bx	lr

08009a5c <rcutils_get_error_string>:
 8009a5c:	4b06      	ldr	r3, [pc, #24]	@ (8009a78 <rcutils_get_error_string+0x1c>)
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b13b      	cbz	r3, 8009a72 <rcutils_get_error_string+0x16>
 8009a62:	4b06      	ldr	r3, [pc, #24]	@ (8009a7c <rcutils_get_error_string+0x20>)
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	b90a      	cbnz	r2, 8009a6c <rcutils_get_error_string+0x10>
 8009a68:	2201      	movs	r2, #1
 8009a6a:	701a      	strb	r2, [r3, #0]
 8009a6c:	4b04      	ldr	r3, [pc, #16]	@ (8009a80 <rcutils_get_error_string+0x24>)
 8009a6e:	7818      	ldrb	r0, [r3, #0]
 8009a70:	4770      	bx	lr
 8009a72:	4b04      	ldr	r3, [pc, #16]	@ (8009a84 <rcutils_get_error_string+0x28>)
 8009a74:	7818      	ldrb	r0, [r3, #0]
 8009a76:	4770      	bx	lr
 8009a78:	20009144 	.word	0x20009144
 8009a7c:	20009145 	.word	0x20009145
 8009a80:	20009420 	.word	0x20009420
 8009a84:	08015634 	.word	0x08015634

08009a88 <rcutils_reset_error>:
 8009a88:	b4d0      	push	{r4, r6, r7}
 8009a8a:	4a07      	ldr	r2, [pc, #28]	@ (8009aa8 <rcutils_reset_error+0x20>)
 8009a8c:	4807      	ldr	r0, [pc, #28]	@ (8009aac <rcutils_reset_error+0x24>)
 8009a8e:	4c08      	ldr	r4, [pc, #32]	@ (8009ab0 <rcutils_reset_error+0x28>)
 8009a90:	4908      	ldr	r1, [pc, #32]	@ (8009ab4 <rcutils_reset_error+0x2c>)
 8009a92:	2300      	movs	r3, #0
 8009a94:	2600      	movs	r6, #0
 8009a96:	2700      	movs	r7, #0
 8009a98:	8013      	strh	r3, [r2, #0]
 8009a9a:	7003      	strb	r3, [r0, #0]
 8009a9c:	e9c2 6702 	strd	r6, r7, [r2, #8]
 8009aa0:	7023      	strb	r3, [r4, #0]
 8009aa2:	700b      	strb	r3, [r1, #0]
 8009aa4:	bcd0      	pop	{r4, r6, r7}
 8009aa6:	4770      	bx	lr
 8009aa8:	20009428 	.word	0x20009428
 8009aac:	20009420 	.word	0x20009420
 8009ab0:	20009145 	.word	0x20009145
 8009ab4:	20009144 	.word	0x20009144

08009ab8 <rcutils_system_time_now>:
 8009ab8:	b310      	cbz	r0, 8009b00 <rcutils_system_time_now+0x48>
 8009aba:	b570      	push	{r4, r5, r6, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	4669      	mov	r1, sp
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f7f8 fcb4 	bl	8002430 <clock_gettime>
 8009ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f171 0300 	sbcs.w	r3, r1, #0
 8009ad2:	db12      	blt.n	8009afa <rcutils_system_time_now+0x42>
 8009ad4:	9d02      	ldr	r5, [sp, #8]
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	db0c      	blt.n	8009af4 <rcutils_system_time_now+0x3c>
 8009ada:	4e0a      	ldr	r6, [pc, #40]	@ (8009b04 <rcutils_system_time_now+0x4c>)
 8009adc:	fba0 2306 	umull	r2, r3, r0, r6
 8009ae0:	1952      	adds	r2, r2, r5
 8009ae2:	fb06 3301 	mla	r3, r6, r1, r3
 8009ae6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 8009aea:	2000      	movs	r0, #0
 8009aec:	e9c4 2300 	strd	r2, r3, [r4]
 8009af0:	b004      	add	sp, #16
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	ea50 0301 	orrs.w	r3, r0, r1
 8009af8:	d1ef      	bne.n	8009ada <rcutils_system_time_now+0x22>
 8009afa:	2002      	movs	r0, #2
 8009afc:	b004      	add	sp, #16
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	200b      	movs	r0, #11
 8009b02:	4770      	bx	lr
 8009b04:	3b9aca00 	.word	0x3b9aca00

08009b08 <rcutils_steady_time_now>:
 8009b08:	b310      	cbz	r0, 8009b50 <rcutils_steady_time_now+0x48>
 8009b0a:	b570      	push	{r4, r5, r6, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	4669      	mov	r1, sp
 8009b10:	4604      	mov	r4, r0
 8009b12:	2000      	movs	r0, #0
 8009b14:	f7f8 fc8c 	bl	8002430 <clock_gettime>
 8009b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f171 0300 	sbcs.w	r3, r1, #0
 8009b22:	db12      	blt.n	8009b4a <rcutils_steady_time_now+0x42>
 8009b24:	9d02      	ldr	r5, [sp, #8]
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	db0c      	blt.n	8009b44 <rcutils_steady_time_now+0x3c>
 8009b2a:	4e0a      	ldr	r6, [pc, #40]	@ (8009b54 <rcutils_steady_time_now+0x4c>)
 8009b2c:	fba0 2306 	umull	r2, r3, r0, r6
 8009b30:	1952      	adds	r2, r2, r5
 8009b32:	fb06 3301 	mla	r3, r6, r1, r3
 8009b36:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e9c4 2300 	strd	r2, r3, [r4]
 8009b40:	b004      	add	sp, #16
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	ea50 0301 	orrs.w	r3, r0, r1
 8009b48:	d1ef      	bne.n	8009b2a <rcutils_steady_time_now+0x22>
 8009b4a:	2002      	movs	r0, #2
 8009b4c:	b004      	add	sp, #16
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	200b      	movs	r0, #11
 8009b52:	4770      	bx	lr
 8009b54:	3b9aca00 	.word	0x3b9aca00

08009b58 <rmw_uros_set_custom_transport>:
 8009b58:	b470      	push	{r4, r5, r6}
 8009b5a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8009b5e:	b162      	cbz	r2, 8009b7a <rmw_uros_set_custom_transport+0x22>
 8009b60:	b15b      	cbz	r3, 8009b7a <rmw_uros_set_custom_transport+0x22>
 8009b62:	b155      	cbz	r5, 8009b7a <rmw_uros_set_custom_transport+0x22>
 8009b64:	b14e      	cbz	r6, 8009b7a <rmw_uros_set_custom_transport+0x22>
 8009b66:	4c06      	ldr	r4, [pc, #24]	@ (8009b80 <rmw_uros_set_custom_transport+0x28>)
 8009b68:	7020      	strb	r0, [r4, #0]
 8009b6a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009b6e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009b72:	6166      	str	r6, [r4, #20]
 8009b74:	2000      	movs	r0, #0
 8009b76:	bc70      	pop	{r4, r5, r6}
 8009b78:	4770      	bx	lr
 8009b7a:	200b      	movs	r0, #11
 8009b7c:	bc70      	pop	{r4, r5, r6}
 8009b7e:	4770      	bx	lr
 8009b80:	20009438 	.word	0x20009438

08009b84 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 8009b84:	f000 b8dc 	b.w	8009d40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>

08009b88 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 8009b88:	f000 b964 	b.w	8009e54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>

08009b8c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	2104      	movs	r1, #4
 8009b90:	4604      	mov	r4, r0
 8009b92:	f001 fa95 	bl	800b0c0 <ucdr_alignment>
 8009b96:	1d26      	adds	r6, r4, #4
 8009b98:	4406      	add	r6, r0
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	2104      	movs	r1, #4
 8009b9e:	f001 fa8f 	bl	800b0c0 <ucdr_alignment>
 8009ba2:	1d05      	adds	r5, r0, #4
 8009ba4:	442e      	add	r6, r5
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	2104      	movs	r1, #4
 8009baa:	f001 fa89 	bl	800b0c0 <ucdr_alignment>
 8009bae:	1d05      	adds	r5, r0, #4
 8009bb0:	4435      	add	r5, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	2104      	movs	r1, #4
 8009bb6:	f001 fa83 	bl	800b0c0 <ucdr_alignment>
 8009bba:	3004      	adds	r0, #4
 8009bbc:	4405      	add	r5, r0
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	f001 fa7d 	bl	800b0c0 <ucdr_alignment>
 8009bc6:	3004      	adds	r0, #4
 8009bc8:	1946      	adds	r6, r0, r5
 8009bca:	4630      	mov	r0, r6
 8009bcc:	2104      	movs	r1, #4
 8009bce:	f001 fa77 	bl	800b0c0 <ucdr_alignment>
 8009bd2:	1d05      	adds	r5, r0, #4
 8009bd4:	4435      	add	r5, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	2101      	movs	r1, #1
 8009bda:	f001 fa71 	bl	800b0c0 <ucdr_alignment>
 8009bde:	3001      	adds	r0, #1
 8009be0:	4405      	add	r5, r0
 8009be2:	4628      	mov	r0, r5
 8009be4:	2104      	movs	r1, #4
 8009be6:	f001 fa6b 	bl	800b0c0 <ucdr_alignment>
 8009bea:	f1c4 0404 	rsb	r4, r4, #4
 8009bee:	4420      	add	r0, r4
 8009bf0:	4428      	add	r0, r5
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}

08009bf4 <get_serialized_size_rover_msgs__msg__ControllerMsg>:
 8009bf4:	b110      	cbz	r0, 8009bfc <get_serialized_size_rover_msgs__msg__ControllerMsg+0x8>
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	f7ff bfc8 	b.w	8009b8c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <_ControllerMsg__get_serialized_size>:
 8009c00:	b110      	cbz	r0, 8009c08 <_ControllerMsg__get_serialized_size+0x8>
 8009c02:	2000      	movs	r0, #0
 8009c04:	f7ff bfc2 	b.w	8009b8c <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop

08009c0c <_ControllerMsg__cdr_deserialize>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	460c      	mov	r4, r1
 8009c10:	b331      	cbz	r1, 8009c60 <_ControllerMsg__cdr_deserialize+0x54>
 8009c12:	4605      	mov	r5, r0
 8009c14:	f001 f96e 	bl	800aef4 <ucdr_deserialize_float>
 8009c18:	1d21      	adds	r1, r4, #4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f001 f96a 	bl	800aef4 <ucdr_deserialize_float>
 8009c20:	f104 0108 	add.w	r1, r4, #8
 8009c24:	4628      	mov	r0, r5
 8009c26:	f001 f965 	bl	800aef4 <ucdr_deserialize_float>
 8009c2a:	f104 010c 	add.w	r1, r4, #12
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f001 f838 	bl	800aca4 <ucdr_deserialize_int32_t>
 8009c34:	f104 0110 	add.w	r1, r4, #16
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f001 f833 	bl	800aca4 <ucdr_deserialize_int32_t>
 8009c3e:	f104 0114 	add.w	r1, r4, #20
 8009c42:	4628      	mov	r0, r5
 8009c44:	f001 f82e 	bl	800aca4 <ucdr_deserialize_int32_t>
 8009c48:	f104 0118 	add.w	r1, r4, #24
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f000 fe87 	bl	800a960 <ucdr_deserialize_int8_t>
 8009c52:	f104 011c 	add.w	r1, r4, #28
 8009c56:	4628      	mov	r0, r5
 8009c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c5c:	f001 b822 	b.w	800aca4 <ucdr_deserialize_int32_t>
 8009c60:	4608      	mov	r0, r1
 8009c62:	bd38      	pop	{r3, r4, r5, pc}

08009c64 <_ControllerMsg__cdr_serialize>:
 8009c64:	b340      	cbz	r0, 8009cb8 <_ControllerMsg__cdr_serialize+0x54>
 8009c66:	b538      	push	{r3, r4, r5, lr}
 8009c68:	ed90 0a00 	vldr	s0, [r0]
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	f001 f8a7 	bl	800adc4 <ucdr_serialize_float>
 8009c76:	ed94 0a01 	vldr	s0, [r4, #4]
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f001 f8a2 	bl	800adc4 <ucdr_serialize_float>
 8009c80:	ed94 0a02 	vldr	s0, [r4, #8]
 8009c84:	4628      	mov	r0, r5
 8009c86:	f001 f89d 	bl	800adc4 <ucdr_serialize_float>
 8009c8a:	68e1      	ldr	r1, [r4, #12]
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 ff71 	bl	800ab74 <ucdr_serialize_int32_t>
 8009c92:	6921      	ldr	r1, [r4, #16]
 8009c94:	4628      	mov	r0, r5
 8009c96:	f000 ff6d 	bl	800ab74 <ucdr_serialize_int32_t>
 8009c9a:	6961      	ldr	r1, [r4, #20]
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f000 ff69 	bl	800ab74 <ucdr_serialize_int32_t>
 8009ca2:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 fe44 	bl	800a934 <ucdr_serialize_int8_t>
 8009cac:	69e1      	ldr	r1, [r4, #28]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb4:	f000 bf5e 	b.w	800ab74 <ucdr_serialize_int32_t>
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop

08009cbc <max_serialized_size_rover_msgs__msg__ControllerMsg>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	2701      	movs	r7, #1
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	7007      	strb	r7, [r0, #0]
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	2104      	movs	r1, #4
 8009cc8:	f001 f9fa 	bl	800b0c0 <ucdr_alignment>
 8009ccc:	1d26      	adds	r6, r4, #4
 8009cce:	4406      	add	r6, r0
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	2104      	movs	r1, #4
 8009cd4:	f001 f9f4 	bl	800b0c0 <ucdr_alignment>
 8009cd8:	1d05      	adds	r5, r0, #4
 8009cda:	442e      	add	r6, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	2104      	movs	r1, #4
 8009ce0:	f001 f9ee 	bl	800b0c0 <ucdr_alignment>
 8009ce4:	1d05      	adds	r5, r0, #4
 8009ce6:	4435      	add	r5, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	2104      	movs	r1, #4
 8009cec:	f001 f9e8 	bl	800b0c0 <ucdr_alignment>
 8009cf0:	3004      	adds	r0, #4
 8009cf2:	4405      	add	r5, r0
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	2104      	movs	r1, #4
 8009cf8:	f001 f9e2 	bl	800b0c0 <ucdr_alignment>
 8009cfc:	3004      	adds	r0, #4
 8009cfe:	1946      	adds	r6, r0, r5
 8009d00:	4630      	mov	r0, r6
 8009d02:	2104      	movs	r1, #4
 8009d04:	f001 f9dc 	bl	800b0c0 <ucdr_alignment>
 8009d08:	1d05      	adds	r5, r0, #4
 8009d0a:	4435      	add	r5, r6
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f001 f9d6 	bl	800b0c0 <ucdr_alignment>
 8009d14:	4438      	add	r0, r7
 8009d16:	4405      	add	r5, r0
 8009d18:	4628      	mov	r0, r5
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	f001 f9d0 	bl	800b0c0 <ucdr_alignment>
 8009d20:	f1c4 0404 	rsb	r4, r4, #4
 8009d24:	4420      	add	r0, r4
 8009d26:	4428      	add	r0, r5
 8009d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2a:	bf00      	nop

08009d2c <_ControllerMsg__max_serialized_size>:
 8009d2c:	b500      	push	{lr}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	2100      	movs	r1, #0
 8009d32:	f10d 0007 	add.w	r0, sp, #7
 8009d36:	f7ff ffc1 	bl	8009cbc <max_serialized_size_rover_msgs__msg__ControllerMsg>
 8009d3a:	b003      	add	sp, #12
 8009d3c:	f85d fb04 	ldr.w	pc, [sp], #4

08009d40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 8009d40:	4800      	ldr	r0, [pc, #0]	@ (8009d44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x4>)
 8009d42:	4770      	bx	lr
 8009d44:	200000bc 	.word	0x200000bc

08009d48 <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 8009d48:	b1e0      	cbz	r0, 8009d84 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x3c>
 8009d4a:	b570      	push	{r4, r5, r6, lr}
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	4628      	mov	r0, r5
 8009d50:	2104      	movs	r1, #4
 8009d52:	f001 f9b5 	bl	800b0c0 <ucdr_alignment>
 8009d56:	1d2b      	adds	r3, r5, #4
 8009d58:	181e      	adds	r6, r3, r0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	2104      	movs	r1, #4
 8009d5e:	f001 f9af 	bl	800b0c0 <ucdr_alignment>
 8009d62:	1d04      	adds	r4, r0, #4
 8009d64:	4434      	add	r4, r6
 8009d66:	4620      	mov	r0, r4
 8009d68:	2104      	movs	r1, #4
 8009d6a:	f001 f9a9 	bl	800b0c0 <ucdr_alignment>
 8009d6e:	3004      	adds	r0, #4
 8009d70:	4404      	add	r4, r0
 8009d72:	4620      	mov	r0, r4
 8009d74:	2104      	movs	r1, #4
 8009d76:	f001 f9a3 	bl	800b0c0 <ucdr_alignment>
 8009d7a:	f1c5 0504 	rsb	r5, r5, #4
 8009d7e:	4428      	add	r0, r5
 8009d80:	4420      	add	r0, r4
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop

08009d88 <_EncoderMsg__cdr_deserialize>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b191      	cbz	r1, 8009db4 <_EncoderMsg__cdr_deserialize+0x2c>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	f000 ff88 	bl	800aca4 <ucdr_deserialize_int32_t>
 8009d94:	1d21      	adds	r1, r4, #4
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 ff84 	bl	800aca4 <ucdr_deserialize_int32_t>
 8009d9c:	f104 0108 	add.w	r1, r4, #8
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 ff7f 	bl	800aca4 <ucdr_deserialize_int32_t>
 8009da6:	f104 010c 	add.w	r1, r4, #12
 8009daa:	4628      	mov	r0, r5
 8009dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009db0:	f000 bf78 	b.w	800aca4 <ucdr_deserialize_int32_t>
 8009db4:	4608      	mov	r0, r1
 8009db6:	bd38      	pop	{r3, r4, r5, pc}

08009db8 <_EncoderMsg__cdr_serialize>:
 8009db8:	b1a0      	cbz	r0, 8009de4 <_EncoderMsg__cdr_serialize+0x2c>
 8009dba:	b538      	push	{r3, r4, r5, lr}
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	6801      	ldr	r1, [r0, #0]
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 fed6 	bl	800ab74 <ucdr_serialize_int32_t>
 8009dc8:	6861      	ldr	r1, [r4, #4]
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f000 fed2 	bl	800ab74 <ucdr_serialize_int32_t>
 8009dd0:	68a1      	ldr	r1, [r4, #8]
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 fece 	bl	800ab74 <ucdr_serialize_int32_t>
 8009dd8:	68e1      	ldr	r1, [r4, #12]
 8009dda:	4628      	mov	r0, r5
 8009ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de0:	f000 bec8 	b.w	800ab74 <ucdr_serialize_int32_t>
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop

08009de8 <_EncoderMsg__get_serialized_size>:
 8009de8:	b1c0      	cbz	r0, 8009e1c <_EncoderMsg__get_serialized_size+0x34>
 8009dea:	b538      	push	{r3, r4, r5, lr}
 8009dec:	2104      	movs	r1, #4
 8009dee:	2000      	movs	r0, #0
 8009df0:	f001 f966 	bl	800b0c0 <ucdr_alignment>
 8009df4:	1d05      	adds	r5, r0, #4
 8009df6:	4628      	mov	r0, r5
 8009df8:	2104      	movs	r1, #4
 8009dfa:	f001 f961 	bl	800b0c0 <ucdr_alignment>
 8009dfe:	1d04      	adds	r4, r0, #4
 8009e00:	442c      	add	r4, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	2104      	movs	r1, #4
 8009e06:	f001 f95b 	bl	800b0c0 <ucdr_alignment>
 8009e0a:	3004      	adds	r0, #4
 8009e0c:	4404      	add	r4, r0
 8009e0e:	4620      	mov	r0, r4
 8009e10:	2104      	movs	r1, #4
 8009e12:	f001 f955 	bl	800b0c0 <ucdr_alignment>
 8009e16:	3004      	adds	r0, #4
 8009e18:	4420      	add	r0, r4
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <_EncoderMsg__max_serialized_size>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	2104      	movs	r1, #4
 8009e24:	2000      	movs	r0, #0
 8009e26:	f001 f94b 	bl	800b0c0 <ucdr_alignment>
 8009e2a:	1d05      	adds	r5, r0, #4
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	2104      	movs	r1, #4
 8009e30:	f001 f946 	bl	800b0c0 <ucdr_alignment>
 8009e34:	1d04      	adds	r4, r0, #4
 8009e36:	442c      	add	r4, r5
 8009e38:	4620      	mov	r0, r4
 8009e3a:	2104      	movs	r1, #4
 8009e3c:	f001 f940 	bl	800b0c0 <ucdr_alignment>
 8009e40:	3004      	adds	r0, #4
 8009e42:	4404      	add	r4, r0
 8009e44:	4620      	mov	r0, r4
 8009e46:	2104      	movs	r1, #4
 8009e48:	f001 f93a 	bl	800b0c0 <ucdr_alignment>
 8009e4c:	3004      	adds	r0, #4
 8009e4e:	4420      	add	r0, r4
 8009e50:	bd38      	pop	{r3, r4, r5, pc}
 8009e52:	bf00      	nop

08009e54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 8009e54:	4800      	ldr	r0, [pc, #0]	@ (8009e58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 8009e56:	4770      	bx	lr
 8009e58:	200000e4 	.word	0x200000e4

08009e5c <ucdr_serialize_bool>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	460d      	mov	r5, r1
 8009e60:	2101      	movs	r1, #1
 8009e62:	4604      	mov	r4, r0
 8009e64:	f001 f8e2 	bl	800b02c <ucdr_check_final_buffer_behavior>
 8009e68:	b148      	cbz	r0, 8009e7e <ucdr_serialize_bool+0x22>
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	701d      	strb	r5, [r3, #0]
 8009e6e:	68a2      	ldr	r2, [r4, #8]
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	3201      	adds	r2, #1
 8009e74:	3301      	adds	r3, #1
 8009e76:	2101      	movs	r1, #1
 8009e78:	60a2      	str	r2, [r4, #8]
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	7561      	strb	r1, [r4, #21]
 8009e7e:	7da0      	ldrb	r0, [r4, #22]
 8009e80:	f080 0001 	eor.w	r0, r0, #1
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	bf00      	nop

08009e88 <ucdr_deserialize_bool>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	4604      	mov	r4, r0
 8009e90:	f001 f8cc 	bl	800b02c <ucdr_check_final_buffer_behavior>
 8009e94:	b168      	cbz	r0, 8009eb2 <ucdr_deserialize_bool+0x2a>
 8009e96:	68a2      	ldr	r2, [r4, #8]
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009e9e:	3900      	subs	r1, #0
 8009ea0:	f103 0301 	add.w	r3, r3, #1
 8009ea4:	bf18      	it	ne
 8009ea6:	2101      	movne	r1, #1
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	7029      	strb	r1, [r5, #0]
 8009eac:	60a2      	str	r2, [r4, #8]
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	7560      	strb	r0, [r4, #21]
 8009eb2:	7da0      	ldrb	r0, [r4, #22]
 8009eb4:	f080 0001 	eor.w	r0, r0, #1
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop

08009ebc <ucdr_serialize_uint8_t>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	f001 f8b2 	bl	800b02c <ucdr_check_final_buffer_behavior>
 8009ec8:	b148      	cbz	r0, 8009ede <ucdr_serialize_uint8_t+0x22>
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	701d      	strb	r5, [r3, #0]
 8009ece:	68a2      	ldr	r2, [r4, #8]
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	3201      	adds	r2, #1
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	60a2      	str	r2, [r4, #8]
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	7561      	strb	r1, [r4, #21]
 8009ede:	7da0      	ldrb	r0, [r4, #22]
 8009ee0:	f080 0001 	eor.w	r0, r0, #1
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	bf00      	nop

08009ee8 <ucdr_deserialize_uint8_t>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	460d      	mov	r5, r1
 8009eec:	2101      	movs	r1, #1
 8009eee:	4604      	mov	r4, r0
 8009ef0:	f001 f89c 	bl	800b02c <ucdr_check_final_buffer_behavior>
 8009ef4:	b150      	cbz	r0, 8009f0c <ucdr_deserialize_uint8_t+0x24>
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	702b      	strb	r3, [r5, #0]
 8009efc:	68a2      	ldr	r2, [r4, #8]
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	3201      	adds	r2, #1
 8009f02:	3301      	adds	r3, #1
 8009f04:	2101      	movs	r1, #1
 8009f06:	60a2      	str	r2, [r4, #8]
 8009f08:	6123      	str	r3, [r4, #16]
 8009f0a:	7561      	strb	r1, [r4, #21]
 8009f0c:	7da0      	ldrb	r0, [r4, #22]
 8009f0e:	f080 0001 	eor.w	r0, r0, #1
 8009f12:	bd38      	pop	{r3, r4, r5, pc}

08009f14 <ucdr_serialize_uint16_t>:
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	4604      	mov	r4, r0
 8009f20:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009f24:	f001 f8d4 	bl	800b0d0 <ucdr_buffer_alignment>
 8009f28:	4601      	mov	r1, r0
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	7d67      	ldrb	r7, [r4, #21]
 8009f2e:	f001 f913 	bl	800b158 <ucdr_advance_buffer>
 8009f32:	4620      	mov	r0, r4
 8009f34:	2102      	movs	r1, #2
 8009f36:	f001 f86d 	bl	800b014 <ucdr_check_buffer_available_for>
 8009f3a:	bb78      	cbnz	r0, 8009f9c <ucdr_serialize_uint16_t+0x88>
 8009f3c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009f40:	42b5      	cmp	r5, r6
 8009f42:	d926      	bls.n	8009f92 <ucdr_serialize_uint16_t+0x7e>
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	60a5      	str	r5, [r4, #8]
 8009f48:	1bad      	subs	r5, r5, r6
 8009f4a:	442a      	add	r2, r5
 8009f4c:	f1c5 0802 	rsb	r8, r5, #2
 8009f50:	6122      	str	r2, [r4, #16]
 8009f52:	4641      	mov	r1, r8
 8009f54:	4620      	mov	r0, r4
 8009f56:	f001 f869 	bl	800b02c <ucdr_check_final_buffer_behavior>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d03b      	beq.n	8009fd6 <ucdr_serialize_uint16_t+0xc2>
 8009f5e:	7d23      	ldrb	r3, [r4, #20]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d04a      	beq.n	8009ffa <ucdr_serialize_uint16_t+0xe6>
 8009f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009f68:	7033      	strb	r3, [r6, #0]
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	d040      	beq.n	8009ff0 <ucdr_serialize_uint16_t+0xdc>
 8009f6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009f72:	7073      	strb	r3, [r6, #1]
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	68a2      	ldr	r2, [r4, #8]
 8009f78:	7da0      	ldrb	r0, [r4, #22]
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	1b5b      	subs	r3, r3, r5
 8009f7e:	4442      	add	r2, r8
 8009f80:	2102      	movs	r1, #2
 8009f82:	f080 0001 	eor.w	r0, r0, #1
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	60a2      	str	r2, [r4, #8]
 8009f8a:	7561      	strb	r1, [r4, #21]
 8009f8c:	b002      	add	sp, #8
 8009f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f92:	2102      	movs	r1, #2
 8009f94:	4620      	mov	r0, r4
 8009f96:	f001 f849 	bl	800b02c <ucdr_check_final_buffer_behavior>
 8009f9a:	b190      	cbz	r0, 8009fc2 <ucdr_serialize_uint16_t+0xae>
 8009f9c:	7d23      	ldrb	r3, [r4, #20]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	d014      	beq.n	8009fce <ucdr_serialize_uint16_t+0xba>
 8009fa4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009fb0:	705a      	strb	r2, [r3, #1]
 8009fb2:	68a2      	ldr	r2, [r4, #8]
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	3202      	adds	r2, #2
 8009fb8:	3302      	adds	r3, #2
 8009fba:	2102      	movs	r1, #2
 8009fbc:	60a2      	str	r2, [r4, #8]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	7561      	strb	r1, [r4, #21]
 8009fc2:	7da0      	ldrb	r0, [r4, #22]
 8009fc4:	f080 0001 	eor.w	r0, r0, #1
 8009fc8:	b002      	add	sp, #8
 8009fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009fd2:	801a      	strh	r2, [r3, #0]
 8009fd4:	e7ed      	b.n	8009fb2 <ucdr_serialize_uint16_t+0x9e>
 8009fd6:	68a2      	ldr	r2, [r4, #8]
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	7da0      	ldrb	r0, [r4, #22]
 8009fdc:	7567      	strb	r7, [r4, #21]
 8009fde:	1b52      	subs	r2, r2, r5
 8009fe0:	1b5b      	subs	r3, r3, r5
 8009fe2:	f080 0001 	eor.w	r0, r0, #1
 8009fe6:	60a2      	str	r2, [r4, #8]
 8009fe8:	6123      	str	r3, [r4, #16]
 8009fea:	b002      	add	sp, #8
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	68a3      	ldr	r3, [r4, #8]
 8009ff2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ff6:	701a      	strb	r2, [r3, #0]
 8009ff8:	e7bc      	b.n	8009f74 <ucdr_serialize_uint16_t+0x60>
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f10d 0606 	add.w	r6, sp, #6
 800a000:	4631      	mov	r1, r6
 800a002:	462a      	mov	r2, r5
 800a004:	f00a fb5d 	bl	80146c2 <memcpy>
 800a008:	68a0      	ldr	r0, [r4, #8]
 800a00a:	4642      	mov	r2, r8
 800a00c:	1971      	adds	r1, r6, r5
 800a00e:	f00a fb58 	bl	80146c2 <memcpy>
 800a012:	e7af      	b.n	8009f74 <ucdr_serialize_uint16_t+0x60>

0800a014 <ucdr_serialize_endian_uint16_t>:
 800a014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a018:	b083      	sub	sp, #12
 800a01a:	460d      	mov	r5, r1
 800a01c:	2102      	movs	r1, #2
 800a01e:	4604      	mov	r4, r0
 800a020:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a024:	f001 f854 	bl	800b0d0 <ucdr_buffer_alignment>
 800a028:	4601      	mov	r1, r0
 800a02a:	4620      	mov	r0, r4
 800a02c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a030:	f001 f892 	bl	800b158 <ucdr_advance_buffer>
 800a034:	4620      	mov	r0, r4
 800a036:	2102      	movs	r1, #2
 800a038:	f000 ffec 	bl	800b014 <ucdr_check_buffer_available_for>
 800a03c:	bb70      	cbnz	r0, 800a09c <ucdr_serialize_endian_uint16_t+0x88>
 800a03e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a042:	42be      	cmp	r6, r7
 800a044:	d925      	bls.n	800a092 <ucdr_serialize_endian_uint16_t+0x7e>
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	60a6      	str	r6, [r4, #8]
 800a04a:	1bf6      	subs	r6, r6, r7
 800a04c:	4432      	add	r2, r6
 800a04e:	f1c6 0902 	rsb	r9, r6, #2
 800a052:	6122      	str	r2, [r4, #16]
 800a054:	4649      	mov	r1, r9
 800a056:	4620      	mov	r0, r4
 800a058:	f000 ffe8 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d039      	beq.n	800a0d4 <ucdr_serialize_endian_uint16_t+0xc0>
 800a060:	2d01      	cmp	r5, #1
 800a062:	d04a      	beq.n	800a0fa <ucdr_serialize_endian_uint16_t+0xe6>
 800a064:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a068:	703b      	strb	r3, [r7, #0]
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d040      	beq.n	800a0f0 <ucdr_serialize_endian_uint16_t+0xdc>
 800a06e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a072:	707b      	strb	r3, [r7, #1]
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	68a2      	ldr	r2, [r4, #8]
 800a078:	7da0      	ldrb	r0, [r4, #22]
 800a07a:	3302      	adds	r3, #2
 800a07c:	1b9b      	subs	r3, r3, r6
 800a07e:	444a      	add	r2, r9
 800a080:	2102      	movs	r1, #2
 800a082:	f080 0001 	eor.w	r0, r0, #1
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	60a2      	str	r2, [r4, #8]
 800a08a:	7561      	strb	r1, [r4, #21]
 800a08c:	b003      	add	sp, #12
 800a08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a092:	2102      	movs	r1, #2
 800a094:	4620      	mov	r0, r4
 800a096:	f000 ffc9 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a09a:	b188      	cbz	r0, 800a0c0 <ucdr_serialize_endian_uint16_t+0xac>
 800a09c:	2d01      	cmp	r5, #1
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	d014      	beq.n	800a0cc <ucdr_serialize_endian_uint16_t+0xb8>
 800a0a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	68a3      	ldr	r3, [r4, #8]
 800a0aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0ae:	705a      	strb	r2, [r3, #1]
 800a0b0:	68a2      	ldr	r2, [r4, #8]
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	3202      	adds	r2, #2
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	2102      	movs	r1, #2
 800a0ba:	60a2      	str	r2, [r4, #8]
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	7561      	strb	r1, [r4, #21]
 800a0c0:	7da0      	ldrb	r0, [r4, #22]
 800a0c2:	f080 0001 	eor.w	r0, r0, #1
 800a0c6:	b003      	add	sp, #12
 800a0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	e7ed      	b.n	800a0b0 <ucdr_serialize_endian_uint16_t+0x9c>
 800a0d4:	68a2      	ldr	r2, [r4, #8]
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	7da0      	ldrb	r0, [r4, #22]
 800a0da:	f884 8015 	strb.w	r8, [r4, #21]
 800a0de:	1b92      	subs	r2, r2, r6
 800a0e0:	1b9b      	subs	r3, r3, r6
 800a0e2:	f080 0001 	eor.w	r0, r0, #1
 800a0e6:	60a2      	str	r2, [r4, #8]
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	b003      	add	sp, #12
 800a0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a0f6:	701a      	strb	r2, [r3, #0]
 800a0f8:	e7bc      	b.n	800a074 <ucdr_serialize_endian_uint16_t+0x60>
 800a0fa:	f10d 0506 	add.w	r5, sp, #6
 800a0fe:	4629      	mov	r1, r5
 800a100:	4632      	mov	r2, r6
 800a102:	4638      	mov	r0, r7
 800a104:	f00a fadd 	bl	80146c2 <memcpy>
 800a108:	68a0      	ldr	r0, [r4, #8]
 800a10a:	464a      	mov	r2, r9
 800a10c:	19a9      	adds	r1, r5, r6
 800a10e:	f00a fad8 	bl	80146c2 <memcpy>
 800a112:	e7af      	b.n	800a074 <ucdr_serialize_endian_uint16_t+0x60>

0800a114 <ucdr_deserialize_uint16_t>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	460d      	mov	r5, r1
 800a11a:	2102      	movs	r1, #2
 800a11c:	4604      	mov	r4, r0
 800a11e:	f000 ffd7 	bl	800b0d0 <ucdr_buffer_alignment>
 800a122:	4601      	mov	r1, r0
 800a124:	4620      	mov	r0, r4
 800a126:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a12a:	f001 f815 	bl	800b158 <ucdr_advance_buffer>
 800a12e:	4620      	mov	r0, r4
 800a130:	2102      	movs	r1, #2
 800a132:	f000 ff6f 	bl	800b014 <ucdr_check_buffer_available_for>
 800a136:	bb60      	cbnz	r0, 800a192 <ucdr_deserialize_uint16_t+0x7e>
 800a138:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a13c:	42be      	cmp	r6, r7
 800a13e:	d923      	bls.n	800a188 <ucdr_deserialize_uint16_t+0x74>
 800a140:	6922      	ldr	r2, [r4, #16]
 800a142:	60a6      	str	r6, [r4, #8]
 800a144:	1bf6      	subs	r6, r6, r7
 800a146:	4432      	add	r2, r6
 800a148:	f1c6 0902 	rsb	r9, r6, #2
 800a14c:	6122      	str	r2, [r4, #16]
 800a14e:	4649      	mov	r1, r9
 800a150:	4620      	mov	r0, r4
 800a152:	f000 ff6b 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a156:	2800      	cmp	r0, #0
 800a158:	d034      	beq.n	800a1c4 <ucdr_deserialize_uint16_t+0xb0>
 800a15a:	7d23      	ldrb	r3, [r4, #20]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d042      	beq.n	800a1e6 <ucdr_deserialize_uint16_t+0xd2>
 800a160:	787b      	ldrb	r3, [r7, #1]
 800a162:	702b      	strb	r3, [r5, #0]
 800a164:	2e00      	cmp	r6, #0
 800a166:	d03a      	beq.n	800a1de <ucdr_deserialize_uint16_t+0xca>
 800a168:	783b      	ldrb	r3, [r7, #0]
 800a16a:	706b      	strb	r3, [r5, #1]
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	68a2      	ldr	r2, [r4, #8]
 800a170:	7da0      	ldrb	r0, [r4, #22]
 800a172:	2102      	movs	r1, #2
 800a174:	3302      	adds	r3, #2
 800a176:	1b9b      	subs	r3, r3, r6
 800a178:	444a      	add	r2, r9
 800a17a:	7561      	strb	r1, [r4, #21]
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	60a2      	str	r2, [r4, #8]
 800a180:	f080 0001 	eor.w	r0, r0, #1
 800a184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a188:	2102      	movs	r1, #2
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 ff4e 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a190:	b180      	cbz	r0, 800a1b4 <ucdr_deserialize_uint16_t+0xa0>
 800a192:	7d23      	ldrb	r3, [r4, #20]
 800a194:	2b01      	cmp	r3, #1
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	d011      	beq.n	800a1be <ucdr_deserialize_uint16_t+0xaa>
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	702b      	strb	r3, [r5, #0]
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	706b      	strb	r3, [r5, #1]
 800a1a4:	68a2      	ldr	r2, [r4, #8]
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	3202      	adds	r2, #2
 800a1aa:	3302      	adds	r3, #2
 800a1ac:	2102      	movs	r1, #2
 800a1ae:	60a2      	str	r2, [r4, #8]
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	7561      	strb	r1, [r4, #21]
 800a1b4:	7da0      	ldrb	r0, [r4, #22]
 800a1b6:	f080 0001 	eor.w	r0, r0, #1
 800a1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	802b      	strh	r3, [r5, #0]
 800a1c2:	e7ef      	b.n	800a1a4 <ucdr_deserialize_uint16_t+0x90>
 800a1c4:	68a2      	ldr	r2, [r4, #8]
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	7da0      	ldrb	r0, [r4, #22]
 800a1ca:	f884 8015 	strb.w	r8, [r4, #21]
 800a1ce:	1b92      	subs	r2, r2, r6
 800a1d0:	1b9b      	subs	r3, r3, r6
 800a1d2:	60a2      	str	r2, [r4, #8]
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	f080 0001 	eor.w	r0, r0, #1
 800a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1de:	68a3      	ldr	r3, [r4, #8]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	706b      	strb	r3, [r5, #1]
 800a1e4:	e7c2      	b.n	800a16c <ucdr_deserialize_uint16_t+0x58>
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4632      	mov	r2, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f00a fa69 	bl	80146c2 <memcpy>
 800a1f0:	68a1      	ldr	r1, [r4, #8]
 800a1f2:	464a      	mov	r2, r9
 800a1f4:	19a8      	adds	r0, r5, r6
 800a1f6:	f00a fa64 	bl	80146c2 <memcpy>
 800a1fa:	e7b7      	b.n	800a16c <ucdr_deserialize_uint16_t+0x58>

0800a1fc <ucdr_deserialize_endian_uint16_t>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	460e      	mov	r6, r1
 800a202:	2102      	movs	r1, #2
 800a204:	4604      	mov	r4, r0
 800a206:	4615      	mov	r5, r2
 800a208:	f000 ff62 	bl	800b0d0 <ucdr_buffer_alignment>
 800a20c:	4601      	mov	r1, r0
 800a20e:	4620      	mov	r0, r4
 800a210:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a214:	f000 ffa0 	bl	800b158 <ucdr_advance_buffer>
 800a218:	4620      	mov	r0, r4
 800a21a:	2102      	movs	r1, #2
 800a21c:	f000 fefa 	bl	800b014 <ucdr_check_buffer_available_for>
 800a220:	bb70      	cbnz	r0, 800a280 <ucdr_deserialize_endian_uint16_t+0x84>
 800a222:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a226:	4547      	cmp	r7, r8
 800a228:	d925      	bls.n	800a276 <ucdr_deserialize_endian_uint16_t+0x7a>
 800a22a:	6922      	ldr	r2, [r4, #16]
 800a22c:	60a7      	str	r7, [r4, #8]
 800a22e:	eba7 0708 	sub.w	r7, r7, r8
 800a232:	443a      	add	r2, r7
 800a234:	f1c7 0a02 	rsb	sl, r7, #2
 800a238:	6122      	str	r2, [r4, #16]
 800a23a:	4651      	mov	r1, sl
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 fef5 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a242:	2800      	cmp	r0, #0
 800a244:	d034      	beq.n	800a2b0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a246:	2e01      	cmp	r6, #1
 800a248:	d043      	beq.n	800a2d2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800a24a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a24e:	702b      	strb	r3, [r5, #0]
 800a250:	2f00      	cmp	r7, #0
 800a252:	d03a      	beq.n	800a2ca <ucdr_deserialize_endian_uint16_t+0xce>
 800a254:	f898 3000 	ldrb.w	r3, [r8]
 800a258:	706b      	strb	r3, [r5, #1]
 800a25a:	6923      	ldr	r3, [r4, #16]
 800a25c:	68a2      	ldr	r2, [r4, #8]
 800a25e:	7da0      	ldrb	r0, [r4, #22]
 800a260:	2102      	movs	r1, #2
 800a262:	3302      	adds	r3, #2
 800a264:	1bdb      	subs	r3, r3, r7
 800a266:	4452      	add	r2, sl
 800a268:	7561      	strb	r1, [r4, #21]
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	60a2      	str	r2, [r4, #8]
 800a26e:	f080 0001 	eor.w	r0, r0, #1
 800a272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a276:	2102      	movs	r1, #2
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fed7 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a27e:	b178      	cbz	r0, 800a2a0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a280:	2e01      	cmp	r6, #1
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	d011      	beq.n	800a2aa <ucdr_deserialize_endian_uint16_t+0xae>
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	702b      	strb	r3, [r5, #0]
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	706b      	strb	r3, [r5, #1]
 800a290:	68a2      	ldr	r2, [r4, #8]
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	3202      	adds	r2, #2
 800a296:	3302      	adds	r3, #2
 800a298:	2102      	movs	r1, #2
 800a29a:	60a2      	str	r2, [r4, #8]
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	7561      	strb	r1, [r4, #21]
 800a2a0:	7da0      	ldrb	r0, [r4, #22]
 800a2a2:	f080 0001 	eor.w	r0, r0, #1
 800a2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	802b      	strh	r3, [r5, #0]
 800a2ae:	e7ef      	b.n	800a290 <ucdr_deserialize_endian_uint16_t+0x94>
 800a2b0:	68a2      	ldr	r2, [r4, #8]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	7da0      	ldrb	r0, [r4, #22]
 800a2b6:	f884 9015 	strb.w	r9, [r4, #21]
 800a2ba:	1bd2      	subs	r2, r2, r7
 800a2bc:	1bdb      	subs	r3, r3, r7
 800a2be:	60a2      	str	r2, [r4, #8]
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	f080 0001 	eor.w	r0, r0, #1
 800a2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	706b      	strb	r3, [r5, #1]
 800a2d0:	e7c3      	b.n	800a25a <ucdr_deserialize_endian_uint16_t+0x5e>
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	463a      	mov	r2, r7
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f00a f9f3 	bl	80146c2 <memcpy>
 800a2dc:	68a1      	ldr	r1, [r4, #8]
 800a2de:	4652      	mov	r2, sl
 800a2e0:	19e8      	adds	r0, r5, r7
 800a2e2:	f00a f9ee 	bl	80146c2 <memcpy>
 800a2e6:	e7b8      	b.n	800a25a <ucdr_deserialize_endian_uint16_t+0x5e>

0800a2e8 <ucdr_serialize_uint32_t>:
 800a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	9101      	str	r1, [sp, #4]
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	f000 feec 	bl	800b0d0 <ucdr_buffer_alignment>
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	7d67      	ldrb	r7, [r4, #21]
 800a2fe:	f000 ff2b 	bl	800b158 <ucdr_advance_buffer>
 800a302:	4620      	mov	r0, r4
 800a304:	2104      	movs	r1, #4
 800a306:	f000 fe85 	bl	800b014 <ucdr_check_buffer_available_for>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d139      	bne.n	800a382 <ucdr_serialize_uint32_t+0x9a>
 800a30e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800a312:	42ae      	cmp	r6, r5
 800a314:	d930      	bls.n	800a378 <ucdr_serialize_uint32_t+0x90>
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	60a6      	str	r6, [r4, #8]
 800a31a:	1b76      	subs	r6, r6, r5
 800a31c:	4432      	add	r2, r6
 800a31e:	f1c6 0804 	rsb	r8, r6, #4
 800a322:	6122      	str	r2, [r4, #16]
 800a324:	4641      	mov	r1, r8
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fe80 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d04c      	beq.n	800a3ca <ucdr_serialize_uint32_t+0xe2>
 800a330:	7d23      	ldrb	r3, [r4, #20]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d063      	beq.n	800a3fe <ucdr_serialize_uint32_t+0x116>
 800a336:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a33a:	702b      	strb	r3, [r5, #0]
 800a33c:	2e00      	cmp	r6, #0
 800a33e:	d051      	beq.n	800a3e4 <ucdr_serialize_uint32_t+0xfc>
 800a340:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a344:	706b      	strb	r3, [r5, #1]
 800a346:	2e01      	cmp	r6, #1
 800a348:	d050      	beq.n	800a3ec <ucdr_serialize_uint32_t+0x104>
 800a34a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a34e:	70ab      	strb	r3, [r5, #2]
 800a350:	2e02      	cmp	r6, #2
 800a352:	d04f      	beq.n	800a3f4 <ucdr_serialize_uint32_t+0x10c>
 800a354:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a358:	70eb      	strb	r3, [r5, #3]
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	68a2      	ldr	r2, [r4, #8]
 800a35e:	7da0      	ldrb	r0, [r4, #22]
 800a360:	3304      	adds	r3, #4
 800a362:	1b9b      	subs	r3, r3, r6
 800a364:	4442      	add	r2, r8
 800a366:	2104      	movs	r1, #4
 800a368:	f080 0001 	eor.w	r0, r0, #1
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	60a2      	str	r2, [r4, #8]
 800a370:	7561      	strb	r1, [r4, #21]
 800a372:	b002      	add	sp, #8
 800a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a378:	2104      	movs	r1, #4
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fe56 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a380:	b1d0      	cbz	r0, 800a3b8 <ucdr_serialize_uint32_t+0xd0>
 800a382:	7d23      	ldrb	r3, [r4, #20]
 800a384:	2b01      	cmp	r3, #1
 800a386:	68a3      	ldr	r3, [r4, #8]
 800a388:	d01c      	beq.n	800a3c4 <ucdr_serialize_uint32_t+0xdc>
 800a38a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a396:	705a      	strb	r2, [r3, #1]
 800a398:	68a3      	ldr	r3, [r4, #8]
 800a39a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a39e:	709a      	strb	r2, [r3, #2]
 800a3a0:	68a3      	ldr	r3, [r4, #8]
 800a3a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3a6:	70da      	strb	r2, [r3, #3]
 800a3a8:	68a2      	ldr	r2, [r4, #8]
 800a3aa:	6923      	ldr	r3, [r4, #16]
 800a3ac:	3204      	adds	r2, #4
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	2104      	movs	r1, #4
 800a3b2:	60a2      	str	r2, [r4, #8]
 800a3b4:	6123      	str	r3, [r4, #16]
 800a3b6:	7561      	strb	r1, [r4, #21]
 800a3b8:	7da0      	ldrb	r0, [r4, #22]
 800a3ba:	f080 0001 	eor.w	r0, r0, #1
 800a3be:	b002      	add	sp, #8
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	9a01      	ldr	r2, [sp, #4]
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	e7ee      	b.n	800a3a8 <ucdr_serialize_uint32_t+0xc0>
 800a3ca:	68a2      	ldr	r2, [r4, #8]
 800a3cc:	6923      	ldr	r3, [r4, #16]
 800a3ce:	7da0      	ldrb	r0, [r4, #22]
 800a3d0:	7567      	strb	r7, [r4, #21]
 800a3d2:	1b92      	subs	r2, r2, r6
 800a3d4:	1b9b      	subs	r3, r3, r6
 800a3d6:	f080 0001 	eor.w	r0, r0, #1
 800a3da:	60a2      	str	r2, [r4, #8]
 800a3dc:	6123      	str	r3, [r4, #16]
 800a3de:	b002      	add	sp, #8
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	68a3      	ldr	r3, [r4, #8]
 800a3ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	e7ad      	b.n	800a35a <ucdr_serialize_uint32_t+0x72>
 800a3fe:	4628      	mov	r0, r5
 800a400:	ad01      	add	r5, sp, #4
 800a402:	4629      	mov	r1, r5
 800a404:	4632      	mov	r2, r6
 800a406:	f00a f95c 	bl	80146c2 <memcpy>
 800a40a:	68a0      	ldr	r0, [r4, #8]
 800a40c:	4642      	mov	r2, r8
 800a40e:	19a9      	adds	r1, r5, r6
 800a410:	f00a f957 	bl	80146c2 <memcpy>
 800a414:	e7a1      	b.n	800a35a <ucdr_serialize_uint32_t+0x72>
 800a416:	bf00      	nop

0800a418 <ucdr_serialize_endian_uint32_t>:
 800a418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a41c:	b083      	sub	sp, #12
 800a41e:	460d      	mov	r5, r1
 800a420:	2104      	movs	r1, #4
 800a422:	4604      	mov	r4, r0
 800a424:	9201      	str	r2, [sp, #4]
 800a426:	f000 fe53 	bl	800b0d0 <ucdr_buffer_alignment>
 800a42a:	4601      	mov	r1, r0
 800a42c:	4620      	mov	r0, r4
 800a42e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a432:	f000 fe91 	bl	800b158 <ucdr_advance_buffer>
 800a436:	4620      	mov	r0, r4
 800a438:	2104      	movs	r1, #4
 800a43a:	f000 fdeb 	bl	800b014 <ucdr_check_buffer_available_for>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d138      	bne.n	800a4b4 <ucdr_serialize_endian_uint32_t+0x9c>
 800a442:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a446:	42b7      	cmp	r7, r6
 800a448:	d92f      	bls.n	800a4aa <ucdr_serialize_endian_uint32_t+0x92>
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	60a7      	str	r7, [r4, #8]
 800a44e:	1bbf      	subs	r7, r7, r6
 800a450:	443a      	add	r2, r7
 800a452:	f1c7 0904 	rsb	r9, r7, #4
 800a456:	6122      	str	r2, [r4, #16]
 800a458:	4649      	mov	r1, r9
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 fde6 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a460:	2800      	cmp	r0, #0
 800a462:	d04a      	beq.n	800a4fa <ucdr_serialize_endian_uint32_t+0xe2>
 800a464:	2d01      	cmp	r5, #1
 800a466:	d063      	beq.n	800a530 <ucdr_serialize_endian_uint32_t+0x118>
 800a468:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a46c:	7033      	strb	r3, [r6, #0]
 800a46e:	2f00      	cmp	r7, #0
 800a470:	d051      	beq.n	800a516 <ucdr_serialize_endian_uint32_t+0xfe>
 800a472:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a476:	7073      	strb	r3, [r6, #1]
 800a478:	2f01      	cmp	r7, #1
 800a47a:	d050      	beq.n	800a51e <ucdr_serialize_endian_uint32_t+0x106>
 800a47c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a480:	70b3      	strb	r3, [r6, #2]
 800a482:	2f02      	cmp	r7, #2
 800a484:	d04f      	beq.n	800a526 <ucdr_serialize_endian_uint32_t+0x10e>
 800a486:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a48a:	70f3      	strb	r3, [r6, #3]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	68a2      	ldr	r2, [r4, #8]
 800a490:	7da0      	ldrb	r0, [r4, #22]
 800a492:	3304      	adds	r3, #4
 800a494:	1bdb      	subs	r3, r3, r7
 800a496:	444a      	add	r2, r9
 800a498:	2104      	movs	r1, #4
 800a49a:	f080 0001 	eor.w	r0, r0, #1
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	60a2      	str	r2, [r4, #8]
 800a4a2:	7561      	strb	r1, [r4, #21]
 800a4a4:	b003      	add	sp, #12
 800a4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	2104      	movs	r1, #4
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fdbd 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a4b2:	b1c8      	cbz	r0, 800a4e8 <ucdr_serialize_endian_uint32_t+0xd0>
 800a4b4:	2d01      	cmp	r5, #1
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	d01c      	beq.n	800a4f4 <ucdr_serialize_endian_uint32_t+0xdc>
 800a4ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a4be:	701a      	strb	r2, [r3, #0]
 800a4c0:	68a3      	ldr	r3, [r4, #8]
 800a4c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4c6:	705a      	strb	r2, [r3, #1]
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a4ce:	709a      	strb	r2, [r3, #2]
 800a4d0:	68a3      	ldr	r3, [r4, #8]
 800a4d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a4d6:	70da      	strb	r2, [r3, #3]
 800a4d8:	68a2      	ldr	r2, [r4, #8]
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	3204      	adds	r2, #4
 800a4de:	3304      	adds	r3, #4
 800a4e0:	2104      	movs	r1, #4
 800a4e2:	60a2      	str	r2, [r4, #8]
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	7561      	strb	r1, [r4, #21]
 800a4e8:	7da0      	ldrb	r0, [r4, #22]
 800a4ea:	f080 0001 	eor.w	r0, r0, #1
 800a4ee:	b003      	add	sp, #12
 800a4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f4:	9a01      	ldr	r2, [sp, #4]
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	e7ee      	b.n	800a4d8 <ucdr_serialize_endian_uint32_t+0xc0>
 800a4fa:	68a2      	ldr	r2, [r4, #8]
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	7da0      	ldrb	r0, [r4, #22]
 800a500:	f884 8015 	strb.w	r8, [r4, #21]
 800a504:	1bd2      	subs	r2, r2, r7
 800a506:	1bdb      	subs	r3, r3, r7
 800a508:	f080 0001 	eor.w	r0, r0, #1
 800a50c:	60a2      	str	r2, [r4, #8]
 800a50e:	6123      	str	r3, [r4, #16]
 800a510:	b003      	add	sp, #12
 800a512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a516:	68a3      	ldr	r3, [r4, #8]
 800a518:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	68a3      	ldr	r3, [r4, #8]
 800a528:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a52c:	701a      	strb	r2, [r3, #0]
 800a52e:	e7ad      	b.n	800a48c <ucdr_serialize_endian_uint32_t+0x74>
 800a530:	ad01      	add	r5, sp, #4
 800a532:	4629      	mov	r1, r5
 800a534:	463a      	mov	r2, r7
 800a536:	4630      	mov	r0, r6
 800a538:	f00a f8c3 	bl	80146c2 <memcpy>
 800a53c:	68a0      	ldr	r0, [r4, #8]
 800a53e:	464a      	mov	r2, r9
 800a540:	19e9      	adds	r1, r5, r7
 800a542:	f00a f8be 	bl	80146c2 <memcpy>
 800a546:	e7a1      	b.n	800a48c <ucdr_serialize_endian_uint32_t+0x74>

0800a548 <ucdr_deserialize_uint32_t>:
 800a548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a54c:	460d      	mov	r5, r1
 800a54e:	2104      	movs	r1, #4
 800a550:	4604      	mov	r4, r0
 800a552:	f000 fdbd 	bl	800b0d0 <ucdr_buffer_alignment>
 800a556:	4601      	mov	r1, r0
 800a558:	4620      	mov	r0, r4
 800a55a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a55e:	f000 fdfb 	bl	800b158 <ucdr_advance_buffer>
 800a562:	4620      	mov	r0, r4
 800a564:	2104      	movs	r1, #4
 800a566:	f000 fd55 	bl	800b014 <ucdr_check_buffer_available_for>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d138      	bne.n	800a5e0 <ucdr_deserialize_uint32_t+0x98>
 800a56e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a572:	42b7      	cmp	r7, r6
 800a574:	d92f      	bls.n	800a5d6 <ucdr_deserialize_uint32_t+0x8e>
 800a576:	6922      	ldr	r2, [r4, #16]
 800a578:	60a7      	str	r7, [r4, #8]
 800a57a:	1bbf      	subs	r7, r7, r6
 800a57c:	443a      	add	r2, r7
 800a57e:	f1c7 0904 	rsb	r9, r7, #4
 800a582:	6122      	str	r2, [r4, #16]
 800a584:	4649      	mov	r1, r9
 800a586:	4620      	mov	r0, r4
 800a588:	f000 fd50 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d046      	beq.n	800a61e <ucdr_deserialize_uint32_t+0xd6>
 800a590:	7d23      	ldrb	r3, [r4, #20]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d05c      	beq.n	800a650 <ucdr_deserialize_uint32_t+0x108>
 800a596:	78f3      	ldrb	r3, [r6, #3]
 800a598:	702b      	strb	r3, [r5, #0]
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	d04c      	beq.n	800a638 <ucdr_deserialize_uint32_t+0xf0>
 800a59e:	78b3      	ldrb	r3, [r6, #2]
 800a5a0:	706b      	strb	r3, [r5, #1]
 800a5a2:	2f01      	cmp	r7, #1
 800a5a4:	f105 0302 	add.w	r3, r5, #2
 800a5a8:	d04a      	beq.n	800a640 <ucdr_deserialize_uint32_t+0xf8>
 800a5aa:	7873      	ldrb	r3, [r6, #1]
 800a5ac:	70ab      	strb	r3, [r5, #2]
 800a5ae:	2f02      	cmp	r7, #2
 800a5b0:	f105 0303 	add.w	r3, r5, #3
 800a5b4:	d048      	beq.n	800a648 <ucdr_deserialize_uint32_t+0x100>
 800a5b6:	7833      	ldrb	r3, [r6, #0]
 800a5b8:	70eb      	strb	r3, [r5, #3]
 800a5ba:	6923      	ldr	r3, [r4, #16]
 800a5bc:	68a2      	ldr	r2, [r4, #8]
 800a5be:	7da0      	ldrb	r0, [r4, #22]
 800a5c0:	2104      	movs	r1, #4
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	1bdb      	subs	r3, r3, r7
 800a5c6:	444a      	add	r2, r9
 800a5c8:	7561      	strb	r1, [r4, #21]
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	60a2      	str	r2, [r4, #8]
 800a5ce:	f080 0001 	eor.w	r0, r0, #1
 800a5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	2104      	movs	r1, #4
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fd27 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a5de:	b1b0      	cbz	r0, 800a60e <ucdr_deserialize_uint32_t+0xc6>
 800a5e0:	7d23      	ldrb	r3, [r4, #20]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	d017      	beq.n	800a618 <ucdr_deserialize_uint32_t+0xd0>
 800a5e8:	78db      	ldrb	r3, [r3, #3]
 800a5ea:	702b      	strb	r3, [r5, #0]
 800a5ec:	68a3      	ldr	r3, [r4, #8]
 800a5ee:	789b      	ldrb	r3, [r3, #2]
 800a5f0:	706b      	strb	r3, [r5, #1]
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	70ab      	strb	r3, [r5, #2]
 800a5f8:	68a3      	ldr	r3, [r4, #8]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	70eb      	strb	r3, [r5, #3]
 800a5fe:	68a2      	ldr	r2, [r4, #8]
 800a600:	6923      	ldr	r3, [r4, #16]
 800a602:	3204      	adds	r2, #4
 800a604:	3304      	adds	r3, #4
 800a606:	2104      	movs	r1, #4
 800a608:	60a2      	str	r2, [r4, #8]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	7561      	strb	r1, [r4, #21]
 800a60e:	7da0      	ldrb	r0, [r4, #22]
 800a610:	f080 0001 	eor.w	r0, r0, #1
 800a614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	e7ef      	b.n	800a5fe <ucdr_deserialize_uint32_t+0xb6>
 800a61e:	68a2      	ldr	r2, [r4, #8]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	7da0      	ldrb	r0, [r4, #22]
 800a624:	f884 8015 	strb.w	r8, [r4, #21]
 800a628:	1bd2      	subs	r2, r2, r7
 800a62a:	1bdb      	subs	r3, r3, r7
 800a62c:	60a2      	str	r2, [r4, #8]
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	f080 0001 	eor.w	r0, r0, #1
 800a634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a638:	68a3      	ldr	r3, [r4, #8]
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	706b      	strb	r3, [r5, #1]
 800a63e:	1cab      	adds	r3, r5, #2
 800a640:	68a2      	ldr	r2, [r4, #8]
 800a642:	7852      	ldrb	r2, [r2, #1]
 800a644:	f803 2b01 	strb.w	r2, [r3], #1
 800a648:	68a2      	ldr	r2, [r4, #8]
 800a64a:	7812      	ldrb	r2, [r2, #0]
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e7b4      	b.n	800a5ba <ucdr_deserialize_uint32_t+0x72>
 800a650:	4631      	mov	r1, r6
 800a652:	463a      	mov	r2, r7
 800a654:	4628      	mov	r0, r5
 800a656:	f00a f834 	bl	80146c2 <memcpy>
 800a65a:	68a1      	ldr	r1, [r4, #8]
 800a65c:	464a      	mov	r2, r9
 800a65e:	19e8      	adds	r0, r5, r7
 800a660:	f00a f82f 	bl	80146c2 <memcpy>
 800a664:	e7a9      	b.n	800a5ba <ucdr_deserialize_uint32_t+0x72>
 800a666:	bf00      	nop

0800a668 <ucdr_deserialize_endian_uint32_t>:
 800a668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	460e      	mov	r6, r1
 800a66e:	2104      	movs	r1, #4
 800a670:	4604      	mov	r4, r0
 800a672:	4615      	mov	r5, r2
 800a674:	f000 fd2c 	bl	800b0d0 <ucdr_buffer_alignment>
 800a678:	4601      	mov	r1, r0
 800a67a:	4620      	mov	r0, r4
 800a67c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a680:	f000 fd6a 	bl	800b158 <ucdr_advance_buffer>
 800a684:	4620      	mov	r0, r4
 800a686:	2104      	movs	r1, #4
 800a688:	f000 fcc4 	bl	800b014 <ucdr_check_buffer_available_for>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d13c      	bne.n	800a70a <ucdr_deserialize_endian_uint32_t+0xa2>
 800a690:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a694:	42bb      	cmp	r3, r7
 800a696:	d933      	bls.n	800a700 <ucdr_deserialize_endian_uint32_t+0x98>
 800a698:	6922      	ldr	r2, [r4, #16]
 800a69a:	60a3      	str	r3, [r4, #8]
 800a69c:	eba3 0807 	sub.w	r8, r3, r7
 800a6a0:	4442      	add	r2, r8
 800a6a2:	f1c8 0a04 	rsb	sl, r8, #4
 800a6a6:	6122      	str	r2, [r4, #16]
 800a6a8:	4651      	mov	r1, sl
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 fcbe 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d048      	beq.n	800a746 <ucdr_deserialize_endian_uint32_t+0xde>
 800a6b4:	2e01      	cmp	r6, #1
 800a6b6:	d061      	beq.n	800a77c <ucdr_deserialize_endian_uint32_t+0x114>
 800a6b8:	78fb      	ldrb	r3, [r7, #3]
 800a6ba:	702b      	strb	r3, [r5, #0]
 800a6bc:	f1b8 0f00 	cmp.w	r8, #0
 800a6c0:	d050      	beq.n	800a764 <ucdr_deserialize_endian_uint32_t+0xfc>
 800a6c2:	78bb      	ldrb	r3, [r7, #2]
 800a6c4:	706b      	strb	r3, [r5, #1]
 800a6c6:	f1b8 0f01 	cmp.w	r8, #1
 800a6ca:	f105 0302 	add.w	r3, r5, #2
 800a6ce:	d04d      	beq.n	800a76c <ucdr_deserialize_endian_uint32_t+0x104>
 800a6d0:	787b      	ldrb	r3, [r7, #1]
 800a6d2:	70ab      	strb	r3, [r5, #2]
 800a6d4:	f1b8 0f02 	cmp.w	r8, #2
 800a6d8:	f105 0303 	add.w	r3, r5, #3
 800a6dc:	d04a      	beq.n	800a774 <ucdr_deserialize_endian_uint32_t+0x10c>
 800a6de:	783b      	ldrb	r3, [r7, #0]
 800a6e0:	70eb      	strb	r3, [r5, #3]
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	68a2      	ldr	r2, [r4, #8]
 800a6e6:	7da0      	ldrb	r0, [r4, #22]
 800a6e8:	2104      	movs	r1, #4
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	eba3 0308 	sub.w	r3, r3, r8
 800a6f0:	4452      	add	r2, sl
 800a6f2:	7561      	strb	r1, [r4, #21]
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	60a2      	str	r2, [r4, #8]
 800a6f8:	f080 0001 	eor.w	r0, r0, #1
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	2104      	movs	r1, #4
 800a702:	4620      	mov	r0, r4
 800a704:	f000 fc92 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a708:	b1a8      	cbz	r0, 800a736 <ucdr_deserialize_endian_uint32_t+0xce>
 800a70a:	2e01      	cmp	r6, #1
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	d017      	beq.n	800a740 <ucdr_deserialize_endian_uint32_t+0xd8>
 800a710:	78db      	ldrb	r3, [r3, #3]
 800a712:	702b      	strb	r3, [r5, #0]
 800a714:	68a3      	ldr	r3, [r4, #8]
 800a716:	789b      	ldrb	r3, [r3, #2]
 800a718:	706b      	strb	r3, [r5, #1]
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	70ab      	strb	r3, [r5, #2]
 800a720:	68a3      	ldr	r3, [r4, #8]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	70eb      	strb	r3, [r5, #3]
 800a726:	68a2      	ldr	r2, [r4, #8]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	3204      	adds	r2, #4
 800a72c:	3304      	adds	r3, #4
 800a72e:	2104      	movs	r1, #4
 800a730:	60a2      	str	r2, [r4, #8]
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	7561      	strb	r1, [r4, #21]
 800a736:	7da0      	ldrb	r0, [r4, #22]
 800a738:	f080 0001 	eor.w	r0, r0, #1
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	e7ef      	b.n	800a726 <ucdr_deserialize_endian_uint32_t+0xbe>
 800a746:	68a2      	ldr	r2, [r4, #8]
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	7da0      	ldrb	r0, [r4, #22]
 800a74c:	f884 9015 	strb.w	r9, [r4, #21]
 800a750:	eba2 0208 	sub.w	r2, r2, r8
 800a754:	eba3 0308 	sub.w	r3, r3, r8
 800a758:	60a2      	str	r2, [r4, #8]
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	f080 0001 	eor.w	r0, r0, #1
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	68a3      	ldr	r3, [r4, #8]
 800a766:	789b      	ldrb	r3, [r3, #2]
 800a768:	706b      	strb	r3, [r5, #1]
 800a76a:	1cab      	adds	r3, r5, #2
 800a76c:	68a2      	ldr	r2, [r4, #8]
 800a76e:	7852      	ldrb	r2, [r2, #1]
 800a770:	f803 2b01 	strb.w	r2, [r3], #1
 800a774:	68a2      	ldr	r2, [r4, #8]
 800a776:	7812      	ldrb	r2, [r2, #0]
 800a778:	701a      	strb	r2, [r3, #0]
 800a77a:	e7b2      	b.n	800a6e2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800a77c:	4639      	mov	r1, r7
 800a77e:	4642      	mov	r2, r8
 800a780:	4628      	mov	r0, r5
 800a782:	f009 ff9e 	bl	80146c2 <memcpy>
 800a786:	68a1      	ldr	r1, [r4, #8]
 800a788:	4652      	mov	r2, sl
 800a78a:	eb05 0008 	add.w	r0, r5, r8
 800a78e:	f009 ff98 	bl	80146c2 <memcpy>
 800a792:	e7a6      	b.n	800a6e2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800a794 <ucdr_serialize_uint64_t>:
 800a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a798:	2108      	movs	r1, #8
 800a79a:	b082      	sub	sp, #8
 800a79c:	4604      	mov	r4, r0
 800a79e:	e9cd 2300 	strd	r2, r3, [sp]
 800a7a2:	f000 fc95 	bl	800b0d0 <ucdr_buffer_alignment>
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	7d67      	ldrb	r7, [r4, #21]
 800a7ac:	f000 fcd4 	bl	800b158 <ucdr_advance_buffer>
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	2108      	movs	r1, #8
 800a7b4:	f000 fc2e 	bl	800b014 <ucdr_check_buffer_available_for>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d14e      	bne.n	800a85a <ucdr_serialize_uint64_t+0xc6>
 800a7bc:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a7c0:	42b5      	cmp	r5, r6
 800a7c2:	d945      	bls.n	800a850 <ucdr_serialize_uint64_t+0xbc>
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	60a5      	str	r5, [r4, #8]
 800a7c8:	1bad      	subs	r5, r5, r6
 800a7ca:	442b      	add	r3, r5
 800a7cc:	f1c5 0808 	rsb	r8, r5, #8
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 fc29 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d074      	beq.n	800a8c8 <ucdr_serialize_uint64_t+0x134>
 800a7de:	7d23      	ldrb	r3, [r4, #20]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	f000 809b 	beq.w	800a91c <ucdr_serialize_uint64_t+0x188>
 800a7e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a7ea:	7033      	strb	r3, [r6, #0]
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	d078      	beq.n	800a8e2 <ucdr_serialize_uint64_t+0x14e>
 800a7f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a7f4:	7073      	strb	r3, [r6, #1]
 800a7f6:	2d01      	cmp	r5, #1
 800a7f8:	d077      	beq.n	800a8ea <ucdr_serialize_uint64_t+0x156>
 800a7fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a7fe:	70b3      	strb	r3, [r6, #2]
 800a800:	2d02      	cmp	r5, #2
 800a802:	d076      	beq.n	800a8f2 <ucdr_serialize_uint64_t+0x15e>
 800a804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a808:	70f3      	strb	r3, [r6, #3]
 800a80a:	2d03      	cmp	r5, #3
 800a80c:	d075      	beq.n	800a8fa <ucdr_serialize_uint64_t+0x166>
 800a80e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a812:	7133      	strb	r3, [r6, #4]
 800a814:	2d04      	cmp	r5, #4
 800a816:	d074      	beq.n	800a902 <ucdr_serialize_uint64_t+0x16e>
 800a818:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a81c:	7173      	strb	r3, [r6, #5]
 800a81e:	2d05      	cmp	r5, #5
 800a820:	d073      	beq.n	800a90a <ucdr_serialize_uint64_t+0x176>
 800a822:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a826:	71b3      	strb	r3, [r6, #6]
 800a828:	2d06      	cmp	r5, #6
 800a82a:	d072      	beq.n	800a912 <ucdr_serialize_uint64_t+0x17e>
 800a82c:	f89d 3000 	ldrb.w	r3, [sp]
 800a830:	71f3      	strb	r3, [r6, #7]
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	68a2      	ldr	r2, [r4, #8]
 800a836:	7da0      	ldrb	r0, [r4, #22]
 800a838:	3308      	adds	r3, #8
 800a83a:	1b5d      	subs	r5, r3, r5
 800a83c:	4442      	add	r2, r8
 800a83e:	2308      	movs	r3, #8
 800a840:	f080 0001 	eor.w	r0, r0, #1
 800a844:	6125      	str	r5, [r4, #16]
 800a846:	60a2      	str	r2, [r4, #8]
 800a848:	7563      	strb	r3, [r4, #21]
 800a84a:	b002      	add	sp, #8
 800a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a850:	2108      	movs	r1, #8
 800a852:	4620      	mov	r0, r4
 800a854:	f000 fbea 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a858:	b350      	cbz	r0, 800a8b0 <ucdr_serialize_uint64_t+0x11c>
 800a85a:	7d23      	ldrb	r3, [r4, #20]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d02d      	beq.n	800a8bc <ucdr_serialize_uint64_t+0x128>
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a866:	701a      	strb	r2, [r3, #0]
 800a868:	68a3      	ldr	r3, [r4, #8]
 800a86a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a86e:	705a      	strb	r2, [r3, #1]
 800a870:	68a3      	ldr	r3, [r4, #8]
 800a872:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a876:	709a      	strb	r2, [r3, #2]
 800a878:	68a3      	ldr	r3, [r4, #8]
 800a87a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a87e:	70da      	strb	r2, [r3, #3]
 800a880:	68a3      	ldr	r3, [r4, #8]
 800a882:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a886:	711a      	strb	r2, [r3, #4]
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a88e:	715a      	strb	r2, [r3, #5]
 800a890:	68a3      	ldr	r3, [r4, #8]
 800a892:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a896:	719a      	strb	r2, [r3, #6]
 800a898:	68a3      	ldr	r3, [r4, #8]
 800a89a:	f89d 2000 	ldrb.w	r2, [sp]
 800a89e:	71da      	strb	r2, [r3, #7]
 800a8a0:	68a2      	ldr	r2, [r4, #8]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	3208      	adds	r2, #8
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	2108      	movs	r1, #8
 800a8aa:	60a2      	str	r2, [r4, #8]
 800a8ac:	6123      	str	r3, [r4, #16]
 800a8ae:	7561      	strb	r1, [r4, #21]
 800a8b0:	7da0      	ldrb	r0, [r4, #22]
 800a8b2:	f080 0001 	eor.w	r0, r0, #1
 800a8b6:	b002      	add	sp, #8
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	466b      	mov	r3, sp
 800a8be:	cb03      	ldmia	r3!, {r0, r1}
 800a8c0:	68a3      	ldr	r3, [r4, #8]
 800a8c2:	6018      	str	r0, [r3, #0]
 800a8c4:	6059      	str	r1, [r3, #4]
 800a8c6:	e7eb      	b.n	800a8a0 <ucdr_serialize_uint64_t+0x10c>
 800a8c8:	68a2      	ldr	r2, [r4, #8]
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	7da0      	ldrb	r0, [r4, #22]
 800a8ce:	7567      	strb	r7, [r4, #21]
 800a8d0:	1b52      	subs	r2, r2, r5
 800a8d2:	f080 0001 	eor.w	r0, r0, #1
 800a8d6:	1b5d      	subs	r5, r3, r5
 800a8d8:	60a2      	str	r2, [r4, #8]
 800a8da:	6125      	str	r5, [r4, #16]
 800a8dc:	b002      	add	sp, #8
 800a8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e2:	68a3      	ldr	r3, [r4, #8]
 800a8e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a8f0:	701a      	strb	r2, [r3, #0]
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	f89d 2000 	ldrb.w	r2, [sp]
 800a918:	701a      	strb	r2, [r3, #0]
 800a91a:	e78a      	b.n	800a832 <ucdr_serialize_uint64_t+0x9e>
 800a91c:	4630      	mov	r0, r6
 800a91e:	466e      	mov	r6, sp
 800a920:	4631      	mov	r1, r6
 800a922:	462a      	mov	r2, r5
 800a924:	f009 fecd 	bl	80146c2 <memcpy>
 800a928:	68a0      	ldr	r0, [r4, #8]
 800a92a:	4642      	mov	r2, r8
 800a92c:	1971      	adds	r1, r6, r5
 800a92e:	f009 fec8 	bl	80146c2 <memcpy>
 800a932:	e77e      	b.n	800a832 <ucdr_serialize_uint64_t+0x9e>

0800a934 <ucdr_serialize_int8_t>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	460d      	mov	r5, r1
 800a938:	2101      	movs	r1, #1
 800a93a:	4604      	mov	r4, r0
 800a93c:	f000 fb76 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a940:	b148      	cbz	r0, 800a956 <ucdr_serialize_int8_t+0x22>
 800a942:	68a3      	ldr	r3, [r4, #8]
 800a944:	701d      	strb	r5, [r3, #0]
 800a946:	68a2      	ldr	r2, [r4, #8]
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	3201      	adds	r2, #1
 800a94c:	3301      	adds	r3, #1
 800a94e:	2101      	movs	r1, #1
 800a950:	60a2      	str	r2, [r4, #8]
 800a952:	6123      	str	r3, [r4, #16]
 800a954:	7561      	strb	r1, [r4, #21]
 800a956:	7da0      	ldrb	r0, [r4, #22]
 800a958:	f080 0001 	eor.w	r0, r0, #1
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop

0800a960 <ucdr_deserialize_int8_t>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	460d      	mov	r5, r1
 800a964:	2101      	movs	r1, #1
 800a966:	4604      	mov	r4, r0
 800a968:	f000 fb60 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a96c:	b150      	cbz	r0, 800a984 <ucdr_deserialize_int8_t+0x24>
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	702b      	strb	r3, [r5, #0]
 800a974:	68a2      	ldr	r2, [r4, #8]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	3201      	adds	r2, #1
 800a97a:	3301      	adds	r3, #1
 800a97c:	2101      	movs	r1, #1
 800a97e:	60a2      	str	r2, [r4, #8]
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	7561      	strb	r1, [r4, #21]
 800a984:	7da0      	ldrb	r0, [r4, #22]
 800a986:	f080 0001 	eor.w	r0, r0, #1
 800a98a:	bd38      	pop	{r3, r4, r5, pc}

0800a98c <ucdr_serialize_int16_t>:
 800a98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	460b      	mov	r3, r1
 800a994:	2102      	movs	r1, #2
 800a996:	4604      	mov	r4, r0
 800a998:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a99c:	f000 fb98 	bl	800b0d0 <ucdr_buffer_alignment>
 800a9a0:	4601      	mov	r1, r0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	7d67      	ldrb	r7, [r4, #21]
 800a9a6:	f000 fbd7 	bl	800b158 <ucdr_advance_buffer>
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	2102      	movs	r1, #2
 800a9ae:	f000 fb31 	bl	800b014 <ucdr_check_buffer_available_for>
 800a9b2:	bb78      	cbnz	r0, 800aa14 <ucdr_serialize_int16_t+0x88>
 800a9b4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a9b8:	42b5      	cmp	r5, r6
 800a9ba:	d926      	bls.n	800aa0a <ucdr_serialize_int16_t+0x7e>
 800a9bc:	6922      	ldr	r2, [r4, #16]
 800a9be:	60a5      	str	r5, [r4, #8]
 800a9c0:	1bad      	subs	r5, r5, r6
 800a9c2:	442a      	add	r2, r5
 800a9c4:	f1c5 0802 	rsb	r8, r5, #2
 800a9c8:	6122      	str	r2, [r4, #16]
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fb2d 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d03b      	beq.n	800aa4e <ucdr_serialize_int16_t+0xc2>
 800a9d6:	7d23      	ldrb	r3, [r4, #20]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d04a      	beq.n	800aa72 <ucdr_serialize_int16_t+0xe6>
 800a9dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9e0:	7033      	strb	r3, [r6, #0]
 800a9e2:	2d00      	cmp	r5, #0
 800a9e4:	d040      	beq.n	800aa68 <ucdr_serialize_int16_t+0xdc>
 800a9e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9ea:	7073      	strb	r3, [r6, #1]
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	68a2      	ldr	r2, [r4, #8]
 800a9f0:	7da0      	ldrb	r0, [r4, #22]
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	1b5b      	subs	r3, r3, r5
 800a9f6:	4442      	add	r2, r8
 800a9f8:	2102      	movs	r1, #2
 800a9fa:	f080 0001 	eor.w	r0, r0, #1
 800a9fe:	6123      	str	r3, [r4, #16]
 800aa00:	60a2      	str	r2, [r4, #8]
 800aa02:	7561      	strb	r1, [r4, #21]
 800aa04:	b002      	add	sp, #8
 800aa06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f000 fb0d 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800aa12:	b190      	cbz	r0, 800aa3a <ucdr_serialize_int16_t+0xae>
 800aa14:	7d23      	ldrb	r3, [r4, #20]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	68a3      	ldr	r3, [r4, #8]
 800aa1a:	d014      	beq.n	800aa46 <ucdr_serialize_int16_t+0xba>
 800aa1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aa20:	701a      	strb	r2, [r3, #0]
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa28:	705a      	strb	r2, [r3, #1]
 800aa2a:	68a2      	ldr	r2, [r4, #8]
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	3202      	adds	r2, #2
 800aa30:	3302      	adds	r3, #2
 800aa32:	2102      	movs	r1, #2
 800aa34:	60a2      	str	r2, [r4, #8]
 800aa36:	6123      	str	r3, [r4, #16]
 800aa38:	7561      	strb	r1, [r4, #21]
 800aa3a:	7da0      	ldrb	r0, [r4, #22]
 800aa3c:	f080 0001 	eor.w	r0, r0, #1
 800aa40:	b002      	add	sp, #8
 800aa42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa4a:	801a      	strh	r2, [r3, #0]
 800aa4c:	e7ed      	b.n	800aa2a <ucdr_serialize_int16_t+0x9e>
 800aa4e:	68a2      	ldr	r2, [r4, #8]
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	7da0      	ldrb	r0, [r4, #22]
 800aa54:	7567      	strb	r7, [r4, #21]
 800aa56:	1b52      	subs	r2, r2, r5
 800aa58:	1b5b      	subs	r3, r3, r5
 800aa5a:	f080 0001 	eor.w	r0, r0, #1
 800aa5e:	60a2      	str	r2, [r4, #8]
 800aa60:	6123      	str	r3, [r4, #16]
 800aa62:	b002      	add	sp, #8
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	68a3      	ldr	r3, [r4, #8]
 800aa6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	e7bc      	b.n	800a9ec <ucdr_serialize_int16_t+0x60>
 800aa72:	4630      	mov	r0, r6
 800aa74:	f10d 0606 	add.w	r6, sp, #6
 800aa78:	4631      	mov	r1, r6
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	f009 fe21 	bl	80146c2 <memcpy>
 800aa80:	68a0      	ldr	r0, [r4, #8]
 800aa82:	4642      	mov	r2, r8
 800aa84:	1971      	adds	r1, r6, r5
 800aa86:	f009 fe1c 	bl	80146c2 <memcpy>
 800aa8a:	e7af      	b.n	800a9ec <ucdr_serialize_int16_t+0x60>

0800aa8c <ucdr_deserialize_int16_t>:
 800aa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa90:	460d      	mov	r5, r1
 800aa92:	2102      	movs	r1, #2
 800aa94:	4604      	mov	r4, r0
 800aa96:	f000 fb1b 	bl	800b0d0 <ucdr_buffer_alignment>
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aaa2:	f000 fb59 	bl	800b158 <ucdr_advance_buffer>
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	2102      	movs	r1, #2
 800aaaa:	f000 fab3 	bl	800b014 <ucdr_check_buffer_available_for>
 800aaae:	bb60      	cbnz	r0, 800ab0a <ucdr_deserialize_int16_t+0x7e>
 800aab0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aab4:	42be      	cmp	r6, r7
 800aab6:	d923      	bls.n	800ab00 <ucdr_deserialize_int16_t+0x74>
 800aab8:	6922      	ldr	r2, [r4, #16]
 800aaba:	60a6      	str	r6, [r4, #8]
 800aabc:	1bf6      	subs	r6, r6, r7
 800aabe:	4432      	add	r2, r6
 800aac0:	f1c6 0902 	rsb	r9, r6, #2
 800aac4:	6122      	str	r2, [r4, #16]
 800aac6:	4649      	mov	r1, r9
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 faaf 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d034      	beq.n	800ab3c <ucdr_deserialize_int16_t+0xb0>
 800aad2:	7d23      	ldrb	r3, [r4, #20]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d042      	beq.n	800ab5e <ucdr_deserialize_int16_t+0xd2>
 800aad8:	787b      	ldrb	r3, [r7, #1]
 800aada:	702b      	strb	r3, [r5, #0]
 800aadc:	2e00      	cmp	r6, #0
 800aade:	d03a      	beq.n	800ab56 <ucdr_deserialize_int16_t+0xca>
 800aae0:	783b      	ldrb	r3, [r7, #0]
 800aae2:	706b      	strb	r3, [r5, #1]
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	68a2      	ldr	r2, [r4, #8]
 800aae8:	7da0      	ldrb	r0, [r4, #22]
 800aaea:	2102      	movs	r1, #2
 800aaec:	3302      	adds	r3, #2
 800aaee:	1b9b      	subs	r3, r3, r6
 800aaf0:	444a      	add	r2, r9
 800aaf2:	7561      	strb	r1, [r4, #21]
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	60a2      	str	r2, [r4, #8]
 800aaf8:	f080 0001 	eor.w	r0, r0, #1
 800aafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab00:	2102      	movs	r1, #2
 800ab02:	4620      	mov	r0, r4
 800ab04:	f000 fa92 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800ab08:	b180      	cbz	r0, 800ab2c <ucdr_deserialize_int16_t+0xa0>
 800ab0a:	7d23      	ldrb	r3, [r4, #20]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	68a3      	ldr	r3, [r4, #8]
 800ab10:	d011      	beq.n	800ab36 <ucdr_deserialize_int16_t+0xaa>
 800ab12:	785b      	ldrb	r3, [r3, #1]
 800ab14:	702b      	strb	r3, [r5, #0]
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	706b      	strb	r3, [r5, #1]
 800ab1c:	68a2      	ldr	r2, [r4, #8]
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	3202      	adds	r2, #2
 800ab22:	3302      	adds	r3, #2
 800ab24:	2102      	movs	r1, #2
 800ab26:	60a2      	str	r2, [r4, #8]
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	7561      	strb	r1, [r4, #21]
 800ab2c:	7da0      	ldrb	r0, [r4, #22]
 800ab2e:	f080 0001 	eor.w	r0, r0, #1
 800ab32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	802b      	strh	r3, [r5, #0]
 800ab3a:	e7ef      	b.n	800ab1c <ucdr_deserialize_int16_t+0x90>
 800ab3c:	68a2      	ldr	r2, [r4, #8]
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	7da0      	ldrb	r0, [r4, #22]
 800ab42:	f884 8015 	strb.w	r8, [r4, #21]
 800ab46:	1b92      	subs	r2, r2, r6
 800ab48:	1b9b      	subs	r3, r3, r6
 800ab4a:	60a2      	str	r2, [r4, #8]
 800ab4c:	6123      	str	r3, [r4, #16]
 800ab4e:	f080 0001 	eor.w	r0, r0, #1
 800ab52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	706b      	strb	r3, [r5, #1]
 800ab5c:	e7c2      	b.n	800aae4 <ucdr_deserialize_int16_t+0x58>
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4632      	mov	r2, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	f009 fdad 	bl	80146c2 <memcpy>
 800ab68:	68a1      	ldr	r1, [r4, #8]
 800ab6a:	464a      	mov	r2, r9
 800ab6c:	19a8      	adds	r0, r5, r6
 800ab6e:	f009 fda8 	bl	80146c2 <memcpy>
 800ab72:	e7b7      	b.n	800aae4 <ucdr_deserialize_int16_t+0x58>

0800ab74 <ucdr_serialize_int32_t>:
 800ab74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab78:	b082      	sub	sp, #8
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	9101      	str	r1, [sp, #4]
 800ab7e:	2104      	movs	r1, #4
 800ab80:	f000 faa6 	bl	800b0d0 <ucdr_buffer_alignment>
 800ab84:	4601      	mov	r1, r0
 800ab86:	4620      	mov	r0, r4
 800ab88:	7d67      	ldrb	r7, [r4, #21]
 800ab8a:	f000 fae5 	bl	800b158 <ucdr_advance_buffer>
 800ab8e:	4620      	mov	r0, r4
 800ab90:	2104      	movs	r1, #4
 800ab92:	f000 fa3f 	bl	800b014 <ucdr_check_buffer_available_for>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d139      	bne.n	800ac0e <ucdr_serialize_int32_t+0x9a>
 800ab9a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ab9e:	42ae      	cmp	r6, r5
 800aba0:	d930      	bls.n	800ac04 <ucdr_serialize_int32_t+0x90>
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	60a6      	str	r6, [r4, #8]
 800aba6:	1b76      	subs	r6, r6, r5
 800aba8:	4432      	add	r2, r6
 800abaa:	f1c6 0804 	rsb	r8, r6, #4
 800abae:	6122      	str	r2, [r4, #16]
 800abb0:	4641      	mov	r1, r8
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fa3a 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d04c      	beq.n	800ac56 <ucdr_serialize_int32_t+0xe2>
 800abbc:	7d23      	ldrb	r3, [r4, #20]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d063      	beq.n	800ac8a <ucdr_serialize_int32_t+0x116>
 800abc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800abc6:	702b      	strb	r3, [r5, #0]
 800abc8:	2e00      	cmp	r6, #0
 800abca:	d051      	beq.n	800ac70 <ucdr_serialize_int32_t+0xfc>
 800abcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800abd0:	706b      	strb	r3, [r5, #1]
 800abd2:	2e01      	cmp	r6, #1
 800abd4:	d050      	beq.n	800ac78 <ucdr_serialize_int32_t+0x104>
 800abd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800abda:	70ab      	strb	r3, [r5, #2]
 800abdc:	2e02      	cmp	r6, #2
 800abde:	d04f      	beq.n	800ac80 <ucdr_serialize_int32_t+0x10c>
 800abe0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800abe4:	70eb      	strb	r3, [r5, #3]
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	68a2      	ldr	r2, [r4, #8]
 800abea:	7da0      	ldrb	r0, [r4, #22]
 800abec:	3304      	adds	r3, #4
 800abee:	1b9b      	subs	r3, r3, r6
 800abf0:	4442      	add	r2, r8
 800abf2:	2104      	movs	r1, #4
 800abf4:	f080 0001 	eor.w	r0, r0, #1
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	60a2      	str	r2, [r4, #8]
 800abfc:	7561      	strb	r1, [r4, #21]
 800abfe:	b002      	add	sp, #8
 800ac00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac04:	2104      	movs	r1, #4
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 fa10 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800ac0c:	b1d0      	cbz	r0, 800ac44 <ucdr_serialize_int32_t+0xd0>
 800ac0e:	7d23      	ldrb	r3, [r4, #20]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	d01c      	beq.n	800ac50 <ucdr_serialize_int32_t+0xdc>
 800ac16:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	68a3      	ldr	r3, [r4, #8]
 800ac1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac22:	705a      	strb	r2, [r3, #1]
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac2a:	709a      	strb	r2, [r3, #2]
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac32:	70da      	strb	r2, [r3, #3]
 800ac34:	68a2      	ldr	r2, [r4, #8]
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	3204      	adds	r2, #4
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	2104      	movs	r1, #4
 800ac3e:	60a2      	str	r2, [r4, #8]
 800ac40:	6123      	str	r3, [r4, #16]
 800ac42:	7561      	strb	r1, [r4, #21]
 800ac44:	7da0      	ldrb	r0, [r4, #22]
 800ac46:	f080 0001 	eor.w	r0, r0, #1
 800ac4a:	b002      	add	sp, #8
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	9a01      	ldr	r2, [sp, #4]
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	e7ee      	b.n	800ac34 <ucdr_serialize_int32_t+0xc0>
 800ac56:	68a2      	ldr	r2, [r4, #8]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	7da0      	ldrb	r0, [r4, #22]
 800ac5c:	7567      	strb	r7, [r4, #21]
 800ac5e:	1b92      	subs	r2, r2, r6
 800ac60:	1b9b      	subs	r3, r3, r6
 800ac62:	f080 0001 	eor.w	r0, r0, #1
 800ac66:	60a2      	str	r2, [r4, #8]
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	b002      	add	sp, #8
 800ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac70:	68a3      	ldr	r3, [r4, #8]
 800ac72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	68a3      	ldr	r3, [r4, #8]
 800ac7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	68a3      	ldr	r3, [r4, #8]
 800ac82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac86:	701a      	strb	r2, [r3, #0]
 800ac88:	e7ad      	b.n	800abe6 <ucdr_serialize_int32_t+0x72>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	ad01      	add	r5, sp, #4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4632      	mov	r2, r6
 800ac92:	f009 fd16 	bl	80146c2 <memcpy>
 800ac96:	68a0      	ldr	r0, [r4, #8]
 800ac98:	4642      	mov	r2, r8
 800ac9a:	19a9      	adds	r1, r5, r6
 800ac9c:	f009 fd11 	bl	80146c2 <memcpy>
 800aca0:	e7a1      	b.n	800abe6 <ucdr_serialize_int32_t+0x72>
 800aca2:	bf00      	nop

0800aca4 <ucdr_deserialize_int32_t>:
 800aca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca8:	460d      	mov	r5, r1
 800acaa:	2104      	movs	r1, #4
 800acac:	4604      	mov	r4, r0
 800acae:	f000 fa0f 	bl	800b0d0 <ucdr_buffer_alignment>
 800acb2:	4601      	mov	r1, r0
 800acb4:	4620      	mov	r0, r4
 800acb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800acba:	f000 fa4d 	bl	800b158 <ucdr_advance_buffer>
 800acbe:	4620      	mov	r0, r4
 800acc0:	2104      	movs	r1, #4
 800acc2:	f000 f9a7 	bl	800b014 <ucdr_check_buffer_available_for>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d138      	bne.n	800ad3c <ucdr_deserialize_int32_t+0x98>
 800acca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800acce:	42b7      	cmp	r7, r6
 800acd0:	d92f      	bls.n	800ad32 <ucdr_deserialize_int32_t+0x8e>
 800acd2:	6922      	ldr	r2, [r4, #16]
 800acd4:	60a7      	str	r7, [r4, #8]
 800acd6:	1bbf      	subs	r7, r7, r6
 800acd8:	443a      	add	r2, r7
 800acda:	f1c7 0904 	rsb	r9, r7, #4
 800acde:	6122      	str	r2, [r4, #16]
 800ace0:	4649      	mov	r1, r9
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 f9a2 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d046      	beq.n	800ad7a <ucdr_deserialize_int32_t+0xd6>
 800acec:	7d23      	ldrb	r3, [r4, #20]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d05c      	beq.n	800adac <ucdr_deserialize_int32_t+0x108>
 800acf2:	78f3      	ldrb	r3, [r6, #3]
 800acf4:	702b      	strb	r3, [r5, #0]
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	d04c      	beq.n	800ad94 <ucdr_deserialize_int32_t+0xf0>
 800acfa:	78b3      	ldrb	r3, [r6, #2]
 800acfc:	706b      	strb	r3, [r5, #1]
 800acfe:	2f01      	cmp	r7, #1
 800ad00:	f105 0302 	add.w	r3, r5, #2
 800ad04:	d04a      	beq.n	800ad9c <ucdr_deserialize_int32_t+0xf8>
 800ad06:	7873      	ldrb	r3, [r6, #1]
 800ad08:	70ab      	strb	r3, [r5, #2]
 800ad0a:	2f02      	cmp	r7, #2
 800ad0c:	f105 0303 	add.w	r3, r5, #3
 800ad10:	d048      	beq.n	800ada4 <ucdr_deserialize_int32_t+0x100>
 800ad12:	7833      	ldrb	r3, [r6, #0]
 800ad14:	70eb      	strb	r3, [r5, #3]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	68a2      	ldr	r2, [r4, #8]
 800ad1a:	7da0      	ldrb	r0, [r4, #22]
 800ad1c:	2104      	movs	r1, #4
 800ad1e:	3304      	adds	r3, #4
 800ad20:	1bdb      	subs	r3, r3, r7
 800ad22:	444a      	add	r2, r9
 800ad24:	7561      	strb	r1, [r4, #21]
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	60a2      	str	r2, [r4, #8]
 800ad2a:	f080 0001 	eor.w	r0, r0, #1
 800ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad32:	2104      	movs	r1, #4
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 f979 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800ad3a:	b1b0      	cbz	r0, 800ad6a <ucdr_deserialize_int32_t+0xc6>
 800ad3c:	7d23      	ldrb	r3, [r4, #20]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	d017      	beq.n	800ad74 <ucdr_deserialize_int32_t+0xd0>
 800ad44:	78db      	ldrb	r3, [r3, #3]
 800ad46:	702b      	strb	r3, [r5, #0]
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	789b      	ldrb	r3, [r3, #2]
 800ad4c:	706b      	strb	r3, [r5, #1]
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	785b      	ldrb	r3, [r3, #1]
 800ad52:	70ab      	strb	r3, [r5, #2]
 800ad54:	68a3      	ldr	r3, [r4, #8]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	70eb      	strb	r3, [r5, #3]
 800ad5a:	68a2      	ldr	r2, [r4, #8]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	3204      	adds	r2, #4
 800ad60:	3304      	adds	r3, #4
 800ad62:	2104      	movs	r1, #4
 800ad64:	60a2      	str	r2, [r4, #8]
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	7561      	strb	r1, [r4, #21]
 800ad6a:	7da0      	ldrb	r0, [r4, #22]
 800ad6c:	f080 0001 	eor.w	r0, r0, #1
 800ad70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	e7ef      	b.n	800ad5a <ucdr_deserialize_int32_t+0xb6>
 800ad7a:	68a2      	ldr	r2, [r4, #8]
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	7da0      	ldrb	r0, [r4, #22]
 800ad80:	f884 8015 	strb.w	r8, [r4, #21]
 800ad84:	1bd2      	subs	r2, r2, r7
 800ad86:	1bdb      	subs	r3, r3, r7
 800ad88:	60a2      	str	r2, [r4, #8]
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	f080 0001 	eor.w	r0, r0, #1
 800ad90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad94:	68a3      	ldr	r3, [r4, #8]
 800ad96:	789b      	ldrb	r3, [r3, #2]
 800ad98:	706b      	strb	r3, [r5, #1]
 800ad9a:	1cab      	adds	r3, r5, #2
 800ad9c:	68a2      	ldr	r2, [r4, #8]
 800ad9e:	7852      	ldrb	r2, [r2, #1]
 800ada0:	f803 2b01 	strb.w	r2, [r3], #1
 800ada4:	68a2      	ldr	r2, [r4, #8]
 800ada6:	7812      	ldrb	r2, [r2, #0]
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	e7b4      	b.n	800ad16 <ucdr_deserialize_int32_t+0x72>
 800adac:	4631      	mov	r1, r6
 800adae:	463a      	mov	r2, r7
 800adb0:	4628      	mov	r0, r5
 800adb2:	f009 fc86 	bl	80146c2 <memcpy>
 800adb6:	68a1      	ldr	r1, [r4, #8]
 800adb8:	464a      	mov	r2, r9
 800adba:	19e8      	adds	r0, r5, r7
 800adbc:	f009 fc81 	bl	80146c2 <memcpy>
 800adc0:	e7a9      	b.n	800ad16 <ucdr_deserialize_int32_t+0x72>
 800adc2:	bf00      	nop

0800adc4 <ucdr_serialize_float>:
 800adc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc8:	2104      	movs	r1, #4
 800adca:	b082      	sub	sp, #8
 800adcc:	4604      	mov	r4, r0
 800adce:	ed8d 0a01 	vstr	s0, [sp, #4]
 800add2:	f000 f97d 	bl	800b0d0 <ucdr_buffer_alignment>
 800add6:	4601      	mov	r1, r0
 800add8:	4620      	mov	r0, r4
 800adda:	7d67      	ldrb	r7, [r4, #21]
 800addc:	f000 f9bc 	bl	800b158 <ucdr_advance_buffer>
 800ade0:	4620      	mov	r0, r4
 800ade2:	2104      	movs	r1, #4
 800ade4:	f000 f916 	bl	800b014 <ucdr_check_buffer_available_for>
 800ade8:	2800      	cmp	r0, #0
 800adea:	d139      	bne.n	800ae60 <ucdr_serialize_float+0x9c>
 800adec:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800adf0:	42ae      	cmp	r6, r5
 800adf2:	d930      	bls.n	800ae56 <ucdr_serialize_float+0x92>
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	60a6      	str	r6, [r4, #8]
 800adf8:	1b76      	subs	r6, r6, r5
 800adfa:	4432      	add	r2, r6
 800adfc:	f1c6 0804 	rsb	r8, r6, #4
 800ae00:	6122      	str	r2, [r4, #16]
 800ae02:	4641      	mov	r1, r8
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 f911 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d04c      	beq.n	800aea8 <ucdr_serialize_float+0xe4>
 800ae0e:	7d23      	ldrb	r3, [r4, #20]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d063      	beq.n	800aedc <ucdr_serialize_float+0x118>
 800ae14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae18:	702b      	strb	r3, [r5, #0]
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	d051      	beq.n	800aec2 <ucdr_serialize_float+0xfe>
 800ae1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae22:	706b      	strb	r3, [r5, #1]
 800ae24:	2e01      	cmp	r6, #1
 800ae26:	d050      	beq.n	800aeca <ucdr_serialize_float+0x106>
 800ae28:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae2c:	70ab      	strb	r3, [r5, #2]
 800ae2e:	2e02      	cmp	r6, #2
 800ae30:	d04f      	beq.n	800aed2 <ucdr_serialize_float+0x10e>
 800ae32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ae36:	70eb      	strb	r3, [r5, #3]
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	68a2      	ldr	r2, [r4, #8]
 800ae3c:	7da0      	ldrb	r0, [r4, #22]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	1b9b      	subs	r3, r3, r6
 800ae42:	4442      	add	r2, r8
 800ae44:	2104      	movs	r1, #4
 800ae46:	f080 0001 	eor.w	r0, r0, #1
 800ae4a:	6123      	str	r3, [r4, #16]
 800ae4c:	60a2      	str	r2, [r4, #8]
 800ae4e:	7561      	strb	r1, [r4, #21]
 800ae50:	b002      	add	sp, #8
 800ae52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae56:	2104      	movs	r1, #4
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 f8e7 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800ae5e:	b1d0      	cbz	r0, 800ae96 <ucdr_serialize_float+0xd2>
 800ae60:	7d23      	ldrb	r3, [r4, #20]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	68a3      	ldr	r3, [r4, #8]
 800ae66:	d01c      	beq.n	800aea2 <ucdr_serialize_float+0xde>
 800ae68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	68a3      	ldr	r3, [r4, #8]
 800ae70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae74:	705a      	strb	r2, [r3, #1]
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae7c:	709a      	strb	r2, [r3, #2]
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae84:	70da      	strb	r2, [r3, #3]
 800ae86:	68a2      	ldr	r2, [r4, #8]
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	3204      	adds	r2, #4
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	2104      	movs	r1, #4
 800ae90:	60a2      	str	r2, [r4, #8]
 800ae92:	6123      	str	r3, [r4, #16]
 800ae94:	7561      	strb	r1, [r4, #21]
 800ae96:	7da0      	ldrb	r0, [r4, #22]
 800ae98:	f080 0001 	eor.w	r0, r0, #1
 800ae9c:	b002      	add	sp, #8
 800ae9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea2:	9a01      	ldr	r2, [sp, #4]
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	e7ee      	b.n	800ae86 <ucdr_serialize_float+0xc2>
 800aea8:	68a2      	ldr	r2, [r4, #8]
 800aeaa:	6923      	ldr	r3, [r4, #16]
 800aeac:	7da0      	ldrb	r0, [r4, #22]
 800aeae:	7567      	strb	r7, [r4, #21]
 800aeb0:	1b92      	subs	r2, r2, r6
 800aeb2:	1b9b      	subs	r3, r3, r6
 800aeb4:	f080 0001 	eor.w	r0, r0, #1
 800aeb8:	60a2      	str	r2, [r4, #8]
 800aeba:	6123      	str	r3, [r4, #16]
 800aebc:	b002      	add	sp, #8
 800aebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	e7ad      	b.n	800ae38 <ucdr_serialize_float+0x74>
 800aedc:	4628      	mov	r0, r5
 800aede:	ad01      	add	r5, sp, #4
 800aee0:	4629      	mov	r1, r5
 800aee2:	4632      	mov	r2, r6
 800aee4:	f009 fbed 	bl	80146c2 <memcpy>
 800aee8:	68a0      	ldr	r0, [r4, #8]
 800aeea:	4642      	mov	r2, r8
 800aeec:	19a9      	adds	r1, r5, r6
 800aeee:	f009 fbe8 	bl	80146c2 <memcpy>
 800aef2:	e7a1      	b.n	800ae38 <ucdr_serialize_float+0x74>

0800aef4 <ucdr_deserialize_float>:
 800aef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aef8:	460d      	mov	r5, r1
 800aefa:	2104      	movs	r1, #4
 800aefc:	4604      	mov	r4, r0
 800aefe:	f000 f8e7 	bl	800b0d0 <ucdr_buffer_alignment>
 800af02:	4601      	mov	r1, r0
 800af04:	4620      	mov	r0, r4
 800af06:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af0a:	f000 f925 	bl	800b158 <ucdr_advance_buffer>
 800af0e:	4620      	mov	r0, r4
 800af10:	2104      	movs	r1, #4
 800af12:	f000 f87f 	bl	800b014 <ucdr_check_buffer_available_for>
 800af16:	2800      	cmp	r0, #0
 800af18:	d138      	bne.n	800af8c <ucdr_deserialize_float+0x98>
 800af1a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800af1e:	42b7      	cmp	r7, r6
 800af20:	d92f      	bls.n	800af82 <ucdr_deserialize_float+0x8e>
 800af22:	6922      	ldr	r2, [r4, #16]
 800af24:	60a7      	str	r7, [r4, #8]
 800af26:	1bbf      	subs	r7, r7, r6
 800af28:	443a      	add	r2, r7
 800af2a:	f1c7 0904 	rsb	r9, r7, #4
 800af2e:	6122      	str	r2, [r4, #16]
 800af30:	4649      	mov	r1, r9
 800af32:	4620      	mov	r0, r4
 800af34:	f000 f87a 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d046      	beq.n	800afca <ucdr_deserialize_float+0xd6>
 800af3c:	7d23      	ldrb	r3, [r4, #20]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d05c      	beq.n	800affc <ucdr_deserialize_float+0x108>
 800af42:	78f3      	ldrb	r3, [r6, #3]
 800af44:	702b      	strb	r3, [r5, #0]
 800af46:	2f00      	cmp	r7, #0
 800af48:	d04c      	beq.n	800afe4 <ucdr_deserialize_float+0xf0>
 800af4a:	78b3      	ldrb	r3, [r6, #2]
 800af4c:	706b      	strb	r3, [r5, #1]
 800af4e:	2f01      	cmp	r7, #1
 800af50:	f105 0302 	add.w	r3, r5, #2
 800af54:	d04a      	beq.n	800afec <ucdr_deserialize_float+0xf8>
 800af56:	7873      	ldrb	r3, [r6, #1]
 800af58:	70ab      	strb	r3, [r5, #2]
 800af5a:	2f02      	cmp	r7, #2
 800af5c:	f105 0303 	add.w	r3, r5, #3
 800af60:	d048      	beq.n	800aff4 <ucdr_deserialize_float+0x100>
 800af62:	7833      	ldrb	r3, [r6, #0]
 800af64:	70eb      	strb	r3, [r5, #3]
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	68a2      	ldr	r2, [r4, #8]
 800af6a:	7da0      	ldrb	r0, [r4, #22]
 800af6c:	2104      	movs	r1, #4
 800af6e:	3304      	adds	r3, #4
 800af70:	1bdb      	subs	r3, r3, r7
 800af72:	444a      	add	r2, r9
 800af74:	7561      	strb	r1, [r4, #21]
 800af76:	6123      	str	r3, [r4, #16]
 800af78:	60a2      	str	r2, [r4, #8]
 800af7a:	f080 0001 	eor.w	r0, r0, #1
 800af7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af82:	2104      	movs	r1, #4
 800af84:	4620      	mov	r0, r4
 800af86:	f000 f851 	bl	800b02c <ucdr_check_final_buffer_behavior>
 800af8a:	b1b0      	cbz	r0, 800afba <ucdr_deserialize_float+0xc6>
 800af8c:	7d23      	ldrb	r3, [r4, #20]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	68a3      	ldr	r3, [r4, #8]
 800af92:	d017      	beq.n	800afc4 <ucdr_deserialize_float+0xd0>
 800af94:	78db      	ldrb	r3, [r3, #3]
 800af96:	702b      	strb	r3, [r5, #0]
 800af98:	68a3      	ldr	r3, [r4, #8]
 800af9a:	789b      	ldrb	r3, [r3, #2]
 800af9c:	706b      	strb	r3, [r5, #1]
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	70ab      	strb	r3, [r5, #2]
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	70eb      	strb	r3, [r5, #3]
 800afaa:	68a2      	ldr	r2, [r4, #8]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	3204      	adds	r2, #4
 800afb0:	3304      	adds	r3, #4
 800afb2:	2104      	movs	r1, #4
 800afb4:	60a2      	str	r2, [r4, #8]
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	7561      	strb	r1, [r4, #21]
 800afba:	7da0      	ldrb	r0, [r4, #22]
 800afbc:	f080 0001 	eor.w	r0, r0, #1
 800afc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	e7ef      	b.n	800afaa <ucdr_deserialize_float+0xb6>
 800afca:	68a2      	ldr	r2, [r4, #8]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	7da0      	ldrb	r0, [r4, #22]
 800afd0:	f884 8015 	strb.w	r8, [r4, #21]
 800afd4:	1bd2      	subs	r2, r2, r7
 800afd6:	1bdb      	subs	r3, r3, r7
 800afd8:	60a2      	str	r2, [r4, #8]
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	f080 0001 	eor.w	r0, r0, #1
 800afe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe4:	68a3      	ldr	r3, [r4, #8]
 800afe6:	789b      	ldrb	r3, [r3, #2]
 800afe8:	706b      	strb	r3, [r5, #1]
 800afea:	1cab      	adds	r3, r5, #2
 800afec:	68a2      	ldr	r2, [r4, #8]
 800afee:	7852      	ldrb	r2, [r2, #1]
 800aff0:	f803 2b01 	strb.w	r2, [r3], #1
 800aff4:	68a2      	ldr	r2, [r4, #8]
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	e7b4      	b.n	800af66 <ucdr_deserialize_float+0x72>
 800affc:	4631      	mov	r1, r6
 800affe:	463a      	mov	r2, r7
 800b000:	4628      	mov	r0, r5
 800b002:	f009 fb5e 	bl	80146c2 <memcpy>
 800b006:	68a1      	ldr	r1, [r4, #8]
 800b008:	464a      	mov	r2, r9
 800b00a:	19e8      	adds	r0, r5, r7
 800b00c:	f009 fb59 	bl	80146c2 <memcpy>
 800b010:	e7a9      	b.n	800af66 <ucdr_deserialize_float+0x72>
 800b012:	bf00      	nop

0800b014 <ucdr_check_buffer_available_for>:
 800b014:	7d83      	ldrb	r3, [r0, #22]
 800b016:	b93b      	cbnz	r3, 800b028 <ucdr_check_buffer_available_for+0x14>
 800b018:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b01c:	4419      	add	r1, r3
 800b01e:	4288      	cmp	r0, r1
 800b020:	bf34      	ite	cc
 800b022:	2000      	movcc	r0, #0
 800b024:	2001      	movcs	r0, #1
 800b026:	4770      	bx	lr
 800b028:	2000      	movs	r0, #0
 800b02a:	4770      	bx	lr

0800b02c <ucdr_check_final_buffer_behavior>:
 800b02c:	7d83      	ldrb	r3, [r0, #22]
 800b02e:	b943      	cbnz	r3, 800b042 <ucdr_check_final_buffer_behavior+0x16>
 800b030:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b034:	4291      	cmp	r1, r2
 800b036:	b510      	push	{r4, lr}
 800b038:	4604      	mov	r4, r0
 800b03a:	d205      	bcs.n	800b048 <ucdr_check_final_buffer_behavior+0x1c>
 800b03c:	2301      	movs	r3, #1
 800b03e:	4618      	mov	r0, r3
 800b040:	bd10      	pop	{r4, pc}
 800b042:	2300      	movs	r3, #0
 800b044:	4618      	mov	r0, r3
 800b046:	4770      	bx	lr
 800b048:	6982      	ldr	r2, [r0, #24]
 800b04a:	b13a      	cbz	r2, 800b05c <ucdr_check_final_buffer_behavior+0x30>
 800b04c:	69c1      	ldr	r1, [r0, #28]
 800b04e:	4790      	blx	r2
 800b050:	f080 0301 	eor.w	r3, r0, #1
 800b054:	b2db      	uxtb	r3, r3
 800b056:	75a0      	strb	r0, [r4, #22]
 800b058:	4618      	mov	r0, r3
 800b05a:	bd10      	pop	{r4, pc}
 800b05c:	2001      	movs	r0, #1
 800b05e:	75a0      	strb	r0, [r4, #22]
 800b060:	e7fa      	b.n	800b058 <ucdr_check_final_buffer_behavior+0x2c>
 800b062:	bf00      	nop

0800b064 <ucdr_set_on_full_buffer_callback>:
 800b064:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <ucdr_init_buffer_origin_offset_endian>:
 800b06c:	b430      	push	{r4, r5}
 800b06e:	9c02      	ldr	r4, [sp, #8]
 800b070:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800b074:	6001      	str	r1, [r0, #0]
 800b076:	440a      	add	r2, r1
 800b078:	60c3      	str	r3, [r0, #12]
 800b07a:	4421      	add	r1, r4
 800b07c:	441c      	add	r4, r3
 800b07e:	2300      	movs	r3, #0
 800b080:	6104      	str	r4, [r0, #16]
 800b082:	7505      	strb	r5, [r0, #20]
 800b084:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b088:	bc30      	pop	{r4, r5}
 800b08a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800b08e:	7543      	strb	r3, [r0, #21]
 800b090:	7583      	strb	r3, [r0, #22]
 800b092:	4770      	bx	lr

0800b094 <ucdr_init_buffer_origin_offset>:
 800b094:	b510      	push	{r4, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	9c04      	ldr	r4, [sp, #16]
 800b09a:	9400      	str	r4, [sp, #0]
 800b09c:	2401      	movs	r4, #1
 800b09e:	9401      	str	r4, [sp, #4]
 800b0a0:	f7ff ffe4 	bl	800b06c <ucdr_init_buffer_origin_offset_endian>
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd10      	pop	{r4, pc}

0800b0a8 <ucdr_init_buffer_origin>:
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	2400      	movs	r4, #0
 800b0ae:	9400      	str	r4, [sp, #0]
 800b0b0:	f7ff fff0 	bl	800b094 <ucdr_init_buffer_origin_offset>
 800b0b4:	b002      	add	sp, #8
 800b0b6:	bd10      	pop	{r4, pc}

0800b0b8 <ucdr_init_buffer>:
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f7ff bff5 	b.w	800b0a8 <ucdr_init_buffer_origin>
 800b0be:	bf00      	nop

0800b0c0 <ucdr_alignment>:
 800b0c0:	fbb0 f3f1 	udiv	r3, r0, r1
 800b0c4:	fb03 0011 	mls	r0, r3, r1, r0
 800b0c8:	1a08      	subs	r0, r1, r0
 800b0ca:	3901      	subs	r1, #1
 800b0cc:	4008      	ands	r0, r1
 800b0ce:	4770      	bx	lr

0800b0d0 <ucdr_buffer_alignment>:
 800b0d0:	7d43      	ldrb	r3, [r0, #21]
 800b0d2:	428b      	cmp	r3, r1
 800b0d4:	d208      	bcs.n	800b0e8 <ucdr_buffer_alignment+0x18>
 800b0d6:	6903      	ldr	r3, [r0, #16]
 800b0d8:	fbb3 f0f1 	udiv	r0, r3, r1
 800b0dc:	fb01 3010 	mls	r0, r1, r0, r3
 800b0e0:	1a08      	subs	r0, r1, r0
 800b0e2:	3901      	subs	r1, #1
 800b0e4:	4008      	ands	r0, r1
 800b0e6:	4770      	bx	lr
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	4770      	bx	lr

0800b0ec <ucdr_align_to>:
 800b0ec:	b570      	push	{r4, r5, r6, lr}
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460e      	mov	r6, r1
 800b0f2:	f7ff ffed 	bl	800b0d0 <ucdr_buffer_alignment>
 800b0f6:	68a5      	ldr	r5, [r4, #8]
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	6922      	ldr	r2, [r4, #16]
 800b0fc:	7566      	strb	r6, [r4, #21]
 800b0fe:	4405      	add	r5, r0
 800b100:	42ab      	cmp	r3, r5
 800b102:	4410      	add	r0, r2
 800b104:	bf28      	it	cs
 800b106:	462b      	movcs	r3, r5
 800b108:	6120      	str	r0, [r4, #16]
 800b10a:	60a3      	str	r3, [r4, #8]
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
 800b10e:	bf00      	nop

0800b110 <ucdr_buffer_length>:
 800b110:	6882      	ldr	r2, [r0, #8]
 800b112:	6800      	ldr	r0, [r0, #0]
 800b114:	1a10      	subs	r0, r2, r0
 800b116:	4770      	bx	lr

0800b118 <ucdr_buffer_remaining>:
 800b118:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b11c:	1a10      	subs	r0, r2, r0
 800b11e:	4770      	bx	lr

0800b120 <ucdr_check_final_buffer_behavior_array>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	7d83      	ldrb	r3, [r0, #22]
 800b124:	b963      	cbnz	r3, 800b140 <ucdr_check_final_buffer_behavior_array+0x20>
 800b126:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	4604      	mov	r4, r0
 800b12e:	460d      	mov	r5, r1
 800b130:	d308      	bcc.n	800b144 <ucdr_check_final_buffer_behavior_array+0x24>
 800b132:	b139      	cbz	r1, 800b144 <ucdr_check_final_buffer_behavior_array+0x24>
 800b134:	6983      	ldr	r3, [r0, #24]
 800b136:	b163      	cbz	r3, 800b152 <ucdr_check_final_buffer_behavior_array+0x32>
 800b138:	69c1      	ldr	r1, [r0, #28]
 800b13a:	4798      	blx	r3
 800b13c:	75a0      	strb	r0, [r4, #22]
 800b13e:	b108      	cbz	r0, 800b144 <ucdr_check_final_buffer_behavior_array+0x24>
 800b140:	2000      	movs	r0, #0
 800b142:	bd38      	pop	{r3, r4, r5, pc}
 800b144:	4620      	mov	r0, r4
 800b146:	f7ff ffe7 	bl	800b118 <ucdr_buffer_remaining>
 800b14a:	42a8      	cmp	r0, r5
 800b14c:	bf28      	it	cs
 800b14e:	4628      	movcs	r0, r5
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	2301      	movs	r3, #1
 800b154:	7583      	strb	r3, [r0, #22]
 800b156:	e7f3      	b.n	800b140 <ucdr_check_final_buffer_behavior_array+0x20>

0800b158 <ucdr_advance_buffer>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4604      	mov	r4, r0
 800b15c:	460d      	mov	r5, r1
 800b15e:	f7ff ff59 	bl	800b014 <ucdr_check_buffer_available_for>
 800b162:	b178      	cbz	r0, 800b184 <ucdr_advance_buffer+0x2c>
 800b164:	68a3      	ldr	r3, [r4, #8]
 800b166:	6921      	ldr	r1, [r4, #16]
 800b168:	442b      	add	r3, r5
 800b16a:	60a3      	str	r3, [r4, #8]
 800b16c:	2301      	movs	r3, #1
 800b16e:	4429      	add	r1, r5
 800b170:	7563      	strb	r3, [r4, #21]
 800b172:	6121      	str	r1, [r4, #16]
 800b174:	bd38      	pop	{r3, r4, r5, pc}
 800b176:	68a2      	ldr	r2, [r4, #8]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	4402      	add	r2, r0
 800b17c:	4403      	add	r3, r0
 800b17e:	1a2d      	subs	r5, r5, r0
 800b180:	60a2      	str	r2, [r4, #8]
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	2201      	movs	r2, #1
 800b186:	4629      	mov	r1, r5
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff ffc9 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d1f1      	bne.n	800b176 <ucdr_advance_buffer+0x1e>
 800b192:	2301      	movs	r3, #1
 800b194:	7563      	strb	r3, [r4, #21]
 800b196:	bd38      	pop	{r3, r4, r5, pc}

0800b198 <rcl_client_get_rmw_handle>:
 800b198:	b110      	cbz	r0, 800b1a0 <rcl_client_get_rmw_handle+0x8>
 800b19a:	6800      	ldr	r0, [r0, #0]
 800b19c:	b100      	cbz	r0, 800b1a0 <rcl_client_get_rmw_handle+0x8>
 800b19e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop

0800b1a4 <rcl_take_response>:
 800b1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a6:	460e      	mov	r6, r1
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	4694      	mov	ip, r2
 800b1ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b1b0:	b08d      	sub	sp, #52	@ 0x34
 800b1b2:	ad06      	add	r5, sp, #24
 800b1b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b1b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b1ba:	e885 0003 	stmia.w	r5, {r0, r1}
 800b1be:	b337      	cbz	r7, 800b20e <rcl_take_response+0x6a>
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	b323      	cbz	r3, 800b20e <rcl_take_response+0x6a>
 800b1c4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b1c6:	b310      	cbz	r0, 800b20e <rcl_take_response+0x6a>
 800b1c8:	4662      	mov	r2, ip
 800b1ca:	b31a      	cbz	r2, 800b214 <rcl_take_response+0x70>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2600      	movs	r6, #0
 800b1d0:	2700      	movs	r7, #0
 800b1d2:	f88d 3007 	strb.w	r3, [sp, #7]
 800b1d6:	a902      	add	r1, sp, #8
 800b1d8:	f10d 0307 	add.w	r3, sp, #7
 800b1dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b1e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b1e4:	f003 fb4e 	bl	800e884 <rmw_take_response>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	b9a8      	cbnz	r0, 800b218 <rcl_take_response+0x74>
 800b1ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1f0:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	bf08      	it	eq
 800b1f8:	461e      	moveq	r6, r3
 800b1fa:	ad06      	add	r5, sp, #24
 800b1fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b200:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b204:	e884 0003 	stmia.w	r4, {r0, r1}
 800b208:	4630      	mov	r0, r6
 800b20a:	b00d      	add	sp, #52	@ 0x34
 800b20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800b212:	e7f2      	b.n	800b1fa <rcl_take_response+0x56>
 800b214:	260b      	movs	r6, #11
 800b216:	e7f0      	b.n	800b1fa <rcl_take_response+0x56>
 800b218:	2601      	movs	r6, #1
 800b21a:	e7ee      	b.n	800b1fa <rcl_take_response+0x56>

0800b21c <rcl_get_zero_initialized_context>:
 800b21c:	4a03      	ldr	r2, [pc, #12]	@ (800b22c <rcl_get_zero_initialized_context+0x10>)
 800b21e:	4603      	mov	r3, r0
 800b220:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b224:	e883 0003 	stmia.w	r3, {r0, r1}
 800b228:	4618      	mov	r0, r3
 800b22a:	4770      	bx	lr
 800b22c:	08015688 	.word	0x08015688

0800b230 <rcl_context_is_valid>:
 800b230:	b118      	cbz	r0, 800b23a <rcl_context_is_valid+0xa>
 800b232:	6840      	ldr	r0, [r0, #4]
 800b234:	3800      	subs	r0, #0
 800b236:	bf18      	it	ne
 800b238:	2001      	movne	r0, #1
 800b23a:	4770      	bx	lr

0800b23c <__cleanup_context>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	4606      	mov	r6, r0
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	6073      	str	r3, [r6, #4]
 800b248:	2800      	cmp	r0, #0
 800b24a:	d04d      	beq.n	800b2e8 <__cleanup_context+0xac>
 800b24c:	6947      	ldr	r7, [r0, #20]
 800b24e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b252:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b256:	b137      	cbz	r7, 800b266 <__cleanup_context+0x2a>
 800b258:	3014      	adds	r0, #20
 800b25a:	f000 fb1d 	bl	800b898 <rcl_init_options_fini>
 800b25e:	4607      	mov	r7, r0
 800b260:	2800      	cmp	r0, #0
 800b262:	d148      	bne.n	800b2f6 <__cleanup_context+0xba>
 800b264:	6830      	ldr	r0, [r6, #0]
 800b266:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b268:	b143      	cbz	r3, 800b27c <__cleanup_context+0x40>
 800b26a:	3028      	adds	r0, #40	@ 0x28
 800b26c:	f003 f8b8 	bl	800e3e0 <rmw_context_fini>
 800b270:	b118      	cbz	r0, 800b27a <__cleanup_context+0x3e>
 800b272:	2f00      	cmp	r7, #0
 800b274:	d042      	beq.n	800b2fc <__cleanup_context+0xc0>
 800b276:	f7fe fc07 	bl	8009a88 <rcutils_reset_error>
 800b27a:	6830      	ldr	r0, [r6, #0]
 800b27c:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800b280:	f1bc 0f00 	cmp.w	ip, #0
 800b284:	d01c      	beq.n	800b2c0 <__cleanup_context+0x84>
 800b286:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b28a:	2a01      	cmp	r2, #1
 800b28c:	f173 0100 	sbcs.w	r1, r3, #0
 800b290:	db12      	blt.n	800b2b8 <__cleanup_context+0x7c>
 800b292:	2400      	movs	r4, #0
 800b294:	2500      	movs	r5, #0
 800b296:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800b29a:	4649      	mov	r1, r9
 800b29c:	b1c0      	cbz	r0, 800b2d0 <__cleanup_context+0x94>
 800b29e:	47c0      	blx	r8
 800b2a0:	6831      	ldr	r1, [r6, #0]
 800b2a2:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800b2a6:	3401      	adds	r4, #1
 800b2a8:	f145 0500 	adc.w	r5, r5, #0
 800b2ac:	4294      	cmp	r4, r2
 800b2ae:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800b2b2:	eb75 0103 	sbcs.w	r1, r5, r3
 800b2b6:	dbee      	blt.n	800b296 <__cleanup_context+0x5a>
 800b2b8:	4660      	mov	r0, ip
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	47c0      	blx	r8
 800b2be:	6830      	ldr	r0, [r6, #0]
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	47c0      	blx	r8
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	e9c6 3300 	strd	r3, r3, [r6]
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d0:	3401      	adds	r4, #1
 800b2d2:	f145 0500 	adc.w	r5, r5, #0
 800b2d6:	4294      	cmp	r4, r2
 800b2d8:	eb75 0103 	sbcs.w	r1, r5, r3
 800b2dc:	dbdb      	blt.n	800b296 <__cleanup_context+0x5a>
 800b2de:	4660      	mov	r0, ip
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	47c0      	blx	r8
 800b2e4:	6830      	ldr	r0, [r6, #0]
 800b2e6:	e7eb      	b.n	800b2c0 <__cleanup_context+0x84>
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e9c6 3300 	strd	r3, r3, [r6]
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	f7fe fbc7 	bl	8009a88 <rcutils_reset_error>
 800b2fa:	e7b3      	b.n	800b264 <__cleanup_context+0x28>
 800b2fc:	f007 fbe2 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b300:	4607      	mov	r7, r0
 800b302:	e7b8      	b.n	800b276 <__cleanup_context+0x3a>

0800b304 <rcl_expand_topic_name>:
 800b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	b08b      	sub	sp, #44	@ 0x2c
 800b30a:	9306      	str	r3, [sp, #24]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f000 80d2 	beq.w	800b4b6 <rcl_expand_topic_name+0x1b2>
 800b312:	460e      	mov	r6, r1
 800b314:	2900      	cmp	r1, #0
 800b316:	f000 80ce 	beq.w	800b4b6 <rcl_expand_topic_name+0x1b2>
 800b31a:	4617      	mov	r7, r2
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	f000 80ca 	beq.w	800b4b6 <rcl_expand_topic_name+0x1b2>
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 80c7 	beq.w	800b4b6 <rcl_expand_topic_name+0x1b2>
 800b328:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80c3 	beq.w	800b4b6 <rcl_expand_topic_name+0x1b2>
 800b330:	a909      	add	r1, sp, #36	@ 0x24
 800b332:	2200      	movs	r2, #0
 800b334:	4680      	mov	r8, r0
 800b336:	f001 fa4d 	bl	800c7d4 <rcl_validate_topic_name>
 800b33a:	4604      	mov	r4, r0
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f040 80b6 	bne.w	800b4ae <rcl_expand_topic_name+0x1aa>
 800b342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 80bf 	bne.w	800b4c8 <rcl_expand_topic_name+0x1c4>
 800b34a:	4602      	mov	r2, r0
 800b34c:	a909      	add	r1, sp, #36	@ 0x24
 800b34e:	4630      	mov	r0, r6
 800b350:	f002 fd8c 	bl	800de6c <rmw_validate_node_name>
 800b354:	2800      	cmp	r0, #0
 800b356:	f040 80b3 	bne.w	800b4c0 <rcl_expand_topic_name+0x1bc>
 800b35a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	f040 80b8 	bne.w	800b4d2 <rcl_expand_topic_name+0x1ce>
 800b362:	a909      	add	r1, sp, #36	@ 0x24
 800b364:	4638      	mov	r0, r7
 800b366:	f002 fd63 	bl	800de30 <rmw_validate_namespace>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	f040 80a8 	bne.w	800b4c0 <rcl_expand_topic_name+0x1bc>
 800b370:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b372:	2c00      	cmp	r4, #0
 800b374:	f040 80f6 	bne.w	800b564 <rcl_expand_topic_name+0x260>
 800b378:	217b      	movs	r1, #123	@ 0x7b
 800b37a:	4640      	mov	r0, r8
 800b37c:	f009 f8e0 	bl	8014540 <strchr>
 800b380:	f898 3000 	ldrb.w	r3, [r8]
 800b384:	2b2f      	cmp	r3, #47	@ 0x2f
 800b386:	4605      	mov	r5, r0
 800b388:	f000 80c4 	beq.w	800b514 <rcl_expand_topic_name+0x210>
 800b38c:	2b7e      	cmp	r3, #126	@ 0x7e
 800b38e:	d16f      	bne.n	800b470 <rcl_expand_topic_name+0x16c>
 800b390:	4638      	mov	r0, r7
 800b392:	f7f4 ff2f 	bl	80001f4 <strlen>
 800b396:	4b87      	ldr	r3, [pc, #540]	@ (800b5b4 <rcl_expand_topic_name+0x2b0>)
 800b398:	4987      	ldr	r1, [pc, #540]	@ (800b5b8 <rcl_expand_topic_name+0x2b4>)
 800b39a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b39c:	9604      	str	r6, [sp, #16]
 800b39e:	2801      	cmp	r0, #1
 800b3a0:	bf0c      	ite	eq
 800b3a2:	4618      	moveq	r0, r3
 800b3a4:	4608      	movne	r0, r1
 800b3a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b3aa:	e9cd 2300 	strd	r2, r3, [sp]
 800b3ae:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800b3b2:	f108 0101 	add.w	r1, r8, #1
 800b3b6:	9105      	str	r1, [sp, #20]
 800b3b8:	ab14      	add	r3, sp, #80	@ 0x50
 800b3ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b3bc:	f002 f99a 	bl	800d6f4 <rcutils_format_string_limit>
 800b3c0:	4682      	mov	sl, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f000 80d0 	beq.w	800b568 <rcl_expand_topic_name+0x264>
 800b3c8:	2d00      	cmp	r5, #0
 800b3ca:	f000 80aa 	beq.w	800b522 <rcl_expand_topic_name+0x21e>
 800b3ce:	217b      	movs	r1, #123	@ 0x7b
 800b3d0:	f009 f8b6 	bl	8014540 <strchr>
 800b3d4:	46d1      	mov	r9, sl
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	9407      	str	r4, [sp, #28]
 800b3da:	46d3      	mov	fp, sl
 800b3dc:	464c      	mov	r4, r9
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	f000 80c7 	beq.w	800b572 <rcl_expand_topic_name+0x26e>
 800b3e4:	217d      	movs	r1, #125	@ 0x7d
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f009 f8aa 	bl	8014540 <strchr>
 800b3ec:	eba0 0905 	sub.w	r9, r0, r5
 800b3f0:	f109 0a01 	add.w	sl, r9, #1
 800b3f4:	4871      	ldr	r0, [pc, #452]	@ (800b5bc <rcl_expand_topic_name+0x2b8>)
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f009 f8ae 	bl	801455a <strncmp>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f000 808d 	beq.w	800b51e <rcl_expand_topic_name+0x21a>
 800b404:	486e      	ldr	r0, [pc, #440]	@ (800b5c0 <rcl_expand_topic_name+0x2bc>)
 800b406:	4652      	mov	r2, sl
 800b408:	4629      	mov	r1, r5
 800b40a:	f009 f8a6 	bl	801455a <strncmp>
 800b40e:	b130      	cbz	r0, 800b41e <rcl_expand_topic_name+0x11a>
 800b410:	486c      	ldr	r0, [pc, #432]	@ (800b5c4 <rcl_expand_topic_name+0x2c0>)
 800b412:	4652      	mov	r2, sl
 800b414:	4629      	mov	r1, r5
 800b416:	f009 f8a0 	bl	801455a <strncmp>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d15b      	bne.n	800b4d6 <rcl_expand_topic_name+0x1d2>
 800b41e:	46b9      	mov	r9, r7
 800b420:	ab16      	add	r3, sp, #88	@ 0x58
 800b422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b426:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b42a:	ab14      	add	r3, sp, #80	@ 0x50
 800b42c:	4628      	mov	r0, r5
 800b42e:	cb0c      	ldmia	r3, {r2, r3}
 800b430:	4651      	mov	r1, sl
 800b432:	f002 faab 	bl	800d98c <rcutils_strndup>
 800b436:	4605      	mov	r5, r0
 800b438:	2800      	cmp	r0, #0
 800b43a:	f000 80a4 	beq.w	800b586 <rcl_expand_topic_name+0x282>
 800b43e:	464a      	mov	r2, r9
 800b440:	4620      	mov	r0, r4
 800b442:	ab14      	add	r3, sp, #80	@ 0x50
 800b444:	4629      	mov	r1, r5
 800b446:	f002 f9a7 	bl	800d798 <rcutils_repl_str>
 800b44a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b44c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b44e:	4604      	mov	r4, r0
 800b450:	4628      	mov	r0, r5
 800b452:	4798      	blx	r3
 800b454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b456:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b458:	4658      	mov	r0, fp
 800b45a:	4798      	blx	r3
 800b45c:	2c00      	cmp	r4, #0
 800b45e:	f000 8083 	beq.w	800b568 <rcl_expand_topic_name+0x264>
 800b462:	217b      	movs	r1, #123	@ 0x7b
 800b464:	4620      	mov	r0, r4
 800b466:	f009 f86b 	bl	8014540 <strchr>
 800b46a:	46a3      	mov	fp, r4
 800b46c:	4605      	mov	r5, r0
 800b46e:	e7b6      	b.n	800b3de <rcl_expand_topic_name+0xda>
 800b470:	2800      	cmp	r0, #0
 800b472:	d151      	bne.n	800b518 <rcl_expand_topic_name+0x214>
 800b474:	4638      	mov	r0, r7
 800b476:	f7f4 febd 	bl	80001f4 <strlen>
 800b47a:	4b53      	ldr	r3, [pc, #332]	@ (800b5c8 <rcl_expand_topic_name+0x2c4>)
 800b47c:	4a53      	ldr	r2, [pc, #332]	@ (800b5cc <rcl_expand_topic_name+0x2c8>)
 800b47e:	f8cd 8010 	str.w	r8, [sp, #16]
 800b482:	2801      	cmp	r0, #1
 800b484:	bf0c      	ite	eq
 800b486:	4618      	moveq	r0, r3
 800b488:	4610      	movne	r0, r2
 800b48a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b48c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b490:	e9cd 3200 	strd	r3, r2, [sp]
 800b494:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800b498:	ab14      	add	r3, sp, #80	@ 0x50
 800b49a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b49c:	f002 f92a 	bl	800d6f4 <rcutils_format_string_limit>
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	4653      	mov	r3, sl
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d05f      	beq.n	800b568 <rcl_expand_topic_name+0x264>
 800b4a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4aa:	f8c3 a000 	str.w	sl, [r3]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	b00b      	add	sp, #44	@ 0x2c
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	240b      	movs	r4, #11
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	b00b      	add	sp, #44	@ 0x2c
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c0:	f007 fb00 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	e7f2      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b4c8:	2467      	movs	r4, #103	@ 0x67
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	b00b      	add	sp, #44	@ 0x2c
 800b4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d2:	24c9      	movs	r4, #201	@ 0xc9
 800b4d4:	e7eb      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b4d6:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800b4da:	9806      	ldr	r0, [sp, #24]
 800b4dc:	1c69      	adds	r1, r5, #1
 800b4de:	f002 fb6f 	bl	800dbc0 <rcutils_string_map_getn>
 800b4e2:	4681      	mov	r9, r0
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d19b      	bne.n	800b420 <rcl_expand_topic_name+0x11c>
 800b4e8:	aa16      	add	r2, sp, #88	@ 0x58
 800b4ea:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4ee:	f8c3 9000 	str.w	r9, [r3]
 800b4f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b4f6:	ab14      	add	r3, sp, #80	@ 0x50
 800b4f8:	cb0c      	ldmia	r3, {r2, r3}
 800b4fa:	4651      	mov	r1, sl
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f002 fa45 	bl	800d98c <rcutils_strndup>
 800b502:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b504:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b506:	4798      	blx	r3
 800b508:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b50a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b50c:	4658      	mov	r0, fp
 800b50e:	4798      	blx	r3
 800b510:	2469      	movs	r4, #105	@ 0x69
 800b512:	e7cc      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b514:	2800      	cmp	r0, #0
 800b516:	d03e      	beq.n	800b596 <rcl_expand_topic_name+0x292>
 800b518:	46c1      	mov	r9, r8
 800b51a:	46a2      	mov	sl, r4
 800b51c:	e75c      	b.n	800b3d8 <rcl_expand_topic_name+0xd4>
 800b51e:	46b1      	mov	r9, r6
 800b520:	e77e      	b.n	800b420 <rcl_expand_topic_name+0x11c>
 800b522:	f89a 3000 	ldrb.w	r3, [sl]
 800b526:	2b2f      	cmp	r3, #47	@ 0x2f
 800b528:	d0be      	beq.n	800b4a8 <rcl_expand_topic_name+0x1a4>
 800b52a:	4638      	mov	r0, r7
 800b52c:	f7f4 fe62 	bl	80001f4 <strlen>
 800b530:	4b25      	ldr	r3, [pc, #148]	@ (800b5c8 <rcl_expand_topic_name+0x2c4>)
 800b532:	4926      	ldr	r1, [pc, #152]	@ (800b5cc <rcl_expand_topic_name+0x2c8>)
 800b534:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b536:	f8cd a010 	str.w	sl, [sp, #16]
 800b53a:	2801      	cmp	r0, #1
 800b53c:	bf0c      	ite	eq
 800b53e:	4618      	moveq	r0, r3
 800b540:	4608      	movne	r0, r1
 800b542:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b546:	e9cd 2300 	strd	r2, r3, [sp]
 800b54a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800b54e:	ab14      	add	r3, sp, #80	@ 0x50
 800b550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b552:	f002 f8cf 	bl	800d6f4 <rcutils_format_string_limit>
 800b556:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b558:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b55a:	4603      	mov	r3, r0
 800b55c:	4650      	mov	r0, sl
 800b55e:	469a      	mov	sl, r3
 800b560:	4790      	blx	r2
 800b562:	e79e      	b.n	800b4a2 <rcl_expand_topic_name+0x19e>
 800b564:	24ca      	movs	r4, #202	@ 0xca
 800b566:	e7a2      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b56a:	2300      	movs	r3, #0
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	240a      	movs	r4, #10
 800b570:	e79d      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b572:	465b      	mov	r3, fp
 800b574:	9c07      	ldr	r4, [sp, #28]
 800b576:	46da      	mov	sl, fp
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1d2      	bne.n	800b522 <rcl_expand_topic_name+0x21e>
 800b57c:	f898 3000 	ldrb.w	r3, [r8]
 800b580:	2b2f      	cmp	r3, #47	@ 0x2f
 800b582:	d091      	beq.n	800b4a8 <rcl_expand_topic_name+0x1a4>
 800b584:	e776      	b.n	800b474 <rcl_expand_topic_name+0x170>
 800b586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b588:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b58a:	601d      	str	r5, [r3, #0]
 800b58c:	4658      	mov	r0, fp
 800b58e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b590:	4798      	blx	r3
 800b592:	240a      	movs	r4, #10
 800b594:	e78b      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b596:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 800b59a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b59e:	ab14      	add	r3, sp, #80	@ 0x50
 800b5a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f002 f9d0 	bl	800d948 <rcutils_strdup>
 800b5a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	bf08      	it	eq
 800b5ae:	240a      	moveq	r4, #10
 800b5b0:	6018      	str	r0, [r3, #0]
 800b5b2:	e77c      	b.n	800b4ae <rcl_expand_topic_name+0x1aa>
 800b5b4:	08015bb0 	.word	0x08015bb0
 800b5b8:	08015690 	.word	0x08015690
 800b5bc:	080156a8 	.word	0x080156a8
 800b5c0:	080156b0 	.word	0x080156b0
 800b5c4:	080156b8 	.word	0x080156b8
 800b5c8:	08015698 	.word	0x08015698
 800b5cc:	080156a0 	.word	0x080156a0

0800b5d0 <rcl_get_default_topic_name_substitutions>:
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	bf0c      	ite	eq
 800b5d4:	200b      	moveq	r0, #11
 800b5d6:	2000      	movne	r0, #0
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop

0800b5dc <rcl_init>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	1e07      	subs	r7, r0, #0
 800b5e2:	b09f      	sub	sp, #124	@ 0x7c
 800b5e4:	4688      	mov	r8, r1
 800b5e6:	4692      	mov	sl, r2
 800b5e8:	4699      	mov	r9, r3
 800b5ea:	f340 8097 	ble.w	800b71c <rcl_init+0x140>
 800b5ee:	2900      	cmp	r1, #0
 800b5f0:	f000 8097 	beq.w	800b722 <rcl_init+0x146>
 800b5f4:	1f0d      	subs	r5, r1, #4
 800b5f6:	2400      	movs	r4, #0
 800b5f8:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800b5fc:	3401      	adds	r4, #1
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	f000 808f 	beq.w	800b722 <rcl_init+0x146>
 800b604:	42a7      	cmp	r7, r4
 800b606:	d1f7      	bne.n	800b5f8 <rcl_init+0x1c>
 800b608:	f1ba 0f00 	cmp.w	sl, #0
 800b60c:	f000 8089 	beq.w	800b722 <rcl_init+0x146>
 800b610:	f8da 4000 	ldr.w	r4, [sl]
 800b614:	2c00      	cmp	r4, #0
 800b616:	f000 8084 	beq.w	800b722 <rcl_init+0x146>
 800b61a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b61c:	ad19      	add	r5, sp, #100	@ 0x64
 800b61e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	a819      	add	r0, sp, #100	@ 0x64
 800b626:	f7fe fa0b 	bl	8009a40 <rcutils_allocator_is_valid>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d079      	beq.n	800b722 <rcl_init+0x146>
 800b62e:	f1b9 0f00 	cmp.w	r9, #0
 800b632:	d076      	beq.n	800b722 <rcl_init+0x146>
 800b634:	f8d9 3000 	ldr.w	r3, [r9]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d177      	bne.n	800b72c <rcl_init+0x150>
 800b63c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800b640:	2178      	movs	r1, #120	@ 0x78
 800b642:	2001      	movs	r0, #1
 800b644:	4798      	blx	r3
 800b646:	4604      	mov	r4, r0
 800b648:	f8c9 0000 	str.w	r0, [r9]
 800b64c:	2800      	cmp	r0, #0
 800b64e:	f000 80ba 	beq.w	800b7c6 <rcl_init+0x1ea>
 800b652:	a802      	add	r0, sp, #8
 800b654:	f002 fae6 	bl	800dc24 <rmw_get_zero_initialized_context>
 800b658:	a902      	add	r1, sp, #8
 800b65a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b65e:	2250      	movs	r2, #80	@ 0x50
 800b660:	ac19      	add	r4, sp, #100	@ 0x64
 800b662:	f009 f82e 	bl	80146c2 <memcpy>
 800b666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b668:	f8d9 5000 	ldr.w	r5, [r9]
 800b66c:	6826      	ldr	r6, [r4, #0]
 800b66e:	462c      	mov	r4, r5
 800b670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b672:	f105 0114 	add.w	r1, r5, #20
 800b676:	6026      	str	r6, [r4, #0]
 800b678:	4650      	mov	r0, sl
 800b67a:	f000 f931 	bl	800b8e0 <rcl_init_options_copy>
 800b67e:	4606      	mov	r6, r0
 800b680:	2800      	cmp	r0, #0
 800b682:	d144      	bne.n	800b70e <rcl_init+0x132>
 800b684:	f8d9 a000 	ldr.w	sl, [r9]
 800b688:	463c      	mov	r4, r7
 800b68a:	17fd      	asrs	r5, r7, #31
 800b68c:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800b690:	f8ca 0020 	str.w	r0, [sl, #32]
 800b694:	2f00      	cmp	r7, #0
 800b696:	d050      	beq.n	800b73a <rcl_init+0x15e>
 800b698:	f1b8 0f00 	cmp.w	r8, #0
 800b69c:	d04d      	beq.n	800b73a <rcl_init+0x15e>
 800b69e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	2104      	movs	r1, #4
 800b6a6:	4798      	blx	r3
 800b6a8:	f8ca 0020 	str.w	r0, [sl, #32]
 800b6ac:	f8d9 a000 	ldr.w	sl, [r9]
 800b6b0:	f8da 3020 	ldr.w	r3, [sl, #32]
 800b6b4:	46d3      	mov	fp, sl
 800b6b6:	b34b      	cbz	r3, 800b70c <rcl_init+0x130>
 800b6b8:	2f01      	cmp	r7, #1
 800b6ba:	f175 0300 	sbcs.w	r3, r5, #0
 800b6be:	db3c      	blt.n	800b73a <rcl_init+0x15e>
 800b6c0:	f1a8 0804 	sub.w	r8, r8, #4
 800b6c4:	2600      	movs	r6, #0
 800b6c6:	2700      	movs	r7, #0
 800b6c8:	e00c      	b.n	800b6e4 <rcl_init+0x108>
 800b6ca:	f8d8 1000 	ldr.w	r1, [r8]
 800b6ce:	f008 fff8 	bl	80146c2 <memcpy>
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	f147 0700 	adc.w	r7, r7, #0
 800b6d8:	42bd      	cmp	r5, r7
 800b6da:	bf08      	it	eq
 800b6dc:	42b4      	cmpeq	r4, r6
 800b6de:	d02a      	beq.n	800b736 <rcl_init+0x15a>
 800b6e0:	f8d9 b000 	ldr.w	fp, [r9]
 800b6e4:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800b6e8:	f7f4 fd84 	bl	80001f4 <strlen>
 800b6ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ee:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800b6f0:	f8db a020 	ldr.w	sl, [fp, #32]
 800b6f4:	9001      	str	r0, [sp, #4]
 800b6f6:	4798      	blx	r3
 800b6f8:	f8d9 1000 	ldr.w	r1, [r9]
 800b6fc:	9a01      	ldr	r2, [sp, #4]
 800b6fe:	6a09      	ldr	r1, [r1, #32]
 800b700:	00b3      	lsls	r3, r6, #2
 800b702:	f84a 0003 	str.w	r0, [sl, r3]
 800b706:	58c8      	ldr	r0, [r1, r3]
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1de      	bne.n	800b6ca <rcl_init+0xee>
 800b70c:	260a      	movs	r6, #10
 800b70e:	4648      	mov	r0, r9
 800b710:	f7ff fd94 	bl	800b23c <__cleanup_context>
 800b714:	4630      	mov	r0, r6
 800b716:	b01f      	add	sp, #124	@ 0x7c
 800b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71c:	2900      	cmp	r1, #0
 800b71e:	f43f af73 	beq.w	800b608 <rcl_init+0x2c>
 800b722:	260b      	movs	r6, #11
 800b724:	4630      	mov	r0, r6
 800b726:	b01f      	add	sp, #124	@ 0x7c
 800b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72c:	2664      	movs	r6, #100	@ 0x64
 800b72e:	4630      	mov	r0, r6
 800b730:	b01f      	add	sp, #124	@ 0x7c
 800b732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b736:	f8d9 a000 	ldr.w	sl, [r9]
 800b73a:	4a2c      	ldr	r2, [pc, #176]	@ (800b7ec <rcl_init+0x210>)
 800b73c:	6813      	ldr	r3, [r2, #0]
 800b73e:	3301      	adds	r3, #1
 800b740:	d03b      	beq.n	800b7ba <rcl_init+0x1de>
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	4619      	mov	r1, r3
 800b746:	2000      	movs	r0, #0
 800b748:	f8da 4014 	ldr.w	r4, [sl, #20]
 800b74c:	f8c9 3004 	str.w	r3, [r9, #4]
 800b750:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b752:	3301      	adds	r3, #1
 800b754:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800b758:	d039      	beq.n	800b7ce <rcl_init+0x1f2>
 800b75a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b75e:	b94b      	cbnz	r3, 800b774 <rcl_init+0x198>
 800b760:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800b764:	f000 f962 	bl	800ba2c <rcl_get_localhost_only>
 800b768:	4606      	mov	r6, r0
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d1cf      	bne.n	800b70e <rcl_init+0x132>
 800b76e:	f8d9 3000 	ldr.w	r3, [r9]
 800b772:	695c      	ldr	r4, [r3, #20]
 800b774:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b776:	aa18      	add	r2, sp, #96	@ 0x60
 800b778:	a917      	add	r1, sp, #92	@ 0x5c
 800b77a:	f001 f819 	bl	800c7b0 <rcl_validate_enclave_name>
 800b77e:	4606      	mov	r6, r0
 800b780:	2800      	cmp	r0, #0
 800b782:	d1c4      	bne.n	800b70e <rcl_init+0x132>
 800b784:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b786:	bb03      	cbnz	r3, 800b7ca <rcl_init+0x1ee>
 800b788:	f8d9 1000 	ldr.w	r1, [r9]
 800b78c:	694b      	ldr	r3, [r1, #20]
 800b78e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b790:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800b794:	f000 fbf2 	bl	800bf7c <rcl_get_security_options_from_environment>
 800b798:	4606      	mov	r6, r0
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d1b7      	bne.n	800b70e <rcl_init+0x132>
 800b79e:	f8d9 1000 	ldr.w	r1, [r9]
 800b7a2:	6948      	ldr	r0, [r1, #20]
 800b7a4:	3128      	adds	r1, #40	@ 0x28
 800b7a6:	3018      	adds	r0, #24
 800b7a8:	f002 fce2 	bl	800e170 <rmw_init>
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d0b8      	beq.n	800b724 <rcl_init+0x148>
 800b7b2:	f007 f987 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	e7a9      	b.n	800b70e <rcl_init+0x132>
 800b7ba:	2401      	movs	r4, #1
 800b7bc:	4618      	mov	r0, r3
 800b7be:	4621      	mov	r1, r4
 800b7c0:	6014      	str	r4, [r2, #0]
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	e7c0      	b.n	800b748 <rcl_init+0x16c>
 800b7c6:	260a      	movs	r6, #10
 800b7c8:	e7ac      	b.n	800b724 <rcl_init+0x148>
 800b7ca:	2601      	movs	r6, #1
 800b7cc:	e79f      	b.n	800b70e <rcl_init+0x132>
 800b7ce:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b7d2:	f007 f98b 	bl	8012aec <rcl_get_default_domain_id>
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d198      	bne.n	800b70e <rcl_init+0x132>
 800b7dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b7de:	3301      	adds	r3, #1
 800b7e0:	f8d9 3000 	ldr.w	r3, [r9]
 800b7e4:	bf08      	it	eq
 800b7e6:	6260      	streq	r0, [r4, #36]	@ 0x24
 800b7e8:	695c      	ldr	r4, [r3, #20]
 800b7ea:	e7b6      	b.n	800b75a <rcl_init+0x17e>
 800b7ec:	20009148 	.word	0x20009148

0800b7f0 <rcl_get_zero_initialized_init_options>:
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	4770      	bx	lr

0800b7f4 <rcl_init_options_init>:
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7f8:	b091      	sub	sp, #68	@ 0x44
 800b7fa:	af17      	add	r7, sp, #92	@ 0x5c
 800b7fc:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800b800:	2800      	cmp	r0, #0
 800b802:	d044      	beq.n	800b88e <rcl_init_options_init+0x9a>
 800b804:	6803      	ldr	r3, [r0, #0]
 800b806:	4606      	mov	r6, r0
 800b808:	b133      	cbz	r3, 800b818 <rcl_init_options_init+0x24>
 800b80a:	2464      	movs	r4, #100	@ 0x64
 800b80c:	4620      	mov	r0, r4
 800b80e:	b011      	add	sp, #68	@ 0x44
 800b810:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b814:	b004      	add	sp, #16
 800b816:	4770      	bx	lr
 800b818:	4638      	mov	r0, r7
 800b81a:	f7fe f911 	bl	8009a40 <rcutils_allocator_is_valid>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d035      	beq.n	800b88e <rcl_init_options_init+0x9a>
 800b822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b824:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b826:	2050      	movs	r0, #80	@ 0x50
 800b828:	4798      	blx	r3
 800b82a:	4604      	mov	r4, r0
 800b82c:	6030      	str	r0, [r6, #0]
 800b82e:	2800      	cmp	r0, #0
 800b830:	d02f      	beq.n	800b892 <rcl_init_options_init+0x9e>
 800b832:	46bc      	mov	ip, r7
 800b834:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b838:	4625      	mov	r5, r4
 800b83a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b83c:	f8dc 3000 	ldr.w	r3, [ip]
 800b840:	602b      	str	r3, [r5, #0]
 800b842:	a802      	add	r0, sp, #8
 800b844:	ad02      	add	r5, sp, #8
 800b846:	f002 f9f5 	bl	800dc34 <rmw_get_zero_initialized_init_options>
 800b84a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b84c:	3418      	adds	r4, #24
 800b84e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b858:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b85c:	6833      	ldr	r3, [r6, #0]
 800b85e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b862:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800b866:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b86a:	f103 0018 	add.w	r0, r3, #24
 800b86e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b872:	f002 fba3 	bl	800dfbc <rmw_init_options_init>
 800b876:	4604      	mov	r4, r0
 800b878:	2800      	cmp	r0, #0
 800b87a:	d0c7      	beq.n	800b80c <rcl_init_options_init+0x18>
 800b87c:	6830      	ldr	r0, [r6, #0]
 800b87e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b880:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b882:	4798      	blx	r3
 800b884:	4620      	mov	r0, r4
 800b886:	f007 f91d 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b88a:	4604      	mov	r4, r0
 800b88c:	e7be      	b.n	800b80c <rcl_init_options_init+0x18>
 800b88e:	240b      	movs	r4, #11
 800b890:	e7bc      	b.n	800b80c <rcl_init_options_init+0x18>
 800b892:	240a      	movs	r4, #10
 800b894:	e7ba      	b.n	800b80c <rcl_init_options_init+0x18>
 800b896:	bf00      	nop

0800b898 <rcl_init_options_fini>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	b1c0      	cbz	r0, 800b8d0 <rcl_init_options_fini+0x38>
 800b89e:	6804      	ldr	r4, [r0, #0]
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	b1ac      	cbz	r4, 800b8d0 <rcl_init_options_fini+0x38>
 800b8a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8a6:	ad01      	add	r5, sp, #4
 800b8a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	a801      	add	r0, sp, #4
 800b8b0:	f7fe f8c6 	bl	8009a40 <rcutils_allocator_is_valid>
 800b8b4:	b160      	cbz	r0, 800b8d0 <rcl_init_options_fini+0x38>
 800b8b6:	6830      	ldr	r0, [r6, #0]
 800b8b8:	3018      	adds	r0, #24
 800b8ba:	f002 fc19 	bl	800e0f0 <rmw_init_options_fini>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	b950      	cbnz	r0, 800b8d8 <rcl_init_options_fini+0x40>
 800b8c2:	6830      	ldr	r0, [r6, #0]
 800b8c4:	9b02      	ldr	r3, [sp, #8]
 800b8c6:	9905      	ldr	r1, [sp, #20]
 800b8c8:	4798      	blx	r3
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	b006      	add	sp, #24
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}
 800b8d0:	240b      	movs	r4, #11
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	b006      	add	sp, #24
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	f007 f8f4 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	e7f8      	b.n	800b8d2 <rcl_init_options_fini+0x3a>

0800b8e0 <rcl_init_options_copy>:
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e4:	b096      	sub	sp, #88	@ 0x58
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d063      	beq.n	800b9b2 <rcl_init_options_copy+0xd2>
 800b8ea:	6806      	ldr	r6, [r0, #0]
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	d05f      	beq.n	800b9b2 <rcl_init_options_copy+0xd2>
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d05c      	beq.n	800b9b2 <rcl_init_options_copy+0xd2>
 800b8f8:	680b      	ldr	r3, [r1, #0]
 800b8fa:	b123      	cbz	r3, 800b906 <rcl_init_options_copy+0x26>
 800b8fc:	2664      	movs	r6, #100	@ 0x64
 800b8fe:	4630      	mov	r0, r6
 800b900:	b016      	add	sp, #88	@ 0x58
 800b902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b906:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b908:	af11      	add	r7, sp, #68	@ 0x44
 800b90a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b90c:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800b910:	6833      	ldr	r3, [r6, #0]
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	4640      	mov	r0, r8
 800b916:	f7fe f893 	bl	8009a40 <rcutils_allocator_is_valid>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d049      	beq.n	800b9b2 <rcl_init_options_copy+0xd2>
 800b91e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b920:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b922:	2050      	movs	r0, #80	@ 0x50
 800b924:	4798      	blx	r3
 800b926:	4606      	mov	r6, r0
 800b928:	6020      	str	r0, [r4, #0]
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d077      	beq.n	800ba1e <rcl_init_options_copy+0x13e>
 800b92e:	46c4      	mov	ip, r8
 800b930:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b934:	4637      	mov	r7, r6
 800b936:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b938:	f8dc 3000 	ldr.w	r3, [ip]
 800b93c:	603b      	str	r3, [r7, #0]
 800b93e:	a802      	add	r0, sp, #8
 800b940:	af02      	add	r7, sp, #8
 800b942:	f002 f977 	bl	800dc34 <rmw_get_zero_initialized_init_options>
 800b946:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b948:	3618      	adds	r6, #24
 800b94a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b94c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b94e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b950:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b952:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b954:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b958:	ab16      	add	r3, sp, #88	@ 0x58
 800b95a:	e886 0003 	stmia.w	r6, {r0, r1}
 800b95e:	e913 0003 	ldmdb	r3, {r0, r1}
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b968:	f103 0018 	add.w	r0, r3, #24
 800b96c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800b970:	f002 fb24 	bl	800dfbc <rmw_init_options_init>
 800b974:	4606      	mov	r6, r0
 800b976:	bb08      	cbnz	r0, 800b9bc <rcl_init_options_copy+0xdc>
 800b978:	682f      	ldr	r7, [r5, #0]
 800b97a:	f8d4 c000 	ldr.w	ip, [r4]
 800b97e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b980:	4666      	mov	r6, ip
 800b982:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	6033      	str	r3, [r6, #0]
 800b988:	f10c 0018 	add.w	r0, ip, #24
 800b98c:	f002 fbb0 	bl	800e0f0 <rmw_init_options_fini>
 800b990:	4607      	mov	r7, r0
 800b992:	b1f0      	cbz	r0, 800b9d2 <rcl_init_options_copy+0xf2>
 800b994:	f7fe f862 	bl	8009a5c <rcutils_get_error_string>
 800b998:	f7fe f876 	bl	8009a88 <rcutils_reset_error>
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7ff ff7b 	bl	800b898 <rcl_init_options_fini>
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d1aa      	bne.n	800b8fe <rcl_init_options_copy+0x1e>
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f007 f88b 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	e7a5      	b.n	800b8fe <rcl_init_options_copy+0x1e>
 800b9b2:	260b      	movs	r6, #11
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	b016      	add	sp, #88	@ 0x58
 800b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9be:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b9c0:	6820      	ldr	r0, [r4, #0]
 800b9c2:	4798      	blx	r3
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f007 f87d 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0d3      	beq.n	800b978 <rcl_init_options_copy+0x98>
 800b9d0:	e795      	b.n	800b8fe <rcl_init_options_copy+0x1e>
 800b9d2:	a802      	add	r0, sp, #8
 800b9d4:	ae02      	add	r6, sp, #8
 800b9d6:	6827      	ldr	r7, [r4, #0]
 800b9d8:	f002 f92c 	bl	800dc34 <rmw_get_zero_initialized_init_options>
 800b9dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b9de:	3718      	adds	r7, #24
 800b9e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b9e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b9e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b9e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b9e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b9ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b9ee:	682a      	ldr	r2, [r5, #0]
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	e887 0003 	stmia.w	r7, {r0, r1}
 800b9f6:	f102 0018 	add.w	r0, r2, #24
 800b9fa:	f103 0118 	add.w	r1, r3, #24
 800b9fe:	f002 fb35 	bl	800e06c <rmw_init_options_copy>
 800ba02:	4606      	mov	r6, r0
 800ba04:	2800      	cmp	r0, #0
 800ba06:	f43f af7a 	beq.w	800b8fe <rcl_init_options_copy+0x1e>
 800ba0a:	f7fe f827 	bl	8009a5c <rcutils_get_error_string>
 800ba0e:	f7fe f83b 	bl	8009a88 <rcutils_reset_error>
 800ba12:	4620      	mov	r0, r4
 800ba14:	f7ff ff40 	bl	800b898 <rcl_init_options_fini>
 800ba18:	b118      	cbz	r0, 800ba22 <rcl_init_options_copy+0x142>
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	e76f      	b.n	800b8fe <rcl_init_options_copy+0x1e>
 800ba1e:	260a      	movs	r6, #10
 800ba20:	e76d      	b.n	800b8fe <rcl_init_options_copy+0x1e>
 800ba22:	4630      	mov	r0, r6
 800ba24:	f007 f84e 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800ba28:	4606      	mov	r6, r0
 800ba2a:	e768      	b.n	800b8fe <rcl_init_options_copy+0x1e>

0800ba2c <rcl_get_localhost_only>:
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	2300      	movs	r3, #0
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	b1b8      	cbz	r0, 800ba66 <rcl_get_localhost_only+0x3a>
 800ba36:	4604      	mov	r4, r0
 800ba38:	a901      	add	r1, sp, #4
 800ba3a:	480c      	ldr	r0, [pc, #48]	@ (800ba6c <rcl_get_localhost_only+0x40>)
 800ba3c:	f001 fe94 	bl	800d768 <rcutils_get_env>
 800ba40:	b110      	cbz	r0, 800ba48 <rcl_get_localhost_only+0x1c>
 800ba42:	2001      	movs	r0, #1
 800ba44:	b002      	add	sp, #8
 800ba46:	bd10      	pop	{r4, pc}
 800ba48:	9b01      	ldr	r3, [sp, #4]
 800ba4a:	b113      	cbz	r3, 800ba52 <rcl_get_localhost_only+0x26>
 800ba4c:	781a      	ldrb	r2, [r3, #0]
 800ba4e:	2a31      	cmp	r2, #49	@ 0x31
 800ba50:	d004      	beq.n	800ba5c <rcl_get_localhost_only+0x30>
 800ba52:	2302      	movs	r3, #2
 800ba54:	2000      	movs	r0, #0
 800ba56:	7023      	strb	r3, [r4, #0]
 800ba58:	b002      	add	sp, #8
 800ba5a:	bd10      	pop	{r4, pc}
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1f7      	bne.n	800ba52 <rcl_get_localhost_only+0x26>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e7f6      	b.n	800ba54 <rcl_get_localhost_only+0x28>
 800ba66:	200b      	movs	r0, #11
 800ba68:	b002      	add	sp, #8
 800ba6a:	bd10      	pop	{r4, pc}
 800ba6c:	080156c4 	.word	0x080156c4

0800ba70 <rcl_get_zero_initialized_node>:
 800ba70:	4a03      	ldr	r2, [pc, #12]	@ (800ba80 <rcl_get_zero_initialized_node+0x10>)
 800ba72:	4603      	mov	r3, r0
 800ba74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba78:	e883 0003 	stmia.w	r3, {r0, r1}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	4770      	bx	lr
 800ba80:	080156e4 	.word	0x080156e4

0800ba84 <rcl_node_init>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	b09b      	sub	sp, #108	@ 0x6c
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 800ba90:	f04f 0c00 	mov.w	ip, #0
 800ba94:	a815      	add	r0, sp, #84	@ 0x54
 800ba96:	460e      	mov	r6, r1
 800ba98:	4615      	mov	r5, r2
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 800baa0:	f007 f8e0 	bl	8012c64 <rcl_guard_condition_get_default_options>
 800baa4:	f1b8 0f00 	cmp.w	r8, #0
 800baa8:	f000 80fd 	beq.w	800bca6 <rcl_node_init+0x222>
 800baac:	f108 0b04 	add.w	fp, r8, #4
 800bab0:	4658      	mov	r0, fp
 800bab2:	f7fd ffc5 	bl	8009a40 <rcutils_allocator_is_valid>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	f000 80f5 	beq.w	800bca6 <rcl_node_init+0x222>
 800babc:	2e00      	cmp	r6, #0
 800babe:	f000 80f2 	beq.w	800bca6 <rcl_node_init+0x222>
 800bac2:	2d00      	cmp	r5, #0
 800bac4:	f000 80ef 	beq.w	800bca6 <rcl_node_init+0x222>
 800bac8:	2c00      	cmp	r4, #0
 800baca:	f000 80ec 	beq.w	800bca6 <rcl_node_init+0x222>
 800bace:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bad2:	f1b9 0f00 	cmp.w	r9, #0
 800bad6:	f040 8112 	bne.w	800bcfe <rcl_node_init+0x27a>
 800bada:	2f00      	cmp	r7, #0
 800badc:	f000 80e3 	beq.w	800bca6 <rcl_node_init+0x222>
 800bae0:	4638      	mov	r0, r7
 800bae2:	f7ff fba5 	bl	800b230 <rcl_context_is_valid>
 800bae6:	4682      	mov	sl, r0
 800bae8:	2800      	cmp	r0, #0
 800baea:	f000 80e2 	beq.w	800bcb2 <rcl_node_init+0x22e>
 800baee:	464a      	mov	r2, r9
 800baf0:	a914      	add	r1, sp, #80	@ 0x50
 800baf2:	4630      	mov	r0, r6
 800baf4:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 800baf8:	f002 f9b8 	bl	800de6c <rmw_validate_node_name>
 800bafc:	4681      	mov	r9, r0
 800bafe:	2800      	cmp	r0, #0
 800bb00:	f040 80d3 	bne.w	800bcaa <rcl_node_init+0x226>
 800bb04:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f040 8105 	bne.w	800bd16 <rcl_node_init+0x292>
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f7f4 fb71 	bl	80001f4 <strlen>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f040 80d0 	bne.w	800bcb8 <rcl_node_init+0x234>
 800bb18:	4d8e      	ldr	r5, [pc, #568]	@ (800bd54 <rcl_node_init+0x2d0>)
 800bb1a:	a914      	add	r1, sp, #80	@ 0x50
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f002 f986 	bl	800de30 <rmw_validate_namespace>
 800bb24:	4681      	mov	r9, r0
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 80bf 	bne.w	800bcaa <rcl_node_init+0x226>
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f040 80f5 	bne.w	800bd20 <rcl_node_init+0x29c>
 800bb36:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bb3a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	2030      	movs	r0, #48	@ 0x30
 800bb42:	4790      	blx	r2
 800bb44:	4681      	mov	r9, r0
 800bb46:	6060      	str	r0, [r4, #4]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f000 80de 	beq.w	800bd0a <rcl_node_init+0x286>
 800bb4e:	9b07      	ldr	r3, [sp, #28]
 800bb50:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800bb54:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800bb58:	a80a      	add	r0, sp, #40	@ 0x28
 800bb5a:	f000 f92b 	bl	800bdb4 <rcl_node_get_default_options>
 800bb5e:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 800bb62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bb66:	46cc      	mov	ip, r9
 800bb68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bb6c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800bb70:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800bb74:	6861      	ldr	r1, [r4, #4]
 800bb76:	6027      	str	r7, [r4, #0]
 800bb78:	4640      	mov	r0, r8
 800bb7a:	f000 f937 	bl	800bdec <rcl_node_options_copy>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d167      	bne.n	800bc52 <rcl_node_init+0x1ce>
 800bb82:	4628      	mov	r0, r5
 800bb84:	f7f4 fb36 	bl	80001f4 <strlen>
 800bb88:	4428      	add	r0, r5
 800bb8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb8e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800bb92:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb94:	bf08      	it	eq
 800bb96:	4970      	ldreq	r1, [pc, #448]	@ (800bd58 <rcl_node_init+0x2d4>)
 800bb98:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bb9c:	bf18      	it	ne
 800bb9e:	496f      	ldrne	r1, [pc, #444]	@ (800bd5c <rcl_node_init+0x2d8>)
 800bba0:	9604      	str	r6, [sp, #16]
 800bba2:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800bba6:	e9cd 3200 	strd	r3, r2, [sp]
 800bbaa:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800bbae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bbb2:	f001 fd9f 	bl	800d6f4 <rcutils_format_string_limit>
 800bbb6:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 800bbba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bbbe:	f8d9 3000 	ldr.w	r3, [r9]
 800bbc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbc4:	1c59      	adds	r1, r3, #1
 800bbc6:	f000 80b7 	beq.w	800bd38 <rcl_node_init+0x2b4>
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	f8c9 301c 	str.w	r3, [r9, #28]
 800bbd0:	6952      	ldr	r2, [r2, #20]
 800bbd2:	6821      	ldr	r1, [r4, #0]
 800bbd4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800bbd8:	6808      	ldr	r0, [r1, #0]
 800bbda:	f1a2 0201 	sub.w	r2, r2, #1
 800bbde:	fab2 f282 	clz	r2, r2
 800bbe2:	0952      	lsrs	r2, r2, #5
 800bbe4:	9200      	str	r2, [sp, #0]
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	3028      	adds	r0, #40	@ 0x28
 800bbea:	462a      	mov	r2, r5
 800bbec:	f002 fca4 	bl	800e538 <rmw_create_node>
 800bbf0:	6863      	ldr	r3, [r4, #4]
 800bbf2:	f8c9 0020 	str.w	r0, [r9, #32]
 800bbf6:	6a18      	ldr	r0, [r3, #32]
 800bbf8:	b368      	cbz	r0, 800bc56 <rcl_node_init+0x1d2>
 800bbfa:	f002 fd31 	bl	800e660 <rmw_node_get_graph_guard_condition>
 800bbfe:	4681      	mov	r9, r0
 800bc00:	b338      	cbz	r0, 800bc52 <rcl_node_init+0x1ce>
 800bc02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc06:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bc0a:	6866      	ldr	r6, [r4, #4]
 800bc0c:	2008      	movs	r0, #8
 800bc0e:	4798      	blx	r3
 800bc10:	6863      	ldr	r3, [r4, #4]
 800bc12:	6270      	str	r0, [r6, #36]	@ 0x24
 800bc14:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800bc16:	b1f6      	cbz	r6, 800bc56 <rcl_node_init+0x1d2>
 800bc18:	a808      	add	r0, sp, #32
 800bc1a:	f006 ff9b 	bl	8012b54 <rcl_get_zero_initialized_guard_condition>
 800bc1e:	a808      	add	r0, sp, #32
 800bc20:	c803      	ldmia	r0, {r0, r1}
 800bc22:	e886 0003 	stmia.w	r6, {r0, r1}
 800bc26:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800bc2a:	ae15      	add	r6, sp, #84	@ 0x54
 800bc2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bc2e:	f8db 3000 	ldr.w	r3, [fp]
 800bc32:	6033      	str	r3, [r6, #0]
 800bc34:	ab1a      	add	r3, sp, #104	@ 0x68
 800bc36:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800bc3a:	6866      	ldr	r6, [r4, #4]
 800bc3c:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 800bc3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bc42:	4649      	mov	r1, r9
 800bc44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bc46:	4630      	mov	r0, r6
 800bc48:	463a      	mov	r2, r7
 800bc4a:	f006 ff8d 	bl	8012b68 <rcl_guard_condition_init_from_rmw>
 800bc4e:	4681      	mov	r9, r0
 800bc50:	b328      	cbz	r0, 800bc9e <rcl_node_init+0x21a>
 800bc52:	6863      	ldr	r3, [r4, #4]
 800bc54:	b1f3      	cbz	r3, 800bc94 <rcl_node_init+0x210>
 800bc56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bc58:	b128      	cbz	r0, 800bc66 <rcl_node_init+0x1e2>
 800bc5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc5e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bc62:	4798      	blx	r3
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	6a18      	ldr	r0, [r3, #32]
 800bc68:	b110      	cbz	r0, 800bc70 <rcl_node_init+0x1ec>
 800bc6a:	f002 fc7d 	bl	800e568 <rmw_destroy_node>
 800bc6e:	6863      	ldr	r3, [r4, #4]
 800bc70:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bc72:	b148      	cbz	r0, 800bc88 <rcl_node_init+0x204>
 800bc74:	f006 ffd0 	bl	8012c18 <rcl_guard_condition_fini>
 800bc78:	6862      	ldr	r2, [r4, #4]
 800bc7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc7e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800bc80:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bc84:	4798      	blx	r3
 800bc86:	6863      	ldr	r3, [r4, #4]
 800bc88:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bc8c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bc90:	4618      	mov	r0, r3
 800bc92:	4790      	blx	r2
 800bc94:	2300      	movs	r3, #0
 800bc96:	e9c4 3300 	strd	r3, r3, [r4]
 800bc9a:	f04f 0901 	mov.w	r9, #1
 800bc9e:	f1ba 0f00 	cmp.w	sl, #0
 800bca2:	d125      	bne.n	800bcf0 <rcl_node_init+0x26c>
 800bca4:	e001      	b.n	800bcaa <rcl_node_init+0x226>
 800bca6:	f04f 090b 	mov.w	r9, #11
 800bcaa:	4648      	mov	r0, r9
 800bcac:	b01b      	add	sp, #108	@ 0x6c
 800bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb2:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800bcb6:	e7f8      	b.n	800bcaa <rcl_node_init+0x226>
 800bcb8:	782b      	ldrb	r3, [r5, #0]
 800bcba:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcbc:	f43f af2d 	beq.w	800bb1a <rcl_node_init+0x96>
 800bcc0:	4927      	ldr	r1, [pc, #156]	@ (800bd60 <rcl_node_init+0x2dc>)
 800bcc2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bccc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bcd0:	9503      	str	r5, [sp, #12]
 800bcd2:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800bcd6:	f001 fd0d 	bl	800d6f4 <rcutils_format_string_limit>
 800bcda:	4605      	mov	r5, r0
 800bcdc:	b348      	cbz	r0, 800bd32 <rcl_node_init+0x2ae>
 800bcde:	2200      	movs	r2, #0
 800bce0:	a914      	add	r1, sp, #80	@ 0x50
 800bce2:	9214      	str	r2, [sp, #80]	@ 0x50
 800bce4:	f002 f8a4 	bl	800de30 <rmw_validate_namespace>
 800bce8:	4681      	mov	r9, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f43f af1f 	beq.w	800bb2e <rcl_node_init+0xaa>
 800bcf0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcf4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	4798      	blx	r3
 800bcfc:	e7d5      	b.n	800bcaa <rcl_node_init+0x226>
 800bcfe:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800bd02:	4648      	mov	r0, r9
 800bd04:	b01b      	add	sp, #108	@ 0x6c
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	f04f 090a 	mov.w	r9, #10
 800bd0e:	f1ba 0f00 	cmp.w	sl, #0
 800bd12:	d1ed      	bne.n	800bcf0 <rcl_node_init+0x26c>
 800bd14:	e7c9      	b.n	800bcaa <rcl_node_init+0x226>
 800bd16:	f002 f8fb 	bl	800df10 <rmw_node_name_validation_result_string>
 800bd1a:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800bd1e:	e7c4      	b.n	800bcaa <rcl_node_init+0x226>
 800bd20:	4618      	mov	r0, r3
 800bd22:	f002 f897 	bl	800de54 <rmw_namespace_validation_result_string>
 800bd26:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800bd2a:	f1ba 0f00 	cmp.w	sl, #0
 800bd2e:	d1df      	bne.n	800bcf0 <rcl_node_init+0x26c>
 800bd30:	e7bb      	b.n	800bcaa <rcl_node_init+0x226>
 800bd32:	f04f 090a 	mov.w	r9, #10
 800bd36:	e7b8      	b.n	800bcaa <rcl_node_init+0x226>
 800bd38:	a813      	add	r0, sp, #76	@ 0x4c
 800bd3a:	f006 fed7 	bl	8012aec <rcl_get_default_domain_id>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d187      	bne.n	800bc52 <rcl_node_init+0x1ce>
 800bd42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd44:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	bf04      	itt	eq
 800bd4c:	9013      	streq	r0, [sp, #76]	@ 0x4c
 800bd4e:	4603      	moveq	r3, r0
 800bd50:	e73b      	b.n	800bbca <rcl_node_init+0x146>
 800bd52:	bf00      	nop
 800bd54:	080156dc 	.word	0x080156dc
 800bd58:	08015698 	.word	0x08015698
 800bd5c:	080156a0 	.word	0x080156a0
 800bd60:	080156e0 	.word	0x080156e0

0800bd64 <rcl_node_is_valid>:
 800bd64:	b130      	cbz	r0, 800bd74 <rcl_node_is_valid+0x10>
 800bd66:	6843      	ldr	r3, [r0, #4]
 800bd68:	b123      	cbz	r3, 800bd74 <rcl_node_is_valid+0x10>
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	b113      	cbz	r3, 800bd74 <rcl_node_is_valid+0x10>
 800bd6e:	6800      	ldr	r0, [r0, #0]
 800bd70:	f7ff ba5e 	b.w	800b230 <rcl_context_is_valid>
 800bd74:	2000      	movs	r0, #0
 800bd76:	4770      	bx	lr

0800bd78 <rcl_node_get_name>:
 800bd78:	b120      	cbz	r0, 800bd84 <rcl_node_get_name+0xc>
 800bd7a:	6840      	ldr	r0, [r0, #4]
 800bd7c:	b110      	cbz	r0, 800bd84 <rcl_node_get_name+0xc>
 800bd7e:	6a00      	ldr	r0, [r0, #32]
 800bd80:	b100      	cbz	r0, 800bd84 <rcl_node_get_name+0xc>
 800bd82:	6880      	ldr	r0, [r0, #8]
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop

0800bd88 <rcl_node_get_namespace>:
 800bd88:	b120      	cbz	r0, 800bd94 <rcl_node_get_namespace+0xc>
 800bd8a:	6840      	ldr	r0, [r0, #4]
 800bd8c:	b110      	cbz	r0, 800bd94 <rcl_node_get_namespace+0xc>
 800bd8e:	6a00      	ldr	r0, [r0, #32]
 800bd90:	b100      	cbz	r0, 800bd94 <rcl_node_get_namespace+0xc>
 800bd92:	68c0      	ldr	r0, [r0, #12]
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop

0800bd98 <rcl_node_get_options>:
 800bd98:	b128      	cbz	r0, 800bda6 <rcl_node_get_options+0xe>
 800bd9a:	6840      	ldr	r0, [r0, #4]
 800bd9c:	b118      	cbz	r0, 800bda6 <rcl_node_get_options+0xe>
 800bd9e:	6a03      	ldr	r3, [r0, #32]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	bf08      	it	eq
 800bda4:	2000      	moveq	r0, #0
 800bda6:	4770      	bx	lr

0800bda8 <rcl_node_get_rmw_handle>:
 800bda8:	b110      	cbz	r0, 800bdb0 <rcl_node_get_rmw_handle+0x8>
 800bdaa:	6840      	ldr	r0, [r0, #4]
 800bdac:	b100      	cbz	r0, 800bdb0 <rcl_node_get_rmw_handle+0x8>
 800bdae:	6a00      	ldr	r0, [r0, #32]
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop

0800bdb4 <rcl_node_get_default_options>:
 800bdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	4607      	mov	r7, r0
 800bdba:	466d      	mov	r5, sp
 800bdbc:	4668      	mov	r0, sp
 800bdbe:	f7fd fe31 	bl	8009a24 <rcutils_get_default_allocator>
 800bdc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdc4:	4c08      	ldr	r4, [pc, #32]	@ (800bde8 <rcl_node_get_default_options+0x34>)
 800bdc6:	f8d5 c000 	ldr.w	ip, [r5]
 800bdca:	1d26      	adds	r6, r4, #4
 800bdcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bdce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdd0:	463d      	mov	r5, r7
 800bdd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdd4:	f8c6 c000 	str.w	ip, [r6]
 800bdd8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bddc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bde0:	4638      	mov	r0, r7
 800bde2:	b007      	add	sp, #28
 800bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde6:	bf00      	nop
 800bde8:	2000010c 	.word	0x2000010c

0800bdec <rcl_node_options_copy>:
 800bdec:	b1c8      	cbz	r0, 800be22 <rcl_node_options_copy+0x36>
 800bdee:	b4f0      	push	{r4, r5, r6, r7}
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	b199      	cbz	r1, 800be1c <rcl_node_options_copy+0x30>
 800bdf4:	4288      	cmp	r0, r1
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	d010      	beq.n	800be1c <rcl_node_options_copy+0x30>
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800be02:	f844 3b04 	str.w	r3, [r4], #4
 800be06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be0a:	7e32      	ldrb	r2, [r6, #24]
 800be0c:	6829      	ldr	r1, [r5, #0]
 800be0e:	7e73      	ldrb	r3, [r6, #25]
 800be10:	6021      	str	r1, [r4, #0]
 800be12:	2000      	movs	r0, #0
 800be14:	763a      	strb	r2, [r7, #24]
 800be16:	767b      	strb	r3, [r7, #25]
 800be18:	bcf0      	pop	{r4, r5, r6, r7}
 800be1a:	4770      	bx	lr
 800be1c:	200b      	movs	r0, #11
 800be1e:	bcf0      	pop	{r4, r5, r6, r7}
 800be20:	4770      	bx	lr
 800be22:	200b      	movs	r0, #11
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop

0800be28 <exact_match_lookup>:
 800be28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be2a:	f102 0708 	add.w	r7, r2, #8
 800be2e:	460b      	mov	r3, r1
 800be30:	4614      	mov	r4, r2
 800be32:	4606      	mov	r6, r0
 800be34:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800be38:	b085      	sub	sp, #20
 800be3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be3e:	4618      	mov	r0, r3
 800be40:	4918      	ldr	r1, [pc, #96]	@ (800bea4 <exact_match_lookup+0x7c>)
 800be42:	e894 000c 	ldmia.w	r4, {r2, r3}
 800be46:	f001 fc47 	bl	800d6d8 <rcutils_join_path>
 800be4a:	7833      	ldrb	r3, [r6, #0]
 800be4c:	2b2f      	cmp	r3, #47	@ 0x2f
 800be4e:	4605      	mov	r5, r0
 800be50:	d021      	beq.n	800be96 <exact_match_lookup+0x6e>
 800be52:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800be56:	e88d 0003 	stmia.w	sp, {r0, r1}
 800be5a:	1c70      	adds	r0, r6, #1
 800be5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800be60:	f001 fc40 	bl	800d6e4 <rcutils_to_native_path>
 800be64:	4606      	mov	r6, r0
 800be66:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800be6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be6e:	4631      	mov	r1, r6
 800be70:	e894 000c 	ldmia.w	r4, {r2, r3}
 800be74:	4628      	mov	r0, r5
 800be76:	f001 fc2f 	bl	800d6d8 <rcutils_join_path>
 800be7a:	6862      	ldr	r2, [r4, #4]
 800be7c:	6921      	ldr	r1, [r4, #16]
 800be7e:	4603      	mov	r3, r0
 800be80:	4630      	mov	r0, r6
 800be82:	461e      	mov	r6, r3
 800be84:	4790      	blx	r2
 800be86:	4628      	mov	r0, r5
 800be88:	6863      	ldr	r3, [r4, #4]
 800be8a:	6921      	ldr	r1, [r4, #16]
 800be8c:	4798      	blx	r3
 800be8e:	4635      	mov	r5, r6
 800be90:	4628      	mov	r0, r5
 800be92:	b005      	add	sp, #20
 800be94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be96:	7873      	ldrb	r3, [r6, #1]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1da      	bne.n	800be52 <exact_match_lookup+0x2a>
 800be9c:	4628      	mov	r0, r5
 800be9e:	b005      	add	sp, #20
 800bea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea2:	bf00      	nop
 800bea4:	08015728 	.word	0x08015728

0800bea8 <rcl_get_secure_root>:
 800bea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beac:	b085      	sub	sp, #20
 800beae:	b168      	cbz	r0, 800becc <rcl_get_secure_root+0x24>
 800beb0:	4607      	mov	r7, r0
 800beb2:	4608      	mov	r0, r1
 800beb4:	460c      	mov	r4, r1
 800beb6:	f7fd fdc3 	bl	8009a40 <rcutils_allocator_is_valid>
 800beba:	b138      	cbz	r0, 800becc <rcl_get_secure_root+0x24>
 800bebc:	2300      	movs	r3, #0
 800bebe:	482d      	ldr	r0, [pc, #180]	@ (800bf74 <rcl_get_secure_root+0xcc>)
 800bec0:	9303      	str	r3, [sp, #12]
 800bec2:	a903      	add	r1, sp, #12
 800bec4:	f001 fc50 	bl	800d768 <rcutils_get_env>
 800bec8:	4605      	mov	r5, r0
 800beca:	b120      	cbz	r0, 800bed6 <rcl_get_secure_root+0x2e>
 800becc:	2500      	movs	r5, #0
 800bece:	4628      	mov	r0, r5
 800bed0:	b005      	add	sp, #20
 800bed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d0f6      	beq.n	800becc <rcl_get_secure_root+0x24>
 800bede:	f104 090c 	add.w	r9, r4, #12
 800bee2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800bee6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800beea:	4618      	mov	r0, r3
 800beec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800bef0:	f001 fd2a 	bl	800d948 <rcutils_strdup>
 800bef4:	4680      	mov	r8, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d0e8      	beq.n	800becc <rcl_get_secure_root+0x24>
 800befa:	481f      	ldr	r0, [pc, #124]	@ (800bf78 <rcl_get_secure_root+0xd0>)
 800befc:	9503      	str	r5, [sp, #12]
 800befe:	a903      	add	r1, sp, #12
 800bf00:	f001 fc32 	bl	800d768 <rcutils_get_env>
 800bf04:	b160      	cbz	r0, 800bf20 <rcl_get_secure_root+0x78>
 800bf06:	2600      	movs	r6, #0
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	6921      	ldr	r1, [r4, #16]
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4798      	blx	r3
 800bf10:	4640      	mov	r0, r8
 800bf12:	6863      	ldr	r3, [r4, #4]
 800bf14:	6921      	ldr	r1, [r4, #16]
 800bf16:	4798      	blx	r3
 800bf18:	4628      	mov	r0, r5
 800bf1a:	b005      	add	sp, #20
 800bf1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	781e      	ldrb	r6, [r3, #0]
 800bf24:	b1f6      	cbz	r6, 800bf64 <rcl_get_secure_root+0xbc>
 800bf26:	e899 0003 	ldmia.w	r9, {r0, r1}
 800bf2a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800bf34:	f001 fd08 	bl	800d948 <rcutils_strdup>
 800bf38:	4606      	mov	r6, r0
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d0e3      	beq.n	800bf06 <rcl_get_secure_root+0x5e>
 800bf3e:	4622      	mov	r2, r4
 800bf40:	4641      	mov	r1, r8
 800bf42:	f7ff ff71 	bl	800be28 <exact_match_lookup>
 800bf46:	4605      	mov	r5, r0
 800bf48:	2d00      	cmp	r5, #0
 800bf4a:	d0dd      	beq.n	800bf08 <rcl_get_secure_root+0x60>
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f001 fbc1 	bl	800d6d4 <rcutils_is_directory>
 800bf52:	4607      	mov	r7, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d1d7      	bne.n	800bf08 <rcl_get_secure_root+0x60>
 800bf58:	4628      	mov	r0, r5
 800bf5a:	6863      	ldr	r3, [r4, #4]
 800bf5c:	6921      	ldr	r1, [r4, #16]
 800bf5e:	4798      	blx	r3
 800bf60:	463d      	mov	r5, r7
 800bf62:	e7d1      	b.n	800bf08 <rcl_get_secure_root+0x60>
 800bf64:	4638      	mov	r0, r7
 800bf66:	4622      	mov	r2, r4
 800bf68:	4641      	mov	r1, r8
 800bf6a:	f7ff ff5d 	bl	800be28 <exact_match_lookup>
 800bf6e:	4605      	mov	r5, r0
 800bf70:	e7ea      	b.n	800bf48 <rcl_get_secure_root+0xa0>
 800bf72:	bf00      	nop
 800bf74:	08015734 	.word	0x08015734
 800bf78:	0801574c 	.word	0x0801574c

0800bf7c <rcl_get_security_options_from_environment>:
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	b082      	sub	sp, #8
 800bf82:	4607      	mov	r7, r0
 800bf84:	4688      	mov	r8, r1
 800bf86:	2400      	movs	r4, #0
 800bf88:	481d      	ldr	r0, [pc, #116]	@ (800c000 <rcl_get_security_options_from_environment+0x84>)
 800bf8a:	9401      	str	r4, [sp, #4]
 800bf8c:	a901      	add	r1, sp, #4
 800bf8e:	4616      	mov	r6, r2
 800bf90:	f001 fbea 	bl	800d768 <rcutils_get_env>
 800bf94:	b120      	cbz	r0, 800bfa0 <rcl_get_security_options_from_environment+0x24>
 800bf96:	2501      	movs	r5, #1
 800bf98:	4628      	mov	r0, r5
 800bf9a:	b002      	add	sp, #8
 800bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa0:	4918      	ldr	r1, [pc, #96]	@ (800c004 <rcl_get_security_options_from_environment+0x88>)
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	9801      	ldr	r0, [sp, #4]
 800bfa6:	f7f4 f91b 	bl	80001e0 <strcmp>
 800bfaa:	4605      	mov	r5, r0
 800bfac:	b9c8      	cbnz	r0, 800bfe2 <rcl_get_security_options_from_environment+0x66>
 800bfae:	9001      	str	r0, [sp, #4]
 800bfb0:	b1ee      	cbz	r6, 800bfee <rcl_get_security_options_from_environment+0x72>
 800bfb2:	4815      	ldr	r0, [pc, #84]	@ (800c008 <rcl_get_security_options_from_environment+0x8c>)
 800bfb4:	a901      	add	r1, sp, #4
 800bfb6:	f001 fbd7 	bl	800d768 <rcutils_get_env>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d1eb      	bne.n	800bf96 <rcl_get_security_options_from_environment+0x1a>
 800bfbe:	4913      	ldr	r1, [pc, #76]	@ (800c00c <rcl_get_security_options_from_environment+0x90>)
 800bfc0:	9801      	ldr	r0, [sp, #4]
 800bfc2:	f7f4 f90d 	bl	80001e0 <strcmp>
 800bfc6:	fab0 f080 	clz	r0, r0
 800bfca:	0940      	lsrs	r0, r0, #5
 800bfcc:	7030      	strb	r0, [r6, #0]
 800bfce:	4641      	mov	r1, r8
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	f7ff ff69 	bl	800bea8 <rcl_get_secure_root>
 800bfd6:	b160      	cbz	r0, 800bff2 <rcl_get_security_options_from_environment+0x76>
 800bfd8:	6070      	str	r0, [r6, #4]
 800bfda:	4628      	mov	r0, r5
 800bfdc:	b002      	add	sp, #8
 800bfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe2:	4625      	mov	r5, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	7034      	strb	r4, [r6, #0]
 800bfe8:	b002      	add	sp, #8
 800bfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfee:	250b      	movs	r5, #11
 800bff0:	e7d2      	b.n	800bf98 <rcl_get_security_options_from_environment+0x1c>
 800bff2:	7835      	ldrb	r5, [r6, #0]
 800bff4:	f1a5 0501 	sub.w	r5, r5, #1
 800bff8:	fab5 f585 	clz	r5, r5
 800bffc:	096d      	lsrs	r5, r5, #5
 800bffe:	e7cb      	b.n	800bf98 <rcl_get_security_options_from_environment+0x1c>
 800c000:	080156ec 	.word	0x080156ec
 800c004:	08015700 	.word	0x08015700
 800c008:	08015708 	.word	0x08015708
 800c00c:	08015720 	.word	0x08015720

0800c010 <rcl_service_get_rmw_handle>:
 800c010:	b110      	cbz	r0, 800c018 <rcl_service_get_rmw_handle+0x8>
 800c012:	6800      	ldr	r0, [r0, #0]
 800c014:	b100      	cbz	r0, 800c018 <rcl_service_get_rmw_handle+0x8>
 800c016:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop

0800c01c <rcl_take_request>:
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01e:	460e      	mov	r6, r1
 800c020:	460c      	mov	r4, r1
 800c022:	4607      	mov	r7, r0
 800c024:	4694      	mov	ip, r2
 800c026:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c028:	b08d      	sub	sp, #52	@ 0x34
 800c02a:	ad06      	add	r5, sp, #24
 800c02c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c02e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c032:	e885 0003 	stmia.w	r5, {r0, r1}
 800c036:	b1e7      	cbz	r7, 800c072 <rcl_take_request+0x56>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	b1d3      	cbz	r3, 800c072 <rcl_take_request+0x56>
 800c03c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c03e:	b1c0      	cbz	r0, 800c072 <rcl_take_request+0x56>
 800c040:	4662      	mov	r2, ip
 800c042:	b30a      	cbz	r2, 800c088 <rcl_take_request+0x6c>
 800c044:	2500      	movs	r5, #0
 800c046:	f10d 0307 	add.w	r3, sp, #7
 800c04a:	a902      	add	r1, sp, #8
 800c04c:	f88d 5007 	strb.w	r5, [sp, #7]
 800c050:	f002 fb5c 	bl	800e70c <rmw_take_request>
 800c054:	4606      	mov	r6, r0
 800c056:	b178      	cbz	r0, 800c078 <rcl_take_request+0x5c>
 800c058:	280a      	cmp	r0, #10
 800c05a:	bf18      	it	ne
 800c05c:	2601      	movne	r6, #1
 800c05e:	ad06      	add	r5, sp, #24
 800c060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c064:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c068:	e884 0003 	stmia.w	r4, {r0, r1}
 800c06c:	4630      	mov	r0, r6
 800c06e:	b00d      	add	sp, #52	@ 0x34
 800c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c072:	f44f 7616 	mov.w	r6, #600	@ 0x258
 800c076:	e7f2      	b.n	800c05e <rcl_take_request+0x42>
 800c078:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c07c:	f240 2359 	movw	r3, #601	@ 0x259
 800c080:	2a00      	cmp	r2, #0
 800c082:	bf08      	it	eq
 800c084:	461e      	moveq	r6, r3
 800c086:	e7ea      	b.n	800c05e <rcl_take_request+0x42>
 800c088:	260b      	movs	r6, #11
 800c08a:	e7e8      	b.n	800c05e <rcl_take_request+0x42>

0800c08c <rcl_send_response>:
 800c08c:	b160      	cbz	r0, 800c0a8 <rcl_send_response+0x1c>
 800c08e:	6800      	ldr	r0, [r0, #0]
 800c090:	b150      	cbz	r0, 800c0a8 <rcl_send_response+0x1c>
 800c092:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c094:	b140      	cbz	r0, 800c0a8 <rcl_send_response+0x1c>
 800c096:	b151      	cbz	r1, 800c0ae <rcl_send_response+0x22>
 800c098:	b510      	push	{r4, lr}
 800c09a:	b152      	cbz	r2, 800c0b2 <rcl_send_response+0x26>
 800c09c:	f002 fb94 	bl	800e7c8 <rmw_send_response>
 800c0a0:	3800      	subs	r0, #0
 800c0a2:	bf18      	it	ne
 800c0a4:	2001      	movne	r0, #1
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800c0ac:	4770      	bx	lr
 800c0ae:	200b      	movs	r0, #11
 800c0b0:	4770      	bx	lr
 800c0b2:	200b      	movs	r0, #11
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	bf00      	nop

0800c0b8 <rcl_get_zero_initialized_subscription>:
 800c0b8:	4b01      	ldr	r3, [pc, #4]	@ (800c0c0 <rcl_get_zero_initialized_subscription+0x8>)
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	0801576c 	.word	0x0801576c

0800c0c4 <rcl_subscription_init>:
 800c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	b091      	sub	sp, #68	@ 0x44
 800c0ca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800c0cc:	b1d7      	cbz	r7, 800c104 <rcl_subscription_init+0x40>
 800c0ce:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4648      	mov	r0, r9
 800c0d6:	4688      	mov	r8, r1
 800c0d8:	4616      	mov	r6, r2
 800c0da:	461d      	mov	r5, r3
 800c0dc:	f7fd fcb0 	bl	8009a40 <rcutils_allocator_is_valid>
 800c0e0:	b180      	cbz	r0, 800c104 <rcl_subscription_init+0x40>
 800c0e2:	b17c      	cbz	r4, 800c104 <rcl_subscription_init+0x40>
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	f7ff fe3d 	bl	800bd64 <rcl_node_is_valid>
 800c0ea:	b380      	cbz	r0, 800c14e <rcl_subscription_init+0x8a>
 800c0ec:	b156      	cbz	r6, 800c104 <rcl_subscription_init+0x40>
 800c0ee:	b14d      	cbz	r5, 800c104 <rcl_subscription_init+0x40>
 800c0f0:	f8d4 a000 	ldr.w	sl, [r4]
 800c0f4:	f1ba 0f00 	cmp.w	sl, #0
 800c0f8:	d009      	beq.n	800c10e <rcl_subscription_init+0x4a>
 800c0fa:	2564      	movs	r5, #100	@ 0x64
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	b011      	add	sp, #68	@ 0x44
 800c100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c104:	250b      	movs	r5, #11
 800c106:	4628      	mov	r0, r5
 800c108:	b011      	add	sp, #68	@ 0x44
 800c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10e:	46ce      	mov	lr, r9
 800c110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c114:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800c118:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c11c:	f8de 3000 	ldr.w	r3, [lr]
 800c120:	f8cc 3000 	str.w	r3, [ip]
 800c124:	f001 fc4e 	bl	800d9c4 <rcutils_get_zero_initialized_string_map>
 800c128:	ab10      	add	r3, sp, #64	@ 0x40
 800c12a:	4684      	mov	ip, r0
 800c12c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c130:	f8cd c020 	str.w	ip, [sp, #32]
 800c134:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c138:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800c13c:	4651      	mov	r1, sl
 800c13e:	a808      	add	r0, sp, #32
 800c140:	f001 fcba 	bl	800dab8 <rcutils_string_map_init>
 800c144:	b140      	cbz	r0, 800c158 <rcl_subscription_init+0x94>
 800c146:	280a      	cmp	r0, #10
 800c148:	d011      	beq.n	800c16e <rcl_subscription_init+0xaa>
 800c14a:	2501      	movs	r5, #1
 800c14c:	e7db      	b.n	800c106 <rcl_subscription_init+0x42>
 800c14e:	25c8      	movs	r5, #200	@ 0xc8
 800c150:	4628      	mov	r0, r5
 800c152:	b011      	add	sp, #68	@ 0x44
 800c154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c158:	a808      	add	r0, sp, #32
 800c15a:	f7ff fa39 	bl	800b5d0 <rcl_get_default_topic_name_substitutions>
 800c15e:	4682      	mov	sl, r0
 800c160:	b138      	cbz	r0, 800c172 <rcl_subscription_init+0xae>
 800c162:	a808      	add	r0, sp, #32
 800c164:	f001 fce8 	bl	800db38 <rcutils_string_map_fini>
 800c168:	f1ba 0f0a 	cmp.w	sl, #10
 800c16c:	d1ed      	bne.n	800c14a <rcl_subscription_init+0x86>
 800c16e:	250a      	movs	r5, #10
 800c170:	e7c9      	b.n	800c106 <rcl_subscription_init+0x42>
 800c172:	4640      	mov	r0, r8
 800c174:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800c178:	f7ff fdfe 	bl	800bd78 <rcl_node_get_name>
 800c17c:	4682      	mov	sl, r0
 800c17e:	4640      	mov	r0, r8
 800c180:	f7ff fe02 	bl	800bd88 <rcl_node_get_namespace>
 800c184:	4686      	mov	lr, r0
 800c186:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800c18a:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800c18e:	46ec      	mov	ip, sp
 800c190:	f8cd b014 	str.w	fp, [sp, #20]
 800c194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c198:	f8d9 3000 	ldr.w	r3, [r9]
 800c19c:	f8cc 3000 	str.w	r3, [ip]
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	4651      	mov	r1, sl
 800c1a4:	4672      	mov	r2, lr
 800c1a6:	ab08      	add	r3, sp, #32
 800c1a8:	f7ff f8ac 	bl	800b304 <rcl_expand_topic_name>
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	a808      	add	r0, sp, #32
 800c1b0:	f001 fcc2 	bl	800db38 <rcutils_string_map_fini>
 800c1b4:	b920      	cbnz	r0, 800c1c0 <rcl_subscription_init+0xfc>
 800c1b6:	b15d      	cbz	r5, 800c1d0 <rcl_subscription_init+0x10c>
 800c1b8:	2d67      	cmp	r5, #103	@ 0x67
 800c1ba:	d002      	beq.n	800c1c2 <rcl_subscription_init+0xfe>
 800c1bc:	2d69      	cmp	r5, #105	@ 0x69
 800c1be:	d05a      	beq.n	800c276 <rcl_subscription_init+0x1b2>
 800c1c0:	2501      	movs	r5, #1
 800c1c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d09e      	beq.n	800c106 <rcl_subscription_init+0x42>
 800c1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c1cc:	4798      	blx	r3
 800c1ce:	e79a      	b.n	800c106 <rcl_subscription_init+0x42>
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	f7ff fde1 	bl	800bd98 <rcl_node_get_options>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d0f2      	beq.n	800c1c0 <rcl_subscription_init+0xfc>
 800c1da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1dc:	f7f4 f80a 	bl	80001f4 <strlen>
 800c1e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	4798      	blx	r3
 800c1e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1ea:	9107      	str	r1, [sp, #28]
 800c1ec:	4681      	mov	r9, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	f7f4 f800 	bl	80001f4 <strlen>
 800c1f4:	9907      	ldr	r1, [sp, #28]
 800c1f6:	1c42      	adds	r2, r0, #1
 800c1f8:	4648      	mov	r0, r9
 800c1fa:	f008 fa62 	bl	80146c2 <memcpy>
 800c1fe:	462a      	mov	r2, r5
 800c200:	4648      	mov	r0, r9
 800c202:	a90a      	add	r1, sp, #40	@ 0x28
 800c204:	f001 fd40 	bl	800dc88 <rmw_validate_full_topic_name>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d132      	bne.n	800c272 <rcl_subscription_init+0x1ae>
 800c20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d133      	bne.n	800c27a <rcl_subscription_init+0x1b6>
 800c212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c214:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c216:	20c8      	movs	r0, #200	@ 0xc8
 800c218:	4798      	blx	r3
 800c21a:	6020      	str	r0, [r4, #0]
 800c21c:	b378      	cbz	r0, 800c27e <rcl_subscription_init+0x1ba>
 800c21e:	4640      	mov	r0, r8
 800c220:	f7ff fdc2 	bl	800bda8 <rcl_node_get_rmw_handle>
 800c224:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	4631      	mov	r1, r6
 800c22c:	463b      	mov	r3, r7
 800c22e:	464a      	mov	r2, r9
 800c230:	6825      	ldr	r5, [r4, #0]
 800c232:	f002 fbb7 	bl	800e9a4 <rmw_create_subscription>
 800c236:	6821      	ldr	r1, [r4, #0]
 800c238:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 800c23c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 800c240:	b368      	cbz	r0, 800c29e <rcl_subscription_init+0x1da>
 800c242:	3170      	adds	r1, #112	@ 0x70
 800c244:	f002 fc8a 	bl	800eb5c <rmw_subscription_get_actual_qos>
 800c248:	4605      	mov	r5, r0
 800c24a:	b9d0      	cbnz	r0, 800c282 <rcl_subscription_init+0x1be>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800c252:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800c256:	2270      	movs	r2, #112	@ 0x70
 800c258:	4639      	mov	r1, r7
 800c25a:	f008 fa32 	bl	80146c2 <memcpy>
 800c25e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c260:	b110      	cbz	r0, 800c268 <rcl_subscription_init+0x1a4>
 800c262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c264:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c266:	4798      	blx	r3
 800c268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c26a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c26c:	4648      	mov	r0, r9
 800c26e:	4798      	blx	r3
 800c270:	e749      	b.n	800c106 <rcl_subscription_init+0x42>
 800c272:	2501      	movs	r5, #1
 800c274:	e7f3      	b.n	800c25e <rcl_subscription_init+0x19a>
 800c276:	2567      	movs	r5, #103	@ 0x67
 800c278:	e7a3      	b.n	800c1c2 <rcl_subscription_init+0xfe>
 800c27a:	2567      	movs	r5, #103	@ 0x67
 800c27c:	e7ef      	b.n	800c25e <rcl_subscription_init+0x19a>
 800c27e:	250a      	movs	r5, #10
 800c280:	e7ed      	b.n	800c25e <rcl_subscription_init+0x19a>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0f4      	beq.n	800c272 <rcl_subscription_init+0x1ae>
 800c288:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c28c:	b13b      	cbz	r3, 800c29e <rcl_subscription_init+0x1da>
 800c28e:	4640      	mov	r0, r8
 800c290:	f7ff fd8a 	bl	800bda8 <rcl_node_get_rmw_handle>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800c29a:	f002 fc6d 	bl	800eb78 <rmw_destroy_subscription>
 800c29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c2a2:	6820      	ldr	r0, [r4, #0]
 800c2a4:	4798      	blx	r3
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	2501      	movs	r5, #1
 800c2ac:	e7d7      	b.n	800c25e <rcl_subscription_init+0x19a>
 800c2ae:	bf00      	nop

0800c2b0 <rcl_subscription_get_default_options>:
 800c2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b4:	4f12      	ldr	r7, [pc, #72]	@ (800c300 <rcl_subscription_get_default_options+0x50>)
 800c2b6:	4913      	ldr	r1, [pc, #76]	@ (800c304 <rcl_subscription_get_default_options+0x54>)
 800c2b8:	b088      	sub	sp, #32
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	2250      	movs	r2, #80	@ 0x50
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f008 f9ff 	bl	80146c2 <memcpy>
 800c2c4:	ac02      	add	r4, sp, #8
 800c2c6:	a802      	add	r0, sp, #8
 800c2c8:	f7fd fbac 	bl	8009a24 <rcutils_get_default_allocator>
 800c2cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2ce:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800c2d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2d4:	46e8      	mov	r8, sp
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	4640      	mov	r0, r8
 800c2dc:	f001 fcbe 	bl	800dc5c <rmw_get_default_subscription_options>
 800c2e0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c2e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c2e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c2ec:	2270      	movs	r2, #112	@ 0x70
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f008 f9e6 	bl	80146c2 <memcpy>
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	b008      	add	sp, #32
 800c2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2fe:	bf00      	nop
 800c300:	20009150 	.word	0x20009150
 800c304:	08015770 	.word	0x08015770

0800c308 <rcl_take>:
 800c308:	2800      	cmp	r0, #0
 800c30a:	d03f      	beq.n	800c38c <rcl_take+0x84>
 800c30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c310:	4617      	mov	r7, r2
 800c312:	6802      	ldr	r2, [r0, #0]
 800c314:	b09d      	sub	sp, #116	@ 0x74
 800c316:	4606      	mov	r6, r0
 800c318:	b382      	cbz	r2, 800c37c <rcl_take+0x74>
 800c31a:	4699      	mov	r9, r3
 800c31c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800c320:	b363      	cbz	r3, 800c37c <rcl_take+0x74>
 800c322:	4688      	mov	r8, r1
 800c324:	b381      	cbz	r1, 800c388 <rcl_take+0x80>
 800c326:	2f00      	cmp	r7, #0
 800c328:	d034      	beq.n	800c394 <rcl_take+0x8c>
 800c32a:	a802      	add	r0, sp, #8
 800c32c:	ac02      	add	r4, sp, #8
 800c32e:	f001 fc99 	bl	800dc64 <rmw_get_zero_initialized_message_info>
 800c332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c334:	463d      	mov	r5, r7
 800c336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c33a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c33c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c340:	6834      	ldr	r4, [r6, #0]
 800c342:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 800c346:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c34a:	2400      	movs	r4, #0
 800c34c:	463b      	mov	r3, r7
 800c34e:	4630      	mov	r0, r6
 800c350:	f8cd 9000 	str.w	r9, [sp]
 800c354:	4641      	mov	r1, r8
 800c356:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 800c35a:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 800c35e:	f002 fc69 	bl	800ec34 <rmw_take_with_info>
 800c362:	4603      	mov	r3, r0
 800c364:	b9c0      	cbnz	r0, 800c398 <rcl_take+0x90>
 800c366:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 800c36a:	f240 1291 	movw	r2, #401	@ 0x191
 800c36e:	2900      	cmp	r1, #0
 800c370:	bf08      	it	eq
 800c372:	4613      	moveq	r3, r2
 800c374:	4618      	mov	r0, r3
 800c376:	b01d      	add	sp, #116	@ 0x74
 800c378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c37c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c380:	4618      	mov	r0, r3
 800c382:	b01d      	add	sp, #116	@ 0x74
 800c384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c388:	230b      	movs	r3, #11
 800c38a:	e7f3      	b.n	800c374 <rcl_take+0x6c>
 800c38c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c390:	4618      	mov	r0, r3
 800c392:	4770      	bx	lr
 800c394:	af10      	add	r7, sp, #64	@ 0x40
 800c396:	e7c8      	b.n	800c32a <rcl_take+0x22>
 800c398:	f006 fb94 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c39c:	4603      	mov	r3, r0
 800c39e:	e7e9      	b.n	800c374 <rcl_take+0x6c>

0800c3a0 <rcl_subscription_get_rmw_handle>:
 800c3a0:	b118      	cbz	r0, 800c3aa <rcl_subscription_get_rmw_handle+0xa>
 800c3a2:	6800      	ldr	r0, [r0, #0]
 800c3a4:	b108      	cbz	r0, 800c3aa <rcl_subscription_get_rmw_handle+0xa>
 800c3a6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800c3aa:	4770      	bx	lr

0800c3ac <rcl_get_system_time>:
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	f7fd bb83 	b.w	8009ab8 <rcutils_system_time_now>
 800c3b2:	bf00      	nop

0800c3b4 <rcl_get_steady_time>:
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	f7fd bba7 	b.w	8009b08 <rcutils_steady_time_now>
 800c3ba:	bf00      	nop

0800c3bc <rcl_get_ros_time>:
 800c3bc:	7a03      	ldrb	r3, [r0, #8]
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	b133      	cbz	r3, 800c3d2 <rcl_get_ros_time+0x16>
 800c3c4:	2105      	movs	r1, #5
 800c3c6:	f001 f8e3 	bl	800d590 <__atomic_load_8>
 800c3ca:	e9c4 0100 	strd	r0, r1, [r4]
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	bd10      	pop	{r4, pc}
 800c3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d6:	4608      	mov	r0, r1
 800c3d8:	f7fd bb6e 	b.w	8009ab8 <rcutils_system_time_now>

0800c3dc <rcl_clock_init>:
 800c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	460d      	mov	r5, r1
 800c3e8:	f7fd fb2a 	bl	8009a40 <rcutils_allocator_is_valid>
 800c3ec:	b128      	cbz	r0, 800c3fa <rcl_clock_init+0x1e>
 800c3ee:	2e03      	cmp	r6, #3
 800c3f0:	d803      	bhi.n	800c3fa <rcl_clock_init+0x1e>
 800c3f2:	e8df f006 	tbb	[pc, r6]
 800c3f6:	2c1b      	.short	0x2c1b
 800c3f8:	0554      	.short	0x0554
 800c3fa:	200b      	movs	r0, #11
 800c3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c400:	2d00      	cmp	r5, #0
 800c402:	d0fa      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c404:	2c00      	cmp	r4, #0
 800c406:	d0f8      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c408:	2600      	movs	r6, #0
 800c40a:	702e      	strb	r6, [r5, #0]
 800c40c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c40e:	f105 0714 	add.w	r7, r5, #20
 800c412:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800c416:	612e      	str	r6, [r5, #16]
 800c418:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	603b      	str	r3, [r7, #0]
 800c41e:	2303      	movs	r3, #3
 800c420:	4a2b      	ldr	r2, [pc, #172]	@ (800c4d0 <rcl_clock_init+0xf4>)
 800c422:	702b      	strb	r3, [r5, #0]
 800c424:	4630      	mov	r0, r6
 800c426:	60ea      	str	r2, [r5, #12]
 800c428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	d0e4      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c430:	2600      	movs	r6, #0
 800c432:	702e      	strb	r6, [r5, #0]
 800c434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c436:	f105 0714 	add.w	r7, r5, #20
 800c43a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800c43e:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800c442:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	4630      	mov	r0, r6
 800c44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44e:	2d00      	cmp	r5, #0
 800c450:	d0d3      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c452:	2c00      	cmp	r4, #0
 800c454:	d0d1      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c456:	2600      	movs	r6, #0
 800c458:	702e      	strb	r6, [r5, #0]
 800c45a:	46a4      	mov	ip, r4
 800c45c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c460:	f105 0714 	add.w	r7, r5, #20
 800c464:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800c468:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800c46c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c46e:	f8dc 3000 	ldr.w	r3, [ip]
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	6921      	ldr	r1, [r4, #16]
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	2010      	movs	r0, #16
 800c47a:	4798      	blx	r3
 800c47c:	4603      	mov	r3, r0
 800c47e:	6128      	str	r0, [r5, #16]
 800c480:	b318      	cbz	r0, 800c4ca <rcl_clock_init+0xee>
 800c482:	f04f 0800 	mov.w	r8, #0
 800c486:	f04f 0900 	mov.w	r9, #0
 800c48a:	7206      	strb	r6, [r0, #8]
 800c48c:	e9c3 8900 	strd	r8, r9, [r3]
 800c490:	2301      	movs	r3, #1
 800c492:	4a10      	ldr	r2, [pc, #64]	@ (800c4d4 <rcl_clock_init+0xf8>)
 800c494:	702b      	strb	r3, [r5, #0]
 800c496:	4630      	mov	r0, r6
 800c498:	60ea      	str	r2, [r5, #12]
 800c49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	d0ab      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c4a2:	2c00      	cmp	r4, #0
 800c4a4:	d0a9      	beq.n	800c3fa <rcl_clock_init+0x1e>
 800c4a6:	2600      	movs	r6, #0
 800c4a8:	702e      	strb	r6, [r5, #0]
 800c4aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4ac:	f105 0714 	add.w	r7, r5, #20
 800c4b0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800c4b4:	612e      	str	r6, [r5, #16]
 800c4b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	2302      	movs	r3, #2
 800c4be:	4a06      	ldr	r2, [pc, #24]	@ (800c4d8 <rcl_clock_init+0xfc>)
 800c4c0:	702b      	strb	r3, [r5, #0]
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	60ea      	str	r2, [r5, #12]
 800c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ca:	200a      	movs	r0, #10
 800c4cc:	e796      	b.n	800c3fc <rcl_clock_init+0x20>
 800c4ce:	bf00      	nop
 800c4d0:	0800c3b5 	.word	0x0800c3b5
 800c4d4:	0800c3bd 	.word	0x0800c3bd
 800c4d8:	0800c3ad 	.word	0x0800c3ad

0800c4dc <rcl_clock_get_now>:
 800c4dc:	b140      	cbz	r0, 800c4f0 <rcl_clock_get_now+0x14>
 800c4de:	b139      	cbz	r1, 800c4f0 <rcl_clock_get_now+0x14>
 800c4e0:	7803      	ldrb	r3, [r0, #0]
 800c4e2:	b11b      	cbz	r3, 800c4ec <rcl_clock_get_now+0x10>
 800c4e4:	68c3      	ldr	r3, [r0, #12]
 800c4e6:	b10b      	cbz	r3, 800c4ec <rcl_clock_get_now+0x10>
 800c4e8:	6900      	ldr	r0, [r0, #16]
 800c4ea:	4718      	bx	r3
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	4770      	bx	lr
 800c4f0:	200b      	movs	r0, #11
 800c4f2:	4770      	bx	lr

0800c4f4 <rcl_timer_call>:
 800c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f8:	b08b      	sub	sp, #44	@ 0x2c
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d06e      	beq.n	800c5dc <rcl_timer_call+0xe8>
 800c4fe:	6803      	ldr	r3, [r0, #0]
 800c500:	f3bf 8f5b 	dmb	ish
 800c504:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c508:	f3bf 8f5b 	dmb	ish
 800c50c:	4604      	mov	r4, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d159      	bne.n	800c5c6 <rcl_timer_call+0xd2>
 800c512:	6803      	ldr	r3, [r0, #0]
 800c514:	a908      	add	r1, sp, #32
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	f7ff ffe0 	bl	800c4dc <rcl_clock_get_now>
 800c51c:	4605      	mov	r5, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d14d      	bne.n	800c5be <rcl_timer_call+0xca>
 800c522:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c526:	2a00      	cmp	r2, #0
 800c528:	f173 0100 	sbcs.w	r1, r3, #0
 800c52c:	db51      	blt.n	800c5d2 <rcl_timer_call+0xde>
 800c52e:	6820      	ldr	r0, [r4, #0]
 800c530:	2605      	movs	r6, #5
 800c532:	9600      	str	r6, [sp, #0]
 800c534:	3020      	adds	r0, #32
 800c536:	f001 f893 	bl	800d660 <__atomic_exchange_8>
 800c53a:	6822      	ldr	r2, [r4, #0]
 800c53c:	f3bf 8f5b 	dmb	ish
 800c540:	4682      	mov	sl, r0
 800c542:	f8d2 b010 	ldr.w	fp, [r2, #16]
 800c546:	f3bf 8f5b 	dmb	ish
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	460b      	mov	r3, r1
 800c54e:	3028      	adds	r0, #40	@ 0x28
 800c550:	4631      	mov	r1, r6
 800c552:	9305      	str	r3, [sp, #20]
 800c554:	f001 f81c 	bl	800d590 <__atomic_load_8>
 800c558:	4603      	mov	r3, r0
 800c55a:	6820      	ldr	r0, [r4, #0]
 800c55c:	460a      	mov	r2, r1
 800c55e:	3018      	adds	r0, #24
 800c560:	4631      	mov	r1, r6
 800c562:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800c566:	f001 f813 	bl	800d590 <__atomic_load_8>
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	9a03      	ldr	r2, [sp, #12]
 800c56e:	4606      	mov	r6, r0
 800c570:	460f      	mov	r7, r1
 800c572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c576:	eb13 0806 	adds.w	r8, r3, r6
 800c57a:	eb42 0907 	adc.w	r9, r2, r7
 800c57e:	4580      	cmp	r8, r0
 800c580:	eb79 0301 	sbcs.w	r3, r9, r1
 800c584:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c588:	460a      	mov	r2, r1
 800c58a:	da04      	bge.n	800c596 <rcl_timer_call+0xa2>
 800c58c:	ea56 0307 	orrs.w	r3, r6, r7
 800c590:	d129      	bne.n	800c5e6 <rcl_timer_call+0xf2>
 800c592:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c596:	6820      	ldr	r0, [r4, #0]
 800c598:	2105      	movs	r1, #5
 800c59a:	4642      	mov	r2, r8
 800c59c:	464b      	mov	r3, r9
 800c59e:	3028      	adds	r0, #40	@ 0x28
 800c5a0:	9100      	str	r1, [sp, #0]
 800c5a2:	f001 f829 	bl	800d5f8 <__atomic_store_8>
 800c5a6:	f1bb 0f00 	cmp.w	fp, #0
 800c5aa:	d008      	beq.n	800c5be <rcl_timer_call+0xca>
 800c5ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5b0:	9905      	ldr	r1, [sp, #20]
 800c5b2:	ebb2 020a 	subs.w	r2, r2, sl
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	eb63 0301 	sbc.w	r3, r3, r1
 800c5bc:	47d8      	blx	fp
 800c5be:	4628      	mov	r0, r5
 800c5c0:	b00b      	add	sp, #44	@ 0x2c
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	f240 3521 	movw	r5, #801	@ 0x321
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	b00b      	add	sp, #44	@ 0x2c
 800c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d2:	2501      	movs	r5, #1
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	b00b      	add	sp, #44	@ 0x2c
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5dc:	250b      	movs	r5, #11
 800c5de:	4628      	mov	r0, r5
 800c5e0:	b00b      	add	sp, #44	@ 0x2c
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	ebb0 0008 	subs.w	r0, r0, r8
 800c5ea:	eb62 0109 	sbc.w	r1, r2, r9
 800c5ee:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	f7f4 f835 	bl	8000668 <__aeabi_ldivmod>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	f141 0100 	adc.w	r1, r1, #0
 800c604:	fb00 7007 	mla	r0, r0, r7, r7
 800c608:	fb06 0001 	mla	r0, r6, r1, r0
 800c60c:	fba3 6706 	umull	r6, r7, r3, r6
 800c610:	4407      	add	r7, r0
 800c612:	eb18 0806 	adds.w	r8, r8, r6
 800c616:	eb49 0907 	adc.w	r9, r9, r7
 800c61a:	e7bc      	b.n	800c596 <rcl_timer_call+0xa2>

0800c61c <rcl_timer_is_ready>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	b310      	cbz	r0, 800c66a <rcl_timer_is_ready+0x4e>
 800c624:	4688      	mov	r8, r1
 800c626:	b301      	cbz	r1, 800c66a <rcl_timer_is_ready+0x4e>
 800c628:	6803      	ldr	r3, [r0, #0]
 800c62a:	4604      	mov	r4, r0
 800c62c:	4669      	mov	r1, sp
 800c62e:	6818      	ldr	r0, [r3, #0]
 800c630:	f7ff ff54 	bl	800c4dc <rcl_clock_get_now>
 800c634:	4605      	mov	r5, r0
 800c636:	b118      	cbz	r0, 800c640 <rcl_timer_is_ready+0x24>
 800c638:	4628      	mov	r0, r5
 800c63a:	b002      	add	sp, #8
 800c63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c640:	6820      	ldr	r0, [r4, #0]
 800c642:	2105      	movs	r1, #5
 800c644:	3028      	adds	r0, #40	@ 0x28
 800c646:	f000 ffa3 	bl	800d590 <__atomic_load_8>
 800c64a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c64e:	1ac6      	subs	r6, r0, r3
 800c650:	eb61 0702 	sbc.w	r7, r1, r2
 800c654:	2e01      	cmp	r6, #1
 800c656:	f177 0300 	sbcs.w	r3, r7, #0
 800c65a:	db0b      	blt.n	800c674 <rcl_timer_is_ready+0x58>
 800c65c:	462b      	mov	r3, r5
 800c65e:	4628      	mov	r0, r5
 800c660:	f888 3000 	strb.w	r3, [r8]
 800c664:	b002      	add	sp, #8
 800c666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c66a:	250b      	movs	r5, #11
 800c66c:	4628      	mov	r0, r5
 800c66e:	b002      	add	sp, #8
 800c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	f3bf 8f5b 	dmb	ish
 800c67a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c67e:	f3bf 8f5b 	dmb	ish
 800c682:	fab3 f383 	clz	r3, r3
 800c686:	095b      	lsrs	r3, r3, #5
 800c688:	e7e9      	b.n	800c65e <rcl_timer_is_ready+0x42>
 800c68a:	bf00      	nop

0800c68c <rcl_timer_get_time_until_next_call>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	b1d8      	cbz	r0, 800c6ca <rcl_timer_get_time_until_next_call+0x3e>
 800c692:	460d      	mov	r5, r1
 800c694:	b1c9      	cbz	r1, 800c6ca <rcl_timer_get_time_until_next_call+0x3e>
 800c696:	6803      	ldr	r3, [r0, #0]
 800c698:	4604      	mov	r4, r0
 800c69a:	4669      	mov	r1, sp
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	f7ff ff1d 	bl	800c4dc <rcl_clock_get_now>
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	b110      	cbz	r0, 800c6ac <rcl_timer_get_time_until_next_call+0x20>
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	6820      	ldr	r0, [r4, #0]
 800c6ae:	2105      	movs	r1, #5
 800c6b0:	3028      	adds	r0, #40	@ 0x28
 800c6b2:	f000 ff6d 	bl	800d590 <__atomic_load_8>
 800c6b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6ba:	1ac0      	subs	r0, r0, r3
 800c6bc:	eb61 0102 	sbc.w	r1, r1, r2
 800c6c0:	e9c5 0100 	strd	r0, r1, [r5]
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	b002      	add	sp, #8
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	260b      	movs	r6, #11
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	b002      	add	sp, #8
 800c6d0:	bd70      	pop	{r4, r5, r6, pc}
 800c6d2:	bf00      	nop

0800c6d4 <rcl_timer_is_canceled>:
 800c6d4:	b168      	cbz	r0, 800c6f2 <rcl_timer_is_canceled+0x1e>
 800c6d6:	b161      	cbz	r1, 800c6f2 <rcl_timer_is_canceled+0x1e>
 800c6d8:	6803      	ldr	r3, [r0, #0]
 800c6da:	f3bf 8f5b 	dmb	ish
 800c6de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6e2:	f3bf 8f5b 	dmb	ish
 800c6e6:	3b00      	subs	r3, #0
 800c6e8:	bf18      	it	ne
 800c6ea:	2301      	movne	r3, #1
 800c6ec:	700b      	strb	r3, [r1, #0]
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	4770      	bx	lr
 800c6f2:	200b      	movs	r0, #11
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop

0800c6f8 <rcl_timer_get_guard_condition>:
 800c6f8:	b130      	cbz	r0, 800c708 <rcl_timer_get_guard_condition+0x10>
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	b120      	cbz	r0, 800c708 <rcl_timer_get_guard_condition+0x10>
 800c6fe:	68c3      	ldr	r3, [r0, #12]
 800c700:	b10b      	cbz	r3, 800c706 <rcl_timer_get_guard_condition+0xe>
 800c702:	3008      	adds	r0, #8
 800c704:	4770      	bx	lr
 800c706:	4618      	mov	r0, r3
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop

0800c70c <rcl_validate_enclave_name_with_size>:
 800c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c70e:	b0c3      	sub	sp, #268	@ 0x10c
 800c710:	b1d0      	cbz	r0, 800c748 <rcl_validate_enclave_name_with_size+0x3c>
 800c712:	4615      	mov	r5, r2
 800c714:	b1c2      	cbz	r2, 800c748 <rcl_validate_enclave_name_with_size+0x3c>
 800c716:	461f      	mov	r7, r3
 800c718:	466a      	mov	r2, sp
 800c71a:	ab01      	add	r3, sp, #4
 800c71c:	460e      	mov	r6, r1
 800c71e:	f001 fb39 	bl	800dd94 <rmw_validate_namespace_with_size>
 800c722:	4604      	mov	r4, r0
 800c724:	b9e0      	cbnz	r0, 800c760 <rcl_validate_enclave_name_with_size+0x54>
 800c726:	9b00      	ldr	r3, [sp, #0]
 800c728:	b923      	cbnz	r3, 800c734 <rcl_validate_enclave_name_with_size+0x28>
 800c72a:	2300      	movs	r3, #0
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	4620      	mov	r0, r4
 800c730:	b043      	add	sp, #268	@ 0x10c
 800c732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c734:	2b07      	cmp	r3, #7
 800c736:	d00b      	beq.n	800c750 <rcl_validate_enclave_name_with_size+0x44>
 800c738:	1e5a      	subs	r2, r3, #1
 800c73a:	2a05      	cmp	r2, #5
 800c73c:	d82e      	bhi.n	800c79c <rcl_validate_enclave_name_with_size+0x90>
 800c73e:	e8df f002 	tbb	[pc, r2]
 800c742:	211e      	.short	0x211e
 800c744:	152a2724 	.word	0x152a2724
 800c748:	240b      	movs	r4, #11
 800c74a:	4620      	mov	r0, r4
 800c74c:	b043      	add	sp, #268	@ 0x10c
 800c74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c750:	2eff      	cmp	r6, #255	@ 0xff
 800c752:	d9ea      	bls.n	800c72a <rcl_validate_enclave_name_with_size+0x1e>
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	2f00      	cmp	r7, #0
 800c758:	d0e9      	beq.n	800c72e <rcl_validate_enclave_name_with_size+0x22>
 800c75a:	23fe      	movs	r3, #254	@ 0xfe
 800c75c:	603b      	str	r3, [r7, #0]
 800c75e:	e7e6      	b.n	800c72e <rcl_validate_enclave_name_with_size+0x22>
 800c760:	f006 f9b0 	bl	8012ac4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c764:	4604      	mov	r4, r0
 800c766:	4620      	mov	r0, r4
 800c768:	b043      	add	sp, #268	@ 0x10c
 800c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c76c:	2306      	movs	r3, #6
 800c76e:	602b      	str	r3, [r5, #0]
 800c770:	2f00      	cmp	r7, #0
 800c772:	d0dc      	beq.n	800c72e <rcl_validate_enclave_name_with_size+0x22>
 800c774:	9b01      	ldr	r3, [sp, #4]
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	4620      	mov	r0, r4
 800c77a:	b043      	add	sp, #268	@ 0x10c
 800c77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c77e:	2301      	movs	r3, #1
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	e7f5      	b.n	800c770 <rcl_validate_enclave_name_with_size+0x64>
 800c784:	2302      	movs	r3, #2
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	e7f2      	b.n	800c770 <rcl_validate_enclave_name_with_size+0x64>
 800c78a:	2303      	movs	r3, #3
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	e7ef      	b.n	800c770 <rcl_validate_enclave_name_with_size+0x64>
 800c790:	2304      	movs	r3, #4
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	e7ec      	b.n	800c770 <rcl_validate_enclave_name_with_size+0x64>
 800c796:	2305      	movs	r3, #5
 800c798:	602b      	str	r3, [r5, #0]
 800c79a:	e7e9      	b.n	800c770 <rcl_validate_enclave_name_with_size+0x64>
 800c79c:	4a03      	ldr	r2, [pc, #12]	@ (800c7ac <rcl_validate_enclave_name_with_size+0xa0>)
 800c79e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c7a2:	a802      	add	r0, sp, #8
 800c7a4:	f001 f8a4 	bl	800d8f0 <rcutils_snprintf>
 800c7a8:	2401      	movs	r4, #1
 800c7aa:	e7c0      	b.n	800c72e <rcl_validate_enclave_name_with_size+0x22>
 800c7ac:	080157c0 	.word	0x080157c0

0800c7b0 <rcl_validate_enclave_name>:
 800c7b0:	b168      	cbz	r0, 800c7ce <rcl_validate_enclave_name+0x1e>
 800c7b2:	b570      	push	{r4, r5, r6, lr}
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	4616      	mov	r6, r2
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	f7f3 fd1b 	bl	80001f4 <strlen>
 800c7be:	4633      	mov	r3, r6
 800c7c0:	4601      	mov	r1, r0
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7ca:	f7ff bf9f 	b.w	800c70c <rcl_validate_enclave_name_with_size>
 800c7ce:	200b      	movs	r0, #11
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop

0800c7d4 <rcl_validate_topic_name>:
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f000 808b 	beq.w	800c8f0 <rcl_validate_topic_name+0x11c>
 800c7da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7de:	460e      	mov	r6, r1
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	f000 808c 	beq.w	800c8fe <rcl_validate_topic_name+0x12a>
 800c7e6:	4617      	mov	r7, r2
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	f7f3 fd03 	bl	80001f4 <strlen>
 800c7ee:	b1b0      	cbz	r0, 800c81e <rcl_validate_topic_name+0x4a>
 800c7f0:	f895 9000 	ldrb.w	r9, [r5]
 800c7f4:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800c9a4 <rcl_validate_topic_name+0x1d0>
 800c7f8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800c7fc:	f013 0304 	ands.w	r3, r3, #4
 800c800:	d178      	bne.n	800c8f4 <rcl_validate_topic_name+0x120>
 800c802:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800c806:	f815 2008 	ldrb.w	r2, [r5, r8]
 800c80a:	2a2f      	cmp	r2, #47	@ 0x2f
 800c80c:	d10e      	bne.n	800c82c <rcl_validate_topic_name+0x58>
 800c80e:	2202      	movs	r2, #2
 800c810:	6032      	str	r2, [r6, #0]
 800c812:	b36f      	cbz	r7, 800c870 <rcl_validate_topic_name+0x9c>
 800c814:	f8c7 8000 	str.w	r8, [r7]
 800c818:	4618      	mov	r0, r3
 800c81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c81e:	2301      	movs	r3, #1
 800c820:	6033      	str	r3, [r6, #0]
 800c822:	b32f      	cbz	r7, 800c870 <rcl_validate_topic_name+0x9c>
 800c824:	2000      	movs	r0, #0
 800c826:	6038      	str	r0, [r7, #0]
 800c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82c:	461c      	mov	r4, r3
 800c82e:	4619      	mov	r1, r3
 800c830:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800c834:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800c838:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c83c:	f1be 0f09 	cmp.w	lr, #9
 800c840:	d946      	bls.n	800c8d0 <rcl_validate_topic_name+0xfc>
 800c842:	f022 0e20 	bic.w	lr, r2, #32
 800c846:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800c84a:	f1be 0f19 	cmp.w	lr, #25
 800c84e:	d93f      	bls.n	800c8d0 <rcl_validate_topic_name+0xfc>
 800c850:	2a5f      	cmp	r2, #95	@ 0x5f
 800c852:	d014      	beq.n	800c87e <rcl_validate_topic_name+0xaa>
 800c854:	2a2f      	cmp	r2, #47	@ 0x2f
 800c856:	d05b      	beq.n	800c910 <rcl_validate_topic_name+0x13c>
 800c858:	2a7e      	cmp	r2, #126	@ 0x7e
 800c85a:	d052      	beq.n	800c902 <rcl_validate_topic_name+0x12e>
 800c85c:	2a7b      	cmp	r2, #123	@ 0x7b
 800c85e:	d00a      	beq.n	800c876 <rcl_validate_topic_name+0xa2>
 800c860:	2a7d      	cmp	r2, #125	@ 0x7d
 800c862:	d16f      	bne.n	800c944 <rcl_validate_topic_name+0x170>
 800c864:	2c00      	cmp	r4, #0
 800c866:	d15e      	bne.n	800c926 <rcl_validate_topic_name+0x152>
 800c868:	2305      	movs	r3, #5
 800c86a:	6033      	str	r3, [r6, #0]
 800c86c:	b107      	cbz	r7, 800c870 <rcl_validate_topic_name+0x9c>
 800c86e:	6039      	str	r1, [r7, #0]
 800c870:	2000      	movs	r0, #0
 800c872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c876:	2c00      	cmp	r4, #0
 800c878:	d14c      	bne.n	800c914 <rcl_validate_topic_name+0x140>
 800c87a:	460b      	mov	r3, r1
 800c87c:	2401      	movs	r4, #1
 800c87e:	3101      	adds	r1, #1
 800c880:	4288      	cmp	r0, r1
 800c882:	d1d7      	bne.n	800c834 <rcl_validate_topic_name+0x60>
 800c884:	2c00      	cmp	r4, #0
 800c886:	d156      	bne.n	800c936 <rcl_validate_topic_name+0x162>
 800c888:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800c88c:	4620      	mov	r0, r4
 800c88e:	d061      	beq.n	800c954 <rcl_validate_topic_name+0x180>
 800c890:	f108 0e01 	add.w	lr, r8, #1
 800c894:	e007      	b.n	800c8a6 <rcl_validate_topic_name+0xd2>
 800c896:	2801      	cmp	r0, #1
 800c898:	d047      	beq.n	800c92a <rcl_validate_topic_name+0x156>
 800c89a:	461a      	mov	r2, r3
 800c89c:	4291      	cmp	r1, r2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f105 0501 	add.w	r5, r5, #1
 800c8a4:	d944      	bls.n	800c930 <rcl_validate_topic_name+0x15c>
 800c8a6:	4580      	cmp	r8, r0
 800c8a8:	f100 0301 	add.w	r3, r0, #1
 800c8ac:	d037      	beq.n	800c91e <rcl_validate_topic_name+0x14a>
 800c8ae:	782a      	ldrb	r2, [r5, #0]
 800c8b0:	2a2f      	cmp	r2, #47	@ 0x2f
 800c8b2:	d1f0      	bne.n	800c896 <rcl_validate_topic_name+0xc2>
 800c8b4:	786b      	ldrb	r3, [r5, #1]
 800c8b6:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	0760      	lsls	r0, r4, #29
 800c8be:	461a      	mov	r2, r3
 800c8c0:	d5ec      	bpl.n	800c89c <rcl_validate_topic_name+0xc8>
 800c8c2:	2304      	movs	r3, #4
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	d0d2      	beq.n	800c870 <rcl_validate_topic_name+0x9c>
 800c8ca:	603a      	str	r2, [r7, #0]
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e7ab      	b.n	800c828 <rcl_validate_topic_name+0x54>
 800c8d0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800c8d4:	0752      	lsls	r2, r2, #29
 800c8d6:	d5d2      	bpl.n	800c87e <rcl_validate_topic_name+0xaa>
 800c8d8:	2c00      	cmp	r4, #0
 800c8da:	d0d0      	beq.n	800c87e <rcl_validate_topic_name+0xaa>
 800c8dc:	2900      	cmp	r1, #0
 800c8de:	d0ce      	beq.n	800c87e <rcl_validate_topic_name+0xaa>
 800c8e0:	1e4a      	subs	r2, r1, #1
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d1cb      	bne.n	800c87e <rcl_validate_topic_name+0xaa>
 800c8e6:	2309      	movs	r3, #9
 800c8e8:	6033      	str	r3, [r6, #0]
 800c8ea:	2f00      	cmp	r7, #0
 800c8ec:	d1bf      	bne.n	800c86e <rcl_validate_topic_name+0x9a>
 800c8ee:	e7bf      	b.n	800c870 <rcl_validate_topic_name+0x9c>
 800c8f0:	200b      	movs	r0, #11
 800c8f2:	4770      	bx	lr
 800c8f4:	2304      	movs	r3, #4
 800c8f6:	6033      	str	r3, [r6, #0]
 800c8f8:	2f00      	cmp	r7, #0
 800c8fa:	d193      	bne.n	800c824 <rcl_validate_topic_name+0x50>
 800c8fc:	e7b8      	b.n	800c870 <rcl_validate_topic_name+0x9c>
 800c8fe:	200b      	movs	r0, #11
 800c900:	e792      	b.n	800c828 <rcl_validate_topic_name+0x54>
 800c902:	2900      	cmp	r1, #0
 800c904:	d0bb      	beq.n	800c87e <rcl_validate_topic_name+0xaa>
 800c906:	2306      	movs	r3, #6
 800c908:	6033      	str	r3, [r6, #0]
 800c90a:	2f00      	cmp	r7, #0
 800c90c:	d1af      	bne.n	800c86e <rcl_validate_topic_name+0x9a>
 800c90e:	e7af      	b.n	800c870 <rcl_validate_topic_name+0x9c>
 800c910:	2c00      	cmp	r4, #0
 800c912:	d0b4      	beq.n	800c87e <rcl_validate_topic_name+0xaa>
 800c914:	2308      	movs	r3, #8
 800c916:	6033      	str	r3, [r6, #0]
 800c918:	2f00      	cmp	r7, #0
 800c91a:	d1a8      	bne.n	800c86e <rcl_validate_topic_name+0x9a>
 800c91c:	e7a8      	b.n	800c870 <rcl_validate_topic_name+0x9c>
 800c91e:	4672      	mov	r2, lr
 800c920:	f108 0301 	add.w	r3, r8, #1
 800c924:	e7ba      	b.n	800c89c <rcl_validate_topic_name+0xc8>
 800c926:	2400      	movs	r4, #0
 800c928:	e7a9      	b.n	800c87e <rcl_validate_topic_name+0xaa>
 800c92a:	2202      	movs	r2, #2
 800c92c:	4613      	mov	r3, r2
 800c92e:	e7b5      	b.n	800c89c <rcl_validate_topic_name+0xc8>
 800c930:	2000      	movs	r0, #0
 800c932:	6030      	str	r0, [r6, #0]
 800c934:	e778      	b.n	800c828 <rcl_validate_topic_name+0x54>
 800c936:	2205      	movs	r2, #5
 800c938:	6032      	str	r2, [r6, #0]
 800c93a:	2f00      	cmp	r7, #0
 800c93c:	d098      	beq.n	800c870 <rcl_validate_topic_name+0x9c>
 800c93e:	603b      	str	r3, [r7, #0]
 800c940:	2000      	movs	r0, #0
 800c942:	e771      	b.n	800c828 <rcl_validate_topic_name+0x54>
 800c944:	2c00      	cmp	r4, #0
 800c946:	bf14      	ite	ne
 800c948:	2308      	movne	r3, #8
 800c94a:	2303      	moveq	r3, #3
 800c94c:	6033      	str	r3, [r6, #0]
 800c94e:	2f00      	cmp	r7, #0
 800c950:	d18d      	bne.n	800c86e <rcl_validate_topic_name+0x9a>
 800c952:	e78d      	b.n	800c870 <rcl_validate_topic_name+0x9c>
 800c954:	f108 0401 	add.w	r4, r8, #1
 800c958:	e007      	b.n	800c96a <rcl_validate_topic_name+0x196>
 800c95a:	2801      	cmp	r0, #1
 800c95c:	d019      	beq.n	800c992 <rcl_validate_topic_name+0x1be>
 800c95e:	461a      	mov	r2, r3
 800c960:	4291      	cmp	r1, r2
 800c962:	4618      	mov	r0, r3
 800c964:	f105 0501 	add.w	r5, r5, #1
 800c968:	d9e2      	bls.n	800c930 <rcl_validate_topic_name+0x15c>
 800c96a:	4580      	cmp	r8, r0
 800c96c:	f100 0301 	add.w	r3, r0, #1
 800c970:	d00b      	beq.n	800c98a <rcl_validate_topic_name+0x1b6>
 800c972:	782a      	ldrb	r2, [r5, #0]
 800c974:	2a2f      	cmp	r2, #47	@ 0x2f
 800c976:	d1f0      	bne.n	800c95a <rcl_validate_topic_name+0x186>
 800c978:	786b      	ldrb	r3, [r5, #1]
 800c97a:	f81c e003 	ldrb.w	lr, [ip, r3]
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	f01e 0f04 	tst.w	lr, #4
 800c984:	461a      	mov	r2, r3
 800c986:	d0eb      	beq.n	800c960 <rcl_validate_topic_name+0x18c>
 800c988:	e79b      	b.n	800c8c2 <rcl_validate_topic_name+0xee>
 800c98a:	4622      	mov	r2, r4
 800c98c:	f108 0301 	add.w	r3, r8, #1
 800c990:	e7e6      	b.n	800c960 <rcl_validate_topic_name+0x18c>
 800c992:	2307      	movs	r3, #7
 800c994:	6033      	str	r3, [r6, #0]
 800c996:	2f00      	cmp	r7, #0
 800c998:	f43f af6a 	beq.w	800c870 <rcl_validate_topic_name+0x9c>
 800c99c:	6038      	str	r0, [r7, #0]
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e742      	b.n	800c828 <rcl_validate_topic_name+0x54>
 800c9a2:	bf00      	nop
 800c9a4:	08015e68 	.word	0x08015e68

0800c9a8 <rcl_get_zero_initialized_wait_set>:
 800c9a8:	b470      	push	{r4, r5, r6}
 800c9aa:	4d07      	ldr	r5, [pc, #28]	@ (800c9c8 <rcl_get_zero_initialized_wait_set+0x20>)
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9b0:	4634      	mov	r4, r6
 800c9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	6023      	str	r3, [r4, #0]
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	bc70      	pop	{r4, r5, r6}
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	08015820 	.word	0x08015820

0800c9cc <rcl_wait_set_is_valid>:
 800c9cc:	b118      	cbz	r0, 800c9d6 <rcl_wait_set_is_valid+0xa>
 800c9ce:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c9d0:	3800      	subs	r0, #0
 800c9d2:	bf18      	it	ne
 800c9d4:	2001      	movne	r0, #1
 800c9d6:	4770      	bx	lr

0800c9d8 <rcl_wait_set_fini>:
 800c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f000 8095 	beq.w	800cb0e <rcl_wait_set_fini+0x136>
 800c9e4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	2e00      	cmp	r6, #0
 800c9ea:	f000 808c 	beq.w	800cb06 <rcl_wait_set_fini+0x12e>
 800c9ee:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800c9f0:	f002 fb16 	bl	800f020 <rmw_destroy_wait_set>
 800c9f4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c9f6:	1e06      	subs	r6, r0, #0
 800c9f8:	bf18      	it	ne
 800c9fa:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800c9fe:	2d00      	cmp	r5, #0
 800ca00:	f000 8081 	beq.w	800cb06 <rcl_wait_set_fini+0x12e>
 800ca04:	6820      	ldr	r0, [r4, #0]
 800ca06:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800ca0a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca0c:	2700      	movs	r7, #0
 800ca0e:	6067      	str	r7, [r4, #4]
 800ca10:	602f      	str	r7, [r5, #0]
 800ca12:	b120      	cbz	r0, 800ca1e <rcl_wait_set_fini+0x46>
 800ca14:	9101      	str	r1, [sp, #4]
 800ca16:	47c0      	blx	r8
 800ca18:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca1a:	9901      	ldr	r1, [sp, #4]
 800ca1c:	6027      	str	r7, [r4, #0]
 800ca1e:	68a8      	ldr	r0, [r5, #8]
 800ca20:	b120      	cbz	r0, 800ca2c <rcl_wait_set_fini+0x54>
 800ca22:	47c0      	blx	r8
 800ca24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca26:	2300      	movs	r3, #0
 800ca28:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800ca2c:	68a0      	ldr	r0, [r4, #8]
 800ca2e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca30:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca32:	f04f 0800 	mov.w	r8, #0
 800ca36:	f8c4 800c 	str.w	r8, [r4, #12]
 800ca3a:	f8c5 800c 	str.w	r8, [r5, #12]
 800ca3e:	b128      	cbz	r0, 800ca4c <rcl_wait_set_fini+0x74>
 800ca40:	47b8      	blx	r7
 800ca42:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca44:	f8c4 8008 	str.w	r8, [r4, #8]
 800ca48:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca4a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca4c:	6968      	ldr	r0, [r5, #20]
 800ca4e:	f04f 0800 	mov.w	r8, #0
 800ca52:	f8c5 8010 	str.w	r8, [r5, #16]
 800ca56:	b128      	cbz	r0, 800ca64 <rcl_wait_set_fini+0x8c>
 800ca58:	47b8      	blx	r7
 800ca5a:	f8c5 8014 	str.w	r8, [r5, #20]
 800ca5e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca60:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca64:	6920      	ldr	r0, [r4, #16]
 800ca66:	f04f 0800 	mov.w	r8, #0
 800ca6a:	f8c4 8014 	str.w	r8, [r4, #20]
 800ca6e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800ca72:	b128      	cbz	r0, 800ca80 <rcl_wait_set_fini+0xa8>
 800ca74:	47b8      	blx	r7
 800ca76:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca78:	f8c4 8010 	str.w	r8, [r4, #16]
 800ca7c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800ca7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800ca80:	69a0      	ldr	r0, [r4, #24]
 800ca82:	f04f 0800 	mov.w	r8, #0
 800ca86:	f8c4 801c 	str.w	r8, [r4, #28]
 800ca8a:	f8c5 8018 	str.w	r8, [r5, #24]
 800ca8e:	b128      	cbz	r0, 800ca9c <rcl_wait_set_fini+0xc4>
 800ca90:	9101      	str	r1, [sp, #4]
 800ca92:	47b8      	blx	r7
 800ca94:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ca96:	9901      	ldr	r1, [sp, #4]
 800ca98:	f8c4 8018 	str.w	r8, [r4, #24]
 800ca9c:	6a28      	ldr	r0, [r5, #32]
 800ca9e:	b120      	cbz	r0, 800caaa <rcl_wait_set_fini+0xd2>
 800caa0:	47b8      	blx	r7
 800caa2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800caa4:	2300      	movs	r3, #0
 800caa6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800caaa:	6a20      	ldr	r0, [r4, #32]
 800caac:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800cab0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800cab2:	2700      	movs	r7, #0
 800cab4:	6267      	str	r7, [r4, #36]	@ 0x24
 800cab6:	626f      	str	r7, [r5, #36]	@ 0x24
 800cab8:	b120      	cbz	r0, 800cac4 <rcl_wait_set_fini+0xec>
 800caba:	9101      	str	r1, [sp, #4]
 800cabc:	47c0      	blx	r8
 800cabe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cac0:	9901      	ldr	r1, [sp, #4]
 800cac2:	6227      	str	r7, [r4, #32]
 800cac4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800cac6:	b120      	cbz	r0, 800cad2 <rcl_wait_set_fini+0xfa>
 800cac8:	47c0      	blx	r8
 800caca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cacc:	2300      	movs	r3, #0
 800cace:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800cad2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cad4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800cad8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800cada:	2700      	movs	r7, #0
 800cadc:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800cade:	632f      	str	r7, [r5, #48]	@ 0x30
 800cae0:	b120      	cbz	r0, 800caec <rcl_wait_set_fini+0x114>
 800cae2:	9101      	str	r1, [sp, #4]
 800cae4:	47c0      	blx	r8
 800cae6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cae8:	9901      	ldr	r1, [sp, #4]
 800caea:	62a7      	str	r7, [r4, #40]	@ 0x28
 800caec:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800caee:	b120      	cbz	r0, 800cafa <rcl_wait_set_fini+0x122>
 800caf0:	47c0      	blx	r8
 800caf2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800caf4:	2300      	movs	r3, #0
 800caf6:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800cafa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800cafc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800cafe:	4628      	mov	r0, r5
 800cb00:	4798      	blx	r3
 800cb02:	2300      	movs	r3, #0
 800cb04:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb06:	4630      	mov	r0, r6
 800cb08:	b002      	add	sp, #8
 800cb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0e:	260b      	movs	r6, #11
 800cb10:	4630      	mov	r0, r6
 800cb12:	b002      	add	sp, #8
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb18 <rcl_wait_set_add_subscription>:
 800cb18:	b320      	cbz	r0, 800cb64 <rcl_wait_set_add_subscription+0x4c>
 800cb1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	4604      	mov	r4, r0
 800cb20:	b1d3      	cbz	r3, 800cb58 <rcl_wait_set_add_subscription+0x40>
 800cb22:	b319      	cbz	r1, 800cb6c <rcl_wait_set_add_subscription+0x54>
 800cb24:	681d      	ldr	r5, [r3, #0]
 800cb26:	6860      	ldr	r0, [r4, #4]
 800cb28:	4285      	cmp	r5, r0
 800cb2a:	d218      	bcs.n	800cb5e <rcl_wait_set_add_subscription+0x46>
 800cb2c:	6820      	ldr	r0, [r4, #0]
 800cb2e:	1c6e      	adds	r6, r5, #1
 800cb30:	601e      	str	r6, [r3, #0]
 800cb32:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800cb36:	b102      	cbz	r2, 800cb3a <rcl_wait_set_add_subscription+0x22>
 800cb38:	6015      	str	r5, [r2, #0]
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	f7ff fc30 	bl	800c3a0 <rcl_subscription_get_rmw_handle>
 800cb40:	b190      	cbz	r0, 800cb68 <rcl_wait_set_add_subscription+0x50>
 800cb42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb44:	6842      	ldr	r2, [r0, #4]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb4c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800cb4e:	6853      	ldr	r3, [r2, #4]
 800cb50:	3301      	adds	r3, #1
 800cb52:	6053      	str	r3, [r2, #4]
 800cb54:	2000      	movs	r0, #0
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cb5c:	bd70      	pop	{r4, r5, r6, pc}
 800cb5e:	f240 3086 	movw	r0, #902	@ 0x386
 800cb62:	bd70      	pop	{r4, r5, r6, pc}
 800cb64:	200b      	movs	r0, #11
 800cb66:	4770      	bx	lr
 800cb68:	2001      	movs	r0, #1
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	200b      	movs	r0, #11
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}

0800cb70 <rcl_wait_set_clear>:
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d073      	beq.n	800cc5c <rcl_wait_set_clear+0xec>
 800cb74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb76:	b510      	push	{r4, lr}
 800cb78:	4604      	mov	r4, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d070      	beq.n	800cc60 <rcl_wait_set_clear+0xf0>
 800cb7e:	6800      	ldr	r0, [r0, #0]
 800cb80:	b138      	cbz	r0, 800cb92 <rcl_wait_set_clear+0x22>
 800cb82:	6862      	ldr	r2, [r4, #4]
 800cb84:	2100      	movs	r1, #0
 800cb86:	0092      	lsls	r2, r2, #2
 800cb88:	f007 fcd2 	bl	8014530 <memset>
 800cb8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	68a0      	ldr	r0, [r4, #8]
 800cb94:	b138      	cbz	r0, 800cba6 <rcl_wait_set_clear+0x36>
 800cb96:	68e2      	ldr	r2, [r4, #12]
 800cb98:	2100      	movs	r1, #0
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	f007 fcc8 	bl	8014530 <memset>
 800cba0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cba2:	2200      	movs	r2, #0
 800cba4:	60da      	str	r2, [r3, #12]
 800cba6:	69a0      	ldr	r0, [r4, #24]
 800cba8:	b138      	cbz	r0, 800cbba <rcl_wait_set_clear+0x4a>
 800cbaa:	69e2      	ldr	r2, [r4, #28]
 800cbac:	2100      	movs	r1, #0
 800cbae:	0092      	lsls	r2, r2, #2
 800cbb0:	f007 fcbe 	bl	8014530 <memset>
 800cbb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	619a      	str	r2, [r3, #24]
 800cbba:	6a20      	ldr	r0, [r4, #32]
 800cbbc:	b138      	cbz	r0, 800cbce <rcl_wait_set_clear+0x5e>
 800cbbe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	0092      	lsls	r2, r2, #2
 800cbc4:	f007 fcb4 	bl	8014530 <memset>
 800cbc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbca:	2200      	movs	r2, #0
 800cbcc:	625a      	str	r2, [r3, #36]	@ 0x24
 800cbce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cbd0:	b138      	cbz	r0, 800cbe2 <rcl_wait_set_clear+0x72>
 800cbd2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	0092      	lsls	r2, r2, #2
 800cbd8:	f007 fcaa 	bl	8014530 <memset>
 800cbdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbde:	2200      	movs	r2, #0
 800cbe0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbe2:	6920      	ldr	r0, [r4, #16]
 800cbe4:	b138      	cbz	r0, 800cbf6 <rcl_wait_set_clear+0x86>
 800cbe6:	6962      	ldr	r2, [r4, #20]
 800cbe8:	2100      	movs	r1, #0
 800cbea:	0092      	lsls	r2, r2, #2
 800cbec:	f007 fca0 	bl	8014530 <memset>
 800cbf0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	641a      	str	r2, [r3, #64]	@ 0x40
 800cbf6:	6898      	ldr	r0, [r3, #8]
 800cbf8:	b138      	cbz	r0, 800cc0a <rcl_wait_set_clear+0x9a>
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	0092      	lsls	r2, r2, #2
 800cc00:	f007 fc96 	bl	8014530 <memset>
 800cc04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc06:	2200      	movs	r2, #0
 800cc08:	605a      	str	r2, [r3, #4]
 800cc0a:	6958      	ldr	r0, [r3, #20]
 800cc0c:	b138      	cbz	r0, 800cc1e <rcl_wait_set_clear+0xae>
 800cc0e:	691a      	ldr	r2, [r3, #16]
 800cc10:	2100      	movs	r1, #0
 800cc12:	0092      	lsls	r2, r2, #2
 800cc14:	f007 fc8c 	bl	8014530 <memset>
 800cc18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	611a      	str	r2, [r3, #16]
 800cc1e:	6a18      	ldr	r0, [r3, #32]
 800cc20:	b138      	cbz	r0, 800cc32 <rcl_wait_set_clear+0xc2>
 800cc22:	69da      	ldr	r2, [r3, #28]
 800cc24:	2100      	movs	r1, #0
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	f007 fc82 	bl	8014530 <memset>
 800cc2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc2e:	2200      	movs	r2, #0
 800cc30:	61da      	str	r2, [r3, #28]
 800cc32:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800cc34:	b138      	cbz	r0, 800cc46 <rcl_wait_set_clear+0xd6>
 800cc36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc38:	2100      	movs	r1, #0
 800cc3a:	0092      	lsls	r2, r2, #2
 800cc3c:	f007 fc78 	bl	8014530 <memset>
 800cc40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc42:	2200      	movs	r2, #0
 800cc44:	629a      	str	r2, [r3, #40]	@ 0x28
 800cc46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cc48:	b138      	cbz	r0, 800cc5a <rcl_wait_set_clear+0xea>
 800cc4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	0092      	lsls	r2, r2, #2
 800cc50:	f007 fc6e 	bl	8014530 <memset>
 800cc54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cc56:	2000      	movs	r0, #0
 800cc58:	6358      	str	r0, [r3, #52]	@ 0x34
 800cc5a:	bd10      	pop	{r4, pc}
 800cc5c:	200b      	movs	r0, #11
 800cc5e:	4770      	bx	lr
 800cc60:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	bf00      	nop

0800cc68 <rcl_wait_set_resize>:
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	f000 81a6 	beq.w	800cfba <rcl_wait_set_resize+0x352>
 800cc6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc72:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 800cc76:	b083      	sub	sp, #12
 800cc78:	4604      	mov	r4, r0
 800cc7a:	f1ba 0f00 	cmp.w	sl, #0
 800cc7e:	f000 819e 	beq.w	800cfbe <rcl_wait_set_resize+0x356>
 800cc82:	461e      	mov	r6, r3
 800cc84:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 800cc88:	f04f 0800 	mov.w	r8, #0
 800cc8c:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	f8c0 8004 	str.w	r8, [r0, #4]
 800cc96:	460f      	mov	r7, r1
 800cc98:	4615      	mov	r5, r2
 800cc9a:	f8ca 8000 	str.w	r8, [sl]
 800cc9e:	2900      	cmp	r1, #0
 800cca0:	f000 80c9 	beq.w	800ce36 <rcl_wait_set_resize+0x1ce>
 800cca4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800cca8:	6800      	ldr	r0, [r0, #0]
 800ccaa:	4651      	mov	r1, sl
 800ccac:	464a      	mov	r2, r9
 800ccae:	4798      	blx	r3
 800ccb0:	6020      	str	r0, [r4, #0]
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	f000 80d8 	beq.w	800ce68 <rcl_wait_set_resize+0x200>
 800ccb8:	4652      	mov	r2, sl
 800ccba:	4641      	mov	r1, r8
 800ccbc:	f007 fc38 	bl	8014530 <memset>
 800ccc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ccc2:	6067      	str	r7, [r4, #4]
 800ccc4:	6898      	ldr	r0, [r3, #8]
 800ccc6:	f8c3 8004 	str.w	r8, [r3, #4]
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	464a      	mov	r2, r9
 800ccce:	9b00      	ldr	r3, [sp, #0]
 800ccd0:	4651      	mov	r1, sl
 800ccd2:	4798      	blx	r3
 800ccd4:	9b01      	ldr	r3, [sp, #4]
 800ccd6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ccd8:	6098      	str	r0, [r3, #8]
 800ccda:	6897      	ldr	r7, [r2, #8]
 800ccdc:	2f00      	cmp	r7, #0
 800ccde:	f000 80be 	beq.w	800ce5e <rcl_wait_set_resize+0x1f6>
 800cce2:	4652      	mov	r2, sl
 800cce4:	4641      	mov	r1, r8
 800cce6:	4638      	mov	r0, r7
 800cce8:	f007 fc22 	bl	8014530 <memset>
 800ccec:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800ccf0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800ccf4:	2700      	movs	r7, #0
 800ccf6:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 800ccfa:	60e7      	str	r7, [r4, #12]
 800ccfc:	f8ca 700c 	str.w	r7, [sl, #12]
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	f040 80b5 	bne.w	800ce70 <rcl_wait_set_resize+0x208>
 800cd06:	68a0      	ldr	r0, [r4, #8]
 800cd08:	b130      	cbz	r0, 800cd18 <rcl_wait_set_resize+0xb0>
 800cd0a:	4641      	mov	r1, r8
 800cd0c:	4790      	blx	r2
 800cd0e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cd12:	60a5      	str	r5, [r4, #8]
 800cd14:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800cd18:	2700      	movs	r7, #0
 800cd1a:	19ad      	adds	r5, r5, r6
 800cd1c:	f8ca 7010 	str.w	r7, [sl, #16]
 800cd20:	f040 80be 	bne.w	800cea0 <rcl_wait_set_resize+0x238>
 800cd24:	f8da 0014 	ldr.w	r0, [sl, #20]
 800cd28:	b148      	cbz	r0, 800cd3e <rcl_wait_set_resize+0xd6>
 800cd2a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 800cd2e:	4641      	mov	r1, r8
 800cd30:	4798      	blx	r3
 800cd32:	f8ca 5014 	str.w	r5, [sl, #20]
 800cd36:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cd3a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800cd3e:	2500      	movs	r5, #0
 800cd40:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800cd44:	6165      	str	r5, [r4, #20]
 800cd46:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	f040 80bf 	bne.w	800cece <rcl_wait_set_resize+0x266>
 800cd50:	6920      	ldr	r0, [r4, #16]
 800cd52:	b140      	cbz	r0, 800cd66 <rcl_wait_set_resize+0xfe>
 800cd54:	4641      	mov	r1, r8
 800cd56:	47c8      	blx	r9
 800cd58:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cd5c:	6126      	str	r6, [r4, #16]
 800cd5e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800cd62:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800cd66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd68:	2500      	movs	r5, #0
 800cd6a:	61e5      	str	r5, [r4, #28]
 800cd6c:	f8ca 5018 	str.w	r5, [sl, #24]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f040 80c1 	bne.w	800cef8 <rcl_wait_set_resize+0x290>
 800cd76:	69a0      	ldr	r0, [r4, #24]
 800cd78:	b128      	cbz	r0, 800cd86 <rcl_wait_set_resize+0x11e>
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	47c8      	blx	r9
 800cd7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd80:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cd84:	61a3      	str	r3, [r4, #24]
 800cd86:	f8da 0020 	ldr.w	r0, [sl, #32]
 800cd8a:	b130      	cbz	r0, 800cd9a <rcl_wait_set_resize+0x132>
 800cd8c:	4641      	mov	r1, r8
 800cd8e:	47c8      	blx	r9
 800cd90:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cd94:	2300      	movs	r3, #0
 800cd96:	e9ca 3307 	strd	r3, r3, [sl, #28]
 800cd9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd9c:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 800cda0:	2600      	movs	r6, #0
 800cda2:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 800cda6:	6266      	str	r6, [r4, #36]	@ 0x24
 800cda8:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 80c8 	beq.w	800cf42 <rcl_wait_set_resize+0x2da>
 800cdb2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800cdb6:	6a20      	ldr	r0, [r4, #32]
 800cdb8:	4651      	mov	r1, sl
 800cdba:	463a      	mov	r2, r7
 800cdbc:	47c8      	blx	r9
 800cdbe:	6220      	str	r0, [r4, #32]
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d051      	beq.n	800ce68 <rcl_wait_set_resize+0x200>
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	f007 fbb2 	bl	8014530 <memset>
 800cdcc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800cdce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdd0:	6263      	str	r3, [r4, #36]	@ 0x24
 800cdd2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800cdd4:	62ae      	str	r6, [r5, #40]	@ 0x28
 800cdd6:	463a      	mov	r2, r7
 800cdd8:	4651      	mov	r1, sl
 800cdda:	47c8      	blx	r9
 800cddc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cdde:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800cde0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800cde2:	2d00      	cmp	r5, #0
 800cde4:	f000 8105 	beq.w	800cff2 <rcl_wait_set_resize+0x38a>
 800cde8:	4652      	mov	r2, sl
 800cdea:	4631      	mov	r1, r6
 800cdec:	4628      	mov	r0, r5
 800cdee:	f007 fb9f 	bl	8014530 <memset>
 800cdf2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cdf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdf8:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 800cdfc:	2500      	movs	r5, #0
 800cdfe:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 800ce02:	62e5      	str	r5, [r4, #44]	@ 0x2c
 800ce04:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 80af 	bne.w	800cf6c <rcl_wait_set_resize+0x304>
 800ce0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ce10:	b128      	cbz	r0, 800ce1e <rcl_wait_set_resize+0x1b6>
 800ce12:	4631      	mov	r1, r6
 800ce14:	47b8      	blx	r7
 800ce16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce18:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800ce1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce1e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800ce22:	b310      	cbz	r0, 800ce6a <rcl_wait_set_resize+0x202>
 800ce24:	4631      	mov	r1, r6
 800ce26:	47b8      	blx	r7
 800ce28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800ce30:	b003      	add	sp, #12
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	6800      	ldr	r0, [r0, #0]
 800ce38:	b120      	cbz	r0, 800ce44 <rcl_wait_set_resize+0x1dc>
 800ce3a:	4649      	mov	r1, r9
 800ce3c:	47d8      	blx	fp
 800ce3e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800ce42:	6027      	str	r7, [r4, #0]
 800ce44:	f8da 0008 	ldr.w	r0, [sl, #8]
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	f43f af51 	beq.w	800ccf0 <rcl_wait_set_resize+0x88>
 800ce4e:	4649      	mov	r1, r9
 800ce50:	47d8      	blx	fp
 800ce52:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800ce56:	2300      	movs	r3, #0
 800ce58:	e9ca 3301 	strd	r3, r3, [sl, #4]
 800ce5c:	e748      	b.n	800ccf0 <rcl_wait_set_resize+0x88>
 800ce5e:	6820      	ldr	r0, [r4, #0]
 800ce60:	4649      	mov	r1, r9
 800ce62:	47d8      	blx	fp
 800ce64:	e9c4 7700 	strd	r7, r7, [r4]
 800ce68:	200a      	movs	r0, #10
 800ce6a:	b003      	add	sp, #12
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce70:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800ce74:	68a0      	ldr	r0, [r4, #8]
 800ce76:	4642      	mov	r2, r8
 800ce78:	4649      	mov	r1, r9
 800ce7a:	4798      	blx	r3
 800ce7c:	60a0      	str	r0, [r4, #8]
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d0f2      	beq.n	800ce68 <rcl_wait_set_resize+0x200>
 800ce82:	4639      	mov	r1, r7
 800ce84:	464a      	mov	r2, r9
 800ce86:	f007 fb53 	bl	8014530 <memset>
 800ce8a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800ce8e:	60e5      	str	r5, [r4, #12]
 800ce90:	2700      	movs	r7, #0
 800ce92:	19ad      	adds	r5, r5, r6
 800ce94:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800ce98:	f8ca 7010 	str.w	r7, [sl, #16]
 800ce9c:	f43f af42 	beq.w	800cd24 <rcl_wait_set_resize+0xbc>
 800cea0:	00ad      	lsls	r5, r5, #2
 800cea2:	4642      	mov	r2, r8
 800cea4:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 800cea8:	f8da 0014 	ldr.w	r0, [sl, #20]
 800ceac:	4629      	mov	r1, r5
 800ceae:	4798      	blx	r3
 800ceb0:	4680      	mov	r8, r0
 800ceb2:	f8ca 0014 	str.w	r0, [sl, #20]
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	f000 8084 	beq.w	800cfc4 <rcl_wait_set_resize+0x35c>
 800cebc:	462a      	mov	r2, r5
 800cebe:	4639      	mov	r1, r7
 800cec0:	f007 fb36 	bl	8014530 <memset>
 800cec4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cec8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800cecc:	e737      	b.n	800cd3e <rcl_wait_set_resize+0xd6>
 800cece:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800ced2:	6920      	ldr	r0, [r4, #16]
 800ced4:	4642      	mov	r2, r8
 800ced6:	4649      	mov	r1, r9
 800ced8:	47b8      	blx	r7
 800ceda:	6120      	str	r0, [r4, #16]
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0c3      	beq.n	800ce68 <rcl_wait_set_resize+0x200>
 800cee0:	464a      	mov	r2, r9
 800cee2:	4629      	mov	r1, r5
 800cee4:	f007 fb24 	bl	8014530 <memset>
 800cee8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800ceec:	6166      	str	r6, [r4, #20]
 800ceee:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 800cef2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 800cef6:	e736      	b.n	800cd66 <rcl_wait_set_resize+0xfe>
 800cef8:	009e      	lsls	r6, r3, #2
 800cefa:	69a0      	ldr	r0, [r4, #24]
 800cefc:	4631      	mov	r1, r6
 800cefe:	4642      	mov	r2, r8
 800cf00:	47b8      	blx	r7
 800cf02:	61a0      	str	r0, [r4, #24]
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d0af      	beq.n	800ce68 <rcl_wait_set_resize+0x200>
 800cf08:	4632      	mov	r2, r6
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	f007 fb10 	bl	8014530 <memset>
 800cf10:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cf14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf16:	61e3      	str	r3, [r4, #28]
 800cf18:	f8da 0020 	ldr.w	r0, [sl, #32]
 800cf1c:	f8ca 501c 	str.w	r5, [sl, #28]
 800cf20:	4642      	mov	r2, r8
 800cf22:	4631      	mov	r1, r6
 800cf24:	47b8      	blx	r7
 800cf26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cf28:	f8ca 0020 	str.w	r0, [sl, #32]
 800cf2c:	6a1f      	ldr	r7, [r3, #32]
 800cf2e:	2f00      	cmp	r7, #0
 800cf30:	d058      	beq.n	800cfe4 <rcl_wait_set_resize+0x37c>
 800cf32:	4632      	mov	r2, r6
 800cf34:	4629      	mov	r1, r5
 800cf36:	4638      	mov	r0, r7
 800cf38:	f007 fafa 	bl	8014530 <memset>
 800cf3c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cf40:	e72b      	b.n	800cd9a <rcl_wait_set_resize+0x132>
 800cf42:	6a20      	ldr	r0, [r4, #32]
 800cf44:	b128      	cbz	r0, 800cf52 <rcl_wait_set_resize+0x2ea>
 800cf46:	4639      	mov	r1, r7
 800cf48:	47c0      	blx	r8
 800cf4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf4c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cf50:	6223      	str	r3, [r4, #32]
 800cf52:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800cf56:	2800      	cmp	r0, #0
 800cf58:	f43f af4d 	beq.w	800cdf6 <rcl_wait_set_resize+0x18e>
 800cf5c:	4639      	mov	r1, r7
 800cf5e:	47c0      	blx	r8
 800cf60:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cf64:	2300      	movs	r3, #0
 800cf66:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 800cf6a:	e744      	b.n	800cdf6 <rcl_wait_set_resize+0x18e>
 800cf6c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800cf70:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cf72:	4641      	mov	r1, r8
 800cf74:	4632      	mov	r2, r6
 800cf76:	47c8      	blx	r9
 800cf78:	62a0      	str	r0, [r4, #40]	@ 0x28
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	f43f af74 	beq.w	800ce68 <rcl_wait_set_resize+0x200>
 800cf80:	4642      	mov	r2, r8
 800cf82:	4629      	mov	r1, r5
 800cf84:	f007 fad4 	bl	8014530 <memset>
 800cf88:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 800cf8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf90:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800cf94:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 800cf98:	4632      	mov	r2, r6
 800cf9a:	4641      	mov	r1, r8
 800cf9c:	47c8      	blx	r9
 800cf9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cfa0:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa6:	b35b      	cbz	r3, 800d000 <rcl_wait_set_resize+0x398>
 800cfa8:	4642      	mov	r2, r8
 800cfaa:	4618      	mov	r0, r3
 800cfac:	4629      	mov	r1, r5
 800cfae:	f007 fabf 	bl	8014530 <memset>
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	b003      	add	sp, #12
 800cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfba:	200b      	movs	r0, #11
 800cfbc:	4770      	bx	lr
 800cfbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cfc2:	e752      	b.n	800ce6a <rcl_wait_set_resize+0x202>
 800cfc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cfc6:	68a0      	ldr	r0, [r4, #8]
 800cfc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfca:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800cfcc:	4790      	blx	r2
 800cfce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cfd0:	6920      	ldr	r0, [r4, #16]
 800cfd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfd4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800cfd6:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800cfda:	4790      	blx	r2
 800cfdc:	e9c4 8804 	strd	r8, r8, [r4, #16]
 800cfe0:	200a      	movs	r0, #10
 800cfe2:	e742      	b.n	800ce6a <rcl_wait_set_resize+0x202>
 800cfe4:	69a0      	ldr	r0, [r4, #24]
 800cfe6:	4641      	mov	r1, r8
 800cfe8:	47c8      	blx	r9
 800cfea:	e9c4 7706 	strd	r7, r7, [r4, #24]
 800cfee:	200a      	movs	r0, #10
 800cff0:	e73b      	b.n	800ce6a <rcl_wait_set_resize+0x202>
 800cff2:	6a20      	ldr	r0, [r4, #32]
 800cff4:	4639      	mov	r1, r7
 800cff6:	47c0      	blx	r8
 800cff8:	e9c4 5508 	strd	r5, r5, [r4, #32]
 800cffc:	200a      	movs	r0, #10
 800cffe:	e734      	b.n	800ce6a <rcl_wait_set_resize+0x202>
 800d000:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	4631      	mov	r1, r6
 800d006:	47b8      	blx	r7
 800d008:	9b00      	ldr	r3, [sp, #0]
 800d00a:	200a      	movs	r0, #10
 800d00c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800d010:	e72b      	b.n	800ce6a <rcl_wait_set_resize+0x202>
 800d012:	bf00      	nop

0800d014 <rcl_wait_set_init>:
 800d014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	4604      	mov	r4, r0
 800d01c:	a810      	add	r0, sp, #64	@ 0x40
 800d01e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800d022:	460f      	mov	r7, r1
 800d024:	4690      	mov	r8, r2
 800d026:	4699      	mov	r9, r3
 800d028:	f7fc fd0a 	bl	8009a40 <rcutils_allocator_is_valid>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d06b      	beq.n	800d108 <rcl_wait_set_init+0xf4>
 800d030:	2c00      	cmp	r4, #0
 800d032:	d069      	beq.n	800d108 <rcl_wait_set_init+0xf4>
 800d034:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d036:	b125      	cbz	r5, 800d042 <rcl_wait_set_init+0x2e>
 800d038:	2564      	movs	r5, #100	@ 0x64
 800d03a:	4628      	mov	r0, r5
 800d03c:	b004      	add	sp, #16
 800d03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d042:	f1ba 0f00 	cmp.w	sl, #0
 800d046:	d05f      	beq.n	800d108 <rcl_wait_set_init+0xf4>
 800d048:	4650      	mov	r0, sl
 800d04a:	f7fe f8f1 	bl	800b230 <rcl_context_is_valid>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d067      	beq.n	800d122 <rcl_wait_set_init+0x10e>
 800d052:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d054:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800d056:	205c      	movs	r0, #92	@ 0x5c
 800d058:	4798      	blx	r3
 800d05a:	6320      	str	r0, [r4, #48]	@ 0x30
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d062      	beq.n	800d126 <rcl_wait_set_init+0x112>
 800d060:	225c      	movs	r2, #92	@ 0x5c
 800d062:	4629      	mov	r1, r5
 800d064:	f007 fa64 	bl	8014530 <memset>
 800d068:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800d06c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d070:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800d072:	f8dc e000 	ldr.w	lr, [ip]
 800d076:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800d07a:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 800d07e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800d082:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800d086:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800d08a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800d08e:	60b5      	str	r5, [r6, #8]
 800d090:	6075      	str	r5, [r6, #4]
 800d092:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d096:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800d09a:	1899      	adds	r1, r3, r2
 800d09c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d09e:	f8da 0000 	ldr.w	r0, [sl]
 800d0a2:	f8cc e000 	str.w	lr, [ip]
 800d0a6:	4419      	add	r1, r3
 800d0a8:	4441      	add	r1, r8
 800d0aa:	3028      	adds	r0, #40	@ 0x28
 800d0ac:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800d0b0:	f001 ffac 	bl	800f00c <rmw_create_wait_set>
 800d0b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d0b6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800d0b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d0ba:	b350      	cbz	r0, 800d112 <rcl_wait_set_init+0xfe>
 800d0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0be:	9302      	str	r3, [sp, #8]
 800d0c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	4642      	mov	r2, r8
 800d0ca:	464b      	mov	r3, r9
 800d0cc:	4639      	mov	r1, r7
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f7ff fdca 	bl	800cc68 <rcl_wait_set_resize>
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0af      	beq.n	800d03a <rcl_wait_set_init+0x26>
 800d0da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d0dc:	bb2b      	cbnz	r3, 800d12a <rcl_wait_set_init+0x116>
 800d0de:	2600      	movs	r6, #0
 800d0e0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800d0e4:	9600      	str	r6, [sp, #0]
 800d0e6:	4633      	mov	r3, r6
 800d0e8:	4632      	mov	r2, r6
 800d0ea:	4631      	mov	r1, r6
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7ff fdbb 	bl	800cc68 <rcl_wait_set_resize>
 800d0f2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d0a0      	beq.n	800d03a <rcl_wait_set_init+0x26>
 800d0f8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d0fa:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800d0fc:	4798      	blx	r3
 800d0fe:	4628      	mov	r0, r5
 800d100:	6326      	str	r6, [r4, #48]	@ 0x30
 800d102:	b004      	add	sp, #16
 800d104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d108:	250b      	movs	r5, #11
 800d10a:	4628      	mov	r0, r5
 800d10c:	b004      	add	sp, #16
 800d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d112:	2501      	movs	r5, #1
 800d114:	f001 ff84 	bl	800f020 <rmw_destroy_wait_set>
 800d118:	2800      	cmp	r0, #0
 800d11a:	bf18      	it	ne
 800d11c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800d120:	e7dd      	b.n	800d0de <rcl_wait_set_init+0xca>
 800d122:	2565      	movs	r5, #101	@ 0x65
 800d124:	e789      	b.n	800d03a <rcl_wait_set_init+0x26>
 800d126:	250a      	movs	r5, #10
 800d128:	e787      	b.n	800d03a <rcl_wait_set_init+0x26>
 800d12a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d12c:	e7f2      	b.n	800d114 <rcl_wait_set_init+0x100>
 800d12e:	bf00      	nop

0800d130 <rcl_wait_set_add_guard_condition>:
 800d130:	b320      	cbz	r0, 800d17c <rcl_wait_set_add_guard_condition+0x4c>
 800d132:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d134:	b570      	push	{r4, r5, r6, lr}
 800d136:	4604      	mov	r4, r0
 800d138:	b1d3      	cbz	r3, 800d170 <rcl_wait_set_add_guard_condition+0x40>
 800d13a:	b319      	cbz	r1, 800d184 <rcl_wait_set_add_guard_condition+0x54>
 800d13c:	68dd      	ldr	r5, [r3, #12]
 800d13e:	68e0      	ldr	r0, [r4, #12]
 800d140:	4285      	cmp	r5, r0
 800d142:	d218      	bcs.n	800d176 <rcl_wait_set_add_guard_condition+0x46>
 800d144:	68a0      	ldr	r0, [r4, #8]
 800d146:	1c6e      	adds	r6, r5, #1
 800d148:	60de      	str	r6, [r3, #12]
 800d14a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d14e:	b102      	cbz	r2, 800d152 <rcl_wait_set_add_guard_condition+0x22>
 800d150:	6015      	str	r5, [r2, #0]
 800d152:	4608      	mov	r0, r1
 800d154:	f005 fda0 	bl	8012c98 <rcl_guard_condition_get_rmw_handle>
 800d158:	b190      	cbz	r0, 800d180 <rcl_wait_set_add_guard_condition+0x50>
 800d15a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d15c:	6842      	ldr	r2, [r0, #4]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d164:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d166:	6913      	ldr	r3, [r2, #16]
 800d168:	3301      	adds	r3, #1
 800d16a:	6113      	str	r3, [r2, #16]
 800d16c:	2000      	movs	r0, #0
 800d16e:	bd70      	pop	{r4, r5, r6, pc}
 800d170:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d174:	bd70      	pop	{r4, r5, r6, pc}
 800d176:	f240 3086 	movw	r0, #902	@ 0x386
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	200b      	movs	r0, #11
 800d17e:	4770      	bx	lr
 800d180:	2001      	movs	r0, #1
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	200b      	movs	r0, #11
 800d186:	bd70      	pop	{r4, r5, r6, pc}

0800d188 <rcl_wait_set_add_timer>:
 800d188:	b340      	cbz	r0, 800d1dc <rcl_wait_set_add_timer+0x54>
 800d18a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	4604      	mov	r4, r0
 800d190:	b1f3      	cbz	r3, 800d1d0 <rcl_wait_set_add_timer+0x48>
 800d192:	b329      	cbz	r1, 800d1e0 <rcl_wait_set_add_timer+0x58>
 800d194:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d196:	6965      	ldr	r5, [r4, #20]
 800d198:	42a8      	cmp	r0, r5
 800d19a:	d21c      	bcs.n	800d1d6 <rcl_wait_set_add_timer+0x4e>
 800d19c:	6925      	ldr	r5, [r4, #16]
 800d19e:	1c46      	adds	r6, r0, #1
 800d1a0:	641e      	str	r6, [r3, #64]	@ 0x40
 800d1a2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800d1a6:	b102      	cbz	r2, 800d1aa <rcl_wait_set_add_timer+0x22>
 800d1a8:	6010      	str	r0, [r2, #0]
 800d1aa:	4608      	mov	r0, r1
 800d1ac:	f7ff faa4 	bl	800c6f8 <rcl_timer_get_guard_condition>
 800d1b0:	b168      	cbz	r0, 800d1ce <rcl_wait_set_add_timer+0x46>
 800d1b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d1b4:	68e3      	ldr	r3, [r4, #12]
 800d1b6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	441d      	add	r5, r3
 800d1bc:	f005 fd6c 	bl	8012c98 <rcl_guard_condition_get_rmw_handle>
 800d1c0:	b180      	cbz	r0, 800d1e4 <rcl_wait_set_add_timer+0x5c>
 800d1c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d1c4:	6842      	ldr	r2, [r0, #4]
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
 800d1d6:	f240 3086 	movw	r0, #902	@ 0x386
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	200b      	movs	r0, #11
 800d1de:	4770      	bx	lr
 800d1e0:	200b      	movs	r0, #11
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}

0800d1e8 <rcl_wait_set_add_client>:
 800d1e8:	b320      	cbz	r0, 800d234 <rcl_wait_set_add_client+0x4c>
 800d1ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	b1d3      	cbz	r3, 800d228 <rcl_wait_set_add_client+0x40>
 800d1f2:	b319      	cbz	r1, 800d23c <rcl_wait_set_add_client+0x54>
 800d1f4:	699d      	ldr	r5, [r3, #24]
 800d1f6:	69e0      	ldr	r0, [r4, #28]
 800d1f8:	4285      	cmp	r5, r0
 800d1fa:	d218      	bcs.n	800d22e <rcl_wait_set_add_client+0x46>
 800d1fc:	69a0      	ldr	r0, [r4, #24]
 800d1fe:	1c6e      	adds	r6, r5, #1
 800d200:	619e      	str	r6, [r3, #24]
 800d202:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d206:	b102      	cbz	r2, 800d20a <rcl_wait_set_add_client+0x22>
 800d208:	6015      	str	r5, [r2, #0]
 800d20a:	4608      	mov	r0, r1
 800d20c:	f7fd ffc4 	bl	800b198 <rcl_client_get_rmw_handle>
 800d210:	b190      	cbz	r0, 800d238 <rcl_wait_set_add_client+0x50>
 800d212:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d214:	6842      	ldr	r2, [r0, #4]
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d21c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d21e:	69d3      	ldr	r3, [r2, #28]
 800d220:	3301      	adds	r3, #1
 800d222:	61d3      	str	r3, [r2, #28]
 800d224:	2000      	movs	r0, #0
 800d226:	bd70      	pop	{r4, r5, r6, pc}
 800d228:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	f240 3086 	movw	r0, #902	@ 0x386
 800d232:	bd70      	pop	{r4, r5, r6, pc}
 800d234:	200b      	movs	r0, #11
 800d236:	4770      	bx	lr
 800d238:	2001      	movs	r0, #1
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	200b      	movs	r0, #11
 800d23e:	bd70      	pop	{r4, r5, r6, pc}

0800d240 <rcl_wait_set_add_service>:
 800d240:	b320      	cbz	r0, 800d28c <rcl_wait_set_add_service+0x4c>
 800d242:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	4604      	mov	r4, r0
 800d248:	b1d3      	cbz	r3, 800d280 <rcl_wait_set_add_service+0x40>
 800d24a:	b319      	cbz	r1, 800d294 <rcl_wait_set_add_service+0x54>
 800d24c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800d24e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d250:	4285      	cmp	r5, r0
 800d252:	d218      	bcs.n	800d286 <rcl_wait_set_add_service+0x46>
 800d254:	6a20      	ldr	r0, [r4, #32]
 800d256:	1c6e      	adds	r6, r5, #1
 800d258:	625e      	str	r6, [r3, #36]	@ 0x24
 800d25a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800d25e:	b102      	cbz	r2, 800d262 <rcl_wait_set_add_service+0x22>
 800d260:	6015      	str	r5, [r2, #0]
 800d262:	4608      	mov	r0, r1
 800d264:	f7fe fed4 	bl	800c010 <rcl_service_get_rmw_handle>
 800d268:	b190      	cbz	r0, 800d290 <rcl_wait_set_add_service+0x50>
 800d26a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d26c:	6842      	ldr	r2, [r0, #4]
 800d26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d270:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d274:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d276:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800d278:	3301      	adds	r3, #1
 800d27a:	6293      	str	r3, [r2, #40]	@ 0x28
 800d27c:	2000      	movs	r0, #0
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d284:	bd70      	pop	{r4, r5, r6, pc}
 800d286:	f240 3086 	movw	r0, #902	@ 0x386
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
 800d28c:	200b      	movs	r0, #11
 800d28e:	4770      	bx	lr
 800d290:	2001      	movs	r0, #1
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	200b      	movs	r0, #11
 800d296:	bd70      	pop	{r4, r5, r6, pc}

0800d298 <rcl_wait>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	b08f      	sub	sp, #60	@ 0x3c
 800d29e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f000 814c 	beq.w	800d540 <rcl_wait+0x2a8>
 800d2a8:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	f000 80bc 	beq.w	800d42a <rcl_wait+0x192>
 800d2b2:	6843      	ldr	r3, [r0, #4]
 800d2b4:	b973      	cbnz	r3, 800d2d4 <rcl_wait+0x3c>
 800d2b6:	68e3      	ldr	r3, [r4, #12]
 800d2b8:	b963      	cbnz	r3, 800d2d4 <rcl_wait+0x3c>
 800d2ba:	6963      	ldr	r3, [r4, #20]
 800d2bc:	b953      	cbnz	r3, 800d2d4 <rcl_wait+0x3c>
 800d2be:	69e3      	ldr	r3, [r4, #28]
 800d2c0:	b943      	cbnz	r3, 800d2d4 <rcl_wait+0x3c>
 800d2c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d2c4:	b933      	cbnz	r3, 800d2d4 <rcl_wait+0x3c>
 800d2c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d2c8:	b923      	cbnz	r3, 800d2d4 <rcl_wait+0x3c>
 800d2ca:	f240 3085 	movw	r0, #901	@ 0x385
 800d2ce:	b00f      	add	sp, #60	@ 0x3c
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2d8:	2a01      	cmp	r2, #1
 800d2da:	f173 0300 	sbcs.w	r3, r3, #0
 800d2de:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800d2e0:	db56      	blt.n	800d390 <rcl_wait+0xf8>
 800d2e2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d2e6:	2900      	cmp	r1, #0
 800d2e8:	f000 8149 	beq.w	800d57e <rcl_wait+0x2e6>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9307      	str	r3, [sp, #28]
 800d2f0:	469b      	mov	fp, r3
 800d2f2:	f04f 0800 	mov.w	r8, #0
 800d2f6:	f04f 0900 	mov.w	r9, #0
 800d2fa:	e00d      	b.n	800d318 <rcl_wait+0x80>
 800d2fc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800d302:	f842 000a 	str.w	r0, [r2, sl]
 800d306:	f118 0801 	adds.w	r8, r8, #1
 800d30a:	f149 0900 	adc.w	r9, r9, #0
 800d30e:	2300      	movs	r3, #0
 800d310:	4599      	cmp	r9, r3
 800d312:	bf08      	it	eq
 800d314:	4588      	cmpeq	r8, r1
 800d316:	d243      	bcs.n	800d3a0 <rcl_wait+0x108>
 800d318:	6922      	ldr	r2, [r4, #16]
 800d31a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800d31e:	f852 000a 	ldr.w	r0, [r2, sl]
 800d322:	2800      	cmp	r0, #0
 800d324:	d0ef      	beq.n	800d306 <rcl_wait+0x6e>
 800d326:	68e2      	ldr	r2, [r4, #12]
 800d328:	6969      	ldr	r1, [r5, #20]
 800d32a:	4442      	add	r2, r8
 800d32c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800d330:	b13b      	cbz	r3, 800d342 <rcl_wait+0xaa>
 800d332:	692a      	ldr	r2, [r5, #16]
 800d334:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d338:	6921      	ldr	r1, [r4, #16]
 800d33a:	3201      	adds	r2, #1
 800d33c:	f851 000a 	ldr.w	r0, [r1, sl]
 800d340:	612a      	str	r2, [r5, #16]
 800d342:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 800d346:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 800d34a:	f7ff f9c3 	bl	800c6d4 <rcl_timer_is_canceled>
 800d34e:	2800      	cmp	r0, #0
 800d350:	d1bd      	bne.n	800d2ce <rcl_wait+0x36>
 800d352:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 800d356:	2a00      	cmp	r2, #0
 800d358:	d1d0      	bne.n	800d2fc <rcl_wait+0x64>
 800d35a:	6922      	ldr	r2, [r4, #16]
 800d35c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d360:	f852 000a 	ldr.w	r0, [r2, sl]
 800d364:	a90a      	add	r1, sp, #40	@ 0x28
 800d366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d36a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800d36e:	f7ff f98d 	bl	800c68c <rcl_timer_get_time_until_next_call>
 800d372:	2800      	cmp	r0, #0
 800d374:	d1ab      	bne.n	800d2ce <rcl_wait+0x36>
 800d376:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800d37a:	42b2      	cmp	r2, r6
 800d37c:	eb73 0107 	sbcs.w	r1, r3, r7
 800d380:	da03      	bge.n	800d38a <rcl_wait+0xf2>
 800d382:	461f      	mov	r7, r3
 800d384:	2301      	movs	r3, #1
 800d386:	4616      	mov	r6, r2
 800d388:	9307      	str	r3, [sp, #28]
 800d38a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800d38c:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800d38e:	e7ba      	b.n	800d306 <rcl_wait+0x6e>
 800d390:	2900      	cmp	r1, #0
 800d392:	f000 80de 	beq.w	800d552 <rcl_wait+0x2ba>
 800d396:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800d39a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800d39e:	e7a5      	b.n	800d2ec <rcl_wait+0x54>
 800d3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	d145      	bne.n	800d434 <rcl_wait+0x19c>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800d3b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d3b4:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3b6:	9302      	str	r3, [sp, #8]
 800d3b8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 800d3c6:	f105 031c 	add.w	r3, r5, #28
 800d3ca:	f105 0110 	add.w	r1, r5, #16
 800d3ce:	1d28      	adds	r0, r5, #4
 800d3d0:	f001 fc9c 	bl	800ed0c <rmw_wait>
 800d3d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d3d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3d8:	4680      	mov	r8, r0
 800d3da:	b30a      	cbz	r2, 800d420 <rcl_wait+0x188>
 800d3dc:	2500      	movs	r5, #0
 800d3de:	462f      	mov	r7, r5
 800d3e0:	e004      	b.n	800d3ec <rcl_wait+0x154>
 800d3e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d3e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3e6:	3501      	adds	r5, #1
 800d3e8:	42aa      	cmp	r2, r5
 800d3ea:	d919      	bls.n	800d420 <rcl_wait+0x188>
 800d3ec:	6922      	ldr	r2, [r4, #16]
 800d3ee:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d3f2:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 800d3f6:	00ae      	lsls	r6, r5, #2
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d0f3      	beq.n	800d3e4 <rcl_wait+0x14c>
 800d3fc:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 800d400:	f7ff f90c 	bl	800c61c <rcl_timer_is_ready>
 800d404:	2800      	cmp	r0, #0
 800d406:	f47f af62 	bne.w	800d2ce <rcl_wait+0x36>
 800d40a:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 800d40e:	2a00      	cmp	r2, #0
 800d410:	d1e7      	bne.n	800d3e2 <rcl_wait+0x14a>
 800d412:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d414:	6921      	ldr	r1, [r4, #16]
 800d416:	518a      	str	r2, [r1, r6]
 800d418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d41a:	3501      	adds	r5, #1
 800d41c:	42aa      	cmp	r2, r5
 800d41e:	d8e5      	bhi.n	800d3ec <rcl_wait+0x154>
 800d420:	f038 0002 	bics.w	r0, r8, #2
 800d424:	d029      	beq.n	800d47a <rcl_wait+0x1e2>
 800d426:	2001      	movs	r0, #1
 800d428:	e751      	b.n	800d2ce <rcl_wait+0x36>
 800d42a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d42e:	b00f      	add	sp, #60	@ 0x3c
 800d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d438:	2a01      	cmp	r2, #1
 800d43a:	f173 0300 	sbcs.w	r3, r3, #0
 800d43e:	f2c0 8083 	blt.w	800d548 <rcl_wait+0x2b0>
 800d442:	2e00      	cmp	r6, #0
 800d444:	f177 0300 	sbcs.w	r3, r7, #0
 800d448:	bfbc      	itt	lt
 800d44a:	2600      	movlt	r6, #0
 800d44c:	2700      	movlt	r7, #0
 800d44e:	a34e      	add	r3, pc, #312	@ (adr r3, 800d588 <rcl_wait+0x2f0>)
 800d450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d454:	4630      	mov	r0, r6
 800d456:	4639      	mov	r1, r7
 800d458:	f7f3 f906 	bl	8000668 <__aeabi_ldivmod>
 800d45c:	a34a      	add	r3, pc, #296	@ (adr r3, 800d588 <rcl_wait+0x2f0>)
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	4680      	mov	r8, r0
 800d464:	4689      	mov	r9, r1
 800d466:	4630      	mov	r0, r6
 800d468:	4639      	mov	r1, r7
 800d46a:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 800d46e:	f7f3 f8fb 	bl	8000668 <__aeabi_ldivmod>
 800d472:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d476:	ab0a      	add	r3, sp, #40	@ 0x28
 800d478:	e79d      	b.n	800d3b6 <rcl_wait+0x11e>
 800d47a:	6866      	ldr	r6, [r4, #4]
 800d47c:	4602      	mov	r2, r0
 800d47e:	b91e      	cbnz	r6, 800d488 <rcl_wait+0x1f0>
 800d480:	e00d      	b.n	800d49e <rcl_wait+0x206>
 800d482:	3201      	adds	r2, #1
 800d484:	42b2      	cmp	r2, r6
 800d486:	d00a      	beq.n	800d49e <rcl_wait+0x206>
 800d488:	6899      	ldr	r1, [r3, #8]
 800d48a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d48e:	2900      	cmp	r1, #0
 800d490:	d1f7      	bne.n	800d482 <rcl_wait+0x1ea>
 800d492:	6825      	ldr	r5, [r4, #0]
 800d494:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800d498:	3201      	adds	r2, #1
 800d49a:	42b2      	cmp	r2, r6
 800d49c:	d1f4      	bne.n	800d488 <rcl_wait+0x1f0>
 800d49e:	68e6      	ldr	r6, [r4, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	b91e      	cbnz	r6, 800d4ac <rcl_wait+0x214>
 800d4a4:	e00d      	b.n	800d4c2 <rcl_wait+0x22a>
 800d4a6:	3201      	adds	r2, #1
 800d4a8:	42b2      	cmp	r2, r6
 800d4aa:	d00a      	beq.n	800d4c2 <rcl_wait+0x22a>
 800d4ac:	6959      	ldr	r1, [r3, #20]
 800d4ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d4b2:	2900      	cmp	r1, #0
 800d4b4:	d1f7      	bne.n	800d4a6 <rcl_wait+0x20e>
 800d4b6:	68a5      	ldr	r5, [r4, #8]
 800d4b8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800d4bc:	3201      	adds	r2, #1
 800d4be:	42b2      	cmp	r2, r6
 800d4c0:	d1f4      	bne.n	800d4ac <rcl_wait+0x214>
 800d4c2:	69e6      	ldr	r6, [r4, #28]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	b91e      	cbnz	r6, 800d4d0 <rcl_wait+0x238>
 800d4c8:	e00d      	b.n	800d4e6 <rcl_wait+0x24e>
 800d4ca:	3201      	adds	r2, #1
 800d4cc:	42b2      	cmp	r2, r6
 800d4ce:	d00a      	beq.n	800d4e6 <rcl_wait+0x24e>
 800d4d0:	6a19      	ldr	r1, [r3, #32]
 800d4d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d4d6:	2900      	cmp	r1, #0
 800d4d8:	d1f7      	bne.n	800d4ca <rcl_wait+0x232>
 800d4da:	69a5      	ldr	r5, [r4, #24]
 800d4dc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800d4e0:	3201      	adds	r2, #1
 800d4e2:	42b2      	cmp	r2, r6
 800d4e4:	d1f4      	bne.n	800d4d0 <rcl_wait+0x238>
 800d4e6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	b91e      	cbnz	r6, 800d4f4 <rcl_wait+0x25c>
 800d4ec:	e00d      	b.n	800d50a <rcl_wait+0x272>
 800d4ee:	3201      	adds	r2, #1
 800d4f0:	4296      	cmp	r6, r2
 800d4f2:	d00a      	beq.n	800d50a <rcl_wait+0x272>
 800d4f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d4f6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d4fa:	2900      	cmp	r1, #0
 800d4fc:	d1f7      	bne.n	800d4ee <rcl_wait+0x256>
 800d4fe:	6a25      	ldr	r5, [r4, #32]
 800d500:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800d504:	3201      	adds	r2, #1
 800d506:	4296      	cmp	r6, r2
 800d508:	d1f4      	bne.n	800d4f4 <rcl_wait+0x25c>
 800d50a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d50c:	2200      	movs	r2, #0
 800d50e:	b91e      	cbnz	r6, 800d518 <rcl_wait+0x280>
 800d510:	e00d      	b.n	800d52e <rcl_wait+0x296>
 800d512:	3201      	adds	r2, #1
 800d514:	42b2      	cmp	r2, r6
 800d516:	d00a      	beq.n	800d52e <rcl_wait+0x296>
 800d518:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d51a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d51e:	2900      	cmp	r1, #0
 800d520:	d1f7      	bne.n	800d512 <rcl_wait+0x27a>
 800d522:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800d524:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 800d528:	3201      	adds	r2, #1
 800d52a:	42b2      	cmp	r2, r6
 800d52c:	d1f4      	bne.n	800d518 <rcl_wait+0x280>
 800d52e:	f1b8 0f02 	cmp.w	r8, #2
 800d532:	f47f aecc 	bne.w	800d2ce <rcl_wait+0x36>
 800d536:	9b07      	ldr	r3, [sp, #28]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	bf08      	it	eq
 800d53c:	2002      	moveq	r0, #2
 800d53e:	e6c6      	b.n	800d2ce <rcl_wait+0x36>
 800d540:	200b      	movs	r0, #11
 800d542:	b00f      	add	sp, #60	@ 0x3c
 800d544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d548:	9b07      	ldr	r3, [sp, #28]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f47f af79 	bne.w	800d442 <rcl_wait+0x1aa>
 800d550:	e731      	b.n	800d3b6 <rcl_wait+0x11e>
 800d552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d556:	4313      	orrs	r3, r2
 800d558:	bf08      	it	eq
 800d55a:	9107      	streq	r1, [sp, #28]
 800d55c:	f43f af24 	beq.w	800d3a8 <rcl_wait+0x110>
 800d560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d564:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800d568:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800d56c:	2a01      	cmp	r2, #1
 800d56e:	f173 0300 	sbcs.w	r3, r3, #0
 800d572:	f04f 0300 	mov.w	r3, #0
 800d576:	9307      	str	r3, [sp, #28]
 800d578:	f6bf af63 	bge.w	800d442 <rcl_wait+0x1aa>
 800d57c:	e71b      	b.n	800d3b6 <rcl_wait+0x11e>
 800d57e:	4632      	mov	r2, r6
 800d580:	463b      	mov	r3, r7
 800d582:	e7f3      	b.n	800d56c <rcl_wait+0x2d4>
 800d584:	f3af 8000 	nop.w
 800d588:	3b9aca00 	.word	0x3b9aca00
 800d58c:	00000000 	.word	0x00000000

0800d590 <__atomic_load_8>:
 800d590:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d594:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d598:	4b14      	ldr	r3, [pc, #80]	@ (800d5ec <__atomic_load_8+0x5c>)
 800d59a:	4a15      	ldr	r2, [pc, #84]	@ (800d5f0 <__atomic_load_8+0x60>)
 800d59c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d5a0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d5a4:	fb03 f301 	mul.w	r3, r3, r1
 800d5a8:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800d5ac:	fba2 1203 	umull	r1, r2, r2, r3
 800d5b0:	0912      	lsrs	r2, r2, #4
 800d5b2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d5b6:	b430      	push	{r4, r5}
 800d5b8:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800d5bc:	4c0d      	ldr	r4, [pc, #52]	@ (800d5f4 <__atomic_load_8+0x64>)
 800d5be:	1a9b      	subs	r3, r3, r2
 800d5c0:	18e1      	adds	r1, r4, r3
 800d5c2:	f04f 0501 	mov.w	r5, #1
 800d5c6:	e8d1 2f4f 	ldrexb	r2, [r1]
 800d5ca:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800d5ce:	f1bc 0f00 	cmp.w	ip, #0
 800d5d2:	d1f8      	bne.n	800d5c6 <__atomic_load_8+0x36>
 800d5d4:	f3bf 8f5b 	dmb	ish
 800d5d8:	b2d2      	uxtb	r2, r2
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	d1f3      	bne.n	800d5c6 <__atomic_load_8+0x36>
 800d5de:	e9d0 0100 	ldrd	r0, r1, [r0]
 800d5e2:	f3bf 8f5b 	dmb	ish
 800d5e6:	54e2      	strb	r2, [r4, r3]
 800d5e8:	bc30      	pop	{r4, r5}
 800d5ea:	4770      	bx	lr
 800d5ec:	27d4eb2d 	.word	0x27d4eb2d
 800d5f0:	b21642c9 	.word	0xb21642c9
 800d5f4:	200091c0 	.word	0x200091c0

0800d5f8 <__atomic_store_8>:
 800d5f8:	b4f0      	push	{r4, r5, r6, r7}
 800d5fa:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 800d5fe:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 800d602:	4914      	ldr	r1, [pc, #80]	@ (800d654 <__atomic_store_8+0x5c>)
 800d604:	4c14      	ldr	r4, [pc, #80]	@ (800d658 <__atomic_store_8+0x60>)
 800d606:	4e15      	ldr	r6, [pc, #84]	@ (800d65c <__atomic_store_8+0x64>)
 800d608:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800d60c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 800d610:	fb01 f105 	mul.w	r1, r1, r5
 800d614:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d618:	fba4 5401 	umull	r5, r4, r4, r1
 800d61c:	0924      	lsrs	r4, r4, #4
 800d61e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d622:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 800d626:	1b09      	subs	r1, r1, r4
 800d628:	1875      	adds	r5, r6, r1
 800d62a:	f04f 0701 	mov.w	r7, #1
 800d62e:	e8d5 4f4f 	ldrexb	r4, [r5]
 800d632:	e8c5 7f4c 	strexb	ip, r7, [r5]
 800d636:	f1bc 0f00 	cmp.w	ip, #0
 800d63a:	d1f8      	bne.n	800d62e <__atomic_store_8+0x36>
 800d63c:	f3bf 8f5b 	dmb	ish
 800d640:	b2e4      	uxtb	r4, r4
 800d642:	2c00      	cmp	r4, #0
 800d644:	d1f3      	bne.n	800d62e <__atomic_store_8+0x36>
 800d646:	e9c0 2300 	strd	r2, r3, [r0]
 800d64a:	f3bf 8f5b 	dmb	ish
 800d64e:	5474      	strb	r4, [r6, r1]
 800d650:	bcf0      	pop	{r4, r5, r6, r7}
 800d652:	4770      	bx	lr
 800d654:	27d4eb2d 	.word	0x27d4eb2d
 800d658:	b21642c9 	.word	0xb21642c9
 800d65c:	200091c0 	.word	0x200091c0

0800d660 <__atomic_exchange_8>:
 800d660:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800d664:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 800d668:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 800d66c:	4c16      	ldr	r4, [pc, #88]	@ (800d6c8 <__atomic_exchange_8+0x68>)
 800d66e:	4917      	ldr	r1, [pc, #92]	@ (800d6cc <__atomic_exchange_8+0x6c>)
 800d670:	4e17      	ldr	r6, [pc, #92]	@ (800d6d0 <__atomic_exchange_8+0x70>)
 800d672:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800d676:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 800d67a:	fb04 f505 	mul.w	r5, r4, r5
 800d67e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 800d682:	fba1 4105 	umull	r4, r1, r1, r5
 800d686:	0909      	lsrs	r1, r1, #4
 800d688:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800d68c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 800d690:	1a6c      	subs	r4, r5, r1
 800d692:	1931      	adds	r1, r6, r4
 800d694:	f04f 0701 	mov.w	r7, #1
 800d698:	e8d1 5f4f 	ldrexb	r5, [r1]
 800d69c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 800d6a0:	f1bc 0f00 	cmp.w	ip, #0
 800d6a4:	d1f8      	bne.n	800d698 <__atomic_exchange_8+0x38>
 800d6a6:	f3bf 8f5b 	dmb	ish
 800d6aa:	b2ed      	uxtb	r5, r5
 800d6ac:	2d00      	cmp	r5, #0
 800d6ae:	d1f3      	bne.n	800d698 <__atomic_exchange_8+0x38>
 800d6b0:	e9d0 8900 	ldrd	r8, r9, [r0]
 800d6b4:	e9c0 2300 	strd	r2, r3, [r0]
 800d6b8:	f3bf 8f5b 	dmb	ish
 800d6bc:	5535      	strb	r5, [r6, r4]
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800d6c6:	4770      	bx	lr
 800d6c8:	27d4eb2d 	.word	0x27d4eb2d
 800d6cc:	b21642c9 	.word	0xb21642c9
 800d6d0:	200091c0 	.word	0x200091c0

0800d6d4 <rcutils_is_directory>:
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	4770      	bx	lr

0800d6d8 <rcutils_join_path>:
 800d6d8:	b082      	sub	sp, #8
 800d6da:	e88d 000c 	stmia.w	sp, {r2, r3}
 800d6de:	2000      	movs	r0, #0
 800d6e0:	b002      	add	sp, #8
 800d6e2:	4770      	bx	lr

0800d6e4 <rcutils_to_native_path>:
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	a801      	add	r0, sp, #4
 800d6e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d6ec:	b004      	add	sp, #16
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop

0800d6f4 <rcutils_format_string_limit>:
 800d6f4:	b40f      	push	{r0, r1, r2, r3}
 800d6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6f8:	b083      	sub	sp, #12
 800d6fa:	ac08      	add	r4, sp, #32
 800d6fc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800d6fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d702:	b34e      	cbz	r6, 800d758 <rcutils_format_string_limit+0x64>
 800d704:	a808      	add	r0, sp, #32
 800d706:	f7fc f99b 	bl	8009a40 <rcutils_allocator_is_valid>
 800d70a:	b328      	cbz	r0, 800d758 <rcutils_format_string_limit+0x64>
 800d70c:	2100      	movs	r1, #0
 800d70e:	ab0f      	add	r3, sp, #60	@ 0x3c
 800d710:	4608      	mov	r0, r1
 800d712:	4632      	mov	r2, r6
 800d714:	e9cd 3300 	strd	r3, r3, [sp]
 800d718:	f000 f904 	bl	800d924 <rcutils_vsnprintf>
 800d71c:	1c43      	adds	r3, r0, #1
 800d71e:	4605      	mov	r5, r0
 800d720:	d01a      	beq.n	800d758 <rcutils_format_string_limit+0x64>
 800d722:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d724:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d726:	1c47      	adds	r7, r0, #1
 800d728:	429f      	cmp	r7, r3
 800d72a:	bf84      	itt	hi
 800d72c:	461f      	movhi	r7, r3
 800d72e:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800d732:	4638      	mov	r0, r7
 800d734:	9b08      	ldr	r3, [sp, #32]
 800d736:	4798      	blx	r3
 800d738:	4604      	mov	r4, r0
 800d73a:	b168      	cbz	r0, 800d758 <rcutils_format_string_limit+0x64>
 800d73c:	9b01      	ldr	r3, [sp, #4]
 800d73e:	4632      	mov	r2, r6
 800d740:	4639      	mov	r1, r7
 800d742:	f000 f8ef 	bl	800d924 <rcutils_vsnprintf>
 800d746:	2800      	cmp	r0, #0
 800d748:	db02      	blt.n	800d750 <rcutils_format_string_limit+0x5c>
 800d74a:	2300      	movs	r3, #0
 800d74c:	5563      	strb	r3, [r4, r5]
 800d74e:	e004      	b.n	800d75a <rcutils_format_string_limit+0x66>
 800d750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d752:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d754:	4620      	mov	r0, r4
 800d756:	4798      	blx	r3
 800d758:	2400      	movs	r4, #0
 800d75a:	4620      	mov	r0, r4
 800d75c:	b003      	add	sp, #12
 800d75e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d762:	b004      	add	sp, #16
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop

0800d768 <rcutils_get_env>:
 800d768:	b168      	cbz	r0, 800d786 <rcutils_get_env+0x1e>
 800d76a:	b510      	push	{r4, lr}
 800d76c:	460c      	mov	r4, r1
 800d76e:	b129      	cbz	r1, 800d77c <rcutils_get_env+0x14>
 800d770:	f006 fb32 	bl	8013dd8 <getenv>
 800d774:	b120      	cbz	r0, 800d780 <rcutils_get_env+0x18>
 800d776:	6020      	str	r0, [r4, #0]
 800d778:	2000      	movs	r0, #0
 800d77a:	bd10      	pop	{r4, pc}
 800d77c:	4803      	ldr	r0, [pc, #12]	@ (800d78c <rcutils_get_env+0x24>)
 800d77e:	bd10      	pop	{r4, pc}
 800d780:	4b03      	ldr	r3, [pc, #12]	@ (800d790 <rcutils_get_env+0x28>)
 800d782:	6023      	str	r3, [r4, #0]
 800d784:	bd10      	pop	{r4, pc}
 800d786:	4803      	ldr	r0, [pc, #12]	@ (800d794 <rcutils_get_env+0x2c>)
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	08015870 	.word	0x08015870
 800d790:	08015994 	.word	0x08015994
 800d794:	08015854 	.word	0x08015854

0800d798 <rcutils_repl_str>:
 800d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	ed2d 8b02 	vpush	{d8}
 800d7a0:	b087      	sub	sp, #28
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	f8cd 8000 	str.w	r8, [sp]
 800d7aa:	ee08 2a10 	vmov	s16, r2
 800d7ae:	468a      	mov	sl, r1
 800d7b0:	4699      	mov	r9, r3
 800d7b2:	f7f2 fd1f 	bl	80001f4 <strlen>
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	4647      	mov	r7, r8
 800d7ba:	9001      	str	r0, [sp, #4]
 800d7bc:	46b3      	mov	fp, r6
 800d7be:	2510      	movs	r5, #16
 800d7c0:	46b0      	mov	r8, r6
 800d7c2:	e01d      	b.n	800d800 <rcutils_repl_str+0x68>
 800d7c4:	f10b 0b01 	add.w	fp, fp, #1
 800d7c8:	455e      	cmp	r6, fp
 800d7ca:	d211      	bcs.n	800d7f0 <rcutils_repl_str+0x58>
 800d7cc:	442e      	add	r6, r5
 800d7ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d7d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d7d6:	00b1      	lsls	r1, r6, #2
 800d7d8:	4798      	blx	r3
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f000 8084 	beq.w	800d8e8 <rcutils_repl_str+0x150>
 800d7e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7e4:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800d7e8:	bf28      	it	cs
 800d7ea:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800d7ee:	4680      	mov	r8, r0
 800d7f0:	9a00      	ldr	r2, [sp, #0]
 800d7f2:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800d7f6:	1aa2      	subs	r2, r4, r2
 800d7f8:	f843 2c04 	str.w	r2, [r3, #-4]
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	18e7      	adds	r7, r4, r3
 800d800:	4651      	mov	r1, sl
 800d802:	4638      	mov	r0, r7
 800d804:	f006 febb 	bl	801457e <strstr>
 800d808:	4604      	mov	r4, r0
 800d80a:	4640      	mov	r0, r8
 800d80c:	2c00      	cmp	r4, #0
 800d80e:	d1d9      	bne.n	800d7c4 <rcutils_repl_str+0x2c>
 800d810:	46b8      	mov	r8, r7
 800d812:	4607      	mov	r7, r0
 800d814:	4640      	mov	r0, r8
 800d816:	f7f2 fced 	bl	80001f4 <strlen>
 800d81a:	9b00      	ldr	r3, [sp, #0]
 800d81c:	eba8 0303 	sub.w	r3, r8, r3
 800d820:	181d      	adds	r5, r3, r0
 800d822:	9504      	str	r5, [sp, #16]
 800d824:	f1bb 0f00 	cmp.w	fp, #0
 800d828:	d03d      	beq.n	800d8a6 <rcutils_repl_str+0x10e>
 800d82a:	ee18 0a10 	vmov	r0, s16
 800d82e:	f7f2 fce1 	bl	80001f4 <strlen>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d838:	1ac3      	subs	r3, r0, r3
 800d83a:	fb0b 5303 	mla	r3, fp, r3, r5
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	4606      	mov	r6, r0
 800d842:	1c58      	adds	r0, r3, #1
 800d844:	f8d9 3000 	ldr.w	r3, [r9]
 800d848:	4798      	blx	r3
 800d84a:	9003      	str	r0, [sp, #12]
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d04c      	beq.n	800d8ea <rcutils_repl_str+0x152>
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	9900      	ldr	r1, [sp, #0]
 800d854:	f006 ff35 	bl	80146c2 <memcpy>
 800d858:	9b03      	ldr	r3, [sp, #12]
 800d85a:	683d      	ldr	r5, [r7, #0]
 800d85c:	ee18 8a10 	vmov	r8, s16
 800d860:	441d      	add	r5, r3
 800d862:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800d866:	9302      	str	r3, [sp, #8]
 800d868:	46ba      	mov	sl, r7
 800d86a:	4632      	mov	r2, r6
 800d86c:	4641      	mov	r1, r8
 800d86e:	4628      	mov	r0, r5
 800d870:	f006 ff27 	bl	80146c2 <memcpy>
 800d874:	9b01      	ldr	r3, [sp, #4]
 800d876:	f85a 2b04 	ldr.w	r2, [sl], #4
 800d87a:	441a      	add	r2, r3
 800d87c:	9b00      	ldr	r3, [sp, #0]
 800d87e:	1899      	adds	r1, r3, r2
 800d880:	9b02      	ldr	r3, [sp, #8]
 800d882:	4435      	add	r5, r6
 800d884:	429c      	cmp	r4, r3
 800d886:	4628      	mov	r0, r5
 800d888:	d025      	beq.n	800d8d6 <rcutils_repl_str+0x13e>
 800d88a:	f8da 3000 	ldr.w	r3, [sl]
 800d88e:	3401      	adds	r4, #1
 800d890:	1a9a      	subs	r2, r3, r2
 800d892:	4415      	add	r5, r2
 800d894:	f006 ff15 	bl	80146c2 <memcpy>
 800d898:	455c      	cmp	r4, fp
 800d89a:	d3e6      	bcc.n	800d86a <rcutils_repl_str+0xd2>
 800d89c:	9a03      	ldr	r2, [sp, #12]
 800d89e:	9905      	ldr	r1, [sp, #20]
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	5453      	strb	r3, [r2, r1]
 800d8a4:	e00b      	b.n	800d8be <rcutils_repl_str+0x126>
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f8d9 3000 	ldr.w	r3, [r9]
 800d8ac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d8b0:	3001      	adds	r0, #1
 800d8b2:	4798      	blx	r3
 800d8b4:	9003      	str	r0, [sp, #12]
 800d8b6:	b110      	cbz	r0, 800d8be <rcutils_repl_str+0x126>
 800d8b8:	9900      	ldr	r1, [sp, #0]
 800d8ba:	f006 fefa 	bl	80146b2 <strcpy>
 800d8be:	4638      	mov	r0, r7
 800d8c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d8c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d8c8:	4798      	blx	r3
 800d8ca:	9803      	ldr	r0, [sp, #12]
 800d8cc:	b007      	add	sp, #28
 800d8ce:	ecbd 8b02 	vpop	{d8}
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	9b04      	ldr	r3, [sp, #16]
 800d8d8:	3401      	adds	r4, #1
 800d8da:	1a9a      	subs	r2, r3, r2
 800d8dc:	4415      	add	r5, r2
 800d8de:	f006 fef0 	bl	80146c2 <memcpy>
 800d8e2:	455c      	cmp	r4, fp
 800d8e4:	d3c1      	bcc.n	800d86a <rcutils_repl_str+0xd2>
 800d8e6:	e7d9      	b.n	800d89c <rcutils_repl_str+0x104>
 800d8e8:	4647      	mov	r7, r8
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9303      	str	r3, [sp, #12]
 800d8ee:	e7e6      	b.n	800d8be <rcutils_repl_str+0x126>

0800d8f0 <rcutils_snprintf>:
 800d8f0:	b40c      	push	{r2, r3}
 800d8f2:	b530      	push	{r4, r5, lr}
 800d8f4:	b083      	sub	sp, #12
 800d8f6:	ab06      	add	r3, sp, #24
 800d8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	b152      	cbz	r2, 800d916 <rcutils_snprintf+0x26>
 800d900:	b138      	cbz	r0, 800d912 <rcutils_snprintf+0x22>
 800d902:	b141      	cbz	r1, 800d916 <rcutils_snprintf+0x26>
 800d904:	f006 fdec 	bl	80144e0 <vsniprintf>
 800d908:	b003      	add	sp, #12
 800d90a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d90e:	b002      	add	sp, #8
 800d910:	4770      	bx	lr
 800d912:	2900      	cmp	r1, #0
 800d914:	d0f6      	beq.n	800d904 <rcutils_snprintf+0x14>
 800d916:	f006 fe9f 	bl	8014658 <__errno>
 800d91a:	2316      	movs	r3, #22
 800d91c:	6003      	str	r3, [r0, #0]
 800d91e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d922:	e7f1      	b.n	800d908 <rcutils_snprintf+0x18>

0800d924 <rcutils_vsnprintf>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	b13a      	cbz	r2, 800d938 <rcutils_vsnprintf+0x14>
 800d928:	b120      	cbz	r0, 800d934 <rcutils_vsnprintf+0x10>
 800d92a:	b129      	cbz	r1, 800d938 <rcutils_vsnprintf+0x14>
 800d92c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d930:	f006 bdd6 	b.w	80144e0 <vsniprintf>
 800d934:	2900      	cmp	r1, #0
 800d936:	d0f9      	beq.n	800d92c <rcutils_vsnprintf+0x8>
 800d938:	f006 fe8e 	bl	8014658 <__errno>
 800d93c:	2316      	movs	r3, #22
 800d93e:	6003      	str	r3, [r0, #0]
 800d940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d944:	bd70      	pop	{r4, r5, r6, pc}
 800d946:	bf00      	nop

0800d948 <rcutils_strdup>:
 800d948:	b084      	sub	sp, #16
 800d94a:	b570      	push	{r4, r5, r6, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	ac07      	add	r4, sp, #28
 800d950:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d954:	4605      	mov	r5, r0
 800d956:	b1b0      	cbz	r0, 800d986 <rcutils_strdup+0x3e>
 800d958:	f7f2 fc4c 	bl	80001f4 <strlen>
 800d95c:	1c42      	adds	r2, r0, #1
 800d95e:	9b07      	ldr	r3, [sp, #28]
 800d960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d962:	9201      	str	r2, [sp, #4]
 800d964:	4606      	mov	r6, r0
 800d966:	4610      	mov	r0, r2
 800d968:	4798      	blx	r3
 800d96a:	4604      	mov	r4, r0
 800d96c:	b128      	cbz	r0, 800d97a <rcutils_strdup+0x32>
 800d96e:	9a01      	ldr	r2, [sp, #4]
 800d970:	4629      	mov	r1, r5
 800d972:	f006 fea6 	bl	80146c2 <memcpy>
 800d976:	2300      	movs	r3, #0
 800d978:	55a3      	strb	r3, [r4, r6]
 800d97a:	4620      	mov	r0, r4
 800d97c:	b002      	add	sp, #8
 800d97e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d982:	b004      	add	sp, #16
 800d984:	4770      	bx	lr
 800d986:	4604      	mov	r4, r0
 800d988:	e7f7      	b.n	800d97a <rcutils_strdup+0x32>
 800d98a:	bf00      	nop

0800d98c <rcutils_strndup>:
 800d98c:	b082      	sub	sp, #8
 800d98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d990:	460e      	mov	r6, r1
 800d992:	a906      	add	r1, sp, #24
 800d994:	e881 000c 	stmia.w	r1, {r2, r3}
 800d998:	4605      	mov	r5, r0
 800d99a:	b180      	cbz	r0, 800d9be <rcutils_strndup+0x32>
 800d99c:	1c77      	adds	r7, r6, #1
 800d99e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	4790      	blx	r2
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	b128      	cbz	r0, 800d9b4 <rcutils_strndup+0x28>
 800d9a8:	463a      	mov	r2, r7
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f006 fe89 	bl	80146c2 <memcpy>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	55a3      	strb	r3, [r4, r6]
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9ba:	b002      	add	sp, #8
 800d9bc:	4770      	bx	lr
 800d9be:	4604      	mov	r4, r0
 800d9c0:	e7f8      	b.n	800d9b4 <rcutils_strndup+0x28>
 800d9c2:	bf00      	nop

0800d9c4 <rcutils_get_zero_initialized_string_map>:
 800d9c4:	4b01      	ldr	r3, [pc, #4]	@ (800d9cc <rcutils_get_zero_initialized_string_map+0x8>)
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	6018      	str	r0, [r3, #0]
 800d9ca:	4770      	bx	lr
 800d9cc:	200091d8 	.word	0x200091d8

0800d9d0 <rcutils_string_map_reserve>:
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d061      	beq.n	800da98 <rcutils_string_map_reserve+0xc8>
 800d9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9d8:	6805      	ldr	r5, [r0, #0]
 800d9da:	b083      	sub	sp, #12
 800d9dc:	460c      	mov	r4, r1
 800d9de:	4606      	mov	r6, r0
 800d9e0:	b12d      	cbz	r5, 800d9ee <rcutils_string_map_reserve+0x1e>
 800d9e2:	68eb      	ldr	r3, [r5, #12]
 800d9e4:	42a3      	cmp	r3, r4
 800d9e6:	d906      	bls.n	800d9f6 <rcutils_string_map_reserve+0x26>
 800d9e8:	461c      	mov	r4, r3
 800d9ea:	2d00      	cmp	r5, #0
 800d9ec:	d1f9      	bne.n	800d9e2 <rcutils_string_map_reserve+0x12>
 800d9ee:	201f      	movs	r0, #31
 800d9f0:	b003      	add	sp, #12
 800d9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9f6:	68ab      	ldr	r3, [r5, #8]
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d049      	beq.n	800da90 <rcutils_string_map_reserve+0xc0>
 800d9fc:	6a2f      	ldr	r7, [r5, #32]
 800d9fe:	2c00      	cmp	r4, #0
 800da00:	d035      	beq.n	800da6e <rcutils_string_map_reserve+0x9e>
 800da02:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800da06:	d245      	bcs.n	800da94 <rcutils_string_map_reserve+0xc4>
 800da08:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800da0c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800da10:	6828      	ldr	r0, [r5, #0]
 800da12:	4641      	mov	r1, r8
 800da14:	463a      	mov	r2, r7
 800da16:	47c8      	blx	r9
 800da18:	2800      	cmp	r0, #0
 800da1a:	d03b      	beq.n	800da94 <rcutils_string_map_reserve+0xc4>
 800da1c:	6833      	ldr	r3, [r6, #0]
 800da1e:	463a      	mov	r2, r7
 800da20:	6018      	str	r0, [r3, #0]
 800da22:	4641      	mov	r1, r8
 800da24:	6858      	ldr	r0, [r3, #4]
 800da26:	47c8      	blx	r9
 800da28:	2800      	cmp	r0, #0
 800da2a:	d033      	beq.n	800da94 <rcutils_string_map_reserve+0xc4>
 800da2c:	6835      	ldr	r5, [r6, #0]
 800da2e:	68ab      	ldr	r3, [r5, #8]
 800da30:	6068      	str	r0, [r5, #4]
 800da32:	42a3      	cmp	r3, r4
 800da34:	d227      	bcs.n	800da86 <rcutils_string_map_reserve+0xb6>
 800da36:	682a      	ldr	r2, [r5, #0]
 800da38:	eb00 0108 	add.w	r1, r0, r8
 800da3c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800da40:	428f      	cmp	r7, r1
 800da42:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800da46:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800da4a:	d203      	bcs.n	800da54 <rcutils_string_map_reserve+0x84>
 800da4c:	eb02 0108 	add.w	r1, r2, r8
 800da50:	428e      	cmp	r6, r1
 800da52:	d323      	bcc.n	800da9c <rcutils_string_map_reserve+0xcc>
 800da54:	1ae3      	subs	r3, r4, r3
 800da56:	009a      	lsls	r2, r3, #2
 800da58:	4638      	mov	r0, r7
 800da5a:	2100      	movs	r1, #0
 800da5c:	9201      	str	r2, [sp, #4]
 800da5e:	f006 fd67 	bl	8014530 <memset>
 800da62:	9a01      	ldr	r2, [sp, #4]
 800da64:	4630      	mov	r0, r6
 800da66:	2100      	movs	r1, #0
 800da68:	f006 fd62 	bl	8014530 <memset>
 800da6c:	e00b      	b.n	800da86 <rcutils_string_map_reserve+0xb6>
 800da6e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800da72:	6828      	ldr	r0, [r5, #0]
 800da74:	4639      	mov	r1, r7
 800da76:	47c0      	blx	r8
 800da78:	6833      	ldr	r3, [r6, #0]
 800da7a:	4639      	mov	r1, r7
 800da7c:	6858      	ldr	r0, [r3, #4]
 800da7e:	601c      	str	r4, [r3, #0]
 800da80:	47c0      	blx	r8
 800da82:	6835      	ldr	r5, [r6, #0]
 800da84:	606c      	str	r4, [r5, #4]
 800da86:	2000      	movs	r0, #0
 800da88:	60ac      	str	r4, [r5, #8]
 800da8a:	b003      	add	sp, #12
 800da8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da90:	2000      	movs	r0, #0
 800da92:	e7ad      	b.n	800d9f0 <rcutils_string_map_reserve+0x20>
 800da94:	200a      	movs	r0, #10
 800da96:	e7ab      	b.n	800d9f0 <rcutils_string_map_reserve+0x20>
 800da98:	200b      	movs	r0, #11
 800da9a:	4770      	bx	lr
 800da9c:	1f13      	subs	r3, r2, #4
 800da9e:	f1ac 0c04 	sub.w	ip, ip, #4
 800daa2:	4498      	add	r8, r3
 800daa4:	4460      	add	r0, ip
 800daa6:	4462      	add	r2, ip
 800daa8:	2300      	movs	r3, #0
 800daaa:	f842 3f04 	str.w	r3, [r2, #4]!
 800daae:	4542      	cmp	r2, r8
 800dab0:	f840 3f04 	str.w	r3, [r0, #4]!
 800dab4:	d1f9      	bne.n	800daaa <rcutils_string_map_reserve+0xda>
 800dab6:	e7e6      	b.n	800da86 <rcutils_string_map_reserve+0xb6>

0800dab8 <rcutils_string_map_init>:
 800dab8:	b082      	sub	sp, #8
 800daba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabc:	460e      	mov	r6, r1
 800dabe:	a906      	add	r1, sp, #24
 800dac0:	e881 000c 	stmia.w	r1, {r2, r3}
 800dac4:	b380      	cbz	r0, 800db28 <rcutils_string_map_init+0x70>
 800dac6:	6807      	ldr	r7, [r0, #0]
 800dac8:	4604      	mov	r4, r0
 800daca:	b12f      	cbz	r7, 800dad8 <rcutils_string_map_init+0x20>
 800dacc:	251e      	movs	r5, #30
 800dace:	4628      	mov	r0, r5
 800dad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dad4:	b002      	add	sp, #8
 800dad6:	4770      	bx	lr
 800dad8:	a806      	add	r0, sp, #24
 800dada:	f7fb ffb1 	bl	8009a40 <rcutils_allocator_is_valid>
 800dade:	b318      	cbz	r0, 800db28 <rcutils_string_map_init+0x70>
 800dae0:	9b06      	ldr	r3, [sp, #24]
 800dae2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dae4:	2024      	movs	r0, #36	@ 0x24
 800dae6:	4798      	blx	r3
 800dae8:	4605      	mov	r5, r0
 800daea:	6020      	str	r0, [r4, #0]
 800daec:	b310      	cbz	r0, 800db34 <rcutils_string_map_init+0x7c>
 800daee:	f10d 0e18 	add.w	lr, sp, #24
 800daf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800daf6:	f105 0c10 	add.w	ip, r5, #16
 800dafa:	e9c5 7700 	strd	r7, r7, [r5]
 800dafe:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800db02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db06:	f8de 3000 	ldr.w	r3, [lr]
 800db0a:	f8cc 3000 	str.w	r3, [ip]
 800db0e:	4631      	mov	r1, r6
 800db10:	4620      	mov	r0, r4
 800db12:	f7ff ff5d 	bl	800d9d0 <rcutils_string_map_reserve>
 800db16:	4605      	mov	r5, r0
 800db18:	2800      	cmp	r0, #0
 800db1a:	d0d8      	beq.n	800dace <rcutils_string_map_init+0x16>
 800db1c:	9b07      	ldr	r3, [sp, #28]
 800db1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	4798      	blx	r3
 800db24:	6027      	str	r7, [r4, #0]
 800db26:	e7d2      	b.n	800dace <rcutils_string_map_init+0x16>
 800db28:	250b      	movs	r5, #11
 800db2a:	4628      	mov	r0, r5
 800db2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db30:	b002      	add	sp, #8
 800db32:	4770      	bx	lr
 800db34:	250a      	movs	r5, #10
 800db36:	e7ca      	b.n	800dace <rcutils_string_map_init+0x16>

0800db38 <rcutils_string_map_fini>:
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	b082      	sub	sp, #8
 800db3e:	2800      	cmp	r0, #0
 800db40:	d039      	beq.n	800dbb6 <rcutils_string_map_fini+0x7e>
 800db42:	6804      	ldr	r4, [r0, #0]
 800db44:	4606      	mov	r6, r0
 800db46:	2c00      	cmp	r4, #0
 800db48:	d031      	beq.n	800dbae <rcutils_string_map_fini+0x76>
 800db4a:	68a3      	ldr	r3, [r4, #8]
 800db4c:	b323      	cbz	r3, 800db98 <rcutils_string_map_fini+0x60>
 800db4e:	2500      	movs	r5, #0
 800db50:	6822      	ldr	r2, [r4, #0]
 800db52:	46a8      	mov	r8, r5
 800db54:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800db58:	b1d8      	cbz	r0, 800db92 <rcutils_string_map_fini+0x5a>
 800db5a:	6a21      	ldr	r1, [r4, #32]
 800db5c:	6967      	ldr	r7, [r4, #20]
 800db5e:	9101      	str	r1, [sp, #4]
 800db60:	47b8      	blx	r7
 800db62:	e9d4 2300 	ldrd	r2, r3, [r4]
 800db66:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800db6a:	9901      	ldr	r1, [sp, #4]
 800db6c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db70:	47b8      	blx	r7
 800db72:	68e3      	ldr	r3, [r4, #12]
 800db74:	6862      	ldr	r2, [r4, #4]
 800db76:	3b01      	subs	r3, #1
 800db78:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800db7c:	60e3      	str	r3, [r4, #12]
 800db7e:	6834      	ldr	r4, [r6, #0]
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	3501      	adds	r5, #1
 800db84:	429d      	cmp	r5, r3
 800db86:	d207      	bcs.n	800db98 <rcutils_string_map_fini+0x60>
 800db88:	6822      	ldr	r2, [r4, #0]
 800db8a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800db8e:	2800      	cmp	r0, #0
 800db90:	d1e3      	bne.n	800db5a <rcutils_string_map_fini+0x22>
 800db92:	3501      	adds	r5, #1
 800db94:	429d      	cmp	r5, r3
 800db96:	d3dd      	bcc.n	800db54 <rcutils_string_map_fini+0x1c>
 800db98:	2100      	movs	r1, #0
 800db9a:	4630      	mov	r0, r6
 800db9c:	f7ff ff18 	bl	800d9d0 <rcutils_string_map_reserve>
 800dba0:	4604      	mov	r4, r0
 800dba2:	b920      	cbnz	r0, 800dbae <rcutils_string_map_fini+0x76>
 800dba4:	6830      	ldr	r0, [r6, #0]
 800dba6:	6943      	ldr	r3, [r0, #20]
 800dba8:	6a01      	ldr	r1, [r0, #32]
 800dbaa:	4798      	blx	r3
 800dbac:	6034      	str	r4, [r6, #0]
 800dbae:	4620      	mov	r0, r4
 800dbb0:	b002      	add	sp, #8
 800dbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb6:	240b      	movs	r4, #11
 800dbb8:	4620      	mov	r0, r4
 800dbba:	b002      	add	sp, #8
 800dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbc0 <rcutils_string_map_getn>:
 800dbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	b308      	cbz	r0, 800dc0c <rcutils_string_map_getn+0x4c>
 800dbc8:	6804      	ldr	r4, [r0, #0]
 800dbca:	b304      	cbz	r4, 800dc0e <rcutils_string_map_getn+0x4e>
 800dbcc:	460d      	mov	r5, r1
 800dbce:	b1e9      	cbz	r1, 800dc0c <rcutils_string_map_getn+0x4c>
 800dbd0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800dbd4:	6827      	ldr	r7, [r4, #0]
 800dbd6:	f1b9 0f00 	cmp.w	r9, #0
 800dbda:	d017      	beq.n	800dc0c <rcutils_string_map_getn+0x4c>
 800dbdc:	4690      	mov	r8, r2
 800dbde:	3f04      	subs	r7, #4
 800dbe0:	2600      	movs	r6, #0
 800dbe2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800dbe6:	9101      	str	r1, [sp, #4]
 800dbe8:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800dbec:	4608      	mov	r0, r1
 800dbee:	3601      	adds	r6, #1
 800dbf0:	b151      	cbz	r1, 800dc08 <rcutils_string_map_getn+0x48>
 800dbf2:	f7f2 faff 	bl	80001f4 <strlen>
 800dbf6:	4540      	cmp	r0, r8
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	9901      	ldr	r1, [sp, #4]
 800dbfc:	bf38      	it	cc
 800dbfe:	4642      	movcc	r2, r8
 800dc00:	4628      	mov	r0, r5
 800dc02:	f006 fcaa 	bl	801455a <strncmp>
 800dc06:	b130      	cbz	r0, 800dc16 <rcutils_string_map_getn+0x56>
 800dc08:	45b1      	cmp	r9, r6
 800dc0a:	d1ea      	bne.n	800dbe2 <rcutils_string_map_getn+0x22>
 800dc0c:	2400      	movs	r4, #0
 800dc0e:	4620      	mov	r0, r4
 800dc10:	b002      	add	sp, #8
 800dc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	f853 400a 	ldr.w	r4, [r3, sl]
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	b002      	add	sp, #8
 800dc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dc24 <rmw_get_zero_initialized_context>:
 800dc24:	b510      	push	{r4, lr}
 800dc26:	2250      	movs	r2, #80	@ 0x50
 800dc28:	4604      	mov	r4, r0
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	f006 fc80 	bl	8014530 <memset>
 800dc30:	4620      	mov	r0, r4
 800dc32:	bd10      	pop	{r4, pc}

0800dc34 <rmw_get_zero_initialized_init_options>:
 800dc34:	b510      	push	{r4, lr}
 800dc36:	2238      	movs	r2, #56	@ 0x38
 800dc38:	4604      	mov	r4, r0
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	f006 fc78 	bl	8014530 <memset>
 800dc40:	f104 0010 	add.w	r0, r4, #16
 800dc44:	f000 f806 	bl	800dc54 <rmw_get_default_security_options>
 800dc48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc4c:	60e3      	str	r3, [r4, #12]
 800dc4e:	4620      	mov	r0, r4
 800dc50:	bd10      	pop	{r4, pc}
 800dc52:	bf00      	nop

0800dc54 <rmw_get_default_security_options>:
 800dc54:	2200      	movs	r2, #0
 800dc56:	7002      	strb	r2, [r0, #0]
 800dc58:	6042      	str	r2, [r0, #4]
 800dc5a:	4770      	bx	lr

0800dc5c <rmw_get_default_subscription_options>:
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	6002      	str	r2, [r0, #0]
 800dc60:	7102      	strb	r2, [r0, #4]
 800dc62:	4770      	bx	lr

0800dc64 <rmw_get_zero_initialized_message_info>:
 800dc64:	b470      	push	{r4, r5, r6}
 800dc66:	4d07      	ldr	r5, [pc, #28]	@ (800dc84 <rmw_get_zero_initialized_message_info+0x20>)
 800dc68:	4606      	mov	r6, r0
 800dc6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc6c:	4634      	mov	r4, r6
 800dc6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	bc70      	pop	{r4, r5, r6}
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	080154d0 	.word	0x080154d0

0800dc88 <rmw_validate_full_topic_name>:
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d062      	beq.n	800dd52 <rmw_validate_full_topic_name+0xca>
 800dc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc90:	460d      	mov	r5, r1
 800dc92:	2900      	cmp	r1, #0
 800dc94:	d05f      	beq.n	800dd56 <rmw_validate_full_topic_name+0xce>
 800dc96:	4616      	mov	r6, r2
 800dc98:	4604      	mov	r4, r0
 800dc9a:	f7f2 faab 	bl	80001f4 <strlen>
 800dc9e:	b148      	cbz	r0, 800dcb4 <rmw_validate_full_topic_name+0x2c>
 800dca0:	7823      	ldrb	r3, [r4, #0]
 800dca2:	2b2f      	cmp	r3, #47	@ 0x2f
 800dca4:	d00d      	beq.n	800dcc2 <rmw_validate_full_topic_name+0x3a>
 800dca6:	2302      	movs	r3, #2
 800dca8:	602b      	str	r3, [r5, #0]
 800dcaa:	b13e      	cbz	r6, 800dcbc <rmw_validate_full_topic_name+0x34>
 800dcac:	2000      	movs	r0, #0
 800dcae:	6030      	str	r0, [r6, #0]
 800dcb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	602b      	str	r3, [r5, #0]
 800dcb8:	2e00      	cmp	r6, #0
 800dcba:	d1f7      	bne.n	800dcac <rmw_validate_full_topic_name+0x24>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc2:	1e47      	subs	r7, r0, #1
 800dcc4:	5de3      	ldrb	r3, [r4, r7]
 800dcc6:	2b2f      	cmp	r3, #47	@ 0x2f
 800dcc8:	d047      	beq.n	800dd5a <rmw_validate_full_topic_name+0xd2>
 800dcca:	1e63      	subs	r3, r4, #1
 800dccc:	eb03 0900 	add.w	r9, r3, r0
 800dcd0:	f1c4 0e01 	rsb	lr, r4, #1
 800dcd4:	eb0e 0803 	add.w	r8, lr, r3
 800dcd8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dcdc:	f021 0220 	bic.w	r2, r1, #32
 800dce0:	3a41      	subs	r2, #65	@ 0x41
 800dce2:	2a19      	cmp	r2, #25
 800dce4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800dce8:	d90c      	bls.n	800dd04 <rmw_validate_full_topic_name+0x7c>
 800dcea:	295f      	cmp	r1, #95	@ 0x5f
 800dcec:	d00a      	beq.n	800dd04 <rmw_validate_full_topic_name+0x7c>
 800dcee:	f1bc 0f0a 	cmp.w	ip, #10
 800dcf2:	d907      	bls.n	800dd04 <rmw_validate_full_topic_name+0x7c>
 800dcf4:	2304      	movs	r3, #4
 800dcf6:	602b      	str	r3, [r5, #0]
 800dcf8:	2e00      	cmp	r6, #0
 800dcfa:	d0df      	beq.n	800dcbc <rmw_validate_full_topic_name+0x34>
 800dcfc:	f8c6 8000 	str.w	r8, [r6]
 800dd00:	2000      	movs	r0, #0
 800dd02:	e7d5      	b.n	800dcb0 <rmw_validate_full_topic_name+0x28>
 800dd04:	454b      	cmp	r3, r9
 800dd06:	d1e5      	bne.n	800dcd4 <rmw_validate_full_topic_name+0x4c>
 800dd08:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800dd90 <rmw_validate_full_topic_name+0x108>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	f107 0801 	add.w	r8, r7, #1
 800dd12:	e005      	b.n	800dd20 <rmw_validate_full_topic_name+0x98>
 800dd14:	4611      	mov	r1, r2
 800dd16:	4288      	cmp	r0, r1
 800dd18:	4613      	mov	r3, r2
 800dd1a:	f104 0401 	add.w	r4, r4, #1
 800dd1e:	d925      	bls.n	800dd6c <rmw_validate_full_topic_name+0xe4>
 800dd20:	429f      	cmp	r7, r3
 800dd22:	f103 0201 	add.w	r2, r3, #1
 800dd26:	d01e      	beq.n	800dd66 <rmw_validate_full_topic_name+0xde>
 800dd28:	7821      	ldrb	r1, [r4, #0]
 800dd2a:	292f      	cmp	r1, #47	@ 0x2f
 800dd2c:	d1f2      	bne.n	800dd14 <rmw_validate_full_topic_name+0x8c>
 800dd2e:	f894 c001 	ldrb.w	ip, [r4, #1]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800dd38:	4611      	mov	r1, r2
 800dd3a:	d024      	beq.n	800dd86 <rmw_validate_full_topic_name+0xfe>
 800dd3c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800dd40:	075b      	lsls	r3, r3, #29
 800dd42:	d5e8      	bpl.n	800dd16 <rmw_validate_full_topic_name+0x8e>
 800dd44:	2306      	movs	r3, #6
 800dd46:	602b      	str	r3, [r5, #0]
 800dd48:	2e00      	cmp	r6, #0
 800dd4a:	d0b7      	beq.n	800dcbc <rmw_validate_full_topic_name+0x34>
 800dd4c:	6032      	str	r2, [r6, #0]
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e7ae      	b.n	800dcb0 <rmw_validate_full_topic_name+0x28>
 800dd52:	200b      	movs	r0, #11
 800dd54:	4770      	bx	lr
 800dd56:	200b      	movs	r0, #11
 800dd58:	e7aa      	b.n	800dcb0 <rmw_validate_full_topic_name+0x28>
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	602b      	str	r3, [r5, #0]
 800dd5e:	2e00      	cmp	r6, #0
 800dd60:	d0ac      	beq.n	800dcbc <rmw_validate_full_topic_name+0x34>
 800dd62:	6037      	str	r7, [r6, #0]
 800dd64:	e7aa      	b.n	800dcbc <rmw_validate_full_topic_name+0x34>
 800dd66:	4641      	mov	r1, r8
 800dd68:	1c7a      	adds	r2, r7, #1
 800dd6a:	e7d4      	b.n	800dd16 <rmw_validate_full_topic_name+0x8e>
 800dd6c:	28f7      	cmp	r0, #247	@ 0xf7
 800dd6e:	d802      	bhi.n	800dd76 <rmw_validate_full_topic_name+0xee>
 800dd70:	2000      	movs	r0, #0
 800dd72:	6028      	str	r0, [r5, #0]
 800dd74:	e79c      	b.n	800dcb0 <rmw_validate_full_topic_name+0x28>
 800dd76:	2307      	movs	r3, #7
 800dd78:	602b      	str	r3, [r5, #0]
 800dd7a:	2e00      	cmp	r6, #0
 800dd7c:	d09e      	beq.n	800dcbc <rmw_validate_full_topic_name+0x34>
 800dd7e:	23f6      	movs	r3, #246	@ 0xf6
 800dd80:	6033      	str	r3, [r6, #0]
 800dd82:	2000      	movs	r0, #0
 800dd84:	e794      	b.n	800dcb0 <rmw_validate_full_topic_name+0x28>
 800dd86:	2305      	movs	r3, #5
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	2e00      	cmp	r6, #0
 800dd8c:	d1de      	bne.n	800dd4c <rmw_validate_full_topic_name+0xc4>
 800dd8e:	e795      	b.n	800dcbc <rmw_validate_full_topic_name+0x34>
 800dd90:	08015e68 	.word	0x08015e68

0800dd94 <rmw_validate_namespace_with_size>:
 800dd94:	b340      	cbz	r0, 800dde8 <rmw_validate_namespace_with_size+0x54>
 800dd96:	b5d0      	push	{r4, r6, r7, lr}
 800dd98:	4614      	mov	r4, r2
 800dd9a:	b0c2      	sub	sp, #264	@ 0x108
 800dd9c:	b332      	cbz	r2, 800ddec <rmw_validate_namespace_with_size+0x58>
 800dd9e:	2901      	cmp	r1, #1
 800dda0:	460f      	mov	r7, r1
 800dda2:	461e      	mov	r6, r3
 800dda4:	d102      	bne.n	800ddac <rmw_validate_namespace_with_size+0x18>
 800dda6:	7803      	ldrb	r3, [r0, #0]
 800dda8:	2b2f      	cmp	r3, #47	@ 0x2f
 800ddaa:	d019      	beq.n	800dde0 <rmw_validate_namespace_with_size+0x4c>
 800ddac:	aa01      	add	r2, sp, #4
 800ddae:	4669      	mov	r1, sp
 800ddb0:	f7ff ff6a 	bl	800dc88 <rmw_validate_full_topic_name>
 800ddb4:	b990      	cbnz	r0, 800dddc <rmw_validate_namespace_with_size+0x48>
 800ddb6:	9b00      	ldr	r3, [sp, #0]
 800ddb8:	b14b      	cbz	r3, 800ddce <rmw_validate_namespace_with_size+0x3a>
 800ddba:	2b07      	cmp	r3, #7
 800ddbc:	d007      	beq.n	800ddce <rmw_validate_namespace_with_size+0x3a>
 800ddbe:	1e5a      	subs	r2, r3, #1
 800ddc0:	2a05      	cmp	r2, #5
 800ddc2:	d82b      	bhi.n	800de1c <rmw_validate_namespace_with_size+0x88>
 800ddc4:	e8df f002 	tbb	[pc, r2]
 800ddc8:	24211e1b 	.word	0x24211e1b
 800ddcc:	1427      	.short	0x1427
 800ddce:	2ff5      	cmp	r7, #245	@ 0xf5
 800ddd0:	d906      	bls.n	800dde0 <rmw_validate_namespace_with_size+0x4c>
 800ddd2:	2307      	movs	r3, #7
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	b10e      	cbz	r6, 800dddc <rmw_validate_namespace_with_size+0x48>
 800ddd8:	23f4      	movs	r3, #244	@ 0xf4
 800ddda:	6033      	str	r3, [r6, #0]
 800dddc:	b042      	add	sp, #264	@ 0x108
 800ddde:	bdd0      	pop	{r4, r6, r7, pc}
 800dde0:	2000      	movs	r0, #0
 800dde2:	6020      	str	r0, [r4, #0]
 800dde4:	b042      	add	sp, #264	@ 0x108
 800dde6:	bdd0      	pop	{r4, r6, r7, pc}
 800dde8:	200b      	movs	r0, #11
 800ddea:	4770      	bx	lr
 800ddec:	200b      	movs	r0, #11
 800ddee:	e7f5      	b.n	800dddc <rmw_validate_namespace_with_size+0x48>
 800ddf0:	2306      	movs	r3, #6
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	2e00      	cmp	r6, #0
 800ddf6:	d0f1      	beq.n	800dddc <rmw_validate_namespace_with_size+0x48>
 800ddf8:	9b01      	ldr	r3, [sp, #4]
 800ddfa:	6033      	str	r3, [r6, #0]
 800ddfc:	e7ee      	b.n	800dddc <rmw_validate_namespace_with_size+0x48>
 800ddfe:	2301      	movs	r3, #1
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	e7f7      	b.n	800ddf4 <rmw_validate_namespace_with_size+0x60>
 800de04:	2302      	movs	r3, #2
 800de06:	6023      	str	r3, [r4, #0]
 800de08:	e7f4      	b.n	800ddf4 <rmw_validate_namespace_with_size+0x60>
 800de0a:	2303      	movs	r3, #3
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	e7f1      	b.n	800ddf4 <rmw_validate_namespace_with_size+0x60>
 800de10:	2304      	movs	r3, #4
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	e7ee      	b.n	800ddf4 <rmw_validate_namespace_with_size+0x60>
 800de16:	2305      	movs	r3, #5
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	e7eb      	b.n	800ddf4 <rmw_validate_namespace_with_size+0x60>
 800de1c:	4a03      	ldr	r2, [pc, #12]	@ (800de2c <rmw_validate_namespace_with_size+0x98>)
 800de1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de22:	a802      	add	r0, sp, #8
 800de24:	f7ff fd64 	bl	800d8f0 <rcutils_snprintf>
 800de28:	2001      	movs	r0, #1
 800de2a:	e7d7      	b.n	800dddc <rmw_validate_namespace_with_size+0x48>
 800de2c:	0801588c 	.word	0x0801588c

0800de30 <rmw_validate_namespace>:
 800de30:	b168      	cbz	r0, 800de4e <rmw_validate_namespace+0x1e>
 800de32:	b570      	push	{r4, r5, r6, lr}
 800de34:	460d      	mov	r5, r1
 800de36:	4616      	mov	r6, r2
 800de38:	4604      	mov	r4, r0
 800de3a:	f7f2 f9db 	bl	80001f4 <strlen>
 800de3e:	4633      	mov	r3, r6
 800de40:	4601      	mov	r1, r0
 800de42:	462a      	mov	r2, r5
 800de44:	4620      	mov	r0, r4
 800de46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de4a:	f7ff bfa3 	b.w	800dd94 <rmw_validate_namespace_with_size>
 800de4e:	200b      	movs	r0, #11
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop

0800de54 <rmw_namespace_validation_result_string>:
 800de54:	2807      	cmp	r0, #7
 800de56:	bf9a      	itte	ls
 800de58:	4b02      	ldrls	r3, [pc, #8]	@ (800de64 <rmw_namespace_validation_result_string+0x10>)
 800de5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800de5e:	4802      	ldrhi	r0, [pc, #8]	@ (800de68 <rmw_namespace_validation_result_string+0x14>)
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	08015a84 	.word	0x08015a84
 800de68:	080158dc 	.word	0x080158dc

0800de6c <rmw_validate_node_name>:
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d03b      	beq.n	800dee8 <rmw_validate_node_name+0x7c>
 800de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de74:	460f      	mov	r7, r1
 800de76:	2900      	cmp	r1, #0
 800de78:	d038      	beq.n	800deec <rmw_validate_node_name+0x80>
 800de7a:	4615      	mov	r5, r2
 800de7c:	4604      	mov	r4, r0
 800de7e:	f7f2 f9b9 	bl	80001f4 <strlen>
 800de82:	b1e0      	cbz	r0, 800debe <rmw_validate_node_name+0x52>
 800de84:	1e63      	subs	r3, r4, #1
 800de86:	eb03 0e00 	add.w	lr, r3, r0
 800de8a:	f1c4 0c01 	rsb	ip, r4, #1
 800de8e:	eb0c 0803 	add.w	r8, ip, r3
 800de92:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800de96:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 800de9a:	f026 0220 	bic.w	r2, r6, #32
 800de9e:	2909      	cmp	r1, #9
 800dea0:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 800dea4:	d913      	bls.n	800dece <rmw_validate_node_name+0x62>
 800dea6:	2a19      	cmp	r2, #25
 800dea8:	d911      	bls.n	800dece <rmw_validate_node_name+0x62>
 800deaa:	2e5f      	cmp	r6, #95	@ 0x5f
 800deac:	d00f      	beq.n	800dece <rmw_validate_node_name+0x62>
 800deae:	2302      	movs	r3, #2
 800deb0:	603b      	str	r3, [r7, #0]
 800deb2:	b10d      	cbz	r5, 800deb8 <rmw_validate_node_name+0x4c>
 800deb4:	f8c5 8000 	str.w	r8, [r5]
 800deb8:	2000      	movs	r0, #0
 800deba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800debe:	2301      	movs	r3, #1
 800dec0:	603b      	str	r3, [r7, #0]
 800dec2:	2d00      	cmp	r5, #0
 800dec4:	d0f8      	beq.n	800deb8 <rmw_validate_node_name+0x4c>
 800dec6:	2000      	movs	r0, #0
 800dec8:	6028      	str	r0, [r5, #0]
 800deca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dece:	4573      	cmp	r3, lr
 800ded0:	d1dd      	bne.n	800de8e <rmw_validate_node_name+0x22>
 800ded2:	7822      	ldrb	r2, [r4, #0]
 800ded4:	4b0d      	ldr	r3, [pc, #52]	@ (800df0c <rmw_validate_node_name+0xa0>)
 800ded6:	5cd3      	ldrb	r3, [r2, r3]
 800ded8:	f013 0304 	ands.w	r3, r3, #4
 800dedc:	d110      	bne.n	800df00 <rmw_validate_node_name+0x94>
 800dede:	28ff      	cmp	r0, #255	@ 0xff
 800dee0:	d806      	bhi.n	800def0 <rmw_validate_node_name+0x84>
 800dee2:	603b      	str	r3, [r7, #0]
 800dee4:	4618      	mov	r0, r3
 800dee6:	e7e8      	b.n	800deba <rmw_validate_node_name+0x4e>
 800dee8:	200b      	movs	r0, #11
 800deea:	4770      	bx	lr
 800deec:	200b      	movs	r0, #11
 800deee:	e7e4      	b.n	800deba <rmw_validate_node_name+0x4e>
 800def0:	2204      	movs	r2, #4
 800def2:	603a      	str	r2, [r7, #0]
 800def4:	2d00      	cmp	r5, #0
 800def6:	d0df      	beq.n	800deb8 <rmw_validate_node_name+0x4c>
 800def8:	22fe      	movs	r2, #254	@ 0xfe
 800defa:	4618      	mov	r0, r3
 800defc:	602a      	str	r2, [r5, #0]
 800defe:	e7dc      	b.n	800deba <rmw_validate_node_name+0x4e>
 800df00:	2303      	movs	r3, #3
 800df02:	603b      	str	r3, [r7, #0]
 800df04:	2d00      	cmp	r5, #0
 800df06:	d1de      	bne.n	800dec6 <rmw_validate_node_name+0x5a>
 800df08:	e7d6      	b.n	800deb8 <rmw_validate_node_name+0x4c>
 800df0a:	bf00      	nop
 800df0c:	08015e68 	.word	0x08015e68

0800df10 <rmw_node_name_validation_result_string>:
 800df10:	2804      	cmp	r0, #4
 800df12:	bf9a      	itte	ls
 800df14:	4b02      	ldrls	r3, [pc, #8]	@ (800df20 <rmw_node_name_validation_result_string+0x10>)
 800df16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800df1a:	4802      	ldrhi	r0, [pc, #8]	@ (800df24 <rmw_node_name_validation_result_string+0x14>)
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	08015b90 	.word	0x08015b90
 800df24:	08015aa4 	.word	0x08015aa4

0800df28 <rmw_destroy_client>:
 800df28:	b570      	push	{r4, r5, r6, lr}
 800df2a:	b128      	cbz	r0, 800df38 <rmw_destroy_client+0x10>
 800df2c:	4604      	mov	r4, r0
 800df2e:	6800      	ldr	r0, [r0, #0]
 800df30:	460d      	mov	r5, r1
 800df32:	f001 fba1 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800df36:	b910      	cbnz	r0, 800df3e <rmw_destroy_client+0x16>
 800df38:	2401      	movs	r4, #1
 800df3a:	4620      	mov	r0, r4
 800df3c:	bd70      	pop	{r4, r5, r6, pc}
 800df3e:	6863      	ldr	r3, [r4, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d0f9      	beq.n	800df38 <rmw_destroy_client+0x10>
 800df44:	2d00      	cmp	r5, #0
 800df46:	d0f7      	beq.n	800df38 <rmw_destroy_client+0x10>
 800df48:	6828      	ldr	r0, [r5, #0]
 800df4a:	f001 fb95 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d0f2      	beq.n	800df38 <rmw_destroy_client+0x10>
 800df52:	686e      	ldr	r6, [r5, #4]
 800df54:	2e00      	cmp	r6, #0
 800df56:	d0ef      	beq.n	800df38 <rmw_destroy_client+0x10>
 800df58:	6864      	ldr	r4, [r4, #4]
 800df5a:	6932      	ldr	r2, [r6, #16]
 800df5c:	6920      	ldr	r0, [r4, #16]
 800df5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df66:	6819      	ldr	r1, [r3, #0]
 800df68:	f001 fe24 	bl	800fbb4 <uxr_buffer_cancel_data>
 800df6c:	4602      	mov	r2, r0
 800df6e:	6920      	ldr	r0, [r4, #16]
 800df70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df78:	f001 fafe 	bl	800f578 <run_xrce_session>
 800df7c:	6920      	ldr	r0, [r4, #16]
 800df7e:	6932      	ldr	r2, [r6, #16]
 800df80:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df88:	6819      	ldr	r1, [r3, #0]
 800df8a:	f001 fb8f 	bl	800f6ac <uxr_buffer_delete_entity>
 800df8e:	4602      	mov	r2, r0
 800df90:	6920      	ldr	r0, [r4, #16]
 800df92:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df96:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df9a:	f001 faed 	bl	800f578 <run_xrce_session>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	bf14      	ite	ne
 800dfa4:	2400      	movne	r4, #0
 800dfa6:	2402      	moveq	r4, #2
 800dfa8:	f001 f9d8 	bl	800f35c <rmw_uxrce_fini_client_memory>
 800dfac:	e7c5      	b.n	800df3a <rmw_destroy_client+0x12>
 800dfae:	bf00      	nop

0800dfb0 <rmw_get_implementation_identifier>:
 800dfb0:	4b01      	ldr	r3, [pc, #4]	@ (800dfb8 <rmw_get_implementation_identifier+0x8>)
 800dfb2:	6818      	ldr	r0, [r3, #0]
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	08015df4 	.word	0x08015df4

0800dfbc <rmw_init_options_init>:
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc2:	ad09      	add	r5, sp, #36	@ 0x24
 800dfc4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800dfc8:	b130      	cbz	r0, 800dfd8 <rmw_init_options_init+0x1c>
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4628      	mov	r0, r5
 800dfce:	f7fb fd37 	bl	8009a40 <rcutils_allocator_is_valid>
 800dfd2:	b108      	cbz	r0, 800dfd8 <rmw_init_options_init+0x1c>
 800dfd4:	68a3      	ldr	r3, [r4, #8]
 800dfd6:	b123      	cbz	r3, 800dfe2 <rmw_init_options_init+0x26>
 800dfd8:	200b      	movs	r0, #11
 800dfda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfde:	b004      	add	sp, #16
 800dfe0:	4770      	bx	lr
 800dfe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfe4:	4f1c      	ldr	r7, [pc, #112]	@ (800e058 <rmw_init_options_init+0x9c>)
 800dfe6:	682e      	ldr	r6, [r5, #0]
 800dfe8:	683d      	ldr	r5, [r7, #0]
 800dfea:	60a5      	str	r5, [r4, #8]
 800dfec:	f04f 0800 	mov.w	r8, #0
 800dff0:	f04f 0900 	mov.w	r9, #0
 800dff4:	f104 0520 	add.w	r5, r4, #32
 800dff8:	e9c4 8900 	strd	r8, r9, [r4]
 800dffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dffe:	4b17      	ldr	r3, [pc, #92]	@ (800e05c <rmw_init_options_init+0xa0>)
 800e000:	4817      	ldr	r0, [pc, #92]	@ (800e060 <rmw_init_options_init+0xa4>)
 800e002:	602e      	str	r6, [r5, #0]
 800e004:	4917      	ldr	r1, [pc, #92]	@ (800e064 <rmw_init_options_init+0xa8>)
 800e006:	61e3      	str	r3, [r4, #28]
 800e008:	2203      	movs	r2, #3
 800e00a:	f001 f8f7 	bl	800f1fc <rmw_uxrce_init_init_options_impl_memory>
 800e00e:	4814      	ldr	r0, [pc, #80]	@ (800e060 <rmw_init_options_init+0xa4>)
 800e010:	f004 ff2c 	bl	8012e6c <get_memory>
 800e014:	b1e8      	cbz	r0, 800e052 <rmw_init_options_init+0x96>
 800e016:	4a14      	ldr	r2, [pc, #80]	@ (800e068 <rmw_init_options_init+0xac>)
 800e018:	68c3      	ldr	r3, [r0, #12]
 800e01a:	6851      	ldr	r1, [r2, #4]
 800e01c:	7810      	ldrb	r0, [r2, #0]
 800e01e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e020:	7418      	strb	r0, [r3, #16]
 800e022:	6159      	str	r1, [r3, #20]
 800e024:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800e028:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800e02c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800e030:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800e034:	f003 fd6a 	bl	8011b0c <uxr_nanos>
 800e038:	f005 ffd4 	bl	8013fe4 <srand>
 800e03c:	f006 f800 	bl	8014040 <rand>
 800e040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e042:	6298      	str	r0, [r3, #40]	@ 0x28
 800e044:	2800      	cmp	r0, #0
 800e046:	d0f9      	beq.n	800e03c <rmw_init_options_init+0x80>
 800e048:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	2000      	movs	r0, #0
 800e04e:	b004      	add	sp, #16
 800e050:	4770      	bx	lr
 800e052:	2001      	movs	r0, #1
 800e054:	e7c1      	b.n	800dfda <rmw_init_options_init+0x1e>
 800e056:	bf00      	nop
 800e058:	08015df4 	.word	0x08015df4
 800e05c:	080156dc 	.word	0x080156dc
 800e060:	2000c754 	.word	0x2000c754
 800e064:	2000c3a8 	.word	0x2000c3a8
 800e068:	20009438 	.word	0x20009438

0800e06c <rmw_init_options_copy>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	b158      	cbz	r0, 800e088 <rmw_init_options_copy+0x1c>
 800e070:	460e      	mov	r6, r1
 800e072:	b149      	cbz	r1, 800e088 <rmw_init_options_copy+0x1c>
 800e074:	4604      	mov	r4, r0
 800e076:	6880      	ldr	r0, [r0, #8]
 800e078:	b120      	cbz	r0, 800e084 <rmw_init_options_copy+0x18>
 800e07a:	4b1b      	ldr	r3, [pc, #108]	@ (800e0e8 <rmw_init_options_copy+0x7c>)
 800e07c:	6819      	ldr	r1, [r3, #0]
 800e07e:	f7f2 f8af 	bl	80001e0 <strcmp>
 800e082:	bb60      	cbnz	r0, 800e0de <rmw_init_options_copy+0x72>
 800e084:	68b3      	ldr	r3, [r6, #8]
 800e086:	b113      	cbz	r3, 800e08e <rmw_init_options_copy+0x22>
 800e088:	230b      	movs	r3, #11
 800e08a:	4618      	mov	r0, r3
 800e08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e08e:	4623      	mov	r3, r4
 800e090:	4632      	mov	r2, r6
 800e092:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800e096:	681d      	ldr	r5, [r3, #0]
 800e098:	6858      	ldr	r0, [r3, #4]
 800e09a:	6899      	ldr	r1, [r3, #8]
 800e09c:	68df      	ldr	r7, [r3, #12]
 800e09e:	60d7      	str	r7, [r2, #12]
 800e0a0:	3310      	adds	r3, #16
 800e0a2:	4563      	cmp	r3, ip
 800e0a4:	6015      	str	r5, [r2, #0]
 800e0a6:	6050      	str	r0, [r2, #4]
 800e0a8:	6091      	str	r1, [r2, #8]
 800e0aa:	f102 0210 	add.w	r2, r2, #16
 800e0ae:	d1f2      	bne.n	800e096 <rmw_init_options_copy+0x2a>
 800e0b0:	6819      	ldr	r1, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	480d      	ldr	r0, [pc, #52]	@ (800e0ec <rmw_init_options_copy+0x80>)
 800e0b6:	6053      	str	r3, [r2, #4]
 800e0b8:	6011      	str	r1, [r2, #0]
 800e0ba:	f004 fed7 	bl	8012e6c <get_memory>
 800e0be:	b188      	cbz	r0, 800e0e4 <rmw_init_options_copy+0x78>
 800e0c0:	68c5      	ldr	r5, [r0, #12]
 800e0c2:	6375      	str	r5, [r6, #52]	@ 0x34
 800e0c4:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800e0c6:	3610      	adds	r6, #16
 800e0c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e0ca:	f105 0410 	add.w	r4, r5, #16
 800e0ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0de:	230c      	movs	r3, #12
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e7d0      	b.n	800e08a <rmw_init_options_copy+0x1e>
 800e0e8:	08015df4 	.word	0x08015df4
 800e0ec:	2000c754 	.word	0x2000c754

0800e0f0 <rmw_init_options_fini>:
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d036      	beq.n	800e162 <rmw_init_options_fini+0x72>
 800e0f4:	b530      	push	{r4, r5, lr}
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	b08f      	sub	sp, #60	@ 0x3c
 800e0fa:	3020      	adds	r0, #32
 800e0fc:	f7fb fca0 	bl	8009a40 <rcutils_allocator_is_valid>
 800e100:	b328      	cbz	r0, 800e14e <rmw_init_options_fini+0x5e>
 800e102:	68a0      	ldr	r0, [r4, #8]
 800e104:	b120      	cbz	r0, 800e110 <rmw_init_options_fini+0x20>
 800e106:	4b18      	ldr	r3, [pc, #96]	@ (800e168 <rmw_init_options_fini+0x78>)
 800e108:	6819      	ldr	r1, [r3, #0]
 800e10a:	f7f2 f869 	bl	80001e0 <strcmp>
 800e10e:	bb30      	cbnz	r0, 800e15e <rmw_init_options_fini+0x6e>
 800e110:	4b16      	ldr	r3, [pc, #88]	@ (800e16c <rmw_init_options_fini+0x7c>)
 800e112:	6819      	ldr	r1, [r3, #0]
 800e114:	b1f9      	cbz	r1, 800e156 <rmw_init_options_fini+0x66>
 800e116:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e118:	e001      	b.n	800e11e <rmw_init_options_fini+0x2e>
 800e11a:	6889      	ldr	r1, [r1, #8]
 800e11c:	b1d9      	cbz	r1, 800e156 <rmw_init_options_fini+0x66>
 800e11e:	68cb      	ldr	r3, [r1, #12]
 800e120:	429a      	cmp	r2, r3
 800e122:	d1fa      	bne.n	800e11a <rmw_init_options_fini+0x2a>
 800e124:	4811      	ldr	r0, [pc, #68]	@ (800e16c <rmw_init_options_fini+0x7c>)
 800e126:	f004 feb1 	bl	8012e8c <put_memory>
 800e12a:	466d      	mov	r5, sp
 800e12c:	4668      	mov	r0, sp
 800e12e:	f7ff fd81 	bl	800dc34 <rmw_get_zero_initialized_init_options>
 800e132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e13e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e142:	e884 0003 	stmia.w	r4, {r0, r1}
 800e146:	2300      	movs	r3, #0
 800e148:	4618      	mov	r0, r3
 800e14a:	b00f      	add	sp, #60	@ 0x3c
 800e14c:	bd30      	pop	{r4, r5, pc}
 800e14e:	230b      	movs	r3, #11
 800e150:	4618      	mov	r0, r3
 800e152:	b00f      	add	sp, #60	@ 0x3c
 800e154:	bd30      	pop	{r4, r5, pc}
 800e156:	2301      	movs	r3, #1
 800e158:	4618      	mov	r0, r3
 800e15a:	b00f      	add	sp, #60	@ 0x3c
 800e15c:	bd30      	pop	{r4, r5, pc}
 800e15e:	230c      	movs	r3, #12
 800e160:	e7f2      	b.n	800e148 <rmw_init_options_fini+0x58>
 800e162:	230b      	movs	r3, #11
 800e164:	4618      	mov	r0, r3
 800e166:	4770      	bx	lr
 800e168:	08015df4 	.word	0x08015df4
 800e16c:	2000c754 	.word	0x2000c754

0800e170 <rmw_init>:
 800e170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e174:	b082      	sub	sp, #8
 800e176:	2800      	cmp	r0, #0
 800e178:	f000 80d6 	beq.w	800e328 <rmw_init+0x1b8>
 800e17c:	460e      	mov	r6, r1
 800e17e:	2900      	cmp	r1, #0
 800e180:	f000 80d2 	beq.w	800e328 <rmw_init+0x1b8>
 800e184:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e186:	4605      	mov	r5, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 80cd 	beq.w	800e328 <rmw_init+0x1b8>
 800e18e:	4b79      	ldr	r3, [pc, #484]	@ (800e374 <rmw_init+0x204>)
 800e190:	6880      	ldr	r0, [r0, #8]
 800e192:	f8d3 9000 	ldr.w	r9, [r3]
 800e196:	b128      	cbz	r0, 800e1a4 <rmw_init+0x34>
 800e198:	4649      	mov	r1, r9
 800e19a:	f7f2 f821 	bl	80001e0 <strcmp>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	f040 80cc 	bne.w	800e33c <rmw_init+0x1cc>
 800e1a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1a8:	68eb      	ldr	r3, [r5, #12]
 800e1aa:	61f3      	str	r3, [r6, #28]
 800e1ac:	e9c6 0100 	strd	r0, r1, [r6]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	4971      	ldr	r1, [pc, #452]	@ (800e378 <rmw_init+0x208>)
 800e1b4:	4871      	ldr	r0, [pc, #452]	@ (800e37c <rmw_init+0x20c>)
 800e1b6:	f8c6 9008 	str.w	r9, [r6, #8]
 800e1ba:	f000 ffc7 	bl	800f14c <rmw_uxrce_init_session_memory>
 800e1be:	4870      	ldr	r0, [pc, #448]	@ (800e380 <rmw_init+0x210>)
 800e1c0:	4970      	ldr	r1, [pc, #448]	@ (800e384 <rmw_init+0x214>)
 800e1c2:	2204      	movs	r2, #4
 800e1c4:	f000 fffc 	bl	800f1c0 <rmw_uxrce_init_static_input_buffer_memory>
 800e1c8:	486c      	ldr	r0, [pc, #432]	@ (800e37c <rmw_init+0x20c>)
 800e1ca:	f004 fe4f 	bl	8012e6c <get_memory>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f000 80af 	beq.w	800e332 <rmw_init+0x1c2>
 800e1d4:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800e1d6:	68c4      	ldr	r4, [r0, #12]
 800e1d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e1da:	7c39      	ldrb	r1, [r7, #16]
 800e1dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e1e0:	9001      	str	r0, [sp, #4]
 800e1e2:	6a38      	ldr	r0, [r7, #32]
 800e1e4:	9000      	str	r0, [sp, #0]
 800e1e6:	f104 0a10 	add.w	sl, r4, #16
 800e1ea:	4650      	mov	r0, sl
 800e1ec:	f001 fc36 	bl	800fa5c <uxr_set_custom_transport_callbacks>
 800e1f0:	f241 5294 	movw	r2, #5524	@ 0x1594
 800e1f4:	f241 5398 	movw	r3, #5528	@ 0x1598
 800e1f8:	f04f 0800 	mov.w	r8, #0
 800e1fc:	f241 509c 	movw	r0, #5532	@ 0x159c
 800e200:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800e204:	f844 8002 	str.w	r8, [r4, r2]
 800e208:	f844 8003 	str.w	r8, [r4, r3]
 800e20c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e210:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800e214:	f844 8000 	str.w	r8, [r4, r0]
 800e218:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800e21c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e220:	4859      	ldr	r0, [pc, #356]	@ (800e388 <rmw_init+0x218>)
 800e222:	f8c1 8000 	str.w	r8, [r1]
 800e226:	2201      	movs	r2, #1
 800e228:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800e22c:	4957      	ldr	r1, [pc, #348]	@ (800e38c <rmw_init+0x21c>)
 800e22e:	64b4      	str	r4, [r6, #72]	@ 0x48
 800e230:	f000 ff72 	bl	800f118 <rmw_uxrce_init_node_memory>
 800e234:	4956      	ldr	r1, [pc, #344]	@ (800e390 <rmw_init+0x220>)
 800e236:	4857      	ldr	r0, [pc, #348]	@ (800e394 <rmw_init+0x224>)
 800e238:	2205      	movs	r2, #5
 800e23a:	f000 ff53 	bl	800f0e4 <rmw_uxrce_init_subscription_memory>
 800e23e:	4956      	ldr	r1, [pc, #344]	@ (800e398 <rmw_init+0x228>)
 800e240:	4856      	ldr	r0, [pc, #344]	@ (800e39c <rmw_init+0x22c>)
 800e242:	220a      	movs	r2, #10
 800e244:	f000 ff34 	bl	800f0b0 <rmw_uxrce_init_publisher_memory>
 800e248:	4955      	ldr	r1, [pc, #340]	@ (800e3a0 <rmw_init+0x230>)
 800e24a:	4856      	ldr	r0, [pc, #344]	@ (800e3a4 <rmw_init+0x234>)
 800e24c:	2201      	movs	r2, #1
 800e24e:	f000 fefb 	bl	800f048 <rmw_uxrce_init_service_memory>
 800e252:	4955      	ldr	r1, [pc, #340]	@ (800e3a8 <rmw_init+0x238>)
 800e254:	4855      	ldr	r0, [pc, #340]	@ (800e3ac <rmw_init+0x23c>)
 800e256:	2201      	movs	r2, #1
 800e258:	f000 ff10 	bl	800f07c <rmw_uxrce_init_client_memory>
 800e25c:	4954      	ldr	r1, [pc, #336]	@ (800e3b0 <rmw_init+0x240>)
 800e25e:	4855      	ldr	r0, [pc, #340]	@ (800e3b4 <rmw_init+0x244>)
 800e260:	220f      	movs	r2, #15
 800e262:	f000 ff91 	bl	800f188 <rmw_uxrce_init_topic_memory>
 800e266:	4954      	ldr	r1, [pc, #336]	@ (800e3b8 <rmw_init+0x248>)
 800e268:	4854      	ldr	r0, [pc, #336]	@ (800e3bc <rmw_init+0x24c>)
 800e26a:	2203      	movs	r2, #3
 800e26c:	f000 ffc6 	bl	800f1fc <rmw_uxrce_init_init_options_impl_memory>
 800e270:	4953      	ldr	r1, [pc, #332]	@ (800e3c0 <rmw_init+0x250>)
 800e272:	4854      	ldr	r0, [pc, #336]	@ (800e3c4 <rmw_init+0x254>)
 800e274:	2204      	movs	r2, #4
 800e276:	f000 ffdb 	bl	800f230 <rmw_uxrce_init_wait_set_memory>
 800e27a:	4953      	ldr	r1, [pc, #332]	@ (800e3c8 <rmw_init+0x258>)
 800e27c:	4853      	ldr	r0, [pc, #332]	@ (800e3cc <rmw_init+0x25c>)
 800e27e:	2204      	movs	r2, #4
 800e280:	f000 fff2 	bl	800f268 <rmw_uxrce_init_guard_condition_memory>
 800e284:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e286:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800e288:	4642      	mov	r2, r8
 800e28a:	f000 fd27 	bl	800ecdc <rmw_uxrce_transport_init>
 800e28e:	4607      	mov	r7, r0
 800e290:	2800      	cmp	r0, #0
 800e292:	d158      	bne.n	800e346 <rmw_init+0x1d6>
 800e294:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e296:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e29a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e29c:	4628      	mov	r0, r5
 800e29e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e2a2:	f001 fe01 	bl	800fea8 <uxr_init_session>
 800e2a6:	494a      	ldr	r1, [pc, #296]	@ (800e3d0 <rmw_init+0x260>)
 800e2a8:	4622      	mov	r2, r4
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	f001 fe1e 	bl	800feec <uxr_set_topic_callback>
 800e2b0:	4948      	ldr	r1, [pc, #288]	@ (800e3d4 <rmw_init+0x264>)
 800e2b2:	463a      	mov	r2, r7
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f001 fe15 	bl	800fee4 <uxr_set_status_callback>
 800e2ba:	4947      	ldr	r1, [pc, #284]	@ (800e3d8 <rmw_init+0x268>)
 800e2bc:	463a      	mov	r2, r7
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f001 fe18 	bl	800fef4 <uxr_set_request_callback>
 800e2c4:	4945      	ldr	r1, [pc, #276]	@ (800e3dc <rmw_init+0x26c>)
 800e2c6:	463a      	mov	r2, r7
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f001 fe17 	bl	800fefc <uxr_set_reply_callback>
 800e2ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e2d2:	2304      	movs	r3, #4
 800e2d4:	0092      	lsls	r2, r2, #2
 800e2d6:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f001 fe4e 	bl	800ff7c <uxr_create_input_reliable_stream>
 800e2e0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e2e4:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e2e8:	0092      	lsls	r2, r2, #2
 800e2ea:	2304      	movs	r3, #4
 800e2ec:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f001 fe19 	bl	800ff28 <uxr_create_output_reliable_stream>
 800e2f6:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f001 fe38 	bl	800ff70 <uxr_create_input_best_effort_stream>
 800e300:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e304:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e308:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e30c:	4628      	mov	r0, r5
 800e30e:	3114      	adds	r1, #20
 800e310:	f001 fdf8 	bl	800ff04 <uxr_create_output_best_effort_stream>
 800e314:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e318:	4628      	mov	r0, r5
 800e31a:	f002 fa89 	bl	8010830 <uxr_create_session>
 800e31e:	b1f8      	cbz	r0, 800e360 <rmw_init+0x1f0>
 800e320:	4638      	mov	r0, r7
 800e322:	b002      	add	sp, #8
 800e324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e328:	270b      	movs	r7, #11
 800e32a:	4638      	mov	r0, r7
 800e32c:	b002      	add	sp, #8
 800e32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e332:	2701      	movs	r7, #1
 800e334:	4638      	mov	r0, r7
 800e336:	b002      	add	sp, #8
 800e338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33c:	270c      	movs	r7, #12
 800e33e:	4638      	mov	r0, r7
 800e340:	b002      	add	sp, #8
 800e342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e346:	4650      	mov	r0, sl
 800e348:	f001 fbc8 	bl	800fadc <uxr_close_custom_transport>
 800e34c:	480b      	ldr	r0, [pc, #44]	@ (800e37c <rmw_init+0x20c>)
 800e34e:	4621      	mov	r1, r4
 800e350:	f004 fd9c 	bl	8012e8c <put_memory>
 800e354:	4638      	mov	r0, r7
 800e356:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800e35a:	b002      	add	sp, #8
 800e35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e360:	4650      	mov	r0, sl
 800e362:	f001 fbbb 	bl	800fadc <uxr_close_custom_transport>
 800e366:	4805      	ldr	r0, [pc, #20]	@ (800e37c <rmw_init+0x20c>)
 800e368:	4621      	mov	r1, r4
 800e36a:	f004 fd8f 	bl	8012e8c <put_memory>
 800e36e:	64b7      	str	r7, [r6, #72]	@ 0x48
 800e370:	2701      	movs	r7, #1
 800e372:	e7d5      	b.n	800e320 <rmw_init+0x1b0>
 800e374:	08015df4 	.word	0x08015df4
 800e378:	2000c830 	.word	0x2000c830
 800e37c:	2000c600 	.word	0x2000c600
 800e380:	20009458 	.word	0x20009458
 800e384:	2000a238 	.word	0x2000a238
 800e388:	2000c42c 	.word	0x2000c42c
 800e38c:	2000c610 	.word	0x2000c610
 800e390:	20009d60 	.word	0x20009d60
 800e394:	2000c6c4 	.word	0x2000c6c4
 800e398:	20009478 	.word	0x20009478
 800e39c:	20009468 	.word	0x20009468
 800e3a0:	2000c768 	.word	0x2000c768
 800e3a4:	2000c6b4 	.word	0x2000c6b4
 800e3a8:	2000a170 	.word	0x2000a170
 800e3ac:	20009ce8 	.word	0x20009ce8
 800e3b0:	2000c43c 	.word	0x2000c43c
 800e3b4:	2000c5f0 	.word	0x2000c5f0
 800e3b8:	2000c3a8 	.word	0x2000c3a8
 800e3bc:	2000c754 	.word	0x2000c754
 800e3c0:	2000c338 	.word	0x2000c338
 800e3c4:	2000ddd8 	.word	0x2000ddd8
 800e3c8:	2000c6d4 	.word	0x2000c6d4
 800e3cc:	2000c5e0 	.word	0x2000c5e0
 800e3d0:	08012cad 	.word	0x08012cad
 800e3d4:	08012ca5 	.word	0x08012ca5
 800e3d8:	08012d41 	.word	0x08012d41
 800e3dc:	08012dd9 	.word	0x08012dd9

0800e3e0 <rmw_context_fini>:
 800e3e0:	4b17      	ldr	r3, [pc, #92]	@ (800e440 <rmw_context_fini+0x60>)
 800e3e2:	b570      	push	{r4, r5, r6, lr}
 800e3e4:	681c      	ldr	r4, [r3, #0]
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800e3ea:	b33c      	cbz	r4, 800e43c <rmw_context_fini+0x5c>
 800e3ec:	2600      	movs	r6, #0
 800e3ee:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800e3f2:	691a      	ldr	r2, [r3, #16]
 800e3f4:	4282      	cmp	r2, r0
 800e3f6:	d018      	beq.n	800e42a <rmw_context_fini+0x4a>
 800e3f8:	2c00      	cmp	r4, #0
 800e3fa:	d1f8      	bne.n	800e3ee <rmw_context_fini+0xe>
 800e3fc:	b188      	cbz	r0, 800e422 <rmw_context_fini+0x42>
 800e3fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e402:	789b      	ldrb	r3, [r3, #2]
 800e404:	2b01      	cmp	r3, #1
 800e406:	bf14      	ite	ne
 800e408:	210a      	movne	r1, #10
 800e40a:	2100      	moveq	r1, #0
 800e40c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e410:	f002 fbd0 	bl	8010bb4 <uxr_delete_session_retries>
 800e414:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e416:	f000 ff41 	bl	800f29c <rmw_uxrce_fini_session_memory>
 800e41a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e41c:	3010      	adds	r0, #16
 800e41e:	f001 fb5d 	bl	800fadc <uxr_close_custom_transport>
 800e422:	2300      	movs	r3, #0
 800e424:	4630      	mov	r0, r6
 800e426:	64ab      	str	r3, [r5, #72]	@ 0x48
 800e428:	bd70      	pop	{r4, r5, r6, pc}
 800e42a:	f103 0018 	add.w	r0, r3, #24
 800e42e:	f000 f89b 	bl	800e568 <rmw_destroy_node>
 800e432:	4606      	mov	r6, r0
 800e434:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e436:	2c00      	cmp	r4, #0
 800e438:	d1d9      	bne.n	800e3ee <rmw_context_fini+0xe>
 800e43a:	e7df      	b.n	800e3fc <rmw_context_fini+0x1c>
 800e43c:	4626      	mov	r6, r4
 800e43e:	e7dd      	b.n	800e3fc <rmw_context_fini+0x1c>
 800e440:	2000c42c 	.word	0x2000c42c

0800e444 <create_node>:
 800e444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e448:	b083      	sub	sp, #12
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d05f      	beq.n	800e50e <create_node+0xca>
 800e44e:	4606      	mov	r6, r0
 800e450:	4835      	ldr	r0, [pc, #212]	@ (800e528 <create_node+0xe4>)
 800e452:	460f      	mov	r7, r1
 800e454:	4690      	mov	r8, r2
 800e456:	461d      	mov	r5, r3
 800e458:	f004 fd08 	bl	8012e6c <get_memory>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d056      	beq.n	800e50e <create_node+0xca>
 800e460:	68c4      	ldr	r4, [r0, #12]
 800e462:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800e464:	6123      	str	r3, [r4, #16]
 800e466:	f7ff fda3 	bl	800dfb0 <rmw_get_implementation_identifier>
 800e46a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e46e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e472:	f8c4 9020 	str.w	r9, [r4, #32]
 800e476:	4630      	mov	r0, r6
 800e478:	f7f1 febc 	bl	80001f4 <strlen>
 800e47c:	1c42      	adds	r2, r0, #1
 800e47e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e480:	f104 0518 	add.w	r5, r4, #24
 800e484:	d840      	bhi.n	800e508 <create_node+0xc4>
 800e486:	4648      	mov	r0, r9
 800e488:	4631      	mov	r1, r6
 800e48a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e48e:	f006 f918 	bl	80146c2 <memcpy>
 800e492:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e496:	4638      	mov	r0, r7
 800e498:	f7f1 feac 	bl	80001f4 <strlen>
 800e49c:	1c42      	adds	r2, r0, #1
 800e49e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e4a0:	d832      	bhi.n	800e508 <create_node+0xc4>
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	4648      	mov	r0, r9
 800e4a6:	f006 f90c 	bl	80146c2 <memcpy>
 800e4aa:	f241 5394 	movw	r3, #5524	@ 0x1594
 800e4ae:	6922      	ldr	r2, [r4, #16]
 800e4b0:	5ad0      	ldrh	r0, [r2, r3]
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	eb00 0c01 	add.w	ip, r0, r1
 800e4b8:	f822 c003 	strh.w	ip, [r2, r3]
 800e4bc:	f001 fb12 	bl	800fae4 <uxr_object_id>
 800e4c0:	6160      	str	r0, [r4, #20]
 800e4c2:	783b      	ldrb	r3, [r7, #0]
 800e4c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e4c6:	d127      	bne.n	800e518 <create_node+0xd4>
 800e4c8:	787b      	ldrb	r3, [r7, #1]
 800e4ca:	bb2b      	cbnz	r3, 800e518 <create_node+0xd4>
 800e4cc:	4a17      	ldr	r2, [pc, #92]	@ (800e52c <create_node+0xe8>)
 800e4ce:	4818      	ldr	r0, [pc, #96]	@ (800e530 <create_node+0xec>)
 800e4d0:	4633      	mov	r3, r6
 800e4d2:	213c      	movs	r1, #60	@ 0x3c
 800e4d4:	f005 ff62 	bl	801439c <sniprintf>
 800e4d8:	6920      	ldr	r0, [r4, #16]
 800e4da:	4b15      	ldr	r3, [pc, #84]	@ (800e530 <create_node+0xec>)
 800e4dc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	2306      	movs	r3, #6
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	6811      	ldr	r1, [r2, #0]
 800e4e8:	6962      	ldr	r2, [r4, #20]
 800e4ea:	fa1f f388 	uxth.w	r3, r8
 800e4ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e4f2:	f001 f927 	bl	800f744 <uxr_buffer_create_participant_bin>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	6920      	ldr	r0, [r4, #16]
 800e4fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e4fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e502:	f001 f839 	bl	800f578 <run_xrce_session>
 800e506:	b918      	cbnz	r0, 800e510 <create_node+0xcc>
 800e508:	4628      	mov	r0, r5
 800e50a:	f000 fecd 	bl	800f2a8 <rmw_uxrce_fini_node_memory>
 800e50e:	2500      	movs	r5, #0
 800e510:	4628      	mov	r0, r5
 800e512:	b003      	add	sp, #12
 800e514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e518:	4a06      	ldr	r2, [pc, #24]	@ (800e534 <create_node+0xf0>)
 800e51a:	9600      	str	r6, [sp, #0]
 800e51c:	463b      	mov	r3, r7
 800e51e:	213c      	movs	r1, #60	@ 0x3c
 800e520:	4803      	ldr	r0, [pc, #12]	@ (800e530 <create_node+0xec>)
 800e522:	f005 ff3b 	bl	801439c <sniprintf>
 800e526:	e7d7      	b.n	800e4d8 <create_node+0x94>
 800e528:	2000c42c 	.word	0x2000c42c
 800e52c:	08015bb4 	.word	0x08015bb4
 800e530:	200091dc 	.word	0x200091dc
 800e534:	080156a0 	.word	0x080156a0

0800e538 <rmw_create_node>:
 800e538:	b199      	cbz	r1, 800e562 <rmw_create_node+0x2a>
 800e53a:	b430      	push	{r4, r5}
 800e53c:	4615      	mov	r5, r2
 800e53e:	461a      	mov	r2, r3
 800e540:	780b      	ldrb	r3, [r1, #0]
 800e542:	460c      	mov	r4, r1
 800e544:	b153      	cbz	r3, 800e55c <rmw_create_node+0x24>
 800e546:	b14d      	cbz	r5, 800e55c <rmw_create_node+0x24>
 800e548:	782b      	ldrb	r3, [r5, #0]
 800e54a:	b13b      	cbz	r3, 800e55c <rmw_create_node+0x24>
 800e54c:	b902      	cbnz	r2, 800e550 <rmw_create_node+0x18>
 800e54e:	69c2      	ldr	r2, [r0, #28]
 800e550:	4603      	mov	r3, r0
 800e552:	4629      	mov	r1, r5
 800e554:	4620      	mov	r0, r4
 800e556:	bc30      	pop	{r4, r5}
 800e558:	f7ff bf74 	b.w	800e444 <create_node>
 800e55c:	2000      	movs	r0, #0
 800e55e:	bc30      	pop	{r4, r5}
 800e560:	4770      	bx	lr
 800e562:	2000      	movs	r0, #0
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop

0800e568 <rmw_destroy_node>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	b328      	cbz	r0, 800e5b8 <rmw_destroy_node+0x50>
 800e56c:	4607      	mov	r7, r0
 800e56e:	6800      	ldr	r0, [r0, #0]
 800e570:	b120      	cbz	r0, 800e57c <rmw_destroy_node+0x14>
 800e572:	4b36      	ldr	r3, [pc, #216]	@ (800e64c <rmw_destroy_node+0xe4>)
 800e574:	6819      	ldr	r1, [r3, #0]
 800e576:	f7f1 fe33 	bl	80001e0 <strcmp>
 800e57a:	b9e8      	cbnz	r0, 800e5b8 <rmw_destroy_node+0x50>
 800e57c:	687d      	ldr	r5, [r7, #4]
 800e57e:	b1dd      	cbz	r5, 800e5b8 <rmw_destroy_node+0x50>
 800e580:	4b33      	ldr	r3, [pc, #204]	@ (800e650 <rmw_destroy_node+0xe8>)
 800e582:	681c      	ldr	r4, [r3, #0]
 800e584:	2c00      	cmp	r4, #0
 800e586:	d05f      	beq.n	800e648 <rmw_destroy_node+0xe0>
 800e588:	2600      	movs	r6, #0
 800e58a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e58e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e592:	429d      	cmp	r5, r3
 800e594:	d013      	beq.n	800e5be <rmw_destroy_node+0x56>
 800e596:	2c00      	cmp	r4, #0
 800e598:	d1f7      	bne.n	800e58a <rmw_destroy_node+0x22>
 800e59a:	4b2e      	ldr	r3, [pc, #184]	@ (800e654 <rmw_destroy_node+0xec>)
 800e59c:	681c      	ldr	r4, [r3, #0]
 800e59e:	b1c4      	cbz	r4, 800e5d2 <rmw_destroy_node+0x6a>
 800e5a0:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e5a4:	6a0b      	ldr	r3, [r1, #32]
 800e5a6:	429d      	cmp	r5, r3
 800e5a8:	d1f9      	bne.n	800e59e <rmw_destroy_node+0x36>
 800e5aa:	317c      	adds	r1, #124	@ 0x7c
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	f000 fae3 	bl	800eb78 <rmw_destroy_subscription>
 800e5b2:	2801      	cmp	r0, #1
 800e5b4:	4606      	mov	r6, r0
 800e5b6:	d1f2      	bne.n	800e59e <rmw_destroy_node+0x36>
 800e5b8:	2601      	movs	r6, #1
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5be:	3184      	adds	r1, #132	@ 0x84
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f000 f853 	bl	800e66c <rmw_destroy_publisher>
 800e5c6:	2801      	cmp	r0, #1
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	d0f5      	beq.n	800e5b8 <rmw_destroy_node+0x50>
 800e5cc:	2c00      	cmp	r4, #0
 800e5ce:	d1dc      	bne.n	800e58a <rmw_destroy_node+0x22>
 800e5d0:	e7e3      	b.n	800e59a <rmw_destroy_node+0x32>
 800e5d2:	4b21      	ldr	r3, [pc, #132]	@ (800e658 <rmw_destroy_node+0xf0>)
 800e5d4:	681c      	ldr	r4, [r3, #0]
 800e5d6:	b16c      	cbz	r4, 800e5f4 <rmw_destroy_node+0x8c>
 800e5d8:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e5dc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e5de:	429d      	cmp	r5, r3
 800e5e0:	d1f9      	bne.n	800e5d6 <rmw_destroy_node+0x6e>
 800e5e2:	317c      	adds	r1, #124	@ 0x7c
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f000 f999 	bl	800e91c <rmw_destroy_service>
 800e5ea:	2801      	cmp	r0, #1
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	d0e3      	beq.n	800e5b8 <rmw_destroy_node+0x50>
 800e5f0:	2c00      	cmp	r4, #0
 800e5f2:	d1f1      	bne.n	800e5d8 <rmw_destroy_node+0x70>
 800e5f4:	4b19      	ldr	r3, [pc, #100]	@ (800e65c <rmw_destroy_node+0xf4>)
 800e5f6:	681c      	ldr	r4, [r3, #0]
 800e5f8:	b16c      	cbz	r4, 800e616 <rmw_destroy_node+0xae>
 800e5fa:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e5fe:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e600:	429d      	cmp	r5, r3
 800e602:	d1f9      	bne.n	800e5f8 <rmw_destroy_node+0x90>
 800e604:	317c      	adds	r1, #124	@ 0x7c
 800e606:	4638      	mov	r0, r7
 800e608:	f7ff fc8e 	bl	800df28 <rmw_destroy_client>
 800e60c:	2801      	cmp	r0, #1
 800e60e:	4606      	mov	r6, r0
 800e610:	d0d2      	beq.n	800e5b8 <rmw_destroy_node+0x50>
 800e612:	2c00      	cmp	r4, #0
 800e614:	d1f1      	bne.n	800e5fa <rmw_destroy_node+0x92>
 800e616:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800e61a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e61e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e622:	6819      	ldr	r1, [r3, #0]
 800e624:	f001 f842 	bl	800f6ac <uxr_buffer_delete_entity>
 800e628:	4602      	mov	r2, r0
 800e62a:	6928      	ldr	r0, [r5, #16]
 800e62c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e630:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e634:	f000 ffa0 	bl	800f578 <run_xrce_session>
 800e638:	2800      	cmp	r0, #0
 800e63a:	bf08      	it	eq
 800e63c:	2602      	moveq	r6, #2
 800e63e:	4638      	mov	r0, r7
 800e640:	f000 fe32 	bl	800f2a8 <rmw_uxrce_fini_node_memory>
 800e644:	4630      	mov	r0, r6
 800e646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e648:	4626      	mov	r6, r4
 800e64a:	e7a6      	b.n	800e59a <rmw_destroy_node+0x32>
 800e64c:	08015df4 	.word	0x08015df4
 800e650:	20009468 	.word	0x20009468
 800e654:	2000c6c4 	.word	0x2000c6c4
 800e658:	2000c6b4 	.word	0x2000c6b4
 800e65c:	20009ce8 	.word	0x20009ce8

0800e660 <rmw_node_get_graph_guard_condition>:
 800e660:	6843      	ldr	r3, [r0, #4]
 800e662:	6918      	ldr	r0, [r3, #16]
 800e664:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop

0800e66c <rmw_destroy_publisher>:
 800e66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66e:	b128      	cbz	r0, 800e67c <rmw_destroy_publisher+0x10>
 800e670:	4604      	mov	r4, r0
 800e672:	6800      	ldr	r0, [r0, #0]
 800e674:	460d      	mov	r5, r1
 800e676:	f000 ffff 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800e67a:	b910      	cbnz	r0, 800e682 <rmw_destroy_publisher+0x16>
 800e67c:	2401      	movs	r4, #1
 800e67e:	4620      	mov	r0, r4
 800e680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e682:	6863      	ldr	r3, [r4, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0f9      	beq.n	800e67c <rmw_destroy_publisher+0x10>
 800e688:	2d00      	cmp	r5, #0
 800e68a:	d0f7      	beq.n	800e67c <rmw_destroy_publisher+0x10>
 800e68c:	6828      	ldr	r0, [r5, #0]
 800e68e:	f000 fff3 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800e692:	2800      	cmp	r0, #0
 800e694:	d0f2      	beq.n	800e67c <rmw_destroy_publisher+0x10>
 800e696:	686c      	ldr	r4, [r5, #4]
 800e698:	2c00      	cmp	r4, #0
 800e69a:	d0ef      	beq.n	800e67c <rmw_destroy_publisher+0x10>
 800e69c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e69e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e6a2:	f004 fc7f 	bl	8012fa4 <destroy_topic>
 800e6a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e6aa:	6962      	ldr	r2, [r4, #20]
 800e6ac:	6918      	ldr	r0, [r3, #16]
 800e6ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e6b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6b6:	6819      	ldr	r1, [r3, #0]
 800e6b8:	f000 fff8 	bl	800f6ac <uxr_buffer_delete_entity>
 800e6bc:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800e6c0:	6922      	ldr	r2, [r4, #16]
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	6908      	ldr	r0, [r1, #16]
 800e6c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e6ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6ce:	6809      	ldr	r1, [r1, #0]
 800e6d0:	461c      	mov	r4, r3
 800e6d2:	f000 ffeb 	bl	800f6ac <uxr_buffer_delete_entity>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	6938      	ldr	r0, [r7, #16]
 800e6da:	4622      	mov	r2, r4
 800e6dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e6e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e6e4:	f000 ff48 	bl	800f578 <run_xrce_session>
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	6938      	ldr	r0, [r7, #16]
 800e6ec:	4632      	mov	r2, r6
 800e6ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e6f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e6f6:	f000 ff3f 	bl	800f578 <run_xrce_session>
 800e6fa:	b12c      	cbz	r4, 800e708 <rmw_destroy_publisher+0x9c>
 800e6fc:	b120      	cbz	r0, 800e708 <rmw_destroy_publisher+0x9c>
 800e6fe:	2400      	movs	r4, #0
 800e700:	4628      	mov	r0, r5
 800e702:	f000 fde9 	bl	800f2d8 <rmw_uxrce_fini_publisher_memory>
 800e706:	e7ba      	b.n	800e67e <rmw_destroy_publisher+0x12>
 800e708:	2402      	movs	r4, #2
 800e70a:	e7f9      	b.n	800e700 <rmw_destroy_publisher+0x94>

0800e70c <rmw_take_request>:
 800e70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e710:	4605      	mov	r5, r0
 800e712:	6800      	ldr	r0, [r0, #0]
 800e714:	b089      	sub	sp, #36	@ 0x24
 800e716:	460c      	mov	r4, r1
 800e718:	4690      	mov	r8, r2
 800e71a:	461e      	mov	r6, r3
 800e71c:	b128      	cbz	r0, 800e72a <rmw_take_request+0x1e>
 800e71e:	4b28      	ldr	r3, [pc, #160]	@ (800e7c0 <rmw_take_request+0xb4>)
 800e720:	6819      	ldr	r1, [r3, #0]
 800e722:	f7f1 fd5d 	bl	80001e0 <strcmp>
 800e726:	2800      	cmp	r0, #0
 800e728:	d146      	bne.n	800e7b8 <rmw_take_request+0xac>
 800e72a:	b10e      	cbz	r6, 800e730 <rmw_take_request+0x24>
 800e72c:	2300      	movs	r3, #0
 800e72e:	7033      	strb	r3, [r6, #0]
 800e730:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800e734:	f000 fea8 	bl	800f488 <rmw_uxrce_clean_expired_static_input_buffer>
 800e738:	4648      	mov	r0, r9
 800e73a:	f000 fe7d 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e73e:	4607      	mov	r7, r0
 800e740:	b3b0      	cbz	r0, 800e7b0 <rmw_take_request+0xa4>
 800e742:	68c5      	ldr	r5, [r0, #12]
 800e744:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 800e748:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 800e74c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800e750:	7423      	strb	r3, [r4, #16]
 800e752:	e9c4 1208 	strd	r1, r2, [r4, #32]
 800e756:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800e75a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800e75e:	74e2      	strb	r2, [r4, #19]
 800e760:	f8a4 3011 	strh.w	r3, [r4, #17]
 800e764:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800e768:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800e76c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800e770:	61e1      	str	r1, [r4, #28]
 800e772:	6162      	str	r2, [r4, #20]
 800e774:	61a3      	str	r3, [r4, #24]
 800e776:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	4798      	blx	r3
 800e77e:	6844      	ldr	r4, [r0, #4]
 800e780:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800e784:	f105 0110 	add.w	r1, r5, #16
 800e788:	4668      	mov	r0, sp
 800e78a:	f7fc fc95 	bl	800b0b8 <ucdr_init_buffer>
 800e78e:	68e3      	ldr	r3, [r4, #12]
 800e790:	4641      	mov	r1, r8
 800e792:	4668      	mov	r0, sp
 800e794:	4798      	blx	r3
 800e796:	4639      	mov	r1, r7
 800e798:	4604      	mov	r4, r0
 800e79a:	480a      	ldr	r0, [pc, #40]	@ (800e7c4 <rmw_take_request+0xb8>)
 800e79c:	f004 fb76 	bl	8012e8c <put_memory>
 800e7a0:	b106      	cbz	r6, 800e7a4 <rmw_take_request+0x98>
 800e7a2:	7034      	strb	r4, [r6, #0]
 800e7a4:	f084 0001 	eor.w	r0, r4, #1
 800e7a8:	b2c0      	uxtb	r0, r0
 800e7aa:	b009      	add	sp, #36	@ 0x24
 800e7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	b009      	add	sp, #36	@ 0x24
 800e7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7b8:	200c      	movs	r0, #12
 800e7ba:	b009      	add	sp, #36	@ 0x24
 800e7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c0:	08015df4 	.word	0x08015df4
 800e7c4:	20009458 	.word	0x20009458

0800e7c8 <rmw_send_response>:
 800e7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	6800      	ldr	r0, [r0, #0]
 800e7ce:	b091      	sub	sp, #68	@ 0x44
 800e7d0:	460c      	mov	r4, r1
 800e7d2:	4617      	mov	r7, r2
 800e7d4:	b128      	cbz	r0, 800e7e2 <rmw_send_response+0x1a>
 800e7d6:	4b2a      	ldr	r3, [pc, #168]	@ (800e880 <rmw_send_response+0xb8>)
 800e7d8:	6819      	ldr	r1, [r3, #0]
 800e7da:	f7f1 fd01 	bl	80001e0 <strcmp>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d143      	bne.n	800e86a <rmw_send_response+0xa2>
 800e7e2:	4623      	mov	r3, r4
 800e7e4:	4626      	mov	r6, r4
 800e7e6:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800e7ea:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 800e7ee:	6859      	ldr	r1, [r3, #4]
 800e7f0:	686d      	ldr	r5, [r5, #4]
 800e7f2:	689a      	ldr	r2, [r3, #8]
 800e7f4:	78b3      	ldrb	r3, [r6, #2]
 800e7f6:	f894 c000 	ldrb.w	ip, [r4]
 800e7fa:	6966      	ldr	r6, [r4, #20]
 800e7fc:	f88d 3016 	strb.w	r3, [sp, #22]
 800e800:	ab02      	add	r3, sp, #8
 800e802:	f8ad e014 	strh.w	lr, [sp, #20]
 800e806:	f88d c017 	strb.w	ip, [sp, #23]
 800e80a:	9606      	str	r6, [sp, #24]
 800e80c:	c307      	stmia	r3!, {r0, r1, r2}
 800e80e:	696b      	ldr	r3, [r5, #20]
 800e810:	6922      	ldr	r2, [r4, #16]
 800e812:	9207      	str	r2, [sp, #28]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800e818:	4798      	blx	r3
 800e81a:	4603      	mov	r3, r0
 800e81c:	4638      	mov	r0, r7
 800e81e:	685c      	ldr	r4, [r3, #4]
 800e820:	6923      	ldr	r3, [r4, #16]
 800e822:	4798      	blx	r3
 800e824:	6933      	ldr	r3, [r6, #16]
 800e826:	3018      	adds	r0, #24
 800e828:	9000      	str	r0, [sp, #0]
 800e82a:	692a      	ldr	r2, [r5, #16]
 800e82c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800e82e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e832:	ab08      	add	r3, sp, #32
 800e834:	f003 f980 	bl	8011b38 <uxr_prepare_output_stream>
 800e838:	b910      	cbnz	r0, 800e840 <rmw_send_response+0x78>
 800e83a:	2001      	movs	r0, #1
 800e83c:	b011      	add	sp, #68	@ 0x44
 800e83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e840:	a902      	add	r1, sp, #8
 800e842:	a808      	add	r0, sp, #32
 800e844:	f004 f8ee 	bl	8012a24 <uxr_serialize_SampleIdentity>
 800e848:	68a3      	ldr	r3, [r4, #8]
 800e84a:	a908      	add	r1, sp, #32
 800e84c:	4638      	mov	r0, r7
 800e84e:	4798      	blx	r3
 800e850:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800e854:	6930      	ldr	r0, [r6, #16]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d00a      	beq.n	800e870 <rmw_send_response+0xa8>
 800e85a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800e85c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e860:	f001 ff6e 	bl	8010740 <uxr_run_session_until_confirm_delivery>
 800e864:	2000      	movs	r0, #0
 800e866:	b011      	add	sp, #68	@ 0x44
 800e868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e86a:	200c      	movs	r0, #12
 800e86c:	b011      	add	sp, #68	@ 0x44
 800e86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e870:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e874:	f001 fba8 	bl	800ffc8 <uxr_flash_output_streams>
 800e878:	2000      	movs	r0, #0
 800e87a:	b011      	add	sp, #68	@ 0x44
 800e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e87e:	bf00      	nop
 800e880:	08015df4 	.word	0x08015df4

0800e884 <rmw_take_response>:
 800e884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e888:	4604      	mov	r4, r0
 800e88a:	6800      	ldr	r0, [r0, #0]
 800e88c:	b089      	sub	sp, #36	@ 0x24
 800e88e:	4688      	mov	r8, r1
 800e890:	4617      	mov	r7, r2
 800e892:	461d      	mov	r5, r3
 800e894:	b120      	cbz	r0, 800e8a0 <rmw_take_response+0x1c>
 800e896:	4b1f      	ldr	r3, [pc, #124]	@ (800e914 <rmw_take_response+0x90>)
 800e898:	6819      	ldr	r1, [r3, #0]
 800e89a:	f7f1 fca1 	bl	80001e0 <strcmp>
 800e89e:	bb88      	cbnz	r0, 800e904 <rmw_take_response+0x80>
 800e8a0:	b10d      	cbz	r5, 800e8a6 <rmw_take_response+0x22>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	702b      	strb	r3, [r5, #0]
 800e8a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e8aa:	f000 fded 	bl	800f488 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8ae:	4648      	mov	r0, r9
 800e8b0:	f000 fdc2 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8b4:	4606      	mov	r6, r0
 800e8b6:	b348      	cbz	r0, 800e90c <rmw_take_response+0x88>
 800e8b8:	68c4      	ldr	r4, [r0, #12]
 800e8ba:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800e8be:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	68c9      	ldr	r1, [r1, #12]
 800e8c8:	e9c8 2308 	strd	r2, r3, [r8, #32]
 800e8cc:	4788      	blx	r1
 800e8ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e8d2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800e8d6:	f104 0110 	add.w	r1, r4, #16
 800e8da:	4668      	mov	r0, sp
 800e8dc:	f7fc fbec 	bl	800b0b8 <ucdr_init_buffer>
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8e6:	4668      	mov	r0, sp
 800e8e8:	4798      	blx	r3
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	480a      	ldr	r0, [pc, #40]	@ (800e918 <rmw_take_response+0x94>)
 800e8f0:	f004 facc 	bl	8012e8c <put_memory>
 800e8f4:	b105      	cbz	r5, 800e8f8 <rmw_take_response+0x74>
 800e8f6:	702c      	strb	r4, [r5, #0]
 800e8f8:	f084 0001 	eor.w	r0, r4, #1
 800e8fc:	b2c0      	uxtb	r0, r0
 800e8fe:	b009      	add	sp, #36	@ 0x24
 800e900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e904:	200c      	movs	r0, #12
 800e906:	b009      	add	sp, #36	@ 0x24
 800e908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e90c:	2001      	movs	r0, #1
 800e90e:	b009      	add	sp, #36	@ 0x24
 800e910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e914:	08015df4 	.word	0x08015df4
 800e918:	20009458 	.word	0x20009458

0800e91c <rmw_destroy_service>:
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	b128      	cbz	r0, 800e92c <rmw_destroy_service+0x10>
 800e920:	4604      	mov	r4, r0
 800e922:	6800      	ldr	r0, [r0, #0]
 800e924:	460d      	mov	r5, r1
 800e926:	f000 fea7 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800e92a:	b910      	cbnz	r0, 800e932 <rmw_destroy_service+0x16>
 800e92c:	2401      	movs	r4, #1
 800e92e:	4620      	mov	r0, r4
 800e930:	bd70      	pop	{r4, r5, r6, pc}
 800e932:	6863      	ldr	r3, [r4, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d0f9      	beq.n	800e92c <rmw_destroy_service+0x10>
 800e938:	2d00      	cmp	r5, #0
 800e93a:	d0f7      	beq.n	800e92c <rmw_destroy_service+0x10>
 800e93c:	6828      	ldr	r0, [r5, #0]
 800e93e:	f000 fe9b 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800e942:	2800      	cmp	r0, #0
 800e944:	d0f2      	beq.n	800e92c <rmw_destroy_service+0x10>
 800e946:	686e      	ldr	r6, [r5, #4]
 800e948:	2e00      	cmp	r6, #0
 800e94a:	d0ef      	beq.n	800e92c <rmw_destroy_service+0x10>
 800e94c:	6864      	ldr	r4, [r4, #4]
 800e94e:	6932      	ldr	r2, [r6, #16]
 800e950:	6920      	ldr	r0, [r4, #16]
 800e952:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e956:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e95a:	6819      	ldr	r1, [r3, #0]
 800e95c:	f001 f92a 	bl	800fbb4 <uxr_buffer_cancel_data>
 800e960:	4602      	mov	r2, r0
 800e962:	6920      	ldr	r0, [r4, #16]
 800e964:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e968:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e96c:	f000 fe04 	bl	800f578 <run_xrce_session>
 800e970:	6920      	ldr	r0, [r4, #16]
 800e972:	6932      	ldr	r2, [r6, #16]
 800e974:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e978:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e97c:	6819      	ldr	r1, [r3, #0]
 800e97e:	f000 fe95 	bl	800f6ac <uxr_buffer_delete_entity>
 800e982:	4602      	mov	r2, r0
 800e984:	6920      	ldr	r0, [r4, #16]
 800e986:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e98a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e98e:	f000 fdf3 	bl	800f578 <run_xrce_session>
 800e992:	2800      	cmp	r0, #0
 800e994:	4628      	mov	r0, r5
 800e996:	bf14      	ite	ne
 800e998:	2400      	movne	r4, #0
 800e99a:	2402      	moveq	r4, #2
 800e99c:	f000 fcc8 	bl	800f330 <rmw_uxrce_fini_service_memory>
 800e9a0:	e7c5      	b.n	800e92e <rmw_destroy_service+0x12>
 800e9a2:	bf00      	nop

0800e9a4 <rmw_create_subscription>:
 800e9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a8:	b08d      	sub	sp, #52	@ 0x34
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	f000 80cb 	beq.w	800eb46 <rmw_create_subscription+0x1a2>
 800e9b0:	460e      	mov	r6, r1
 800e9b2:	2900      	cmp	r1, #0
 800e9b4:	f000 80c7 	beq.w	800eb46 <rmw_create_subscription+0x1a2>
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	6800      	ldr	r0, [r0, #0]
 800e9bc:	4615      	mov	r5, r2
 800e9be:	4698      	mov	r8, r3
 800e9c0:	f000 fe5a 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	f000 80be 	beq.w	800eb46 <rmw_create_subscription+0x1a2>
 800e9ca:	2d00      	cmp	r5, #0
 800e9cc:	f000 80bb 	beq.w	800eb46 <rmw_create_subscription+0x1a2>
 800e9d0:	782b      	ldrb	r3, [r5, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 80b7 	beq.w	800eb46 <rmw_create_subscription+0x1a2>
 800e9d8:	f1b8 0f00 	cmp.w	r8, #0
 800e9dc:	f000 80b3 	beq.w	800eb46 <rmw_create_subscription+0x1a2>
 800e9e0:	485b      	ldr	r0, [pc, #364]	@ (800eb50 <rmw_create_subscription+0x1ac>)
 800e9e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9e6:	f004 fa41 	bl	8012e6c <get_memory>
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f000 80ab 	beq.w	800eb48 <rmw_create_subscription+0x1a4>
 800e9f2:	68c7      	ldr	r7, [r0, #12]
 800e9f4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e9f8:	f7ff fada 	bl	800dfb0 <rmw_get_implementation_identifier>
 800e9fc:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 800ea00:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ea02:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ea06:	4628      	mov	r0, r5
 800ea08:	f7f1 fbf4 	bl	80001f4 <strlen>
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	283c      	cmp	r0, #60	@ 0x3c
 800ea10:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800ea14:	f200 8090 	bhi.w	800eb38 <rmw_create_subscription+0x194>
 800ea18:	4a4e      	ldr	r2, [pc, #312]	@ (800eb54 <rmw_create_subscription+0x1b0>)
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	213c      	movs	r1, #60	@ 0x3c
 800ea1e:	4650      	mov	r0, sl
 800ea20:	f005 fcbc 	bl	801439c <sniprintf>
 800ea24:	4641      	mov	r1, r8
 800ea26:	f8c7 9020 	str.w	r9, [r7, #32]
 800ea2a:	2250      	movs	r2, #80	@ 0x50
 800ea2c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800ea30:	f005 fe47 	bl	80146c2 <memcpy>
 800ea34:	4948      	ldr	r1, [pc, #288]	@ (800eb58 <rmw_create_subscription+0x1b4>)
 800ea36:	4630      	mov	r0, r6
 800ea38:	f000 fe2c 	bl	800f694 <get_message_typesupport_handle>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d07b      	beq.n	800eb38 <rmw_create_subscription+0x194>
 800ea40:	6842      	ldr	r2, [r0, #4]
 800ea42:	61ba      	str	r2, [r7, #24]
 800ea44:	2a00      	cmp	r2, #0
 800ea46:	d077      	beq.n	800eb38 <rmw_create_subscription+0x194>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	4643      	mov	r3, r8
 800ea4c:	4648      	mov	r0, r9
 800ea4e:	f004 fa59 	bl	8012f04 <create_topic>
 800ea52:	61f8      	str	r0, [r7, #28]
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d073      	beq.n	800eb40 <rmw_create_subscription+0x19c>
 800ea58:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ea5c:	f241 539c 	movw	r3, #5532	@ 0x159c
 800ea60:	2104      	movs	r1, #4
 800ea62:	5ad0      	ldrh	r0, [r2, r3]
 800ea64:	1c45      	adds	r5, r0, #1
 800ea66:	52d5      	strh	r5, [r2, r3]
 800ea68:	f001 f83c 	bl	800fae4 <uxr_object_id>
 800ea6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea70:	6138      	str	r0, [r7, #16]
 800ea72:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800ea76:	2606      	movs	r6, #6
 800ea78:	9600      	str	r6, [sp, #0]
 800ea7a:	6811      	ldr	r1, [r2, #0]
 800ea7c:	693a      	ldr	r2, [r7, #16]
 800ea7e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ea82:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ea86:	f000 fec3 	bl	800f810 <uxr_buffer_create_subscriber_bin>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea90:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ea94:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ea98:	f000 fd6e 	bl	800f578 <run_xrce_session>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d04b      	beq.n	800eb38 <rmw_create_subscription+0x194>
 800eaa0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800eaa4:	f241 539e 	movw	r3, #5534	@ 0x159e
 800eaa8:	4631      	mov	r1, r6
 800eaaa:	5ad0      	ldrh	r0, [r2, r3]
 800eaac:	1c45      	adds	r5, r0, #1
 800eaae:	52d5      	strh	r5, [r2, r3]
 800eab0:	f001 f818 	bl	800fae4 <uxr_object_id>
 800eab4:	ad08      	add	r5, sp, #32
 800eab6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	6178      	str	r0, [r7, #20]
 800eabe:	4641      	mov	r1, r8
 800eac0:	4628      	mov	r0, r5
 800eac2:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	f000 fd72 	bl	800f5b0 <convert_qos_profile>
 800eacc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ead0:	9b05      	ldr	r3, [sp, #20]
 800ead2:	9001      	str	r0, [sp, #4]
 800ead4:	9603      	str	r6, [sp, #12]
 800ead6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800eae2:	f8db 1000 	ldr.w	r1, [fp]
 800eae6:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800eaea:	f000 fec1 	bl	800f870 <uxr_buffer_create_datareader_bin>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eaf4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eaf8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eafc:	f000 fd3c 	bl	800f578 <run_xrce_session>
 800eb00:	b1d0      	cbz	r0, 800eb38 <rmw_create_subscription+0x194>
 800eb02:	f898 3008 	ldrb.w	r3, [r8, #8]
 800eb06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eb0a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eb0e:	2200      	movs	r2, #0
 800eb10:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb1a:	bf0c      	ite	eq
 800eb1c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800eb20:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800eb24:	9307      	str	r3, [sp, #28]
 800eb26:	aa0a      	add	r2, sp, #40	@ 0x28
 800eb28:	9200      	str	r2, [sp, #0]
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	6809      	ldr	r1, [r1, #0]
 800eb2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb32:	f001 f805 	bl	800fb40 <uxr_buffer_request_data>
 800eb36:	e007      	b.n	800eb48 <rmw_create_subscription+0x1a4>
 800eb38:	69f8      	ldr	r0, [r7, #28]
 800eb3a:	b108      	cbz	r0, 800eb40 <rmw_create_subscription+0x19c>
 800eb3c:	f000 fc24 	bl	800f388 <rmw_uxrce_fini_topic_memory>
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 fbdf 	bl	800f304 <rmw_uxrce_fini_subscription_memory>
 800eb46:	2400      	movs	r4, #0
 800eb48:	4620      	mov	r0, r4
 800eb4a:	b00d      	add	sp, #52	@ 0x34
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	2000c6c4 	.word	0x2000c6c4
 800eb54:	08015bb4 	.word	0x08015bb4
 800eb58:	08015638 	.word	0x08015638

0800eb5c <rmw_subscription_get_actual_qos>:
 800eb5c:	b150      	cbz	r0, 800eb74 <rmw_subscription_get_actual_qos+0x18>
 800eb5e:	b149      	cbz	r1, 800eb74 <rmw_subscription_get_actual_qos+0x18>
 800eb60:	b508      	push	{r3, lr}
 800eb62:	6843      	ldr	r3, [r0, #4]
 800eb64:	2250      	movs	r2, #80	@ 0x50
 800eb66:	4608      	mov	r0, r1
 800eb68:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800eb6c:	f005 fda9 	bl	80146c2 <memcpy>
 800eb70:	2000      	movs	r0, #0
 800eb72:	bd08      	pop	{r3, pc}
 800eb74:	200b      	movs	r0, #11
 800eb76:	4770      	bx	lr

0800eb78 <rmw_destroy_subscription>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	b128      	cbz	r0, 800eb88 <rmw_destroy_subscription+0x10>
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	6800      	ldr	r0, [r0, #0]
 800eb80:	460d      	mov	r5, r1
 800eb82:	f000 fd79 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800eb86:	b910      	cbnz	r0, 800eb8e <rmw_destroy_subscription+0x16>
 800eb88:	2401      	movs	r4, #1
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb8e:	6863      	ldr	r3, [r4, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0f9      	beq.n	800eb88 <rmw_destroy_subscription+0x10>
 800eb94:	2d00      	cmp	r5, #0
 800eb96:	d0f7      	beq.n	800eb88 <rmw_destroy_subscription+0x10>
 800eb98:	6828      	ldr	r0, [r5, #0]
 800eb9a:	f000 fd6d 	bl	800f678 <is_uxrce_rmw_identifier_valid>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d0f2      	beq.n	800eb88 <rmw_destroy_subscription+0x10>
 800eba2:	686c      	ldr	r4, [r5, #4]
 800eba4:	2c00      	cmp	r4, #0
 800eba6:	d0ef      	beq.n	800eb88 <rmw_destroy_subscription+0x10>
 800eba8:	6a26      	ldr	r6, [r4, #32]
 800ebaa:	6962      	ldr	r2, [r4, #20]
 800ebac:	6930      	ldr	r0, [r6, #16]
 800ebae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebb6:	6819      	ldr	r1, [r3, #0]
 800ebb8:	f000 fffc 	bl	800fbb4 <uxr_buffer_cancel_data>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	6930      	ldr	r0, [r6, #16]
 800ebc0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ebc4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebc8:	f000 fcd6 	bl	800f578 <run_xrce_session>
 800ebcc:	69e0      	ldr	r0, [r4, #28]
 800ebce:	f004 f9e9 	bl	8012fa4 <destroy_topic>
 800ebd2:	6a23      	ldr	r3, [r4, #32]
 800ebd4:	6962      	ldr	r2, [r4, #20]
 800ebd6:	6918      	ldr	r0, [r3, #16]
 800ebd8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebe0:	6819      	ldr	r1, [r3, #0]
 800ebe2:	f000 fd63 	bl	800f6ac <uxr_buffer_delete_entity>
 800ebe6:	6a21      	ldr	r1, [r4, #32]
 800ebe8:	6922      	ldr	r2, [r4, #16]
 800ebea:	4603      	mov	r3, r0
 800ebec:	6908      	ldr	r0, [r1, #16]
 800ebee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebf6:	6809      	ldr	r1, [r1, #0]
 800ebf8:	461c      	mov	r4, r3
 800ebfa:	f000 fd57 	bl	800f6ac <uxr_buffer_delete_entity>
 800ebfe:	4607      	mov	r7, r0
 800ec00:	6930      	ldr	r0, [r6, #16]
 800ec02:	4622      	mov	r2, r4
 800ec04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec0c:	f000 fcb4 	bl	800f578 <run_xrce_session>
 800ec10:	4604      	mov	r4, r0
 800ec12:	6930      	ldr	r0, [r6, #16]
 800ec14:	463a      	mov	r2, r7
 800ec16:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec1a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec1e:	f000 fcab 	bl	800f578 <run_xrce_session>
 800ec22:	b12c      	cbz	r4, 800ec30 <rmw_destroy_subscription+0xb8>
 800ec24:	b120      	cbz	r0, 800ec30 <rmw_destroy_subscription+0xb8>
 800ec26:	2400      	movs	r4, #0
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f000 fb6b 	bl	800f304 <rmw_uxrce_fini_subscription_memory>
 800ec2e:	e7ac      	b.n	800eb8a <rmw_destroy_subscription+0x12>
 800ec30:	2402      	movs	r4, #2
 800ec32:	e7f9      	b.n	800ec28 <rmw_destroy_subscription+0xb0>

0800ec34 <rmw_take_with_info>:
 800ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec36:	4604      	mov	r4, r0
 800ec38:	6800      	ldr	r0, [r0, #0]
 800ec3a:	b089      	sub	sp, #36	@ 0x24
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	4615      	mov	r5, r2
 800ec40:	b128      	cbz	r0, 800ec4e <rmw_take_with_info+0x1a>
 800ec42:	4b24      	ldr	r3, [pc, #144]	@ (800ecd4 <rmw_take_with_info+0xa0>)
 800ec44:	6819      	ldr	r1, [r3, #0]
 800ec46:	f7f1 facb 	bl	80001e0 <strcmp>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d13e      	bne.n	800eccc <rmw_take_with_info+0x98>
 800ec4e:	b305      	cbz	r5, 800ec92 <rmw_take_with_info+0x5e>
 800ec50:	6864      	ldr	r4, [r4, #4]
 800ec52:	2300      	movs	r3, #0
 800ec54:	702b      	strb	r3, [r5, #0]
 800ec56:	f000 fc17 	bl	800f488 <rmw_uxrce_clean_expired_static_input_buffer>
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f000 fbec 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ec60:	4606      	mov	r6, r0
 800ec62:	b1f0      	cbz	r0, 800eca2 <rmw_take_with_info+0x6e>
 800ec64:	68c1      	ldr	r1, [r0, #12]
 800ec66:	4668      	mov	r0, sp
 800ec68:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800ec6c:	3110      	adds	r1, #16
 800ec6e:	f7fc fa23 	bl	800b0b8 <ucdr_init_buffer>
 800ec72:	69a3      	ldr	r3, [r4, #24]
 800ec74:	4639      	mov	r1, r7
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	4668      	mov	r0, sp
 800ec7a:	4798      	blx	r3
 800ec7c:	4631      	mov	r1, r6
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4815      	ldr	r0, [pc, #84]	@ (800ecd8 <rmw_take_with_info+0xa4>)
 800ec82:	f004 f903 	bl	8012e8c <put_memory>
 800ec86:	702c      	strb	r4, [r5, #0]
 800ec88:	f084 0001 	eor.w	r0, r4, #1
 800ec8c:	b2c0      	uxtb	r0, r0
 800ec8e:	b009      	add	sp, #36	@ 0x24
 800ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec92:	6864      	ldr	r4, [r4, #4]
 800ec94:	f000 fbf8 	bl	800f488 <rmw_uxrce_clean_expired_static_input_buffer>
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f000 fbcd 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ec9e:	4605      	mov	r5, r0
 800eca0:	b910      	cbnz	r0, 800eca8 <rmw_take_with_info+0x74>
 800eca2:	2001      	movs	r0, #1
 800eca4:	b009      	add	sp, #36	@ 0x24
 800eca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eca8:	68e9      	ldr	r1, [r5, #12]
 800ecaa:	4668      	mov	r0, sp
 800ecac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800ecb0:	3110      	adds	r1, #16
 800ecb2:	f7fc fa01 	bl	800b0b8 <ucdr_init_buffer>
 800ecb6:	69a3      	ldr	r3, [r4, #24]
 800ecb8:	4639      	mov	r1, r7
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	4668      	mov	r0, sp
 800ecbe:	4798      	blx	r3
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	4804      	ldr	r0, [pc, #16]	@ (800ecd8 <rmw_take_with_info+0xa4>)
 800ecc6:	f004 f8e1 	bl	8012e8c <put_memory>
 800ecca:	e7dd      	b.n	800ec88 <rmw_take_with_info+0x54>
 800eccc:	200c      	movs	r0, #12
 800ecce:	b009      	add	sp, #36	@ 0x24
 800ecd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	08015df4 	.word	0x08015df4
 800ecd8:	20009458 	.word	0x20009458

0800ecdc <rmw_uxrce_transport_init>:
 800ecdc:	b508      	push	{r3, lr}
 800ecde:	b108      	cbz	r0, 800ece4 <rmw_uxrce_transport_init+0x8>
 800ece0:	f100 0210 	add.w	r2, r0, #16
 800ece4:	b139      	cbz	r1, 800ecf6 <rmw_uxrce_transport_init+0x1a>
 800ece6:	6949      	ldr	r1, [r1, #20]
 800ece8:	4610      	mov	r0, r2
 800ecea:	f000 fec3 	bl	800fa74 <uxr_init_custom_transport>
 800ecee:	f080 0001 	eor.w	r0, r0, #1
 800ecf2:	b2c0      	uxtb	r0, r0
 800ecf4:	bd08      	pop	{r3, pc}
 800ecf6:	4b04      	ldr	r3, [pc, #16]	@ (800ed08 <rmw_uxrce_transport_init+0x2c>)
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	6859      	ldr	r1, [r3, #4]
 800ecfc:	f000 feba 	bl	800fa74 <uxr_init_custom_transport>
 800ed00:	f080 0001 	eor.w	r0, r0, #1
 800ed04:	b2c0      	uxtb	r0, r0
 800ed06:	bd08      	pop	{r3, pc}
 800ed08:	20009438 	.word	0x20009438

0800ed0c <rmw_wait>:
 800ed0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed10:	460f      	mov	r7, r1
 800ed12:	4606      	mov	r6, r0
 800ed14:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ed16:	469a      	mov	sl, r3
 800ed18:	4615      	mov	r5, r2
 800ed1a:	2a00      	cmp	r2, #0
 800ed1c:	f000 8122 	beq.w	800ef64 <rmw_wait+0x258>
 800ed20:	2900      	cmp	r1, #0
 800ed22:	f000 812a 	beq.w	800ef7a <rmw_wait+0x26e>
 800ed26:	e9d1 2300 	ldrd	r2, r3, [r1]
 800ed2a:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 800ed2e:	015c      	lsls	r4, r3, #5
 800ed30:	ebbb 0b02 	subs.w	fp, fp, r2
 800ed34:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 800ed38:	eb64 0403 	sbc.w	r4, r4, r3
 800ed3c:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800ed40:	00a4      	lsls	r4, r4, #2
 800ed42:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 800ed46:	eb10 0b02 	adds.w	fp, r0, r2
 800ed4a:	eb43 0404 	adc.w	r4, r3, r4
 800ed4e:	4aad      	ldr	r2, [pc, #692]	@ (800f004 <rmw_wait+0x2f8>)
 800ed50:	2300      	movs	r3, #0
 800ed52:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800ed56:	f7f1 fcd7 	bl	8000708 <__aeabi_uldivmod>
 800ed5a:	00e4      	lsls	r4, r4, #3
 800ed5c:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 800ed60:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ed64:	eb1b 0800 	adds.w	r8, fp, r0
 800ed68:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ed6c:	eb44 0901 	adc.w	r9, r4, r1
 800ed70:	2300      	movs	r3, #0
 800ed72:	4542      	cmp	r2, r8
 800ed74:	eb73 0109 	sbcs.w	r1, r3, r9
 800ed78:	f2c0 80f2 	blt.w	800ef60 <rmw_wait+0x254>
 800ed7c:	f000 fb84 	bl	800f488 <rmw_uxrce_clean_expired_static_input_buffer>
 800ed80:	4ba1      	ldr	r3, [pc, #644]	@ (800f008 <rmw_wait+0x2fc>)
 800ed82:	681c      	ldr	r4, [r3, #0]
 800ed84:	b144      	cbz	r4, 800ed98 <rmw_wait+0x8c>
 800ed86:	4623      	mov	r3, r4
 800ed88:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ed92:	5411      	strb	r1, [r2, r0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1fa      	bne.n	800ed8e <rmw_wait+0x82>
 800ed98:	b185      	cbz	r5, 800edbc <rmw_wait+0xb0>
 800ed9a:	6829      	ldr	r1, [r5, #0]
 800ed9c:	b171      	cbz	r1, 800edbc <rmw_wait+0xb0>
 800ed9e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800eda2:	2300      	movs	r3, #0
 800eda4:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 800eda8:	2001      	movs	r0, #1
 800edaa:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800edae:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800edb0:	3301      	adds	r3, #1
 800edb2:	6912      	ldr	r2, [r2, #16]
 800edb4:	4299      	cmp	r1, r3
 800edb6:	f802 000c 	strb.w	r0, [r2, ip]
 800edba:	d1f6      	bne.n	800edaa <rmw_wait+0x9e>
 800edbc:	f1ba 0f00 	cmp.w	sl, #0
 800edc0:	d011      	beq.n	800ede6 <rmw_wait+0xda>
 800edc2:	f8da 1000 	ldr.w	r1, [sl]
 800edc6:	b171      	cbz	r1, 800ede6 <rmw_wait+0xda>
 800edc8:	f8da e004 	ldr.w	lr, [sl, #4]
 800edcc:	2300      	movs	r3, #0
 800edce:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 800edd2:	2001      	movs	r0, #1
 800edd4:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800edd8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800edda:	3301      	adds	r3, #1
 800eddc:	6912      	ldr	r2, [r2, #16]
 800edde:	4299      	cmp	r1, r3
 800ede0:	f802 000c 	strb.w	r0, [r2, ip]
 800ede4:	d1f6      	bne.n	800edd4 <rmw_wait+0xc8>
 800ede6:	b186      	cbz	r6, 800ee0a <rmw_wait+0xfe>
 800ede8:	6831      	ldr	r1, [r6, #0]
 800edea:	b171      	cbz	r1, 800ee0a <rmw_wait+0xfe>
 800edec:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800edf0:	2300      	movs	r3, #0
 800edf2:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 800edf6:	2001      	movs	r0, #1
 800edf8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800edfc:	6a12      	ldr	r2, [r2, #32]
 800edfe:	3301      	adds	r3, #1
 800ee00:	6912      	ldr	r2, [r2, #16]
 800ee02:	4299      	cmp	r1, r3
 800ee04:	f802 000c 	strb.w	r0, [r2, ip]
 800ee08:	d1f6      	bne.n	800edf8 <rmw_wait+0xec>
 800ee0a:	b34c      	cbz	r4, 800ee60 <rmw_wait+0x154>
 800ee0c:	4622      	mov	r2, r4
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 800ee14:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 800ee18:	5c09      	ldrb	r1, [r1, r0]
 800ee1a:	440b      	add	r3, r1
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	d1f8      	bne.n	800ee14 <rmw_wait+0x108>
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 8082 	beq.w	800ef2c <rmw_wait+0x220>
 800ee28:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800ee2c:	d00d      	beq.n	800ee4a <rmw_wait+0x13e>
 800ee2e:	ee07 8a90 	vmov	s15, r8
 800ee32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ee36:	ee07 3a90 	vmov	s15, r3
 800ee3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee42:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ee46:	ee17 8a90 	vmov	r8, s15
 800ee4a:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 800ee4e:	68e0      	ldr	r0, [r4, #12]
 800ee50:	f810 3009 	ldrb.w	r3, [r0, r9]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f040 8093 	bne.w	800ef80 <rmw_wait+0x274>
 800ee5a:	68a4      	ldr	r4, [r4, #8]
 800ee5c:	2c00      	cmp	r4, #0
 800ee5e:	d1f6      	bne.n	800ee4e <rmw_wait+0x142>
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	f000 80ac 	beq.w	800efbe <rmw_wait+0x2b2>
 800ee66:	682b      	ldr	r3, [r5, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f000 8093 	beq.w	800ef94 <rmw_wait+0x288>
 800ee6e:	2400      	movs	r4, #0
 800ee70:	46a0      	mov	r8, r4
 800ee72:	686b      	ldr	r3, [r5, #4]
 800ee74:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ee78:	f000 fade 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d05f      	beq.n	800ef40 <rmw_wait+0x234>
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	3401      	adds	r4, #1
 800ee84:	42a3      	cmp	r3, r4
 800ee86:	f04f 0801 	mov.w	r8, #1
 800ee8a:	d8f2      	bhi.n	800ee72 <rmw_wait+0x166>
 800ee8c:	f1ba 0f00 	cmp.w	sl, #0
 800ee90:	d012      	beq.n	800eeb8 <rmw_wait+0x1ac>
 800ee92:	f8da 3000 	ldr.w	r3, [sl]
 800ee96:	b17b      	cbz	r3, 800eeb8 <rmw_wait+0x1ac>
 800ee98:	2400      	movs	r4, #0
 800ee9a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ee9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eea2:	f000 fac9 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d052      	beq.n	800ef50 <rmw_wait+0x244>
 800eeaa:	f8da 3000 	ldr.w	r3, [sl]
 800eeae:	3401      	adds	r4, #1
 800eeb0:	42a3      	cmp	r3, r4
 800eeb2:	f04f 0801 	mov.w	r8, #1
 800eeb6:	d8f0      	bhi.n	800ee9a <rmw_wait+0x18e>
 800eeb8:	b1e6      	cbz	r6, 800eef4 <rmw_wait+0x1e8>
 800eeba:	6833      	ldr	r3, [r6, #0]
 800eebc:	b1d3      	cbz	r3, 800eef4 <rmw_wait+0x1e8>
 800eebe:	2400      	movs	r4, #0
 800eec0:	6873      	ldr	r3, [r6, #4]
 800eec2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eec6:	f000 fab7 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800eeca:	b160      	cbz	r0, 800eee6 <rmw_wait+0x1da>
 800eecc:	6833      	ldr	r3, [r6, #0]
 800eece:	3401      	adds	r4, #1
 800eed0:	42a3      	cmp	r3, r4
 800eed2:	d96c      	bls.n	800efae <rmw_wait+0x2a2>
 800eed4:	6873      	ldr	r3, [r6, #4]
 800eed6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eeda:	f04f 0801 	mov.w	r8, #1
 800eede:	f000 faab 	bl	800f438 <rmw_uxrce_find_static_input_buffer_by_owner>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d1f2      	bne.n	800eecc <rmw_wait+0x1c0>
 800eee6:	e9d6 3200 	ldrd	r3, r2, [r6]
 800eeea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800eeee:	3401      	adds	r4, #1
 800eef0:	42a3      	cmp	r3, r4
 800eef2:	d8e5      	bhi.n	800eec0 <rmw_wait+0x1b4>
 800eef4:	b1a7      	cbz	r7, 800ef20 <rmw_wait+0x214>
 800eef6:	683c      	ldr	r4, [r7, #0]
 800eef8:	b194      	cbz	r4, 800ef20 <rmw_wait+0x214>
 800eefa:	2300      	movs	r3, #0
 800eefc:	461d      	mov	r5, r3
 800eefe:	e004      	b.n	800ef0a <rmw_wait+0x1fe>
 800ef00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800ef04:	3301      	adds	r3, #1
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	d00a      	beq.n	800ef20 <rmw_wait+0x214>
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800ef10:	7c0a      	ldrb	r2, [r1, #16]
 800ef12:	2a00      	cmp	r2, #0
 800ef14:	d0f4      	beq.n	800ef00 <rmw_wait+0x1f4>
 800ef16:	3301      	adds	r3, #1
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	740d      	strb	r5, [r1, #16]
 800ef1c:	4690      	mov	r8, r2
 800ef1e:	d1f4      	bne.n	800ef0a <rmw_wait+0x1fe>
 800ef20:	f1b8 0f00 	cmp.w	r8, #0
 800ef24:	d040      	beq.n	800efa8 <rmw_wait+0x29c>
 800ef26:	2000      	movs	r0, #0
 800ef28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	68e0      	ldr	r0, [r4, #12]
 800ef2e:	2100      	movs	r1, #0
 800ef30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef34:	f001 fbca 	bl	80106cc <uxr_run_session_timeout>
 800ef38:	68a4      	ldr	r4, [r4, #8]
 800ef3a:	2c00      	cmp	r4, #0
 800ef3c:	d1f6      	bne.n	800ef2c <rmw_wait+0x220>
 800ef3e:	e78f      	b.n	800ee60 <rmw_wait+0x154>
 800ef40:	e9d5 3200 	ldrd	r3, r2, [r5]
 800ef44:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ef48:	3401      	adds	r4, #1
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	d891      	bhi.n	800ee72 <rmw_wait+0x166>
 800ef4e:	e79d      	b.n	800ee8c <rmw_wait+0x180>
 800ef50:	e9da 3200 	ldrd	r3, r2, [sl]
 800ef54:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800ef58:	3401      	adds	r4, #1
 800ef5a:	429c      	cmp	r4, r3
 800ef5c:	d39d      	bcc.n	800ee9a <rmw_wait+0x18e>
 800ef5e:	e7ab      	b.n	800eeb8 <rmw_wait+0x1ac>
 800ef60:	4690      	mov	r8, r2
 800ef62:	e70b      	b.n	800ed7c <rmw_wait+0x70>
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f47f aedb 	bne.w	800ed20 <rmw_wait+0x14>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	f47f aed8 	bne.w	800ed20 <rmw_wait+0x14>
 800ef70:	2f00      	cmp	r7, #0
 800ef72:	d0d8      	beq.n	800ef26 <rmw_wait+0x21a>
 800ef74:	2900      	cmp	r1, #0
 800ef76:	f47f aed6 	bne.w	800ed26 <rmw_wait+0x1a>
 800ef7a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ef7e:	e6fd      	b.n	800ed7c <rmw_wait+0x70>
 800ef80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef84:	4641      	mov	r1, r8
 800ef86:	f001 fbbb 	bl	8010700 <uxr_run_session_until_data>
 800ef8a:	68a4      	ldr	r4, [r4, #8]
 800ef8c:	2c00      	cmp	r4, #0
 800ef8e:	f47f af5e 	bne.w	800ee4e <rmw_wait+0x142>
 800ef92:	e765      	b.n	800ee60 <rmw_wait+0x154>
 800ef94:	f1ba 0f00 	cmp.w	sl, #0
 800ef98:	d11e      	bne.n	800efd8 <rmw_wait+0x2cc>
 800ef9a:	b35e      	cbz	r6, 800eff4 <rmw_wait+0x2e8>
 800ef9c:	6833      	ldr	r3, [r6, #0]
 800ef9e:	46d0      	mov	r8, sl
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d18c      	bne.n	800eebe <rmw_wait+0x1b2>
 800efa4:	2f00      	cmp	r7, #0
 800efa6:	d1a6      	bne.n	800eef6 <rmw_wait+0x1ea>
 800efa8:	2002      	movs	r0, #2
 800efaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efae:	2f00      	cmp	r7, #0
 800efb0:	d0b9      	beq.n	800ef26 <rmw_wait+0x21a>
 800efb2:	683c      	ldr	r4, [r7, #0]
 800efb4:	f04f 0801 	mov.w	r8, #1
 800efb8:	2c00      	cmp	r4, #0
 800efba:	d19e      	bne.n	800eefa <rmw_wait+0x1ee>
 800efbc:	e7b3      	b.n	800ef26 <rmw_wait+0x21a>
 800efbe:	f1ba 0f00 	cmp.w	sl, #0
 800efc2:	d0ea      	beq.n	800ef9a <rmw_wait+0x28e>
 800efc4:	f8da 3000 	ldr.w	r3, [sl]
 800efc8:	46a8      	mov	r8, r5
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f47f af64 	bne.w	800ee98 <rmw_wait+0x18c>
 800efd0:	2e00      	cmp	r6, #0
 800efd2:	f47f af72 	bne.w	800eeba <rmw_wait+0x1ae>
 800efd6:	e009      	b.n	800efec <rmw_wait+0x2e0>
 800efd8:	f8da 2000 	ldr.w	r2, [sl]
 800efdc:	4698      	mov	r8, r3
 800efde:	2a00      	cmp	r2, #0
 800efe0:	f47f af5a 	bne.w	800ee98 <rmw_wait+0x18c>
 800efe4:	4690      	mov	r8, r2
 800efe6:	2e00      	cmp	r6, #0
 800efe8:	f47f af67 	bne.w	800eeba <rmw_wait+0x1ae>
 800efec:	46b0      	mov	r8, r6
 800efee:	2f00      	cmp	r7, #0
 800eff0:	d181      	bne.n	800eef6 <rmw_wait+0x1ea>
 800eff2:	e7d9      	b.n	800efa8 <rmw_wait+0x29c>
 800eff4:	2f00      	cmp	r7, #0
 800eff6:	d0d7      	beq.n	800efa8 <rmw_wait+0x29c>
 800eff8:	683c      	ldr	r4, [r7, #0]
 800effa:	46b0      	mov	r8, r6
 800effc:	2c00      	cmp	r4, #0
 800effe:	f47f af7c 	bne.w	800eefa <rmw_wait+0x1ee>
 800f002:	e7d1      	b.n	800efa8 <rmw_wait+0x29c>
 800f004:	000f4240 	.word	0x000f4240
 800f008:	2000c600 	.word	0x2000c600

0800f00c <rmw_create_wait_set>:
 800f00c:	b508      	push	{r3, lr}
 800f00e:	4803      	ldr	r0, [pc, #12]	@ (800f01c <rmw_create_wait_set+0x10>)
 800f010:	f003 ff2c 	bl	8012e6c <get_memory>
 800f014:	b108      	cbz	r0, 800f01a <rmw_create_wait_set+0xe>
 800f016:	68c0      	ldr	r0, [r0, #12]
 800f018:	3010      	adds	r0, #16
 800f01a:	bd08      	pop	{r3, pc}
 800f01c:	2000ddd8 	.word	0x2000ddd8

0800f020 <rmw_destroy_wait_set>:
 800f020:	b508      	push	{r3, lr}
 800f022:	4b08      	ldr	r3, [pc, #32]	@ (800f044 <rmw_destroy_wait_set+0x24>)
 800f024:	6819      	ldr	r1, [r3, #0]
 800f026:	b911      	cbnz	r1, 800f02e <rmw_destroy_wait_set+0xe>
 800f028:	e00a      	b.n	800f040 <rmw_destroy_wait_set+0x20>
 800f02a:	6889      	ldr	r1, [r1, #8]
 800f02c:	b141      	cbz	r1, 800f040 <rmw_destroy_wait_set+0x20>
 800f02e:	68cb      	ldr	r3, [r1, #12]
 800f030:	3310      	adds	r3, #16
 800f032:	4298      	cmp	r0, r3
 800f034:	d1f9      	bne.n	800f02a <rmw_destroy_wait_set+0xa>
 800f036:	4803      	ldr	r0, [pc, #12]	@ (800f044 <rmw_destroy_wait_set+0x24>)
 800f038:	f003 ff28 	bl	8012e8c <put_memory>
 800f03c:	2000      	movs	r0, #0
 800f03e:	bd08      	pop	{r3, pc}
 800f040:	2001      	movs	r0, #1
 800f042:	bd08      	pop	{r3, pc}
 800f044:	2000ddd8 	.word	0x2000ddd8

0800f048 <rmw_uxrce_init_service_memory>:
 800f048:	b1b2      	cbz	r2, 800f078 <rmw_uxrce_init_service_memory+0x30>
 800f04a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04c:	7a07      	ldrb	r7, [r0, #8]
 800f04e:	4605      	mov	r5, r0
 800f050:	b98f      	cbnz	r7, 800f076 <rmw_uxrce_init_service_memory+0x2e>
 800f052:	e9c0 7700 	strd	r7, r7, [r0]
 800f056:	460c      	mov	r4, r1
 800f058:	23c8      	movs	r3, #200	@ 0xc8
 800f05a:	2101      	movs	r1, #1
 800f05c:	fb03 4602 	mla	r6, r3, r2, r4
 800f060:	60c3      	str	r3, [r0, #12]
 800f062:	7201      	strb	r1, [r0, #8]
 800f064:	4621      	mov	r1, r4
 800f066:	4628      	mov	r0, r5
 800f068:	f003 ff10 	bl	8012e8c <put_memory>
 800f06c:	60e4      	str	r4, [r4, #12]
 800f06e:	f804 7bc8 	strb.w	r7, [r4], #200
 800f072:	42a6      	cmp	r6, r4
 800f074:	d1f6      	bne.n	800f064 <rmw_uxrce_init_service_memory+0x1c>
 800f076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop

0800f07c <rmw_uxrce_init_client_memory>:
 800f07c:	b1b2      	cbz	r2, 800f0ac <rmw_uxrce_init_client_memory+0x30>
 800f07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f080:	7a07      	ldrb	r7, [r0, #8]
 800f082:	4605      	mov	r5, r0
 800f084:	b98f      	cbnz	r7, 800f0aa <rmw_uxrce_init_client_memory+0x2e>
 800f086:	e9c0 7700 	strd	r7, r7, [r0]
 800f08a:	460c      	mov	r4, r1
 800f08c:	23c8      	movs	r3, #200	@ 0xc8
 800f08e:	2101      	movs	r1, #1
 800f090:	fb03 4602 	mla	r6, r3, r2, r4
 800f094:	60c3      	str	r3, [r0, #12]
 800f096:	7201      	strb	r1, [r0, #8]
 800f098:	4621      	mov	r1, r4
 800f09a:	4628      	mov	r0, r5
 800f09c:	f003 fef6 	bl	8012e8c <put_memory>
 800f0a0:	60e4      	str	r4, [r4, #12]
 800f0a2:	f804 7bc8 	strb.w	r7, [r4], #200
 800f0a6:	42a6      	cmp	r6, r4
 800f0a8:	d1f6      	bne.n	800f098 <rmw_uxrce_init_client_memory+0x1c>
 800f0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop

0800f0b0 <rmw_uxrce_init_publisher_memory>:
 800f0b0:	b1b2      	cbz	r2, 800f0e0 <rmw_uxrce_init_publisher_memory+0x30>
 800f0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b4:	7a07      	ldrb	r7, [r0, #8]
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	b98f      	cbnz	r7, 800f0de <rmw_uxrce_init_publisher_memory+0x2e>
 800f0ba:	e9c0 7700 	strd	r7, r7, [r0]
 800f0be:	460c      	mov	r4, r1
 800f0c0:	23d8      	movs	r3, #216	@ 0xd8
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	fb03 4602 	mla	r6, r3, r2, r4
 800f0c8:	60c3      	str	r3, [r0, #12]
 800f0ca:	7201      	strb	r1, [r0, #8]
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f003 fedc 	bl	8012e8c <put_memory>
 800f0d4:	60e4      	str	r4, [r4, #12]
 800f0d6:	f804 7bd8 	strb.w	r7, [r4], #216
 800f0da:	42a6      	cmp	r6, r4
 800f0dc:	d1f6      	bne.n	800f0cc <rmw_uxrce_init_publisher_memory+0x1c>
 800f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop

0800f0e4 <rmw_uxrce_init_subscription_memory>:
 800f0e4:	b1b2      	cbz	r2, 800f114 <rmw_uxrce_init_subscription_memory+0x30>
 800f0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e8:	7a07      	ldrb	r7, [r0, #8]
 800f0ea:	4605      	mov	r5, r0
 800f0ec:	b98f      	cbnz	r7, 800f112 <rmw_uxrce_init_subscription_memory+0x2e>
 800f0ee:	e9c0 7700 	strd	r7, r7, [r0]
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	23d0      	movs	r3, #208	@ 0xd0
 800f0f6:	2101      	movs	r1, #1
 800f0f8:	fb03 4602 	mla	r6, r3, r2, r4
 800f0fc:	60c3      	str	r3, [r0, #12]
 800f0fe:	7201      	strb	r1, [r0, #8]
 800f100:	4621      	mov	r1, r4
 800f102:	4628      	mov	r0, r5
 800f104:	f003 fec2 	bl	8012e8c <put_memory>
 800f108:	60e4      	str	r4, [r4, #12]
 800f10a:	f804 7bd0 	strb.w	r7, [r4], #208
 800f10e:	42a6      	cmp	r6, r4
 800f110:	d1f6      	bne.n	800f100 <rmw_uxrce_init_subscription_memory+0x1c>
 800f112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop

0800f118 <rmw_uxrce_init_node_memory>:
 800f118:	b1b2      	cbz	r2, 800f148 <rmw_uxrce_init_node_memory+0x30>
 800f11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11c:	7a07      	ldrb	r7, [r0, #8]
 800f11e:	4605      	mov	r5, r0
 800f120:	b98f      	cbnz	r7, 800f146 <rmw_uxrce_init_node_memory+0x2e>
 800f122:	e9c0 7700 	strd	r7, r7, [r0]
 800f126:	460c      	mov	r4, r1
 800f128:	23a4      	movs	r3, #164	@ 0xa4
 800f12a:	2101      	movs	r1, #1
 800f12c:	fb03 4602 	mla	r6, r3, r2, r4
 800f130:	60c3      	str	r3, [r0, #12]
 800f132:	7201      	strb	r1, [r0, #8]
 800f134:	4621      	mov	r1, r4
 800f136:	4628      	mov	r0, r5
 800f138:	f003 fea8 	bl	8012e8c <put_memory>
 800f13c:	60e4      	str	r4, [r4, #12]
 800f13e:	f804 7ba4 	strb.w	r7, [r4], #164
 800f142:	42a6      	cmp	r6, r4
 800f144:	d1f6      	bne.n	800f134 <rmw_uxrce_init_node_memory+0x1c>
 800f146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop

0800f14c <rmw_uxrce_init_session_memory>:
 800f14c:	b1d2      	cbz	r2, 800f184 <rmw_uxrce_init_session_memory+0x38>
 800f14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f152:	7a07      	ldrb	r7, [r0, #8]
 800f154:	4605      	mov	r5, r0
 800f156:	b99f      	cbnz	r7, 800f180 <rmw_uxrce_init_session_memory+0x34>
 800f158:	e9c0 7700 	strd	r7, r7, [r0]
 800f15c:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800f160:	460c      	mov	r4, r1
 800f162:	2101      	movs	r1, #1
 800f164:	fb03 4602 	mla	r6, r3, r2, r4
 800f168:	60c3      	str	r3, [r0, #12]
 800f16a:	4698      	mov	r8, r3
 800f16c:	7201      	strb	r1, [r0, #8]
 800f16e:	4621      	mov	r1, r4
 800f170:	4628      	mov	r0, r5
 800f172:	f003 fe8b 	bl	8012e8c <put_memory>
 800f176:	60e4      	str	r4, [r4, #12]
 800f178:	7027      	strb	r7, [r4, #0]
 800f17a:	4444      	add	r4, r8
 800f17c:	42a6      	cmp	r6, r4
 800f17e:	d1f6      	bne.n	800f16e <rmw_uxrce_init_session_memory+0x22>
 800f180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop

0800f188 <rmw_uxrce_init_topic_memory>:
 800f188:	b1c2      	cbz	r2, 800f1bc <rmw_uxrce_init_topic_memory+0x34>
 800f18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18c:	7a07      	ldrb	r7, [r0, #8]
 800f18e:	4606      	mov	r6, r0
 800f190:	b99f      	cbnz	r7, 800f1ba <rmw_uxrce_init_topic_memory+0x32>
 800f192:	e9c0 7700 	strd	r7, r7, [r0]
 800f196:	460c      	mov	r4, r1
 800f198:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f19c:	2101      	movs	r1, #1
 800f19e:	231c      	movs	r3, #28
 800f1a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1a4:	7201      	strb	r1, [r0, #8]
 800f1a6:	60c3      	str	r3, [r0, #12]
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f003 fe6e 	bl	8012e8c <put_memory>
 800f1b0:	60e4      	str	r4, [r4, #12]
 800f1b2:	f804 7b1c 	strb.w	r7, [r4], #28
 800f1b6:	42a5      	cmp	r5, r4
 800f1b8:	d1f6      	bne.n	800f1a8 <rmw_uxrce_init_topic_memory+0x20>
 800f1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop

0800f1c0 <rmw_uxrce_init_static_input_buffer_memory>:
 800f1c0:	b1d2      	cbz	r2, 800f1f8 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800f1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c4:	7a07      	ldrb	r7, [r0, #8]
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	b9af      	cbnz	r7, 800f1f6 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800f1ca:	e9c0 7700 	strd	r7, r7, [r0]
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f1da:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800f1de:	7201      	strb	r1, [r0, #8]
 800f1e0:	60c3      	str	r3, [r0, #12]
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f003 fe51 	bl	8012e8c <put_memory>
 800f1ea:	60e4      	str	r4, [r4, #12]
 800f1ec:	7027      	strb	r7, [r4, #0]
 800f1ee:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f1f2:	42a5      	cmp	r5, r4
 800f1f4:	d1f5      	bne.n	800f1e2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop

0800f1fc <rmw_uxrce_init_init_options_impl_memory>:
 800f1fc:	b1b2      	cbz	r2, 800f22c <rmw_uxrce_init_init_options_impl_memory+0x30>
 800f1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f200:	7a07      	ldrb	r7, [r0, #8]
 800f202:	4605      	mov	r5, r0
 800f204:	b98f      	cbnz	r7, 800f22a <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800f206:	e9c0 7700 	strd	r7, r7, [r0]
 800f20a:	460c      	mov	r4, r1
 800f20c:	232c      	movs	r3, #44	@ 0x2c
 800f20e:	2101      	movs	r1, #1
 800f210:	fb03 4602 	mla	r6, r3, r2, r4
 800f214:	60c3      	str	r3, [r0, #12]
 800f216:	7201      	strb	r1, [r0, #8]
 800f218:	4621      	mov	r1, r4
 800f21a:	4628      	mov	r0, r5
 800f21c:	f003 fe36 	bl	8012e8c <put_memory>
 800f220:	60e4      	str	r4, [r4, #12]
 800f222:	f804 7b2c 	strb.w	r7, [r4], #44
 800f226:	42a6      	cmp	r6, r4
 800f228:	d1f6      	bne.n	800f218 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800f22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop

0800f230 <rmw_uxrce_init_wait_set_memory>:
 800f230:	b1c2      	cbz	r2, 800f264 <rmw_uxrce_init_wait_set_memory+0x34>
 800f232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f234:	7a07      	ldrb	r7, [r0, #8]
 800f236:	4606      	mov	r6, r0
 800f238:	b99f      	cbnz	r7, 800f262 <rmw_uxrce_init_wait_set_memory+0x32>
 800f23a:	e9c0 7700 	strd	r7, r7, [r0]
 800f23e:	460c      	mov	r4, r1
 800f240:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f244:	2101      	movs	r1, #1
 800f246:	231c      	movs	r3, #28
 800f248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f24c:	7201      	strb	r1, [r0, #8]
 800f24e:	60c3      	str	r3, [r0, #12]
 800f250:	4621      	mov	r1, r4
 800f252:	4630      	mov	r0, r6
 800f254:	f003 fe1a 	bl	8012e8c <put_memory>
 800f258:	60e4      	str	r4, [r4, #12]
 800f25a:	f804 7b1c 	strb.w	r7, [r4], #28
 800f25e:	42a5      	cmp	r5, r4
 800f260:	d1f6      	bne.n	800f250 <rmw_uxrce_init_wait_set_memory+0x20>
 800f262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop

0800f268 <rmw_uxrce_init_guard_condition_memory>:
 800f268:	b1b2      	cbz	r2, 800f298 <rmw_uxrce_init_guard_condition_memory+0x30>
 800f26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26c:	7a07      	ldrb	r7, [r0, #8]
 800f26e:	4605      	mov	r5, r0
 800f270:	b98f      	cbnz	r7, 800f296 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800f272:	e9c0 7700 	strd	r7, r7, [r0]
 800f276:	460c      	mov	r4, r1
 800f278:	2320      	movs	r3, #32
 800f27a:	2101      	movs	r1, #1
 800f27c:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800f280:	7201      	strb	r1, [r0, #8]
 800f282:	60c3      	str	r3, [r0, #12]
 800f284:	4621      	mov	r1, r4
 800f286:	4628      	mov	r0, r5
 800f288:	f003 fe00 	bl	8012e8c <put_memory>
 800f28c:	60e4      	str	r4, [r4, #12]
 800f28e:	f804 7b20 	strb.w	r7, [r4], #32
 800f292:	42a6      	cmp	r6, r4
 800f294:	d1f6      	bne.n	800f284 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800f296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop

0800f29c <rmw_uxrce_fini_session_memory>:
 800f29c:	4601      	mov	r1, r0
 800f29e:	4801      	ldr	r0, [pc, #4]	@ (800f2a4 <rmw_uxrce_fini_session_memory+0x8>)
 800f2a0:	f003 bdf4 	b.w	8012e8c <put_memory>
 800f2a4:	2000c600 	.word	0x2000c600

0800f2a8 <rmw_uxrce_fini_node_memory>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	6800      	ldr	r0, [r0, #0]
 800f2ae:	b128      	cbz	r0, 800f2bc <rmw_uxrce_fini_node_memory+0x14>
 800f2b0:	4b07      	ldr	r3, [pc, #28]	@ (800f2d0 <rmw_uxrce_fini_node_memory+0x28>)
 800f2b2:	6819      	ldr	r1, [r3, #0]
 800f2b4:	f7f0 ff94 	bl	80001e0 <strcmp>
 800f2b8:	b940      	cbnz	r0, 800f2cc <rmw_uxrce_fini_node_memory+0x24>
 800f2ba:	6020      	str	r0, [r4, #0]
 800f2bc:	6861      	ldr	r1, [r4, #4]
 800f2be:	b129      	cbz	r1, 800f2cc <rmw_uxrce_fini_node_memory+0x24>
 800f2c0:	2500      	movs	r5, #0
 800f2c2:	4804      	ldr	r0, [pc, #16]	@ (800f2d4 <rmw_uxrce_fini_node_memory+0x2c>)
 800f2c4:	610d      	str	r5, [r1, #16]
 800f2c6:	f003 fde1 	bl	8012e8c <put_memory>
 800f2ca:	6065      	str	r5, [r4, #4]
 800f2cc:	bd38      	pop	{r3, r4, r5, pc}
 800f2ce:	bf00      	nop
 800f2d0:	08015df4 	.word	0x08015df4
 800f2d4:	2000c42c 	.word	0x2000c42c

0800f2d8 <rmw_uxrce_fini_publisher_memory>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	4604      	mov	r4, r0
 800f2dc:	6800      	ldr	r0, [r0, #0]
 800f2de:	b128      	cbz	r0, 800f2ec <rmw_uxrce_fini_publisher_memory+0x14>
 800f2e0:	4b06      	ldr	r3, [pc, #24]	@ (800f2fc <rmw_uxrce_fini_publisher_memory+0x24>)
 800f2e2:	6819      	ldr	r1, [r3, #0]
 800f2e4:	f7f0 ff7c 	bl	80001e0 <strcmp>
 800f2e8:	b938      	cbnz	r0, 800f2fa <rmw_uxrce_fini_publisher_memory+0x22>
 800f2ea:	6020      	str	r0, [r4, #0]
 800f2ec:	6861      	ldr	r1, [r4, #4]
 800f2ee:	b121      	cbz	r1, 800f2fa <rmw_uxrce_fini_publisher_memory+0x22>
 800f2f0:	4803      	ldr	r0, [pc, #12]	@ (800f300 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f2f2:	f003 fdcb 	bl	8012e8c <put_memory>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	6063      	str	r3, [r4, #4]
 800f2fa:	bd10      	pop	{r4, pc}
 800f2fc:	08015df4 	.word	0x08015df4
 800f300:	20009468 	.word	0x20009468

0800f304 <rmw_uxrce_fini_subscription_memory>:
 800f304:	b510      	push	{r4, lr}
 800f306:	4604      	mov	r4, r0
 800f308:	6800      	ldr	r0, [r0, #0]
 800f30a:	b128      	cbz	r0, 800f318 <rmw_uxrce_fini_subscription_memory+0x14>
 800f30c:	4b06      	ldr	r3, [pc, #24]	@ (800f328 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f30e:	6819      	ldr	r1, [r3, #0]
 800f310:	f7f0 ff66 	bl	80001e0 <strcmp>
 800f314:	b938      	cbnz	r0, 800f326 <rmw_uxrce_fini_subscription_memory+0x22>
 800f316:	6020      	str	r0, [r4, #0]
 800f318:	6861      	ldr	r1, [r4, #4]
 800f31a:	b121      	cbz	r1, 800f326 <rmw_uxrce_fini_subscription_memory+0x22>
 800f31c:	4803      	ldr	r0, [pc, #12]	@ (800f32c <rmw_uxrce_fini_subscription_memory+0x28>)
 800f31e:	f003 fdb5 	bl	8012e8c <put_memory>
 800f322:	2300      	movs	r3, #0
 800f324:	6063      	str	r3, [r4, #4]
 800f326:	bd10      	pop	{r4, pc}
 800f328:	08015df4 	.word	0x08015df4
 800f32c:	2000c6c4 	.word	0x2000c6c4

0800f330 <rmw_uxrce_fini_service_memory>:
 800f330:	b510      	push	{r4, lr}
 800f332:	4604      	mov	r4, r0
 800f334:	6800      	ldr	r0, [r0, #0]
 800f336:	b128      	cbz	r0, 800f344 <rmw_uxrce_fini_service_memory+0x14>
 800f338:	4b06      	ldr	r3, [pc, #24]	@ (800f354 <rmw_uxrce_fini_service_memory+0x24>)
 800f33a:	6819      	ldr	r1, [r3, #0]
 800f33c:	f7f0 ff50 	bl	80001e0 <strcmp>
 800f340:	b938      	cbnz	r0, 800f352 <rmw_uxrce_fini_service_memory+0x22>
 800f342:	6020      	str	r0, [r4, #0]
 800f344:	6861      	ldr	r1, [r4, #4]
 800f346:	b121      	cbz	r1, 800f352 <rmw_uxrce_fini_service_memory+0x22>
 800f348:	4803      	ldr	r0, [pc, #12]	@ (800f358 <rmw_uxrce_fini_service_memory+0x28>)
 800f34a:	f003 fd9f 	bl	8012e8c <put_memory>
 800f34e:	2300      	movs	r3, #0
 800f350:	6063      	str	r3, [r4, #4]
 800f352:	bd10      	pop	{r4, pc}
 800f354:	08015df4 	.word	0x08015df4
 800f358:	2000c6b4 	.word	0x2000c6b4

0800f35c <rmw_uxrce_fini_client_memory>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	4604      	mov	r4, r0
 800f360:	6800      	ldr	r0, [r0, #0]
 800f362:	b128      	cbz	r0, 800f370 <rmw_uxrce_fini_client_memory+0x14>
 800f364:	4b06      	ldr	r3, [pc, #24]	@ (800f380 <rmw_uxrce_fini_client_memory+0x24>)
 800f366:	6819      	ldr	r1, [r3, #0]
 800f368:	f7f0 ff3a 	bl	80001e0 <strcmp>
 800f36c:	b938      	cbnz	r0, 800f37e <rmw_uxrce_fini_client_memory+0x22>
 800f36e:	6020      	str	r0, [r4, #0]
 800f370:	6861      	ldr	r1, [r4, #4]
 800f372:	b121      	cbz	r1, 800f37e <rmw_uxrce_fini_client_memory+0x22>
 800f374:	4803      	ldr	r0, [pc, #12]	@ (800f384 <rmw_uxrce_fini_client_memory+0x28>)
 800f376:	f003 fd89 	bl	8012e8c <put_memory>
 800f37a:	2300      	movs	r3, #0
 800f37c:	6063      	str	r3, [r4, #4]
 800f37e:	bd10      	pop	{r4, pc}
 800f380:	08015df4 	.word	0x08015df4
 800f384:	20009ce8 	.word	0x20009ce8

0800f388 <rmw_uxrce_fini_topic_memory>:
 800f388:	b510      	push	{r4, lr}
 800f38a:	4601      	mov	r1, r0
 800f38c:	4604      	mov	r4, r0
 800f38e:	4803      	ldr	r0, [pc, #12]	@ (800f39c <rmw_uxrce_fini_topic_memory+0x14>)
 800f390:	f003 fd7c 	bl	8012e8c <put_memory>
 800f394:	2300      	movs	r3, #0
 800f396:	61a3      	str	r3, [r4, #24]
 800f398:	bd10      	pop	{r4, pc}
 800f39a:	bf00      	nop
 800f39c:	2000c5f0 	.word	0x2000c5f0

0800f3a0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f3a0:	b082      	sub	sp, #8
 800f3a2:	b4f0      	push	{r4, r5, r6, r7}
 800f3a4:	4923      	ldr	r1, [pc, #140]	@ (800f434 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800f3a6:	ac04      	add	r4, sp, #16
 800f3a8:	e884 000c 	stmia.w	r4, {r2, r3}
 800f3ac:	680d      	ldr	r5, [r1, #0]
 800f3ae:	9c05      	ldr	r4, [sp, #20]
 800f3b0:	2d00      	cmp	r5, #0
 800f3b2:	d03d      	beq.n	800f430 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800f3b4:	462b      	mov	r3, r5
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	68da      	ldr	r2, [r3, #12]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f3c0:	4290      	cmp	r0, r2
 800f3c2:	bf08      	it	eq
 800f3c4:	3101      	addeq	r1, #1
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1f6      	bne.n	800f3b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f3ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f3ce:	2b02      	cmp	r3, #2
 800f3d0:	d026      	beq.n	800f420 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800f3d2:	d906      	bls.n	800f3e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800f3d4:	2b03      	cmp	r3, #3
 800f3d6:	d004      	beq.n	800f3e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800f3d8:	2100      	movs	r1, #0
 800f3da:	bcf0      	pop	{r4, r5, r6, r7}
 800f3dc:	4608      	mov	r0, r1
 800f3de:	b002      	add	sp, #8
 800f3e0:	4770      	bx	lr
 800f3e2:	b304      	cbz	r4, 800f426 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f3e4:	428c      	cmp	r4, r1
 800f3e6:	d81e      	bhi.n	800f426 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f3e8:	2d00      	cmp	r5, #0
 800f3ea:	d0f5      	beq.n	800f3d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800f3f2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f3f6:	e002      	b.n	800f3fe <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800f3f8:	68ad      	ldr	r5, [r5, #8]
 800f3fa:	2d00      	cmp	r5, #0
 800f3fc:	d0ed      	beq.n	800f3da <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f3fe:	68eb      	ldr	r3, [r5, #12]
 800f400:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f404:	4290      	cmp	r0, r2
 800f406:	d1f7      	bne.n	800f3f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800f408:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 800f40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f410:	42b2      	cmp	r2, r6
 800f412:	eb73 0407 	sbcs.w	r4, r3, r7
 800f416:	daef      	bge.n	800f3f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800f418:	4616      	mov	r6, r2
 800f41a:	461f      	mov	r7, r3
 800f41c:	4629      	mov	r1, r5
 800f41e:	e7eb      	b.n	800f3f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800f420:	b10c      	cbz	r4, 800f426 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f422:	428c      	cmp	r4, r1
 800f424:	d9d8      	bls.n	800f3d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f426:	bcf0      	pop	{r4, r5, r6, r7}
 800f428:	4802      	ldr	r0, [pc, #8]	@ (800f434 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800f42a:	b002      	add	sp, #8
 800f42c:	f003 bd1e 	b.w	8012e6c <get_memory>
 800f430:	4629      	mov	r1, r5
 800f432:	e7ca      	b.n	800f3ca <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f434:	20009458 	.word	0x20009458

0800f438 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f438:	4b12      	ldr	r3, [pc, #72]	@ (800f484 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	b1fb      	cbz	r3, 800f47e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800f43e:	b4f0      	push	{r4, r5, r6, r7}
 800f440:	f04f 0c00 	mov.w	ip, #0
 800f444:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f448:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800f44c:	e001      	b.n	800f452 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	b193      	cbz	r3, 800f478 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800f452:	68da      	ldr	r2, [r3, #12]
 800f454:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f458:	4288      	cmp	r0, r1
 800f45a:	d1f8      	bne.n	800f44e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800f45c:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 800f460:	e9d2 6700 	ldrd	r6, r7, [r2]
 800f464:	42a6      	cmp	r6, r4
 800f466:	eb77 0205 	sbcs.w	r2, r7, r5
 800f46a:	daf0      	bge.n	800f44e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800f46c:	469c      	mov	ip, r3
 800f46e:	689b      	ldr	r3, [r3, #8]
 800f470:	4634      	mov	r4, r6
 800f472:	463d      	mov	r5, r7
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1ec      	bne.n	800f452 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800f478:	4660      	mov	r0, ip
 800f47a:	bcf0      	pop	{r4, r5, r6, r7}
 800f47c:	4770      	bx	lr
 800f47e:	4618      	mov	r0, r3
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	20009458 	.word	0x20009458

0800f488 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	4e38      	ldr	r6, [pc, #224]	@ (800f570 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800f48e:	f8d6 8000 	ldr.w	r8, [r6]
 800f492:	b083      	sub	sp, #12
 800f494:	f003 fda8 	bl	8012fe8 <rmw_uros_epoch_nanos>
 800f498:	f1b8 0f00 	cmp.w	r8, #0
 800f49c:	d05f      	beq.n	800f55e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800f49e:	46b1      	mov	r9, r6
 800f4a0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f4a4:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	4682      	mov	sl, r0
 800f4ac:	468b      	mov	fp, r1
 800f4ae:	d02d      	beq.n	800f50c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800f4b0:	2b05      	cmp	r3, #5
 800f4b2:	d041      	beq.n	800f538 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d029      	beq.n	800f50c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e9cd 2300 	strd	r2, r3, [sp]
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	9b00      	ldr	r3, [sp, #0]
 800f4c6:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 800f4ca:	e9d6 6700 	ldrd	r6, r7, [r6]
 800f4ce:	18c2      	adds	r2, r0, r3
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	eb41 0303 	adc.w	r3, r1, r3
 800f4d6:	1994      	adds	r4, r2, r6
 800f4d8:	eb43 0507 	adc.w	r5, r3, r7
 800f4dc:	4554      	cmp	r4, sl
 800f4de:	eb75 020b 	sbcs.w	r2, r5, fp
 800f4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4e6:	db03      	blt.n	800f4f0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f4e8:	45b2      	cmp	sl, r6
 800f4ea:	eb7b 0207 	sbcs.w	r2, fp, r7
 800f4ee:	da05      	bge.n	800f4fc <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800f4f0:	4641      	mov	r1, r8
 800f4f2:	4648      	mov	r0, r9
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	f003 fcc9 	bl	8012e8c <put_memory>
 800f4fa:	9b00      	ldr	r3, [sp, #0]
 800f4fc:	b37b      	cbz	r3, 800f55e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800f4fe:	4698      	mov	r8, r3
 800f500:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f504:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800f508:	2b04      	cmp	r3, #4
 800f50a:	d1d1      	bne.n	800f4b0 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800f50c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800f510:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 800f514:	e9cd 2300 	strd	r2, r3, [sp]
 800f518:	4313      	orrs	r3, r2
 800f51a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 800f51e:	d015      	beq.n	800f54c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f520:	9a01      	ldr	r2, [sp, #4]
 800f522:	4b14      	ldr	r3, [pc, #80]	@ (800f574 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800f524:	fb03 f702 	mul.w	r7, r3, r2
 800f528:	9a00      	ldr	r2, [sp, #0]
 800f52a:	fba2 2303 	umull	r2, r3, r2, r3
 800f52e:	e9cd 2300 	strd	r2, r3, [sp]
 800f532:	443b      	add	r3, r7
 800f534:	9301      	str	r3, [sp, #4]
 800f536:	e7c5      	b.n	800f4c4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800f538:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800f53c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800f540:	e9cd 2300 	strd	r2, r3, [sp]
 800f544:	4313      	orrs	r3, r2
 800f546:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 800f54a:	d1e9      	bne.n	800f520 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800f54c:	ea50 0301 	orrs.w	r3, r0, r1
 800f550:	bf02      	ittt	eq
 800f552:	a305      	addeq	r3, pc, #20	@ (adr r3, 800f568 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800f554:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800f558:	e9cd 2300 	strdeq	r2, r3, [sp]
 800f55c:	e7b2      	b.n	800f4c4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800f55e:	b003      	add	sp, #12
 800f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f564:	f3af 8000 	nop.w
 800f568:	fc23ac00 	.word	0xfc23ac00
 800f56c:	00000006 	.word	0x00000006
 800f570:	20009458 	.word	0x20009458
 800f574:	3b9aca00 	.word	0x3b9aca00

0800f578 <run_xrce_session>:
 800f578:	b510      	push	{r4, lr}
 800f57a:	788c      	ldrb	r4, [r1, #2]
 800f57c:	b086      	sub	sp, #24
 800f57e:	2c01      	cmp	r4, #1
 800f580:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f584:	d00c      	beq.n	800f5a0 <run_xrce_session+0x28>
 800f586:	4619      	mov	r1, r3
 800f588:	2301      	movs	r3, #1
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	f10d 020e 	add.w	r2, sp, #14
 800f590:	f10d 0317 	add.w	r3, sp, #23
 800f594:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f598:	f001 f8f8 	bl	801078c <uxr_run_session_until_all_status>
 800f59c:	b006      	add	sp, #24
 800f59e:	bd10      	pop	{r4, pc}
 800f5a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5a4:	f000 fd10 	bl	800ffc8 <uxr_flash_output_streams>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	b006      	add	sp, #24
 800f5ac:	bd10      	pop	{r4, pc}
 800f5ae:	bf00      	nop

0800f5b0 <convert_qos_profile>:
 800f5b0:	b430      	push	{r4, r5}
 800f5b2:	7a0d      	ldrb	r5, [r1, #8]
 800f5b4:	780c      	ldrb	r4, [r1, #0]
 800f5b6:	7a4a      	ldrb	r2, [r1, #9]
 800f5b8:	8889      	ldrh	r1, [r1, #4]
 800f5ba:	8081      	strh	r1, [r0, #4]
 800f5bc:	f1a5 0502 	sub.w	r5, r5, #2
 800f5c0:	f1a4 0402 	sub.w	r4, r4, #2
 800f5c4:	2a02      	cmp	r2, #2
 800f5c6:	fab5 f585 	clz	r5, r5
 800f5ca:	fab4 f484 	clz	r4, r4
 800f5ce:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800f5d2:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800f5d6:	bf18      	it	ne
 800f5d8:	2200      	movne	r2, #0
 800f5da:	7045      	strb	r5, [r0, #1]
 800f5dc:	7084      	strb	r4, [r0, #2]
 800f5de:	7002      	strb	r2, [r0, #0]
 800f5e0:	bc30      	pop	{r4, r5}
 800f5e2:	4770      	bx	lr

0800f5e4 <generate_type_name>:
 800f5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	700b      	strb	r3, [r1, #0]
 800f5ea:	6803      	ldr	r3, [r0, #0]
 800f5ec:	b087      	sub	sp, #28
 800f5ee:	4614      	mov	r4, r2
 800f5f0:	b1d3      	cbz	r3, 800f628 <generate_type_name+0x44>
 800f5f2:	4d0f      	ldr	r5, [pc, #60]	@ (800f630 <generate_type_name+0x4c>)
 800f5f4:	462f      	mov	r7, r5
 800f5f6:	4a0f      	ldr	r2, [pc, #60]	@ (800f634 <generate_type_name+0x50>)
 800f5f8:	4e0f      	ldr	r6, [pc, #60]	@ (800f638 <generate_type_name+0x54>)
 800f5fa:	6840      	ldr	r0, [r0, #4]
 800f5fc:	9004      	str	r0, [sp, #16]
 800f5fe:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800f602:	4608      	mov	r0, r1
 800f604:	9205      	str	r2, [sp, #20]
 800f606:	9503      	str	r5, [sp, #12]
 800f608:	4a0c      	ldr	r2, [pc, #48]	@ (800f63c <generate_type_name+0x58>)
 800f60a:	9700      	str	r7, [sp, #0]
 800f60c:	4621      	mov	r1, r4
 800f60e:	f004 fec5 	bl	801439c <sniprintf>
 800f612:	2800      	cmp	r0, #0
 800f614:	db05      	blt.n	800f622 <generate_type_name+0x3e>
 800f616:	4284      	cmp	r4, r0
 800f618:	bfd4      	ite	le
 800f61a:	2000      	movle	r0, #0
 800f61c:	2001      	movgt	r0, #1
 800f61e:	b007      	add	sp, #28
 800f620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f622:	2000      	movs	r0, #0
 800f624:	b007      	add	sp, #28
 800f626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f628:	4b05      	ldr	r3, [pc, #20]	@ (800f640 <generate_type_name+0x5c>)
 800f62a:	4d01      	ldr	r5, [pc, #4]	@ (800f630 <generate_type_name+0x4c>)
 800f62c:	461f      	mov	r7, r3
 800f62e:	e7e2      	b.n	800f5f6 <generate_type_name+0x12>
 800f630:	08015ba4 	.word	0x08015ba4
 800f634:	08015bb8 	.word	0x08015bb8
 800f638:	08015bbc 	.word	0x08015bbc
 800f63c:	08015ba8 	.word	0x08015ba8
 800f640:	08015994 	.word	0x08015994

0800f644 <generate_topic_name>:
 800f644:	b510      	push	{r4, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	4b09      	ldr	r3, [pc, #36]	@ (800f670 <generate_topic_name+0x2c>)
 800f64a:	9000      	str	r0, [sp, #0]
 800f64c:	4614      	mov	r4, r2
 800f64e:	4608      	mov	r0, r1
 800f650:	4611      	mov	r1, r2
 800f652:	4a08      	ldr	r2, [pc, #32]	@ (800f674 <generate_topic_name+0x30>)
 800f654:	f004 fea2 	bl	801439c <sniprintf>
 800f658:	2800      	cmp	r0, #0
 800f65a:	db05      	blt.n	800f668 <generate_topic_name+0x24>
 800f65c:	4284      	cmp	r4, r0
 800f65e:	bfd4      	ite	le
 800f660:	2000      	movle	r0, #0
 800f662:	2001      	movgt	r0, #1
 800f664:	b002      	add	sp, #8
 800f666:	bd10      	pop	{r4, pc}
 800f668:	2000      	movs	r0, #0
 800f66a:	b002      	add	sp, #8
 800f66c:	bd10      	pop	{r4, pc}
 800f66e:	bf00      	nop
 800f670:	08015bc0 	.word	0x08015bc0
 800f674:	08015698 	.word	0x08015698

0800f678 <is_uxrce_rmw_identifier_valid>:
 800f678:	b510      	push	{r4, lr}
 800f67a:	4604      	mov	r4, r0
 800f67c:	b140      	cbz	r0, 800f690 <is_uxrce_rmw_identifier_valid+0x18>
 800f67e:	f7fe fc97 	bl	800dfb0 <rmw_get_implementation_identifier>
 800f682:	4601      	mov	r1, r0
 800f684:	4620      	mov	r0, r4
 800f686:	f7f0 fdab 	bl	80001e0 <strcmp>
 800f68a:	fab0 f080 	clz	r0, r0
 800f68e:	0940      	lsrs	r0, r0, #5
 800f690:	bd10      	pop	{r4, pc}
 800f692:	bf00      	nop

0800f694 <get_message_typesupport_handle>:
 800f694:	6883      	ldr	r3, [r0, #8]
 800f696:	4718      	bx	r3

0800f698 <get_message_typesupport_handle_function>:
 800f698:	b510      	push	{r4, lr}
 800f69a:	4604      	mov	r4, r0
 800f69c:	6800      	ldr	r0, [r0, #0]
 800f69e:	f7f0 fd9f 	bl	80001e0 <strcmp>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	bf0c      	ite	eq
 800f6a6:	4620      	moveq	r0, r4
 800f6a8:	2000      	movne	r0, #0
 800f6aa:	bd10      	pop	{r4, pc}

0800f6ac <uxr_buffer_delete_entity>:
 800f6ac:	b530      	push	{r4, r5, lr}
 800f6ae:	b08f      	sub	sp, #60	@ 0x3c
 800f6b0:	2403      	movs	r4, #3
 800f6b2:	2500      	movs	r5, #0
 800f6b4:	e9cd 4500 	strd	r4, r5, [sp]
 800f6b8:	9202      	str	r2, [sp, #8]
 800f6ba:	ab06      	add	r3, sp, #24
 800f6bc:	2204      	movs	r2, #4
 800f6be:	9103      	str	r1, [sp, #12]
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	f001 fa9f 	bl	8010c04 <uxr_prepare_stream_to_write_submessage>
 800f6c6:	b918      	cbnz	r0, 800f6d0 <uxr_buffer_delete_entity+0x24>
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	b00f      	add	sp, #60	@ 0x3c
 800f6ce:	bd30      	pop	{r4, r5, pc}
 800f6d0:	9902      	ldr	r1, [sp, #8]
 800f6d2:	aa05      	add	r2, sp, #20
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	f001 fbcf 	bl	8010e78 <uxr_init_base_object_request>
 800f6da:	a905      	add	r1, sp, #20
 800f6dc:	4604      	mov	r4, r0
 800f6de:	a806      	add	r0, sp, #24
 800f6e0:	f003 f856 	bl	8012790 <uxr_serialize_DELETE_Payload>
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	b00f      	add	sp, #60	@ 0x3c
 800f6e8:	bd30      	pop	{r4, r5, pc}
 800f6ea:	bf00      	nop

0800f6ec <uxr_common_create_entity>:
 800f6ec:	b530      	push	{r4, r5, lr}
 800f6ee:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800f6f2:	b08d      	sub	sp, #52	@ 0x34
 800f6f4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f6f8:	2d01      	cmp	r5, #1
 800f6fa:	bf0c      	ite	eq
 800f6fc:	f003 0201 	andeq.w	r2, r3, #1
 800f700:	2200      	movne	r2, #0
 800f702:	330e      	adds	r3, #14
 800f704:	4604      	mov	r4, r0
 800f706:	441a      	add	r2, r3
 800f708:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 800f70c:	9001      	str	r0, [sp, #4]
 800f70e:	2101      	movs	r1, #1
 800f710:	9100      	str	r1, [sp, #0]
 800f712:	b292      	uxth	r2, r2
 800f714:	9903      	ldr	r1, [sp, #12]
 800f716:	ab04      	add	r3, sp, #16
 800f718:	4620      	mov	r0, r4
 800f71a:	f001 fa73 	bl	8010c04 <uxr_prepare_stream_to_write_submessage>
 800f71e:	b918      	cbnz	r0, 800f728 <uxr_common_create_entity+0x3c>
 800f720:	4604      	mov	r4, r0
 800f722:	4620      	mov	r0, r4
 800f724:	b00d      	add	sp, #52	@ 0x34
 800f726:	bd30      	pop	{r4, r5, pc}
 800f728:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f72a:	9902      	ldr	r1, [sp, #8]
 800f72c:	4620      	mov	r0, r4
 800f72e:	f001 fba3 	bl	8010e78 <uxr_init_base_object_request>
 800f732:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f734:	4604      	mov	r4, r0
 800f736:	a804      	add	r0, sp, #16
 800f738:	f002 ff7e 	bl	8012638 <uxr_serialize_CREATE_Payload>
 800f73c:	4620      	mov	r0, r4
 800f73e:	b00d      	add	sp, #52	@ 0x34
 800f740:	bd30      	pop	{r4, r5, pc}
 800f742:	bf00      	nop

0800f744 <uxr_buffer_create_participant_bin>:
 800f744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f746:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800f74a:	ac11      	add	r4, sp, #68	@ 0x44
 800f74c:	9103      	str	r1, [sp, #12]
 800f74e:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 800f750:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 800f754:	2103      	movs	r1, #3
 800f756:	7221      	strb	r1, [r4, #8]
 800f758:	2301      	movs	r3, #1
 800f75a:	2100      	movs	r1, #0
 800f75c:	7123      	strb	r3, [r4, #4]
 800f75e:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 800f762:	9202      	str	r2, [sp, #8]
 800f764:	4605      	mov	r5, r0
 800f766:	f88d 1014 	strb.w	r1, [sp, #20]
 800f76a:	b1ce      	cbz	r6, 800f7a0 <uxr_buffer_create_participant_bin+0x5c>
 800f76c:	f88d 301c 	strb.w	r3, [sp, #28]
 800f770:	9608      	str	r6, [sp, #32]
 800f772:	a809      	add	r0, sp, #36	@ 0x24
 800f774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f778:	a915      	add	r1, sp, #84	@ 0x54
 800f77a:	f7fb fc9d 	bl	800b0b8 <ucdr_init_buffer>
 800f77e:	a905      	add	r1, sp, #20
 800f780:	a809      	add	r0, sp, #36	@ 0x24
 800f782:	f002 fbfd 	bl	8011f80 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f786:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f788:	9401      	str	r4, [sp, #4]
 800f78a:	b283      	uxth	r3, r0
 800f78c:	9700      	str	r7, [sp, #0]
 800f78e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f792:	60e0      	str	r0, [r4, #12]
 800f794:	4628      	mov	r0, r5
 800f796:	f7ff ffa9 	bl	800f6ec <uxr_common_create_entity>
 800f79a:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 800f79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a0:	f88d 601c 	strb.w	r6, [sp, #28]
 800f7a4:	e7e5      	b.n	800f772 <uxr_buffer_create_participant_bin+0x2e>
 800f7a6:	bf00      	nop

0800f7a8 <uxr_buffer_create_topic_bin>:
 800f7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7aa:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f7ae:	ac13      	add	r4, sp, #76	@ 0x4c
 800f7b0:	4605      	mov	r5, r0
 800f7b2:	9105      	str	r1, [sp, #20]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	a997      	add	r1, sp, #604	@ 0x25c
 800f7b8:	2602      	movs	r6, #2
 800f7ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f7be:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 800f7c2:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 800f7c6:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 800f7c8:	f000 f9ae 	bl	800fb28 <uxr_object_id_to_raw>
 800f7cc:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 800f7ce:	9206      	str	r2, [sp, #24]
 800f7d0:	2303      	movs	r3, #3
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	7223      	strb	r3, [r4, #8]
 800f7d6:	a80b      	add	r0, sp, #44	@ 0x2c
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f7de:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f7e2:	a917      	add	r1, sp, #92	@ 0x5c
 800f7e4:	f88d 301c 	strb.w	r3, [sp, #28]
 800f7e8:	960a      	str	r6, [sp, #40]	@ 0x28
 800f7ea:	f7fb fc65 	bl	800b0b8 <ucdr_init_buffer>
 800f7ee:	a906      	add	r1, sp, #24
 800f7f0:	a80b      	add	r0, sp, #44	@ 0x2c
 800f7f2:	f002 fbe7 	bl	8011fc4 <uxr_serialize_OBJK_Topic_Binary>
 800f7f6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800f7f8:	9401      	str	r4, [sp, #4]
 800f7fa:	9700      	str	r7, [sp, #0]
 800f7fc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f800:	4628      	mov	r0, r5
 800f802:	b2b3      	uxth	r3, r6
 800f804:	60e6      	str	r6, [r4, #12]
 800f806:	f7ff ff71 	bl	800f6ec <uxr_common_create_entity>
 800f80a:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f80e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f810 <uxr_buffer_create_subscriber_bin>:
 800f810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f812:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f816:	ac0e      	add	r4, sp, #56	@ 0x38
 800f818:	4605      	mov	r5, r0
 800f81a:	9105      	str	r1, [sp, #20]
 800f81c:	4618      	mov	r0, r3
 800f81e:	a992      	add	r1, sp, #584	@ 0x248
 800f820:	2604      	movs	r6, #4
 800f822:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f826:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f82a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f82e:	f000 f97b 	bl	800fb28 <uxr_object_id_to_raw>
 800f832:	2103      	movs	r1, #3
 800f834:	2300      	movs	r3, #0
 800f836:	a806      	add	r0, sp, #24
 800f838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f83c:	7221      	strb	r1, [r4, #8]
 800f83e:	a912      	add	r1, sp, #72	@ 0x48
 800f840:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f844:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f848:	f7fb fc36 	bl	800b0b8 <ucdr_init_buffer>
 800f84c:	a993      	add	r1, sp, #588	@ 0x24c
 800f84e:	a806      	add	r0, sp, #24
 800f850:	f002 fc6c 	bl	801212c <uxr_serialize_OBJK_Subscriber_Binary>
 800f854:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f856:	9700      	str	r7, [sp, #0]
 800f858:	9401      	str	r4, [sp, #4]
 800f85a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f85e:	4628      	mov	r0, r5
 800f860:	b2b3      	uxth	r3, r6
 800f862:	60e6      	str	r6, [r4, #12]
 800f864:	f7ff ff42 	bl	800f6ec <uxr_common_create_entity>
 800f868:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86e:	bf00      	nop

0800f870 <uxr_buffer_create_datareader_bin>:
 800f870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f874:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f878:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f87a:	2506      	movs	r5, #6
 800f87c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f880:	9105      	str	r1, [sp, #20]
 800f882:	4606      	mov	r6, r0
 800f884:	a9a3      	add	r1, sp, #652	@ 0x28c
 800f886:	4618      	mov	r0, r3
 800f888:	7125      	strb	r5, [r4, #4]
 800f88a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800f88e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800f892:	2703      	movs	r7, #3
 800f894:	f000 f948 	bl	800fb28 <uxr_object_id_to_raw>
 800f898:	a90e      	add	r1, sp, #56	@ 0x38
 800f89a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800f89c:	7227      	strb	r7, [r4, #8]
 800f89e:	f000 f943 	bl	800fb28 <uxr_object_id_to_raw>
 800f8a2:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f8a6:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 800f8aa:	3d00      	subs	r5, #0
 800f8ac:	f04f 0300 	mov.w	r3, #0
 800f8b0:	bf18      	it	ne
 800f8b2:	2501      	movne	r5, #1
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f8ba:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800f8be:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800f8c2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f8c6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f8ca:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f8ce:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f8d2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f8d6:	bb89      	cbnz	r1, 800f93c <uxr_buffer_create_datareader_bin+0xcc>
 800f8d8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f8dc:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f8e0:	f04f 0c13 	mov.w	ip, #19
 800f8e4:	250b      	movs	r5, #11
 800f8e6:	2221      	movs	r2, #33	@ 0x21
 800f8e8:	2111      	movs	r1, #17
 800f8ea:	2009      	movs	r0, #9
 800f8ec:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800f8f0:	b923      	cbnz	r3, 800f8fc <uxr_buffer_create_datareader_bin+0x8c>
 800f8f2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f8f6:	4672      	mov	r2, lr
 800f8f8:	4661      	mov	r1, ip
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800f900:	2b01      	cmp	r3, #1
 800f902:	d025      	beq.n	800f950 <uxr_buffer_create_datareader_bin+0xe0>
 800f904:	2b03      	cmp	r3, #3
 800f906:	d029      	beq.n	800f95c <uxr_buffer_create_datareader_bin+0xec>
 800f908:	b32b      	cbz	r3, 800f956 <uxr_buffer_create_datareader_bin+0xe6>
 800f90a:	a806      	add	r0, sp, #24
 800f90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f910:	a923      	add	r1, sp, #140	@ 0x8c
 800f912:	f7fb fbd1 	bl	800b0b8 <ucdr_init_buffer>
 800f916:	a90e      	add	r1, sp, #56	@ 0x38
 800f918:	a806      	add	r0, sp, #24
 800f91a:	f002 fc7d 	bl	8012218 <uxr_serialize_OBJK_DataReader_Binary>
 800f91e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f920:	9401      	str	r4, [sp, #4]
 800f922:	b283      	uxth	r3, r0
 800f924:	f8cd 8000 	str.w	r8, [sp]
 800f928:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f92c:	60e0      	str	r0, [r4, #12]
 800f92e:	4630      	mov	r0, r6
 800f930:	f7ff fedc 	bl	800f6ec <uxr_common_create_entity>
 800f934:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93c:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f940:	f04f 0c12 	mov.w	ip, #18
 800f944:	250a      	movs	r5, #10
 800f946:	2220      	movs	r2, #32
 800f948:	2110      	movs	r1, #16
 800f94a:	2008      	movs	r0, #8
 800f94c:	2702      	movs	r7, #2
 800f94e:	e7cd      	b.n	800f8ec <uxr_buffer_create_datareader_bin+0x7c>
 800f950:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f954:	e7d9      	b.n	800f90a <uxr_buffer_create_datareader_bin+0x9a>
 800f956:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f95a:	e7d6      	b.n	800f90a <uxr_buffer_create_datareader_bin+0x9a>
 800f95c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f960:	e7d3      	b.n	800f90a <uxr_buffer_create_datareader_bin+0x9a>
 800f962:	bf00      	nop

0800f964 <get_custom_error>:
 800f964:	4b01      	ldr	r3, [pc, #4]	@ (800f96c <get_custom_error+0x8>)
 800f966:	7818      	ldrb	r0, [r3, #0]
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	20009218 	.word	0x20009218

0800f970 <recv_custom_msg>:
 800f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800f978:	b089      	sub	sp, #36	@ 0x24
 800f97a:	2600      	movs	r6, #0
 800f97c:	4604      	mov	r4, r0
 800f97e:	9305      	str	r3, [sp, #20]
 800f980:	468a      	mov	sl, r1
 800f982:	4693      	mov	fp, r2
 800f984:	f88d 601e 	strb.w	r6, [sp, #30]
 800f988:	b325      	cbz	r5, 800f9d4 <recv_custom_msg+0x64>
 800f98a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800f98e:	f10d 081f 	add.w	r8, sp, #31
 800f992:	af05      	add	r7, sp, #20
 800f994:	f10d 061e 	add.w	r6, sp, #30
 800f998:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800f99c:	e002      	b.n	800f9a4 <recv_custom_msg+0x34>
 800f99e:	9b05      	ldr	r3, [sp, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	dd0f      	ble.n	800f9c4 <recv_custom_msg+0x54>
 800f9a4:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f9a8:	e9cd 5600 	strd	r5, r6, [sp]
 800f9ac:	4623      	mov	r3, r4
 800f9ae:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800f9b2:	4622      	mov	r2, r4
 800f9b4:	4648      	mov	r0, r9
 800f9b6:	f001 fc7d 	bl	80112b4 <uxr_read_framed_msg>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d0ef      	beq.n	800f99e <recv_custom_msg+0x2e>
 800f9be:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f9c2:	b1b3      	cbz	r3, 800f9f2 <recv_custom_msg+0x82>
 800f9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800fa04 <recv_custom_msg+0x94>)
 800f9c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f9ca:	701a      	strb	r2, [r3, #0]
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	b009      	add	sp, #36	@ 0x24
 800f9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d4:	f10d 021f 	add.w	r2, sp, #31
 800f9d8:	9200      	str	r2, [sp, #0]
 800f9da:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800f9de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9e2:	4601      	mov	r1, r0
 800f9e4:	47a8      	blx	r5
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d0ec      	beq.n	800f9c4 <recv_custom_msg+0x54>
 800f9ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e8      	bne.n	800f9c4 <recv_custom_msg+0x54>
 800f9f2:	f8cb 0000 	str.w	r0, [fp]
 800f9f6:	2001      	movs	r0, #1
 800f9f8:	f8ca 4000 	str.w	r4, [sl]
 800f9fc:	b009      	add	sp, #36	@ 0x24
 800f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa02:	bf00      	nop
 800fa04:	20009218 	.word	0x20009218

0800fa08 <send_custom_msg>:
 800fa08:	b570      	push	{r4, r5, r6, lr}
 800fa0a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800fa0e:	b086      	sub	sp, #24
 800fa10:	4616      	mov	r6, r2
 800fa12:	b975      	cbnz	r5, 800fa32 <send_custom_msg+0x2a>
 800fa14:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fa18:	f10d 0317 	add.w	r3, sp, #23
 800fa1c:	47a0      	blx	r4
 800fa1e:	b108      	cbz	r0, 800fa24 <send_custom_msg+0x1c>
 800fa20:	42b0      	cmp	r0, r6
 800fa22:	d015      	beq.n	800fa50 <send_custom_msg+0x48>
 800fa24:	4b0c      	ldr	r3, [pc, #48]	@ (800fa58 <send_custom_msg+0x50>)
 800fa26:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fa2a:	701a      	strb	r2, [r3, #0]
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	b006      	add	sp, #24
 800fa30:	bd70      	pop	{r4, r5, r6, pc}
 800fa32:	460b      	mov	r3, r1
 800fa34:	2200      	movs	r2, #0
 800fa36:	f10d 0117 	add.w	r1, sp, #23
 800fa3a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fa3e:	9600      	str	r6, [sp, #0]
 800fa40:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800fa44:	4602      	mov	r2, r0
 800fa46:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fa4a:	f001 fa4b 	bl	8010ee4 <uxr_write_framed_msg>
 800fa4e:	e7e6      	b.n	800fa1e <send_custom_msg+0x16>
 800fa50:	2001      	movs	r0, #1
 800fa52:	b006      	add	sp, #24
 800fa54:	bd70      	pop	{r4, r5, r6, pc}
 800fa56:	bf00      	nop
 800fa58:	20009218 	.word	0x20009218

0800fa5c <uxr_set_custom_transport_callbacks>:
 800fa5c:	b430      	push	{r4, r5}
 800fa5e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800fa62:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fa66:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 800fa6a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fa6e:	bc30      	pop	{r4, r5}
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop

0800fa74 <uxr_init_custom_transport>:
 800fa74:	b538      	push	{r3, r4, r5, lr}
 800fa76:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fa7a:	b303      	cbz	r3, 800fabe <uxr_init_custom_transport+0x4a>
 800fa7c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fa80:	4604      	mov	r4, r0
 800fa82:	b1e2      	cbz	r2, 800fabe <uxr_init_custom_transport+0x4a>
 800fa84:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fa88:	b1ca      	cbz	r2, 800fabe <uxr_init_custom_transport+0x4a>
 800fa8a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fa8e:	b1b2      	cbz	r2, 800fabe <uxr_init_custom_transport+0x4a>
 800fa90:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fa94:	4798      	blx	r3
 800fa96:	4605      	mov	r5, r0
 800fa98:	b188      	cbz	r0, 800fabe <uxr_init_custom_transport+0x4a>
 800fa9a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800fa9e:	b98b      	cbnz	r3, 800fac4 <uxr_init_custom_transport+0x50>
 800faa0:	480b      	ldr	r0, [pc, #44]	@ (800fad0 <uxr_init_custom_transport+0x5c>)
 800faa2:	490c      	ldr	r1, [pc, #48]	@ (800fad4 <uxr_init_custom_transport+0x60>)
 800faa4:	4a0c      	ldr	r2, [pc, #48]	@ (800fad8 <uxr_init_custom_transport+0x64>)
 800faa6:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 800faaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800faae:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 800fab2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800fab6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800faba:	4628      	mov	r0, r5
 800fabc:	bd38      	pop	{r3, r4, r5, pc}
 800fabe:	2500      	movs	r5, #0
 800fac0:	4628      	mov	r0, r5
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	2100      	movs	r1, #0
 800fac6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800faca:	f001 fa05 	bl	8010ed8 <uxr_init_framing_io>
 800face:	e7e7      	b.n	800faa0 <uxr_init_custom_transport+0x2c>
 800fad0:	0800fa09 	.word	0x0800fa09
 800fad4:	0800f971 	.word	0x0800f971
 800fad8:	0800f965 	.word	0x0800f965

0800fadc <uxr_close_custom_transport>:
 800fadc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800fae0:	4718      	bx	r3
 800fae2:	bf00      	nop

0800fae4 <uxr_object_id>:
 800fae4:	b082      	sub	sp, #8
 800fae6:	2300      	movs	r3, #0
 800fae8:	f88d 1006 	strb.w	r1, [sp, #6]
 800faec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800faf0:	f360 030f 	bfi	r3, r0, #0, #16
 800faf4:	f362 431f 	bfi	r3, r2, #16, #16
 800faf8:	4618      	mov	r0, r3
 800fafa:	b002      	add	sp, #8
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop

0800fb00 <uxr_object_id_from_raw>:
 800fb00:	7843      	ldrb	r3, [r0, #1]
 800fb02:	7801      	ldrb	r1, [r0, #0]
 800fb04:	b082      	sub	sp, #8
 800fb06:	f003 000f 	and.w	r0, r3, #15
 800fb0a:	f88d 0006 	strb.w	r0, [sp, #6]
 800fb0e:	091b      	lsrs	r3, r3, #4
 800fb10:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fb14:	2200      	movs	r2, #0
 800fb16:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800fb1a:	f363 020f 	bfi	r2, r3, #0, #16
 800fb1e:	f361 421f 	bfi	r2, r1, #16, #16
 800fb22:	4610      	mov	r0, r2
 800fb24:	b002      	add	sp, #8
 800fb26:	4770      	bx	lr

0800fb28 <uxr_object_id_to_raw>:
 800fb28:	4602      	mov	r2, r0
 800fb2a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fb2e:	b082      	sub	sp, #8
 800fb30:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800fb34:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800fb38:	700a      	strb	r2, [r1, #0]
 800fb3a:	704b      	strb	r3, [r1, #1]
 800fb3c:	b002      	add	sp, #8
 800fb3e:	4770      	bx	lr

0800fb40 <uxr_buffer_request_data>:
 800fb40:	b530      	push	{r4, r5, lr}
 800fb42:	b095      	sub	sp, #84	@ 0x54
 800fb44:	4604      	mov	r4, r0
 800fb46:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800fb48:	9105      	str	r1, [sp, #20]
 800fb4a:	2d00      	cmp	r5, #0
 800fb4c:	bf14      	ite	ne
 800fb4e:	2101      	movne	r1, #1
 800fb50:	2100      	moveq	r1, #0
 800fb52:	9204      	str	r2, [sp, #16]
 800fb54:	f04f 0200 	mov.w	r2, #0
 800fb58:	9303      	str	r3, [sp, #12]
 800fb5a:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb5e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fb62:	f88d 201d 	strb.w	r2, [sp, #29]
 800fb66:	f88d 201e 	strb.w	r2, [sp, #30]
 800fb6a:	d021      	beq.n	800fbb0 <uxr_buffer_request_data+0x70>
 800fb6c:	686a      	ldr	r2, [r5, #4]
 800fb6e:	682b      	ldr	r3, [r5, #0]
 800fb70:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 800fb74:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800fb78:	2210      	movs	r2, #16
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	2108      	movs	r1, #8
 800fb7e:	e9cd 1000 	strd	r1, r0, [sp]
 800fb82:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb84:	9905      	ldr	r1, [sp, #20]
 800fb86:	4620      	mov	r0, r4
 800fb88:	f001 f83c 	bl	8010c04 <uxr_prepare_stream_to_write_submessage>
 800fb8c:	b918      	cbnz	r0, 800fb96 <uxr_buffer_request_data+0x56>
 800fb8e:	4604      	mov	r4, r0
 800fb90:	4620      	mov	r0, r4
 800fb92:	b015      	add	sp, #84	@ 0x54
 800fb94:	bd30      	pop	{r4, r5, pc}
 800fb96:	9904      	ldr	r1, [sp, #16]
 800fb98:	aa06      	add	r2, sp, #24
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f001 f96c 	bl	8010e78 <uxr_init_base_object_request>
 800fba0:	a906      	add	r1, sp, #24
 800fba2:	4604      	mov	r4, r0
 800fba4:	a80c      	add	r0, sp, #48	@ 0x30
 800fba6:	f002 fe9d 	bl	80128e4 <uxr_serialize_READ_DATA_Payload>
 800fbaa:	4620      	mov	r0, r4
 800fbac:	b015      	add	sp, #84	@ 0x54
 800fbae:	bd30      	pop	{r4, r5, pc}
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	e7e2      	b.n	800fb7a <uxr_buffer_request_data+0x3a>

0800fbb4 <uxr_buffer_cancel_data>:
 800fbb4:	b530      	push	{r4, r5, lr}
 800fbb6:	b095      	sub	sp, #84	@ 0x54
 800fbb8:	2400      	movs	r4, #0
 800fbba:	2308      	movs	r3, #8
 800fbbc:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	9205      	str	r2, [sp, #20]
 800fbc4:	2501      	movs	r5, #1
 800fbc6:	ab0c      	add	r3, sp, #48	@ 0x30
 800fbc8:	2210      	movs	r2, #16
 800fbca:	f8ad 401c 	strh.w	r4, [sp, #28]
 800fbce:	f88d 401e 	strb.w	r4, [sp, #30]
 800fbd2:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 800fbd6:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 800fbda:	9103      	str	r1, [sp, #12]
 800fbdc:	4604      	mov	r4, r0
 800fbde:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800fbe2:	f001 f80f 	bl	8010c04 <uxr_prepare_stream_to_write_submessage>
 800fbe6:	b918      	cbnz	r0, 800fbf0 <uxr_buffer_cancel_data+0x3c>
 800fbe8:	4604      	mov	r4, r0
 800fbea:	4620      	mov	r0, r4
 800fbec:	b015      	add	sp, #84	@ 0x54
 800fbee:	bd30      	pop	{r4, r5, pc}
 800fbf0:	9905      	ldr	r1, [sp, #20]
 800fbf2:	aa06      	add	r2, sp, #24
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f001 f93f 	bl	8010e78 <uxr_init_base_object_request>
 800fbfa:	a906      	add	r1, sp, #24
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	a80c      	add	r0, sp, #48	@ 0x30
 800fc00:	f002 fe70 	bl	80128e4 <uxr_serialize_READ_DATA_Payload>
 800fc04:	4620      	mov	r0, r4
 800fc06:	b015      	add	sp, #84	@ 0x54
 800fc08:	bd30      	pop	{r4, r5, pc}
 800fc0a:	bf00      	nop

0800fc0c <read_submessage_format>:
 800fc0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc10:	b095      	sub	sp, #84	@ 0x54
 800fc12:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 800fc16:	b113      	cbz	r3, 800fc1e <read_submessage_format+0x12>
 800fc18:	b015      	add	sp, #84	@ 0x54
 800fc1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc1e:	460c      	mov	r4, r1
 800fc20:	4616      	mov	r6, r2
 800fc22:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800fc26:	461d      	mov	r5, r3
 800fc28:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800fc2a:	9304      	str	r3, [sp, #16]
 800fc2c:	1a52      	subs	r2, r2, r1
 800fc2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc30:	9305      	str	r3, [sp, #20]
 800fc32:	4607      	mov	r7, r0
 800fc34:	a80c      	add	r0, sp, #48	@ 0x30
 800fc36:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800fc3a:	f7fb fa3d 	bl	800b0b8 <ucdr_init_buffer>
 800fc3e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fc42:	a80c      	add	r0, sp, #48	@ 0x30
 800fc44:	f7fb fa0e 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 800fc48:	69e3      	ldr	r3, [r4, #28]
 800fc4a:	b193      	cbz	r3, 800fc72 <read_submessage_format+0x66>
 800fc4c:	f1b8 0f07 	cmp.w	r8, #7
 800fc50:	751d      	strb	r5, [r3, #20]
 800fc52:	d03e      	beq.n	800fcd2 <read_submessage_format+0xc6>
 800fc54:	f1b8 0f08 	cmp.w	r8, #8
 800fc58:	d02c      	beq.n	800fcb4 <read_submessage_format+0xa8>
 800fc5a:	f1b8 0f06 	cmp.w	r8, #6
 800fc5e:	d011      	beq.n	800fc84 <read_submessage_format+0x78>
 800fc60:	2201      	movs	r2, #1
 800fc62:	751a      	strb	r2, [r3, #20]
 800fc64:	4631      	mov	r1, r6
 800fc66:	4620      	mov	r0, r4
 800fc68:	f7fb fa76 	bl	800b158 <ucdr_advance_buffer>
 800fc6c:	b015      	add	sp, #84	@ 0x54
 800fc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc72:	f1b8 0f07 	cmp.w	r8, #7
 800fc76:	d02c      	beq.n	800fcd2 <read_submessage_format+0xc6>
 800fc78:	f1b8 0f08 	cmp.w	r8, #8
 800fc7c:	d01a      	beq.n	800fcb4 <read_submessage_format+0xa8>
 800fc7e:	f1b8 0f06 	cmp.w	r8, #6
 800fc82:	d1ef      	bne.n	800fc64 <read_submessage_format+0x58>
 800fc84:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800fc88:	b18d      	cbz	r5, 800fcae <read_submessage_format+0xa2>
 800fc8a:	2306      	movs	r3, #6
 800fc8c:	f88d 3016 	strb.w	r3, [sp, #22]
 800fc90:	aa0c      	add	r2, sp, #48	@ 0x30
 800fc92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc96:	9302      	str	r3, [sp, #8]
 800fc98:	9200      	str	r2, [sp, #0]
 800fc9a:	9b04      	ldr	r3, [sp, #16]
 800fc9c:	9905      	ldr	r1, [sp, #20]
 800fc9e:	9601      	str	r6, [sp, #4]
 800fca0:	464a      	mov	r2, r9
 800fca2:	4638      	mov	r0, r7
 800fca4:	47a8      	blx	r5
 800fca6:	2301      	movs	r3, #1
 800fca8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fcac:	69e3      	ldr	r3, [r4, #28]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1d6      	bne.n	800fc60 <read_submessage_format+0x54>
 800fcb2:	e7d7      	b.n	800fc64 <read_submessage_format+0x58>
 800fcb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800fcb8:	2a00      	cmp	r2, #0
 800fcba:	d0f8      	beq.n	800fcae <read_submessage_format+0xa2>
 800fcbc:	a906      	add	r1, sp, #24
 800fcbe:	a80c      	add	r0, sp, #48	@ 0x30
 800fcc0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fcc2:	f002 fed5 	bl	8012a70 <uxr_deserialize_SampleIdentity>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d13c      	bne.n	800fd44 <read_submessage_format+0x138>
 800fcca:	69e3      	ldr	r3, [r4, #28]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1c7      	bne.n	800fc60 <read_submessage_format+0x54>
 800fcd0:	e7c8      	b.n	800fc64 <read_submessage_format+0x58>
 800fcd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fcd6:	b132      	cbz	r2, 800fce6 <read_submessage_format+0xda>
 800fcd8:	a906      	add	r1, sp, #24
 800fcda:	a80c      	add	r0, sp, #48	@ 0x30
 800fcdc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800fcde:	f002 fb85 	bl	80123ec <uxr_deserialize_BaseObjectRequest>
 800fce2:	b930      	cbnz	r0, 800fcf2 <read_submessage_format+0xe6>
 800fce4:	69e3      	ldr	r3, [r4, #28]
 800fce6:	68a2      	ldr	r2, [r4, #8]
 800fce8:	4432      	add	r2, r6
 800fcea:	60a2      	str	r2, [r4, #8]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1b7      	bne.n	800fc60 <read_submessage_format+0x54>
 800fcf0:	e7b8      	b.n	800fc64 <read_submessage_format+0x58>
 800fcf2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fcf6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fcf8:	1a52      	subs	r2, r2, r1
 800fcfa:	a80c      	add	r0, sp, #48	@ 0x30
 800fcfc:	1aed      	subs	r5, r5, r3
 800fcfe:	f7fb f9db 	bl	800b0b8 <ucdr_init_buffer>
 800fd02:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fd06:	a80c      	add	r0, sp, #48	@ 0x30
 800fd08:	f7fb f9ac 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 800fd0c:	4435      	add	r5, r6
 800fd0e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800fd12:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fd16:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800fd1a:	9002      	str	r0, [sp, #8]
 800fd1c:	2207      	movs	r2, #7
 800fd1e:	f88d 2016 	strb.w	r2, [sp, #22]
 800fd22:	b2ad      	uxth	r5, r5
 800fd24:	aa0c      	add	r2, sp, #48	@ 0x30
 800fd26:	9200      	str	r2, [sp, #0]
 800fd28:	9501      	str	r5, [sp, #4]
 800fd2a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	9905      	ldr	r1, [sp, #20]
 800fd32:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 800fd36:	464a      	mov	r2, r9
 800fd38:	4638      	mov	r0, r7
 800fd3a:	47a8      	blx	r5
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fd42:	e7cf      	b.n	800fce4 <read_submessage_format+0xd8>
 800fd44:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fd48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd4a:	1a52      	subs	r2, r2, r1
 800fd4c:	a80c      	add	r0, sp, #48	@ 0x30
 800fd4e:	1aed      	subs	r5, r5, r3
 800fd50:	f7fb f9b2 	bl	800b0b8 <ucdr_init_buffer>
 800fd54:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fd58:	a80c      	add	r0, sp, #48	@ 0x30
 800fd5a:	f7fb f983 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 800fd5e:	4435      	add	r5, r6
 800fd60:	2308      	movs	r3, #8
 800fd62:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800fd66:	f88d 3016 	strb.w	r3, [sp, #22]
 800fd6a:	b2ad      	uxth	r5, r5
 800fd6c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	9002      	str	r0, [sp, #8]
 800fd72:	9501      	str	r5, [sp, #4]
 800fd74:	ab06      	add	r3, sp, #24
 800fd76:	9905      	ldr	r1, [sp, #20]
 800fd78:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 800fd7c:	464a      	mov	r2, r9
 800fd7e:	4638      	mov	r0, r7
 800fd80:	47a8      	blx	r5
 800fd82:	2301      	movs	r3, #1
 800fd84:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800fd88:	e79f      	b.n	800fcca <read_submessage_format+0xbe>
 800fd8a:	bf00      	nop

0800fd8c <on_get_fragmentation_info>:
 800fd8c:	b500      	push	{lr}
 800fd8e:	b08b      	sub	sp, #44	@ 0x2c
 800fd90:	4601      	mov	r1, r0
 800fd92:	2204      	movs	r2, #4
 800fd94:	a802      	add	r0, sp, #8
 800fd96:	f7fb f98f 	bl	800b0b8 <ucdr_init_buffer>
 800fd9a:	f10d 0305 	add.w	r3, sp, #5
 800fd9e:	a802      	add	r0, sp, #8
 800fda0:	f10d 0206 	add.w	r2, sp, #6
 800fda4:	a901      	add	r1, sp, #4
 800fda6:	f001 fe69 	bl	8011a7c <uxr_read_submessage_header>
 800fdaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fdae:	2b0d      	cmp	r3, #13
 800fdb0:	d003      	beq.n	800fdba <on_get_fragmentation_info+0x2e>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	b00b      	add	sp, #44	@ 0x2c
 800fdb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdbe:	f013 0f02 	tst.w	r3, #2
 800fdc2:	bf14      	ite	ne
 800fdc4:	2002      	movne	r0, #2
 800fdc6:	2001      	moveq	r0, #1
 800fdc8:	b00b      	add	sp, #44	@ 0x2c
 800fdca:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdce:	bf00      	nop

0800fdd0 <read_submessage_get_info>:
 800fdd0:	b570      	push	{r4, r5, r6, lr}
 800fdd2:	2500      	movs	r5, #0
 800fdd4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800fdd8:	4604      	mov	r4, r0
 800fdda:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800fdde:	460e      	mov	r6, r1
 800fde0:	a810      	add	r0, sp, #64	@ 0x40
 800fde2:	4629      	mov	r1, r5
 800fde4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800fde8:	f004 fba2 	bl	8014530 <memset>
 800fdec:	a903      	add	r1, sp, #12
 800fdee:	4630      	mov	r0, r6
 800fdf0:	f002 fcba 	bl	8012768 <uxr_deserialize_GET_INFO_Payload>
 800fdf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fdf8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f001 f833 	bl	8010e68 <uxr_session_header_offset>
 800fe02:	462b      	mov	r3, r5
 800fe04:	9000      	str	r0, [sp, #0]
 800fe06:	a905      	add	r1, sp, #20
 800fe08:	a808      	add	r0, sp, #32
 800fe0a:	220c      	movs	r2, #12
 800fe0c:	f7fb f942 	bl	800b094 <ucdr_init_buffer_origin_offset>
 800fe10:	a910      	add	r1, sp, #64	@ 0x40
 800fe12:	a808      	add	r0, sp, #32
 800fe14:	f002 fd1a 	bl	801284c <uxr_serialize_INFO_Payload>
 800fe18:	9b08      	ldr	r3, [sp, #32]
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 ffca 	bl	8010db8 <uxr_stamp_session_header>
 800fe24:	a808      	add	r0, sp, #32
 800fe26:	f7fb f973 	bl	800b110 <ucdr_buffer_length>
 800fe2a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	a905      	add	r1, sp, #20
 800fe30:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fe34:	47a0      	blx	r4
 800fe36:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800fe3a:	bd70      	pop	{r4, r5, r6, pc}

0800fe3c <write_submessage_acknack.isra.0>:
 800fe3c:	b570      	push	{r4, r5, r6, lr}
 800fe3e:	b092      	sub	sp, #72	@ 0x48
 800fe40:	4605      	mov	r5, r0
 800fe42:	460e      	mov	r6, r1
 800fe44:	4614      	mov	r4, r2
 800fe46:	f001 f80f 	bl	8010e68 <uxr_session_header_offset>
 800fe4a:	a905      	add	r1, sp, #20
 800fe4c:	9000      	str	r0, [sp, #0]
 800fe4e:	2300      	movs	r3, #0
 800fe50:	a80a      	add	r0, sp, #40	@ 0x28
 800fe52:	2211      	movs	r2, #17
 800fe54:	f7fb f91e 	bl	800b094 <ucdr_init_buffer_origin_offset>
 800fe58:	2218      	movs	r2, #24
 800fe5a:	fb02 5404 	mla	r4, r2, r4, r5
 800fe5e:	2300      	movs	r3, #0
 800fe60:	2205      	movs	r2, #5
 800fe62:	3450      	adds	r4, #80	@ 0x50
 800fe64:	a80a      	add	r0, sp, #40	@ 0x28
 800fe66:	210a      	movs	r1, #10
 800fe68:	f001 fdee 	bl	8011a48 <uxr_buffer_submessage_header>
 800fe6c:	a903      	add	r1, sp, #12
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f003 fbfa 	bl	8013668 <uxr_compute_acknack>
 800fe74:	a903      	add	r1, sp, #12
 800fe76:	ba43      	rev16	r3, r0
 800fe78:	a80a      	add	r0, sp, #40	@ 0x28
 800fe7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fe7e:	f88d 6010 	strb.w	r6, [sp, #16]
 800fe82:	f002 fd53 	bl	801292c <uxr_serialize_ACKNACK_Payload>
 800fe86:	2200      	movs	r2, #0
 800fe88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f000 ff93 	bl	8010db8 <uxr_stamp_session_header>
 800fe92:	a80a      	add	r0, sp, #40	@ 0x28
 800fe94:	f7fb f93c 	bl	800b110 <ucdr_buffer_length>
 800fe98:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	a905      	add	r1, sp, #20
 800fe9e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fea2:	47a0      	blx	r4
 800fea4:	b012      	add	sp, #72	@ 0x48
 800fea6:	bd70      	pop	{r4, r5, r6, pc}

0800fea8 <uxr_init_session>:
 800fea8:	b5d0      	push	{r4, r6, r7, lr}
 800feaa:	2300      	movs	r3, #0
 800feac:	2600      	movs	r6, #0
 800feae:	2700      	movs	r7, #0
 800feb0:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 800feb4:	4604      	mov	r4, r0
 800feb6:	6701      	str	r1, [r0, #112]	@ 0x70
 800feb8:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 800febc:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 800fec0:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 800fec4:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 800fec8:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 800fecc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800fed0:	2181      	movs	r1, #129	@ 0x81
 800fed2:	f000 fedb 	bl	8010c8c <uxr_init_session_info>
 800fed6:	f104 0008 	add.w	r0, r4, #8
 800feda:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800fede:	f001 bccf 	b.w	8011880 <uxr_init_stream_storage>
 800fee2:	bf00      	nop

0800fee4 <uxr_set_status_callback>:
 800fee4:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop

0800feec <uxr_set_topic_callback>:
 800feec:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop

0800fef4 <uxr_set_request_callback>:
 800fef4:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop

0800fefc <uxr_set_reply_callback>:
 800fefc:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop

0800ff04 <uxr_create_output_best_effort_stream>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	e9cd 2100 	strd	r2, r1, [sp]
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	f000 ffab 	bl	8010e68 <uxr_session_header_offset>
 800ff12:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ff16:	4603      	mov	r3, r0
 800ff18:	f104 0008 	add.w	r0, r4, #8
 800ff1c:	b004      	add	sp, #16
 800ff1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff22:	f001 bcf7 	b.w	8011914 <uxr_add_output_best_effort_buffer>
 800ff26:	bf00      	nop

0800ff28 <uxr_create_output_reliable_stream>:
 800ff28:	b530      	push	{r4, r5, lr}
 800ff2a:	b089      	sub	sp, #36	@ 0x24
 800ff2c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ff30:	9303      	str	r3, [sp, #12]
 800ff32:	4604      	mov	r4, r0
 800ff34:	f000 ff98 	bl	8010e68 <uxr_session_header_offset>
 800ff38:	4605      	mov	r5, r0
 800ff3a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ff3e:	9905      	ldr	r1, [sp, #20]
 800ff40:	9500      	str	r5, [sp, #0]
 800ff42:	f104 0008 	add.w	r0, r4, #8
 800ff46:	f001 fcf7 	bl	8011938 <uxr_add_output_reliable_buffer>
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	b2c3      	uxtb	r3, r0
 800ff4e:	f363 0207 	bfi	r2, r3, #0, #8
 800ff52:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ff56:	f363 220f 	bfi	r2, r3, #8, #8
 800ff5a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ff5e:	f363 4217 	bfi	r2, r3, #16, #8
 800ff62:	0e03      	lsrs	r3, r0, #24
 800ff64:	f363 621f 	bfi	r2, r3, #24, #8
 800ff68:	4610      	mov	r0, r2
 800ff6a:	b009      	add	sp, #36	@ 0x24
 800ff6c:	bd30      	pop	{r4, r5, pc}
 800ff6e:	bf00      	nop

0800ff70 <uxr_create_input_best_effort_stream>:
 800ff70:	b082      	sub	sp, #8
 800ff72:	3008      	adds	r0, #8
 800ff74:	b002      	add	sp, #8
 800ff76:	f001 bcf9 	b.w	801196c <uxr_add_input_best_effort_buffer>
 800ff7a:	bf00      	nop

0800ff7c <uxr_create_input_reliable_stream>:
 800ff7c:	b510      	push	{r4, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	4c0b      	ldr	r4, [pc, #44]	@ (800ffb0 <uxr_create_input_reliable_stream+0x34>)
 800ff82:	9400      	str	r4, [sp, #0]
 800ff84:	3008      	adds	r0, #8
 800ff86:	f001 fd07 	bl	8011998 <uxr_add_input_reliable_buffer>
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	b2c3      	uxtb	r3, r0
 800ff8e:	f363 0207 	bfi	r2, r3, #0, #8
 800ff92:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ff96:	f363 220f 	bfi	r2, r3, #8, #8
 800ff9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ff9e:	f363 4217 	bfi	r2, r3, #16, #8
 800ffa2:	0e03      	lsrs	r3, r0, #24
 800ffa4:	f363 621f 	bfi	r2, r3, #24, #8
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	b004      	add	sp, #16
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	bf00      	nop
 800ffb0:	0800fd8d 	.word	0x0800fd8d

0800ffb4 <uxr_epoch_nanos>:
 800ffb4:	b510      	push	{r4, lr}
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	f001 fda8 	bl	8011b0c <uxr_nanos>
 800ffbc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ffc0:	1ac0      	subs	r0, r0, r3
 800ffc2:	eb61 0102 	sbc.w	r1, r1, r2
 800ffc6:	bd10      	pop	{r4, pc}

0800ffc8 <uxr_flash_output_streams>:
 800ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffcc:	7e03      	ldrb	r3, [r0, #24]
 800ffce:	b084      	sub	sp, #16
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	b1fb      	cbz	r3, 8010014 <uxr_flash_output_streams+0x4c>
 800ffd4:	f04f 0900 	mov.w	r9, #0
 800ffd8:	4648      	mov	r0, r9
 800ffda:	f10d 0802 	add.w	r8, sp, #2
 800ffde:	af03      	add	r7, sp, #12
 800ffe0:	ae02      	add	r6, sp, #8
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ffea:	f001 fbf3 	bl	80117d4 <uxr_stream_id>
 800ffee:	3508      	adds	r5, #8
 800fff0:	4684      	mov	ip, r0
 800fff2:	4643      	mov	r3, r8
 800fff4:	4628      	mov	r0, r5
 800fff6:	463a      	mov	r2, r7
 800fff8:	4631      	mov	r1, r6
 800fffa:	f8cd c004 	str.w	ip, [sp, #4]
 800fffe:	f003 fbbb 	bl	8013778 <uxr_prepare_best_effort_buffer_to_send>
 8010002:	2800      	cmp	r0, #0
 8010004:	d13d      	bne.n	8010082 <uxr_flash_output_streams+0xba>
 8010006:	7e23      	ldrb	r3, [r4, #24]
 8010008:	f109 0901 	add.w	r9, r9, #1
 801000c:	fa5f f089 	uxtb.w	r0, r9
 8010010:	4283      	cmp	r3, r0
 8010012:	d8e6      	bhi.n	800ffe2 <uxr_flash_output_streams+0x1a>
 8010014:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010018:	b383      	cbz	r3, 801007c <uxr_flash_output_streams+0xb4>
 801001a:	f04f 0900 	mov.w	r9, #0
 801001e:	4648      	mov	r0, r9
 8010020:	f10d 0802 	add.w	r8, sp, #2
 8010024:	af03      	add	r7, sp, #12
 8010026:	ae02      	add	r6, sp, #8
 8010028:	2201      	movs	r2, #1
 801002a:	2102      	movs	r1, #2
 801002c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010030:	f001 fbd0 	bl	80117d4 <uxr_stream_id>
 8010034:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010038:	3520      	adds	r5, #32
 801003a:	9001      	str	r0, [sp, #4]
 801003c:	e00c      	b.n	8010058 <uxr_flash_output_streams+0x90>
 801003e:	9b02      	ldr	r3, [sp, #8]
 8010040:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010044:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010048:	f000 feb6 	bl	8010db8 <uxr_stamp_session_header>
 801004c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801004e:	9a03      	ldr	r2, [sp, #12]
 8010050:	9902      	ldr	r1, [sp, #8]
 8010052:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010056:	47d0      	blx	sl
 8010058:	4643      	mov	r3, r8
 801005a:	463a      	mov	r2, r7
 801005c:	4631      	mov	r1, r6
 801005e:	4628      	mov	r0, r5
 8010060:	f003 fd9e 	bl	8013ba0 <uxr_prepare_next_reliable_buffer_to_send>
 8010064:	4603      	mov	r3, r0
 8010066:	4620      	mov	r0, r4
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1e8      	bne.n	801003e <uxr_flash_output_streams+0x76>
 801006c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010070:	f109 0901 	add.w	r9, r9, #1
 8010074:	fa5f f089 	uxtb.w	r0, r9
 8010078:	4283      	cmp	r3, r0
 801007a:	d8d5      	bhi.n	8010028 <uxr_flash_output_streams+0x60>
 801007c:	b004      	add	sp, #16
 801007e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010082:	9b02      	ldr	r3, [sp, #8]
 8010084:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010088:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801008c:	4620      	mov	r0, r4
 801008e:	f000 fe93 	bl	8010db8 <uxr_stamp_session_header>
 8010092:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010094:	9a03      	ldr	r2, [sp, #12]
 8010096:	9902      	ldr	r1, [sp, #8]
 8010098:	e9d3 0500 	ldrd	r0, r5, [r3]
 801009c:	47a8      	blx	r5
 801009e:	f109 0901 	add.w	r9, r9, #1
 80100a2:	7e23      	ldrb	r3, [r4, #24]
 80100a4:	fa5f f089 	uxtb.w	r0, r9
 80100a8:	4283      	cmp	r3, r0
 80100aa:	d89a      	bhi.n	800ffe2 <uxr_flash_output_streams+0x1a>
 80100ac:	e7b2      	b.n	8010014 <uxr_flash_output_streams+0x4c>
 80100ae:	bf00      	nop

080100b0 <read_submessage_info>:
 80100b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b4:	460d      	mov	r5, r1
 80100b6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80100ba:	4669      	mov	r1, sp
 80100bc:	4607      	mov	r7, r0
 80100be:	4628      	mov	r0, r5
 80100c0:	f002 fa58 	bl	8012574 <uxr_deserialize_BaseObjectReply>
 80100c4:	a902      	add	r1, sp, #8
 80100c6:	4604      	mov	r4, r0
 80100c8:	4628      	mov	r0, r5
 80100ca:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80100ce:	f7f9 fedb 	bl	8009e88 <ucdr_deserialize_bool>
 80100d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80100d6:	4004      	ands	r4, r0
 80100d8:	b2e4      	uxtb	r4, r4
 80100da:	b95b      	cbnz	r3, 80100f4 <read_submessage_info+0x44>
 80100dc:	a987      	add	r1, sp, #540	@ 0x21c
 80100de:	4628      	mov	r0, r5
 80100e0:	f7f9 fed2 	bl	8009e88 <ucdr_deserialize_bool>
 80100e4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80100e8:	4606      	mov	r6, r0
 80100ea:	b94b      	cbnz	r3, 8010100 <read_submessage_info+0x50>
 80100ec:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80100f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f4:	a903      	add	r1, sp, #12
 80100f6:	4628      	mov	r0, r5
 80100f8:	f002 f8ca 	bl	8012290 <uxr_deserialize_ObjectVariant>
 80100fc:	4004      	ands	r4, r0
 80100fe:	e7ed      	b.n	80100dc <read_submessage_info+0x2c>
 8010100:	a988      	add	r1, sp, #544	@ 0x220
 8010102:	4628      	mov	r0, r5
 8010104:	f7f9 fef0 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8010108:	4234      	tst	r4, r6
 801010a:	d0ef      	beq.n	80100ec <read_submessage_info+0x3c>
 801010c:	2800      	cmp	r0, #0
 801010e:	d0ed      	beq.n	80100ec <read_submessage_info+0x3c>
 8010110:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010114:	2b0d      	cmp	r3, #13
 8010116:	d1e9      	bne.n	80100ec <read_submessage_info+0x3c>
 8010118:	4628      	mov	r0, r5
 801011a:	a98a      	add	r1, sp, #552	@ 0x228
 801011c:	f7fa fcb6 	bl	800aa8c <ucdr_deserialize_int16_t>
 8010120:	b140      	cbz	r0, 8010134 <read_submessage_info+0x84>
 8010122:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010126:	2b00      	cmp	r3, #0
 8010128:	dd07      	ble.n	801013a <read_submessage_info+0x8a>
 801012a:	f1b8 0f00 	cmp.w	r8, #0
 801012e:	bf14      	ite	ne
 8010130:	2001      	movne	r0, #1
 8010132:	2002      	moveq	r0, #2
 8010134:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010138:	e7d8      	b.n	80100ec <read_submessage_info+0x3c>
 801013a:	2000      	movs	r0, #0
 801013c:	e7fa      	b.n	8010134 <read_submessage_info+0x84>
 801013e:	bf00      	nop

08010140 <read_submessage_list>:
 8010140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010144:	b098      	sub	sp, #96	@ 0x60
 8010146:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 801044c <read_submessage_list+0x30c>
 801014a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801014c:	4604      	mov	r4, r0
 801014e:	4688      	mov	r8, r1
 8010150:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8010154:	aa0e      	add	r2, sp, #56	@ 0x38
 8010156:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 801015a:	4640      	mov	r0, r8
 801015c:	f001 fc8e 	bl	8011a7c <uxr_read_submessage_header>
 8010160:	2800      	cmp	r0, #0
 8010162:	f000 813d 	beq.w	80103e0 <read_submessage_list+0x2a0>
 8010166:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 801016a:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 801016e:	3b02      	subs	r3, #2
 8010170:	2b0d      	cmp	r3, #13
 8010172:	d8ed      	bhi.n	8010150 <read_submessage_list+0x10>
 8010174:	a101      	add	r1, pc, #4	@ (adr r1, 801017c <read_submessage_list+0x3c>)
 8010176:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801017a:	bf00      	nop
 801017c:	080103d7 	.word	0x080103d7
 8010180:	08010151 	.word	0x08010151
 8010184:	080103c7 	.word	0x080103c7
 8010188:	0801036b 	.word	0x0801036b
 801018c:	08010361 	.word	0x08010361
 8010190:	08010151 	.word	0x08010151
 8010194:	08010151 	.word	0x08010151
 8010198:	080102c3 	.word	0x080102c3
 801019c:	08010255 	.word	0x08010255
 80101a0:	08010213 	.word	0x08010213
 80101a4:	08010151 	.word	0x08010151
 80101a8:	08010151 	.word	0x08010151
 80101ac:	08010151 	.word	0x08010151
 80101b0:	080101b5 	.word	0x080101b5
 80101b4:	a912      	add	r1, sp, #72	@ 0x48
 80101b6:	4640      	mov	r0, r8
 80101b8:	f002 fc08 	bl	80129cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80101bc:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 80101c0:	2d00      	cmp	r5, #0
 80101c2:	f000 8115 	beq.w	80103f0 <read_submessage_list+0x2b0>
 80101c6:	f001 fca1 	bl	8011b0c <uxr_nanos>
 80101ca:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80101cc:	460b      	mov	r3, r1
 80101ce:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80101d0:	2700      	movs	r7, #0
 80101d2:	fbc9 6701 	smlal	r6, r7, r9, r1
 80101d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80101da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80101dc:	4602      	mov	r2, r0
 80101de:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80101e0:	460e      	mov	r6, r1
 80101e2:	2700      	movs	r7, #0
 80101e4:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80101e8:	9106      	str	r1, [sp, #24]
 80101ea:	fbc9 6700 	smlal	r6, r7, r9, r0
 80101ee:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80101f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80101f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80101f6:	2700      	movs	r7, #0
 80101f8:	4608      	mov	r0, r1
 80101fa:	4639      	mov	r1, r7
 80101fc:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010200:	e9cd 0100 	strd	r0, r1, [sp]
 8010204:	4620      	mov	r0, r4
 8010206:	47a8      	blx	r5
 8010208:	f04f 0301 	mov.w	r3, #1
 801020c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010210:	e79e      	b.n	8010150 <read_submessage_list+0x10>
 8010212:	a912      	add	r1, sp, #72	@ 0x48
 8010214:	4640      	mov	r0, r8
 8010216:	f002 fbc7 	bl	80129a8 <uxr_deserialize_HEARTBEAT_Payload>
 801021a:	2100      	movs	r1, #0
 801021c:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010220:	f001 fb02 	bl	8011828 <uxr_stream_id_from_raw>
 8010224:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010228:	4603      	mov	r3, r0
 801022a:	4629      	mov	r1, r5
 801022c:	f104 0008 	add.w	r0, r4, #8
 8010230:	9311      	str	r3, [sp, #68]	@ 0x44
 8010232:	f001 fbe7 	bl	8011a04 <uxr_get_input_reliable_stream>
 8010236:	2800      	cmp	r0, #0
 8010238:	d08a      	beq.n	8010150 <read_submessage_list+0x10>
 801023a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 801023e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8010242:	f003 fa05 	bl	8013650 <uxr_process_heartbeat>
 8010246:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 801024a:	462a      	mov	r2, r5
 801024c:	4620      	mov	r0, r4
 801024e:	f7ff fdf5 	bl	800fe3c <write_submessage_acknack.isra.0>
 8010252:	e77d      	b.n	8010150 <read_submessage_list+0x10>
 8010254:	a912      	add	r1, sp, #72	@ 0x48
 8010256:	4640      	mov	r0, r8
 8010258:	f002 fb7e 	bl	8012958 <uxr_deserialize_ACKNACK_Payload>
 801025c:	2100      	movs	r1, #0
 801025e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8010262:	f001 fae1 	bl	8011828 <uxr_stream_id_from_raw>
 8010266:	4603      	mov	r3, r0
 8010268:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801026c:	f104 0008 	add.w	r0, r4, #8
 8010270:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010272:	f001 fbb1 	bl	80119d8 <uxr_get_output_reliable_stream>
 8010276:	4605      	mov	r5, r0
 8010278:	2800      	cmp	r0, #0
 801027a:	f43f af69 	beq.w	8010150 <read_submessage_list+0x10>
 801027e:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 8010282:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 8010286:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 801028a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801028e:	b289      	uxth	r1, r1
 8010290:	f003 fd2e 	bl	8013cf0 <uxr_process_acknack>
 8010294:	4628      	mov	r0, r5
 8010296:	f003 fcf1 	bl	8013c7c <uxr_begin_output_nack_buffer_it>
 801029a:	af10      	add	r7, sp, #64	@ 0x40
 801029c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80102a0:	e005      	b.n	80102ae <read_submessage_list+0x16e>
 80102a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80102a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80102a6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80102a8:	e9d3 0600 	ldrd	r0, r6, [r3]
 80102ac:	47b0      	blx	r6
 80102ae:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 80102b2:	aa11      	add	r2, sp, #68	@ 0x44
 80102b4:	4639      	mov	r1, r7
 80102b6:	4628      	mov	r0, r5
 80102b8:	f003 fce2 	bl	8013c80 <uxr_next_reliable_nack_buffer_to_send>
 80102bc:	2800      	cmp	r0, #0
 80102be:	d1f0      	bne.n	80102a2 <read_submessage_list+0x162>
 80102c0:	e746      	b.n	8010150 <read_submessage_list+0x10>
 80102c2:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 80102c6:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 80102ca:	af10      	add	r7, sp, #64	@ 0x40
 80102cc:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 80102d0:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 80102d4:	4639      	mov	r1, r7
 80102d6:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80102da:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 80102de:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80102e2:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 80102e6:	4640      	mov	r0, r8
 80102e8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80102ec:	f002 f87e 	bl	80123ec <uxr_deserialize_BaseObjectRequest>
 80102f0:	4638      	mov	r0, r7
 80102f2:	a911      	add	r1, sp, #68	@ 0x44
 80102f4:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 80102f8:	f000 fddc 	bl	8010eb4 <uxr_parse_base_object_request>
 80102fc:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010300:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010302:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 8010306:	9112      	str	r1, [sp, #72]	@ 0x48
 8010308:	3d04      	subs	r5, #4
 801030a:	f006 060e 	and.w	r6, r6, #14
 801030e:	b2ad      	uxth	r5, r5
 8010310:	f1ba 0f00 	cmp.w	sl, #0
 8010314:	d006      	beq.n	8010324 <read_submessage_list+0x1e4>
 8010316:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	463a      	mov	r2, r7
 801031e:	2300      	movs	r3, #0
 8010320:	4620      	mov	r0, r4
 8010322:	47d0      	blx	sl
 8010324:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8010326:	b168      	cbz	r0, 8010344 <read_submessage_list+0x204>
 8010328:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801032a:	2300      	movs	r3, #0
 801032c:	3902      	subs	r1, #2
 801032e:	e002      	b.n	8010336 <read_submessage_list+0x1f6>
 8010330:	3301      	adds	r3, #1
 8010332:	4283      	cmp	r3, r0
 8010334:	d006      	beq.n	8010344 <read_submessage_list+0x204>
 8010336:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 801033a:	42ba      	cmp	r2, r7
 801033c:	d1f8      	bne.n	8010330 <read_submessage_list+0x1f0>
 801033e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8010340:	2100      	movs	r1, #0
 8010342:	54d1      	strb	r1, [r2, r3]
 8010344:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010346:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010348:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801034c:	9302      	str	r3, [sp, #8]
 801034e:	e9cd 1000 	strd	r1, r0, [sp]
 8010352:	4633      	mov	r3, r6
 8010354:	462a      	mov	r2, r5
 8010356:	4641      	mov	r1, r8
 8010358:	4620      	mov	r0, r4
 801035a:	f7ff fc57 	bl	800fc0c <read_submessage_format>
 801035e:	e6f7      	b.n	8010150 <read_submessage_list+0x10>
 8010360:	4641      	mov	r1, r8
 8010362:	4620      	mov	r0, r4
 8010364:	f7ff fea4 	bl	80100b0 <read_submessage_info>
 8010368:	e6f2      	b.n	8010150 <read_submessage_list+0x10>
 801036a:	2a00      	cmp	r2, #0
 801036c:	d03b      	beq.n	80103e6 <read_submessage_list+0x2a6>
 801036e:	a912      	add	r1, sp, #72	@ 0x48
 8010370:	4640      	mov	r0, r8
 8010372:	f002 fa4d 	bl	8012810 <uxr_deserialize_STATUS_Payload>
 8010376:	a910      	add	r1, sp, #64	@ 0x40
 8010378:	aa0f      	add	r2, sp, #60	@ 0x3c
 801037a:	a812      	add	r0, sp, #72	@ 0x48
 801037c:	f000 fd9a 	bl	8010eb4 <uxr_parse_base_object_request>
 8010380:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8010384:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010386:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 801038a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801038e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010390:	b135      	cbz	r5, 80103a0 <read_submessage_list+0x260>
 8010392:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	4632      	mov	r2, r6
 801039a:	463b      	mov	r3, r7
 801039c:	4620      	mov	r0, r4
 801039e:	47a8      	blx	r5
 80103a0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f43f aed4 	beq.w	8010150 <read_submessage_list+0x10>
 80103a8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80103aa:	2100      	movs	r1, #0
 80103ac:	3802      	subs	r0, #2
 80103ae:	e003      	b.n	80103b8 <read_submessage_list+0x278>
 80103b0:	3101      	adds	r1, #1
 80103b2:	4299      	cmp	r1, r3
 80103b4:	f43f aecc 	beq.w	8010150 <read_submessage_list+0x10>
 80103b8:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80103bc:	42b2      	cmp	r2, r6
 80103be:	d1f7      	bne.n	80103b0 <read_submessage_list+0x270>
 80103c0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80103c2:	545f      	strb	r7, [r3, r1]
 80103c4:	e6c4      	b.n	8010150 <read_submessage_list+0x10>
 80103c6:	2a00      	cmp	r2, #0
 80103c8:	f47f aec2 	bne.w	8010150 <read_submessage_list+0x10>
 80103cc:	4641      	mov	r1, r8
 80103ce:	4620      	mov	r0, r4
 80103d0:	f000 fcb4 	bl	8010d3c <uxr_read_create_session_status>
 80103d4:	e6bc      	b.n	8010150 <read_submessage_list+0x10>
 80103d6:	4641      	mov	r1, r8
 80103d8:	4620      	mov	r0, r4
 80103da:	f7ff fcf9 	bl	800fdd0 <read_submessage_get_info>
 80103de:	e6b7      	b.n	8010150 <read_submessage_list+0x10>
 80103e0:	b018      	add	sp, #96	@ 0x60
 80103e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103e6:	4641      	mov	r1, r8
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 fcb3 	bl	8010d54 <uxr_read_delete_session_status>
 80103ee:	e6af      	b.n	8010150 <read_submessage_list+0x10>
 80103f0:	f001 fb8c 	bl	8011b0c <uxr_nanos>
 80103f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80103f6:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80103f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80103fa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80103fc:	2700      	movs	r7, #0
 80103fe:	fbc9 6703 	smlal	r6, r7, r9, r3
 8010402:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010404:	eb16 0c00 	adds.w	ip, r6, r0
 8010408:	4618      	mov	r0, r3
 801040a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801040c:	eb47 0e01 	adc.w	lr, r7, r1
 8010410:	461e      	mov	r6, r3
 8010412:	2100      	movs	r1, #0
 8010414:	2700      	movs	r7, #0
 8010416:	fbc9 0105 	smlal	r0, r1, r9, r5
 801041a:	fbc9 6702 	smlal	r6, r7, r9, r2
 801041e:	1983      	adds	r3, r0, r6
 8010420:	eb41 0207 	adc.w	r2, r1, r7
 8010424:	ebbc 0303 	subs.w	r3, ip, r3
 8010428:	9308      	str	r3, [sp, #32]
 801042a:	eb6e 0302 	sbc.w	r3, lr, r2
 801042e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010430:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010434:	0fd3      	lsrs	r3, r2, #31
 8010436:	18c9      	adds	r1, r1, r3
 8010438:	f142 0200 	adc.w	r2, r2, #0
 801043c:	084b      	lsrs	r3, r1, #1
 801043e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010442:	1052      	asrs	r2, r2, #1
 8010444:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 8010448:	e6de      	b.n	8010208 <read_submessage_list+0xc8>
 801044a:	bf00      	nop
 801044c:	3b9aca00 	.word	0x3b9aca00

08010450 <listen_message_reliably>:
 8010450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010454:	1e0b      	subs	r3, r1, #0
 8010456:	b09d      	sub	sp, #116	@ 0x74
 8010458:	bfb8      	it	lt
 801045a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801045e:	9305      	str	r3, [sp, #20]
 8010460:	4607      	mov	r7, r0
 8010462:	f001 fb37 	bl	8011ad4 <uxr_millis>
 8010466:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 801046a:	4681      	mov	r9, r0
 801046c:	2a00      	cmp	r2, #0
 801046e:	f000 8095 	beq.w	801059c <listen_message_reliably+0x14c>
 8010472:	2600      	movs	r6, #0
 8010474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010478:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801047c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010480:	4630      	mov	r0, r6
 8010482:	4688      	mov	r8, r1
 8010484:	46ca      	mov	sl, r9
 8010486:	e00f      	b.n	80104a8 <listen_message_reliably+0x58>
 8010488:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801048c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010490:	42a2      	cmp	r2, r4
 8010492:	eb73 0105 	sbcs.w	r1, r3, r5
 8010496:	bfb8      	it	lt
 8010498:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 801049c:	3601      	adds	r6, #1
 801049e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80104a2:	b2f0      	uxtb	r0, r6
 80104a4:	4283      	cmp	r3, r0
 80104a6:	d951      	bls.n	801054c <listen_message_reliably+0xfc>
 80104a8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80104ac:	2201      	movs	r2, #1
 80104ae:	2102      	movs	r1, #2
 80104b0:	f001 f990 	bl	80117d4 <uxr_stream_id>
 80104b4:	00e4      	lsls	r4, r4, #3
 80104b6:	f104 0520 	add.w	r5, r4, #32
 80104ba:	443d      	add	r5, r7
 80104bc:	4601      	mov	r1, r0
 80104be:	4643      	mov	r3, r8
 80104c0:	4652      	mov	r2, sl
 80104c2:	4628      	mov	r0, r5
 80104c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80104c6:	f003 fbad 	bl	8013c24 <uxr_update_output_stream_heartbeat_timestamp>
 80104ca:	193b      	adds	r3, r7, r4
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d0db      	beq.n	8010488 <listen_message_reliably+0x38>
 80104d0:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80104d4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80104d8:	4638      	mov	r0, r7
 80104da:	f000 fcc5 	bl	8010e68 <uxr_session_header_offset>
 80104de:	3501      	adds	r5, #1
 80104e0:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 80104e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80104e8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80104ec:	9000      	str	r0, [sp, #0]
 80104ee:	2300      	movs	r3, #0
 80104f0:	4658      	mov	r0, fp
 80104f2:	2211      	movs	r2, #17
 80104f4:	a90c      	add	r1, sp, #48	@ 0x30
 80104f6:	f7fa fdcd 	bl	800b094 <ucdr_init_buffer_origin_offset>
 80104fa:	2300      	movs	r3, #0
 80104fc:	2205      	movs	r2, #5
 80104fe:	210b      	movs	r1, #11
 8010500:	4658      	mov	r0, fp
 8010502:	f001 faa1 	bl	8011a48 <uxr_buffer_submessage_header>
 8010506:	8968      	ldrh	r0, [r5, #10]
 8010508:	2101      	movs	r1, #1
 801050a:	f003 fc29 	bl	8013d60 <uxr_seq_num_add>
 801050e:	892a      	ldrh	r2, [r5, #8]
 8010510:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010514:	4603      	mov	r3, r0
 8010516:	a90a      	add	r1, sp, #40	@ 0x28
 8010518:	4658      	mov	r0, fp
 801051a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801051e:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 8010522:	f002 fa2d 	bl	8012980 <uxr_serialize_HEARTBEAT_Payload>
 8010526:	2200      	movs	r2, #0
 8010528:	4611      	mov	r1, r2
 801052a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801052c:	4638      	mov	r0, r7
 801052e:	f000 fc43 	bl	8010db8 <uxr_stamp_session_header>
 8010532:	4658      	mov	r0, fp
 8010534:	f7fa fdec 	bl	800b110 <ucdr_buffer_length>
 8010538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801053a:	4602      	mov	r2, r0
 801053c:	a90c      	add	r1, sp, #48	@ 0x30
 801053e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010542:	443c      	add	r4, r7
 8010544:	47a8      	blx	r5
 8010546:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801054a:	e79f      	b.n	801048c <listen_message_reliably+0x3c>
 801054c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010550:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8010554:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010558:	4294      	cmp	r4, r2
 801055a:	bf08      	it	eq
 801055c:	428b      	cmpeq	r3, r1
 801055e:	d01d      	beq.n	801059c <listen_message_reliably+0x14c>
 8010560:	eba3 030a 	sub.w	r3, r3, sl
 8010564:	9905      	ldr	r1, [sp, #20]
 8010566:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010568:	2b00      	cmp	r3, #0
 801056a:	bf08      	it	eq
 801056c:	2301      	moveq	r3, #1
 801056e:	4299      	cmp	r1, r3
 8010570:	bfa8      	it	ge
 8010572:	4619      	movge	r1, r3
 8010574:	6894      	ldr	r4, [r2, #8]
 8010576:	6810      	ldr	r0, [r2, #0]
 8010578:	4689      	mov	r9, r1
 801057a:	460b      	mov	r3, r1
 801057c:	aa08      	add	r2, sp, #32
 801057e:	a907      	add	r1, sp, #28
 8010580:	47a0      	blx	r4
 8010582:	b968      	cbnz	r0, 80105a0 <listen_message_reliably+0x150>
 8010584:	9b05      	ldr	r3, [sp, #20]
 8010586:	eba3 0309 	sub.w	r3, r3, r9
 801058a:	2b00      	cmp	r3, #0
 801058c:	9305      	str	r3, [sp, #20]
 801058e:	f73f af68 	bgt.w	8010462 <listen_message_reliably+0x12>
 8010592:	4604      	mov	r4, r0
 8010594:	4620      	mov	r0, r4
 8010596:	b01d      	add	sp, #116	@ 0x74
 8010598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059c:	9b05      	ldr	r3, [sp, #20]
 801059e:	e7e1      	b.n	8010564 <listen_message_reliably+0x114>
 80105a0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80105a4:	4604      	mov	r4, r0
 80105a6:	a80c      	add	r0, sp, #48	@ 0x30
 80105a8:	f7fa fd86 	bl	800b0b8 <ucdr_init_buffer>
 80105ac:	2500      	movs	r5, #0
 80105ae:	a90c      	add	r1, sp, #48	@ 0x30
 80105b0:	f10d 031a 	add.w	r3, sp, #26
 80105b4:	aa06      	add	r2, sp, #24
 80105b6:	4638      	mov	r0, r7
 80105b8:	f88d 5018 	strb.w	r5, [sp, #24]
 80105bc:	f000 fc12 	bl	8010de4 <uxr_read_session_header>
 80105c0:	b918      	cbnz	r0, 80105ca <listen_message_reliably+0x17a>
 80105c2:	4620      	mov	r0, r4
 80105c4:	b01d      	add	sp, #116	@ 0x74
 80105c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ca:	4629      	mov	r1, r5
 80105cc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80105d0:	f001 f92a 	bl	8011828 <uxr_stream_id_from_raw>
 80105d4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80105d8:	2e01      	cmp	r6, #1
 80105da:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80105de:	900a      	str	r0, [sp, #40]	@ 0x28
 80105e0:	fa5f fa80 	uxtb.w	sl, r0
 80105e4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80105e8:	d04b      	beq.n	8010682 <listen_message_reliably+0x232>
 80105ea:	2e02      	cmp	r6, #2
 80105ec:	d00f      	beq.n	801060e <listen_message_reliably+0x1be>
 80105ee:	2e00      	cmp	r6, #0
 80105f0:	d1e7      	bne.n	80105c2 <listen_message_reliably+0x172>
 80105f2:	4631      	mov	r1, r6
 80105f4:	4630      	mov	r0, r6
 80105f6:	f001 f917 	bl	8011828 <uxr_stream_id_from_raw>
 80105fa:	a90c      	add	r1, sp, #48	@ 0x30
 80105fc:	4602      	mov	r2, r0
 80105fe:	4638      	mov	r0, r7
 8010600:	920a      	str	r2, [sp, #40]	@ 0x28
 8010602:	f7ff fd9d 	bl	8010140 <read_submessage_list>
 8010606:	4620      	mov	r0, r4
 8010608:	b01d      	add	sp, #116	@ 0x74
 801060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060e:	4629      	mov	r1, r5
 8010610:	f107 0008 	add.w	r0, r7, #8
 8010614:	f001 f9f6 	bl	8011a04 <uxr_get_input_reliable_stream>
 8010618:	4680      	mov	r8, r0
 801061a:	b348      	cbz	r0, 8010670 <listen_message_reliably+0x220>
 801061c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801061e:	9202      	str	r2, [sp, #8]
 8010620:	a80c      	add	r0, sp, #48	@ 0x30
 8010622:	f7fa fd79 	bl	800b118 <ucdr_buffer_remaining>
 8010626:	4603      	mov	r3, r0
 8010628:	f10d 0019 	add.w	r0, sp, #25
 801062c:	9000      	str	r0, [sp, #0]
 801062e:	9a02      	ldr	r2, [sp, #8]
 8010630:	4649      	mov	r1, r9
 8010632:	4640      	mov	r0, r8
 8010634:	f002 ff0e 	bl	8013454 <uxr_receive_reliable_message>
 8010638:	b1d0      	cbz	r0, 8010670 <listen_message_reliably+0x220>
 801063a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d037      	beq.n	80106b2 <listen_message_reliably+0x262>
 8010642:	ae14      	add	r6, sp, #80	@ 0x50
 8010644:	f04f 0902 	mov.w	r9, #2
 8010648:	e008      	b.n	801065c <listen_message_reliably+0x20c>
 801064a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801064e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8010652:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8010656:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010658:	f7ff fd72 	bl	8010140 <read_submessage_list>
 801065c:	4631      	mov	r1, r6
 801065e:	2204      	movs	r2, #4
 8010660:	4640      	mov	r0, r8
 8010662:	f002 ff77 	bl	8013554 <uxr_next_input_reliable_buffer_available>
 8010666:	4603      	mov	r3, r0
 8010668:	4631      	mov	r1, r6
 801066a:	4638      	mov	r0, r7
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1ec      	bne.n	801064a <listen_message_reliably+0x1fa>
 8010670:	4638      	mov	r0, r7
 8010672:	462a      	mov	r2, r5
 8010674:	4651      	mov	r1, sl
 8010676:	f7ff fbe1 	bl	800fe3c <write_submessage_acknack.isra.0>
 801067a:	4620      	mov	r0, r4
 801067c:	b01d      	add	sp, #116	@ 0x74
 801067e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010682:	4629      	mov	r1, r5
 8010684:	f107 0008 	add.w	r0, r7, #8
 8010688:	f001 f9b2 	bl	80119f0 <uxr_get_input_best_effort_stream>
 801068c:	2800      	cmp	r0, #0
 801068e:	d098      	beq.n	80105c2 <listen_message_reliably+0x172>
 8010690:	4649      	mov	r1, r9
 8010692:	f002 fe5b 	bl	801334c <uxr_receive_best_effort_message>
 8010696:	2800      	cmp	r0, #0
 8010698:	d093      	beq.n	80105c2 <listen_message_reliably+0x172>
 801069a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801069e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80106a2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80106a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106a8:	a90c      	add	r1, sp, #48	@ 0x30
 80106aa:	4638      	mov	r0, r7
 80106ac:	f7ff fd48 	bl	8010140 <read_submessage_list>
 80106b0:	e787      	b.n	80105c2 <listen_message_reliably+0x172>
 80106b2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80106b6:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80106ba:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80106be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106c0:	a90c      	add	r1, sp, #48	@ 0x30
 80106c2:	4638      	mov	r0, r7
 80106c4:	f7ff fd3c 	bl	8010140 <read_submessage_list>
 80106c8:	e7bb      	b.n	8010642 <listen_message_reliably+0x1f2>
 80106ca:	bf00      	nop

080106cc <uxr_run_session_timeout>:
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	4604      	mov	r4, r0
 80106d0:	460d      	mov	r5, r1
 80106d2:	f001 f9ff 	bl	8011ad4 <uxr_millis>
 80106d6:	4606      	mov	r6, r0
 80106d8:	4620      	mov	r0, r4
 80106da:	f7ff fc75 	bl	800ffc8 <uxr_flash_output_streams>
 80106de:	4629      	mov	r1, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7ff feb5 	bl	8010450 <listen_message_reliably>
 80106e6:	f001 f9f5 	bl	8011ad4 <uxr_millis>
 80106ea:	1b83      	subs	r3, r0, r6
 80106ec:	1ae9      	subs	r1, r5, r3
 80106ee:	2900      	cmp	r1, #0
 80106f0:	dcf6      	bgt.n	80106e0 <uxr_run_session_timeout+0x14>
 80106f2:	f104 0008 	add.w	r0, r4, #8
 80106f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106fa:	f001 b98f 	b.w	8011a1c <uxr_output_streams_confirmed>
 80106fe:	bf00      	nop

08010700 <uxr_run_session_until_data>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	4604      	mov	r4, r0
 8010704:	460d      	mov	r5, r1
 8010706:	f001 f9e5 	bl	8011ad4 <uxr_millis>
 801070a:	4606      	mov	r6, r0
 801070c:	4620      	mov	r0, r4
 801070e:	f7ff fc5b 	bl	800ffc8 <uxr_flash_output_streams>
 8010712:	2300      	movs	r3, #0
 8010714:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010718:	4629      	mov	r1, r5
 801071a:	e005      	b.n	8010728 <uxr_run_session_until_data+0x28>
 801071c:	f001 f9da 	bl	8011ad4 <uxr_millis>
 8010720:	1b83      	subs	r3, r0, r6
 8010722:	1ae9      	subs	r1, r5, r3
 8010724:	2900      	cmp	r1, #0
 8010726:	dd07      	ble.n	8010738 <uxr_run_session_until_data+0x38>
 8010728:	4620      	mov	r0, r4
 801072a:	f7ff fe91 	bl	8010450 <listen_message_reliably>
 801072e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010732:	2800      	cmp	r0, #0
 8010734:	d0f2      	beq.n	801071c <uxr_run_session_until_data+0x1c>
 8010736:	bd70      	pop	{r4, r5, r6, pc}
 8010738:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801073c:	bd70      	pop	{r4, r5, r6, pc}
 801073e:	bf00      	nop

08010740 <uxr_run_session_until_confirm_delivery>:
 8010740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010744:	4606      	mov	r6, r0
 8010746:	460d      	mov	r5, r1
 8010748:	f001 f9c4 	bl	8011ad4 <uxr_millis>
 801074c:	4607      	mov	r7, r0
 801074e:	4630      	mov	r0, r6
 8010750:	f7ff fc3a 	bl	800ffc8 <uxr_flash_output_streams>
 8010754:	2d00      	cmp	r5, #0
 8010756:	f106 0808 	add.w	r8, r6, #8
 801075a:	bfa8      	it	ge
 801075c:	462c      	movge	r4, r5
 801075e:	da07      	bge.n	8010770 <uxr_run_session_until_confirm_delivery+0x30>
 8010760:	e00e      	b.n	8010780 <uxr_run_session_until_confirm_delivery+0x40>
 8010762:	f7ff fe75 	bl	8010450 <listen_message_reliably>
 8010766:	f001 f9b5 	bl	8011ad4 <uxr_millis>
 801076a:	1bc3      	subs	r3, r0, r7
 801076c:	1aec      	subs	r4, r5, r3
 801076e:	d407      	bmi.n	8010780 <uxr_run_session_until_confirm_delivery+0x40>
 8010770:	4640      	mov	r0, r8
 8010772:	f001 f953 	bl	8011a1c <uxr_output_streams_confirmed>
 8010776:	4603      	mov	r3, r0
 8010778:	4621      	mov	r1, r4
 801077a:	4630      	mov	r0, r6
 801077c:	2b00      	cmp	r3, #0
 801077e:	d0f0      	beq.n	8010762 <uxr_run_session_until_confirm_delivery+0x22>
 8010780:	4640      	mov	r0, r8
 8010782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010786:	f001 b949 	b.w	8011a1c <uxr_output_streams_confirmed>
 801078a:	bf00      	nop

0801078c <uxr_run_session_until_all_status>:
 801078c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010790:	9d08      	ldr	r5, [sp, #32]
 8010792:	460f      	mov	r7, r1
 8010794:	4692      	mov	sl, r2
 8010796:	461c      	mov	r4, r3
 8010798:	4606      	mov	r6, r0
 801079a:	f7ff fc15 	bl	800ffc8 <uxr_flash_output_streams>
 801079e:	b125      	cbz	r5, 80107aa <uxr_run_session_until_all_status+0x1e>
 80107a0:	462a      	mov	r2, r5
 80107a2:	21ff      	movs	r1, #255	@ 0xff
 80107a4:	4620      	mov	r0, r4
 80107a6:	f003 fec3 	bl	8014530 <memset>
 80107aa:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 80107ae:	67f5      	str	r5, [r6, #124]	@ 0x7c
 80107b0:	f001 f990 	bl	8011ad4 <uxr_millis>
 80107b4:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 80107b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80107bc:	4680      	mov	r8, r0
 80107be:	4639      	mov	r1, r7
 80107c0:	4630      	mov	r0, r6
 80107c2:	f7ff fe45 	bl	8010450 <listen_message_reliably>
 80107c6:	f001 f985 	bl	8011ad4 <uxr_millis>
 80107ca:	eba0 0008 	sub.w	r0, r0, r8
 80107ce:	1a39      	subs	r1, r7, r0
 80107d0:	b33d      	cbz	r5, 8010822 <uxr_run_session_until_all_status+0x96>
 80107d2:	46cc      	mov	ip, r9
 80107d4:	464a      	mov	r2, r9
 80107d6:	2301      	movs	r3, #1
 80107d8:	e002      	b.n	80107e0 <uxr_run_session_until_all_status+0x54>
 80107da:	42ab      	cmp	r3, r5
 80107dc:	d20c      	bcs.n	80107f8 <uxr_run_session_until_all_status+0x6c>
 80107de:	3301      	adds	r3, #1
 80107e0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80107e4:	2cff      	cmp	r4, #255	@ 0xff
 80107e6:	d1f8      	bne.n	80107da <uxr_run_session_until_all_status+0x4e>
 80107e8:	42ab      	cmp	r3, r5
 80107ea:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 80107ee:	d213      	bcs.n	8010818 <uxr_run_session_until_all_status+0x8c>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	d0f4      	beq.n	80107de <uxr_run_session_until_all_status+0x52>
 80107f4:	2900      	cmp	r1, #0
 80107f6:	dce3      	bgt.n	80107c0 <uxr_run_session_until_all_status+0x34>
 80107f8:	2300      	movs	r3, #0
 80107fa:	444d      	add	r5, r9
 80107fc:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80107fe:	e001      	b.n	8010804 <uxr_run_session_until_all_status+0x78>
 8010800:	2b01      	cmp	r3, #1
 8010802:	d812      	bhi.n	801082a <uxr_run_session_until_all_status+0x9e>
 8010804:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010808:	4565      	cmp	r5, ip
 801080a:	d1f9      	bne.n	8010800 <uxr_run_session_until_all_status+0x74>
 801080c:	2b01      	cmp	r3, #1
 801080e:	bf8c      	ite	hi
 8010810:	2000      	movhi	r0, #0
 8010812:	2001      	movls	r0, #1
 8010814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010818:	2900      	cmp	r1, #0
 801081a:	dded      	ble.n	80107f8 <uxr_run_session_until_all_status+0x6c>
 801081c:	2800      	cmp	r0, #0
 801081e:	d1cf      	bne.n	80107c0 <uxr_run_session_until_all_status+0x34>
 8010820:	e7ea      	b.n	80107f8 <uxr_run_session_until_all_status+0x6c>
 8010822:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8010824:	2001      	movs	r0, #1
 8010826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801082a:	2000      	movs	r0, #0
 801082c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010830 <uxr_create_session>:
 8010830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010834:	ed2d 8b02 	vpush	{d8}
 8010838:	f100 0808 	add.w	r8, r0, #8
 801083c:	b0a9      	sub	sp, #164	@ 0xa4
 801083e:	4604      	mov	r4, r0
 8010840:	4640      	mov	r0, r8
 8010842:	f001 f827 	bl	8011894 <uxr_reset_stream_storage>
 8010846:	4620      	mov	r0, r4
 8010848:	f000 fb0e 	bl	8010e68 <uxr_session_header_offset>
 801084c:	a909      	add	r1, sp, #36	@ 0x24
 801084e:	9000      	str	r0, [sp, #0]
 8010850:	2300      	movs	r3, #0
 8010852:	a810      	add	r0, sp, #64	@ 0x40
 8010854:	221c      	movs	r2, #28
 8010856:	f7fa fc1d 	bl	800b094 <ucdr_init_buffer_origin_offset>
 801085a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801085c:	8a1a      	ldrh	r2, [r3, #16]
 801085e:	3a04      	subs	r2, #4
 8010860:	b292      	uxth	r2, r2
 8010862:	4620      	mov	r0, r4
 8010864:	a910      	add	r1, sp, #64	@ 0x40
 8010866:	f000 fa23 	bl	8010cb0 <uxr_buffer_create_session>
 801086a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801086c:	4620      	mov	r0, r4
 801086e:	f000 fa8f 	bl	8010d90 <uxr_stamp_create_session_header>
 8010872:	a810      	add	r0, sp, #64	@ 0x40
 8010874:	f7fa fc4c 	bl	800b110 <ucdr_buffer_length>
 8010878:	23ff      	movs	r3, #255	@ 0xff
 801087a:	ee08 0a10 	vmov	s16, r0
 801087e:	7163      	strb	r3, [r4, #5]
 8010880:	f04f 090a 	mov.w	r9, #10
 8010884:	46c2      	mov	sl, r8
 8010886:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010888:	ee18 2a10 	vmov	r2, s16
 801088c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010890:	a909      	add	r1, sp, #36	@ 0x24
 8010892:	47a8      	blx	r5
 8010894:	f001 f91e 	bl	8011ad4 <uxr_millis>
 8010898:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801089c:	9002      	str	r0, [sp, #8]
 801089e:	e00c      	b.n	80108ba <uxr_create_session+0x8a>
 80108a0:	f001 f918 	bl	8011ad4 <uxr_millis>
 80108a4:	9b02      	ldr	r3, [sp, #8]
 80108a6:	7962      	ldrb	r2, [r4, #5]
 80108a8:	1ac0      	subs	r0, r0, r3
 80108aa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f340 8094 	ble.w	80109dc <uxr_create_session+0x1ac>
 80108b4:	2aff      	cmp	r2, #255	@ 0xff
 80108b6:	f040 8097 	bne.w	80109e8 <uxr_create_session+0x1b8>
 80108ba:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80108bc:	a905      	add	r1, sp, #20
 80108be:	6895      	ldr	r5, [r2, #8]
 80108c0:	6810      	ldr	r0, [r2, #0]
 80108c2:	aa06      	add	r2, sp, #24
 80108c4:	47a8      	blx	r5
 80108c6:	2800      	cmp	r0, #0
 80108c8:	d0ea      	beq.n	80108a0 <uxr_create_session+0x70>
 80108ca:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80108ce:	a818      	add	r0, sp, #96	@ 0x60
 80108d0:	f7fa fbf2 	bl	800b0b8 <ucdr_init_buffer>
 80108d4:	2500      	movs	r5, #0
 80108d6:	f10d 0312 	add.w	r3, sp, #18
 80108da:	aa04      	add	r2, sp, #16
 80108dc:	a918      	add	r1, sp, #96	@ 0x60
 80108de:	4620      	mov	r0, r4
 80108e0:	f88d 5010 	strb.w	r5, [sp, #16]
 80108e4:	f000 fa7e 	bl	8010de4 <uxr_read_session_header>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d0d9      	beq.n	80108a0 <uxr_create_session+0x70>
 80108ec:	4629      	mov	r1, r5
 80108ee:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80108f2:	f000 ff99 	bl	8011828 <uxr_stream_id_from_raw>
 80108f6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80108fa:	2f01      	cmp	r7, #1
 80108fc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010900:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010904:	fa5f f880 	uxtb.w	r8, r0
 8010908:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801090c:	d04d      	beq.n	80109aa <uxr_create_session+0x17a>
 801090e:	2f02      	cmp	r7, #2
 8010910:	d00c      	beq.n	801092c <uxr_create_session+0xfc>
 8010912:	2f00      	cmp	r7, #0
 8010914:	d1c4      	bne.n	80108a0 <uxr_create_session+0x70>
 8010916:	4639      	mov	r1, r7
 8010918:	4638      	mov	r0, r7
 801091a:	f000 ff85 	bl	8011828 <uxr_stream_id_from_raw>
 801091e:	a918      	add	r1, sp, #96	@ 0x60
 8010920:	4602      	mov	r2, r0
 8010922:	4620      	mov	r0, r4
 8010924:	9208      	str	r2, [sp, #32]
 8010926:	f7ff fc0b 	bl	8010140 <read_submessage_list>
 801092a:	e7b9      	b.n	80108a0 <uxr_create_session+0x70>
 801092c:	4629      	mov	r1, r5
 801092e:	4650      	mov	r0, sl
 8010930:	f001 f868 	bl	8011a04 <uxr_get_input_reliable_stream>
 8010934:	4606      	mov	r6, r0
 8010936:	b390      	cbz	r0, 801099e <uxr_create_session+0x16e>
 8010938:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801093a:	9203      	str	r2, [sp, #12]
 801093c:	a818      	add	r0, sp, #96	@ 0x60
 801093e:	f7fa fbeb 	bl	800b118 <ucdr_buffer_remaining>
 8010942:	4603      	mov	r3, r0
 8010944:	f10d 0011 	add.w	r0, sp, #17
 8010948:	9000      	str	r0, [sp, #0]
 801094a:	9a03      	ldr	r2, [sp, #12]
 801094c:	4659      	mov	r1, fp
 801094e:	4630      	mov	r0, r6
 8010950:	f002 fd80 	bl	8013454 <uxr_receive_reliable_message>
 8010954:	b318      	cbz	r0, 801099e <uxr_create_session+0x16e>
 8010956:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801095a:	b9b3      	cbnz	r3, 801098a <uxr_create_session+0x15a>
 801095c:	f88d 8020 	strb.w	r8, [sp, #32]
 8010960:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8010964:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8010968:	9a08      	ldr	r2, [sp, #32]
 801096a:	a918      	add	r1, sp, #96	@ 0x60
 801096c:	4620      	mov	r0, r4
 801096e:	f7ff fbe7 	bl	8010140 <read_submessage_list>
 8010972:	e00a      	b.n	801098a <uxr_create_session+0x15a>
 8010974:	f04f 0302 	mov.w	r3, #2
 8010978:	f88d 8020 	strb.w	r8, [sp, #32]
 801097c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8010980:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8010984:	9a08      	ldr	r2, [sp, #32]
 8010986:	f7ff fbdb 	bl	8010140 <read_submessage_list>
 801098a:	a920      	add	r1, sp, #128	@ 0x80
 801098c:	2204      	movs	r2, #4
 801098e:	4630      	mov	r0, r6
 8010990:	f002 fde0 	bl	8013554 <uxr_next_input_reliable_buffer_available>
 8010994:	4603      	mov	r3, r0
 8010996:	a920      	add	r1, sp, #128	@ 0x80
 8010998:	4620      	mov	r0, r4
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1ea      	bne.n	8010974 <uxr_create_session+0x144>
 801099e:	462a      	mov	r2, r5
 80109a0:	4641      	mov	r1, r8
 80109a2:	4620      	mov	r0, r4
 80109a4:	f7ff fa4a 	bl	800fe3c <write_submessage_acknack.isra.0>
 80109a8:	e77a      	b.n	80108a0 <uxr_create_session+0x70>
 80109aa:	4629      	mov	r1, r5
 80109ac:	4650      	mov	r0, sl
 80109ae:	f001 f81f 	bl	80119f0 <uxr_get_input_best_effort_stream>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	f43f af74 	beq.w	80108a0 <uxr_create_session+0x70>
 80109b8:	4659      	mov	r1, fp
 80109ba:	f002 fcc7 	bl	801334c <uxr_receive_best_effort_message>
 80109be:	2800      	cmp	r0, #0
 80109c0:	f43f af6e 	beq.w	80108a0 <uxr_create_session+0x70>
 80109c4:	f88d 8020 	strb.w	r8, [sp, #32]
 80109c8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80109cc:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 80109d0:	9a08      	ldr	r2, [sp, #32]
 80109d2:	a918      	add	r1, sp, #96	@ 0x60
 80109d4:	4620      	mov	r0, r4
 80109d6:	f7ff fbb3 	bl	8010140 <read_submessage_list>
 80109da:	e761      	b.n	80108a0 <uxr_create_session+0x70>
 80109dc:	f1b9 0901 	subs.w	r9, r9, #1
 80109e0:	d002      	beq.n	80109e8 <uxr_create_session+0x1b8>
 80109e2:	2aff      	cmp	r2, #255	@ 0xff
 80109e4:	f43f af4f 	beq.w	8010886 <uxr_create_session+0x56>
 80109e8:	b12a      	cbz	r2, 80109f6 <uxr_create_session+0x1c6>
 80109ea:	2000      	movs	r0, #0
 80109ec:	b029      	add	sp, #164	@ 0xa4
 80109ee:	ecbd 8b02 	vpop	{d8}
 80109f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f6:	4650      	mov	r0, sl
 80109f8:	f000 ff4c 	bl	8011894 <uxr_reset_stream_storage>
 80109fc:	2001      	movs	r0, #1
 80109fe:	b029      	add	sp, #164	@ 0xa4
 8010a00:	ecbd 8b02 	vpop	{d8}
 8010a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a08 <wait_session_status>:
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	b09d      	sub	sp, #116	@ 0x74
 8010a10:	20ff      	movs	r0, #255	@ 0xff
 8010a12:	7160      	strb	r0, [r4, #5]
 8010a14:	9304      	str	r3, [sp, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f000 80b8 	beq.w	8010b8c <wait_session_status+0x184>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	468b      	mov	fp, r1
 8010a20:	4692      	mov	sl, r2
 8010a22:	9303      	str	r3, [sp, #12]
 8010a24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010a26:	4652      	mov	r2, sl
 8010a28:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010a2c:	4659      	mov	r1, fp
 8010a2e:	47a8      	blx	r5
 8010a30:	f001 f850 	bl	8011ad4 <uxr_millis>
 8010a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a38:	4605      	mov	r5, r0
 8010a3a:	e009      	b.n	8010a50 <wait_session_status+0x48>
 8010a3c:	f001 f84a 	bl	8011ad4 <uxr_millis>
 8010a40:	1b40      	subs	r0, r0, r5
 8010a42:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	dd42      	ble.n	8010ad0 <wait_session_status+0xc8>
 8010a4a:	7960      	ldrb	r0, [r4, #5]
 8010a4c:	28ff      	cmp	r0, #255	@ 0xff
 8010a4e:	d148      	bne.n	8010ae2 <wait_session_status+0xda>
 8010a50:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010a52:	a908      	add	r1, sp, #32
 8010a54:	6896      	ldr	r6, [r2, #8]
 8010a56:	6810      	ldr	r0, [r2, #0]
 8010a58:	aa09      	add	r2, sp, #36	@ 0x24
 8010a5a:	47b0      	blx	r6
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d0ed      	beq.n	8010a3c <wait_session_status+0x34>
 8010a60:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010a64:	a80c      	add	r0, sp, #48	@ 0x30
 8010a66:	f7fa fb27 	bl	800b0b8 <ucdr_init_buffer>
 8010a6a:	2600      	movs	r6, #0
 8010a6c:	f10d 031e 	add.w	r3, sp, #30
 8010a70:	aa07      	add	r2, sp, #28
 8010a72:	a90c      	add	r1, sp, #48	@ 0x30
 8010a74:	4620      	mov	r0, r4
 8010a76:	f88d 601c 	strb.w	r6, [sp, #28]
 8010a7a:	f000 f9b3 	bl	8010de4 <uxr_read_session_header>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d0dc      	beq.n	8010a3c <wait_session_status+0x34>
 8010a82:	4631      	mov	r1, r6
 8010a84:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010a88:	f000 fece 	bl	8011828 <uxr_stream_id_from_raw>
 8010a8c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010a90:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010a94:	9302      	str	r3, [sp, #8]
 8010a96:	2f01      	cmp	r7, #1
 8010a98:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010a9c:	fa5f f880 	uxtb.w	r8, r0
 8010aa0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010aa4:	d058      	beq.n	8010b58 <wait_session_status+0x150>
 8010aa6:	2f02      	cmp	r7, #2
 8010aa8:	d021      	beq.n	8010aee <wait_session_status+0xe6>
 8010aaa:	2f00      	cmp	r7, #0
 8010aac:	d1c6      	bne.n	8010a3c <wait_session_status+0x34>
 8010aae:	4639      	mov	r1, r7
 8010ab0:	4638      	mov	r0, r7
 8010ab2:	f000 feb9 	bl	8011828 <uxr_stream_id_from_raw>
 8010ab6:	a90c      	add	r1, sp, #48	@ 0x30
 8010ab8:	4602      	mov	r2, r0
 8010aba:	4620      	mov	r0, r4
 8010abc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010abe:	f7ff fb3f 	bl	8010140 <read_submessage_list>
 8010ac2:	f001 f807 	bl	8011ad4 <uxr_millis>
 8010ac6:	1b40      	subs	r0, r0, r5
 8010ac8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	dcbc      	bgt.n	8010a4a <wait_session_status+0x42>
 8010ad0:	9b03      	ldr	r3, [sp, #12]
 8010ad2:	9a04      	ldr	r2, [sp, #16]
 8010ad4:	7960      	ldrb	r0, [r4, #5]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	9303      	str	r3, [sp, #12]
 8010adc:	d001      	beq.n	8010ae2 <wait_session_status+0xda>
 8010ade:	28ff      	cmp	r0, #255	@ 0xff
 8010ae0:	d0a0      	beq.n	8010a24 <wait_session_status+0x1c>
 8010ae2:	38ff      	subs	r0, #255	@ 0xff
 8010ae4:	bf18      	it	ne
 8010ae6:	2001      	movne	r0, #1
 8010ae8:	b01d      	add	sp, #116	@ 0x74
 8010aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aee:	4631      	mov	r1, r6
 8010af0:	f104 0008 	add.w	r0, r4, #8
 8010af4:	f000 ff86 	bl	8011a04 <uxr_get_input_reliable_stream>
 8010af8:	4681      	mov	r9, r0
 8010afa:	b338      	cbz	r0, 8010b4c <wait_session_status+0x144>
 8010afc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010afe:	9205      	str	r2, [sp, #20]
 8010b00:	a80c      	add	r0, sp, #48	@ 0x30
 8010b02:	f7fa fb09 	bl	800b118 <ucdr_buffer_remaining>
 8010b06:	4603      	mov	r3, r0
 8010b08:	f10d 001d 	add.w	r0, sp, #29
 8010b0c:	9000      	str	r0, [sp, #0]
 8010b0e:	9a05      	ldr	r2, [sp, #20]
 8010b10:	9902      	ldr	r1, [sp, #8]
 8010b12:	4648      	mov	r0, r9
 8010b14:	f002 fc9e 	bl	8013454 <uxr_receive_reliable_message>
 8010b18:	b1c0      	cbz	r0, 8010b4c <wait_session_status+0x144>
 8010b1a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010b1e:	b95b      	cbnz	r3, 8010b38 <wait_session_status+0x130>
 8010b20:	e03c      	b.n	8010b9c <wait_session_status+0x194>
 8010b22:	f04f 0302 	mov.w	r3, #2
 8010b26:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8010b2a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010b2e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010b32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b34:	f7ff fb04 	bl	8010140 <read_submessage_list>
 8010b38:	a914      	add	r1, sp, #80	@ 0x50
 8010b3a:	2204      	movs	r2, #4
 8010b3c:	4648      	mov	r0, r9
 8010b3e:	f002 fd09 	bl	8013554 <uxr_next_input_reliable_buffer_available>
 8010b42:	4603      	mov	r3, r0
 8010b44:	a914      	add	r1, sp, #80	@ 0x50
 8010b46:	4620      	mov	r0, r4
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1ea      	bne.n	8010b22 <wait_session_status+0x11a>
 8010b4c:	4632      	mov	r2, r6
 8010b4e:	4641      	mov	r1, r8
 8010b50:	4620      	mov	r0, r4
 8010b52:	f7ff f973 	bl	800fe3c <write_submessage_acknack.isra.0>
 8010b56:	e771      	b.n	8010a3c <wait_session_status+0x34>
 8010b58:	4631      	mov	r1, r6
 8010b5a:	f104 0008 	add.w	r0, r4, #8
 8010b5e:	f000 ff47 	bl	80119f0 <uxr_get_input_best_effort_stream>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	f43f af6a 	beq.w	8010a3c <wait_session_status+0x34>
 8010b68:	9902      	ldr	r1, [sp, #8]
 8010b6a:	f002 fbef 	bl	801334c <uxr_receive_best_effort_message>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	f43f af64 	beq.w	8010a3c <wait_session_status+0x34>
 8010b74:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8010b78:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010b7c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010b80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b82:	a90c      	add	r1, sp, #48	@ 0x30
 8010b84:	4620      	mov	r0, r4
 8010b86:	f7ff fadb 	bl	8010140 <read_submessage_list>
 8010b8a:	e757      	b.n	8010a3c <wait_session_status+0x34>
 8010b8c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b8e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010b92:	47a0      	blx	r4
 8010b94:	2001      	movs	r0, #1
 8010b96:	b01d      	add	sp, #116	@ 0x74
 8010b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b9c:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8010ba0:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010ba4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010ba8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010baa:	a90c      	add	r1, sp, #48	@ 0x30
 8010bac:	4620      	mov	r0, r4
 8010bae:	f7ff fac7 	bl	8010140 <read_submessage_list>
 8010bb2:	e7c1      	b.n	8010b38 <wait_session_status+0x130>

08010bb4 <uxr_delete_session_retries>:
 8010bb4:	b530      	push	{r4, r5, lr}
 8010bb6:	b08f      	sub	sp, #60	@ 0x3c
 8010bb8:	4604      	mov	r4, r0
 8010bba:	460d      	mov	r5, r1
 8010bbc:	f000 f954 	bl	8010e68 <uxr_session_header_offset>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	2210      	movs	r2, #16
 8010bc4:	9000      	str	r0, [sp, #0]
 8010bc6:	a902      	add	r1, sp, #8
 8010bc8:	a806      	add	r0, sp, #24
 8010bca:	f7fa fa63 	bl	800b094 <ucdr_init_buffer_origin_offset>
 8010bce:	a906      	add	r1, sp, #24
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f000 f897 	bl	8010d04 <uxr_buffer_delete_session>
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	4611      	mov	r1, r2
 8010bda:	9b06      	ldr	r3, [sp, #24]
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f000 f8eb 	bl	8010db8 <uxr_stamp_session_header>
 8010be2:	a806      	add	r0, sp, #24
 8010be4:	f7fa fa94 	bl	800b110 <ucdr_buffer_length>
 8010be8:	462b      	mov	r3, r5
 8010bea:	4602      	mov	r2, r0
 8010bec:	a902      	add	r1, sp, #8
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7ff ff0a 	bl	8010a08 <wait_session_status>
 8010bf4:	b118      	cbz	r0, 8010bfe <uxr_delete_session_retries+0x4a>
 8010bf6:	7960      	ldrb	r0, [r4, #5]
 8010bf8:	fab0 f080 	clz	r0, r0
 8010bfc:	0940      	lsrs	r0, r0, #5
 8010bfe:	b00f      	add	sp, #60	@ 0x3c
 8010c00:	bd30      	pop	{r4, r5, pc}
 8010c02:	bf00      	nop

08010c04 <uxr_prepare_stream_to_write_submessage>:
 8010c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	4682      	mov	sl, r0
 8010c0c:	4610      	mov	r0, r2
 8010c0e:	4615      	mov	r5, r2
 8010c10:	461e      	mov	r6, r3
 8010c12:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010c16:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010c1a:	9101      	str	r1, [sp, #4]
 8010c1c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010c20:	f000 ff52 	bl	8011ac8 <uxr_submessage_padding>
 8010c24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c28:	f105 0904 	add.w	r9, r5, #4
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	4481      	add	r9, r0
 8010c30:	d01d      	beq.n	8010c6e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010c32:	2b02      	cmp	r3, #2
 8010c34:	d116      	bne.n	8010c64 <uxr_prepare_stream_to_write_submessage+0x60>
 8010c36:	4621      	mov	r1, r4
 8010c38:	f10a 0008 	add.w	r0, sl, #8
 8010c3c:	f000 fecc 	bl	80119d8 <uxr_get_output_reliable_stream>
 8010c40:	4604      	mov	r4, r0
 8010c42:	b158      	cbz	r0, 8010c5c <uxr_prepare_stream_to_write_submessage+0x58>
 8010c44:	4649      	mov	r1, r9
 8010c46:	4632      	mov	r2, r6
 8010c48:	f002 fe3a 	bl	80138c0 <uxr_prepare_reliable_buffer_to_write>
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	b12c      	cbz	r4, 8010c5c <uxr_prepare_stream_to_write_submessage+0x58>
 8010c50:	4643      	mov	r3, r8
 8010c52:	b2aa      	uxth	r2, r5
 8010c54:	4639      	mov	r1, r7
 8010c56:	4630      	mov	r0, r6
 8010c58:	f000 fef6 	bl	8011a48 <uxr_buffer_submessage_header>
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	b002      	add	sp, #8
 8010c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c64:	2400      	movs	r4, #0
 8010c66:	4620      	mov	r0, r4
 8010c68:	b002      	add	sp, #8
 8010c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c6e:	4621      	mov	r1, r4
 8010c70:	f10a 0008 	add.w	r0, sl, #8
 8010c74:	f000 fea8 	bl	80119c8 <uxr_get_output_best_effort_stream>
 8010c78:	4604      	mov	r4, r0
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d0ee      	beq.n	8010c5c <uxr_prepare_stream_to_write_submessage+0x58>
 8010c7e:	4649      	mov	r1, r9
 8010c80:	4632      	mov	r2, r6
 8010c82:	f002 fd59 	bl	8013738 <uxr_prepare_best_effort_buffer_to_write>
 8010c86:	4604      	mov	r4, r0
 8010c88:	e7e1      	b.n	8010c4e <uxr_prepare_stream_to_write_submessage+0x4a>
 8010c8a:	bf00      	nop

08010c8c <uxr_init_session_info>:
 8010c8c:	b470      	push	{r4, r5, r6}
 8010c8e:	7102      	strb	r2, [r0, #4]
 8010c90:	0e16      	lsrs	r6, r2, #24
 8010c92:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010c96:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8010c9a:	23ff      	movs	r3, #255	@ 0xff
 8010c9c:	2209      	movs	r2, #9
 8010c9e:	7046      	strb	r6, [r0, #1]
 8010ca0:	7085      	strb	r5, [r0, #2]
 8010ca2:	70c4      	strb	r4, [r0, #3]
 8010ca4:	7001      	strb	r1, [r0, #0]
 8010ca6:	bc70      	pop	{r4, r5, r6}
 8010ca8:	80c2      	strh	r2, [r0, #6]
 8010caa:	7143      	strb	r3, [r0, #5]
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop

08010cb0 <uxr_buffer_create_session>:
 8010cb0:	b570      	push	{r4, r5, r6, lr}
 8010cb2:	b088      	sub	sp, #32
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4d12      	ldr	r5, [pc, #72]	@ (8010d00 <uxr_buffer_create_session+0x50>)
 8010cb8:	9307      	str	r3, [sp, #28]
 8010cba:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010cbe:	7802      	ldrb	r2, [r0, #0]
 8010cc0:	9303      	str	r3, [sp, #12]
 8010cc2:	460c      	mov	r4, r1
 8010cc4:	f88d 200c 	strb.w	r2, [sp, #12]
 8010cc8:	2101      	movs	r1, #1
 8010cca:	682a      	ldr	r2, [r5, #0]
 8010ccc:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8010cd0:	88ad      	ldrh	r5, [r5, #4]
 8010cd2:	80c1      	strh	r1, [r0, #6]
 8010cd4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010cd8:	9200      	str	r2, [sp, #0]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	2210      	movs	r2, #16
 8010cde:	4620      	mov	r0, r4
 8010ce0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010ce4:	9306      	str	r3, [sp, #24]
 8010ce6:	f88d 300d 	strb.w	r3, [sp, #13]
 8010cea:	9602      	str	r6, [sp, #8]
 8010cec:	f8ad 5006 	strh.w	r5, [sp, #6]
 8010cf0:	f000 feaa 	bl	8011a48 <uxr_buffer_submessage_header>
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	4669      	mov	r1, sp
 8010cf8:	f001 fc9c 	bl	8012634 <uxr_serialize_CREATE_CLIENT_Payload>
 8010cfc:	b008      	add	sp, #32
 8010cfe:	bd70      	pop	{r4, r5, r6, pc}
 8010d00:	08015500 	.word	0x08015500

08010d04 <uxr_buffer_delete_session>:
 8010d04:	b530      	push	{r4, r5, lr}
 8010d06:	4b0c      	ldr	r3, [pc, #48]	@ (8010d38 <uxr_buffer_delete_session+0x34>)
 8010d08:	b083      	sub	sp, #12
 8010d0a:	891b      	ldrh	r3, [r3, #8]
 8010d0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010d10:	2202      	movs	r2, #2
 8010d12:	460c      	mov	r4, r1
 8010d14:	80c2      	strh	r2, [r0, #6]
 8010d16:	2300      	movs	r3, #0
 8010d18:	2204      	movs	r2, #4
 8010d1a:	4608      	mov	r0, r1
 8010d1c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010d20:	2103      	movs	r1, #3
 8010d22:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010d26:	f000 fe8f 	bl	8011a48 <uxr_buffer_submessage_header>
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	a901      	add	r1, sp, #4
 8010d2e:	f001 fd2f 	bl	8012790 <uxr_serialize_DELETE_Payload>
 8010d32:	b003      	add	sp, #12
 8010d34:	bd30      	pop	{r4, r5, pc}
 8010d36:	bf00      	nop
 8010d38:	08015500 	.word	0x08015500

08010d3c <uxr_read_create_session_status>:
 8010d3c:	b510      	push	{r4, lr}
 8010d3e:	b088      	sub	sp, #32
 8010d40:	4604      	mov	r4, r0
 8010d42:	4608      	mov	r0, r1
 8010d44:	a901      	add	r1, sp, #4
 8010d46:	f001 fd33 	bl	80127b0 <uxr_deserialize_STATUS_AGENT_Payload>
 8010d4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010d4e:	7163      	strb	r3, [r4, #5]
 8010d50:	b008      	add	sp, #32
 8010d52:	bd10      	pop	{r4, pc}

08010d54 <uxr_read_delete_session_status>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	4604      	mov	r4, r0
 8010d58:	b084      	sub	sp, #16
 8010d5a:	4608      	mov	r0, r1
 8010d5c:	a902      	add	r1, sp, #8
 8010d5e:	f001 fd57 	bl	8012810 <uxr_deserialize_STATUS_Payload>
 8010d62:	88e3      	ldrh	r3, [r4, #6]
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d001      	beq.n	8010d6c <uxr_read_delete_session_status+0x18>
 8010d68:	b004      	add	sp, #16
 8010d6a:	bd10      	pop	{r4, pc}
 8010d6c:	f10d 000a 	add.w	r0, sp, #10
 8010d70:	f7fe fec6 	bl	800fb00 <uxr_object_id_from_raw>
 8010d74:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010d78:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010d7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	bf04      	itt	eq
 8010d86:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010d8a:	7163      	strbeq	r3, [r4, #5]
 8010d8c:	b004      	add	sp, #16
 8010d8e:	bd10      	pop	{r4, pc}

08010d90 <uxr_stamp_create_session_header>:
 8010d90:	b510      	push	{r4, lr}
 8010d92:	4604      	mov	r4, r0
 8010d94:	b08a      	sub	sp, #40	@ 0x28
 8010d96:	a802      	add	r0, sp, #8
 8010d98:	2208      	movs	r2, #8
 8010d9a:	f7fa f98d 	bl	800b0b8 <ucdr_init_buffer>
 8010d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010da2:	9400      	str	r4, [sp, #0]
 8010da4:	2300      	movs	r3, #0
 8010da6:	a802      	add	r0, sp, #8
 8010da8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010dac:	461a      	mov	r2, r3
 8010dae:	f000 fef3 	bl	8011b98 <uxr_serialize_message_header>
 8010db2:	b00a      	add	sp, #40	@ 0x28
 8010db4:	bd10      	pop	{r4, pc}
 8010db6:	bf00      	nop

08010db8 <uxr_stamp_session_header>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4604      	mov	r4, r0
 8010dbc:	b08c      	sub	sp, #48	@ 0x30
 8010dbe:	460d      	mov	r5, r1
 8010dc0:	4616      	mov	r6, r2
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	a804      	add	r0, sp, #16
 8010dc6:	2208      	movs	r2, #8
 8010dc8:	9603      	str	r6, [sp, #12]
 8010dca:	f7fa f975 	bl	800b0b8 <ucdr_init_buffer>
 8010dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dd2:	9b03      	ldr	r3, [sp, #12]
 8010dd4:	9400      	str	r4, [sp, #0]
 8010dd6:	462a      	mov	r2, r5
 8010dd8:	a804      	add	r0, sp, #16
 8010dda:	f000 fedd 	bl	8011b98 <uxr_serialize_message_header>
 8010dde:	b00c      	add	sp, #48	@ 0x30
 8010de0:	bd70      	pop	{r4, r5, r6, pc}
 8010de2:	bf00      	nop

08010de4 <uxr_read_session_header>:
 8010de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de8:	4607      	mov	r7, r0
 8010dea:	b084      	sub	sp, #16
 8010dec:	4608      	mov	r0, r1
 8010dee:	460c      	mov	r4, r1
 8010df0:	4615      	mov	r5, r2
 8010df2:	461e      	mov	r6, r3
 8010df4:	f7fa f990 	bl	800b118 <ucdr_buffer_remaining>
 8010df8:	2808      	cmp	r0, #8
 8010dfa:	d803      	bhi.n	8010e04 <uxr_read_session_header+0x20>
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	b004      	add	sp, #16
 8010e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e04:	f10d 080c 	add.w	r8, sp, #12
 8010e08:	4633      	mov	r3, r6
 8010e0a:	462a      	mov	r2, r5
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f8cd 8000 	str.w	r8, [sp]
 8010e12:	f10d 010b 	add.w	r1, sp, #11
 8010e16:	f000 fedd 	bl	8011bd4 <uxr_deserialize_message_header>
 8010e1a:	783a      	ldrb	r2, [r7, #0]
 8010e1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d1eb      	bne.n	8010dfc <uxr_read_session_header+0x18>
 8010e24:	061b      	lsls	r3, r3, #24
 8010e26:	d41c      	bmi.n	8010e62 <uxr_read_session_header+0x7e>
 8010e28:	f898 2000 	ldrb.w	r2, [r8]
 8010e2c:	787b      	ldrb	r3, [r7, #1]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d003      	beq.n	8010e3a <uxr_read_session_header+0x56>
 8010e32:	2001      	movs	r0, #1
 8010e34:	f080 0001 	eor.w	r0, r0, #1
 8010e38:	e7e1      	b.n	8010dfe <uxr_read_session_header+0x1a>
 8010e3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010e3e:	78bb      	ldrb	r3, [r7, #2]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	f107 0102 	add.w	r1, r7, #2
 8010e46:	d1f4      	bne.n	8010e32 <uxr_read_session_header+0x4e>
 8010e48:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010e4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d1ee      	bne.n	8010e32 <uxr_read_session_header+0x4e>
 8010e54:	784b      	ldrb	r3, [r1, #1]
 8010e56:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d1e9      	bne.n	8010e32 <uxr_read_session_header+0x4e>
 8010e5e:	2000      	movs	r0, #0
 8010e60:	e7e8      	b.n	8010e34 <uxr_read_session_header+0x50>
 8010e62:	2001      	movs	r0, #1
 8010e64:	e7cb      	b.n	8010dfe <uxr_read_session_header+0x1a>
 8010e66:	bf00      	nop

08010e68 <uxr_session_header_offset>:
 8010e68:	f990 3000 	ldrsb.w	r3, [r0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bfac      	ite	ge
 8010e70:	2008      	movge	r0, #8
 8010e72:	2004      	movlt	r0, #4
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop

08010e78 <uxr_init_base_object_request>:
 8010e78:	b530      	push	{r4, r5, lr}
 8010e7a:	88c3      	ldrh	r3, [r0, #6]
 8010e7c:	b083      	sub	sp, #12
 8010e7e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010e82:	9101      	str	r1, [sp, #4]
 8010e84:	f1a3 010a 	sub.w	r1, r3, #10
 8010e88:	b289      	uxth	r1, r1
 8010e8a:	42a1      	cmp	r1, r4
 8010e8c:	d80e      	bhi.n	8010eac <uxr_init_base_object_request+0x34>
 8010e8e:	3301      	adds	r3, #1
 8010e90:	b29c      	uxth	r4, r3
 8010e92:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	80c4      	strh	r4, [r0, #6]
 8010e9a:	1c91      	adds	r1, r2, #2
 8010e9c:	9801      	ldr	r0, [sp, #4]
 8010e9e:	7015      	strb	r5, [r2, #0]
 8010ea0:	7053      	strb	r3, [r2, #1]
 8010ea2:	f7fe fe41 	bl	800fb28 <uxr_object_id_to_raw>
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	b003      	add	sp, #12
 8010eaa:	bd30      	pop	{r4, r5, pc}
 8010eac:	230a      	movs	r3, #10
 8010eae:	461c      	mov	r4, r3
 8010eb0:	2500      	movs	r5, #0
 8010eb2:	e7f1      	b.n	8010e98 <uxr_init_base_object_request+0x20>

08010eb4 <uxr_parse_base_object_request>:
 8010eb4:	b570      	push	{r4, r5, r6, lr}
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	3002      	adds	r0, #2
 8010eba:	460d      	mov	r5, r1
 8010ebc:	4616      	mov	r6, r2
 8010ebe:	f7fe fe1f 	bl	800fb00 <uxr_object_id_from_raw>
 8010ec2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010ec6:	8028      	strh	r0, [r5, #0]
 8010ec8:	806b      	strh	r3, [r5, #2]
 8010eca:	7822      	ldrb	r2, [r4, #0]
 8010ecc:	7863      	ldrb	r3, [r4, #1]
 8010ece:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010ed2:	8033      	strh	r3, [r6, #0]
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
 8010ed6:	bf00      	nop

08010ed8 <uxr_init_framing_io>:
 8010ed8:	2300      	movs	r3, #0
 8010eda:	7041      	strb	r1, [r0, #1]
 8010edc:	7003      	strb	r3, [r0, #0]
 8010ede:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop

08010ee4 <uxr_write_framed_msg>:
 8010ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	7845      	ldrb	r5, [r0, #1]
 8010eea:	b085      	sub	sp, #20
 8010eec:	4604      	mov	r4, r0
 8010eee:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8010ef2:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 8010ef6:	f1bc 0f01 	cmp.w	ip, #1
 8010efa:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8010efe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010f02:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 8010f06:	460e      	mov	r6, r1
 8010f08:	4617      	mov	r7, r2
 8010f0a:	469b      	mov	fp, r3
 8010f0c:	f240 8116 	bls.w	801113c <uxr_write_framed_msg+0x258>
 8010f10:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8010f14:	2302      	movs	r3, #2
 8010f16:	2a01      	cmp	r2, #1
 8010f18:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8010f1c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010f20:	f240 8091 	bls.w	8011046 <uxr_write_framed_msg+0x162>
 8010f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f26:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010f2a:	b2d9      	uxtb	r1, r3
 8010f2c:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010f30:	2203      	movs	r2, #3
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f38:	f240 809a 	bls.w	8011070 <uxr_write_framed_msg+0x18c>
 8010f3c:	18a3      	adds	r3, r4, r2
 8010f3e:	3201      	adds	r2, #1
 8010f40:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8010f44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010f4e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010f52:	2901      	cmp	r1, #1
 8010f54:	eb04 0102 	add.w	r1, r4, r2
 8010f58:	f240 8101 	bls.w	801115e <uxr_write_framed_msg+0x27a>
 8010f5c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010f60:	3201      	adds	r2, #1
 8010f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f64:	b2d2      	uxtb	r2, r2
 8010f66:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 8106 	beq.w	801117c <uxr_write_framed_msg+0x298>
 8010f70:	f04f 0a00 	mov.w	sl, #0
 8010f74:	46d1      	mov	r9, sl
 8010f76:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010f7a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010f7e:	2901      	cmp	r1, #1
 8010f80:	f240 80a3 	bls.w	80110ca <uxr_write_framed_msg+0x1e6>
 8010f84:	2a29      	cmp	r2, #41	@ 0x29
 8010f86:	d87f      	bhi.n	8011088 <uxr_write_framed_msg+0x1a4>
 8010f88:	18a1      	adds	r1, r4, r2
 8010f8a:	3201      	adds	r2, #1
 8010f8c:	b2d2      	uxtb	r2, r2
 8010f8e:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010f92:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010f96:	ea8a 0303 	eor.w	r3, sl, r3
 8010f9a:	4984      	ldr	r1, [pc, #528]	@ (80111ac <uxr_write_framed_msg+0x2c8>)
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	f109 0901 	add.w	r9, r9, #1
 8010fa2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fa6:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8010faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fac:	454b      	cmp	r3, r9
 8010fae:	d8e2      	bhi.n	8010f76 <uxr_write_framed_msg+0x92>
 8010fb0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8010fb4:	fa5f f98a 	uxtb.w	r9, sl
 8010fb8:	9301      	str	r3, [sp, #4]
 8010fba:	f04f 0b00 	mov.w	fp, #0
 8010fbe:	f88d 900c 	strb.w	r9, [sp, #12]
 8010fc2:	f88d 300d 	strb.w	r3, [sp, #13]
 8010fc6:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 8010fca:	fa5f f18a 	uxtb.w	r1, sl
 8010fce:	2901      	cmp	r1, #1
 8010fd0:	d920      	bls.n	8011014 <uxr_write_framed_msg+0x130>
 8010fd2:	2a29      	cmp	r2, #41	@ 0x29
 8010fd4:	f240 808b 	bls.w	80110ee <uxr_write_framed_msg+0x20a>
 8010fd8:	2500      	movs	r5, #0
 8010fda:	e000      	b.n	8010fde <uxr_write_framed_msg+0xfa>
 8010fdc:	b160      	cbz	r0, 8010ff8 <uxr_write_framed_msg+0x114>
 8010fde:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010fe2:	1b52      	subs	r2, r2, r5
 8010fe4:	4421      	add	r1, r4
 8010fe6:	4643      	mov	r3, r8
 8010fe8:	4638      	mov	r0, r7
 8010fea:	47b0      	blx	r6
 8010fec:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010ff0:	4405      	add	r5, r0
 8010ff2:	4295      	cmp	r5, r2
 8010ff4:	d3f2      	bcc.n	8010fdc <uxr_write_framed_msg+0xf8>
 8010ff6:	d003      	beq.n	8011000 <uxr_write_framed_msg+0x11c>
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	b005      	add	sp, #20
 8010ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011000:	fa5f f18a 	uxtb.w	r1, sl
 8011004:	f04f 0300 	mov.w	r3, #0
 8011008:	2901      	cmp	r1, #1
 801100a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801100e:	f04f 0200 	mov.w	r2, #0
 8011012:	d86c      	bhi.n	80110ee <uxr_write_framed_msg+0x20a>
 8011014:	1c51      	adds	r1, r2, #1
 8011016:	b2c9      	uxtb	r1, r1
 8011018:	2929      	cmp	r1, #41	@ 0x29
 801101a:	d8dd      	bhi.n	8010fd8 <uxr_write_framed_msg+0xf4>
 801101c:	18a0      	adds	r0, r4, r2
 801101e:	3202      	adds	r2, #2
 8011020:	f089 0920 	eor.w	r9, r9, #32
 8011024:	b2d2      	uxtb	r2, r2
 8011026:	4659      	mov	r1, fp
 8011028:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801102c:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 8011030:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011034:	f04f 0b01 	mov.w	fp, #1
 8011038:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801103c:	2900      	cmp	r1, #0
 801103e:	d162      	bne.n	8011106 <uxr_write_framed_msg+0x222>
 8011040:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011044:	e7bf      	b.n	8010fc6 <uxr_write_framed_msg+0xe2>
 8011046:	2204      	movs	r2, #4
 8011048:	2503      	movs	r5, #3
 801104a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801104c:	4423      	add	r3, r4
 801104e:	b2c9      	uxtb	r1, r1
 8011050:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011054:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8011058:	4425      	add	r5, r4
 801105a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801105e:	f080 0020 	eor.w	r0, r0, #32
 8011062:	2b01      	cmp	r3, #1
 8011064:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8011068:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801106c:	f63f af66 	bhi.w	8010f3c <uxr_write_framed_msg+0x58>
 8011070:	18a3      	adds	r3, r4, r2
 8011072:	f081 0120 	eor.w	r1, r1, #32
 8011076:	3202      	adds	r2, #2
 8011078:	207d      	movs	r0, #125	@ 0x7d
 801107a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801107e:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 8011082:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011086:	e75f      	b.n	8010f48 <uxr_write_framed_msg+0x64>
 8011088:	2500      	movs	r5, #0
 801108a:	e001      	b.n	8011090 <uxr_write_framed_msg+0x1ac>
 801108c:	2800      	cmp	r0, #0
 801108e:	d0b3      	beq.n	8010ff8 <uxr_write_framed_msg+0x114>
 8011090:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011094:	1b52      	subs	r2, r2, r5
 8011096:	4421      	add	r1, r4
 8011098:	4643      	mov	r3, r8
 801109a:	4638      	mov	r0, r7
 801109c:	47b0      	blx	r6
 801109e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80110a2:	4405      	add	r5, r0
 80110a4:	4295      	cmp	r5, r2
 80110a6:	d3f1      	bcc.n	801108c <uxr_write_framed_msg+0x1a8>
 80110a8:	d1a6      	bne.n	8010ff8 <uxr_write_framed_msg+0x114>
 80110aa:	f04f 0300 	mov.w	r3, #0
 80110ae:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80110b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110b4:	454b      	cmp	r3, r9
 80110b6:	d971      	bls.n	801119c <uxr_write_framed_msg+0x2b8>
 80110b8:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80110bc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80110c0:	2901      	cmp	r1, #1
 80110c2:	f04f 0200 	mov.w	r2, #0
 80110c6:	f63f af5d 	bhi.w	8010f84 <uxr_write_framed_msg+0xa0>
 80110ca:	1c51      	adds	r1, r2, #1
 80110cc:	b2c9      	uxtb	r1, r1
 80110ce:	2929      	cmp	r1, #41	@ 0x29
 80110d0:	d8da      	bhi.n	8011088 <uxr_write_framed_msg+0x1a4>
 80110d2:	18a0      	adds	r0, r4, r2
 80110d4:	3202      	adds	r2, #2
 80110d6:	b2d2      	uxtb	r2, r2
 80110d8:	f083 0120 	eor.w	r1, r3, #32
 80110dc:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80110e0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80110e4:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 80110e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80110ec:	e753      	b.n	8010f96 <uxr_write_framed_msg+0xb2>
 80110ee:	18a0      	adds	r0, r4, r2
 80110f0:	3201      	adds	r2, #1
 80110f2:	b2d2      	uxtb	r2, r2
 80110f4:	4659      	mov	r1, fp
 80110f6:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 80110fa:	f04f 0b01 	mov.w	fp, #1
 80110fe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011102:	2900      	cmp	r1, #0
 8011104:	d09c      	beq.n	8011040 <uxr_write_framed_msg+0x15c>
 8011106:	2500      	movs	r5, #0
 8011108:	e002      	b.n	8011110 <uxr_write_framed_msg+0x22c>
 801110a:	2800      	cmp	r0, #0
 801110c:	f43f af74 	beq.w	8010ff8 <uxr_write_framed_msg+0x114>
 8011110:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011114:	1b52      	subs	r2, r2, r5
 8011116:	4421      	add	r1, r4
 8011118:	4643      	mov	r3, r8
 801111a:	4638      	mov	r0, r7
 801111c:	47b0      	blx	r6
 801111e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011122:	4405      	add	r5, r0
 8011124:	4295      	cmp	r5, r2
 8011126:	d3f0      	bcc.n	801110a <uxr_write_framed_msg+0x226>
 8011128:	f47f af66 	bne.w	8010ff8 <uxr_write_framed_msg+0x114>
 801112c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801112e:	2300      	movs	r3, #0
 8011130:	b290      	uxth	r0, r2
 8011132:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011136:	b005      	add	sp, #20
 8011138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113c:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8011140:	f085 0520 	eor.w	r5, r5, #32
 8011144:	2303      	movs	r3, #3
 8011146:	217d      	movs	r1, #125	@ 0x7d
 8011148:	2a01      	cmp	r2, #1
 801114a:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 801114e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011152:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011156:	d814      	bhi.n	8011182 <uxr_write_framed_msg+0x29e>
 8011158:	2205      	movs	r2, #5
 801115a:	2504      	movs	r5, #4
 801115c:	e775      	b.n	801104a <uxr_write_framed_msg+0x166>
 801115e:	f083 0320 	eor.w	r3, r3, #32
 8011162:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 8011166:	3202      	adds	r2, #2
 8011168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801116a:	b2d2      	uxtb	r2, r2
 801116c:	207d      	movs	r0, #125	@ 0x7d
 801116e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011172:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011176:	2b00      	cmp	r3, #0
 8011178:	f47f aefa 	bne.w	8010f70 <uxr_write_framed_msg+0x8c>
 801117c:	9301      	str	r3, [sp, #4]
 801117e:	4699      	mov	r9, r3
 8011180:	e71b      	b.n	8010fba <uxr_write_framed_msg+0xd6>
 8011182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011184:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011188:	b2d9      	uxtb	r1, r3
 801118a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801118e:	2204      	movs	r2, #4
 8011190:	2b01      	cmp	r3, #1
 8011192:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011196:	f63f aed1 	bhi.w	8010f3c <uxr_write_framed_msg+0x58>
 801119a:	e769      	b.n	8011070 <uxr_write_framed_msg+0x18c>
 801119c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80111a0:	fa5f f98a 	uxtb.w	r9, sl
 80111a4:	9301      	str	r3, [sp, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	e707      	b.n	8010fba <uxr_write_framed_msg+0xd6>
 80111aa:	bf00      	nop
 80111ac:	08015bc4 	.word	0x08015bc4

080111b0 <uxr_framing_read_transport>:
 80111b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b4:	4604      	mov	r4, r0
 80111b6:	b083      	sub	sp, #12
 80111b8:	461f      	mov	r7, r3
 80111ba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80111be:	4689      	mov	r9, r1
 80111c0:	4692      	mov	sl, r2
 80111c2:	f000 fc87 	bl	8011ad4 <uxr_millis>
 80111c6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80111ca:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80111ce:	42b3      	cmp	r3, r6
 80111d0:	4680      	mov	r8, r0
 80111d2:	d05f      	beq.n	8011294 <uxr_framing_read_transport+0xe4>
 80111d4:	d81b      	bhi.n	801120e <uxr_framing_read_transport+0x5e>
 80111d6:	1e75      	subs	r5, r6, #1
 80111d8:	1aed      	subs	r5, r5, r3
 80111da:	b2ed      	uxtb	r5, r5
 80111dc:	2600      	movs	r6, #0
 80111de:	455d      	cmp	r5, fp
 80111e0:	d81e      	bhi.n	8011220 <uxr_framing_read_transport+0x70>
 80111e2:	19ab      	adds	r3, r5, r6
 80111e4:	455b      	cmp	r3, fp
 80111e6:	bf84      	itt	hi
 80111e8:	ebab 0605 	subhi.w	r6, fp, r5
 80111ec:	b2f6      	uxtbhi	r6, r6
 80111ee:	b9e5      	cbnz	r5, 801122a <uxr_framing_read_transport+0x7a>
 80111f0:	f04f 0b00 	mov.w	fp, #0
 80111f4:	f000 fc6e 	bl	8011ad4 <uxr_millis>
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	eba0 0008 	sub.w	r0, r0, r8
 80111fe:	1a1b      	subs	r3, r3, r0
 8011200:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011204:	4658      	mov	r0, fp
 8011206:	603b      	str	r3, [r7, #0]
 8011208:	b003      	add	sp, #12
 801120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120e:	2e00      	cmp	r6, #0
 8011210:	d048      	beq.n	80112a4 <uxr_framing_read_transport+0xf4>
 8011212:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011216:	b2ed      	uxtb	r5, r5
 8011218:	3e01      	subs	r6, #1
 801121a:	455d      	cmp	r5, fp
 801121c:	b2f6      	uxtb	r6, r6
 801121e:	d9e0      	bls.n	80111e2 <uxr_framing_read_transport+0x32>
 8011220:	fa5f f58b 	uxtb.w	r5, fp
 8011224:	2600      	movs	r6, #0
 8011226:	2d00      	cmp	r5, #0
 8011228:	d0e2      	beq.n	80111f0 <uxr_framing_read_transport+0x40>
 801122a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801122e:	3102      	adds	r1, #2
 8011230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	4421      	add	r1, r4
 8011238:	462a      	mov	r2, r5
 801123a:	4650      	mov	r0, sl
 801123c:	47c8      	blx	r9
 801123e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011242:	4a1b      	ldr	r2, [pc, #108]	@ (80112b0 <uxr_framing_read_transport+0x100>)
 8011244:	4403      	add	r3, r0
 8011246:	0859      	lsrs	r1, r3, #1
 8011248:	fba2 2101 	umull	r2, r1, r2, r1
 801124c:	0889      	lsrs	r1, r1, #2
 801124e:	222a      	movs	r2, #42	@ 0x2a
 8011250:	fb02 3111 	mls	r1, r2, r1, r3
 8011254:	4683      	mov	fp, r0
 8011256:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801125a:	2800      	cmp	r0, #0
 801125c:	d0c8      	beq.n	80111f0 <uxr_framing_read_transport+0x40>
 801125e:	42a8      	cmp	r0, r5
 8011260:	d1c8      	bne.n	80111f4 <uxr_framing_read_transport+0x44>
 8011262:	b31e      	cbz	r6, 80112ac <uxr_framing_read_transport+0xfc>
 8011264:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011266:	9300      	str	r3, [sp, #0]
 8011268:	3102      	adds	r1, #2
 801126a:	4421      	add	r1, r4
 801126c:	4632      	mov	r2, r6
 801126e:	2300      	movs	r3, #0
 8011270:	4650      	mov	r0, sl
 8011272:	47c8      	blx	r9
 8011274:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011278:	490d      	ldr	r1, [pc, #52]	@ (80112b0 <uxr_framing_read_transport+0x100>)
 801127a:	181a      	adds	r2, r3, r0
 801127c:	0853      	lsrs	r3, r2, #1
 801127e:	fba1 1303 	umull	r1, r3, r1, r3
 8011282:	089b      	lsrs	r3, r3, #2
 8011284:	212a      	movs	r1, #42	@ 0x2a
 8011286:	fb01 2313 	mls	r3, r1, r3, r2
 801128a:	eb00 0b05 	add.w	fp, r0, r5
 801128e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011292:	e7af      	b.n	80111f4 <uxr_framing_read_transport+0x44>
 8011294:	2600      	movs	r6, #0
 8011296:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801129a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801129c:	d9c0      	bls.n	8011220 <uxr_framing_read_transport+0x70>
 801129e:	2102      	movs	r1, #2
 80112a0:	2529      	movs	r5, #41	@ 0x29
 80112a2:	e7c5      	b.n	8011230 <uxr_framing_read_transport+0x80>
 80112a4:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80112a8:	b2ed      	uxtb	r5, r5
 80112aa:	e798      	b.n	80111de <uxr_framing_read_transport+0x2e>
 80112ac:	46ab      	mov	fp, r5
 80112ae:	e7a1      	b.n	80111f4 <uxr_framing_read_transport+0x44>
 80112b0:	30c30c31 	.word	0x30c30c31

080112b4 <uxr_read_framed_msg>:
 80112b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 80112bc:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80112c0:	42ae      	cmp	r6, r5
 80112c2:	b083      	sub	sp, #12
 80112c4:	4604      	mov	r4, r0
 80112c6:	461f      	mov	r7, r3
 80112c8:	4689      	mov	r9, r1
 80112ca:	4692      	mov	sl, r2
 80112cc:	f000 817d 	beq.w	80115ca <uxr_read_framed_msg+0x316>
 80112d0:	7823      	ldrb	r3, [r4, #0]
 80112d2:	4ecc      	ldr	r6, [pc, #816]	@ (8011604 <uxr_read_framed_msg+0x350>)
 80112d4:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 8011608 <uxr_read_framed_msg+0x354>
 80112d8:	2b07      	cmp	r3, #7
 80112da:	d8fd      	bhi.n	80112d8 <uxr_read_framed_msg+0x24>
 80112dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80112e0:	00f40113 	.word	0x00f40113
 80112e4:	00b700d4 	.word	0x00b700d4
 80112e8:	004d008e 	.word	0x004d008e
 80112ec:	00080030 	.word	0x00080030
 80112f0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80112f4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80112f8:	4298      	cmp	r0, r3
 80112fa:	f000 8141 	beq.w	8011580 <uxr_read_framed_msg+0x2cc>
 80112fe:	18e2      	adds	r2, r4, r3
 8011300:	7891      	ldrb	r1, [r2, #2]
 8011302:	297d      	cmp	r1, #125	@ 0x7d
 8011304:	f000 81a2 	beq.w	801164c <uxr_read_framed_msg+0x398>
 8011308:	3301      	adds	r3, #1
 801130a:	085a      	lsrs	r2, r3, #1
 801130c:	fba6 0202 	umull	r0, r2, r6, r2
 8011310:	0892      	lsrs	r2, r2, #2
 8011312:	202a      	movs	r0, #42	@ 0x2a
 8011314:	fb00 3312 	mls	r3, r0, r2, r3
 8011318:	297e      	cmp	r1, #126	@ 0x7e
 801131a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801131e:	f000 8251 	beq.w	80117c4 <uxr_read_framed_msg+0x510>
 8011322:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011324:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011326:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801132a:	b29b      	uxth	r3, r3
 801132c:	2100      	movs	r1, #0
 801132e:	429a      	cmp	r2, r3
 8011330:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011332:	7021      	strb	r1, [r4, #0]
 8011334:	f000 8182 	beq.w	801163c <uxr_read_framed_msg+0x388>
 8011338:	2000      	movs	r0, #0
 801133a:	b003      	add	sp, #12
 801133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011340:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011344:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011348:	4298      	cmp	r0, r3
 801134a:	f000 8128 	beq.w	801159e <uxr_read_framed_msg+0x2ea>
 801134e:	18e2      	adds	r2, r4, r3
 8011350:	7891      	ldrb	r1, [r2, #2]
 8011352:	297d      	cmp	r1, #125	@ 0x7d
 8011354:	f000 8196 	beq.w	8011684 <uxr_read_framed_msg+0x3d0>
 8011358:	3301      	adds	r3, #1
 801135a:	085a      	lsrs	r2, r3, #1
 801135c:	fba6 0202 	umull	r0, r2, r6, r2
 8011360:	0892      	lsrs	r2, r2, #2
 8011362:	202a      	movs	r0, #42	@ 0x2a
 8011364:	fb00 3312 	mls	r3, r0, r2, r3
 8011368:	297e      	cmp	r1, #126	@ 0x7e
 801136a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801136e:	f000 8219 	beq.w	80117a4 <uxr_read_framed_msg+0x4f0>
 8011372:	2307      	movs	r3, #7
 8011374:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8011376:	7023      	strb	r3, [r4, #0]
 8011378:	e7ae      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 801137a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801137c:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 801137e:	429d      	cmp	r5, r3
 8011380:	d937      	bls.n	80113f2 <uxr_read_framed_msg+0x13e>
 8011382:	ee07 9a90 	vmov	s15, r9
 8011386:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801138a:	e01e      	b.n	80113ca <uxr_read_framed_msg+0x116>
 801138c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8011390:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8011394:	f000 80d2 	beq.w	801153c <uxr_read_framed_msg+0x288>
 8011398:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801139c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80113a0:	f000 8214 	beq.w	80117cc <uxr_read_framed_msg+0x518>
 80113a4:	f807 e003 	strb.w	lr, [r7, r3]
 80113a8:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80113aa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80113ac:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 80113ae:	ea80 010e 	eor.w	r1, r0, lr
 80113b2:	b2c9      	uxtb	r1, r1
 80113b4:	3301      	adds	r3, #1
 80113b6:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80113c0:	42ab      	cmp	r3, r5
 80113c2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80113c4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80113c6:	f080 8121 	bcs.w	801160c <uxr_read_framed_msg+0x358>
 80113ca:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 80113ce:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80113d2:	f101 0b01 	add.w	fp, r1, #1
 80113d6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80113da:	fba6 9202 	umull	r9, r2, r6, r2
 80113de:	0892      	lsrs	r2, r2, #2
 80113e0:	4288      	cmp	r0, r1
 80113e2:	eb04 0e01 	add.w	lr, r4, r1
 80113e6:	fb0c b212 	mls	r2, ip, r2, fp
 80113ea:	d1cf      	bne.n	801138c <uxr_read_framed_msg+0xd8>
 80113ec:	ee17 9a90 	vmov	r9, s15
 80113f0:	429d      	cmp	r5, r3
 80113f2:	f040 8112 	bne.w	801161a <uxr_read_framed_msg+0x366>
 80113f6:	2306      	movs	r3, #6
 80113f8:	7023      	strb	r3, [r4, #0]
 80113fa:	e76d      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 80113fc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011400:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011404:	4298      	cmp	r0, r3
 8011406:	f000 80bb 	beq.w	8011580 <uxr_read_framed_msg+0x2cc>
 801140a:	18e2      	adds	r2, r4, r3
 801140c:	7891      	ldrb	r1, [r2, #2]
 801140e:	297d      	cmp	r1, #125	@ 0x7d
 8011410:	f000 8153 	beq.w	80116ba <uxr_read_framed_msg+0x406>
 8011414:	3301      	adds	r3, #1
 8011416:	085a      	lsrs	r2, r3, #1
 8011418:	fba6 0202 	umull	r0, r2, r6, r2
 801141c:	0892      	lsrs	r2, r2, #2
 801141e:	202a      	movs	r0, #42	@ 0x2a
 8011420:	fb00 3212 	mls	r2, r0, r2, r3
 8011424:	297e      	cmp	r1, #126	@ 0x7e
 8011426:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801142a:	f000 81cb 	beq.w	80117c4 <uxr_read_framed_msg+0x510>
 801142e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011430:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011434:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011436:	b29b      	uxth	r3, r3
 8011438:	2000      	movs	r0, #0
 801143a:	428b      	cmp	r3, r1
 801143c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801143e:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011440:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011442:	f240 80db 	bls.w	80115fc <uxr_read_framed_msg+0x348>
 8011446:	7020      	strb	r0, [r4, #0]
 8011448:	b003      	add	sp, #12
 801144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801144e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011452:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011456:	4298      	cmp	r0, r3
 8011458:	f000 80a1 	beq.w	801159e <uxr_read_framed_msg+0x2ea>
 801145c:	18e2      	adds	r2, r4, r3
 801145e:	7891      	ldrb	r1, [r2, #2]
 8011460:	297d      	cmp	r1, #125	@ 0x7d
 8011462:	f000 8167 	beq.w	8011734 <uxr_read_framed_msg+0x480>
 8011466:	3301      	adds	r3, #1
 8011468:	085a      	lsrs	r2, r3, #1
 801146a:	fba6 0202 	umull	r0, r2, r6, r2
 801146e:	0892      	lsrs	r2, r2, #2
 8011470:	202a      	movs	r0, #42	@ 0x2a
 8011472:	fb00 3312 	mls	r3, r0, r2, r3
 8011476:	297e      	cmp	r1, #126	@ 0x7e
 8011478:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801147c:	f000 8192 	beq.w	80117a4 <uxr_read_framed_msg+0x4f0>
 8011480:	2304      	movs	r3, #4
 8011482:	8621      	strh	r1, [r4, #48]	@ 0x30
 8011484:	7023      	strb	r3, [r4, #0]
 8011486:	e727      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 8011488:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801148c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011490:	4290      	cmp	r0, r2
 8011492:	f000 80b1 	beq.w	80115f8 <uxr_read_framed_msg+0x344>
 8011496:	18a3      	adds	r3, r4, r2
 8011498:	7899      	ldrb	r1, [r3, #2]
 801149a:	297d      	cmp	r1, #125	@ 0x7d
 801149c:	f000 8166 	beq.w	801176c <uxr_read_framed_msg+0x4b8>
 80114a0:	3201      	adds	r2, #1
 80114a2:	0850      	lsrs	r0, r2, #1
 80114a4:	fba6 3000 	umull	r3, r0, r6, r0
 80114a8:	0880      	lsrs	r0, r0, #2
 80114aa:	232a      	movs	r3, #42	@ 0x2a
 80114ac:	fb03 2210 	mls	r2, r3, r0, r2
 80114b0:	297e      	cmp	r1, #126	@ 0x7e
 80114b2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80114b6:	f000 8187 	beq.w	80117c8 <uxr_read_framed_msg+0x514>
 80114ba:	7863      	ldrb	r3, [r4, #1]
 80114bc:	428b      	cmp	r3, r1
 80114be:	bf0c      	ite	eq
 80114c0:	2303      	moveq	r3, #3
 80114c2:	2300      	movne	r3, #0
 80114c4:	7023      	strb	r3, [r4, #0]
 80114c6:	e707      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 80114c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80114cc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80114d0:	2200      	movs	r2, #0
 80114d2:	4299      	cmp	r1, r3
 80114d4:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80114d8:	d063      	beq.n	80115a2 <uxr_read_framed_msg+0x2ee>
 80114da:	18e2      	adds	r2, r4, r3
 80114dc:	7892      	ldrb	r2, [r2, #2]
 80114de:	2a7d      	cmp	r2, #125	@ 0x7d
 80114e0:	f000 8107 	beq.w	80116f2 <uxr_read_framed_msg+0x43e>
 80114e4:	1c59      	adds	r1, r3, #1
 80114e6:	084b      	lsrs	r3, r1, #1
 80114e8:	fba6 0303 	umull	r0, r3, r6, r3
 80114ec:	089b      	lsrs	r3, r3, #2
 80114ee:	202a      	movs	r0, #42	@ 0x2a
 80114f0:	fb00 1313 	mls	r3, r0, r3, r1
 80114f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80114f6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80114fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80114fe:	d050      	beq.n	80115a2 <uxr_read_framed_msg+0x2ee>
 8011500:	2302      	movs	r3, #2
 8011502:	7023      	strb	r3, [r4, #0]
 8011504:	e6e8      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 8011506:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 801150a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801150e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011512:	1c51      	adds	r1, r2, #1
 8011514:	084b      	lsrs	r3, r1, #1
 8011516:	fba6 5303 	umull	r5, r3, r6, r3
 801151a:	089b      	lsrs	r3, r3, #2
 801151c:	fb0c 1313 	mls	r3, ip, r3, r1
 8011520:	4596      	cmp	lr, r2
 8011522:	eb04 0002 	add.w	r0, r4, r2
 8011526:	b2da      	uxtb	r2, r3
 8011528:	f43f af06 	beq.w	8011338 <uxr_read_framed_msg+0x84>
 801152c:	7883      	ldrb	r3, [r0, #2]
 801152e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011532:	2b7e      	cmp	r3, #126	@ 0x7e
 8011534:	d1ed      	bne.n	8011512 <uxr_read_framed_msg+0x25e>
 8011536:	2301      	movs	r3, #1
 8011538:	7023      	strb	r3, [r4, #0]
 801153a:	e6cd      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 801153c:	f101 0b01 	add.w	fp, r1, #1
 8011540:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8011544:	fba6 e202 	umull	lr, r2, r6, r2
 8011548:	3102      	adds	r1, #2
 801154a:	0892      	lsrs	r2, r2, #2
 801154c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8011550:	fb0c b212 	mls	r2, ip, r2, fp
 8011554:	fba6 9e0e 	umull	r9, lr, r6, lr
 8011558:	eb04 0b02 	add.w	fp, r4, r2
 801155c:	b2d2      	uxtb	r2, r2
 801155e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8011562:	4290      	cmp	r0, r2
 8011564:	fb0c 111e 	mls	r1, ip, lr, r1
 8011568:	f43f af40 	beq.w	80113ec <uxr_read_framed_msg+0x138>
 801156c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8011570:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8011574:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011578:	d036      	beq.n	80115e8 <uxr_read_framed_msg+0x334>
 801157a:	f08e 0e20 	eor.w	lr, lr, #32
 801157e:	e711      	b.n	80113a4 <uxr_read_framed_msg+0xf0>
 8011580:	2301      	movs	r3, #1
 8011582:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011584:	4649      	mov	r1, r9
 8011586:	e9cd 2300 	strd	r2, r3, [sp]
 801158a:	4620      	mov	r0, r4
 801158c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801158e:	4652      	mov	r2, sl
 8011590:	f7ff fe0e 	bl	80111b0 <uxr_framing_read_transport>
 8011594:	2800      	cmp	r0, #0
 8011596:	f43f aecf 	beq.w	8011338 <uxr_read_framed_msg+0x84>
 801159a:	7823      	ldrb	r3, [r4, #0]
 801159c:	e69c      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 801159e:	2302      	movs	r3, #2
 80115a0:	e7ef      	b.n	8011582 <uxr_read_framed_msg+0x2ce>
 80115a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80115a4:	2304      	movs	r3, #4
 80115a6:	e9cd 2300 	strd	r2, r3, [sp]
 80115aa:	4649      	mov	r1, r9
 80115ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115ae:	4652      	mov	r2, sl
 80115b0:	4620      	mov	r0, r4
 80115b2:	f7ff fdfd 	bl	80111b0 <uxr_framing_read_transport>
 80115b6:	2800      	cmp	r0, #0
 80115b8:	d1ef      	bne.n	801159a <uxr_read_framed_msg+0x2e6>
 80115ba:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 80115be:	387e      	subs	r0, #126	@ 0x7e
 80115c0:	bf18      	it	ne
 80115c2:	2001      	movne	r0, #1
 80115c4:	2800      	cmp	r0, #0
 80115c6:	d0e8      	beq.n	801159a <uxr_read_framed_msg+0x2e6>
 80115c8:	e6b6      	b.n	8011338 <uxr_read_framed_msg+0x84>
 80115ca:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80115cc:	2305      	movs	r3, #5
 80115ce:	e9cd 5300 	strd	r5, r3, [sp]
 80115d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115d4:	f7ff fdec 	bl	80111b0 <uxr_framing_read_transport>
 80115d8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80115dc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80115e0:	429a      	cmp	r2, r3
 80115e2:	f43f aea9 	beq.w	8011338 <uxr_read_framed_msg+0x84>
 80115e6:	e673      	b.n	80112d0 <uxr_read_framed_msg+0x1c>
 80115e8:	429d      	cmp	r5, r3
 80115ea:	ee17 9a90 	vmov	r9, s15
 80115ee:	f43f af02 	beq.w	80113f6 <uxr_read_framed_msg+0x142>
 80115f2:	2301      	movs	r3, #1
 80115f4:	7023      	strb	r3, [r4, #0]
 80115f6:	e66f      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 80115f8:	2303      	movs	r3, #3
 80115fa:	e7c2      	b.n	8011582 <uxr_read_framed_msg+0x2ce>
 80115fc:	2305      	movs	r3, #5
 80115fe:	7023      	strb	r3, [r4, #0]
 8011600:	e66a      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 8011602:	bf00      	nop
 8011604:	30c30c31 	.word	0x30c30c31
 8011608:	08015bc4 	.word	0x08015bc4
 801160c:	ee17 9a90 	vmov	r9, s15
 8011610:	f43f aef1 	beq.w	80113f6 <uxr_read_framed_msg+0x142>
 8011614:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011618:	d08d      	beq.n	8011536 <uxr_read_framed_msg+0x282>
 801161a:	1aeb      	subs	r3, r5, r3
 801161c:	3302      	adds	r3, #2
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	4652      	mov	r2, sl
 8011626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011628:	4649      	mov	r1, r9
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff fdc0 	bl	80111b0 <uxr_framing_read_transport>
 8011630:	fab0 f080 	clz	r0, r0
 8011634:	0940      	lsrs	r0, r0, #5
 8011636:	2800      	cmp	r0, #0
 8011638:	d0af      	beq.n	801159a <uxr_read_framed_msg+0x2e6>
 801163a:	e67d      	b.n	8011338 <uxr_read_framed_msg+0x84>
 801163c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801163e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011642:	7013      	strb	r3, [r2, #0]
 8011644:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011646:	b003      	add	sp, #12
 8011648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801164c:	1c59      	adds	r1, r3, #1
 801164e:	084a      	lsrs	r2, r1, #1
 8011650:	fba6 5202 	umull	r5, r2, r6, r2
 8011654:	0892      	lsrs	r2, r2, #2
 8011656:	252a      	movs	r5, #42	@ 0x2a
 8011658:	fb05 1212 	mls	r2, r5, r2, r1
 801165c:	b2d1      	uxtb	r1, r2
 801165e:	4288      	cmp	r0, r1
 8011660:	d08e      	beq.n	8011580 <uxr_read_framed_msg+0x2cc>
 8011662:	3302      	adds	r3, #2
 8011664:	4422      	add	r2, r4
 8011666:	0858      	lsrs	r0, r3, #1
 8011668:	fba6 1000 	umull	r1, r0, r6, r0
 801166c:	7891      	ldrb	r1, [r2, #2]
 801166e:	0882      	lsrs	r2, r0, #2
 8011670:	fb05 3312 	mls	r3, r5, r2, r3
 8011674:	297e      	cmp	r1, #126	@ 0x7e
 8011676:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801167a:	f000 80a3 	beq.w	80117c4 <uxr_read_framed_msg+0x510>
 801167e:	f081 0120 	eor.w	r1, r1, #32
 8011682:	e64e      	b.n	8011322 <uxr_read_framed_msg+0x6e>
 8011684:	1c59      	adds	r1, r3, #1
 8011686:	084a      	lsrs	r2, r1, #1
 8011688:	fba6 5202 	umull	r5, r2, r6, r2
 801168c:	0892      	lsrs	r2, r2, #2
 801168e:	252a      	movs	r5, #42	@ 0x2a
 8011690:	fb05 1212 	mls	r2, r5, r2, r1
 8011694:	b2d1      	uxtb	r1, r2
 8011696:	4288      	cmp	r0, r1
 8011698:	d081      	beq.n	801159e <uxr_read_framed_msg+0x2ea>
 801169a:	3302      	adds	r3, #2
 801169c:	4422      	add	r2, r4
 801169e:	0858      	lsrs	r0, r3, #1
 80116a0:	fba6 1000 	umull	r1, r0, r6, r0
 80116a4:	7891      	ldrb	r1, [r2, #2]
 80116a6:	0882      	lsrs	r2, r0, #2
 80116a8:	fb05 3312 	mls	r3, r5, r2, r3
 80116ac:	297e      	cmp	r1, #126	@ 0x7e
 80116ae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80116b2:	d077      	beq.n	80117a4 <uxr_read_framed_msg+0x4f0>
 80116b4:	f081 0120 	eor.w	r1, r1, #32
 80116b8:	e65b      	b.n	8011372 <uxr_read_framed_msg+0xbe>
 80116ba:	1c59      	adds	r1, r3, #1
 80116bc:	084a      	lsrs	r2, r1, #1
 80116be:	fba6 5202 	umull	r5, r2, r6, r2
 80116c2:	0892      	lsrs	r2, r2, #2
 80116c4:	252a      	movs	r5, #42	@ 0x2a
 80116c6:	fb05 1212 	mls	r2, r5, r2, r1
 80116ca:	b2d1      	uxtb	r1, r2
 80116cc:	4288      	cmp	r0, r1
 80116ce:	f43f af57 	beq.w	8011580 <uxr_read_framed_msg+0x2cc>
 80116d2:	3302      	adds	r3, #2
 80116d4:	4422      	add	r2, r4
 80116d6:	0858      	lsrs	r0, r3, #1
 80116d8:	fba6 1000 	umull	r1, r0, r6, r0
 80116dc:	7891      	ldrb	r1, [r2, #2]
 80116de:	0882      	lsrs	r2, r0, #2
 80116e0:	fb05 3312 	mls	r3, r5, r2, r3
 80116e4:	297e      	cmp	r1, #126	@ 0x7e
 80116e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80116ea:	d06b      	beq.n	80117c4 <uxr_read_framed_msg+0x510>
 80116ec:	f081 0120 	eor.w	r1, r1, #32
 80116f0:	e69d      	b.n	801142e <uxr_read_framed_msg+0x17a>
 80116f2:	1c5d      	adds	r5, r3, #1
 80116f4:	086a      	lsrs	r2, r5, #1
 80116f6:	fba6 0202 	umull	r0, r2, r6, r2
 80116fa:	0892      	lsrs	r2, r2, #2
 80116fc:	202a      	movs	r0, #42	@ 0x2a
 80116fe:	fb00 5212 	mls	r2, r0, r2, r5
 8011702:	b2d5      	uxtb	r5, r2
 8011704:	42a9      	cmp	r1, r5
 8011706:	f43f af4c 	beq.w	80115a2 <uxr_read_framed_msg+0x2ee>
 801170a:	3302      	adds	r3, #2
 801170c:	4422      	add	r2, r4
 801170e:	0859      	lsrs	r1, r3, #1
 8011710:	fba6 5101 	umull	r5, r1, r6, r1
 8011714:	7895      	ldrb	r5, [r2, #2]
 8011716:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 801171a:	088a      	lsrs	r2, r1, #2
 801171c:	fb00 3312 	mls	r3, r0, r2, r3
 8011720:	2d7e      	cmp	r5, #126	@ 0x7e
 8011722:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011726:	f43f af3c 	beq.w	80115a2 <uxr_read_framed_msg+0x2ee>
 801172a:	f085 0520 	eor.w	r5, r5, #32
 801172e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8011732:	e6e5      	b.n	8011500 <uxr_read_framed_msg+0x24c>
 8011734:	1c59      	adds	r1, r3, #1
 8011736:	084a      	lsrs	r2, r1, #1
 8011738:	fba6 5202 	umull	r5, r2, r6, r2
 801173c:	0892      	lsrs	r2, r2, #2
 801173e:	252a      	movs	r5, #42	@ 0x2a
 8011740:	fb05 1212 	mls	r2, r5, r2, r1
 8011744:	b2d1      	uxtb	r1, r2
 8011746:	4288      	cmp	r0, r1
 8011748:	f43f af29 	beq.w	801159e <uxr_read_framed_msg+0x2ea>
 801174c:	3302      	adds	r3, #2
 801174e:	4422      	add	r2, r4
 8011750:	0858      	lsrs	r0, r3, #1
 8011752:	fba6 1000 	umull	r1, r0, r6, r0
 8011756:	7891      	ldrb	r1, [r2, #2]
 8011758:	0882      	lsrs	r2, r0, #2
 801175a:	fb05 3312 	mls	r3, r5, r2, r3
 801175e:	297e      	cmp	r1, #126	@ 0x7e
 8011760:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011764:	d01e      	beq.n	80117a4 <uxr_read_framed_msg+0x4f0>
 8011766:	f081 0120 	eor.w	r1, r1, #32
 801176a:	e689      	b.n	8011480 <uxr_read_framed_msg+0x1cc>
 801176c:	1c51      	adds	r1, r2, #1
 801176e:	084b      	lsrs	r3, r1, #1
 8011770:	fba6 5303 	umull	r5, r3, r6, r3
 8011774:	089b      	lsrs	r3, r3, #2
 8011776:	252a      	movs	r5, #42	@ 0x2a
 8011778:	fb05 1313 	mls	r3, r5, r3, r1
 801177c:	b2d9      	uxtb	r1, r3
 801177e:	4288      	cmp	r0, r1
 8011780:	f43f af3a 	beq.w	80115f8 <uxr_read_framed_msg+0x344>
 8011784:	3202      	adds	r2, #2
 8011786:	4423      	add	r3, r4
 8011788:	0850      	lsrs	r0, r2, #1
 801178a:	789b      	ldrb	r3, [r3, #2]
 801178c:	fba6 1000 	umull	r1, r0, r6, r0
 8011790:	0880      	lsrs	r0, r0, #2
 8011792:	fb05 2210 	mls	r2, r5, r0, r2
 8011796:	2b7e      	cmp	r3, #126	@ 0x7e
 8011798:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801179c:	d014      	beq.n	80117c8 <uxr_read_framed_msg+0x514>
 801179e:	f083 0120 	eor.w	r1, r3, #32
 80117a2:	e68a      	b.n	80114ba <uxr_read_framed_msg+0x206>
 80117a4:	2302      	movs	r3, #2
 80117a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80117a8:	4649      	mov	r1, r9
 80117aa:	e9cd 2300 	strd	r2, r3, [sp]
 80117ae:	4620      	mov	r0, r4
 80117b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117b2:	4652      	mov	r2, sl
 80117b4:	f7ff fcfc 	bl	80111b0 <uxr_framing_read_transport>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	f47f aeee 	bne.w	801159a <uxr_read_framed_msg+0x2e6>
 80117be:	2301      	movs	r3, #1
 80117c0:	7023      	strb	r3, [r4, #0]
 80117c2:	e589      	b.n	80112d8 <uxr_read_framed_msg+0x24>
 80117c4:	2301      	movs	r3, #1
 80117c6:	e7ee      	b.n	80117a6 <uxr_read_framed_msg+0x4f2>
 80117c8:	2303      	movs	r3, #3
 80117ca:	e7ec      	b.n	80117a6 <uxr_read_framed_msg+0x4f2>
 80117cc:	ee17 9a90 	vmov	r9, s15
 80117d0:	e6b1      	b.n	8011536 <uxr_read_framed_msg+0x282>
 80117d2:	bf00      	nop

080117d4 <uxr_stream_id>:
 80117d4:	b410      	push	{r4}
 80117d6:	2901      	cmp	r1, #1
 80117d8:	b083      	sub	sp, #12
 80117da:	d01f      	beq.n	801181c <uxr_stream_id+0x48>
 80117dc:	2902      	cmp	r1, #2
 80117de:	f04f 0400 	mov.w	r4, #0
 80117e2:	d01e      	beq.n	8011822 <uxr_stream_id+0x4e>
 80117e4:	2300      	movs	r3, #0
 80117e6:	f364 0307 	bfi	r3, r4, #0, #8
 80117ea:	f360 230f 	bfi	r3, r0, #8, #8
 80117ee:	f361 4317 	bfi	r3, r1, #16, #8
 80117f2:	f362 631f 	bfi	r3, r2, #24, #8
 80117f6:	b2da      	uxtb	r2, r3
 80117f8:	2000      	movs	r0, #0
 80117fa:	f362 0007 	bfi	r0, r2, #0, #8
 80117fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011802:	f362 200f 	bfi	r0, r2, #8, #8
 8011806:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801180a:	f362 4017 	bfi	r0, r2, #16, #8
 801180e:	0e1b      	lsrs	r3, r3, #24
 8011810:	f363 601f 	bfi	r0, r3, #24, #8
 8011814:	b003      	add	sp, #12
 8011816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801181a:	4770      	bx	lr
 801181c:	1c44      	adds	r4, r0, #1
 801181e:	b2e4      	uxtb	r4, r4
 8011820:	e7e0      	b.n	80117e4 <uxr_stream_id+0x10>
 8011822:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 8011826:	e7dd      	b.n	80117e4 <uxr_stream_id+0x10>

08011828 <uxr_stream_id_from_raw>:
 8011828:	b410      	push	{r4}
 801182a:	b083      	sub	sp, #12
 801182c:	b128      	cbz	r0, 801183a <uxr_stream_id_from_raw+0x12>
 801182e:	0603      	lsls	r3, r0, #24
 8011830:	d421      	bmi.n	8011876 <uxr_stream_id_from_raw+0x4e>
 8011832:	1e42      	subs	r2, r0, #1
 8011834:	b2d2      	uxtb	r2, r2
 8011836:	2401      	movs	r4, #1
 8011838:	e001      	b.n	801183e <uxr_stream_id_from_raw+0x16>
 801183a:	4604      	mov	r4, r0
 801183c:	4602      	mov	r2, r0
 801183e:	2300      	movs	r3, #0
 8011840:	f360 0307 	bfi	r3, r0, #0, #8
 8011844:	f362 230f 	bfi	r3, r2, #8, #8
 8011848:	f364 4317 	bfi	r3, r4, #16, #8
 801184c:	f361 631f 	bfi	r3, r1, #24, #8
 8011850:	b2da      	uxtb	r2, r3
 8011852:	2000      	movs	r0, #0
 8011854:	f362 0007 	bfi	r0, r2, #0, #8
 8011858:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801185c:	f362 200f 	bfi	r0, r2, #8, #8
 8011860:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011864:	f362 4017 	bfi	r0, r2, #16, #8
 8011868:	0e1b      	lsrs	r3, r3, #24
 801186a:	f363 601f 	bfi	r0, r3, #24, #8
 801186e:	b003      	add	sp, #12
 8011870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801187a:	2402      	movs	r4, #2
 801187c:	e7df      	b.n	801183e <uxr_stream_id_from_raw+0x16>
 801187e:	bf00      	nop

08011880 <uxr_init_stream_storage>:
 8011880:	2300      	movs	r3, #0
 8011882:	7403      	strb	r3, [r0, #16]
 8011884:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011888:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801188c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop

08011894 <uxr_reset_stream_storage>:
 8011894:	b570      	push	{r4, r5, r6, lr}
 8011896:	7c03      	ldrb	r3, [r0, #16]
 8011898:	4604      	mov	r4, r0
 801189a:	b153      	cbz	r3, 80118b2 <uxr_reset_stream_storage+0x1e>
 801189c:	4606      	mov	r6, r0
 801189e:	2500      	movs	r5, #0
 80118a0:	4630      	mov	r0, r6
 80118a2:	f001 ff43 	bl	801372c <uxr_reset_output_best_effort_stream>
 80118a6:	7c23      	ldrb	r3, [r4, #16]
 80118a8:	3501      	adds	r5, #1
 80118aa:	42ab      	cmp	r3, r5
 80118ac:	f106 0610 	add.w	r6, r6, #16
 80118b0:	d8f6      	bhi.n	80118a0 <uxr_reset_stream_storage+0xc>
 80118b2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80118b6:	b163      	cbz	r3, 80118d2 <uxr_reset_stream_storage+0x3e>
 80118b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80118bc:	2500      	movs	r5, #0
 80118be:	4630      	mov	r0, r6
 80118c0:	f001 fd40 	bl	8013344 <uxr_reset_input_best_effort_stream>
 80118c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80118c8:	3501      	adds	r5, #1
 80118ca:	42ab      	cmp	r3, r5
 80118cc:	f106 0602 	add.w	r6, r6, #2
 80118d0:	d8f5      	bhi.n	80118be <uxr_reset_stream_storage+0x2a>
 80118d2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80118d6:	b163      	cbz	r3, 80118f2 <uxr_reset_stream_storage+0x5e>
 80118d8:	f104 0618 	add.w	r6, r4, #24
 80118dc:	2500      	movs	r5, #0
 80118de:	4630      	mov	r0, r6
 80118e0:	f001 ffc4 	bl	801386c <uxr_reset_output_reliable_stream>
 80118e4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80118e8:	3501      	adds	r5, #1
 80118ea:	42ab      	cmp	r3, r5
 80118ec:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80118f0:	d8f5      	bhi.n	80118de <uxr_reset_stream_storage+0x4a>
 80118f2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80118f6:	b163      	cbz	r3, 8011912 <uxr_reset_stream_storage+0x7e>
 80118f8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80118fc:	2500      	movs	r5, #0
 80118fe:	4630      	mov	r0, r6
 8011900:	f001 fd88 	bl	8013414 <uxr_reset_input_reliable_stream>
 8011904:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011908:	3501      	adds	r5, #1
 801190a:	42ab      	cmp	r3, r5
 801190c:	f106 0618 	add.w	r6, r6, #24
 8011910:	d8f5      	bhi.n	80118fe <uxr_reset_stream_storage+0x6a>
 8011912:	bd70      	pop	{r4, r5, r6, pc}

08011914 <uxr_add_output_best_effort_buffer>:
 8011914:	b530      	push	{r4, r5, lr}
 8011916:	7c04      	ldrb	r4, [r0, #16]
 8011918:	1c65      	adds	r5, r4, #1
 801191a:	b083      	sub	sp, #12
 801191c:	7405      	strb	r5, [r0, #16]
 801191e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011922:	f001 fef7 	bl	8013714 <uxr_init_output_best_effort_stream>
 8011926:	2201      	movs	r2, #1
 8011928:	4620      	mov	r0, r4
 801192a:	4611      	mov	r1, r2
 801192c:	b003      	add	sp, #12
 801192e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011932:	f7ff bf4f 	b.w	80117d4 <uxr_stream_id>
 8011936:	bf00      	nop

08011938 <uxr_add_output_reliable_buffer>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 8011940:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011944:	9600      	str	r6, [sp, #0]
 8011946:	2528      	movs	r5, #40	@ 0x28
 8011948:	1c66      	adds	r6, r4, #1
 801194a:	fb05 0504 	mla	r5, r5, r4, r0
 801194e:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 8011952:	f105 0018 	add.w	r0, r5, #24
 8011956:	f001 ff57 	bl	8013808 <uxr_init_output_reliable_stream>
 801195a:	4620      	mov	r0, r4
 801195c:	2201      	movs	r2, #1
 801195e:	2102      	movs	r1, #2
 8011960:	b004      	add	sp, #16
 8011962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011966:	f7ff bf35 	b.w	80117d4 <uxr_stream_id>
 801196a:	bf00      	nop

0801196c <uxr_add_input_best_effort_buffer>:
 801196c:	b510      	push	{r4, lr}
 801196e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011972:	1c62      	adds	r2, r4, #1
 8011974:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011978:	b082      	sub	sp, #8
 801197a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801197e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011982:	f001 fcdb 	bl	801333c <uxr_init_input_best_effort_stream>
 8011986:	4620      	mov	r0, r4
 8011988:	2200      	movs	r2, #0
 801198a:	2101      	movs	r1, #1
 801198c:	b002      	add	sp, #8
 801198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011992:	f7ff bf1f 	b.w	80117d4 <uxr_stream_id>
 8011996:	bf00      	nop

08011998 <uxr_add_input_reliable_buffer>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 80119a0:	9e08      	ldr	r6, [sp, #32]
 80119a2:	9600      	str	r6, [sp, #0]
 80119a4:	2518      	movs	r5, #24
 80119a6:	1c66      	adds	r6, r4, #1
 80119a8:	fb05 0504 	mla	r5, r5, r4, r0
 80119ac:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 80119b0:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80119b4:	f001 fd0a 	bl	80133cc <uxr_init_input_reliable_stream>
 80119b8:	4620      	mov	r0, r4
 80119ba:	2200      	movs	r2, #0
 80119bc:	2102      	movs	r1, #2
 80119be:	b004      	add	sp, #16
 80119c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119c4:	f7ff bf06 	b.w	80117d4 <uxr_stream_id>

080119c8 <uxr_get_output_best_effort_stream>:
 80119c8:	7c03      	ldrb	r3, [r0, #16]
 80119ca:	428b      	cmp	r3, r1
 80119cc:	bf8c      	ite	hi
 80119ce:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80119d2:	2000      	movls	r0, #0
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop

080119d8 <uxr_get_output_reliable_stream>:
 80119d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80119dc:	428b      	cmp	r3, r1
 80119de:	bf83      	ittte	hi
 80119e0:	2328      	movhi	r3, #40	@ 0x28
 80119e2:	fb03 0101 	mlahi	r1, r3, r1, r0
 80119e6:	f101 0018 	addhi.w	r0, r1, #24
 80119ea:	2000      	movls	r0, #0
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop

080119f0 <uxr_get_input_best_effort_stream>:
 80119f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80119f4:	428b      	cmp	r3, r1
 80119f6:	bf86      	itte	hi
 80119f8:	3121      	addhi	r1, #33	@ 0x21
 80119fa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80119fe:	2000      	movls	r0, #0
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop

08011a04 <uxr_get_input_reliable_stream>:
 8011a04:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011a08:	428b      	cmp	r3, r1
 8011a0a:	bf83      	ittte	hi
 8011a0c:	2318      	movhi	r3, #24
 8011a0e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011a12:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 8011a16:	2000      	movls	r0, #0
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop

08011a1c <uxr_output_streams_confirmed>:
 8011a1c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011a20:	b183      	cbz	r3, 8011a44 <uxr_output_streams_confirmed+0x28>
 8011a22:	b570      	push	{r4, r5, r6, lr}
 8011a24:	4606      	mov	r6, r0
 8011a26:	f100 0518 	add.w	r5, r0, #24
 8011a2a:	2400      	movs	r4, #0
 8011a2c:	e001      	b.n	8011a32 <uxr_output_streams_confirmed+0x16>
 8011a2e:	3528      	adds	r5, #40	@ 0x28
 8011a30:	b138      	cbz	r0, 8011a42 <uxr_output_streams_confirmed+0x26>
 8011a32:	4628      	mov	r0, r5
 8011a34:	f002 f98a 	bl	8013d4c <uxr_is_output_up_to_date>
 8011a38:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011a3c:	3401      	adds	r4, #1
 8011a3e:	42a3      	cmp	r3, r4
 8011a40:	d8f5      	bhi.n	8011a2e <uxr_output_streams_confirmed+0x12>
 8011a42:	bd70      	pop	{r4, r5, r6, pc}
 8011a44:	2001      	movs	r0, #1
 8011a46:	4770      	bx	lr

08011a48 <uxr_buffer_submessage_header>:
 8011a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	460e      	mov	r6, r1
 8011a4e:	2104      	movs	r1, #4
 8011a50:	4615      	mov	r5, r2
 8011a52:	461f      	mov	r7, r3
 8011a54:	f7f9 fb4a 	bl	800b0ec <ucdr_align_to>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	ea47 0203 	orr.w	r2, r7, r3
 8011a5e:	4631      	mov	r1, r6
 8011a60:	7523      	strb	r3, [r4, #20]
 8011a62:	4620      	mov	r0, r4
 8011a64:	462b      	mov	r3, r5
 8011a66:	f000 f8d5 	bl	8011c14 <uxr_serialize_submessage_header>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f7f9 fb54 	bl	800b118 <ucdr_buffer_remaining>
 8011a70:	42a8      	cmp	r0, r5
 8011a72:	bf34      	ite	cc
 8011a74:	2000      	movcc	r0, #0
 8011a76:	2001      	movcs	r0, #1
 8011a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a7a:	bf00      	nop

08011a7c <uxr_read_submessage_header>:
 8011a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a80:	4604      	mov	r4, r0
 8011a82:	460d      	mov	r5, r1
 8011a84:	2104      	movs	r1, #4
 8011a86:	4616      	mov	r6, r2
 8011a88:	4698      	mov	r8, r3
 8011a8a:	f7f9 fb2f 	bl	800b0ec <ucdr_align_to>
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7f9 fb42 	bl	800b118 <ucdr_buffer_remaining>
 8011a94:	2803      	cmp	r0, #3
 8011a96:	bf8c      	ite	hi
 8011a98:	2701      	movhi	r7, #1
 8011a9a:	2700      	movls	r7, #0
 8011a9c:	d802      	bhi.n	8011aa4 <uxr_read_submessage_header+0x28>
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa4:	4633      	mov	r3, r6
 8011aa6:	4642      	mov	r2, r8
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	4629      	mov	r1, r5
 8011aac:	f000 f8c6 	bl	8011c3c <uxr_deserialize_submessage_header>
 8011ab0:	f898 3000 	ldrb.w	r3, [r8]
 8011ab4:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 8011ab8:	f003 0301 	and.w	r3, r3, #1
 8011abc:	f888 2000 	strb.w	r2, [r8]
 8011ac0:	7523      	strb	r3, [r4, #20]
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ac8 <uxr_submessage_padding>:
 8011ac8:	f010 0003 	ands.w	r0, r0, #3
 8011acc:	bf18      	it	ne
 8011ace:	f1c0 0004 	rsbne	r0, r0, #4
 8011ad2:	4770      	bx	lr

08011ad4 <uxr_millis>:
 8011ad4:	b510      	push	{r4, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	4669      	mov	r1, sp
 8011ada:	2001      	movs	r0, #1
 8011adc:	f7f0 fca8 	bl	8002430 <clock_gettime>
 8011ae0:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011ae4:	4907      	ldr	r1, [pc, #28]	@ (8011b04 <uxr_millis+0x30>)
 8011ae6:	9802      	ldr	r0, [sp, #8]
 8011ae8:	fba2 2301 	umull	r2, r3, r2, r1
 8011aec:	fb01 3304 	mla	r3, r1, r4, r3
 8011af0:	4604      	mov	r4, r0
 8011af2:	1810      	adds	r0, r2, r0
 8011af4:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011af8:	4a03      	ldr	r2, [pc, #12]	@ (8011b08 <uxr_millis+0x34>)
 8011afa:	2300      	movs	r3, #0
 8011afc:	f7ee fdb4 	bl	8000668 <__aeabi_ldivmod>
 8011b00:	b004      	add	sp, #16
 8011b02:	bd10      	pop	{r4, pc}
 8011b04:	3b9aca00 	.word	0x3b9aca00
 8011b08:	000f4240 	.word	0x000f4240

08011b0c <uxr_nanos>:
 8011b0c:	b510      	push	{r4, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	4669      	mov	r1, sp
 8011b12:	2001      	movs	r0, #1
 8011b14:	f7f0 fc8c 	bl	8002430 <clock_gettime>
 8011b18:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011b1c:	4905      	ldr	r1, [pc, #20]	@ (8011b34 <uxr_nanos+0x28>)
 8011b1e:	9802      	ldr	r0, [sp, #8]
 8011b20:	fba2 2301 	umull	r2, r3, r2, r1
 8011b24:	fb01 3304 	mla	r3, r1, r4, r3
 8011b28:	4604      	mov	r4, r0
 8011b2a:	1810      	adds	r0, r2, r0
 8011b2c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011b30:	b004      	add	sp, #16
 8011b32:	bd10      	pop	{r4, pc}
 8011b34:	3b9aca00 	.word	0x3b9aca00

08011b38 <uxr_prepare_output_stream>:
 8011b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b3a:	b087      	sub	sp, #28
 8011b3c:	2407      	movs	r4, #7
 8011b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b40:	9202      	str	r2, [sp, #8]
 8011b42:	2500      	movs	r5, #0
 8011b44:	1d32      	adds	r2, r6, #4
 8011b46:	e9cd 4500 	strd	r4, r5, [sp]
 8011b4a:	9103      	str	r1, [sp, #12]
 8011b4c:	461c      	mov	r4, r3
 8011b4e:	4606      	mov	r6, r0
 8011b50:	f7ff f858 	bl	8010c04 <uxr_prepare_stream_to_write_submessage>
 8011b54:	f080 0201 	eor.w	r2, r0, #1
 8011b58:	b2d2      	uxtb	r2, r2
 8011b5a:	75a2      	strb	r2, [r4, #22]
 8011b5c:	b112      	cbz	r2, 8011b64 <uxr_prepare_output_stream+0x2c>
 8011b5e:	4628      	mov	r0, r5
 8011b60:	b007      	add	sp, #28
 8011b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b64:	aa05      	add	r2, sp, #20
 8011b66:	9902      	ldr	r1, [sp, #8]
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f7ff f985 	bl	8010e78 <uxr_init_base_object_request>
 8011b6e:	a905      	add	r1, sp, #20
 8011b70:	4605      	mov	r5, r0
 8011b72:	4620      	mov	r0, r4
 8011b74:	f000 feca 	bl	801290c <uxr_serialize_WRITE_DATA_Payload_Data>
 8011b78:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011b7c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011b80:	1a52      	subs	r2, r2, r1
 8011b82:	4620      	mov	r0, r4
 8011b84:	f7f9 fa98 	bl	800b0b8 <ucdr_init_buffer>
 8011b88:	4620      	mov	r0, r4
 8011b8a:	463a      	mov	r2, r7
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	f7f9 fa69 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 8011b92:	4628      	mov	r0, r5
 8011b94:	b007      	add	sp, #28
 8011b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b98 <uxr_serialize_message_header>:
 8011b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	4616      	mov	r6, r2
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	9301      	str	r3, [sp, #4]
 8011ba2:	460d      	mov	r5, r1
 8011ba4:	9f08      	ldr	r7, [sp, #32]
 8011ba6:	f7f8 f989 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011baa:	4631      	mov	r1, r6
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7f8 f985 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011bb2:	9a01      	ldr	r2, [sp, #4]
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	f7f8 fa2c 	bl	800a014 <ucdr_serialize_endian_uint16_t>
 8011bbc:	062b      	lsls	r3, r5, #24
 8011bbe:	d501      	bpl.n	8011bc4 <uxr_serialize_message_header+0x2c>
 8011bc0:	b003      	add	sp, #12
 8011bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc4:	4639      	mov	r1, r7
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	2204      	movs	r2, #4
 8011bca:	b003      	add	sp, #12
 8011bcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011bd0:	f001 ba7c 	b.w	80130cc <ucdr_serialize_array_uint8_t>

08011bd4 <uxr_deserialize_message_header>:
 8011bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	4616      	mov	r6, r2
 8011bda:	4604      	mov	r4, r0
 8011bdc:	9301      	str	r3, [sp, #4]
 8011bde:	460d      	mov	r5, r1
 8011be0:	9f08      	ldr	r7, [sp, #32]
 8011be2:	f7f8 f981 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8011be6:	4631      	mov	r1, r6
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7f8 f97d 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8011bee:	9a01      	ldr	r2, [sp, #4]
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	2101      	movs	r1, #1
 8011bf4:	f7f8 fb02 	bl	800a1fc <ucdr_deserialize_endian_uint16_t>
 8011bf8:	f995 3000 	ldrsb.w	r3, [r5]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	da01      	bge.n	8011c04 <uxr_deserialize_message_header+0x30>
 8011c00:	b003      	add	sp, #12
 8011c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c04:	4639      	mov	r1, r7
 8011c06:	4620      	mov	r0, r4
 8011c08:	2204      	movs	r2, #4
 8011c0a:	b003      	add	sp, #12
 8011c0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011c10:	f001 bac0 	b.w	8013194 <ucdr_deserialize_array_uint8_t>

08011c14 <uxr_serialize_submessage_header>:
 8011c14:	b530      	push	{r4, r5, lr}
 8011c16:	b083      	sub	sp, #12
 8011c18:	4615      	mov	r5, r2
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	9301      	str	r3, [sp, #4]
 8011c1e:	f7f8 f94d 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011c22:	4629      	mov	r1, r5
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7f8 f949 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011c2a:	9a01      	ldr	r2, [sp, #4]
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	2101      	movs	r1, #1
 8011c30:	b003      	add	sp, #12
 8011c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c36:	f7f8 b9ed 	b.w	800a014 <ucdr_serialize_endian_uint16_t>
 8011c3a:	bf00      	nop

08011c3c <uxr_deserialize_submessage_header>:
 8011c3c:	b530      	push	{r4, r5, lr}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	4615      	mov	r5, r2
 8011c42:	4604      	mov	r4, r0
 8011c44:	9301      	str	r3, [sp, #4]
 8011c46:	f7f8 f94f 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f7f8 f94b 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8011c52:	9a01      	ldr	r2, [sp, #4]
 8011c54:	4620      	mov	r0, r4
 8011c56:	2101      	movs	r1, #1
 8011c58:	b003      	add	sp, #12
 8011c5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c5e:	f7f8 bacd 	b.w	800a1fc <ucdr_deserialize_endian_uint16_t>
 8011c62:	bf00      	nop

08011c64 <uxr_serialize_CLIENT_Representation>:
 8011c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c68:	2204      	movs	r2, #4
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	4605      	mov	r5, r0
 8011c6e:	f001 fa2d 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011c72:	1d21      	adds	r1, r4, #4
 8011c74:	4607      	mov	r7, r0
 8011c76:	2202      	movs	r2, #2
 8011c78:	4628      	mov	r0, r5
 8011c7a:	f001 fa27 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011c7e:	1da1      	adds	r1, r4, #6
 8011c80:	4007      	ands	r7, r0
 8011c82:	2202      	movs	r2, #2
 8011c84:	4628      	mov	r0, r5
 8011c86:	f001 fa21 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011c8a:	fa5f f887 	uxtb.w	r8, r7
 8011c8e:	2204      	movs	r2, #4
 8011c90:	4607      	mov	r7, r0
 8011c92:	f104 0108 	add.w	r1, r4, #8
 8011c96:	4628      	mov	r0, r5
 8011c98:	f001 fa18 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011c9c:	ea08 0707 	and.w	r7, r8, r7
 8011ca0:	7b21      	ldrb	r1, [r4, #12]
 8011ca2:	4680      	mov	r8, r0
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f7f8 f909 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011caa:	ea08 0807 	and.w	r8, r8, r7
 8011cae:	7b61      	ldrb	r1, [r4, #13]
 8011cb0:	4607      	mov	r7, r0
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	f7f8 f8d2 	bl	8009e5c <ucdr_serialize_bool>
 8011cb8:	7b63      	ldrb	r3, [r4, #13]
 8011cba:	ea08 0707 	and.w	r7, r8, r7
 8011cbe:	ea07 0600 	and.w	r6, r7, r0
 8011cc2:	b933      	cbnz	r3, 8011cd2 <uxr_serialize_CLIENT_Representation+0x6e>
 8011cc4:	8ba1      	ldrh	r1, [r4, #28]
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f7f8 f924 	bl	8009f14 <ucdr_serialize_uint16_t>
 8011ccc:	4030      	ands	r0, r6
 8011cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cd2:	6921      	ldr	r1, [r4, #16]
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f7f8 fb07 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8011cda:	6923      	ldr	r3, [r4, #16]
 8011cdc:	b1cb      	cbz	r3, 8011d12 <uxr_serialize_CLIENT_Representation+0xae>
 8011cde:	b1d0      	cbz	r0, 8011d16 <uxr_serialize_CLIENT_Representation+0xb2>
 8011ce0:	46a0      	mov	r8, r4
 8011ce2:	f04f 0900 	mov.w	r9, #0
 8011ce6:	e002      	b.n	8011cee <uxr_serialize_CLIENT_Representation+0x8a>
 8011ce8:	f108 0808 	add.w	r8, r8, #8
 8011cec:	b198      	cbz	r0, 8011d16 <uxr_serialize_CLIENT_Representation+0xb2>
 8011cee:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f001 fb0a 	bl	801330c <ucdr_serialize_string>
 8011cf8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011cfc:	4607      	mov	r7, r0
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f001 fb04 	bl	801330c <ucdr_serialize_string>
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	f109 0901 	add.w	r9, r9, #1
 8011d0a:	4038      	ands	r0, r7
 8011d0c:	4599      	cmp	r9, r3
 8011d0e:	b2c0      	uxtb	r0, r0
 8011d10:	d3ea      	bcc.n	8011ce8 <uxr_serialize_CLIENT_Representation+0x84>
 8011d12:	4006      	ands	r6, r0
 8011d14:	e7d6      	b.n	8011cc4 <uxr_serialize_CLIENT_Representation+0x60>
 8011d16:	2600      	movs	r6, #0
 8011d18:	e7d4      	b.n	8011cc4 <uxr_serialize_CLIENT_Representation+0x60>
 8011d1a:	bf00      	nop

08011d1c <uxr_deserialize_CLIENT_Representation>:
 8011d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d20:	2204      	movs	r2, #4
 8011d22:	460c      	mov	r4, r1
 8011d24:	4605      	mov	r5, r0
 8011d26:	f001 fa35 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8011d2a:	1d21      	adds	r1, r4, #4
 8011d2c:	4607      	mov	r7, r0
 8011d2e:	2202      	movs	r2, #2
 8011d30:	4628      	mov	r0, r5
 8011d32:	f001 fa2f 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8011d36:	1da1      	adds	r1, r4, #6
 8011d38:	4007      	ands	r7, r0
 8011d3a:	2202      	movs	r2, #2
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	f001 fa29 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8011d42:	fa5f f887 	uxtb.w	r8, r7
 8011d46:	2204      	movs	r2, #4
 8011d48:	4607      	mov	r7, r0
 8011d4a:	f104 0108 	add.w	r1, r4, #8
 8011d4e:	4628      	mov	r0, r5
 8011d50:	f001 fa20 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8011d54:	ea08 0707 	and.w	r7, r8, r7
 8011d58:	f104 010c 	add.w	r1, r4, #12
 8011d5c:	4680      	mov	r8, r0
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f7f8 f8c2 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8011d64:	ea08 0807 	and.w	r8, r8, r7
 8011d68:	f104 010d 	add.w	r1, r4, #13
 8011d6c:	4607      	mov	r7, r0
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f7f8 f88a 	bl	8009e88 <ucdr_deserialize_bool>
 8011d74:	7b63      	ldrb	r3, [r4, #13]
 8011d76:	ea08 0707 	and.w	r7, r8, r7
 8011d7a:	ea07 0600 	and.w	r6, r7, r0
 8011d7e:	b93b      	cbnz	r3, 8011d90 <uxr_deserialize_CLIENT_Representation+0x74>
 8011d80:	f104 011c 	add.w	r1, r4, #28
 8011d84:	4628      	mov	r0, r5
 8011d86:	f7f8 f9c5 	bl	800a114 <ucdr_deserialize_uint16_t>
 8011d8a:	4030      	ands	r0, r6
 8011d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d90:	f104 0110 	add.w	r1, r4, #16
 8011d94:	4628      	mov	r0, r5
 8011d96:	f7f8 fbd7 	bl	800a548 <ucdr_deserialize_uint32_t>
 8011d9a:	6923      	ldr	r3, [r4, #16]
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d903      	bls.n	8011da8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011da0:	2301      	movs	r3, #1
 8011da2:	75ab      	strb	r3, [r5, #22]
 8011da4:	2600      	movs	r6, #0
 8011da6:	e7eb      	b.n	8011d80 <uxr_deserialize_CLIENT_Representation+0x64>
 8011da8:	b1fb      	cbz	r3, 8011dea <uxr_deserialize_CLIENT_Representation+0xce>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d0fa      	beq.n	8011da4 <uxr_deserialize_CLIENT_Representation+0x88>
 8011dae:	46a0      	mov	r8, r4
 8011db0:	f04f 0900 	mov.w	r9, #0
 8011db4:	e003      	b.n	8011dbe <uxr_deserialize_CLIENT_Representation+0xa2>
 8011db6:	f108 0808 	add.w	r8, r8, #8
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	d0f2      	beq.n	8011da4 <uxr_deserialize_CLIENT_Representation+0x88>
 8011dbe:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f001 fab0 	bl	801332c <ucdr_deserialize_string>
 8011dcc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011dd0:	4607      	mov	r7, r0
 8011dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	f001 faa8 	bl	801332c <ucdr_deserialize_string>
 8011ddc:	6923      	ldr	r3, [r4, #16]
 8011dde:	f109 0901 	add.w	r9, r9, #1
 8011de2:	4038      	ands	r0, r7
 8011de4:	4599      	cmp	r9, r3
 8011de6:	b2c0      	uxtb	r0, r0
 8011de8:	d3e5      	bcc.n	8011db6 <uxr_deserialize_CLIENT_Representation+0x9a>
 8011dea:	4006      	ands	r6, r0
 8011dec:	e7c8      	b.n	8011d80 <uxr_deserialize_CLIENT_Representation+0x64>
 8011dee:	bf00      	nop

08011df0 <uxr_serialize_AGENT_Representation>:
 8011df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011df4:	2204      	movs	r2, #4
 8011df6:	460c      	mov	r4, r1
 8011df8:	4605      	mov	r5, r0
 8011dfa:	f001 f967 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011dfe:	1d21      	adds	r1, r4, #4
 8011e00:	4606      	mov	r6, r0
 8011e02:	2202      	movs	r2, #2
 8011e04:	4628      	mov	r0, r5
 8011e06:	f001 f961 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011e0a:	1da1      	adds	r1, r4, #6
 8011e0c:	4006      	ands	r6, r0
 8011e0e:	2202      	movs	r2, #2
 8011e10:	4628      	mov	r0, r5
 8011e12:	f001 f95b 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011e16:	b2f6      	uxtb	r6, r6
 8011e18:	4603      	mov	r3, r0
 8011e1a:	7a21      	ldrb	r1, [r4, #8]
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	401e      	ands	r6, r3
 8011e20:	f7f8 f81c 	bl	8009e5c <ucdr_serialize_bool>
 8011e24:	7a23      	ldrb	r3, [r4, #8]
 8011e26:	ea00 0706 	and.w	r7, r0, r6
 8011e2a:	b913      	cbnz	r3, 8011e32 <uxr_serialize_AGENT_Representation+0x42>
 8011e2c:	4638      	mov	r0, r7
 8011e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e32:	68e1      	ldr	r1, [r4, #12]
 8011e34:	4628      	mov	r0, r5
 8011e36:	f7f8 fa57 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8011e3a:	68e3      	ldr	r3, [r4, #12]
 8011e3c:	b313      	cbz	r3, 8011e84 <uxr_serialize_AGENT_Representation+0x94>
 8011e3e:	b1e8      	cbz	r0, 8011e7c <uxr_serialize_AGENT_Representation+0x8c>
 8011e40:	46a0      	mov	r8, r4
 8011e42:	f04f 0900 	mov.w	r9, #0
 8011e46:	e002      	b.n	8011e4e <uxr_serialize_AGENT_Representation+0x5e>
 8011e48:	f108 0808 	add.w	r8, r8, #8
 8011e4c:	b1b3      	cbz	r3, 8011e7c <uxr_serialize_AGENT_Representation+0x8c>
 8011e4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e52:	4628      	mov	r0, r5
 8011e54:	f001 fa5a 	bl	801330c <ucdr_serialize_string>
 8011e58:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f001 fa54 	bl	801330c <ucdr_serialize_string>
 8011e64:	68e2      	ldr	r2, [r4, #12]
 8011e66:	f109 0901 	add.w	r9, r9, #1
 8011e6a:	ea06 0300 	and.w	r3, r6, r0
 8011e6e:	4591      	cmp	r9, r2
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	d3e9      	bcc.n	8011e48 <uxr_serialize_AGENT_Representation+0x58>
 8011e74:	401f      	ands	r7, r3
 8011e76:	4638      	mov	r0, r7
 8011e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e7c:	2700      	movs	r7, #0
 8011e7e:	4638      	mov	r0, r7
 8011e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e84:	4007      	ands	r7, r0
 8011e86:	e7d1      	b.n	8011e2c <uxr_serialize_AGENT_Representation+0x3c>

08011e88 <uxr_serialize_ObjectVariant.part.0>:
 8011e88:	b570      	push	{r4, r5, r6, lr}
 8011e8a:	780b      	ldrb	r3, [r1, #0]
 8011e8c:	3b01      	subs	r3, #1
 8011e8e:	460c      	mov	r4, r1
 8011e90:	4605      	mov	r5, r0
 8011e92:	2b0d      	cmp	r3, #13
 8011e94:	d869      	bhi.n	8011f6a <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011e96:	e8df f003 	tbb	[pc, r3]
 8011e9a:	074a      	.short	0x074a
 8011e9c:	07073030 	.word	0x07073030
 8011ea0:	21680707 	.word	0x21680707
 8011ea4:	45632121 	.word	0x45632121
 8011ea8:	7909      	ldrb	r1, [r1, #4]
 8011eaa:	f7f8 f807 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011eae:	4606      	mov	r6, r0
 8011eb0:	b158      	cbz	r0, 8011eca <uxr_serialize_ObjectVariant.part.0+0x42>
 8011eb2:	7923      	ldrb	r3, [r4, #4]
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d003      	beq.n	8011ec0 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011eb8:	2b03      	cmp	r3, #3
 8011eba:	d029      	beq.n	8011f10 <uxr_serialize_ObjectVariant.part.0+0x88>
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d104      	bne.n	8011eca <uxr_serialize_ObjectVariant.part.0+0x42>
 8011ec0:	68a1      	ldr	r1, [r4, #8]
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f001 fa22 	bl	801330c <ucdr_serialize_string>
 8011ec8:	4606      	mov	r6, r0
 8011eca:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8011ece:	4628      	mov	r0, r5
 8011ed0:	2202      	movs	r2, #2
 8011ed2:	f001 f8fb 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8011ed6:	4030      	ands	r0, r6
 8011ed8:	b2c0      	uxtb	r0, r0
 8011eda:	bd70      	pop	{r4, r5, r6, pc}
 8011edc:	7909      	ldrb	r1, [r1, #4]
 8011ede:	f7f7 ffed 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011ee2:	b1e8      	cbz	r0, 8011f20 <uxr_serialize_ObjectVariant.part.0+0x98>
 8011ee4:	7923      	ldrb	r3, [r4, #4]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d001      	beq.n	8011eee <uxr_serialize_ObjectVariant.part.0+0x66>
 8011eea:	2b02      	cmp	r3, #2
 8011eec:	d13d      	bne.n	8011f6a <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011eee:	68a1      	ldr	r1, [r4, #8]
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ef6:	f001 ba09 	b.w	801330c <ucdr_serialize_string>
 8011efa:	7909      	ldrb	r1, [r1, #4]
 8011efc:	f7f7 ffde 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011f00:	4606      	mov	r6, r0
 8011f02:	2800      	cmp	r0, #0
 8011f04:	d0e1      	beq.n	8011eca <uxr_serialize_ObjectVariant.part.0+0x42>
 8011f06:	7923      	ldrb	r3, [r4, #4]
 8011f08:	2b02      	cmp	r3, #2
 8011f0a:	d0d9      	beq.n	8011ec0 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011f0c:	2b03      	cmp	r3, #3
 8011f0e:	d1dc      	bne.n	8011eca <uxr_serialize_ObjectVariant.part.0+0x42>
 8011f10:	68a2      	ldr	r2, [r4, #8]
 8011f12:	f104 010c 	add.w	r1, r4, #12
 8011f16:	4628      	mov	r0, r5
 8011f18:	f001 f9cc 	bl	80132b4 <ucdr_serialize_sequence_uint8_t>
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	e7d4      	b.n	8011eca <uxr_serialize_ObjectVariant.part.0+0x42>
 8011f20:	2000      	movs	r0, #0
 8011f22:	bd70      	pop	{r4, r5, r6, pc}
 8011f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f28:	3104      	adds	r1, #4
 8011f2a:	f7ff be9b 	b.w	8011c64 <uxr_serialize_CLIENT_Representation>
 8011f2e:	7909      	ldrb	r1, [r1, #4]
 8011f30:	f7f7 ffc4 	bl	8009ebc <ucdr_serialize_uint8_t>
 8011f34:	4606      	mov	r6, r0
 8011f36:	b158      	cbz	r0, 8011f50 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011f38:	7923      	ldrb	r3, [r4, #4]
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d003      	beq.n	8011f46 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011f3e:	2b03      	cmp	r3, #3
 8011f40:	d015      	beq.n	8011f6e <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d104      	bne.n	8011f50 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011f46:	68a1      	ldr	r1, [r4, #8]
 8011f48:	4628      	mov	r0, r5
 8011f4a:	f001 f9df 	bl	801330c <ucdr_serialize_string>
 8011f4e:	4606      	mov	r6, r0
 8011f50:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011f54:	4628      	mov	r0, r5
 8011f56:	f7f8 fd19 	bl	800a98c <ucdr_serialize_int16_t>
 8011f5a:	4030      	ands	r0, r6
 8011f5c:	b2c0      	uxtb	r0, r0
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f64:	3104      	adds	r1, #4
 8011f66:	f7ff bf43 	b.w	8011df0 <uxr_serialize_AGENT_Representation>
 8011f6a:	2001      	movs	r0, #1
 8011f6c:	bd70      	pop	{r4, r5, r6, pc}
 8011f6e:	68a2      	ldr	r2, [r4, #8]
 8011f70:	f104 010c 	add.w	r1, r4, #12
 8011f74:	4628      	mov	r0, r5
 8011f76:	f001 f99d 	bl	80132b4 <ucdr_serialize_sequence_uint8_t>
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	e7e8      	b.n	8011f50 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011f7e:	bf00      	nop

08011f80 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011f80:	b570      	push	{r4, r5, r6, lr}
 8011f82:	460d      	mov	r5, r1
 8011f84:	7809      	ldrb	r1, [r1, #0]
 8011f86:	4606      	mov	r6, r0
 8011f88:	f7f7 ff68 	bl	8009e5c <ucdr_serialize_bool>
 8011f8c:	782b      	ldrb	r3, [r5, #0]
 8011f8e:	4604      	mov	r4, r0
 8011f90:	b94b      	cbnz	r3, 8011fa6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011f92:	7a29      	ldrb	r1, [r5, #8]
 8011f94:	4630      	mov	r0, r6
 8011f96:	f7f7 ff61 	bl	8009e5c <ucdr_serialize_bool>
 8011f9a:	7a2b      	ldrb	r3, [r5, #8]
 8011f9c:	4004      	ands	r4, r0
 8011f9e:	b2e4      	uxtb	r4, r4
 8011fa0:	b943      	cbnz	r3, 8011fb4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	bd70      	pop	{r4, r5, r6, pc}
 8011fa6:	6869      	ldr	r1, [r5, #4]
 8011fa8:	4630      	mov	r0, r6
 8011faa:	f001 f9af 	bl	801330c <ucdr_serialize_string>
 8011fae:	4004      	ands	r4, r0
 8011fb0:	b2e4      	uxtb	r4, r4
 8011fb2:	e7ee      	b.n	8011f92 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011fb4:	68e9      	ldr	r1, [r5, #12]
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f001 f9a8 	bl	801330c <ucdr_serialize_string>
 8011fbc:	4004      	ands	r4, r0
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
 8011fc2:	bf00      	nop

08011fc4 <uxr_serialize_OBJK_Topic_Binary>:
 8011fc4:	b570      	push	{r4, r5, r6, lr}
 8011fc6:	460d      	mov	r5, r1
 8011fc8:	6809      	ldr	r1, [r1, #0]
 8011fca:	4606      	mov	r6, r0
 8011fcc:	f001 f99e 	bl	801330c <ucdr_serialize_string>
 8011fd0:	7929      	ldrb	r1, [r5, #4]
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f7f7 ff41 	bl	8009e5c <ucdr_serialize_bool>
 8011fda:	792b      	ldrb	r3, [r5, #4]
 8011fdc:	4004      	ands	r4, r0
 8011fde:	b2e4      	uxtb	r4, r4
 8011fe0:	b943      	cbnz	r3, 8011ff4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011fe2:	7b29      	ldrb	r1, [r5, #12]
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f7f7 ff39 	bl	8009e5c <ucdr_serialize_bool>
 8011fea:	7b2b      	ldrb	r3, [r5, #12]
 8011fec:	4004      	ands	r4, r0
 8011fee:	b93b      	cbnz	r3, 8012000 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}
 8011ff4:	68a9      	ldr	r1, [r5, #8]
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	f001 f988 	bl	801330c <ucdr_serialize_string>
 8011ffc:	4004      	ands	r4, r0
 8011ffe:	e7f0      	b.n	8011fe2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012000:	6929      	ldr	r1, [r5, #16]
 8012002:	4630      	mov	r0, r6
 8012004:	f001 f982 	bl	801330c <ucdr_serialize_string>
 8012008:	4004      	ands	r4, r0
 801200a:	b2e4      	uxtb	r4, r4
 801200c:	4620      	mov	r0, r4
 801200e:	bd70      	pop	{r4, r5, r6, pc}

08012010 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012014:	460c      	mov	r4, r1
 8012016:	7809      	ldrb	r1, [r1, #0]
 8012018:	4606      	mov	r6, r0
 801201a:	f7f7 ff1f 	bl	8009e5c <ucdr_serialize_bool>
 801201e:	7823      	ldrb	r3, [r4, #0]
 8012020:	4605      	mov	r5, r0
 8012022:	b96b      	cbnz	r3, 8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012024:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012028:	4630      	mov	r0, r6
 801202a:	f7f7 ff17 	bl	8009e5c <ucdr_serialize_bool>
 801202e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012032:	4005      	ands	r5, r0
 8012034:	b2ed      	uxtb	r5, r5
 8012036:	2b00      	cmp	r3, #0
 8012038:	d169      	bne.n	801210e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801203a:	4628      	mov	r0, r5
 801203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012040:	6861      	ldr	r1, [r4, #4]
 8012042:	4630      	mov	r0, r6
 8012044:	f7f8 f950 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8012048:	6863      	ldr	r3, [r4, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d06b      	beq.n	8012126 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801204e:	2800      	cmp	r0, #0
 8012050:	d067      	beq.n	8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012052:	68a1      	ldr	r1, [r4, #8]
 8012054:	4630      	mov	r0, r6
 8012056:	f001 f959 	bl	801330c <ucdr_serialize_string>
 801205a:	6863      	ldr	r3, [r4, #4]
 801205c:	2b01      	cmp	r3, #1
 801205e:	d953      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012060:	2800      	cmp	r0, #0
 8012062:	d05e      	beq.n	8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012064:	68e1      	ldr	r1, [r4, #12]
 8012066:	4630      	mov	r0, r6
 8012068:	f001 f950 	bl	801330c <ucdr_serialize_string>
 801206c:	6863      	ldr	r3, [r4, #4]
 801206e:	2b02      	cmp	r3, #2
 8012070:	d94a      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012072:	2800      	cmp	r0, #0
 8012074:	d055      	beq.n	8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012076:	6921      	ldr	r1, [r4, #16]
 8012078:	4630      	mov	r0, r6
 801207a:	f001 f947 	bl	801330c <ucdr_serialize_string>
 801207e:	6863      	ldr	r3, [r4, #4]
 8012080:	2b03      	cmp	r3, #3
 8012082:	d941      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012084:	2800      	cmp	r0, #0
 8012086:	d04c      	beq.n	8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012088:	6961      	ldr	r1, [r4, #20]
 801208a:	4630      	mov	r0, r6
 801208c:	f001 f93e 	bl	801330c <ucdr_serialize_string>
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	2b04      	cmp	r3, #4
 8012094:	d938      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012096:	2800      	cmp	r0, #0
 8012098:	d043      	beq.n	8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801209a:	69a1      	ldr	r1, [r4, #24]
 801209c:	4630      	mov	r0, r6
 801209e:	f001 f935 	bl	801330c <ucdr_serialize_string>
 80120a2:	6863      	ldr	r3, [r4, #4]
 80120a4:	2b05      	cmp	r3, #5
 80120a6:	d92f      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d03a      	beq.n	8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120ac:	69e1      	ldr	r1, [r4, #28]
 80120ae:	4630      	mov	r0, r6
 80120b0:	f001 f92c 	bl	801330c <ucdr_serialize_string>
 80120b4:	6863      	ldr	r3, [r4, #4]
 80120b6:	2b06      	cmp	r3, #6
 80120b8:	d926      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120ba:	b390      	cbz	r0, 8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120bc:	6a21      	ldr	r1, [r4, #32]
 80120be:	4630      	mov	r0, r6
 80120c0:	f001 f924 	bl	801330c <ucdr_serialize_string>
 80120c4:	6863      	ldr	r3, [r4, #4]
 80120c6:	2b07      	cmp	r3, #7
 80120c8:	d91e      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120ca:	b350      	cbz	r0, 8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80120ce:	4630      	mov	r0, r6
 80120d0:	f001 f91c 	bl	801330c <ucdr_serialize_string>
 80120d4:	6863      	ldr	r3, [r4, #4]
 80120d6:	2b08      	cmp	r3, #8
 80120d8:	d916      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120da:	b310      	cbz	r0, 8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80120de:	4630      	mov	r0, r6
 80120e0:	f001 f914 	bl	801330c <ucdr_serialize_string>
 80120e4:	6863      	ldr	r3, [r4, #4]
 80120e6:	2b09      	cmp	r3, #9
 80120e8:	d90e      	bls.n	8012108 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80120ea:	b1d0      	cbz	r0, 8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80120f0:	2709      	movs	r7, #9
 80120f2:	e000      	b.n	80120f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80120f4:	b1a8      	cbz	r0, 8012122 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80120f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80120fa:	4630      	mov	r0, r6
 80120fc:	f001 f906 	bl	801330c <ucdr_serialize_string>
 8012100:	6862      	ldr	r2, [r4, #4]
 8012102:	3701      	adds	r7, #1
 8012104:	4297      	cmp	r7, r2
 8012106:	d3f5      	bcc.n	80120f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012108:	4005      	ands	r5, r0
 801210a:	b2ed      	uxtb	r5, r5
 801210c:	e78a      	b.n	8012024 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801210e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012110:	4630      	mov	r0, r6
 8012112:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012116:	f001 f8cd 	bl	80132b4 <ucdr_serialize_sequence_uint8_t>
 801211a:	4005      	ands	r5, r0
 801211c:	4628      	mov	r0, r5
 801211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012122:	2500      	movs	r5, #0
 8012124:	e77e      	b.n	8012024 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012126:	4028      	ands	r0, r5
 8012128:	b2c5      	uxtb	r5, r0
 801212a:	e77b      	b.n	8012024 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801212c <uxr_serialize_OBJK_Subscriber_Binary>:
 801212c:	b570      	push	{r4, r5, r6, lr}
 801212e:	460d      	mov	r5, r1
 8012130:	7809      	ldrb	r1, [r1, #0]
 8012132:	4606      	mov	r6, r0
 8012134:	f7f7 fe92 	bl	8009e5c <ucdr_serialize_bool>
 8012138:	782b      	ldrb	r3, [r5, #0]
 801213a:	4604      	mov	r4, r0
 801213c:	b94b      	cbnz	r3, 8012152 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801213e:	7a29      	ldrb	r1, [r5, #8]
 8012140:	4630      	mov	r0, r6
 8012142:	f7f7 fe8b 	bl	8009e5c <ucdr_serialize_bool>
 8012146:	7a2b      	ldrb	r3, [r5, #8]
 8012148:	4004      	ands	r4, r0
 801214a:	b2e4      	uxtb	r4, r4
 801214c:	b943      	cbnz	r3, 8012160 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801214e:	4620      	mov	r0, r4
 8012150:	bd70      	pop	{r4, r5, r6, pc}
 8012152:	6869      	ldr	r1, [r5, #4]
 8012154:	4630      	mov	r0, r6
 8012156:	f001 f8d9 	bl	801330c <ucdr_serialize_string>
 801215a:	4004      	ands	r4, r0
 801215c:	b2e4      	uxtb	r4, r4
 801215e:	e7ee      	b.n	801213e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012160:	f105 010c 	add.w	r1, r5, #12
 8012164:	4630      	mov	r0, r6
 8012166:	f7ff ff53 	bl	8012010 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801216a:	4004      	ands	r4, r0
 801216c:	4620      	mov	r0, r4
 801216e:	bd70      	pop	{r4, r5, r6, pc}

08012170 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012170:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012174:	4688      	mov	r8, r1
 8012176:	8809      	ldrh	r1, [r1, #0]
 8012178:	4681      	mov	r9, r0
 801217a:	f7f7 fecb 	bl	8009f14 <ucdr_serialize_uint16_t>
 801217e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012182:	4606      	mov	r6, r0
 8012184:	4648      	mov	r0, r9
 8012186:	f7f7 fe69 	bl	8009e5c <ucdr_serialize_bool>
 801218a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801218e:	4030      	ands	r0, r6
 8012190:	b2c5      	uxtb	r5, r0
 8012192:	b9eb      	cbnz	r3, 80121d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012194:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012198:	4648      	mov	r0, r9
 801219a:	f7f7 fe5f 	bl	8009e5c <ucdr_serialize_bool>
 801219e:	f898 3006 	ldrb.w	r3, [r8, #6]
 80121a2:	4005      	ands	r5, r0
 80121a4:	bb7b      	cbnz	r3, 8012206 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80121a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80121aa:	4648      	mov	r0, r9
 80121ac:	f7f7 fe56 	bl	8009e5c <ucdr_serialize_bool>
 80121b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80121b4:	4005      	ands	r5, r0
 80121b6:	b9f3      	cbnz	r3, 80121f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80121b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80121bc:	4648      	mov	r0, r9
 80121be:	f7f7 fe4d 	bl	8009e5c <ucdr_serialize_bool>
 80121c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80121c6:	4005      	ands	r5, r0
 80121c8:	b94b      	cbnz	r3, 80121de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80121ca:	4628      	mov	r0, r5
 80121cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80121d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80121d4:	4648      	mov	r0, r9
 80121d6:	f7f7 fe9d 	bl	8009f14 <ucdr_serialize_uint16_t>
 80121da:	4005      	ands	r5, r0
 80121dc:	e7da      	b.n	8012194 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80121de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80121e2:	4648      	mov	r0, r9
 80121e4:	f108 011c 	add.w	r1, r8, #28
 80121e8:	f001 f864 	bl	80132b4 <ucdr_serialize_sequence_uint8_t>
 80121ec:	4028      	ands	r0, r5
 80121ee:	b2c5      	uxtb	r5, r0
 80121f0:	4628      	mov	r0, r5
 80121f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80121f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80121fa:	4648      	mov	r0, r9
 80121fc:	f7f8 f874 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8012200:	4028      	ands	r0, r5
 8012202:	b2c5      	uxtb	r5, r0
 8012204:	e7d8      	b.n	80121b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012206:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801220a:	4648      	mov	r0, r9
 801220c:	f7f8 f86c 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8012210:	4028      	ands	r0, r5
 8012212:	b2c5      	uxtb	r5, r0
 8012214:	e7c7      	b.n	80121a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012216:	bf00      	nop

08012218 <uxr_serialize_OBJK_DataReader_Binary>:
 8012218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221a:	2202      	movs	r2, #2
 801221c:	460c      	mov	r4, r1
 801221e:	4606      	mov	r6, r0
 8012220:	f000 ff54 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012224:	78a1      	ldrb	r1, [r4, #2]
 8012226:	4605      	mov	r5, r0
 8012228:	4630      	mov	r0, r6
 801222a:	f7f7 fe17 	bl	8009e5c <ucdr_serialize_bool>
 801222e:	78a3      	ldrb	r3, [r4, #2]
 8012230:	4005      	ands	r5, r0
 8012232:	b2ed      	uxtb	r5, r5
 8012234:	b90b      	cbnz	r3, 801223a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012236:	4628      	mov	r0, r5
 8012238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801223a:	f104 0108 	add.w	r1, r4, #8
 801223e:	4630      	mov	r0, r6
 8012240:	f7ff ff96 	bl	8012170 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012244:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012248:	4607      	mov	r7, r0
 801224a:	4630      	mov	r0, r6
 801224c:	f7f7 fe06 	bl	8009e5c <ucdr_serialize_bool>
 8012250:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012254:	4038      	ands	r0, r7
 8012256:	b2c7      	uxtb	r7, r0
 8012258:	b95b      	cbnz	r3, 8012272 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801225a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801225e:	4630      	mov	r0, r6
 8012260:	f7f7 fdfc 	bl	8009e5c <ucdr_serialize_bool>
 8012264:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012268:	4007      	ands	r7, r0
 801226a:	b94b      	cbnz	r3, 8012280 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801226c:	403d      	ands	r5, r7
 801226e:	4628      	mov	r0, r5
 8012270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012272:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012276:	4630      	mov	r0, r6
 8012278:	f7f8 fa8c 	bl	800a794 <ucdr_serialize_uint64_t>
 801227c:	4007      	ands	r7, r0
 801227e:	e7ec      	b.n	801225a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012280:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012282:	4630      	mov	r0, r6
 8012284:	f001 f842 	bl	801330c <ucdr_serialize_string>
 8012288:	4007      	ands	r7, r0
 801228a:	b2ff      	uxtb	r7, r7
 801228c:	e7ee      	b.n	801226c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801228e:	bf00      	nop

08012290 <uxr_deserialize_ObjectVariant>:
 8012290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012292:	4605      	mov	r5, r0
 8012294:	460e      	mov	r6, r1
 8012296:	f7f7 fe27 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 801229a:	b320      	cbz	r0, 80122e6 <uxr_deserialize_ObjectVariant+0x56>
 801229c:	7833      	ldrb	r3, [r6, #0]
 801229e:	3b01      	subs	r3, #1
 80122a0:	4604      	mov	r4, r0
 80122a2:	2b0d      	cmp	r3, #13
 80122a4:	d81d      	bhi.n	80122e2 <uxr_deserialize_ObjectVariant+0x52>
 80122a6:	e8df f003 	tbb	[pc, r3]
 80122aa:	2107      	.short	0x2107
 80122ac:	21214b4b 	.word	0x21214b4b
 80122b0:	381c2121 	.word	0x381c2121
 80122b4:	876a3838 	.word	0x876a3838
 80122b8:	1d31      	adds	r1, r6, #4
 80122ba:	4628      	mov	r0, r5
 80122bc:	f7f7 fe14 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 80122c0:	4607      	mov	r7, r0
 80122c2:	b138      	cbz	r0, 80122d4 <uxr_deserialize_ObjectVariant+0x44>
 80122c4:	7933      	ldrb	r3, [r6, #4]
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d07c      	beq.n	80123c4 <uxr_deserialize_ObjectVariant+0x134>
 80122ca:	2b03      	cmp	r3, #3
 80122cc:	f000 8082 	beq.w	80123d4 <uxr_deserialize_ObjectVariant+0x144>
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d077      	beq.n	80123c4 <uxr_deserialize_ObjectVariant+0x134>
 80122d4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80122d8:	4628      	mov	r0, r5
 80122da:	f7f8 fbd7 	bl	800aa8c <ucdr_deserialize_int16_t>
 80122de:	4038      	ands	r0, r7
 80122e0:	b2c4      	uxtb	r4, r0
 80122e2:	4620      	mov	r0, r4
 80122e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e6:	2400      	movs	r4, #0
 80122e8:	4620      	mov	r0, r4
 80122ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ec:	1d31      	adds	r1, r6, #4
 80122ee:	4628      	mov	r0, r5
 80122f0:	f7f7 fdfa 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 80122f4:	4607      	mov	r7, r0
 80122f6:	b130      	cbz	r0, 8012306 <uxr_deserialize_ObjectVariant+0x76>
 80122f8:	7933      	ldrb	r3, [r6, #4]
 80122fa:	2b02      	cmp	r3, #2
 80122fc:	d037      	beq.n	801236e <uxr_deserialize_ObjectVariant+0xde>
 80122fe:	2b03      	cmp	r3, #3
 8012300:	d02a      	beq.n	8012358 <uxr_deserialize_ObjectVariant+0xc8>
 8012302:	2b01      	cmp	r3, #1
 8012304:	d033      	beq.n	801236e <uxr_deserialize_ObjectVariant+0xde>
 8012306:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801230a:	4628      	mov	r0, r5
 801230c:	2202      	movs	r2, #2
 801230e:	f000 ff41 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012312:	4038      	ands	r0, r7
 8012314:	b2c4      	uxtb	r4, r0
 8012316:	4620      	mov	r0, r4
 8012318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801231a:	1d31      	adds	r1, r6, #4
 801231c:	4628      	mov	r0, r5
 801231e:	f7f7 fde3 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8012322:	2800      	cmp	r0, #0
 8012324:	d0df      	beq.n	80122e6 <uxr_deserialize_ObjectVariant+0x56>
 8012326:	7933      	ldrb	r3, [r6, #4]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d001      	beq.n	8012330 <uxr_deserialize_ObjectVariant+0xa0>
 801232c:	2b02      	cmp	r3, #2
 801232e:	d1d8      	bne.n	80122e2 <uxr_deserialize_ObjectVariant+0x52>
 8012330:	68b1      	ldr	r1, [r6, #8]
 8012332:	4628      	mov	r0, r5
 8012334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801233c:	f000 bff6 	b.w	801332c <ucdr_deserialize_string>
 8012340:	1d31      	adds	r1, r6, #4
 8012342:	4628      	mov	r0, r5
 8012344:	f7f7 fdd0 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8012348:	4607      	mov	r7, r0
 801234a:	2800      	cmp	r0, #0
 801234c:	d0db      	beq.n	8012306 <uxr_deserialize_ObjectVariant+0x76>
 801234e:	7933      	ldrb	r3, [r6, #4]
 8012350:	2b02      	cmp	r3, #2
 8012352:	d00c      	beq.n	801236e <uxr_deserialize_ObjectVariant+0xde>
 8012354:	2b03      	cmp	r3, #3
 8012356:	d1d6      	bne.n	8012306 <uxr_deserialize_ObjectVariant+0x76>
 8012358:	f106 0308 	add.w	r3, r6, #8
 801235c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012360:	f106 010c 	add.w	r1, r6, #12
 8012364:	4628      	mov	r0, r5
 8012366:	f000 ffb7 	bl	80132d8 <ucdr_deserialize_sequence_uint8_t>
 801236a:	4607      	mov	r7, r0
 801236c:	e7cb      	b.n	8012306 <uxr_deserialize_ObjectVariant+0x76>
 801236e:	68b1      	ldr	r1, [r6, #8]
 8012370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012374:	4628      	mov	r0, r5
 8012376:	f000 ffd9 	bl	801332c <ucdr_deserialize_string>
 801237a:	4607      	mov	r7, r0
 801237c:	e7c3      	b.n	8012306 <uxr_deserialize_ObjectVariant+0x76>
 801237e:	2204      	movs	r2, #4
 8012380:	18b1      	adds	r1, r6, r2
 8012382:	4628      	mov	r0, r5
 8012384:	f000 ff06 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012388:	2202      	movs	r2, #2
 801238a:	4604      	mov	r4, r0
 801238c:	f106 0108 	add.w	r1, r6, #8
 8012390:	4628      	mov	r0, r5
 8012392:	f000 feff 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012396:	2202      	movs	r2, #2
 8012398:	4004      	ands	r4, r0
 801239a:	f106 010a 	add.w	r1, r6, #10
 801239e:	4628      	mov	r0, r5
 80123a0:	f000 fef8 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 80123a4:	b2e4      	uxtb	r4, r4
 80123a6:	4603      	mov	r3, r0
 80123a8:	f106 010c 	add.w	r1, r6, #12
 80123ac:	4628      	mov	r0, r5
 80123ae:	401c      	ands	r4, r3
 80123b0:	f7f7 fd6a 	bl	8009e88 <ucdr_deserialize_bool>
 80123b4:	4004      	ands	r4, r0
 80123b6:	e794      	b.n	80122e2 <uxr_deserialize_ObjectVariant+0x52>
 80123b8:	1d31      	adds	r1, r6, #4
 80123ba:	4628      	mov	r0, r5
 80123bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80123c0:	f7ff bcac 	b.w	8011d1c <uxr_deserialize_CLIENT_Representation>
 80123c4:	68b1      	ldr	r1, [r6, #8]
 80123c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123ca:	4628      	mov	r0, r5
 80123cc:	f000 ffae 	bl	801332c <ucdr_deserialize_string>
 80123d0:	4607      	mov	r7, r0
 80123d2:	e77f      	b.n	80122d4 <uxr_deserialize_ObjectVariant+0x44>
 80123d4:	f106 0308 	add.w	r3, r6, #8
 80123d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123dc:	f106 010c 	add.w	r1, r6, #12
 80123e0:	4628      	mov	r0, r5
 80123e2:	f000 ff79 	bl	80132d8 <ucdr_deserialize_sequence_uint8_t>
 80123e6:	4607      	mov	r7, r0
 80123e8:	e774      	b.n	80122d4 <uxr_deserialize_ObjectVariant+0x44>
 80123ea:	bf00      	nop

080123ec <uxr_deserialize_BaseObjectRequest>:
 80123ec:	b570      	push	{r4, r5, r6, lr}
 80123ee:	2202      	movs	r2, #2
 80123f0:	4605      	mov	r5, r0
 80123f2:	460e      	mov	r6, r1
 80123f4:	f000 fece 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 80123f8:	1cb1      	adds	r1, r6, #2
 80123fa:	4604      	mov	r4, r0
 80123fc:	2202      	movs	r2, #2
 80123fe:	4628      	mov	r0, r5
 8012400:	f000 fec8 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012404:	4020      	ands	r0, r4
 8012406:	b2c0      	uxtb	r0, r0
 8012408:	bd70      	pop	{r4, r5, r6, pc}
 801240a:	bf00      	nop

0801240c <uxr_serialize_AGENT_ActivityInfo>:
 801240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012410:	460e      	mov	r6, r1
 8012412:	f9b1 1000 	ldrsh.w	r1, [r1]
 8012416:	4607      	mov	r7, r0
 8012418:	f7f8 fab8 	bl	800a98c <ucdr_serialize_int16_t>
 801241c:	6871      	ldr	r1, [r6, #4]
 801241e:	4680      	mov	r8, r0
 8012420:	4638      	mov	r0, r7
 8012422:	f7f7 ff61 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8012426:	6873      	ldr	r3, [r6, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d06a      	beq.n	8012502 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 801242c:	b318      	cbz	r0, 8012476 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801242e:	f106 0904 	add.w	r9, r6, #4
 8012432:	2500      	movs	r5, #0
 8012434:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8012438:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801243c:	7a21      	ldrb	r1, [r4, #8]
 801243e:	4638      	mov	r0, r7
 8012440:	f7f7 fd3c 	bl	8009ebc <ucdr_serialize_uint8_t>
 8012444:	2800      	cmp	r0, #0
 8012446:	d051      	beq.n	80124ec <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8012448:	7a23      	ldrb	r3, [r4, #8]
 801244a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801244e:	00c9      	lsls	r1, r1, #3
 8012450:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8012454:	2b03      	cmp	r3, #3
 8012456:	d859      	bhi.n	801250c <uxr_serialize_AGENT_ActivityInfo+0x100>
 8012458:	e8df f003 	tbb	[pc, r3]
 801245c:	02122436 	.word	0x02122436
 8012460:	4449      	add	r1, r9
 8012462:	4638      	mov	r0, r7
 8012464:	6889      	ldr	r1, [r1, #8]
 8012466:	f000 ff51 	bl	801330c <ucdr_serialize_string>
 801246a:	6873      	ldr	r3, [r6, #4]
 801246c:	3501      	adds	r5, #1
 801246e:	429d      	cmp	r5, r3
 8012470:	d240      	bcs.n	80124f4 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012472:	2800      	cmp	r0, #0
 8012474:	d1de      	bne.n	8012434 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012476:	f04f 0800 	mov.w	r8, #0
 801247a:	4640      	mov	r0, r8
 801247c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012480:	3108      	adds	r1, #8
 8012482:	4449      	add	r1, r9
 8012484:	2210      	movs	r2, #16
 8012486:	4638      	mov	r0, r7
 8012488:	f000 fe20 	bl	80130cc <ucdr_serialize_array_uint8_t>
 801248c:	44aa      	add	sl, r5
 801248e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012492:	4604      	mov	r4, r0
 8012494:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012498:	4638      	mov	r0, r7
 801249a:	f7f7 ff25 	bl	800a2e8 <ucdr_serialize_uint32_t>
 801249e:	4020      	ands	r0, r4
 80124a0:	b2c0      	uxtb	r0, r0
 80124a2:	e7e2      	b.n	801246a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80124a4:	3108      	adds	r1, #8
 80124a6:	4449      	add	r1, r9
 80124a8:	2204      	movs	r2, #4
 80124aa:	4638      	mov	r0, r7
 80124ac:	f000 fe0e 	bl	80130cc <ucdr_serialize_array_uint8_t>
 80124b0:	44aa      	add	sl, r5
 80124b2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80124b6:	4604      	mov	r4, r0
 80124b8:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 80124bc:	4638      	mov	r0, r7
 80124be:	f7f7 fd29 	bl	8009f14 <ucdr_serialize_uint16_t>
 80124c2:	4020      	ands	r0, r4
 80124c4:	b2c0      	uxtb	r0, r0
 80124c6:	e7d0      	b.n	801246a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80124c8:	3108      	adds	r1, #8
 80124ca:	4449      	add	r1, r9
 80124cc:	2202      	movs	r2, #2
 80124ce:	4638      	mov	r0, r7
 80124d0:	f000 fdfc 	bl	80130cc <ucdr_serialize_array_uint8_t>
 80124d4:	44aa      	add	sl, r5
 80124d6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80124da:	4604      	mov	r4, r0
 80124dc:	f89a 100e 	ldrb.w	r1, [sl, #14]
 80124e0:	4638      	mov	r0, r7
 80124e2:	f7f7 fceb 	bl	8009ebc <ucdr_serialize_uint8_t>
 80124e6:	4020      	ands	r0, r4
 80124e8:	b2c0      	uxtb	r0, r0
 80124ea:	e7be      	b.n	801246a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80124ec:	6873      	ldr	r3, [r6, #4]
 80124ee:	3501      	adds	r5, #1
 80124f0:	429d      	cmp	r5, r3
 80124f2:	d3c0      	bcc.n	8012476 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80124f4:	ea08 0000 	and.w	r0, r8, r0
 80124f8:	fa5f f880 	uxtb.w	r8, r0
 80124fc:	4640      	mov	r0, r8
 80124fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012502:	ea08 0800 	and.w	r8, r8, r0
 8012506:	fa5f f888 	uxtb.w	r8, r8
 801250a:	e7b6      	b.n	801247a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801250c:	6873      	ldr	r3, [r6, #4]
 801250e:	3501      	adds	r5, #1
 8012510:	42ab      	cmp	r3, r5
 8012512:	f104 0418 	add.w	r4, r4, #24
 8012516:	d891      	bhi.n	801243c <uxr_serialize_AGENT_ActivityInfo+0x30>
 8012518:	e7af      	b.n	801247a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801251a:	bf00      	nop

0801251c <uxr_serialize_ActivityInfoVariant>:
 801251c:	b570      	push	{r4, r5, r6, lr}
 801251e:	460d      	mov	r5, r1
 8012520:	7809      	ldrb	r1, [r1, #0]
 8012522:	4606      	mov	r6, r0
 8012524:	f7f7 fcca 	bl	8009ebc <ucdr_serialize_uint8_t>
 8012528:	b130      	cbz	r0, 8012538 <uxr_serialize_ActivityInfoVariant+0x1c>
 801252a:	782b      	ldrb	r3, [r5, #0]
 801252c:	2b06      	cmp	r3, #6
 801252e:	d019      	beq.n	8012564 <uxr_serialize_ActivityInfoVariant+0x48>
 8012530:	2b0d      	cmp	r3, #13
 8012532:	d010      	beq.n	8012556 <uxr_serialize_ActivityInfoVariant+0x3a>
 8012534:	2b05      	cmp	r3, #5
 8012536:	d000      	beq.n	801253a <uxr_serialize_ActivityInfoVariant+0x1e>
 8012538:	bd70      	pop	{r4, r5, r6, pc}
 801253a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801253e:	4630      	mov	r0, r6
 8012540:	f7f8 fa24 	bl	800a98c <ucdr_serialize_int16_t>
 8012544:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012548:	4604      	mov	r4, r0
 801254a:	4630      	mov	r0, r6
 801254c:	f7f8 f922 	bl	800a794 <ucdr_serialize_uint64_t>
 8012550:	4020      	ands	r0, r4
 8012552:	b2c0      	uxtb	r0, r0
 8012554:	bd70      	pop	{r4, r5, r6, pc}
 8012556:	f105 0108 	add.w	r1, r5, #8
 801255a:	4630      	mov	r0, r6
 801255c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012560:	f7ff bf54 	b.w	801240c <uxr_serialize_AGENT_ActivityInfo>
 8012564:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012568:	4630      	mov	r0, r6
 801256a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801256e:	f7f8 ba0d 	b.w	800a98c <ucdr_serialize_int16_t>
 8012572:	bf00      	nop

08012574 <uxr_deserialize_BaseObjectReply>:
 8012574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012578:	2202      	movs	r2, #2
 801257a:	4606      	mov	r6, r0
 801257c:	460f      	mov	r7, r1
 801257e:	f000 fe09 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012582:	2202      	movs	r2, #2
 8012584:	1cb9      	adds	r1, r7, #2
 8012586:	4605      	mov	r5, r0
 8012588:	4630      	mov	r0, r6
 801258a:	f000 fe03 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 801258e:	1d39      	adds	r1, r7, #4
 8012590:	4680      	mov	r8, r0
 8012592:	4630      	mov	r0, r6
 8012594:	f7f7 fca8 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8012598:	1d79      	adds	r1, r7, #5
 801259a:	4604      	mov	r4, r0
 801259c:	4630      	mov	r0, r6
 801259e:	f7f7 fca3 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 80125a2:	ea05 0508 	and.w	r5, r5, r8
 80125a6:	402c      	ands	r4, r5
 80125a8:	4020      	ands	r0, r4
 80125aa:	b2c0      	uxtb	r0, r0
 80125ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125b0 <uxr_serialize_ReadSpecification>:
 80125b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b4:	460e      	mov	r6, r1
 80125b6:	7809      	ldrb	r1, [r1, #0]
 80125b8:	4607      	mov	r7, r0
 80125ba:	f7f7 fc7f 	bl	8009ebc <ucdr_serialize_uint8_t>
 80125be:	7871      	ldrb	r1, [r6, #1]
 80125c0:	4604      	mov	r4, r0
 80125c2:	4638      	mov	r0, r7
 80125c4:	f7f7 fc7a 	bl	8009ebc <ucdr_serialize_uint8_t>
 80125c8:	78b1      	ldrb	r1, [r6, #2]
 80125ca:	4004      	ands	r4, r0
 80125cc:	4638      	mov	r0, r7
 80125ce:	f7f7 fc45 	bl	8009e5c <ucdr_serialize_bool>
 80125d2:	78b3      	ldrb	r3, [r6, #2]
 80125d4:	b2e4      	uxtb	r4, r4
 80125d6:	4004      	ands	r4, r0
 80125d8:	b94b      	cbnz	r3, 80125ee <uxr_serialize_ReadSpecification+0x3e>
 80125da:	7a31      	ldrb	r1, [r6, #8]
 80125dc:	4638      	mov	r0, r7
 80125de:	f7f7 fc3d 	bl	8009e5c <ucdr_serialize_bool>
 80125e2:	7a33      	ldrb	r3, [r6, #8]
 80125e4:	4004      	ands	r4, r0
 80125e6:	b943      	cbnz	r3, 80125fa <uxr_serialize_ReadSpecification+0x4a>
 80125e8:	4620      	mov	r0, r4
 80125ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ee:	6871      	ldr	r1, [r6, #4]
 80125f0:	4638      	mov	r0, r7
 80125f2:	f000 fe8b 	bl	801330c <ucdr_serialize_string>
 80125f6:	4004      	ands	r4, r0
 80125f8:	e7ef      	b.n	80125da <uxr_serialize_ReadSpecification+0x2a>
 80125fa:	8971      	ldrh	r1, [r6, #10]
 80125fc:	4638      	mov	r0, r7
 80125fe:	f7f7 fc89 	bl	8009f14 <ucdr_serialize_uint16_t>
 8012602:	89b1      	ldrh	r1, [r6, #12]
 8012604:	4605      	mov	r5, r0
 8012606:	4638      	mov	r0, r7
 8012608:	f7f7 fc84 	bl	8009f14 <ucdr_serialize_uint16_t>
 801260c:	89f1      	ldrh	r1, [r6, #14]
 801260e:	4005      	ands	r5, r0
 8012610:	4638      	mov	r0, r7
 8012612:	f7f7 fc7f 	bl	8009f14 <ucdr_serialize_uint16_t>
 8012616:	8a31      	ldrh	r1, [r6, #16]
 8012618:	4680      	mov	r8, r0
 801261a:	4638      	mov	r0, r7
 801261c:	f7f7 fc7a 	bl	8009f14 <ucdr_serialize_uint16_t>
 8012620:	b2ed      	uxtb	r5, r5
 8012622:	4025      	ands	r5, r4
 8012624:	ea08 0505 	and.w	r5, r8, r5
 8012628:	ea00 0405 	and.w	r4, r0, r5
 801262c:	4620      	mov	r0, r4
 801262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012632:	bf00      	nop

08012634 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012634:	f7ff bb16 	b.w	8011c64 <uxr_serialize_CLIENT_Representation>

08012638 <uxr_serialize_CREATE_Payload>:
 8012638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263a:	2202      	movs	r2, #2
 801263c:	4606      	mov	r6, r0
 801263e:	460d      	mov	r5, r1
 8012640:	f000 fd44 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012644:	1ca9      	adds	r1, r5, #2
 8012646:	4604      	mov	r4, r0
 8012648:	2202      	movs	r2, #2
 801264a:	4630      	mov	r0, r6
 801264c:	f000 fd3e 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012650:	7929      	ldrb	r1, [r5, #4]
 8012652:	4607      	mov	r7, r0
 8012654:	4630      	mov	r0, r6
 8012656:	f7f7 fc31 	bl	8009ebc <ucdr_serialize_uint8_t>
 801265a:	b328      	cbz	r0, 80126a8 <uxr_serialize_CREATE_Payload+0x70>
 801265c:	792b      	ldrb	r3, [r5, #4]
 801265e:	403c      	ands	r4, r7
 8012660:	3b01      	subs	r3, #1
 8012662:	b2e4      	uxtb	r4, r4
 8012664:	2b0d      	cmp	r3, #13
 8012666:	d81d      	bhi.n	80126a4 <uxr_serialize_CREATE_Payload+0x6c>
 8012668:	e8df f003 	tbb	[pc, r3]
 801266c:	32320753 	.word	0x32320753
 8012670:	07070707 	.word	0x07070707
 8012674:	2121211c 	.word	0x2121211c
 8012678:	684c      	.short	0x684c
 801267a:	7a29      	ldrb	r1, [r5, #8]
 801267c:	4630      	mov	r0, r6
 801267e:	f7f7 fc1d 	bl	8009ebc <ucdr_serialize_uint8_t>
 8012682:	4607      	mov	r7, r0
 8012684:	b130      	cbz	r0, 8012694 <uxr_serialize_CREATE_Payload+0x5c>
 8012686:	7a2b      	ldrb	r3, [r5, #8]
 8012688:	2b02      	cmp	r3, #2
 801268a:	d035      	beq.n	80126f8 <uxr_serialize_CREATE_Payload+0xc0>
 801268c:	2b03      	cmp	r3, #3
 801268e:	d02b      	beq.n	80126e8 <uxr_serialize_CREATE_Payload+0xb0>
 8012690:	2b01      	cmp	r3, #1
 8012692:	d031      	beq.n	80126f8 <uxr_serialize_CREATE_Payload+0xc0>
 8012694:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8012698:	4630      	mov	r0, r6
 801269a:	2202      	movs	r2, #2
 801269c:	f000 fd16 	bl	80130cc <ucdr_serialize_array_uint8_t>
 80126a0:	4038      	ands	r0, r7
 80126a2:	4004      	ands	r4, r0
 80126a4:	4620      	mov	r0, r4
 80126a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126a8:	2400      	movs	r4, #0
 80126aa:	4620      	mov	r0, r4
 80126ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ae:	7a29      	ldrb	r1, [r5, #8]
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7f7 fc03 	bl	8009ebc <ucdr_serialize_uint8_t>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d0f6      	beq.n	80126a8 <uxr_serialize_CREATE_Payload+0x70>
 80126ba:	7a2b      	ldrb	r3, [r5, #8]
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d001      	beq.n	80126c4 <uxr_serialize_CREATE_Payload+0x8c>
 80126c0:	2b02      	cmp	r3, #2
 80126c2:	d1ef      	bne.n	80126a4 <uxr_serialize_CREATE_Payload+0x6c>
 80126c4:	68e9      	ldr	r1, [r5, #12]
 80126c6:	4630      	mov	r0, r6
 80126c8:	f000 fe20 	bl	801330c <ucdr_serialize_string>
 80126cc:	4004      	ands	r4, r0
 80126ce:	e7e9      	b.n	80126a4 <uxr_serialize_CREATE_Payload+0x6c>
 80126d0:	7a29      	ldrb	r1, [r5, #8]
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7f7 fbf2 	bl	8009ebc <ucdr_serialize_uint8_t>
 80126d8:	4607      	mov	r7, r0
 80126da:	2800      	cmp	r0, #0
 80126dc:	d0da      	beq.n	8012694 <uxr_serialize_CREATE_Payload+0x5c>
 80126de:	7a2b      	ldrb	r3, [r5, #8]
 80126e0:	2b02      	cmp	r3, #2
 80126e2:	d009      	beq.n	80126f8 <uxr_serialize_CREATE_Payload+0xc0>
 80126e4:	2b03      	cmp	r3, #3
 80126e6:	d1d5      	bne.n	8012694 <uxr_serialize_CREATE_Payload+0x5c>
 80126e8:	68ea      	ldr	r2, [r5, #12]
 80126ea:	f105 0110 	add.w	r1, r5, #16
 80126ee:	4630      	mov	r0, r6
 80126f0:	f000 fde0 	bl	80132b4 <ucdr_serialize_sequence_uint8_t>
 80126f4:	4607      	mov	r7, r0
 80126f6:	e7cd      	b.n	8012694 <uxr_serialize_CREATE_Payload+0x5c>
 80126f8:	68e9      	ldr	r1, [r5, #12]
 80126fa:	4630      	mov	r0, r6
 80126fc:	f000 fe06 	bl	801330c <ucdr_serialize_string>
 8012700:	4607      	mov	r7, r0
 8012702:	e7c7      	b.n	8012694 <uxr_serialize_CREATE_Payload+0x5c>
 8012704:	f105 0108 	add.w	r1, r5, #8
 8012708:	4630      	mov	r0, r6
 801270a:	f7ff fb71 	bl	8011df0 <uxr_serialize_AGENT_Representation>
 801270e:	4004      	ands	r4, r0
 8012710:	e7c8      	b.n	80126a4 <uxr_serialize_CREATE_Payload+0x6c>
 8012712:	7a29      	ldrb	r1, [r5, #8]
 8012714:	4630      	mov	r0, r6
 8012716:	f7f7 fbd1 	bl	8009ebc <ucdr_serialize_uint8_t>
 801271a:	4607      	mov	r7, r0
 801271c:	b130      	cbz	r0, 801272c <uxr_serialize_CREATE_Payload+0xf4>
 801271e:	7a2b      	ldrb	r3, [r5, #8]
 8012720:	2b02      	cmp	r3, #2
 8012722:	d012      	beq.n	801274a <uxr_serialize_CREATE_Payload+0x112>
 8012724:	2b03      	cmp	r3, #3
 8012726:	d016      	beq.n	8012756 <uxr_serialize_CREATE_Payload+0x11e>
 8012728:	2b01      	cmp	r3, #1
 801272a:	d00e      	beq.n	801274a <uxr_serialize_CREATE_Payload+0x112>
 801272c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8012730:	4630      	mov	r0, r6
 8012732:	f7f8 f92b 	bl	800a98c <ucdr_serialize_int16_t>
 8012736:	4038      	ands	r0, r7
 8012738:	4004      	ands	r4, r0
 801273a:	e7b3      	b.n	80126a4 <uxr_serialize_CREATE_Payload+0x6c>
 801273c:	f105 0108 	add.w	r1, r5, #8
 8012740:	4630      	mov	r0, r6
 8012742:	f7ff fa8f 	bl	8011c64 <uxr_serialize_CLIENT_Representation>
 8012746:	4004      	ands	r4, r0
 8012748:	e7ac      	b.n	80126a4 <uxr_serialize_CREATE_Payload+0x6c>
 801274a:	68e9      	ldr	r1, [r5, #12]
 801274c:	4630      	mov	r0, r6
 801274e:	f000 fddd 	bl	801330c <ucdr_serialize_string>
 8012752:	4607      	mov	r7, r0
 8012754:	e7ea      	b.n	801272c <uxr_serialize_CREATE_Payload+0xf4>
 8012756:	68ea      	ldr	r2, [r5, #12]
 8012758:	f105 0110 	add.w	r1, r5, #16
 801275c:	4630      	mov	r0, r6
 801275e:	f000 fda9 	bl	80132b4 <ucdr_serialize_sequence_uint8_t>
 8012762:	4607      	mov	r7, r0
 8012764:	e7e2      	b.n	801272c <uxr_serialize_CREATE_Payload+0xf4>
 8012766:	bf00      	nop

08012768 <uxr_deserialize_GET_INFO_Payload>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	2202      	movs	r2, #2
 801276c:	4605      	mov	r5, r0
 801276e:	460e      	mov	r6, r1
 8012770:	f000 fd10 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012774:	1cb1      	adds	r1, r6, #2
 8012776:	2202      	movs	r2, #2
 8012778:	4604      	mov	r4, r0
 801277a:	4628      	mov	r0, r5
 801277c:	f000 fd0a 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012780:	1d31      	adds	r1, r6, #4
 8012782:	4004      	ands	r4, r0
 8012784:	4628      	mov	r0, r5
 8012786:	f7f7 fedf 	bl	800a548 <ucdr_deserialize_uint32_t>
 801278a:	b2e4      	uxtb	r4, r4
 801278c:	4020      	ands	r0, r4
 801278e:	bd70      	pop	{r4, r5, r6, pc}

08012790 <uxr_serialize_DELETE_Payload>:
 8012790:	b570      	push	{r4, r5, r6, lr}
 8012792:	2202      	movs	r2, #2
 8012794:	4605      	mov	r5, r0
 8012796:	460e      	mov	r6, r1
 8012798:	f000 fc98 	bl	80130cc <ucdr_serialize_array_uint8_t>
 801279c:	1cb1      	adds	r1, r6, #2
 801279e:	4604      	mov	r4, r0
 80127a0:	2202      	movs	r2, #2
 80127a2:	4628      	mov	r0, r5
 80127a4:	f000 fc92 	bl	80130cc <ucdr_serialize_array_uint8_t>
 80127a8:	4020      	ands	r0, r4
 80127aa:	b2c0      	uxtb	r0, r0
 80127ac:	bd70      	pop	{r4, r5, r6, pc}
 80127ae:	bf00      	nop

080127b0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80127b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127b4:	4606      	mov	r6, r0
 80127b6:	460f      	mov	r7, r1
 80127b8:	f7f7 fb96 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 80127bc:	1c79      	adds	r1, r7, #1
 80127be:	4605      	mov	r5, r0
 80127c0:	4630      	mov	r0, r6
 80127c2:	f7f7 fb91 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 80127c6:	1d39      	adds	r1, r7, #4
 80127c8:	4681      	mov	r9, r0
 80127ca:	2204      	movs	r2, #4
 80127cc:	4630      	mov	r0, r6
 80127ce:	f000 fce1 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 80127d2:	f107 0108 	add.w	r1, r7, #8
 80127d6:	4604      	mov	r4, r0
 80127d8:	2202      	movs	r2, #2
 80127da:	4630      	mov	r0, r6
 80127dc:	f000 fcda 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 80127e0:	f107 010a 	add.w	r1, r7, #10
 80127e4:	4680      	mov	r8, r0
 80127e6:	2202      	movs	r2, #2
 80127e8:	4630      	mov	r0, r6
 80127ea:	f000 fcd3 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 80127ee:	ea05 0509 	and.w	r5, r5, r9
 80127f2:	b2ed      	uxtb	r5, r5
 80127f4:	402c      	ands	r4, r5
 80127f6:	f107 010c 	add.w	r1, r7, #12
 80127fa:	4605      	mov	r5, r0
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7f7 fb43 	bl	8009e88 <ucdr_deserialize_bool>
 8012802:	ea08 0404 	and.w	r4, r8, r4
 8012806:	4025      	ands	r5, r4
 8012808:	4028      	ands	r0, r5
 801280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801280e:	bf00      	nop

08012810 <uxr_deserialize_STATUS_Payload>:
 8012810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012814:	2202      	movs	r2, #2
 8012816:	4606      	mov	r6, r0
 8012818:	460f      	mov	r7, r1
 801281a:	f000 fcbb 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 801281e:	2202      	movs	r2, #2
 8012820:	1cb9      	adds	r1, r7, #2
 8012822:	4605      	mov	r5, r0
 8012824:	4630      	mov	r0, r6
 8012826:	f000 fcb5 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 801282a:	1d39      	adds	r1, r7, #4
 801282c:	4680      	mov	r8, r0
 801282e:	4630      	mov	r0, r6
 8012830:	f7f7 fb5a 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8012834:	1d79      	adds	r1, r7, #5
 8012836:	4604      	mov	r4, r0
 8012838:	4630      	mov	r0, r6
 801283a:	f7f7 fb55 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 801283e:	ea05 0508 	and.w	r5, r5, r8
 8012842:	402c      	ands	r4, r5
 8012844:	4020      	ands	r0, r4
 8012846:	b2c0      	uxtb	r0, r0
 8012848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801284c <uxr_serialize_INFO_Payload>:
 801284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012850:	2202      	movs	r2, #2
 8012852:	460c      	mov	r4, r1
 8012854:	4605      	mov	r5, r0
 8012856:	f000 fc39 	bl	80130cc <ucdr_serialize_array_uint8_t>
 801285a:	2202      	movs	r2, #2
 801285c:	4680      	mov	r8, r0
 801285e:	1ca1      	adds	r1, r4, #2
 8012860:	4628      	mov	r0, r5
 8012862:	f000 fc33 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012866:	7921      	ldrb	r1, [r4, #4]
 8012868:	4607      	mov	r7, r0
 801286a:	4628      	mov	r0, r5
 801286c:	f7f7 fb26 	bl	8009ebc <ucdr_serialize_uint8_t>
 8012870:	7961      	ldrb	r1, [r4, #5]
 8012872:	4606      	mov	r6, r0
 8012874:	4628      	mov	r0, r5
 8012876:	f7f7 fb21 	bl	8009ebc <ucdr_serialize_uint8_t>
 801287a:	ea08 0807 	and.w	r8, r8, r7
 801287e:	ea06 0608 	and.w	r6, r6, r8
 8012882:	4006      	ands	r6, r0
 8012884:	7a21      	ldrb	r1, [r4, #8]
 8012886:	4628      	mov	r0, r5
 8012888:	f7f7 fae8 	bl	8009e5c <ucdr_serialize_bool>
 801288c:	7a23      	ldrb	r3, [r4, #8]
 801288e:	b2f7      	uxtb	r7, r6
 8012890:	4606      	mov	r6, r0
 8012892:	b96b      	cbnz	r3, 80128b0 <uxr_serialize_INFO_Payload+0x64>
 8012894:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012898:	4628      	mov	r0, r5
 801289a:	f7f7 fadf 	bl	8009e5c <ucdr_serialize_bool>
 801289e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80128a2:	4030      	ands	r0, r6
 80128a4:	b2c6      	uxtb	r6, r0
 80128a6:	b983      	cbnz	r3, 80128ca <uxr_serialize_INFO_Payload+0x7e>
 80128a8:	ea06 0007 	and.w	r0, r6, r7
 80128ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b0:	7b21      	ldrb	r1, [r4, #12]
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7f7 fb02 	bl	8009ebc <ucdr_serialize_uint8_t>
 80128b8:	b188      	cbz	r0, 80128de <uxr_serialize_INFO_Payload+0x92>
 80128ba:	f104 010c 	add.w	r1, r4, #12
 80128be:	4628      	mov	r0, r5
 80128c0:	f7ff fae2 	bl	8011e88 <uxr_serialize_ObjectVariant.part.0>
 80128c4:	4030      	ands	r0, r6
 80128c6:	b2c6      	uxtb	r6, r0
 80128c8:	e7e4      	b.n	8012894 <uxr_serialize_INFO_Payload+0x48>
 80128ca:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80128ce:	4628      	mov	r0, r5
 80128d0:	f7ff fe24 	bl	801251c <uxr_serialize_ActivityInfoVariant>
 80128d4:	4006      	ands	r6, r0
 80128d6:	ea06 0007 	and.w	r0, r6, r7
 80128da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128de:	4606      	mov	r6, r0
 80128e0:	e7d8      	b.n	8012894 <uxr_serialize_INFO_Payload+0x48>
 80128e2:	bf00      	nop

080128e4 <uxr_serialize_READ_DATA_Payload>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	2202      	movs	r2, #2
 80128e8:	4605      	mov	r5, r0
 80128ea:	460e      	mov	r6, r1
 80128ec:	f000 fbee 	bl	80130cc <ucdr_serialize_array_uint8_t>
 80128f0:	1cb1      	adds	r1, r6, #2
 80128f2:	2202      	movs	r2, #2
 80128f4:	4604      	mov	r4, r0
 80128f6:	4628      	mov	r0, r5
 80128f8:	f000 fbe8 	bl	80130cc <ucdr_serialize_array_uint8_t>
 80128fc:	1d31      	adds	r1, r6, #4
 80128fe:	4004      	ands	r4, r0
 8012900:	4628      	mov	r0, r5
 8012902:	f7ff fe55 	bl	80125b0 <uxr_serialize_ReadSpecification>
 8012906:	b2e4      	uxtb	r4, r4
 8012908:	4020      	ands	r0, r4
 801290a:	bd70      	pop	{r4, r5, r6, pc}

0801290c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	2202      	movs	r2, #2
 8012910:	4605      	mov	r5, r0
 8012912:	460e      	mov	r6, r1
 8012914:	f000 fbda 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012918:	1cb1      	adds	r1, r6, #2
 801291a:	4604      	mov	r4, r0
 801291c:	2202      	movs	r2, #2
 801291e:	4628      	mov	r0, r5
 8012920:	f000 fbd4 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012924:	4020      	ands	r0, r4
 8012926:	b2c0      	uxtb	r0, r0
 8012928:	bd70      	pop	{r4, r5, r6, pc}
 801292a:	bf00      	nop

0801292c <uxr_serialize_ACKNACK_Payload>:
 801292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292e:	460f      	mov	r7, r1
 8012930:	460e      	mov	r6, r1
 8012932:	f837 1b02 	ldrh.w	r1, [r7], #2
 8012936:	4605      	mov	r5, r0
 8012938:	f7f7 faec 	bl	8009f14 <ucdr_serialize_uint16_t>
 801293c:	4639      	mov	r1, r7
 801293e:	2202      	movs	r2, #2
 8012940:	4604      	mov	r4, r0
 8012942:	4628      	mov	r0, r5
 8012944:	f000 fbc2 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012948:	7931      	ldrb	r1, [r6, #4]
 801294a:	4004      	ands	r4, r0
 801294c:	4628      	mov	r0, r5
 801294e:	f7f7 fab5 	bl	8009ebc <ucdr_serialize_uint8_t>
 8012952:	b2e4      	uxtb	r4, r4
 8012954:	4020      	ands	r0, r4
 8012956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012958 <uxr_deserialize_ACKNACK_Payload>:
 8012958:	b570      	push	{r4, r5, r6, lr}
 801295a:	4605      	mov	r5, r0
 801295c:	460e      	mov	r6, r1
 801295e:	f7f7 fbd9 	bl	800a114 <ucdr_deserialize_uint16_t>
 8012962:	1cb1      	adds	r1, r6, #2
 8012964:	2202      	movs	r2, #2
 8012966:	4604      	mov	r4, r0
 8012968:	4628      	mov	r0, r5
 801296a:	f000 fc13 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 801296e:	1d31      	adds	r1, r6, #4
 8012970:	4004      	ands	r4, r0
 8012972:	4628      	mov	r0, r5
 8012974:	f7f7 fab8 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8012978:	b2e4      	uxtb	r4, r4
 801297a:	4020      	ands	r0, r4
 801297c:	bd70      	pop	{r4, r5, r6, pc}
 801297e:	bf00      	nop

08012980 <uxr_serialize_HEARTBEAT_Payload>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	460d      	mov	r5, r1
 8012984:	8809      	ldrh	r1, [r1, #0]
 8012986:	4606      	mov	r6, r0
 8012988:	f7f7 fac4 	bl	8009f14 <ucdr_serialize_uint16_t>
 801298c:	8869      	ldrh	r1, [r5, #2]
 801298e:	4604      	mov	r4, r0
 8012990:	4630      	mov	r0, r6
 8012992:	f7f7 fabf 	bl	8009f14 <ucdr_serialize_uint16_t>
 8012996:	7929      	ldrb	r1, [r5, #4]
 8012998:	4004      	ands	r4, r0
 801299a:	4630      	mov	r0, r6
 801299c:	f7f7 fa8e 	bl	8009ebc <ucdr_serialize_uint8_t>
 80129a0:	b2e4      	uxtb	r4, r4
 80129a2:	4020      	ands	r0, r4
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	bf00      	nop

080129a8 <uxr_deserialize_HEARTBEAT_Payload>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	4605      	mov	r5, r0
 80129ac:	460e      	mov	r6, r1
 80129ae:	f7f7 fbb1 	bl	800a114 <ucdr_deserialize_uint16_t>
 80129b2:	1cb1      	adds	r1, r6, #2
 80129b4:	4604      	mov	r4, r0
 80129b6:	4628      	mov	r0, r5
 80129b8:	f7f7 fbac 	bl	800a114 <ucdr_deserialize_uint16_t>
 80129bc:	1d31      	adds	r1, r6, #4
 80129be:	4004      	ands	r4, r0
 80129c0:	4628      	mov	r0, r5
 80129c2:	f7f7 fa91 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 80129c6:	b2e4      	uxtb	r4, r4
 80129c8:	4020      	ands	r0, r4
 80129ca:	bd70      	pop	{r4, r5, r6, pc}

080129cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80129cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129d0:	4605      	mov	r5, r0
 80129d2:	460e      	mov	r6, r1
 80129d4:	f7f8 f966 	bl	800aca4 <ucdr_deserialize_int32_t>
 80129d8:	1d31      	adds	r1, r6, #4
 80129da:	4607      	mov	r7, r0
 80129dc:	4628      	mov	r0, r5
 80129de:	f7f7 fdb3 	bl	800a548 <ucdr_deserialize_uint32_t>
 80129e2:	f106 0108 	add.w	r1, r6, #8
 80129e6:	4680      	mov	r8, r0
 80129e8:	4628      	mov	r0, r5
 80129ea:	f7f8 f95b 	bl	800aca4 <ucdr_deserialize_int32_t>
 80129ee:	f106 010c 	add.w	r1, r6, #12
 80129f2:	4604      	mov	r4, r0
 80129f4:	4628      	mov	r0, r5
 80129f6:	f7f7 fda7 	bl	800a548 <ucdr_deserialize_uint32_t>
 80129fa:	ea07 0708 	and.w	r7, r7, r8
 80129fe:	403c      	ands	r4, r7
 8012a00:	f106 0110 	add.w	r1, r6, #16
 8012a04:	4004      	ands	r4, r0
 8012a06:	4628      	mov	r0, r5
 8012a08:	f7f8 f94c 	bl	800aca4 <ucdr_deserialize_int32_t>
 8012a0c:	f106 0114 	add.w	r1, r6, #20
 8012a10:	4603      	mov	r3, r0
 8012a12:	4628      	mov	r0, r5
 8012a14:	461d      	mov	r5, r3
 8012a16:	f7f7 fd97 	bl	800a548 <ucdr_deserialize_uint32_t>
 8012a1a:	b2e4      	uxtb	r4, r4
 8012a1c:	402c      	ands	r4, r5
 8012a1e:	4020      	ands	r0, r4
 8012a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a24 <uxr_serialize_SampleIdentity>:
 8012a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a28:	220c      	movs	r2, #12
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	460d      	mov	r5, r1
 8012a2e:	f000 fb4d 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012a32:	2203      	movs	r2, #3
 8012a34:	f105 010c 	add.w	r1, r5, #12
 8012a38:	4607      	mov	r7, r0
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f000 fb46 	bl	80130cc <ucdr_serialize_array_uint8_t>
 8012a40:	7be9      	ldrb	r1, [r5, #15]
 8012a42:	4680      	mov	r8, r0
 8012a44:	4620      	mov	r0, r4
 8012a46:	f7f7 fa39 	bl	8009ebc <ucdr_serialize_uint8_t>
 8012a4a:	6929      	ldr	r1, [r5, #16]
 8012a4c:	4606      	mov	r6, r0
 8012a4e:	4620      	mov	r0, r4
 8012a50:	f7f8 f890 	bl	800ab74 <ucdr_serialize_int32_t>
 8012a54:	6969      	ldr	r1, [r5, #20]
 8012a56:	4603      	mov	r3, r0
 8012a58:	4620      	mov	r0, r4
 8012a5a:	ea07 0708 	and.w	r7, r7, r8
 8012a5e:	461c      	mov	r4, r3
 8012a60:	f7f7 fc42 	bl	800a2e8 <ucdr_serialize_uint32_t>
 8012a64:	403e      	ands	r6, r7
 8012a66:	4034      	ands	r4, r6
 8012a68:	4020      	ands	r0, r4
 8012a6a:	b2c0      	uxtb	r0, r0
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a70 <uxr_deserialize_SampleIdentity>:
 8012a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a74:	220c      	movs	r2, #12
 8012a76:	4604      	mov	r4, r0
 8012a78:	460d      	mov	r5, r1
 8012a7a:	f000 fb8b 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012a7e:	2203      	movs	r2, #3
 8012a80:	f105 010c 	add.w	r1, r5, #12
 8012a84:	4607      	mov	r7, r0
 8012a86:	4620      	mov	r0, r4
 8012a88:	f000 fb84 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012a8c:	f105 010f 	add.w	r1, r5, #15
 8012a90:	4680      	mov	r8, r0
 8012a92:	4620      	mov	r0, r4
 8012a94:	f7f7 fa28 	bl	8009ee8 <ucdr_deserialize_uint8_t>
 8012a98:	f105 0110 	add.w	r1, r5, #16
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f7f8 f900 	bl	800aca4 <ucdr_deserialize_int32_t>
 8012aa4:	f105 0114 	add.w	r1, r5, #20
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	4620      	mov	r0, r4
 8012aac:	ea07 0708 	and.w	r7, r7, r8
 8012ab0:	461c      	mov	r4, r3
 8012ab2:	f7f7 fd49 	bl	800a548 <ucdr_deserialize_uint32_t>
 8012ab6:	403e      	ands	r6, r7
 8012ab8:	4034      	ands	r4, r6
 8012aba:	4020      	ands	r0, r4
 8012abc:	b2c0      	uxtb	r0, r0
 8012abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac2:	bf00      	nop

08012ac4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012ac4:	280b      	cmp	r0, #11
 8012ac6:	dc0d      	bgt.n	8012ae4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	db09      	blt.n	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012acc:	280b      	cmp	r0, #11
 8012ace:	d807      	bhi.n	8012ae0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012ad0:	e8df f000 	tbb	[pc, r0]
 8012ad4:	07060607 	.word	0x07060607
 8012ad8:	06060606 	.word	0x06060606
 8012adc:	07070606 	.word	0x07070606
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	4770      	bx	lr
 8012ae4:	28cb      	cmp	r0, #203	@ 0xcb
 8012ae6:	bf18      	it	ne
 8012ae8:	2001      	movne	r0, #1
 8012aea:	4770      	bx	lr

08012aec <rcl_get_default_domain_id>:
 8012aec:	b530      	push	{r4, r5, lr}
 8012aee:	b083      	sub	sp, #12
 8012af0:	2300      	movs	r3, #0
 8012af2:	9300      	str	r3, [sp, #0]
 8012af4:	b1d0      	cbz	r0, 8012b2c <rcl_get_default_domain_id+0x40>
 8012af6:	4604      	mov	r4, r0
 8012af8:	4669      	mov	r1, sp
 8012afa:	4815      	ldr	r0, [pc, #84]	@ (8012b50 <rcl_get_default_domain_id+0x64>)
 8012afc:	f7fa fe34 	bl	800d768 <rcutils_get_env>
 8012b00:	4602      	mov	r2, r0
 8012b02:	b110      	cbz	r0, 8012b0a <rcl_get_default_domain_id+0x1e>
 8012b04:	2001      	movs	r0, #1
 8012b06:	b003      	add	sp, #12
 8012b08:	bd30      	pop	{r4, r5, pc}
 8012b0a:	9b00      	ldr	r3, [sp, #0]
 8012b0c:	b18b      	cbz	r3, 8012b32 <rcl_get_default_domain_id+0x46>
 8012b0e:	7818      	ldrb	r0, [r3, #0]
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d0f8      	beq.n	8012b06 <rcl_get_default_domain_id+0x1a>
 8012b14:	4618      	mov	r0, r3
 8012b16:	a901      	add	r1, sp, #4
 8012b18:	9201      	str	r2, [sp, #4]
 8012b1a:	f001 fb73 	bl	8014204 <strtoul>
 8012b1e:	4605      	mov	r5, r0
 8012b20:	b150      	cbz	r0, 8012b38 <rcl_get_default_domain_id+0x4c>
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	d00d      	beq.n	8012b42 <rcl_get_default_domain_id+0x56>
 8012b26:	6025      	str	r5, [r4, #0]
 8012b28:	2000      	movs	r0, #0
 8012b2a:	e7ec      	b.n	8012b06 <rcl_get_default_domain_id+0x1a>
 8012b2c:	200b      	movs	r0, #11
 8012b2e:	b003      	add	sp, #12
 8012b30:	bd30      	pop	{r4, r5, pc}
 8012b32:	4618      	mov	r0, r3
 8012b34:	b003      	add	sp, #12
 8012b36:	bd30      	pop	{r4, r5, pc}
 8012b38:	9b01      	ldr	r3, [sp, #4]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d0f2      	beq.n	8012b26 <rcl_get_default_domain_id+0x3a>
 8012b40:	e7e0      	b.n	8012b04 <rcl_get_default_domain_id+0x18>
 8012b42:	f001 fd89 	bl	8014658 <__errno>
 8012b46:	6803      	ldr	r3, [r0, #0]
 8012b48:	2b22      	cmp	r3, #34	@ 0x22
 8012b4a:	d1ec      	bne.n	8012b26 <rcl_get_default_domain_id+0x3a>
 8012b4c:	e7da      	b.n	8012b04 <rcl_get_default_domain_id+0x18>
 8012b4e:	bf00      	nop
 8012b50:	08015dc4 	.word	0x08015dc4

08012b54 <rcl_get_zero_initialized_guard_condition>:
 8012b54:	4a03      	ldr	r2, [pc, #12]	@ (8012b64 <rcl_get_zero_initialized_guard_condition+0x10>)
 8012b56:	4603      	mov	r3, r0
 8012b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b60:	4618      	mov	r0, r3
 8012b62:	4770      	bx	lr
 8012b64:	08015dd4 	.word	0x08015dd4

08012b68 <rcl_guard_condition_init_from_rmw>:
 8012b68:	b082      	sub	sp, #8
 8012b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	ac0c      	add	r4, sp, #48	@ 0x30
 8012b72:	4684      	mov	ip, r0
 8012b74:	f844 3f04 	str.w	r3, [r4, #4]!
 8012b78:	460f      	mov	r7, r1
 8012b7a:	4690      	mov	r8, r2
 8012b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b7e:	ad01      	add	r5, sp, #4
 8012b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b82:	6823      	ldr	r3, [r4, #0]
 8012b84:	602b      	str	r3, [r5, #0]
 8012b86:	a801      	add	r0, sp, #4
 8012b88:	4664      	mov	r4, ip
 8012b8a:	f7f6 ff59 	bl	8009a40 <rcutils_allocator_is_valid>
 8012b8e:	b328      	cbz	r0, 8012bdc <rcl_guard_condition_init_from_rmw+0x74>
 8012b90:	b324      	cbz	r4, 8012bdc <rcl_guard_condition_init_from_rmw+0x74>
 8012b92:	6866      	ldr	r6, [r4, #4]
 8012b94:	b9e6      	cbnz	r6, 8012bd0 <rcl_guard_condition_init_from_rmw+0x68>
 8012b96:	f1b8 0f00 	cmp.w	r8, #0
 8012b9a:	d01f      	beq.n	8012bdc <rcl_guard_condition_init_from_rmw+0x74>
 8012b9c:	4640      	mov	r0, r8
 8012b9e:	f7f8 fb47 	bl	800b230 <rcl_context_is_valid>
 8012ba2:	b308      	cbz	r0, 8012be8 <rcl_guard_condition_init_from_rmw+0x80>
 8012ba4:	9b01      	ldr	r3, [sp, #4]
 8012ba6:	9905      	ldr	r1, [sp, #20]
 8012ba8:	201c      	movs	r0, #28
 8012baa:	4798      	blx	r3
 8012bac:	4605      	mov	r5, r0
 8012bae:	6060      	str	r0, [r4, #4]
 8012bb0:	b340      	cbz	r0, 8012c04 <rcl_guard_condition_init_from_rmw+0x9c>
 8012bb2:	b1df      	cbz	r7, 8012bec <rcl_guard_condition_init_from_rmw+0x84>
 8012bb4:	6007      	str	r7, [r0, #0]
 8012bb6:	7106      	strb	r6, [r0, #4]
 8012bb8:	ac01      	add	r4, sp, #4
 8012bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bbc:	3508      	adds	r5, #8
 8012bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	602b      	str	r3, [r5, #0]
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	b006      	add	sp, #24
 8012bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bcc:	b002      	add	sp, #8
 8012bce:	4770      	bx	lr
 8012bd0:	2064      	movs	r0, #100	@ 0x64
 8012bd2:	b006      	add	sp, #24
 8012bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd8:	b002      	add	sp, #8
 8012bda:	4770      	bx	lr
 8012bdc:	200b      	movs	r0, #11
 8012bde:	b006      	add	sp, #24
 8012be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012be4:	b002      	add	sp, #8
 8012be6:	4770      	bx	lr
 8012be8:	2065      	movs	r0, #101	@ 0x65
 8012bea:	e7f2      	b.n	8012bd2 <rcl_guard_condition_init_from_rmw+0x6a>
 8012bec:	f8d8 0000 	ldr.w	r0, [r8]
 8012bf0:	3028      	adds	r0, #40	@ 0x28
 8012bf2:	f000 f95f 	bl	8012eb4 <rmw_create_guard_condition>
 8012bf6:	6028      	str	r0, [r5, #0]
 8012bf8:	6865      	ldr	r5, [r4, #4]
 8012bfa:	682e      	ldr	r6, [r5, #0]
 8012bfc:	b126      	cbz	r6, 8012c08 <rcl_guard_condition_init_from_rmw+0xa0>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	712b      	strb	r3, [r5, #4]
 8012c02:	e7d9      	b.n	8012bb8 <rcl_guard_condition_init_from_rmw+0x50>
 8012c04:	200a      	movs	r0, #10
 8012c06:	e7e4      	b.n	8012bd2 <rcl_guard_condition_init_from_rmw+0x6a>
 8012c08:	4628      	mov	r0, r5
 8012c0a:	9b02      	ldr	r3, [sp, #8]
 8012c0c:	9905      	ldr	r1, [sp, #20]
 8012c0e:	4798      	blx	r3
 8012c10:	6066      	str	r6, [r4, #4]
 8012c12:	2001      	movs	r0, #1
 8012c14:	e7dd      	b.n	8012bd2 <rcl_guard_condition_init_from_rmw+0x6a>
 8012c16:	bf00      	nop

08012c18 <rcl_guard_condition_fini>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	b1f0      	cbz	r0, 8012c5c <rcl_guard_condition_fini+0x44>
 8012c1e:	4604      	mov	r4, r0
 8012c20:	6840      	ldr	r0, [r0, #4]
 8012c22:	b158      	cbz	r0, 8012c3c <rcl_guard_condition_fini+0x24>
 8012c24:	6803      	ldr	r3, [r0, #0]
 8012c26:	68c6      	ldr	r6, [r0, #12]
 8012c28:	6981      	ldr	r1, [r0, #24]
 8012c2a:	b15b      	cbz	r3, 8012c44 <rcl_guard_condition_fini+0x2c>
 8012c2c:	7905      	ldrb	r5, [r0, #4]
 8012c2e:	b95d      	cbnz	r5, 8012c48 <rcl_guard_condition_fini+0x30>
 8012c30:	47b0      	blx	r6
 8012c32:	2300      	movs	r3, #0
 8012c34:	4628      	mov	r0, r5
 8012c36:	6063      	str	r3, [r4, #4]
 8012c38:	b002      	add	sp, #8
 8012c3a:	bd70      	pop	{r4, r5, r6, pc}
 8012c3c:	4605      	mov	r5, r0
 8012c3e:	4628      	mov	r0, r5
 8012c40:	b002      	add	sp, #8
 8012c42:	bd70      	pop	{r4, r5, r6, pc}
 8012c44:	461d      	mov	r5, r3
 8012c46:	e7f3      	b.n	8012c30 <rcl_guard_condition_fini+0x18>
 8012c48:	4618      	mov	r0, r3
 8012c4a:	9101      	str	r1, [sp, #4]
 8012c4c:	f000 f946 	bl	8012edc <rmw_destroy_guard_condition>
 8012c50:	1e05      	subs	r5, r0, #0
 8012c52:	9901      	ldr	r1, [sp, #4]
 8012c54:	6860      	ldr	r0, [r4, #4]
 8012c56:	bf18      	it	ne
 8012c58:	2501      	movne	r5, #1
 8012c5a:	e7e9      	b.n	8012c30 <rcl_guard_condition_fini+0x18>
 8012c5c:	250b      	movs	r5, #11
 8012c5e:	4628      	mov	r0, r5
 8012c60:	b002      	add	sp, #8
 8012c62:	bd70      	pop	{r4, r5, r6, pc}

08012c64 <rcl_guard_condition_get_default_options>:
 8012c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c66:	b087      	sub	sp, #28
 8012c68:	4607      	mov	r7, r0
 8012c6a:	466c      	mov	r4, sp
 8012c6c:	4668      	mov	r0, sp
 8012c6e:	f7f6 fed9 	bl	8009a24 <rcutils_get_default_allocator>
 8012c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c74:	4d07      	ldr	r5, [pc, #28]	@ (8012c94 <rcl_guard_condition_get_default_options+0x30>)
 8012c76:	f8d4 c000 	ldr.w	ip, [r4]
 8012c7a:	462e      	mov	r6, r5
 8012c7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012c7e:	462c      	mov	r4, r5
 8012c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c82:	463c      	mov	r4, r7
 8012c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c86:	4638      	mov	r0, r7
 8012c88:	f8c6 c000 	str.w	ip, [r6]
 8012c8c:	f8c4 c000 	str.w	ip, [r4]
 8012c90:	b007      	add	sp, #28
 8012c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c94:	2000921c 	.word	0x2000921c

08012c98 <rcl_guard_condition_get_rmw_handle>:
 8012c98:	b110      	cbz	r0, 8012ca0 <rcl_guard_condition_get_rmw_handle+0x8>
 8012c9a:	6840      	ldr	r0, [r0, #4]
 8012c9c:	b100      	cbz	r0, 8012ca0 <rcl_guard_condition_get_rmw_handle+0x8>
 8012c9e:	6800      	ldr	r0, [r0, #0]
 8012ca0:	4770      	bx	lr
 8012ca2:	bf00      	nop

08012ca4 <on_status>:
 8012ca4:	b082      	sub	sp, #8
 8012ca6:	b002      	add	sp, #8
 8012ca8:	4770      	bx	lr
 8012caa:	bf00      	nop

08012cac <on_topic>:
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	4a21      	ldr	r2, [pc, #132]	@ (8012d38 <on_topic+0x8c>)
 8012cb2:	b094      	sub	sp, #80	@ 0x50
 8012cb4:	6812      	ldr	r2, [r2, #0]
 8012cb6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8012cb8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8012cbc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012cbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8012cc0:	b3ba      	cbz	r2, 8012d32 <on_topic+0x86>
 8012cc2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8012cc6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8012cca:	e001      	b.n	8012cd0 <on_topic+0x24>
 8012ccc:	6892      	ldr	r2, [r2, #8]
 8012cce:	b382      	cbz	r2, 8012d32 <on_topic+0x86>
 8012cd0:	68d4      	ldr	r4, [r2, #12]
 8012cd2:	8aa3      	ldrh	r3, [r4, #20]
 8012cd4:	428b      	cmp	r3, r1
 8012cd6:	d1f9      	bne.n	8012ccc <on_topic+0x20>
 8012cd8:	7da3      	ldrb	r3, [r4, #22]
 8012cda:	4283      	cmp	r3, r0
 8012cdc:	d1f6      	bne.n	8012ccc <on_topic+0x20>
 8012cde:	2248      	movs	r2, #72	@ 0x48
 8012ce0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012ce4:	4668      	mov	r0, sp
 8012ce6:	f001 fcec 	bl	80146c2 <memcpy>
 8012cea:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f7fc fb56 	bl	800f3a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012cf4:	4607      	mov	r7, r0
 8012cf6:	b1e0      	cbz	r0, 8012d32 <on_topic+0x86>
 8012cf8:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8012cfc:	462a      	mov	r2, r5
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f108 0110 	add.w	r1, r8, #16
 8012d04:	f000 fa46 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012d08:	b930      	cbnz	r0, 8012d18 <on_topic+0x6c>
 8012d0a:	480c      	ldr	r0, [pc, #48]	@ (8012d3c <on_topic+0x90>)
 8012d0c:	4639      	mov	r1, r7
 8012d0e:	b014      	add	sp, #80	@ 0x50
 8012d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d14:	f000 b8ba 	b.w	8012e8c <put_memory>
 8012d18:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012d1c:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8012d20:	f000 f962 	bl	8012fe8 <rmw_uros_epoch_nanos>
 8012d24:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 8012d28:	2305      	movs	r3, #5
 8012d2a:	e9c2 0100 	strd	r0, r1, [r2]
 8012d2e:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012d32:	b014      	add	sp, #80	@ 0x50
 8012d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d38:	2000c6c4 	.word	0x2000c6c4
 8012d3c:	20009458 	.word	0x20009458

08012d40 <on_request>:
 8012d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d44:	4822      	ldr	r0, [pc, #136]	@ (8012dd0 <on_request+0x90>)
 8012d46:	b095      	sub	sp, #84	@ 0x54
 8012d48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012d4a:	6801      	ldr	r1, [r0, #0]
 8012d4c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8012d4e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8012d52:	2900      	cmp	r1, #0
 8012d54:	d039      	beq.n	8012dca <on_request+0x8a>
 8012d56:	461d      	mov	r5, r3
 8012d58:	e001      	b.n	8012d5e <on_request+0x1e>
 8012d5a:	6889      	ldr	r1, [r1, #8]
 8012d5c:	b3a9      	cbz	r1, 8012dca <on_request+0x8a>
 8012d5e:	68cc      	ldr	r4, [r1, #12]
 8012d60:	8b20      	ldrh	r0, [r4, #24]
 8012d62:	4290      	cmp	r0, r2
 8012d64:	d1f9      	bne.n	8012d5a <on_request+0x1a>
 8012d66:	2248      	movs	r2, #72	@ 0x48
 8012d68:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012d6c:	4668      	mov	r0, sp
 8012d6e:	f001 fca8 	bl	80146c2 <memcpy>
 8012d72:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8012d76:	4620      	mov	r0, r4
 8012d78:	f7fc fb12 	bl	800f3a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012d7c:	4680      	mov	r8, r0
 8012d7e:	b320      	cbz	r0, 8012dca <on_request+0x8a>
 8012d80:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8012d84:	4632      	mov	r2, r6
 8012d86:	4638      	mov	r0, r7
 8012d88:	f109 0110 	add.w	r1, r9, #16
 8012d8c:	f000 fa02 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012d90:	b930      	cbnz	r0, 8012da0 <on_request+0x60>
 8012d92:	4810      	ldr	r0, [pc, #64]	@ (8012dd4 <on_request+0x94>)
 8012d94:	4641      	mov	r1, r8
 8012d96:	b015      	add	sp, #84	@ 0x54
 8012d98:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d9c:	f000 b876 	b.w	8012e8c <put_memory>
 8012da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012da2:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8012da6:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 8012daa:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8012dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012db0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012db4:	e884 0003 	stmia.w	r4, {r0, r1}
 8012db8:	f000 f916 	bl	8012fe8 <rmw_uros_epoch_nanos>
 8012dbc:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8012dc0:	2303      	movs	r3, #3
 8012dc2:	e9c2 0100 	strd	r0, r1, [r2]
 8012dc6:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8012dca:	b015      	add	sp, #84	@ 0x54
 8012dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dd0:	2000c6b4 	.word	0x2000c6b4
 8012dd4:	20009458 	.word	0x20009458

08012dd8 <on_reply>:
 8012dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ddc:	4821      	ldr	r0, [pc, #132]	@ (8012e64 <on_reply+0x8c>)
 8012dde:	b095      	sub	sp, #84	@ 0x54
 8012de0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012de2:	6801      	ldr	r1, [r0, #0]
 8012de4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8012de6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8012dea:	b3b9      	cbz	r1, 8012e5c <on_reply+0x84>
 8012dec:	461d      	mov	r5, r3
 8012dee:	e001      	b.n	8012df4 <on_reply+0x1c>
 8012df0:	6889      	ldr	r1, [r1, #8]
 8012df2:	b399      	cbz	r1, 8012e5c <on_reply+0x84>
 8012df4:	68cc      	ldr	r4, [r1, #12]
 8012df6:	8b20      	ldrh	r0, [r4, #24]
 8012df8:	4290      	cmp	r0, r2
 8012dfa:	d1f9      	bne.n	8012df0 <on_reply+0x18>
 8012dfc:	2248      	movs	r2, #72	@ 0x48
 8012dfe:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012e02:	4668      	mov	r0, sp
 8012e04:	f001 fc5d 	bl	80146c2 <memcpy>
 8012e08:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f7fc fac7 	bl	800f3a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012e12:	4680      	mov	r8, r0
 8012e14:	b310      	cbz	r0, 8012e5c <on_reply+0x84>
 8012e16:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8012e1a:	4632      	mov	r2, r6
 8012e1c:	4638      	mov	r0, r7
 8012e1e:	f109 0110 	add.w	r1, r9, #16
 8012e22:	f000 f9b7 	bl	8013194 <ucdr_deserialize_array_uint8_t>
 8012e26:	b930      	cbnz	r0, 8012e36 <on_reply+0x5e>
 8012e28:	480f      	ldr	r0, [pc, #60]	@ (8012e68 <on_reply+0x90>)
 8012e2a:	4641      	mov	r1, r8
 8012e2c:	b015      	add	sp, #84	@ 0x54
 8012e2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e32:	f000 b82b 	b.w	8012e8c <put_memory>
 8012e36:	b2aa      	uxth	r2, r5
 8012e38:	2300      	movs	r3, #0
 8012e3a:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 8012e3e:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8012e42:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8012e46:	e9c1 2300 	strd	r2, r3, [r1]
 8012e4a:	f000 f8cd 	bl	8012fe8 <rmw_uros_epoch_nanos>
 8012e4e:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8012e52:	2304      	movs	r3, #4
 8012e54:	e9c2 0100 	strd	r0, r1, [r2]
 8012e58:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8012e5c:	b015      	add	sp, #84	@ 0x54
 8012e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e62:	bf00      	nop
 8012e64:	20009ce8 	.word	0x20009ce8
 8012e68:	20009458 	.word	0x20009458

08012e6c <get_memory>:
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	6840      	ldr	r0, [r0, #4]
 8012e70:	b158      	cbz	r0, 8012e8a <get_memory+0x1e>
 8012e72:	6882      	ldr	r2, [r0, #8]
 8012e74:	605a      	str	r2, [r3, #4]
 8012e76:	b10a      	cbz	r2, 8012e7c <get_memory+0x10>
 8012e78:	2100      	movs	r1, #0
 8012e7a:	6051      	str	r1, [r2, #4]
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	6082      	str	r2, [r0, #8]
 8012e80:	b102      	cbz	r2, 8012e84 <get_memory+0x18>
 8012e82:	6050      	str	r0, [r2, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	6042      	str	r2, [r0, #4]
 8012e88:	6018      	str	r0, [r3, #0]
 8012e8a:	4770      	bx	lr

08012e8c <put_memory>:
 8012e8c:	684b      	ldr	r3, [r1, #4]
 8012e8e:	b10b      	cbz	r3, 8012e94 <put_memory+0x8>
 8012e90:	688a      	ldr	r2, [r1, #8]
 8012e92:	609a      	str	r2, [r3, #8]
 8012e94:	688a      	ldr	r2, [r1, #8]
 8012e96:	b102      	cbz	r2, 8012e9a <put_memory+0xe>
 8012e98:	6053      	str	r3, [r2, #4]
 8012e9a:	6803      	ldr	r3, [r0, #0]
 8012e9c:	428b      	cmp	r3, r1
 8012e9e:	6843      	ldr	r3, [r0, #4]
 8012ea0:	bf08      	it	eq
 8012ea2:	6002      	streq	r2, [r0, #0]
 8012ea4:	608b      	str	r3, [r1, #8]
 8012ea6:	b103      	cbz	r3, 8012eaa <put_memory+0x1e>
 8012ea8:	6059      	str	r1, [r3, #4]
 8012eaa:	2300      	movs	r3, #0
 8012eac:	604b      	str	r3, [r1, #4]
 8012eae:	6041      	str	r1, [r0, #4]
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop

08012eb4 <rmw_create_guard_condition>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4605      	mov	r5, r0
 8012eb8:	4807      	ldr	r0, [pc, #28]	@ (8012ed8 <rmw_create_guard_condition+0x24>)
 8012eba:	f7ff ffd7 	bl	8012e6c <get_memory>
 8012ebe:	b148      	cbz	r0, 8012ed4 <rmw_create_guard_condition+0x20>
 8012ec0:	68c4      	ldr	r4, [r0, #12]
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	61e5      	str	r5, [r4, #28]
 8012ec6:	7423      	strb	r3, [r4, #16]
 8012ec8:	f7fb f872 	bl	800dfb0 <rmw_get_implementation_identifier>
 8012ecc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012ed0:	f104 0014 	add.w	r0, r4, #20
 8012ed4:	bd38      	pop	{r3, r4, r5, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2000c5e0 	.word	0x2000c5e0

08012edc <rmw_destroy_guard_condition>:
 8012edc:	b508      	push	{r3, lr}
 8012ede:	4b08      	ldr	r3, [pc, #32]	@ (8012f00 <rmw_destroy_guard_condition+0x24>)
 8012ee0:	6819      	ldr	r1, [r3, #0]
 8012ee2:	b911      	cbnz	r1, 8012eea <rmw_destroy_guard_condition+0xe>
 8012ee4:	e00a      	b.n	8012efc <rmw_destroy_guard_condition+0x20>
 8012ee6:	6889      	ldr	r1, [r1, #8]
 8012ee8:	b141      	cbz	r1, 8012efc <rmw_destroy_guard_condition+0x20>
 8012eea:	68cb      	ldr	r3, [r1, #12]
 8012eec:	3314      	adds	r3, #20
 8012eee:	4298      	cmp	r0, r3
 8012ef0:	d1f9      	bne.n	8012ee6 <rmw_destroy_guard_condition+0xa>
 8012ef2:	4803      	ldr	r0, [pc, #12]	@ (8012f00 <rmw_destroy_guard_condition+0x24>)
 8012ef4:	f7ff ffca 	bl	8012e8c <put_memory>
 8012ef8:	2000      	movs	r0, #0
 8012efa:	bd08      	pop	{r3, pc}
 8012efc:	2001      	movs	r0, #1
 8012efe:	bd08      	pop	{r3, pc}
 8012f00:	2000c5e0 	.word	0x2000c5e0

08012f04 <create_topic>:
 8012f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f08:	4607      	mov	r7, r0
 8012f0a:	b084      	sub	sp, #16
 8012f0c:	4822      	ldr	r0, [pc, #136]	@ (8012f98 <create_topic+0x94>)
 8012f0e:	4689      	mov	r9, r1
 8012f10:	4690      	mov	r8, r2
 8012f12:	f7ff ffab 	bl	8012e6c <get_memory>
 8012f16:	4604      	mov	r4, r0
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	d038      	beq.n	8012f8e <create_topic+0x8a>
 8012f1c:	693e      	ldr	r6, [r7, #16]
 8012f1e:	68c4      	ldr	r4, [r0, #12]
 8012f20:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012fa0 <create_topic+0x9c>
 8012f24:	61a7      	str	r7, [r4, #24]
 8012f26:	f241 5596 	movw	r5, #5526	@ 0x1596
 8012f2a:	f8c4 8014 	str.w	r8, [r4, #20]
 8012f2e:	5b70      	ldrh	r0, [r6, r5]
 8012f30:	1c42      	adds	r2, r0, #1
 8012f32:	5372      	strh	r2, [r6, r5]
 8012f34:	2102      	movs	r1, #2
 8012f36:	f7fc fdd5 	bl	800fae4 <uxr_object_id>
 8012f3a:	4651      	mov	r1, sl
 8012f3c:	6120      	str	r0, [r4, #16]
 8012f3e:	223c      	movs	r2, #60	@ 0x3c
 8012f40:	4648      	mov	r0, r9
 8012f42:	f7fc fb7f 	bl	800f644 <generate_topic_name>
 8012f46:	b1f0      	cbz	r0, 8012f86 <create_topic+0x82>
 8012f48:	4d14      	ldr	r5, [pc, #80]	@ (8012f9c <create_topic+0x98>)
 8012f4a:	4640      	mov	r0, r8
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	2264      	movs	r2, #100	@ 0x64
 8012f50:	f7fc fb48 	bl	800f5e4 <generate_type_name>
 8012f54:	b1b8      	cbz	r0, 8012f86 <create_topic+0x82>
 8012f56:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 8012f5a:	2106      	movs	r1, #6
 8012f5c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012f60:	9501      	str	r5, [sp, #4]
 8012f62:	f8cd a000 	str.w	sl, [sp]
 8012f66:	9102      	str	r1, [sp, #8]
 8012f68:	6811      	ldr	r1, [r2, #0]
 8012f6a:	6922      	ldr	r2, [r4, #16]
 8012f6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f70:	f7fc fc1a 	bl	800f7a8 <uxr_buffer_create_topic_bin>
 8012f74:	4602      	mov	r2, r0
 8012f76:	6938      	ldr	r0, [r7, #16]
 8012f78:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012f7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012f80:	f7fc fafa 	bl	800f578 <run_xrce_session>
 8012f84:	b918      	cbnz	r0, 8012f8e <create_topic+0x8a>
 8012f86:	4620      	mov	r0, r4
 8012f88:	f7fc f9fe 	bl	800f388 <rmw_uxrce_fini_topic_memory>
 8012f8c:	2400      	movs	r4, #0
 8012f8e:	4620      	mov	r0, r4
 8012f90:	b004      	add	sp, #16
 8012f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f96:	bf00      	nop
 8012f98:	2000c5f0 	.word	0x2000c5f0
 8012f9c:	2000926c 	.word	0x2000926c
 8012fa0:	20009230 	.word	0x20009230

08012fa4 <destroy_topic>:
 8012fa4:	b538      	push	{r3, r4, r5, lr}
 8012fa6:	6985      	ldr	r5, [r0, #24]
 8012fa8:	b1d5      	cbz	r5, 8012fe0 <destroy_topic+0x3c>
 8012faa:	4604      	mov	r4, r0
 8012fac:	6928      	ldr	r0, [r5, #16]
 8012fae:	6922      	ldr	r2, [r4, #16]
 8012fb0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fb8:	6819      	ldr	r1, [r3, #0]
 8012fba:	f7fc fb77 	bl	800f6ac <uxr_buffer_delete_entity>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	6928      	ldr	r0, [r5, #16]
 8012fc2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012fc6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012fca:	f7fc fad5 	bl	800f578 <run_xrce_session>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	bf14      	ite	ne
 8012fd4:	2400      	movne	r4, #0
 8012fd6:	2402      	moveq	r4, #2
 8012fd8:	f7fc f9d6 	bl	800f388 <rmw_uxrce_fini_topic_memory>
 8012fdc:	4620      	mov	r0, r4
 8012fde:	bd38      	pop	{r3, r4, r5, pc}
 8012fe0:	2401      	movs	r4, #1
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	bd38      	pop	{r3, r4, r5, pc}
 8012fe6:	bf00      	nop

08012fe8 <rmw_uros_epoch_nanos>:
 8012fe8:	4b05      	ldr	r3, [pc, #20]	@ (8013000 <rmw_uros_epoch_nanos+0x18>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	b123      	cbz	r3, 8012ff8 <rmw_uros_epoch_nanos+0x10>
 8012fee:	68d8      	ldr	r0, [r3, #12]
 8012ff0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012ff4:	f7fc bfde 	b.w	800ffb4 <uxr_epoch_nanos>
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	2100      	movs	r1, #0
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop
 8013000:	2000c600 	.word	0x2000c600

08013004 <ucdr_serialize_endian_array_char>:
 8013004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013008:	4619      	mov	r1, r3
 801300a:	461e      	mov	r6, r3
 801300c:	4690      	mov	r8, r2
 801300e:	4604      	mov	r4, r0
 8013010:	f7f8 f800 	bl	800b014 <ucdr_check_buffer_available_for>
 8013014:	b9e0      	cbnz	r0, 8013050 <ucdr_serialize_endian_array_char+0x4c>
 8013016:	4637      	mov	r7, r6
 8013018:	e009      	b.n	801302e <ucdr_serialize_endian_array_char+0x2a>
 801301a:	68a0      	ldr	r0, [r4, #8]
 801301c:	f001 fb51 	bl	80146c2 <memcpy>
 8013020:	68a2      	ldr	r2, [r4, #8]
 8013022:	6923      	ldr	r3, [r4, #16]
 8013024:	442a      	add	r2, r5
 8013026:	442b      	add	r3, r5
 8013028:	1b7f      	subs	r7, r7, r5
 801302a:	60a2      	str	r2, [r4, #8]
 801302c:	6123      	str	r3, [r4, #16]
 801302e:	2201      	movs	r2, #1
 8013030:	4639      	mov	r1, r7
 8013032:	4620      	mov	r0, r4
 8013034:	f7f8 f874 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 8013038:	1bf1      	subs	r1, r6, r7
 801303a:	4441      	add	r1, r8
 801303c:	4605      	mov	r5, r0
 801303e:	4602      	mov	r2, r0
 8013040:	2800      	cmp	r0, #0
 8013042:	d1ea      	bne.n	801301a <ucdr_serialize_endian_array_char+0x16>
 8013044:	2301      	movs	r3, #1
 8013046:	7da0      	ldrb	r0, [r4, #22]
 8013048:	7563      	strb	r3, [r4, #21]
 801304a:	4058      	eors	r0, r3
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	4632      	mov	r2, r6
 8013052:	68a0      	ldr	r0, [r4, #8]
 8013054:	4641      	mov	r1, r8
 8013056:	f001 fb34 	bl	80146c2 <memcpy>
 801305a:	68a2      	ldr	r2, [r4, #8]
 801305c:	6923      	ldr	r3, [r4, #16]
 801305e:	4432      	add	r2, r6
 8013060:	4433      	add	r3, r6
 8013062:	60a2      	str	r2, [r4, #8]
 8013064:	6123      	str	r3, [r4, #16]
 8013066:	e7ed      	b.n	8013044 <ucdr_serialize_endian_array_char+0x40>

08013068 <ucdr_deserialize_endian_array_char>:
 8013068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801306c:	4619      	mov	r1, r3
 801306e:	461e      	mov	r6, r3
 8013070:	4690      	mov	r8, r2
 8013072:	4604      	mov	r4, r0
 8013074:	f7f7 ffce 	bl	800b014 <ucdr_check_buffer_available_for>
 8013078:	b9e0      	cbnz	r0, 80130b4 <ucdr_deserialize_endian_array_char+0x4c>
 801307a:	4637      	mov	r7, r6
 801307c:	e009      	b.n	8013092 <ucdr_deserialize_endian_array_char+0x2a>
 801307e:	68a1      	ldr	r1, [r4, #8]
 8013080:	f001 fb1f 	bl	80146c2 <memcpy>
 8013084:	68a2      	ldr	r2, [r4, #8]
 8013086:	6923      	ldr	r3, [r4, #16]
 8013088:	442a      	add	r2, r5
 801308a:	442b      	add	r3, r5
 801308c:	1b7f      	subs	r7, r7, r5
 801308e:	60a2      	str	r2, [r4, #8]
 8013090:	6123      	str	r3, [r4, #16]
 8013092:	2201      	movs	r2, #1
 8013094:	4639      	mov	r1, r7
 8013096:	4620      	mov	r0, r4
 8013098:	f7f8 f842 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 801309c:	4605      	mov	r5, r0
 801309e:	1bf0      	subs	r0, r6, r7
 80130a0:	4440      	add	r0, r8
 80130a2:	462a      	mov	r2, r5
 80130a4:	2d00      	cmp	r5, #0
 80130a6:	d1ea      	bne.n	801307e <ucdr_deserialize_endian_array_char+0x16>
 80130a8:	2301      	movs	r3, #1
 80130aa:	7da0      	ldrb	r0, [r4, #22]
 80130ac:	7563      	strb	r3, [r4, #21]
 80130ae:	4058      	eors	r0, r3
 80130b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b4:	4632      	mov	r2, r6
 80130b6:	68a1      	ldr	r1, [r4, #8]
 80130b8:	4640      	mov	r0, r8
 80130ba:	f001 fb02 	bl	80146c2 <memcpy>
 80130be:	68a2      	ldr	r2, [r4, #8]
 80130c0:	6923      	ldr	r3, [r4, #16]
 80130c2:	4432      	add	r2, r6
 80130c4:	4433      	add	r3, r6
 80130c6:	60a2      	str	r2, [r4, #8]
 80130c8:	6123      	str	r3, [r4, #16]
 80130ca:	e7ed      	b.n	80130a8 <ucdr_deserialize_endian_array_char+0x40>

080130cc <ucdr_serialize_array_uint8_t>:
 80130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	4688      	mov	r8, r1
 80130d2:	4611      	mov	r1, r2
 80130d4:	4616      	mov	r6, r2
 80130d6:	4604      	mov	r4, r0
 80130d8:	f7f7 ff9c 	bl	800b014 <ucdr_check_buffer_available_for>
 80130dc:	b9e0      	cbnz	r0, 8013118 <ucdr_serialize_array_uint8_t+0x4c>
 80130de:	4637      	mov	r7, r6
 80130e0:	e009      	b.n	80130f6 <ucdr_serialize_array_uint8_t+0x2a>
 80130e2:	68a0      	ldr	r0, [r4, #8]
 80130e4:	f001 faed 	bl	80146c2 <memcpy>
 80130e8:	68a2      	ldr	r2, [r4, #8]
 80130ea:	6923      	ldr	r3, [r4, #16]
 80130ec:	442a      	add	r2, r5
 80130ee:	442b      	add	r3, r5
 80130f0:	1b7f      	subs	r7, r7, r5
 80130f2:	60a2      	str	r2, [r4, #8]
 80130f4:	6123      	str	r3, [r4, #16]
 80130f6:	2201      	movs	r2, #1
 80130f8:	4639      	mov	r1, r7
 80130fa:	4620      	mov	r0, r4
 80130fc:	f7f8 f810 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 8013100:	1bf1      	subs	r1, r6, r7
 8013102:	4441      	add	r1, r8
 8013104:	4605      	mov	r5, r0
 8013106:	4602      	mov	r2, r0
 8013108:	2800      	cmp	r0, #0
 801310a:	d1ea      	bne.n	80130e2 <ucdr_serialize_array_uint8_t+0x16>
 801310c:	2301      	movs	r3, #1
 801310e:	7da0      	ldrb	r0, [r4, #22]
 8013110:	7563      	strb	r3, [r4, #21]
 8013112:	4058      	eors	r0, r3
 8013114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013118:	4632      	mov	r2, r6
 801311a:	68a0      	ldr	r0, [r4, #8]
 801311c:	4641      	mov	r1, r8
 801311e:	f001 fad0 	bl	80146c2 <memcpy>
 8013122:	68a3      	ldr	r3, [r4, #8]
 8013124:	6922      	ldr	r2, [r4, #16]
 8013126:	4433      	add	r3, r6
 8013128:	4432      	add	r2, r6
 801312a:	60a3      	str	r3, [r4, #8]
 801312c:	6122      	str	r2, [r4, #16]
 801312e:	e7ed      	b.n	801310c <ucdr_serialize_array_uint8_t+0x40>

08013130 <ucdr_serialize_endian_array_uint8_t>:
 8013130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013134:	4619      	mov	r1, r3
 8013136:	461e      	mov	r6, r3
 8013138:	4690      	mov	r8, r2
 801313a:	4604      	mov	r4, r0
 801313c:	f7f7 ff6a 	bl	800b014 <ucdr_check_buffer_available_for>
 8013140:	b9e0      	cbnz	r0, 801317c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013142:	4637      	mov	r7, r6
 8013144:	e009      	b.n	801315a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013146:	68a0      	ldr	r0, [r4, #8]
 8013148:	f001 fabb 	bl	80146c2 <memcpy>
 801314c:	68a2      	ldr	r2, [r4, #8]
 801314e:	6923      	ldr	r3, [r4, #16]
 8013150:	442a      	add	r2, r5
 8013152:	442b      	add	r3, r5
 8013154:	1b7f      	subs	r7, r7, r5
 8013156:	60a2      	str	r2, [r4, #8]
 8013158:	6123      	str	r3, [r4, #16]
 801315a:	2201      	movs	r2, #1
 801315c:	4639      	mov	r1, r7
 801315e:	4620      	mov	r0, r4
 8013160:	f7f7 ffde 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 8013164:	1bf1      	subs	r1, r6, r7
 8013166:	4441      	add	r1, r8
 8013168:	4605      	mov	r5, r0
 801316a:	4602      	mov	r2, r0
 801316c:	2800      	cmp	r0, #0
 801316e:	d1ea      	bne.n	8013146 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013170:	2301      	movs	r3, #1
 8013172:	7da0      	ldrb	r0, [r4, #22]
 8013174:	7563      	strb	r3, [r4, #21]
 8013176:	4058      	eors	r0, r3
 8013178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801317c:	4632      	mov	r2, r6
 801317e:	68a0      	ldr	r0, [r4, #8]
 8013180:	4641      	mov	r1, r8
 8013182:	f001 fa9e 	bl	80146c2 <memcpy>
 8013186:	68a2      	ldr	r2, [r4, #8]
 8013188:	6923      	ldr	r3, [r4, #16]
 801318a:	4432      	add	r2, r6
 801318c:	4433      	add	r3, r6
 801318e:	60a2      	str	r2, [r4, #8]
 8013190:	6123      	str	r3, [r4, #16]
 8013192:	e7ed      	b.n	8013170 <ucdr_serialize_endian_array_uint8_t+0x40>

08013194 <ucdr_deserialize_array_uint8_t>:
 8013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013198:	4688      	mov	r8, r1
 801319a:	4611      	mov	r1, r2
 801319c:	4616      	mov	r6, r2
 801319e:	4604      	mov	r4, r0
 80131a0:	f7f7 ff38 	bl	800b014 <ucdr_check_buffer_available_for>
 80131a4:	b9e0      	cbnz	r0, 80131e0 <ucdr_deserialize_array_uint8_t+0x4c>
 80131a6:	4637      	mov	r7, r6
 80131a8:	e009      	b.n	80131be <ucdr_deserialize_array_uint8_t+0x2a>
 80131aa:	68a1      	ldr	r1, [r4, #8]
 80131ac:	f001 fa89 	bl	80146c2 <memcpy>
 80131b0:	68a2      	ldr	r2, [r4, #8]
 80131b2:	6923      	ldr	r3, [r4, #16]
 80131b4:	442a      	add	r2, r5
 80131b6:	442b      	add	r3, r5
 80131b8:	1b7f      	subs	r7, r7, r5
 80131ba:	60a2      	str	r2, [r4, #8]
 80131bc:	6123      	str	r3, [r4, #16]
 80131be:	2201      	movs	r2, #1
 80131c0:	4639      	mov	r1, r7
 80131c2:	4620      	mov	r0, r4
 80131c4:	f7f7 ffac 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 80131c8:	4605      	mov	r5, r0
 80131ca:	1bf0      	subs	r0, r6, r7
 80131cc:	4440      	add	r0, r8
 80131ce:	462a      	mov	r2, r5
 80131d0:	2d00      	cmp	r5, #0
 80131d2:	d1ea      	bne.n	80131aa <ucdr_deserialize_array_uint8_t+0x16>
 80131d4:	2301      	movs	r3, #1
 80131d6:	7da0      	ldrb	r0, [r4, #22]
 80131d8:	7563      	strb	r3, [r4, #21]
 80131da:	4058      	eors	r0, r3
 80131dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e0:	4632      	mov	r2, r6
 80131e2:	68a1      	ldr	r1, [r4, #8]
 80131e4:	4640      	mov	r0, r8
 80131e6:	f001 fa6c 	bl	80146c2 <memcpy>
 80131ea:	68a3      	ldr	r3, [r4, #8]
 80131ec:	6922      	ldr	r2, [r4, #16]
 80131ee:	4433      	add	r3, r6
 80131f0:	4432      	add	r2, r6
 80131f2:	60a3      	str	r3, [r4, #8]
 80131f4:	6122      	str	r2, [r4, #16]
 80131f6:	e7ed      	b.n	80131d4 <ucdr_deserialize_array_uint8_t+0x40>

080131f8 <ucdr_deserialize_endian_array_uint8_t>:
 80131f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fc:	4619      	mov	r1, r3
 80131fe:	461e      	mov	r6, r3
 8013200:	4690      	mov	r8, r2
 8013202:	4604      	mov	r4, r0
 8013204:	f7f7 ff06 	bl	800b014 <ucdr_check_buffer_available_for>
 8013208:	b9e0      	cbnz	r0, 8013244 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801320a:	4637      	mov	r7, r6
 801320c:	e009      	b.n	8013222 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801320e:	68a1      	ldr	r1, [r4, #8]
 8013210:	f001 fa57 	bl	80146c2 <memcpy>
 8013214:	68a2      	ldr	r2, [r4, #8]
 8013216:	6923      	ldr	r3, [r4, #16]
 8013218:	442a      	add	r2, r5
 801321a:	442b      	add	r3, r5
 801321c:	1b7f      	subs	r7, r7, r5
 801321e:	60a2      	str	r2, [r4, #8]
 8013220:	6123      	str	r3, [r4, #16]
 8013222:	2201      	movs	r2, #1
 8013224:	4639      	mov	r1, r7
 8013226:	4620      	mov	r0, r4
 8013228:	f7f7 ff7a 	bl	800b120 <ucdr_check_final_buffer_behavior_array>
 801322c:	4605      	mov	r5, r0
 801322e:	1bf0      	subs	r0, r6, r7
 8013230:	4440      	add	r0, r8
 8013232:	462a      	mov	r2, r5
 8013234:	2d00      	cmp	r5, #0
 8013236:	d1ea      	bne.n	801320e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013238:	2301      	movs	r3, #1
 801323a:	7da0      	ldrb	r0, [r4, #22]
 801323c:	7563      	strb	r3, [r4, #21]
 801323e:	4058      	eors	r0, r3
 8013240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013244:	4632      	mov	r2, r6
 8013246:	68a1      	ldr	r1, [r4, #8]
 8013248:	4640      	mov	r0, r8
 801324a:	f001 fa3a 	bl	80146c2 <memcpy>
 801324e:	68a2      	ldr	r2, [r4, #8]
 8013250:	6923      	ldr	r3, [r4, #16]
 8013252:	4432      	add	r2, r6
 8013254:	4433      	add	r3, r6
 8013256:	60a2      	str	r2, [r4, #8]
 8013258:	6123      	str	r3, [r4, #16]
 801325a:	e7ed      	b.n	8013238 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801325c <ucdr_serialize_sequence_char>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	460e      	mov	r6, r1
 8013260:	4615      	mov	r5, r2
 8013262:	7d01      	ldrb	r1, [r0, #20]
 8013264:	4604      	mov	r4, r0
 8013266:	f7f7 f8d7 	bl	800a418 <ucdr_serialize_endian_uint32_t>
 801326a:	b90d      	cbnz	r5, 8013270 <ucdr_serialize_sequence_char+0x14>
 801326c:	2001      	movs	r0, #1
 801326e:	bd70      	pop	{r4, r5, r6, pc}
 8013270:	7d21      	ldrb	r1, [r4, #20]
 8013272:	462b      	mov	r3, r5
 8013274:	4632      	mov	r2, r6
 8013276:	4620      	mov	r0, r4
 8013278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801327c:	f7ff bec2 	b.w	8013004 <ucdr_serialize_endian_array_char>

08013280 <ucdr_deserialize_sequence_char>:
 8013280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013284:	461d      	mov	r5, r3
 8013286:	4616      	mov	r6, r2
 8013288:	460f      	mov	r7, r1
 801328a:	461a      	mov	r2, r3
 801328c:	7d01      	ldrb	r1, [r0, #20]
 801328e:	4604      	mov	r4, r0
 8013290:	f7f7 f9ea 	bl	800a668 <ucdr_deserialize_endian_uint32_t>
 8013294:	682b      	ldr	r3, [r5, #0]
 8013296:	429e      	cmp	r6, r3
 8013298:	bf3c      	itt	cc
 801329a:	2201      	movcc	r2, #1
 801329c:	75a2      	strbcc	r2, [r4, #22]
 801329e:	b913      	cbnz	r3, 80132a6 <ucdr_deserialize_sequence_char+0x26>
 80132a0:	2001      	movs	r0, #1
 80132a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a6:	7d21      	ldrb	r1, [r4, #20]
 80132a8:	463a      	mov	r2, r7
 80132aa:	4620      	mov	r0, r4
 80132ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132b0:	f7ff beda 	b.w	8013068 <ucdr_deserialize_endian_array_char>

080132b4 <ucdr_serialize_sequence_uint8_t>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	460e      	mov	r6, r1
 80132b8:	4615      	mov	r5, r2
 80132ba:	7d01      	ldrb	r1, [r0, #20]
 80132bc:	4604      	mov	r4, r0
 80132be:	f7f7 f8ab 	bl	800a418 <ucdr_serialize_endian_uint32_t>
 80132c2:	b90d      	cbnz	r5, 80132c8 <ucdr_serialize_sequence_uint8_t+0x14>
 80132c4:	2001      	movs	r0, #1
 80132c6:	bd70      	pop	{r4, r5, r6, pc}
 80132c8:	7d21      	ldrb	r1, [r4, #20]
 80132ca:	462b      	mov	r3, r5
 80132cc:	4632      	mov	r2, r6
 80132ce:	4620      	mov	r0, r4
 80132d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132d4:	f7ff bf2c 	b.w	8013130 <ucdr_serialize_endian_array_uint8_t>

080132d8 <ucdr_deserialize_sequence_uint8_t>:
 80132d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	461d      	mov	r5, r3
 80132de:	4616      	mov	r6, r2
 80132e0:	460f      	mov	r7, r1
 80132e2:	461a      	mov	r2, r3
 80132e4:	7d01      	ldrb	r1, [r0, #20]
 80132e6:	4604      	mov	r4, r0
 80132e8:	f7f7 f9be 	bl	800a668 <ucdr_deserialize_endian_uint32_t>
 80132ec:	682b      	ldr	r3, [r5, #0]
 80132ee:	429e      	cmp	r6, r3
 80132f0:	bf3c      	itt	cc
 80132f2:	2201      	movcc	r2, #1
 80132f4:	75a2      	strbcc	r2, [r4, #22]
 80132f6:	b913      	cbnz	r3, 80132fe <ucdr_deserialize_sequence_uint8_t+0x26>
 80132f8:	2001      	movs	r0, #1
 80132fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fe:	7d21      	ldrb	r1, [r4, #20]
 8013300:	463a      	mov	r2, r7
 8013302:	4620      	mov	r0, r4
 8013304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013308:	f7ff bf76 	b.w	80131f8 <ucdr_deserialize_endian_array_uint8_t>

0801330c <ucdr_serialize_string>:
 801330c:	b510      	push	{r4, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	4604      	mov	r4, r0
 8013312:	4608      	mov	r0, r1
 8013314:	9101      	str	r1, [sp, #4]
 8013316:	f7ec ff6d 	bl	80001f4 <strlen>
 801331a:	9901      	ldr	r1, [sp, #4]
 801331c:	4602      	mov	r2, r0
 801331e:	3201      	adds	r2, #1
 8013320:	4620      	mov	r0, r4
 8013322:	b002      	add	sp, #8
 8013324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013328:	f7ff bf98 	b.w	801325c <ucdr_serialize_sequence_char>

0801332c <ucdr_deserialize_string>:
 801332c:	b500      	push	{lr}
 801332e:	b083      	sub	sp, #12
 8013330:	ab01      	add	r3, sp, #4
 8013332:	f7ff ffa5 	bl	8013280 <ucdr_deserialize_sequence_char>
 8013336:	b003      	add	sp, #12
 8013338:	f85d fb04 	ldr.w	pc, [sp], #4

0801333c <uxr_init_input_best_effort_stream>:
 801333c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013340:	8003      	strh	r3, [r0, #0]
 8013342:	4770      	bx	lr

08013344 <uxr_reset_input_best_effort_stream>:
 8013344:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013348:	8003      	strh	r3, [r0, #0]
 801334a:	4770      	bx	lr

0801334c <uxr_receive_best_effort_message>:
 801334c:	b538      	push	{r3, r4, r5, lr}
 801334e:	4604      	mov	r4, r0
 8013350:	8800      	ldrh	r0, [r0, #0]
 8013352:	460d      	mov	r5, r1
 8013354:	f000 fd0c 	bl	8013d70 <uxr_seq_num_cmp>
 8013358:	4603      	mov	r3, r0
 801335a:	2b00      	cmp	r3, #0
 801335c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013360:	bfb8      	it	lt
 8013362:	8025      	strhlt	r5, [r4, #0]
 8013364:	bd38      	pop	{r3, r4, r5, pc}
 8013366:	bf00      	nop

08013368 <on_full_input_buffer>:
 8013368:	b570      	push	{r4, r5, r6, lr}
 801336a:	6802      	ldr	r2, [r0, #0]
 801336c:	460d      	mov	r5, r1
 801336e:	6809      	ldr	r1, [r1, #0]
 8013370:	686c      	ldr	r4, [r5, #4]
 8013372:	1a53      	subs	r3, r2, r1
 8013374:	4606      	mov	r6, r0
 8013376:	8928      	ldrh	r0, [r5, #8]
 8013378:	fbb4 f4f0 	udiv	r4, r4, r0
 801337c:	fbb3 f3f4 	udiv	r3, r3, r4
 8013380:	3301      	adds	r3, #1
 8013382:	b29b      	uxth	r3, r3
 8013384:	fbb3 f2f0 	udiv	r2, r3, r0
 8013388:	fb00 3312 	mls	r3, r0, r2, r3
 801338c:	b29b      	uxth	r3, r3
 801338e:	fb04 f403 	mul.w	r4, r4, r3
 8013392:	1d23      	adds	r3, r4, #4
 8013394:	440b      	add	r3, r1
 8013396:	7d28      	ldrb	r0, [r5, #20]
 8013398:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801339c:	b110      	cbz	r0, 80133a4 <on_full_input_buffer+0x3c>
 801339e:	2000      	movs	r0, #0
 80133a0:	f843 0c04 	str.w	r0, [r3, #-4]
 80133a4:	2a03      	cmp	r2, #3
 80133a6:	d801      	bhi.n	80133ac <on_full_input_buffer+0x44>
 80133a8:	2001      	movs	r0, #1
 80133aa:	bd70      	pop	{r4, r5, r6, pc}
 80133ac:	3408      	adds	r4, #8
 80133ae:	6933      	ldr	r3, [r6, #16]
 80133b0:	4421      	add	r1, r4
 80133b2:	4630      	mov	r0, r6
 80133b4:	3a04      	subs	r2, #4
 80133b6:	f7f7 fe77 	bl	800b0a8 <ucdr_init_buffer_origin>
 80133ba:	4630      	mov	r0, r6
 80133bc:	4902      	ldr	r1, [pc, #8]	@ (80133c8 <on_full_input_buffer+0x60>)
 80133be:	462a      	mov	r2, r5
 80133c0:	f7f7 fe50 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 80133c4:	2000      	movs	r0, #0
 80133c6:	bd70      	pop	{r4, r5, r6, pc}
 80133c8:	08013369 	.word	0x08013369

080133cc <uxr_init_input_reliable_stream>:
 80133cc:	b470      	push	{r4, r5, r6}
 80133ce:	9c03      	ldr	r4, [sp, #12]
 80133d0:	6001      	str	r1, [r0, #0]
 80133d2:	2600      	movs	r6, #0
 80133d4:	8103      	strh	r3, [r0, #8]
 80133d6:	6042      	str	r2, [r0, #4]
 80133d8:	6104      	str	r4, [r0, #16]
 80133da:	7506      	strb	r6, [r0, #20]
 80133dc:	b1ab      	cbz	r3, 801340a <uxr_init_input_reliable_stream+0x3e>
 80133de:	600e      	str	r6, [r1, #0]
 80133e0:	8901      	ldrh	r1, [r0, #8]
 80133e2:	2901      	cmp	r1, #1
 80133e4:	d911      	bls.n	801340a <uxr_init_input_reliable_stream+0x3e>
 80133e6:	2201      	movs	r2, #1
 80133e8:	e9d0 5400 	ldrd	r5, r4, [r0]
 80133ec:	fbb2 f3f1 	udiv	r3, r2, r1
 80133f0:	fb01 2313 	mls	r3, r1, r3, r2
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	fbb4 f1f1 	udiv	r1, r4, r1
 80133fa:	fb03 f301 	mul.w	r3, r3, r1
 80133fe:	3201      	adds	r2, #1
 8013400:	50ee      	str	r6, [r5, r3]
 8013402:	8901      	ldrh	r1, [r0, #8]
 8013404:	b292      	uxth	r2, r2
 8013406:	4291      	cmp	r1, r2
 8013408:	d8ee      	bhi.n	80133e8 <uxr_init_input_reliable_stream+0x1c>
 801340a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801340e:	bc70      	pop	{r4, r5, r6}
 8013410:	60c3      	str	r3, [r0, #12]
 8013412:	4770      	bx	lr

08013414 <uxr_reset_input_reliable_stream>:
 8013414:	8902      	ldrh	r2, [r0, #8]
 8013416:	b1ca      	cbz	r2, 801344c <uxr_reset_input_reliable_stream+0x38>
 8013418:	b470      	push	{r4, r5, r6}
 801341a:	2400      	movs	r4, #0
 801341c:	4621      	mov	r1, r4
 801341e:	4626      	mov	r6, r4
 8013420:	fbb1 f3f2 	udiv	r3, r1, r2
 8013424:	fb02 1313 	mls	r3, r2, r3, r1
 8013428:	e9d0 5100 	ldrd	r5, r1, [r0]
 801342c:	b29b      	uxth	r3, r3
 801342e:	fbb1 f2f2 	udiv	r2, r1, r2
 8013432:	fb03 f302 	mul.w	r3, r3, r2
 8013436:	3401      	adds	r4, #1
 8013438:	50ee      	str	r6, [r5, r3]
 801343a:	8902      	ldrh	r2, [r0, #8]
 801343c:	b2a1      	uxth	r1, r4
 801343e:	428a      	cmp	r2, r1
 8013440:	d8ee      	bhi.n	8013420 <uxr_reset_input_reliable_stream+0xc>
 8013442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013446:	bc70      	pop	{r4, r5, r6}
 8013448:	60c3      	str	r3, [r0, #12]
 801344a:	4770      	bx	lr
 801344c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013450:	60c3      	str	r3, [r0, #12]
 8013452:	4770      	bx	lr

08013454 <uxr_receive_reliable_message>:
 8013454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013458:	4604      	mov	r4, r0
 801345a:	460d      	mov	r5, r1
 801345c:	8901      	ldrh	r1, [r0, #8]
 801345e:	8980      	ldrh	r0, [r0, #12]
 8013460:	4690      	mov	r8, r2
 8013462:	461f      	mov	r7, r3
 8013464:	f000 fc7c 	bl	8013d60 <uxr_seq_num_add>
 8013468:	4629      	mov	r1, r5
 801346a:	4606      	mov	r6, r0
 801346c:	89a0      	ldrh	r0, [r4, #12]
 801346e:	f000 fc7f 	bl	8013d70 <uxr_seq_num_cmp>
 8013472:	2800      	cmp	r0, #0
 8013474:	db0a      	blt.n	801348c <uxr_receive_reliable_message+0x38>
 8013476:	2600      	movs	r6, #0
 8013478:	89e0      	ldrh	r0, [r4, #14]
 801347a:	4629      	mov	r1, r5
 801347c:	f000 fc78 	bl	8013d70 <uxr_seq_num_cmp>
 8013480:	2800      	cmp	r0, #0
 8013482:	bfb8      	it	lt
 8013484:	81e5      	strhlt	r5, [r4, #14]
 8013486:	4630      	mov	r0, r6
 8013488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801348c:	4630      	mov	r0, r6
 801348e:	4629      	mov	r1, r5
 8013490:	f000 fc6e 	bl	8013d70 <uxr_seq_num_cmp>
 8013494:	2800      	cmp	r0, #0
 8013496:	dbee      	blt.n	8013476 <uxr_receive_reliable_message+0x22>
 8013498:	6923      	ldr	r3, [r4, #16]
 801349a:	4640      	mov	r0, r8
 801349c:	4798      	blx	r3
 801349e:	2101      	movs	r1, #1
 80134a0:	4681      	mov	r9, r0
 80134a2:	89a0      	ldrh	r0, [r4, #12]
 80134a4:	f000 fc5c 	bl	8013d60 <uxr_seq_num_add>
 80134a8:	f1b9 0f00 	cmp.w	r9, #0
 80134ac:	d101      	bne.n	80134b2 <uxr_receive_reliable_message+0x5e>
 80134ae:	4285      	cmp	r5, r0
 80134b0:	d049      	beq.n	8013546 <uxr_receive_reliable_message+0xf2>
 80134b2:	8921      	ldrh	r1, [r4, #8]
 80134b4:	fbb5 f3f1 	udiv	r3, r5, r1
 80134b8:	fb01 5313 	mls	r3, r1, r3, r5
 80134bc:	b29b      	uxth	r3, r3
 80134be:	6862      	ldr	r2, [r4, #4]
 80134c0:	6820      	ldr	r0, [r4, #0]
 80134c2:	fbb2 f2f1 	udiv	r2, r2, r1
 80134c6:	fb03 f302 	mul.w	r3, r3, r2
 80134ca:	3304      	adds	r3, #4
 80134cc:	4418      	add	r0, r3
 80134ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d1cf      	bne.n	8013476 <uxr_receive_reliable_message+0x22>
 80134d6:	4641      	mov	r1, r8
 80134d8:	463a      	mov	r2, r7
 80134da:	f001 f8f2 	bl	80146c2 <memcpy>
 80134de:	8921      	ldrh	r1, [r4, #8]
 80134e0:	fbb5 f3f1 	udiv	r3, r5, r1
 80134e4:	fb01 5313 	mls	r3, r1, r3, r5
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	6862      	ldr	r2, [r4, #4]
 80134ec:	fbb2 f2f1 	udiv	r2, r2, r1
 80134f0:	6821      	ldr	r1, [r4, #0]
 80134f2:	fb03 f302 	mul.w	r3, r3, r2
 80134f6:	2201      	movs	r2, #1
 80134f8:	50cf      	str	r7, [r1, r3]
 80134fa:	9b08      	ldr	r3, [sp, #32]
 80134fc:	701a      	strb	r2, [r3, #0]
 80134fe:	f1b9 0f00 	cmp.w	r9, #0
 8013502:	d0b8      	beq.n	8013476 <uxr_receive_reliable_message+0x22>
 8013504:	89a6      	ldrh	r6, [r4, #12]
 8013506:	e001      	b.n	801350c <uxr_receive_reliable_message+0xb8>
 8013508:	2801      	cmp	r0, #1
 801350a:	d1b4      	bne.n	8013476 <uxr_receive_reliable_message+0x22>
 801350c:	4630      	mov	r0, r6
 801350e:	2101      	movs	r1, #1
 8013510:	f000 fc26 	bl	8013d60 <uxr_seq_num_add>
 8013514:	8921      	ldrh	r1, [r4, #8]
 8013516:	fbb0 f3f1 	udiv	r3, r0, r1
 801351a:	fb01 0313 	mls	r3, r1, r3, r0
 801351e:	b29b      	uxth	r3, r3
 8013520:	6862      	ldr	r2, [r4, #4]
 8013522:	fbb2 f2f1 	udiv	r2, r2, r1
 8013526:	4606      	mov	r6, r0
 8013528:	fb03 f302 	mul.w	r3, r3, r2
 801352c:	6820      	ldr	r0, [r4, #0]
 801352e:	3304      	adds	r3, #4
 8013530:	4418      	add	r0, r3
 8013532:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d09d      	beq.n	8013476 <uxr_receive_reliable_message+0x22>
 801353a:	6923      	ldr	r3, [r4, #16]
 801353c:	4798      	blx	r3
 801353e:	2802      	cmp	r0, #2
 8013540:	d1e2      	bne.n	8013508 <uxr_receive_reliable_message+0xb4>
 8013542:	2601      	movs	r6, #1
 8013544:	e798      	b.n	8013478 <uxr_receive_reliable_message+0x24>
 8013546:	9b08      	ldr	r3, [sp, #32]
 8013548:	81a5      	strh	r5, [r4, #12]
 801354a:	2601      	movs	r6, #1
 801354c:	f883 9000 	strb.w	r9, [r3]
 8013550:	e792      	b.n	8013478 <uxr_receive_reliable_message+0x24>
 8013552:	bf00      	nop

08013554 <uxr_next_input_reliable_buffer_available>:
 8013554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013558:	4604      	mov	r4, r0
 801355a:	460e      	mov	r6, r1
 801355c:	8980      	ldrh	r0, [r0, #12]
 801355e:	2101      	movs	r1, #1
 8013560:	4617      	mov	r7, r2
 8013562:	f000 fbfd 	bl	8013d60 <uxr_seq_num_add>
 8013566:	8921      	ldrh	r1, [r4, #8]
 8013568:	fbb0 f3f1 	udiv	r3, r0, r1
 801356c:	fb01 0313 	mls	r3, r1, r3, r0
 8013570:	b29b      	uxth	r3, r3
 8013572:	6862      	ldr	r2, [r4, #4]
 8013574:	fbb2 f2f1 	udiv	r2, r2, r1
 8013578:	fb03 f302 	mul.w	r3, r3, r2
 801357c:	6822      	ldr	r2, [r4, #0]
 801357e:	3304      	adds	r3, #4
 8013580:	eb02 0803 	add.w	r8, r2, r3
 8013584:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8013588:	f1b9 0f00 	cmp.w	r9, #0
 801358c:	d025      	beq.n	80135da <uxr_next_input_reliable_buffer_available+0x86>
 801358e:	6923      	ldr	r3, [r4, #16]
 8013590:	4605      	mov	r5, r0
 8013592:	4640      	mov	r0, r8
 8013594:	4798      	blx	r3
 8013596:	4682      	mov	sl, r0
 8013598:	b310      	cbz	r0, 80135e0 <uxr_next_input_reliable_buffer_available+0x8c>
 801359a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801359e:	e005      	b.n	80135ac <uxr_next_input_reliable_buffer_available+0x58>
 80135a0:	6923      	ldr	r3, [r4, #16]
 80135a2:	4798      	blx	r3
 80135a4:	2802      	cmp	r0, #2
 80135a6:	d032      	beq.n	801360e <uxr_next_input_reliable_buffer_available+0xba>
 80135a8:	2801      	cmp	r0, #1
 80135aa:	d116      	bne.n	80135da <uxr_next_input_reliable_buffer_available+0x86>
 80135ac:	4650      	mov	r0, sl
 80135ae:	2101      	movs	r1, #1
 80135b0:	f000 fbd6 	bl	8013d60 <uxr_seq_num_add>
 80135b4:	8921      	ldrh	r1, [r4, #8]
 80135b6:	fbb0 f3f1 	udiv	r3, r0, r1
 80135ba:	fb01 0313 	mls	r3, r1, r3, r0
 80135be:	b29b      	uxth	r3, r3
 80135c0:	6862      	ldr	r2, [r4, #4]
 80135c2:	fbb2 f2f1 	udiv	r2, r2, r1
 80135c6:	4682      	mov	sl, r0
 80135c8:	fb03 f302 	mul.w	r3, r3, r2
 80135cc:	6820      	ldr	r0, [r4, #0]
 80135ce:	3304      	adds	r3, #4
 80135d0:	4418      	add	r0, r3
 80135d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d1e2      	bne.n	80135a0 <uxr_next_input_reliable_buffer_available+0x4c>
 80135da:	2000      	movs	r0, #0
 80135dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135e0:	464a      	mov	r2, r9
 80135e2:	4641      	mov	r1, r8
 80135e4:	4630      	mov	r0, r6
 80135e6:	f7f7 fd67 	bl	800b0b8 <ucdr_init_buffer>
 80135ea:	8921      	ldrh	r1, [r4, #8]
 80135ec:	fbb5 f3f1 	udiv	r3, r5, r1
 80135f0:	fb01 5313 	mls	r3, r1, r3, r5
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	6862      	ldr	r2, [r4, #4]
 80135f8:	fbb2 f2f1 	udiv	r2, r2, r1
 80135fc:	6821      	ldr	r1, [r4, #0]
 80135fe:	fb03 f302 	mul.w	r3, r3, r2
 8013602:	2001      	movs	r0, #1
 8013604:	f841 a003 	str.w	sl, [r1, r3]
 8013608:	81a5      	strh	r5, [r4, #12]
 801360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801360e:	8922      	ldrh	r2, [r4, #8]
 8013610:	fbb5 f0f2 	udiv	r0, r5, r2
 8013614:	fb02 5510 	mls	r5, r2, r0, r5
 8013618:	b2ad      	uxth	r5, r5
 801361a:	6863      	ldr	r3, [r4, #4]
 801361c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013620:	fb05 f503 	mul.w	r5, r5, r3
 8013624:	6823      	ldr	r3, [r4, #0]
 8013626:	2000      	movs	r0, #0
 8013628:	5158      	str	r0, [r3, r5]
 801362a:	eba9 0207 	sub.w	r2, r9, r7
 801362e:	eb08 0107 	add.w	r1, r8, r7
 8013632:	4630      	mov	r0, r6
 8013634:	f7f7 fd40 	bl	800b0b8 <ucdr_init_buffer>
 8013638:	4630      	mov	r0, r6
 801363a:	4904      	ldr	r1, [pc, #16]	@ (801364c <uxr_next_input_reliable_buffer_available+0xf8>)
 801363c:	4622      	mov	r2, r4
 801363e:	f7f7 fd11 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 8013642:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013646:	2001      	movs	r0, #1
 8013648:	e7c8      	b.n	80135dc <uxr_next_input_reliable_buffer_available+0x88>
 801364a:	bf00      	nop
 801364c:	08013369 	.word	0x08013369

08013650 <uxr_process_heartbeat>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	4611      	mov	r1, r2
 8013654:	4604      	mov	r4, r0
 8013656:	89c0      	ldrh	r0, [r0, #14]
 8013658:	4615      	mov	r5, r2
 801365a:	f000 fb89 	bl	8013d70 <uxr_seq_num_cmp>
 801365e:	2800      	cmp	r0, #0
 8013660:	bfb8      	it	lt
 8013662:	81e5      	strhlt	r5, [r4, #14]
 8013664:	bd38      	pop	{r3, r4, r5, pc}
 8013666:	bf00      	nop

08013668 <uxr_compute_acknack>:
 8013668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801366c:	8903      	ldrh	r3, [r0, #8]
 801366e:	8986      	ldrh	r6, [r0, #12]
 8013670:	4604      	mov	r4, r0
 8013672:	460d      	mov	r5, r1
 8013674:	b1d3      	cbz	r3, 80136ac <uxr_compute_acknack+0x44>
 8013676:	4630      	mov	r0, r6
 8013678:	2701      	movs	r7, #1
 801367a:	e003      	b.n	8013684 <uxr_compute_acknack+0x1c>
 801367c:	4567      	cmp	r7, ip
 801367e:	d215      	bcs.n	80136ac <uxr_compute_acknack+0x44>
 8013680:	89a0      	ldrh	r0, [r4, #12]
 8013682:	3701      	adds	r7, #1
 8013684:	b2b9      	uxth	r1, r7
 8013686:	f000 fb6b 	bl	8013d60 <uxr_seq_num_add>
 801368a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801368e:	fbb0 f2fc 	udiv	r2, r0, ip
 8013692:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013696:	fb0c 0212 	mls	r2, ip, r2, r0
 801369a:	b292      	uxth	r2, r2
 801369c:	fbb3 f3fc 	udiv	r3, r3, ip
 80136a0:	fb02 1303 	mla	r3, r2, r3, r1
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d1e8      	bne.n	801367c <uxr_compute_acknack+0x14>
 80136aa:	4606      	mov	r6, r0
 80136ac:	802e      	strh	r6, [r5, #0]
 80136ae:	4630      	mov	r0, r6
 80136b0:	2101      	movs	r1, #1
 80136b2:	89e6      	ldrh	r6, [r4, #14]
 80136b4:	f000 fb58 	bl	8013d68 <uxr_seq_num_sub>
 80136b8:	4601      	mov	r1, r0
 80136ba:	4630      	mov	r0, r6
 80136bc:	f000 fb54 	bl	8013d68 <uxr_seq_num_sub>
 80136c0:	4606      	mov	r6, r0
 80136c2:	b318      	cbz	r0, 801370c <uxr_compute_acknack+0xa4>
 80136c4:	f04f 0900 	mov.w	r9, #0
 80136c8:	464f      	mov	r7, r9
 80136ca:	f04f 0801 	mov.w	r8, #1
 80136ce:	fa1f f189 	uxth.w	r1, r9
 80136d2:	8828      	ldrh	r0, [r5, #0]
 80136d4:	f000 fb44 	bl	8013d60 <uxr_seq_num_add>
 80136d8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80136dc:	6822      	ldr	r2, [r4, #0]
 80136de:	fbb0 f1fc 	udiv	r1, r0, ip
 80136e2:	fb01 011c 	mls	r1, r1, ip, r0
 80136e6:	b289      	uxth	r1, r1
 80136e8:	6863      	ldr	r3, [r4, #4]
 80136ea:	fbb3 f3fc 	udiv	r3, r3, ip
 80136ee:	fb01 2303 	mla	r3, r1, r3, r2
 80136f2:	fa08 f209 	lsl.w	r2, r8, r9
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	f109 0901 	add.w	r9, r9, #1
 80136fc:	b90b      	cbnz	r3, 8013702 <uxr_compute_acknack+0x9a>
 80136fe:	4317      	orrs	r7, r2
 8013700:	b2bf      	uxth	r7, r7
 8013702:	454e      	cmp	r6, r9
 8013704:	d1e3      	bne.n	80136ce <uxr_compute_acknack+0x66>
 8013706:	4638      	mov	r0, r7
 8013708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370c:	4607      	mov	r7, r0
 801370e:	4638      	mov	r0, r7
 8013710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013714 <uxr_init_output_best_effort_stream>:
 8013714:	b410      	push	{r4}
 8013716:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801371a:	81c4      	strh	r4, [r0, #14]
 801371c:	e9c0 1300 	strd	r1, r3, [r0]
 8013720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013724:	7303      	strb	r3, [r0, #12]
 8013726:	6082      	str	r2, [r0, #8]
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop

0801372c <uxr_reset_output_best_effort_stream>:
 801372c:	7b02      	ldrb	r2, [r0, #12]
 801372e:	6042      	str	r2, [r0, #4]
 8013730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013734:	81c3      	strh	r3, [r0, #14]
 8013736:	4770      	bx	lr

08013738 <uxr_prepare_best_effort_buffer_to_write>:
 8013738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801373a:	4604      	mov	r4, r0
 801373c:	b083      	sub	sp, #12
 801373e:	6840      	ldr	r0, [r0, #4]
 8013740:	460d      	mov	r5, r1
 8013742:	4616      	mov	r6, r2
 8013744:	f7fe f9c0 	bl	8011ac8 <uxr_submessage_padding>
 8013748:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801374c:	4410      	add	r0, r2
 801374e:	1942      	adds	r2, r0, r5
 8013750:	4293      	cmp	r3, r2
 8013752:	bf2c      	ite	cs
 8013754:	2701      	movcs	r7, #1
 8013756:	2700      	movcc	r7, #0
 8013758:	d202      	bcs.n	8013760 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801375a:	4638      	mov	r0, r7
 801375c:	b003      	add	sp, #12
 801375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013760:	9000      	str	r0, [sp, #0]
 8013762:	6821      	ldr	r1, [r4, #0]
 8013764:	4630      	mov	r0, r6
 8013766:	2300      	movs	r3, #0
 8013768:	f7f7 fc94 	bl	800b094 <ucdr_init_buffer_origin_offset>
 801376c:	6861      	ldr	r1, [r4, #4]
 801376e:	4638      	mov	r0, r7
 8013770:	4429      	add	r1, r5
 8013772:	6061      	str	r1, [r4, #4]
 8013774:	b003      	add	sp, #12
 8013776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013778 <uxr_prepare_best_effort_buffer_to_send>:
 8013778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801377c:	6845      	ldr	r5, [r0, #4]
 801377e:	4604      	mov	r4, r0
 8013780:	7b00      	ldrb	r0, [r0, #12]
 8013782:	4285      	cmp	r5, r0
 8013784:	bf8c      	ite	hi
 8013786:	2701      	movhi	r7, #1
 8013788:	2700      	movls	r7, #0
 801378a:	d802      	bhi.n	8013792 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 801378c:	4638      	mov	r0, r7
 801378e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013792:	4688      	mov	r8, r1
 8013794:	89e0      	ldrh	r0, [r4, #14]
 8013796:	2101      	movs	r1, #1
 8013798:	4615      	mov	r5, r2
 801379a:	461e      	mov	r6, r3
 801379c:	f000 fae0 	bl	8013d60 <uxr_seq_num_add>
 80137a0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80137a4:	81e0      	strh	r0, [r4, #14]
 80137a6:	8030      	strh	r0, [r6, #0]
 80137a8:	f8c8 2000 	str.w	r2, [r8]
 80137ac:	602b      	str	r3, [r5, #0]
 80137ae:	7b23      	ldrb	r3, [r4, #12]
 80137b0:	6063      	str	r3, [r4, #4]
 80137b2:	4638      	mov	r0, r7
 80137b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137b8 <on_full_output_buffer>:
 80137b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ba:	6802      	ldr	r2, [r0, #0]
 80137bc:	460d      	mov	r5, r1
 80137be:	6809      	ldr	r1, [r1, #0]
 80137c0:	892f      	ldrh	r7, [r5, #8]
 80137c2:	686c      	ldr	r4, [r5, #4]
 80137c4:	fbb4 f4f7 	udiv	r4, r4, r7
 80137c8:	1a53      	subs	r3, r2, r1
 80137ca:	fbb3 f3f4 	udiv	r3, r3, r4
 80137ce:	3301      	adds	r3, #1
 80137d0:	b29b      	uxth	r3, r3
 80137d2:	fbb3 f2f7 	udiv	r2, r3, r7
 80137d6:	fb07 3312 	mls	r3, r7, r2, r3
 80137da:	b29b      	uxth	r3, r3
 80137dc:	fb04 f403 	mul.w	r4, r4, r3
 80137e0:	7b2f      	ldrb	r7, [r5, #12]
 80137e2:	590a      	ldr	r2, [r1, r4]
 80137e4:	6903      	ldr	r3, [r0, #16]
 80137e6:	443c      	add	r4, r7
 80137e8:	3408      	adds	r4, #8
 80137ea:	1bd2      	subs	r2, r2, r7
 80137ec:	4606      	mov	r6, r0
 80137ee:	4421      	add	r1, r4
 80137f0:	3a04      	subs	r2, #4
 80137f2:	f7f7 fc59 	bl	800b0a8 <ucdr_init_buffer_origin>
 80137f6:	4630      	mov	r0, r6
 80137f8:	4902      	ldr	r1, [pc, #8]	@ (8013804 <on_full_output_buffer+0x4c>)
 80137fa:	462a      	mov	r2, r5
 80137fc:	f7f7 fc32 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 8013800:	2000      	movs	r0, #0
 8013802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013804:	080137b9 	.word	0x080137b9

08013808 <uxr_init_output_reliable_stream>:
 8013808:	b430      	push	{r4, r5}
 801380a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801380e:	6001      	str	r1, [r0, #0]
 8013810:	8103      	strh	r3, [r0, #8]
 8013812:	6042      	str	r2, [r0, #4]
 8013814:	7304      	strb	r4, [r0, #12]
 8013816:	b1b3      	cbz	r3, 8013846 <uxr_init_output_reliable_stream+0x3e>
 8013818:	600c      	str	r4, [r1, #0]
 801381a:	8901      	ldrh	r1, [r0, #8]
 801381c:	2901      	cmp	r1, #1
 801381e:	d912      	bls.n	8013846 <uxr_init_output_reliable_stream+0x3e>
 8013820:	2201      	movs	r2, #1
 8013822:	e9d0 5400 	ldrd	r5, r4, [r0]
 8013826:	fbb2 f3f1 	udiv	r3, r2, r1
 801382a:	fb01 2313 	mls	r3, r1, r3, r2
 801382e:	b29b      	uxth	r3, r3
 8013830:	fbb4 f1f1 	udiv	r1, r4, r1
 8013834:	fb03 f301 	mul.w	r3, r3, r1
 8013838:	7b01      	ldrb	r1, [r0, #12]
 801383a:	50e9      	str	r1, [r5, r3]
 801383c:	3201      	adds	r2, #1
 801383e:	8901      	ldrh	r1, [r0, #8]
 8013840:	b292      	uxth	r2, r2
 8013842:	4291      	cmp	r1, r2
 8013844:	d8ed      	bhi.n	8013822 <uxr_init_output_reliable_stream+0x1a>
 8013846:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801384a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801384e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013852:	4b05      	ldr	r3, [pc, #20]	@ (8013868 <uxr_init_output_reliable_stream+0x60>)
 8013854:	f8c0 300e 	str.w	r3, [r0, #14]
 8013858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801385c:	2300      	movs	r3, #0
 801385e:	bc30      	pop	{r4, r5}
 8013860:	8242      	strh	r2, [r0, #18]
 8013862:	8403      	strh	r3, [r0, #32]
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	ffff0000 	.word	0xffff0000

0801386c <uxr_reset_output_reliable_stream>:
 801386c:	8902      	ldrh	r2, [r0, #8]
 801386e:	b430      	push	{r4, r5}
 8013870:	b19a      	cbz	r2, 801389a <uxr_reset_output_reliable_stream+0x2e>
 8013872:	2400      	movs	r4, #0
 8013874:	4621      	mov	r1, r4
 8013876:	fbb1 f3f2 	udiv	r3, r1, r2
 801387a:	fb02 1313 	mls	r3, r2, r3, r1
 801387e:	e9d0 5100 	ldrd	r5, r1, [r0]
 8013882:	b29b      	uxth	r3, r3
 8013884:	fbb1 f2f2 	udiv	r2, r1, r2
 8013888:	fb03 f302 	mul.w	r3, r3, r2
 801388c:	7b02      	ldrb	r2, [r0, #12]
 801388e:	50ea      	str	r2, [r5, r3]
 8013890:	3401      	adds	r4, #1
 8013892:	8902      	ldrh	r2, [r0, #8]
 8013894:	b2a1      	uxth	r1, r4
 8013896:	428a      	cmp	r2, r1
 8013898:	d8ed      	bhi.n	8013876 <uxr_reset_output_reliable_stream+0xa>
 801389a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801389e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80138a2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80138a6:	4b05      	ldr	r3, [pc, #20]	@ (80138bc <uxr_reset_output_reliable_stream+0x50>)
 80138a8:	f8c0 300e 	str.w	r3, [r0, #14]
 80138ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80138b0:	2300      	movs	r3, #0
 80138b2:	bc30      	pop	{r4, r5}
 80138b4:	8242      	strh	r2, [r0, #18]
 80138b6:	8403      	strh	r3, [r0, #32]
 80138b8:	4770      	bx	lr
 80138ba:	bf00      	nop
 80138bc:	ffff0000 	.word	0xffff0000

080138c0 <uxr_prepare_reliable_buffer_to_write>:
 80138c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c4:	4604      	mov	r4, r0
 80138c6:	89c6      	ldrh	r6, [r0, #14]
 80138c8:	8900      	ldrh	r0, [r0, #8]
 80138ca:	f8d4 c000 	ldr.w	ip, [r4]
 80138ce:	fbb6 f3f0 	udiv	r3, r6, r0
 80138d2:	fb00 6313 	mls	r3, r0, r3, r6
 80138d6:	b091      	sub	sp, #68	@ 0x44
 80138d8:	b29b      	uxth	r3, r3
 80138da:	6865      	ldr	r5, [r4, #4]
 80138dc:	fbb5 f5f0 	udiv	r5, r5, r0
 80138e0:	fb05 c303 	mla	r3, r5, r3, ip
 80138e4:	9204      	str	r2, [sp, #16]
 80138e6:	1d1a      	adds	r2, r3, #4
 80138e8:	f8d3 8000 	ldr.w	r8, [r3]
 80138ec:	f894 900c 	ldrb.w	r9, [r4, #12]
 80138f0:	9203      	str	r2, [sp, #12]
 80138f2:	468b      	mov	fp, r1
 80138f4:	1f2f      	subs	r7, r5, #4
 80138f6:	2800      	cmp	r0, #0
 80138f8:	f000 814e 	beq.w	8013b98 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 80138fc:	f04f 0e00 	mov.w	lr, #0
 8013900:	46f2      	mov	sl, lr
 8013902:	4672      	mov	r2, lr
 8013904:	fbb2 f3f0 	udiv	r3, r2, r0
 8013908:	fb00 2313 	mls	r3, r0, r3, r2
 801390c:	b29b      	uxth	r3, r3
 801390e:	fb05 c303 	mla	r3, r5, r3, ip
 8013912:	f10e 0e01 	add.w	lr, lr, #1
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	454b      	cmp	r3, r9
 801391a:	bf08      	it	eq
 801391c:	f10a 0a01 	addeq.w	sl, sl, #1
 8013920:	fa1f f28e 	uxth.w	r2, lr
 8013924:	bf08      	it	eq
 8013926:	fa1f fa8a 	uxtheq.w	sl, sl
 801392a:	4282      	cmp	r2, r0
 801392c:	d3ea      	bcc.n	8013904 <uxr_prepare_reliable_buffer_to_write+0x44>
 801392e:	4640      	mov	r0, r8
 8013930:	2104      	movs	r1, #4
 8013932:	f8cd a014 	str.w	sl, [sp, #20]
 8013936:	f7f7 fbc3 	bl	800b0c0 <ucdr_alignment>
 801393a:	4480      	add	r8, r0
 801393c:	eb08 020b 	add.w	r2, r8, fp
 8013940:	42ba      	cmp	r2, r7
 8013942:	f240 80cf 	bls.w	8013ae4 <uxr_prepare_reliable_buffer_to_write+0x224>
 8013946:	7b22      	ldrb	r2, [r4, #12]
 8013948:	445a      	add	r2, fp
 801394a:	42ba      	cmp	r2, r7
 801394c:	f240 80b7 	bls.w	8013abe <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8013950:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8013954:	33fc      	adds	r3, #252	@ 0xfc
 8013956:	b2ba      	uxth	r2, r7
 8013958:	4413      	add	r3, r2
 801395a:	b29b      	uxth	r3, r3
 801395c:	fb0a f903 	mul.w	r9, sl, r3
 8013960:	45d9      	cmp	r9, fp
 8013962:	9305      	str	r3, [sp, #20]
 8013964:	9306      	str	r3, [sp, #24]
 8013966:	f0c0 80b9 	bcc.w	8013adc <uxr_prepare_reliable_buffer_to_write+0x21c>
 801396a:	f108 0304 	add.w	r3, r8, #4
 801396e:	42bb      	cmp	r3, r7
 8013970:	f080 80dd 	bcs.w	8013b2e <uxr_prepare_reliable_buffer_to_write+0x26e>
 8013974:	f1a2 0904 	sub.w	r9, r2, #4
 8013978:	eba9 0908 	sub.w	r9, r9, r8
 801397c:	9b05      	ldr	r3, [sp, #20]
 801397e:	fa1f f989 	uxth.w	r9, r9
 8013982:	ebab 0b09 	sub.w	fp, fp, r9
 8013986:	fbbb f2f3 	udiv	r2, fp, r3
 801398a:	fb03 b312 	mls	r3, r3, r2, fp
 801398e:	2b00      	cmp	r3, #0
 8013990:	f000 80ca 	beq.w	8013b28 <uxr_prepare_reliable_buffer_to_write+0x268>
 8013994:	3201      	adds	r2, #1
 8013996:	b292      	uxth	r2, r2
 8013998:	4611      	mov	r1, r2
 801399a:	9306      	str	r3, [sp, #24]
 801399c:	4551      	cmp	r1, sl
 801399e:	f200 809d 	bhi.w	8013adc <uxr_prepare_reliable_buffer_to_write+0x21c>
 80139a2:	f10d 0b20 	add.w	fp, sp, #32
 80139a6:	2900      	cmp	r1, #0
 80139a8:	d042      	beq.n	8013a30 <uxr_prepare_reliable_buffer_to_write+0x170>
 80139aa:	f8cd 801c 	str.w	r8, [sp, #28]
 80139ae:	f04f 0a00 	mov.w	sl, #0
 80139b2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80139b6:	9505      	str	r5, [sp, #20]
 80139b8:	f10d 0b20 	add.w	fp, sp, #32
 80139bc:	460d      	mov	r5, r1
 80139be:	e000      	b.n	80139c2 <uxr_prepare_reliable_buffer_to_write+0x102>
 80139c0:	46c1      	mov	r9, r8
 80139c2:	8920      	ldrh	r0, [r4, #8]
 80139c4:	fbb6 f1f0 	udiv	r1, r6, r0
 80139c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80139cc:	fb00 6111 	mls	r1, r0, r1, r6
 80139d0:	b289      	uxth	r1, r1
 80139d2:	fbb2 f2f0 	udiv	r2, r2, r0
 80139d6:	fb01 f102 	mul.w	r1, r1, r2
 80139da:	3104      	adds	r1, #4
 80139dc:	4419      	add	r1, r3
 80139de:	463a      	mov	r2, r7
 80139e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	4658      	mov	r0, fp
 80139e8:	2300      	movs	r3, #0
 80139ea:	f7f7 fb53 	bl	800b094 <ucdr_init_buffer_origin_offset>
 80139ee:	464a      	mov	r2, r9
 80139f0:	2300      	movs	r3, #0
 80139f2:	210d      	movs	r1, #13
 80139f4:	4658      	mov	r0, fp
 80139f6:	f7fe f827 	bl	8011a48 <uxr_buffer_submessage_header>
 80139fa:	8920      	ldrh	r0, [r4, #8]
 80139fc:	fbb6 f3f0 	udiv	r3, r6, r0
 8013a00:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013a04:	fb00 6313 	mls	r3, r0, r3, r6
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	fbb1 f1f0 	udiv	r1, r1, r0
 8013a0e:	fb03 f301 	mul.w	r3, r3, r1
 8013a12:	4630      	mov	r0, r6
 8013a14:	50d7      	str	r7, [r2, r3]
 8013a16:	2101      	movs	r1, #1
 8013a18:	f000 f9a2 	bl	8013d60 <uxr_seq_num_add>
 8013a1c:	f10a 0a01 	add.w	sl, sl, #1
 8013a20:	fa1f f38a 	uxth.w	r3, sl
 8013a24:	429d      	cmp	r5, r3
 8013a26:	4606      	mov	r6, r0
 8013a28:	d8ca      	bhi.n	80139c0 <uxr_prepare_reliable_buffer_to_write+0x100>
 8013a2a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013a2e:	9d05      	ldr	r5, [sp, #20]
 8013a30:	8921      	ldrh	r1, [r4, #8]
 8013a32:	fbb6 f3f1 	udiv	r3, r6, r1
 8013a36:	fb01 6313 	mls	r3, r1, r3, r6
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	6862      	ldr	r2, [r4, #4]
 8013a3e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013a42:	6821      	ldr	r1, [r4, #0]
 8013a44:	fb03 f302 	mul.w	r3, r3, r2
 8013a48:	3304      	adds	r3, #4
 8013a4a:	4419      	add	r1, r3
 8013a4c:	463a      	mov	r2, r7
 8013a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a52:	9300      	str	r3, [sp, #0]
 8013a54:	4658      	mov	r0, fp
 8013a56:	2300      	movs	r3, #0
 8013a58:	f7f7 fb1c 	bl	800b094 <ucdr_init_buffer_origin_offset>
 8013a5c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8013a60:	4658      	mov	r0, fp
 8013a62:	fa1f f289 	uxth.w	r2, r9
 8013a66:	2302      	movs	r3, #2
 8013a68:	210d      	movs	r1, #13
 8013a6a:	f7fd ffed 	bl	8011a48 <uxr_buffer_submessage_header>
 8013a6e:	8921      	ldrh	r1, [r4, #8]
 8013a70:	7b27      	ldrb	r7, [r4, #12]
 8013a72:	fbb6 f0f1 	udiv	r0, r6, r1
 8013a76:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013a7a:	fb01 6010 	mls	r0, r1, r0, r6
 8013a7e:	b280      	uxth	r0, r0
 8013a80:	fbb2 f2f1 	udiv	r2, r2, r1
 8013a84:	3704      	adds	r7, #4
 8013a86:	fb00 f002 	mul.w	r0, r0, r2
 8013a8a:	f1a5 0208 	sub.w	r2, r5, #8
 8013a8e:	464d      	mov	r5, r9
 8013a90:	443d      	add	r5, r7
 8013a92:	9f03      	ldr	r7, [sp, #12]
 8013a94:	501d      	str	r5, [r3, r0]
 8013a96:	f108 0104 	add.w	r1, r8, #4
 8013a9a:	9d04      	ldr	r5, [sp, #16]
 8013a9c:	440f      	add	r7, r1
 8013a9e:	eba2 0208 	sub.w	r2, r2, r8
 8013aa2:	4639      	mov	r1, r7
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f7f7 fb07 	bl	800b0b8 <ucdr_init_buffer>
 8013aaa:	4628      	mov	r0, r5
 8013aac:	493b      	ldr	r1, [pc, #236]	@ (8013b9c <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 8013aae:	4622      	mov	r2, r4
 8013ab0:	f7f7 fad8 	bl	800b064 <ucdr_set_on_full_buffer_callback>
 8013ab4:	2001      	movs	r0, #1
 8013ab6:	81e6      	strh	r6, [r4, #14]
 8013ab8:	b011      	add	sp, #68	@ 0x44
 8013aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013abe:	2101      	movs	r1, #1
 8013ac0:	89e0      	ldrh	r0, [r4, #14]
 8013ac2:	f000 f94d 	bl	8013d60 <uxr_seq_num_add>
 8013ac6:	8921      	ldrh	r1, [r4, #8]
 8013ac8:	4605      	mov	r5, r0
 8013aca:	8a60      	ldrh	r0, [r4, #18]
 8013acc:	f000 f948 	bl	8013d60 <uxr_seq_num_add>
 8013ad0:	4601      	mov	r1, r0
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	f000 f94c 	bl	8013d70 <uxr_seq_num_cmp>
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	dd42      	ble.n	8013b62 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 8013adc:	2000      	movs	r0, #0
 8013ade:	b011      	add	sp, #68	@ 0x44
 8013ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae4:	8921      	ldrh	r1, [r4, #8]
 8013ae6:	8a60      	ldrh	r0, [r4, #18]
 8013ae8:	9205      	str	r2, [sp, #20]
 8013aea:	f000 f939 	bl	8013d60 <uxr_seq_num_add>
 8013aee:	4601      	mov	r1, r0
 8013af0:	4630      	mov	r0, r6
 8013af2:	f000 f93d 	bl	8013d70 <uxr_seq_num_cmp>
 8013af6:	2800      	cmp	r0, #0
 8013af8:	9a05      	ldr	r2, [sp, #20]
 8013afa:	dcef      	bgt.n	8013adc <uxr_prepare_reliable_buffer_to_write+0x21c>
 8013afc:	8920      	ldrh	r0, [r4, #8]
 8013afe:	fbb6 f3f0 	udiv	r3, r6, r0
 8013b02:	e9d4 4100 	ldrd	r4, r1, [r4]
 8013b06:	fb00 6313 	mls	r3, r0, r3, r6
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	fbb1 f1f0 	udiv	r1, r1, r0
 8013b10:	fb03 f301 	mul.w	r3, r3, r1
 8013b14:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8013b18:	50e2      	str	r2, [r4, r3]
 8013b1a:	f8cd 8000 	str.w	r8, [sp]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	f7f7 fab8 	bl	800b094 <ucdr_init_buffer_origin_offset>
 8013b24:	2001      	movs	r0, #1
 8013b26:	e7da      	b.n	8013ade <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013b28:	b293      	uxth	r3, r2
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	e736      	b.n	801399c <uxr_prepare_reliable_buffer_to_write+0xdc>
 8013b2e:	4630      	mov	r0, r6
 8013b30:	2101      	movs	r1, #1
 8013b32:	9207      	str	r2, [sp, #28]
 8013b34:	f000 f914 	bl	8013d60 <uxr_seq_num_add>
 8013b38:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013b3c:	fbb0 f1fc 	udiv	r1, r0, ip
 8013b40:	fb0c 0111 	mls	r1, ip, r1, r0
 8013b44:	b289      	uxth	r1, r1
 8013b46:	6863      	ldr	r3, [r4, #4]
 8013b48:	fbb3 f3fc 	udiv	r3, r3, ip
 8013b4c:	fb01 f103 	mul.w	r1, r1, r3
 8013b50:	6823      	ldr	r3, [r4, #0]
 8013b52:	9a07      	ldr	r2, [sp, #28]
 8013b54:	3104      	adds	r1, #4
 8013b56:	440b      	add	r3, r1
 8013b58:	4606      	mov	r6, r0
 8013b5a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8013b5e:	9303      	str	r3, [sp, #12]
 8013b60:	e708      	b.n	8013974 <uxr_prepare_reliable_buffer_to_write+0xb4>
 8013b62:	8920      	ldrh	r0, [r4, #8]
 8013b64:	fbb5 f3f0 	udiv	r3, r5, r0
 8013b68:	fb00 5313 	mls	r3, r0, r3, r5
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	6862      	ldr	r2, [r4, #4]
 8013b70:	6821      	ldr	r1, [r4, #0]
 8013b72:	fbb2 f0f0 	udiv	r0, r2, r0
 8013b76:	fb03 f300 	mul.w	r3, r3, r0
 8013b7a:	7b22      	ldrb	r2, [r4, #12]
 8013b7c:	9804      	ldr	r0, [sp, #16]
 8013b7e:	3304      	adds	r3, #4
 8013b80:	4419      	add	r1, r3
 8013b82:	445a      	add	r2, fp
 8013b84:	f841 2c04 	str.w	r2, [r1, #-4]
 8013b88:	7b23      	ldrb	r3, [r4, #12]
 8013b8a:	9300      	str	r3, [sp, #0]
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	f7f7 fa81 	bl	800b094 <ucdr_init_buffer_origin_offset>
 8013b92:	81e5      	strh	r5, [r4, #14]
 8013b94:	2001      	movs	r0, #1
 8013b96:	e7a2      	b.n	8013ade <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013b98:	4682      	mov	sl, r0
 8013b9a:	e6c8      	b.n	801392e <uxr_prepare_reliable_buffer_to_write+0x6e>
 8013b9c:	080137b9 	.word	0x080137b9

08013ba0 <uxr_prepare_next_reliable_buffer_to_send>:
 8013ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	4688      	mov	r8, r1
 8013ba8:	8a00      	ldrh	r0, [r0, #16]
 8013baa:	2101      	movs	r1, #1
 8013bac:	4617      	mov	r7, r2
 8013bae:	461e      	mov	r6, r3
 8013bb0:	f000 f8d6 	bl	8013d60 <uxr_seq_num_add>
 8013bb4:	8030      	strh	r0, [r6, #0]
 8013bb6:	892a      	ldrh	r2, [r5, #8]
 8013bb8:	fbb0 f3f2 	udiv	r3, r0, r2
 8013bbc:	fb02 0413 	mls	r4, r2, r3, r0
 8013bc0:	b2a4      	uxth	r4, r4
 8013bc2:	686b      	ldr	r3, [r5, #4]
 8013bc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8013bc8:	682b      	ldr	r3, [r5, #0]
 8013bca:	89e9      	ldrh	r1, [r5, #14]
 8013bcc:	fb04 f402 	mul.w	r4, r4, r2
 8013bd0:	3404      	adds	r4, #4
 8013bd2:	4423      	add	r3, r4
 8013bd4:	f8c8 3000 	str.w	r3, [r8]
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	441c      	add	r4, r3
 8013bdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013be0:	603b      	str	r3, [r7, #0]
 8013be2:	f000 f8c5 	bl	8013d70 <uxr_seq_num_cmp>
 8013be6:	2800      	cmp	r0, #0
 8013be8:	dd02      	ble.n	8013bf0 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8013bea:	2000      	movs	r0, #0
 8013bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf0:	683a      	ldr	r2, [r7, #0]
 8013bf2:	7b2b      	ldrb	r3, [r5, #12]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d9f8      	bls.n	8013bea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013bf8:	8a69      	ldrh	r1, [r5, #18]
 8013bfa:	8a28      	ldrh	r0, [r5, #16]
 8013bfc:	f000 f8b4 	bl	8013d68 <uxr_seq_num_sub>
 8013c00:	892b      	ldrh	r3, [r5, #8]
 8013c02:	4283      	cmp	r3, r0
 8013c04:	d0f1      	beq.n	8013bea <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013c06:	8830      	ldrh	r0, [r6, #0]
 8013c08:	89eb      	ldrh	r3, [r5, #14]
 8013c0a:	8228      	strh	r0, [r5, #16]
 8013c0c:	4298      	cmp	r0, r3
 8013c0e:	d002      	beq.n	8013c16 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8013c10:	2001      	movs	r0, #1
 8013c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c16:	2101      	movs	r1, #1
 8013c18:	f000 f8a2 	bl	8013d60 <uxr_seq_num_add>
 8013c1c:	81e8      	strh	r0, [r5, #14]
 8013c1e:	2001      	movs	r0, #1
 8013c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c24 <uxr_update_output_stream_heartbeat_timestamp>:
 8013c24:	b5d0      	push	{r4, r6, r7, lr}
 8013c26:	8a01      	ldrh	r1, [r0, #16]
 8013c28:	4604      	mov	r4, r0
 8013c2a:	8a40      	ldrh	r0, [r0, #18]
 8013c2c:	4616      	mov	r6, r2
 8013c2e:	461f      	mov	r7, r3
 8013c30:	f000 f89e 	bl	8013d70 <uxr_seq_num_cmp>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	db07      	blt.n	8013c48 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013c3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013c40:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013c44:	2000      	movs	r0, #0
 8013c46:	bdd0      	pop	{r4, r6, r7, pc}
 8013c48:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013c4c:	b948      	cbnz	r0, 8013c62 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8013c4e:	2301      	movs	r3, #1
 8013c50:	f884 3020 	strb.w	r3, [r4, #32]
 8013c54:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 8013c58:	f147 0200 	adc.w	r2, r7, #0
 8013c5c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8013c60:	bdd0      	pop	{r4, r6, r7, pc}
 8013c62:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013c66:	4296      	cmp	r6, r2
 8013c68:	eb77 0303 	sbcs.w	r3, r7, r3
 8013c6c:	bfa5      	ittet	ge
 8013c6e:	3001      	addge	r0, #1
 8013c70:	f884 0020 	strbge.w	r0, [r4, #32]
 8013c74:	2000      	movlt	r0, #0
 8013c76:	2001      	movge	r0, #1
 8013c78:	e7ec      	b.n	8013c54 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8013c7a:	bf00      	nop

08013c7c <uxr_begin_output_nack_buffer_it>:
 8013c7c:	8a40      	ldrh	r0, [r0, #18]
 8013c7e:	4770      	bx	lr

08013c80 <uxr_next_reliable_nack_buffer_to_send>:
 8013c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c84:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 8013c88:	f1b9 0f00 	cmp.w	r9, #0
 8013c8c:	d011      	beq.n	8013cb2 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8013c8e:	4605      	mov	r5, r0
 8013c90:	8818      	ldrh	r0, [r3, #0]
 8013c92:	460f      	mov	r7, r1
 8013c94:	4690      	mov	r8, r2
 8013c96:	461e      	mov	r6, r3
 8013c98:	2101      	movs	r1, #1
 8013c9a:	f000 f861 	bl	8013d60 <uxr_seq_num_add>
 8013c9e:	8030      	strh	r0, [r6, #0]
 8013ca0:	8a29      	ldrh	r1, [r5, #16]
 8013ca2:	f000 f865 	bl	8013d70 <uxr_seq_num_cmp>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	dd06      	ble.n	8013cb8 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8013caa:	f04f 0900 	mov.w	r9, #0
 8013cae:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 8013cb2:	4648      	mov	r0, r9
 8013cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cb8:	892a      	ldrh	r2, [r5, #8]
 8013cba:	8830      	ldrh	r0, [r6, #0]
 8013cbc:	fbb0 f4f2 	udiv	r4, r0, r2
 8013cc0:	fb02 0414 	mls	r4, r2, r4, r0
 8013cc4:	b2a4      	uxth	r4, r4
 8013cc6:	686b      	ldr	r3, [r5, #4]
 8013cc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8013ccc:	682b      	ldr	r3, [r5, #0]
 8013cce:	fb04 f402 	mul.w	r4, r4, r2
 8013cd2:	3404      	adds	r4, #4
 8013cd4:	4423      	add	r3, r4
 8013cd6:	603b      	str	r3, [r7, #0]
 8013cd8:	682b      	ldr	r3, [r5, #0]
 8013cda:	441c      	add	r4, r3
 8013cdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013ce0:	f8c8 3000 	str.w	r3, [r8]
 8013ce4:	7b2a      	ldrb	r2, [r5, #12]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d0d6      	beq.n	8013c98 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8013cea:	4648      	mov	r0, r9
 8013cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013cf0 <uxr_process_acknack>:
 8013cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	460e      	mov	r6, r1
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	2101      	movs	r1, #1
 8013cfa:	f000 f835 	bl	8013d68 <uxr_seq_num_sub>
 8013cfe:	8a61      	ldrh	r1, [r4, #18]
 8013d00:	f000 f832 	bl	8013d68 <uxr_seq_num_sub>
 8013d04:	b1c0      	cbz	r0, 8013d38 <uxr_process_acknack+0x48>
 8013d06:	4605      	mov	r5, r0
 8013d08:	2700      	movs	r7, #0
 8013d0a:	2101      	movs	r1, #1
 8013d0c:	8a60      	ldrh	r0, [r4, #18]
 8013d0e:	f000 f827 	bl	8013d60 <uxr_seq_num_add>
 8013d12:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013d16:	fbb0 f3fc 	udiv	r3, r0, ip
 8013d1a:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013d1e:	fb0c 0313 	mls	r3, ip, r3, r0
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	fbb1 f1fc 	udiv	r1, r1, ip
 8013d28:	3701      	adds	r7, #1
 8013d2a:	fb03 f301 	mul.w	r3, r3, r1
 8013d2e:	42bd      	cmp	r5, r7
 8013d30:	7b21      	ldrb	r1, [r4, #12]
 8013d32:	8260      	strh	r0, [r4, #18]
 8013d34:	50d1      	str	r1, [r2, r3]
 8013d36:	d1e8      	bne.n	8013d0a <uxr_process_acknack+0x1a>
 8013d38:	3e00      	subs	r6, #0
 8013d3a:	f04f 0300 	mov.w	r3, #0
 8013d3e:	bf18      	it	ne
 8013d40:	2601      	movne	r6, #1
 8013d42:	f884 3020 	strb.w	r3, [r4, #32]
 8013d46:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8013d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013d4c <uxr_is_output_up_to_date>:
 8013d4c:	8a01      	ldrh	r1, [r0, #16]
 8013d4e:	8a40      	ldrh	r0, [r0, #18]
 8013d50:	b508      	push	{r3, lr}
 8013d52:	f000 f80d 	bl	8013d70 <uxr_seq_num_cmp>
 8013d56:	fab0 f080 	clz	r0, r0
 8013d5a:	0940      	lsrs	r0, r0, #5
 8013d5c:	bd08      	pop	{r3, pc}
 8013d5e:	bf00      	nop

08013d60 <uxr_seq_num_add>:
 8013d60:	4408      	add	r0, r1
 8013d62:	b280      	uxth	r0, r0
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop

08013d68 <uxr_seq_num_sub>:
 8013d68:	1a40      	subs	r0, r0, r1
 8013d6a:	b280      	uxth	r0, r0
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop

08013d70 <uxr_seq_num_cmp>:
 8013d70:	4288      	cmp	r0, r1
 8013d72:	d011      	beq.n	8013d98 <uxr_seq_num_cmp+0x28>
 8013d74:	d309      	bcc.n	8013d8a <uxr_seq_num_cmp+0x1a>
 8013d76:	4288      	cmp	r0, r1
 8013d78:	d910      	bls.n	8013d9c <uxr_seq_num_cmp+0x2c>
 8013d7a:	1a40      	subs	r0, r0, r1
 8013d7c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8013d80:	bfd4      	ite	le
 8013d82:	2001      	movle	r0, #1
 8013d84:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8013d88:	4770      	bx	lr
 8013d8a:	1a0b      	subs	r3, r1, r0
 8013d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013d90:	daf1      	bge.n	8013d76 <uxr_seq_num_cmp+0x6>
 8013d92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d96:	4770      	bx	lr
 8013d98:	2000      	movs	r0, #0
 8013d9a:	4770      	bx	lr
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	4770      	bx	lr

08013da0 <calloc>:
 8013da0:	4b02      	ldr	r3, [pc, #8]	@ (8013dac <calloc+0xc>)
 8013da2:	460a      	mov	r2, r1
 8013da4:	4601      	mov	r1, r0
 8013da6:	6818      	ldr	r0, [r3, #0]
 8013da8:	f000 b802 	b.w	8013db0 <_calloc_r>
 8013dac:	20000134 	.word	0x20000134

08013db0 <_calloc_r>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	fba1 5402 	umull	r5, r4, r1, r2
 8013db6:	b93c      	cbnz	r4, 8013dc8 <_calloc_r+0x18>
 8013db8:	4629      	mov	r1, r5
 8013dba:	f000 f887 	bl	8013ecc <_malloc_r>
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	b928      	cbnz	r0, 8013dce <_calloc_r+0x1e>
 8013dc2:	2600      	movs	r6, #0
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	bd70      	pop	{r4, r5, r6, pc}
 8013dc8:	220c      	movs	r2, #12
 8013dca:	6002      	str	r2, [r0, #0]
 8013dcc:	e7f9      	b.n	8013dc2 <_calloc_r+0x12>
 8013dce:	462a      	mov	r2, r5
 8013dd0:	4621      	mov	r1, r4
 8013dd2:	f000 fbad 	bl	8014530 <memset>
 8013dd6:	e7f5      	b.n	8013dc4 <_calloc_r+0x14>

08013dd8 <getenv>:
 8013dd8:	b507      	push	{r0, r1, r2, lr}
 8013dda:	4b04      	ldr	r3, [pc, #16]	@ (8013dec <getenv+0x14>)
 8013ddc:	4601      	mov	r1, r0
 8013dde:	aa01      	add	r2, sp, #4
 8013de0:	6818      	ldr	r0, [r3, #0]
 8013de2:	f000 f805 	bl	8013df0 <_findenv_r>
 8013de6:	b003      	add	sp, #12
 8013de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dec:	20000134 	.word	0x20000134

08013df0 <_findenv_r>:
 8013df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8013e64 <_findenv_r+0x74>
 8013df8:	4606      	mov	r6, r0
 8013dfa:	4689      	mov	r9, r1
 8013dfc:	4617      	mov	r7, r2
 8013dfe:	f000 fc8d 	bl	801471c <__env_lock>
 8013e02:	f8da 4000 	ldr.w	r4, [sl]
 8013e06:	b134      	cbz	r4, 8013e16 <_findenv_r+0x26>
 8013e08:	464b      	mov	r3, r9
 8013e0a:	4698      	mov	r8, r3
 8013e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e10:	b13a      	cbz	r2, 8013e22 <_findenv_r+0x32>
 8013e12:	2a3d      	cmp	r2, #61	@ 0x3d
 8013e14:	d1f9      	bne.n	8013e0a <_findenv_r+0x1a>
 8013e16:	4630      	mov	r0, r6
 8013e18:	f000 fc86 	bl	8014728 <__env_unlock>
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e22:	eba8 0809 	sub.w	r8, r8, r9
 8013e26:	46a3      	mov	fp, r4
 8013e28:	f854 0b04 	ldr.w	r0, [r4], #4
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d0f2      	beq.n	8013e16 <_findenv_r+0x26>
 8013e30:	4642      	mov	r2, r8
 8013e32:	4649      	mov	r1, r9
 8013e34:	f000 fb91 	bl	801455a <strncmp>
 8013e38:	2800      	cmp	r0, #0
 8013e3a:	d1f4      	bne.n	8013e26 <_findenv_r+0x36>
 8013e3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013e40:	eb03 0508 	add.w	r5, r3, r8
 8013e44:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013e48:	2b3d      	cmp	r3, #61	@ 0x3d
 8013e4a:	d1ec      	bne.n	8013e26 <_findenv_r+0x36>
 8013e4c:	f8da 3000 	ldr.w	r3, [sl]
 8013e50:	ebab 0303 	sub.w	r3, fp, r3
 8013e54:	109b      	asrs	r3, r3, #2
 8013e56:	4630      	mov	r0, r6
 8013e58:	603b      	str	r3, [r7, #0]
 8013e5a:	f000 fc65 	bl	8014728 <__env_unlock>
 8013e5e:	1c68      	adds	r0, r5, #1
 8013e60:	e7dd      	b.n	8013e1e <_findenv_r+0x2e>
 8013e62:	bf00      	nop
 8013e64:	20000094 	.word	0x20000094

08013e68 <malloc>:
 8013e68:	4b02      	ldr	r3, [pc, #8]	@ (8013e74 <malloc+0xc>)
 8013e6a:	4601      	mov	r1, r0
 8013e6c:	6818      	ldr	r0, [r3, #0]
 8013e6e:	f000 b82d 	b.w	8013ecc <_malloc_r>
 8013e72:	bf00      	nop
 8013e74:	20000134 	.word	0x20000134

08013e78 <free>:
 8013e78:	4b02      	ldr	r3, [pc, #8]	@ (8013e84 <free+0xc>)
 8013e7a:	4601      	mov	r1, r0
 8013e7c:	6818      	ldr	r0, [r3, #0]
 8013e7e:	f000 bc59 	b.w	8014734 <_free_r>
 8013e82:	bf00      	nop
 8013e84:	20000134 	.word	0x20000134

08013e88 <sbrk_aligned>:
 8013e88:	b570      	push	{r4, r5, r6, lr}
 8013e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8013ec8 <sbrk_aligned+0x40>)
 8013e8c:	460c      	mov	r4, r1
 8013e8e:	6831      	ldr	r1, [r6, #0]
 8013e90:	4605      	mov	r5, r0
 8013e92:	b911      	cbnz	r1, 8013e9a <sbrk_aligned+0x12>
 8013e94:	f000 fbbe 	bl	8014614 <_sbrk_r>
 8013e98:	6030      	str	r0, [r6, #0]
 8013e9a:	4621      	mov	r1, r4
 8013e9c:	4628      	mov	r0, r5
 8013e9e:	f000 fbb9 	bl	8014614 <_sbrk_r>
 8013ea2:	1c43      	adds	r3, r0, #1
 8013ea4:	d103      	bne.n	8013eae <sbrk_aligned+0x26>
 8013ea6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013eaa:	4620      	mov	r0, r4
 8013eac:	bd70      	pop	{r4, r5, r6, pc}
 8013eae:	1cc4      	adds	r4, r0, #3
 8013eb0:	f024 0403 	bic.w	r4, r4, #3
 8013eb4:	42a0      	cmp	r0, r4
 8013eb6:	d0f8      	beq.n	8013eaa <sbrk_aligned+0x22>
 8013eb8:	1a21      	subs	r1, r4, r0
 8013eba:	4628      	mov	r0, r5
 8013ebc:	f000 fbaa 	bl	8014614 <_sbrk_r>
 8013ec0:	3001      	adds	r0, #1
 8013ec2:	d1f2      	bne.n	8013eaa <sbrk_aligned+0x22>
 8013ec4:	e7ef      	b.n	8013ea6 <sbrk_aligned+0x1e>
 8013ec6:	bf00      	nop
 8013ec8:	200092d0 	.word	0x200092d0

08013ecc <_malloc_r>:
 8013ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ed0:	1ccd      	adds	r5, r1, #3
 8013ed2:	f025 0503 	bic.w	r5, r5, #3
 8013ed6:	3508      	adds	r5, #8
 8013ed8:	2d0c      	cmp	r5, #12
 8013eda:	bf38      	it	cc
 8013edc:	250c      	movcc	r5, #12
 8013ede:	2d00      	cmp	r5, #0
 8013ee0:	4606      	mov	r6, r0
 8013ee2:	db01      	blt.n	8013ee8 <_malloc_r+0x1c>
 8013ee4:	42a9      	cmp	r1, r5
 8013ee6:	d904      	bls.n	8013ef2 <_malloc_r+0x26>
 8013ee8:	230c      	movs	r3, #12
 8013eea:	6033      	str	r3, [r6, #0]
 8013eec:	2000      	movs	r0, #0
 8013eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013fc8 <_malloc_r+0xfc>
 8013ef6:	f000 f869 	bl	8013fcc <__malloc_lock>
 8013efa:	f8d8 3000 	ldr.w	r3, [r8]
 8013efe:	461c      	mov	r4, r3
 8013f00:	bb44      	cbnz	r4, 8013f54 <_malloc_r+0x88>
 8013f02:	4629      	mov	r1, r5
 8013f04:	4630      	mov	r0, r6
 8013f06:	f7ff ffbf 	bl	8013e88 <sbrk_aligned>
 8013f0a:	1c43      	adds	r3, r0, #1
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	d158      	bne.n	8013fc2 <_malloc_r+0xf6>
 8013f10:	f8d8 4000 	ldr.w	r4, [r8]
 8013f14:	4627      	mov	r7, r4
 8013f16:	2f00      	cmp	r7, #0
 8013f18:	d143      	bne.n	8013fa2 <_malloc_r+0xd6>
 8013f1a:	2c00      	cmp	r4, #0
 8013f1c:	d04b      	beq.n	8013fb6 <_malloc_r+0xea>
 8013f1e:	6823      	ldr	r3, [r4, #0]
 8013f20:	4639      	mov	r1, r7
 8013f22:	4630      	mov	r0, r6
 8013f24:	eb04 0903 	add.w	r9, r4, r3
 8013f28:	f000 fb74 	bl	8014614 <_sbrk_r>
 8013f2c:	4581      	cmp	r9, r0
 8013f2e:	d142      	bne.n	8013fb6 <_malloc_r+0xea>
 8013f30:	6821      	ldr	r1, [r4, #0]
 8013f32:	1a6d      	subs	r5, r5, r1
 8013f34:	4629      	mov	r1, r5
 8013f36:	4630      	mov	r0, r6
 8013f38:	f7ff ffa6 	bl	8013e88 <sbrk_aligned>
 8013f3c:	3001      	adds	r0, #1
 8013f3e:	d03a      	beq.n	8013fb6 <_malloc_r+0xea>
 8013f40:	6823      	ldr	r3, [r4, #0]
 8013f42:	442b      	add	r3, r5
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	f8d8 3000 	ldr.w	r3, [r8]
 8013f4a:	685a      	ldr	r2, [r3, #4]
 8013f4c:	bb62      	cbnz	r2, 8013fa8 <_malloc_r+0xdc>
 8013f4e:	f8c8 7000 	str.w	r7, [r8]
 8013f52:	e00f      	b.n	8013f74 <_malloc_r+0xa8>
 8013f54:	6822      	ldr	r2, [r4, #0]
 8013f56:	1b52      	subs	r2, r2, r5
 8013f58:	d420      	bmi.n	8013f9c <_malloc_r+0xd0>
 8013f5a:	2a0b      	cmp	r2, #11
 8013f5c:	d917      	bls.n	8013f8e <_malloc_r+0xc2>
 8013f5e:	1961      	adds	r1, r4, r5
 8013f60:	42a3      	cmp	r3, r4
 8013f62:	6025      	str	r5, [r4, #0]
 8013f64:	bf18      	it	ne
 8013f66:	6059      	strne	r1, [r3, #4]
 8013f68:	6863      	ldr	r3, [r4, #4]
 8013f6a:	bf08      	it	eq
 8013f6c:	f8c8 1000 	streq.w	r1, [r8]
 8013f70:	5162      	str	r2, [r4, r5]
 8013f72:	604b      	str	r3, [r1, #4]
 8013f74:	4630      	mov	r0, r6
 8013f76:	f000 f82f 	bl	8013fd8 <__malloc_unlock>
 8013f7a:	f104 000b 	add.w	r0, r4, #11
 8013f7e:	1d23      	adds	r3, r4, #4
 8013f80:	f020 0007 	bic.w	r0, r0, #7
 8013f84:	1ac2      	subs	r2, r0, r3
 8013f86:	bf1c      	itt	ne
 8013f88:	1a1b      	subne	r3, r3, r0
 8013f8a:	50a3      	strne	r3, [r4, r2]
 8013f8c:	e7af      	b.n	8013eee <_malloc_r+0x22>
 8013f8e:	6862      	ldr	r2, [r4, #4]
 8013f90:	42a3      	cmp	r3, r4
 8013f92:	bf0c      	ite	eq
 8013f94:	f8c8 2000 	streq.w	r2, [r8]
 8013f98:	605a      	strne	r2, [r3, #4]
 8013f9a:	e7eb      	b.n	8013f74 <_malloc_r+0xa8>
 8013f9c:	4623      	mov	r3, r4
 8013f9e:	6864      	ldr	r4, [r4, #4]
 8013fa0:	e7ae      	b.n	8013f00 <_malloc_r+0x34>
 8013fa2:	463c      	mov	r4, r7
 8013fa4:	687f      	ldr	r7, [r7, #4]
 8013fa6:	e7b6      	b.n	8013f16 <_malloc_r+0x4a>
 8013fa8:	461a      	mov	r2, r3
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	42a3      	cmp	r3, r4
 8013fae:	d1fb      	bne.n	8013fa8 <_malloc_r+0xdc>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	6053      	str	r3, [r2, #4]
 8013fb4:	e7de      	b.n	8013f74 <_malloc_r+0xa8>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	6033      	str	r3, [r6, #0]
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f000 f80c 	bl	8013fd8 <__malloc_unlock>
 8013fc0:	e794      	b.n	8013eec <_malloc_r+0x20>
 8013fc2:	6005      	str	r5, [r0, #0]
 8013fc4:	e7d6      	b.n	8013f74 <_malloc_r+0xa8>
 8013fc6:	bf00      	nop
 8013fc8:	200092d4 	.word	0x200092d4

08013fcc <__malloc_lock>:
 8013fcc:	4801      	ldr	r0, [pc, #4]	@ (8013fd4 <__malloc_lock+0x8>)
 8013fce:	f000 bb6e 	b.w	80146ae <__retarget_lock_acquire_recursive>
 8013fd2:	bf00      	nop
 8013fd4:	20009419 	.word	0x20009419

08013fd8 <__malloc_unlock>:
 8013fd8:	4801      	ldr	r0, [pc, #4]	@ (8013fe0 <__malloc_unlock+0x8>)
 8013fda:	f000 bb69 	b.w	80146b0 <__retarget_lock_release_recursive>
 8013fde:	bf00      	nop
 8013fe0:	20009419 	.word	0x20009419

08013fe4 <srand>:
 8013fe4:	b538      	push	{r3, r4, r5, lr}
 8013fe6:	4b10      	ldr	r3, [pc, #64]	@ (8014028 <srand+0x44>)
 8013fe8:	681d      	ldr	r5, [r3, #0]
 8013fea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013fec:	4604      	mov	r4, r0
 8013fee:	b9b3      	cbnz	r3, 801401e <srand+0x3a>
 8013ff0:	2018      	movs	r0, #24
 8013ff2:	f7ff ff39 	bl	8013e68 <malloc>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	6328      	str	r0, [r5, #48]	@ 0x30
 8013ffa:	b920      	cbnz	r0, 8014006 <srand+0x22>
 8013ffc:	4b0b      	ldr	r3, [pc, #44]	@ (801402c <srand+0x48>)
 8013ffe:	480c      	ldr	r0, [pc, #48]	@ (8014030 <srand+0x4c>)
 8014000:	2146      	movs	r1, #70	@ 0x46
 8014002:	f000 fb6d 	bl	80146e0 <__assert_func>
 8014006:	490b      	ldr	r1, [pc, #44]	@ (8014034 <srand+0x50>)
 8014008:	4b0b      	ldr	r3, [pc, #44]	@ (8014038 <srand+0x54>)
 801400a:	e9c0 1300 	strd	r1, r3, [r0]
 801400e:	4b0b      	ldr	r3, [pc, #44]	@ (801403c <srand+0x58>)
 8014010:	6083      	str	r3, [r0, #8]
 8014012:	230b      	movs	r3, #11
 8014014:	8183      	strh	r3, [r0, #12]
 8014016:	2100      	movs	r1, #0
 8014018:	2001      	movs	r0, #1
 801401a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801401e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014020:	2200      	movs	r2, #0
 8014022:	611c      	str	r4, [r3, #16]
 8014024:	615a      	str	r2, [r3, #20]
 8014026:	bd38      	pop	{r3, r4, r5, pc}
 8014028:	20000134 	.word	0x20000134
 801402c:	08015df8 	.word	0x08015df8
 8014030:	08015e0f 	.word	0x08015e0f
 8014034:	abcd330e 	.word	0xabcd330e
 8014038:	e66d1234 	.word	0xe66d1234
 801403c:	0005deec 	.word	0x0005deec

08014040 <rand>:
 8014040:	4b16      	ldr	r3, [pc, #88]	@ (801409c <rand+0x5c>)
 8014042:	b510      	push	{r4, lr}
 8014044:	681c      	ldr	r4, [r3, #0]
 8014046:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014048:	b9b3      	cbnz	r3, 8014078 <rand+0x38>
 801404a:	2018      	movs	r0, #24
 801404c:	f7ff ff0c 	bl	8013e68 <malloc>
 8014050:	4602      	mov	r2, r0
 8014052:	6320      	str	r0, [r4, #48]	@ 0x30
 8014054:	b920      	cbnz	r0, 8014060 <rand+0x20>
 8014056:	4b12      	ldr	r3, [pc, #72]	@ (80140a0 <rand+0x60>)
 8014058:	4812      	ldr	r0, [pc, #72]	@ (80140a4 <rand+0x64>)
 801405a:	2152      	movs	r1, #82	@ 0x52
 801405c:	f000 fb40 	bl	80146e0 <__assert_func>
 8014060:	4911      	ldr	r1, [pc, #68]	@ (80140a8 <rand+0x68>)
 8014062:	4b12      	ldr	r3, [pc, #72]	@ (80140ac <rand+0x6c>)
 8014064:	e9c0 1300 	strd	r1, r3, [r0]
 8014068:	4b11      	ldr	r3, [pc, #68]	@ (80140b0 <rand+0x70>)
 801406a:	6083      	str	r3, [r0, #8]
 801406c:	230b      	movs	r3, #11
 801406e:	8183      	strh	r3, [r0, #12]
 8014070:	2100      	movs	r1, #0
 8014072:	2001      	movs	r0, #1
 8014074:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014078:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801407a:	480e      	ldr	r0, [pc, #56]	@ (80140b4 <rand+0x74>)
 801407c:	690b      	ldr	r3, [r1, #16]
 801407e:	694c      	ldr	r4, [r1, #20]
 8014080:	4a0d      	ldr	r2, [pc, #52]	@ (80140b8 <rand+0x78>)
 8014082:	4358      	muls	r0, r3
 8014084:	fb02 0004 	mla	r0, r2, r4, r0
 8014088:	fba3 3202 	umull	r3, r2, r3, r2
 801408c:	3301      	adds	r3, #1
 801408e:	eb40 0002 	adc.w	r0, r0, r2
 8014092:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014096:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801409a:	bd10      	pop	{r4, pc}
 801409c:	20000134 	.word	0x20000134
 80140a0:	08015df8 	.word	0x08015df8
 80140a4:	08015e0f 	.word	0x08015e0f
 80140a8:	abcd330e 	.word	0xabcd330e
 80140ac:	e66d1234 	.word	0xe66d1234
 80140b0:	0005deec 	.word	0x0005deec
 80140b4:	5851f42d 	.word	0x5851f42d
 80140b8:	4c957f2d 	.word	0x4c957f2d

080140bc <realloc>:
 80140bc:	4b02      	ldr	r3, [pc, #8]	@ (80140c8 <realloc+0xc>)
 80140be:	460a      	mov	r2, r1
 80140c0:	4601      	mov	r1, r0
 80140c2:	6818      	ldr	r0, [r3, #0]
 80140c4:	f000 b802 	b.w	80140cc <_realloc_r>
 80140c8:	20000134 	.word	0x20000134

080140cc <_realloc_r>:
 80140cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d0:	4680      	mov	r8, r0
 80140d2:	4615      	mov	r5, r2
 80140d4:	460c      	mov	r4, r1
 80140d6:	b921      	cbnz	r1, 80140e2 <_realloc_r+0x16>
 80140d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140dc:	4611      	mov	r1, r2
 80140de:	f7ff bef5 	b.w	8013ecc <_malloc_r>
 80140e2:	b92a      	cbnz	r2, 80140f0 <_realloc_r+0x24>
 80140e4:	f000 fb26 	bl	8014734 <_free_r>
 80140e8:	2400      	movs	r4, #0
 80140ea:	4620      	mov	r0, r4
 80140ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140f0:	f000 fb6a 	bl	80147c8 <_malloc_usable_size_r>
 80140f4:	4285      	cmp	r5, r0
 80140f6:	4606      	mov	r6, r0
 80140f8:	d802      	bhi.n	8014100 <_realloc_r+0x34>
 80140fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80140fe:	d8f4      	bhi.n	80140ea <_realloc_r+0x1e>
 8014100:	4629      	mov	r1, r5
 8014102:	4640      	mov	r0, r8
 8014104:	f7ff fee2 	bl	8013ecc <_malloc_r>
 8014108:	4607      	mov	r7, r0
 801410a:	2800      	cmp	r0, #0
 801410c:	d0ec      	beq.n	80140e8 <_realloc_r+0x1c>
 801410e:	42b5      	cmp	r5, r6
 8014110:	462a      	mov	r2, r5
 8014112:	4621      	mov	r1, r4
 8014114:	bf28      	it	cs
 8014116:	4632      	movcs	r2, r6
 8014118:	f000 fad3 	bl	80146c2 <memcpy>
 801411c:	4621      	mov	r1, r4
 801411e:	4640      	mov	r0, r8
 8014120:	f000 fb08 	bl	8014734 <_free_r>
 8014124:	463c      	mov	r4, r7
 8014126:	e7e0      	b.n	80140ea <_realloc_r+0x1e>

08014128 <_strtoul_l.constprop.0>:
 8014128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801412c:	4e34      	ldr	r6, [pc, #208]	@ (8014200 <_strtoul_l.constprop.0+0xd8>)
 801412e:	4686      	mov	lr, r0
 8014130:	460d      	mov	r5, r1
 8014132:	4628      	mov	r0, r5
 8014134:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014138:	5d37      	ldrb	r7, [r6, r4]
 801413a:	f017 0708 	ands.w	r7, r7, #8
 801413e:	d1f8      	bne.n	8014132 <_strtoul_l.constprop.0+0xa>
 8014140:	2c2d      	cmp	r4, #45	@ 0x2d
 8014142:	d12f      	bne.n	80141a4 <_strtoul_l.constprop.0+0x7c>
 8014144:	782c      	ldrb	r4, [r5, #0]
 8014146:	2701      	movs	r7, #1
 8014148:	1c85      	adds	r5, r0, #2
 801414a:	f033 0010 	bics.w	r0, r3, #16
 801414e:	d109      	bne.n	8014164 <_strtoul_l.constprop.0+0x3c>
 8014150:	2c30      	cmp	r4, #48	@ 0x30
 8014152:	d12c      	bne.n	80141ae <_strtoul_l.constprop.0+0x86>
 8014154:	7828      	ldrb	r0, [r5, #0]
 8014156:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801415a:	2858      	cmp	r0, #88	@ 0x58
 801415c:	d127      	bne.n	80141ae <_strtoul_l.constprop.0+0x86>
 801415e:	786c      	ldrb	r4, [r5, #1]
 8014160:	2310      	movs	r3, #16
 8014162:	3502      	adds	r5, #2
 8014164:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014168:	2600      	movs	r6, #0
 801416a:	fbb8 f8f3 	udiv	r8, r8, r3
 801416e:	fb03 f908 	mul.w	r9, r3, r8
 8014172:	ea6f 0909 	mvn.w	r9, r9
 8014176:	4630      	mov	r0, r6
 8014178:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801417c:	f1bc 0f09 	cmp.w	ip, #9
 8014180:	d81c      	bhi.n	80141bc <_strtoul_l.constprop.0+0x94>
 8014182:	4664      	mov	r4, ip
 8014184:	42a3      	cmp	r3, r4
 8014186:	dd2a      	ble.n	80141de <_strtoul_l.constprop.0+0xb6>
 8014188:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801418c:	d007      	beq.n	801419e <_strtoul_l.constprop.0+0x76>
 801418e:	4580      	cmp	r8, r0
 8014190:	d322      	bcc.n	80141d8 <_strtoul_l.constprop.0+0xb0>
 8014192:	d101      	bne.n	8014198 <_strtoul_l.constprop.0+0x70>
 8014194:	45a1      	cmp	r9, r4
 8014196:	db1f      	blt.n	80141d8 <_strtoul_l.constprop.0+0xb0>
 8014198:	fb00 4003 	mla	r0, r0, r3, r4
 801419c:	2601      	movs	r6, #1
 801419e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141a2:	e7e9      	b.n	8014178 <_strtoul_l.constprop.0+0x50>
 80141a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80141a6:	bf04      	itt	eq
 80141a8:	782c      	ldrbeq	r4, [r5, #0]
 80141aa:	1c85      	addeq	r5, r0, #2
 80141ac:	e7cd      	b.n	801414a <_strtoul_l.constprop.0+0x22>
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d1d8      	bne.n	8014164 <_strtoul_l.constprop.0+0x3c>
 80141b2:	2c30      	cmp	r4, #48	@ 0x30
 80141b4:	bf0c      	ite	eq
 80141b6:	2308      	moveq	r3, #8
 80141b8:	230a      	movne	r3, #10
 80141ba:	e7d3      	b.n	8014164 <_strtoul_l.constprop.0+0x3c>
 80141bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80141c0:	f1bc 0f19 	cmp.w	ip, #25
 80141c4:	d801      	bhi.n	80141ca <_strtoul_l.constprop.0+0xa2>
 80141c6:	3c37      	subs	r4, #55	@ 0x37
 80141c8:	e7dc      	b.n	8014184 <_strtoul_l.constprop.0+0x5c>
 80141ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80141ce:	f1bc 0f19 	cmp.w	ip, #25
 80141d2:	d804      	bhi.n	80141de <_strtoul_l.constprop.0+0xb6>
 80141d4:	3c57      	subs	r4, #87	@ 0x57
 80141d6:	e7d5      	b.n	8014184 <_strtoul_l.constprop.0+0x5c>
 80141d8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80141dc:	e7df      	b.n	801419e <_strtoul_l.constprop.0+0x76>
 80141de:	1c73      	adds	r3, r6, #1
 80141e0:	d106      	bne.n	80141f0 <_strtoul_l.constprop.0+0xc8>
 80141e2:	2322      	movs	r3, #34	@ 0x22
 80141e4:	f8ce 3000 	str.w	r3, [lr]
 80141e8:	4630      	mov	r0, r6
 80141ea:	b932      	cbnz	r2, 80141fa <_strtoul_l.constprop.0+0xd2>
 80141ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141f0:	b107      	cbz	r7, 80141f4 <_strtoul_l.constprop.0+0xcc>
 80141f2:	4240      	negs	r0, r0
 80141f4:	2a00      	cmp	r2, #0
 80141f6:	d0f9      	beq.n	80141ec <_strtoul_l.constprop.0+0xc4>
 80141f8:	b106      	cbz	r6, 80141fc <_strtoul_l.constprop.0+0xd4>
 80141fa:	1e69      	subs	r1, r5, #1
 80141fc:	6011      	str	r1, [r2, #0]
 80141fe:	e7f5      	b.n	80141ec <_strtoul_l.constprop.0+0xc4>
 8014200:	08015e68 	.word	0x08015e68

08014204 <strtoul>:
 8014204:	4613      	mov	r3, r2
 8014206:	460a      	mov	r2, r1
 8014208:	4601      	mov	r1, r0
 801420a:	4802      	ldr	r0, [pc, #8]	@ (8014214 <strtoul+0x10>)
 801420c:	6800      	ldr	r0, [r0, #0]
 801420e:	f7ff bf8b 	b.w	8014128 <_strtoul_l.constprop.0>
 8014212:	bf00      	nop
 8014214:	20000134 	.word	0x20000134

08014218 <std>:
 8014218:	2300      	movs	r3, #0
 801421a:	b510      	push	{r4, lr}
 801421c:	4604      	mov	r4, r0
 801421e:	e9c0 3300 	strd	r3, r3, [r0]
 8014222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014226:	6083      	str	r3, [r0, #8]
 8014228:	8181      	strh	r1, [r0, #12]
 801422a:	6643      	str	r3, [r0, #100]	@ 0x64
 801422c:	81c2      	strh	r2, [r0, #14]
 801422e:	6183      	str	r3, [r0, #24]
 8014230:	4619      	mov	r1, r3
 8014232:	2208      	movs	r2, #8
 8014234:	305c      	adds	r0, #92	@ 0x5c
 8014236:	f000 f97b 	bl	8014530 <memset>
 801423a:	4b0d      	ldr	r3, [pc, #52]	@ (8014270 <std+0x58>)
 801423c:	6263      	str	r3, [r4, #36]	@ 0x24
 801423e:	4b0d      	ldr	r3, [pc, #52]	@ (8014274 <std+0x5c>)
 8014240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014242:	4b0d      	ldr	r3, [pc, #52]	@ (8014278 <std+0x60>)
 8014244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014246:	4b0d      	ldr	r3, [pc, #52]	@ (801427c <std+0x64>)
 8014248:	6323      	str	r3, [r4, #48]	@ 0x30
 801424a:	4b0d      	ldr	r3, [pc, #52]	@ (8014280 <std+0x68>)
 801424c:	6224      	str	r4, [r4, #32]
 801424e:	429c      	cmp	r4, r3
 8014250:	d006      	beq.n	8014260 <std+0x48>
 8014252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014256:	4294      	cmp	r4, r2
 8014258:	d002      	beq.n	8014260 <std+0x48>
 801425a:	33d0      	adds	r3, #208	@ 0xd0
 801425c:	429c      	cmp	r4, r3
 801425e:	d105      	bne.n	801426c <std+0x54>
 8014260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014268:	f000 ba20 	b.w	80146ac <__retarget_lock_init_recursive>
 801426c:	bd10      	pop	{r4, pc}
 801426e:	bf00      	nop
 8014270:	08014405 	.word	0x08014405
 8014274:	08014427 	.word	0x08014427
 8014278:	0801445f 	.word	0x0801445f
 801427c:	08014483 	.word	0x08014483
 8014280:	200092d8 	.word	0x200092d8

08014284 <stdio_exit_handler>:
 8014284:	4a02      	ldr	r2, [pc, #8]	@ (8014290 <stdio_exit_handler+0xc>)
 8014286:	4903      	ldr	r1, [pc, #12]	@ (8014294 <stdio_exit_handler+0x10>)
 8014288:	4803      	ldr	r0, [pc, #12]	@ (8014298 <stdio_exit_handler+0x14>)
 801428a:	f000 b869 	b.w	8014360 <_fwalk_sglue>
 801428e:	bf00      	nop
 8014290:	20000128 	.word	0x20000128
 8014294:	08014ead 	.word	0x08014ead
 8014298:	20000138 	.word	0x20000138

0801429c <cleanup_stdio>:
 801429c:	6841      	ldr	r1, [r0, #4]
 801429e:	4b0c      	ldr	r3, [pc, #48]	@ (80142d0 <cleanup_stdio+0x34>)
 80142a0:	4299      	cmp	r1, r3
 80142a2:	b510      	push	{r4, lr}
 80142a4:	4604      	mov	r4, r0
 80142a6:	d001      	beq.n	80142ac <cleanup_stdio+0x10>
 80142a8:	f000 fe00 	bl	8014eac <_fflush_r>
 80142ac:	68a1      	ldr	r1, [r4, #8]
 80142ae:	4b09      	ldr	r3, [pc, #36]	@ (80142d4 <cleanup_stdio+0x38>)
 80142b0:	4299      	cmp	r1, r3
 80142b2:	d002      	beq.n	80142ba <cleanup_stdio+0x1e>
 80142b4:	4620      	mov	r0, r4
 80142b6:	f000 fdf9 	bl	8014eac <_fflush_r>
 80142ba:	68e1      	ldr	r1, [r4, #12]
 80142bc:	4b06      	ldr	r3, [pc, #24]	@ (80142d8 <cleanup_stdio+0x3c>)
 80142be:	4299      	cmp	r1, r3
 80142c0:	d004      	beq.n	80142cc <cleanup_stdio+0x30>
 80142c2:	4620      	mov	r0, r4
 80142c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142c8:	f000 bdf0 	b.w	8014eac <_fflush_r>
 80142cc:	bd10      	pop	{r4, pc}
 80142ce:	bf00      	nop
 80142d0:	200092d8 	.word	0x200092d8
 80142d4:	20009340 	.word	0x20009340
 80142d8:	200093a8 	.word	0x200093a8

080142dc <global_stdio_init.part.0>:
 80142dc:	b510      	push	{r4, lr}
 80142de:	4b0b      	ldr	r3, [pc, #44]	@ (801430c <global_stdio_init.part.0+0x30>)
 80142e0:	4c0b      	ldr	r4, [pc, #44]	@ (8014310 <global_stdio_init.part.0+0x34>)
 80142e2:	4a0c      	ldr	r2, [pc, #48]	@ (8014314 <global_stdio_init.part.0+0x38>)
 80142e4:	601a      	str	r2, [r3, #0]
 80142e6:	4620      	mov	r0, r4
 80142e8:	2200      	movs	r2, #0
 80142ea:	2104      	movs	r1, #4
 80142ec:	f7ff ff94 	bl	8014218 <std>
 80142f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80142f4:	2201      	movs	r2, #1
 80142f6:	2109      	movs	r1, #9
 80142f8:	f7ff ff8e 	bl	8014218 <std>
 80142fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014300:	2202      	movs	r2, #2
 8014302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014306:	2112      	movs	r1, #18
 8014308:	f7ff bf86 	b.w	8014218 <std>
 801430c:	20009410 	.word	0x20009410
 8014310:	200092d8 	.word	0x200092d8
 8014314:	08014285 	.word	0x08014285

08014318 <__sfp_lock_acquire>:
 8014318:	4801      	ldr	r0, [pc, #4]	@ (8014320 <__sfp_lock_acquire+0x8>)
 801431a:	f000 b9c8 	b.w	80146ae <__retarget_lock_acquire_recursive>
 801431e:	bf00      	nop
 8014320:	2000941a 	.word	0x2000941a

08014324 <__sfp_lock_release>:
 8014324:	4801      	ldr	r0, [pc, #4]	@ (801432c <__sfp_lock_release+0x8>)
 8014326:	f000 b9c3 	b.w	80146b0 <__retarget_lock_release_recursive>
 801432a:	bf00      	nop
 801432c:	2000941a 	.word	0x2000941a

08014330 <__sinit>:
 8014330:	b510      	push	{r4, lr}
 8014332:	4604      	mov	r4, r0
 8014334:	f7ff fff0 	bl	8014318 <__sfp_lock_acquire>
 8014338:	6a23      	ldr	r3, [r4, #32]
 801433a:	b11b      	cbz	r3, 8014344 <__sinit+0x14>
 801433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014340:	f7ff bff0 	b.w	8014324 <__sfp_lock_release>
 8014344:	4b04      	ldr	r3, [pc, #16]	@ (8014358 <__sinit+0x28>)
 8014346:	6223      	str	r3, [r4, #32]
 8014348:	4b04      	ldr	r3, [pc, #16]	@ (801435c <__sinit+0x2c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d1f5      	bne.n	801433c <__sinit+0xc>
 8014350:	f7ff ffc4 	bl	80142dc <global_stdio_init.part.0>
 8014354:	e7f2      	b.n	801433c <__sinit+0xc>
 8014356:	bf00      	nop
 8014358:	0801429d 	.word	0x0801429d
 801435c:	20009410 	.word	0x20009410

08014360 <_fwalk_sglue>:
 8014360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014364:	4607      	mov	r7, r0
 8014366:	4688      	mov	r8, r1
 8014368:	4614      	mov	r4, r2
 801436a:	2600      	movs	r6, #0
 801436c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014370:	f1b9 0901 	subs.w	r9, r9, #1
 8014374:	d505      	bpl.n	8014382 <_fwalk_sglue+0x22>
 8014376:	6824      	ldr	r4, [r4, #0]
 8014378:	2c00      	cmp	r4, #0
 801437a:	d1f7      	bne.n	801436c <_fwalk_sglue+0xc>
 801437c:	4630      	mov	r0, r6
 801437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014382:	89ab      	ldrh	r3, [r5, #12]
 8014384:	2b01      	cmp	r3, #1
 8014386:	d907      	bls.n	8014398 <_fwalk_sglue+0x38>
 8014388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801438c:	3301      	adds	r3, #1
 801438e:	d003      	beq.n	8014398 <_fwalk_sglue+0x38>
 8014390:	4629      	mov	r1, r5
 8014392:	4638      	mov	r0, r7
 8014394:	47c0      	blx	r8
 8014396:	4306      	orrs	r6, r0
 8014398:	3568      	adds	r5, #104	@ 0x68
 801439a:	e7e9      	b.n	8014370 <_fwalk_sglue+0x10>

0801439c <sniprintf>:
 801439c:	b40c      	push	{r2, r3}
 801439e:	b530      	push	{r4, r5, lr}
 80143a0:	4b17      	ldr	r3, [pc, #92]	@ (8014400 <sniprintf+0x64>)
 80143a2:	1e0c      	subs	r4, r1, #0
 80143a4:	681d      	ldr	r5, [r3, #0]
 80143a6:	b09d      	sub	sp, #116	@ 0x74
 80143a8:	da08      	bge.n	80143bc <sniprintf+0x20>
 80143aa:	238b      	movs	r3, #139	@ 0x8b
 80143ac:	602b      	str	r3, [r5, #0]
 80143ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143b2:	b01d      	add	sp, #116	@ 0x74
 80143b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143b8:	b002      	add	sp, #8
 80143ba:	4770      	bx	lr
 80143bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80143c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80143c4:	bf14      	ite	ne
 80143c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80143ca:	4623      	moveq	r3, r4
 80143cc:	9304      	str	r3, [sp, #16]
 80143ce:	9307      	str	r3, [sp, #28]
 80143d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80143d4:	9002      	str	r0, [sp, #8]
 80143d6:	9006      	str	r0, [sp, #24]
 80143d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80143dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80143de:	ab21      	add	r3, sp, #132	@ 0x84
 80143e0:	a902      	add	r1, sp, #8
 80143e2:	4628      	mov	r0, r5
 80143e4:	9301      	str	r3, [sp, #4]
 80143e6:	f000 fa53 	bl	8014890 <_svfiprintf_r>
 80143ea:	1c43      	adds	r3, r0, #1
 80143ec:	bfbc      	itt	lt
 80143ee:	238b      	movlt	r3, #139	@ 0x8b
 80143f0:	602b      	strlt	r3, [r5, #0]
 80143f2:	2c00      	cmp	r4, #0
 80143f4:	d0dd      	beq.n	80143b2 <sniprintf+0x16>
 80143f6:	9b02      	ldr	r3, [sp, #8]
 80143f8:	2200      	movs	r2, #0
 80143fa:	701a      	strb	r2, [r3, #0]
 80143fc:	e7d9      	b.n	80143b2 <sniprintf+0x16>
 80143fe:	bf00      	nop
 8014400:	20000134 	.word	0x20000134

08014404 <__sread>:
 8014404:	b510      	push	{r4, lr}
 8014406:	460c      	mov	r4, r1
 8014408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801440c:	f000 f8f0 	bl	80145f0 <_read_r>
 8014410:	2800      	cmp	r0, #0
 8014412:	bfab      	itete	ge
 8014414:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014416:	89a3      	ldrhlt	r3, [r4, #12]
 8014418:	181b      	addge	r3, r3, r0
 801441a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801441e:	bfac      	ite	ge
 8014420:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014422:	81a3      	strhlt	r3, [r4, #12]
 8014424:	bd10      	pop	{r4, pc}

08014426 <__swrite>:
 8014426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801442a:	461f      	mov	r7, r3
 801442c:	898b      	ldrh	r3, [r1, #12]
 801442e:	05db      	lsls	r3, r3, #23
 8014430:	4605      	mov	r5, r0
 8014432:	460c      	mov	r4, r1
 8014434:	4616      	mov	r6, r2
 8014436:	d505      	bpl.n	8014444 <__swrite+0x1e>
 8014438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801443c:	2302      	movs	r3, #2
 801443e:	2200      	movs	r2, #0
 8014440:	f000 f8c4 	bl	80145cc <_lseek_r>
 8014444:	89a3      	ldrh	r3, [r4, #12]
 8014446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801444a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801444e:	81a3      	strh	r3, [r4, #12]
 8014450:	4632      	mov	r2, r6
 8014452:	463b      	mov	r3, r7
 8014454:	4628      	mov	r0, r5
 8014456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801445a:	f000 b8eb 	b.w	8014634 <_write_r>

0801445e <__sseek>:
 801445e:	b510      	push	{r4, lr}
 8014460:	460c      	mov	r4, r1
 8014462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014466:	f000 f8b1 	bl	80145cc <_lseek_r>
 801446a:	1c43      	adds	r3, r0, #1
 801446c:	89a3      	ldrh	r3, [r4, #12]
 801446e:	bf15      	itete	ne
 8014470:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014472:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014476:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801447a:	81a3      	strheq	r3, [r4, #12]
 801447c:	bf18      	it	ne
 801447e:	81a3      	strhne	r3, [r4, #12]
 8014480:	bd10      	pop	{r4, pc}

08014482 <__sclose>:
 8014482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014486:	f000 b891 	b.w	80145ac <_close_r>

0801448a <_vsniprintf_r>:
 801448a:	b530      	push	{r4, r5, lr}
 801448c:	4614      	mov	r4, r2
 801448e:	2c00      	cmp	r4, #0
 8014490:	b09b      	sub	sp, #108	@ 0x6c
 8014492:	4605      	mov	r5, r0
 8014494:	461a      	mov	r2, r3
 8014496:	da05      	bge.n	80144a4 <_vsniprintf_r+0x1a>
 8014498:	238b      	movs	r3, #139	@ 0x8b
 801449a:	6003      	str	r3, [r0, #0]
 801449c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144a0:	b01b      	add	sp, #108	@ 0x6c
 80144a2:	bd30      	pop	{r4, r5, pc}
 80144a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80144a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80144ac:	bf14      	ite	ne
 80144ae:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80144b2:	4623      	moveq	r3, r4
 80144b4:	9302      	str	r3, [sp, #8]
 80144b6:	9305      	str	r3, [sp, #20]
 80144b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80144bc:	9100      	str	r1, [sp, #0]
 80144be:	9104      	str	r1, [sp, #16]
 80144c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80144c4:	4669      	mov	r1, sp
 80144c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80144c8:	f000 f9e2 	bl	8014890 <_svfiprintf_r>
 80144cc:	1c43      	adds	r3, r0, #1
 80144ce:	bfbc      	itt	lt
 80144d0:	238b      	movlt	r3, #139	@ 0x8b
 80144d2:	602b      	strlt	r3, [r5, #0]
 80144d4:	2c00      	cmp	r4, #0
 80144d6:	d0e3      	beq.n	80144a0 <_vsniprintf_r+0x16>
 80144d8:	9b00      	ldr	r3, [sp, #0]
 80144da:	2200      	movs	r2, #0
 80144dc:	701a      	strb	r2, [r3, #0]
 80144de:	e7df      	b.n	80144a0 <_vsniprintf_r+0x16>

080144e0 <vsniprintf>:
 80144e0:	b507      	push	{r0, r1, r2, lr}
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	4613      	mov	r3, r2
 80144e6:	460a      	mov	r2, r1
 80144e8:	4601      	mov	r1, r0
 80144ea:	4803      	ldr	r0, [pc, #12]	@ (80144f8 <vsniprintf+0x18>)
 80144ec:	6800      	ldr	r0, [r0, #0]
 80144ee:	f7ff ffcc 	bl	801448a <_vsniprintf_r>
 80144f2:	b003      	add	sp, #12
 80144f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80144f8:	20000134 	.word	0x20000134

080144fc <memmove>:
 80144fc:	4288      	cmp	r0, r1
 80144fe:	b510      	push	{r4, lr}
 8014500:	eb01 0402 	add.w	r4, r1, r2
 8014504:	d902      	bls.n	801450c <memmove+0x10>
 8014506:	4284      	cmp	r4, r0
 8014508:	4623      	mov	r3, r4
 801450a:	d807      	bhi.n	801451c <memmove+0x20>
 801450c:	1e43      	subs	r3, r0, #1
 801450e:	42a1      	cmp	r1, r4
 8014510:	d008      	beq.n	8014524 <memmove+0x28>
 8014512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014516:	f803 2f01 	strb.w	r2, [r3, #1]!
 801451a:	e7f8      	b.n	801450e <memmove+0x12>
 801451c:	4402      	add	r2, r0
 801451e:	4601      	mov	r1, r0
 8014520:	428a      	cmp	r2, r1
 8014522:	d100      	bne.n	8014526 <memmove+0x2a>
 8014524:	bd10      	pop	{r4, pc}
 8014526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801452a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801452e:	e7f7      	b.n	8014520 <memmove+0x24>

08014530 <memset>:
 8014530:	4402      	add	r2, r0
 8014532:	4603      	mov	r3, r0
 8014534:	4293      	cmp	r3, r2
 8014536:	d100      	bne.n	801453a <memset+0xa>
 8014538:	4770      	bx	lr
 801453a:	f803 1b01 	strb.w	r1, [r3], #1
 801453e:	e7f9      	b.n	8014534 <memset+0x4>

08014540 <strchr>:
 8014540:	b2c9      	uxtb	r1, r1
 8014542:	4603      	mov	r3, r0
 8014544:	4618      	mov	r0, r3
 8014546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801454a:	b112      	cbz	r2, 8014552 <strchr+0x12>
 801454c:	428a      	cmp	r2, r1
 801454e:	d1f9      	bne.n	8014544 <strchr+0x4>
 8014550:	4770      	bx	lr
 8014552:	2900      	cmp	r1, #0
 8014554:	bf18      	it	ne
 8014556:	2000      	movne	r0, #0
 8014558:	4770      	bx	lr

0801455a <strncmp>:
 801455a:	b510      	push	{r4, lr}
 801455c:	b16a      	cbz	r2, 801457a <strncmp+0x20>
 801455e:	3901      	subs	r1, #1
 8014560:	1884      	adds	r4, r0, r2
 8014562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014566:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801456a:	429a      	cmp	r2, r3
 801456c:	d103      	bne.n	8014576 <strncmp+0x1c>
 801456e:	42a0      	cmp	r0, r4
 8014570:	d001      	beq.n	8014576 <strncmp+0x1c>
 8014572:	2a00      	cmp	r2, #0
 8014574:	d1f5      	bne.n	8014562 <strncmp+0x8>
 8014576:	1ad0      	subs	r0, r2, r3
 8014578:	bd10      	pop	{r4, pc}
 801457a:	4610      	mov	r0, r2
 801457c:	e7fc      	b.n	8014578 <strncmp+0x1e>

0801457e <strstr>:
 801457e:	780a      	ldrb	r2, [r1, #0]
 8014580:	b570      	push	{r4, r5, r6, lr}
 8014582:	b96a      	cbnz	r2, 80145a0 <strstr+0x22>
 8014584:	bd70      	pop	{r4, r5, r6, pc}
 8014586:	429a      	cmp	r2, r3
 8014588:	d109      	bne.n	801459e <strstr+0x20>
 801458a:	460c      	mov	r4, r1
 801458c:	4605      	mov	r5, r0
 801458e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014592:	2b00      	cmp	r3, #0
 8014594:	d0f6      	beq.n	8014584 <strstr+0x6>
 8014596:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801459a:	429e      	cmp	r6, r3
 801459c:	d0f7      	beq.n	801458e <strstr+0x10>
 801459e:	3001      	adds	r0, #1
 80145a0:	7803      	ldrb	r3, [r0, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d1ef      	bne.n	8014586 <strstr+0x8>
 80145a6:	4618      	mov	r0, r3
 80145a8:	e7ec      	b.n	8014584 <strstr+0x6>
	...

080145ac <_close_r>:
 80145ac:	b538      	push	{r3, r4, r5, lr}
 80145ae:	4d06      	ldr	r5, [pc, #24]	@ (80145c8 <_close_r+0x1c>)
 80145b0:	2300      	movs	r3, #0
 80145b2:	4604      	mov	r4, r0
 80145b4:	4608      	mov	r0, r1
 80145b6:	602b      	str	r3, [r5, #0]
 80145b8:	f7ee fa48 	bl	8002a4c <_close>
 80145bc:	1c43      	adds	r3, r0, #1
 80145be:	d102      	bne.n	80145c6 <_close_r+0x1a>
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	b103      	cbz	r3, 80145c6 <_close_r+0x1a>
 80145c4:	6023      	str	r3, [r4, #0]
 80145c6:	bd38      	pop	{r3, r4, r5, pc}
 80145c8:	20009414 	.word	0x20009414

080145cc <_lseek_r>:
 80145cc:	b538      	push	{r3, r4, r5, lr}
 80145ce:	4d07      	ldr	r5, [pc, #28]	@ (80145ec <_lseek_r+0x20>)
 80145d0:	4604      	mov	r4, r0
 80145d2:	4608      	mov	r0, r1
 80145d4:	4611      	mov	r1, r2
 80145d6:	2200      	movs	r2, #0
 80145d8:	602a      	str	r2, [r5, #0]
 80145da:	461a      	mov	r2, r3
 80145dc:	f7ee fa5d 	bl	8002a9a <_lseek>
 80145e0:	1c43      	adds	r3, r0, #1
 80145e2:	d102      	bne.n	80145ea <_lseek_r+0x1e>
 80145e4:	682b      	ldr	r3, [r5, #0]
 80145e6:	b103      	cbz	r3, 80145ea <_lseek_r+0x1e>
 80145e8:	6023      	str	r3, [r4, #0]
 80145ea:	bd38      	pop	{r3, r4, r5, pc}
 80145ec:	20009414 	.word	0x20009414

080145f0 <_read_r>:
 80145f0:	b538      	push	{r3, r4, r5, lr}
 80145f2:	4d07      	ldr	r5, [pc, #28]	@ (8014610 <_read_r+0x20>)
 80145f4:	4604      	mov	r4, r0
 80145f6:	4608      	mov	r0, r1
 80145f8:	4611      	mov	r1, r2
 80145fa:	2200      	movs	r2, #0
 80145fc:	602a      	str	r2, [r5, #0]
 80145fe:	461a      	mov	r2, r3
 8014600:	f7ee f9eb 	bl	80029da <_read>
 8014604:	1c43      	adds	r3, r0, #1
 8014606:	d102      	bne.n	801460e <_read_r+0x1e>
 8014608:	682b      	ldr	r3, [r5, #0]
 801460a:	b103      	cbz	r3, 801460e <_read_r+0x1e>
 801460c:	6023      	str	r3, [r4, #0]
 801460e:	bd38      	pop	{r3, r4, r5, pc}
 8014610:	20009414 	.word	0x20009414

08014614 <_sbrk_r>:
 8014614:	b538      	push	{r3, r4, r5, lr}
 8014616:	4d06      	ldr	r5, [pc, #24]	@ (8014630 <_sbrk_r+0x1c>)
 8014618:	2300      	movs	r3, #0
 801461a:	4604      	mov	r4, r0
 801461c:	4608      	mov	r0, r1
 801461e:	602b      	str	r3, [r5, #0]
 8014620:	f7ee fa48 	bl	8002ab4 <_sbrk>
 8014624:	1c43      	adds	r3, r0, #1
 8014626:	d102      	bne.n	801462e <_sbrk_r+0x1a>
 8014628:	682b      	ldr	r3, [r5, #0]
 801462a:	b103      	cbz	r3, 801462e <_sbrk_r+0x1a>
 801462c:	6023      	str	r3, [r4, #0]
 801462e:	bd38      	pop	{r3, r4, r5, pc}
 8014630:	20009414 	.word	0x20009414

08014634 <_write_r>:
 8014634:	b538      	push	{r3, r4, r5, lr}
 8014636:	4d07      	ldr	r5, [pc, #28]	@ (8014654 <_write_r+0x20>)
 8014638:	4604      	mov	r4, r0
 801463a:	4608      	mov	r0, r1
 801463c:	4611      	mov	r1, r2
 801463e:	2200      	movs	r2, #0
 8014640:	602a      	str	r2, [r5, #0]
 8014642:	461a      	mov	r2, r3
 8014644:	f7ee f9e6 	bl	8002a14 <_write>
 8014648:	1c43      	adds	r3, r0, #1
 801464a:	d102      	bne.n	8014652 <_write_r+0x1e>
 801464c:	682b      	ldr	r3, [r5, #0]
 801464e:	b103      	cbz	r3, 8014652 <_write_r+0x1e>
 8014650:	6023      	str	r3, [r4, #0]
 8014652:	bd38      	pop	{r3, r4, r5, pc}
 8014654:	20009414 	.word	0x20009414

08014658 <__errno>:
 8014658:	4b01      	ldr	r3, [pc, #4]	@ (8014660 <__errno+0x8>)
 801465a:	6818      	ldr	r0, [r3, #0]
 801465c:	4770      	bx	lr
 801465e:	bf00      	nop
 8014660:	20000134 	.word	0x20000134

08014664 <__libc_init_array>:
 8014664:	b570      	push	{r4, r5, r6, lr}
 8014666:	4d0d      	ldr	r5, [pc, #52]	@ (801469c <__libc_init_array+0x38>)
 8014668:	4c0d      	ldr	r4, [pc, #52]	@ (80146a0 <__libc_init_array+0x3c>)
 801466a:	1b64      	subs	r4, r4, r5
 801466c:	10a4      	asrs	r4, r4, #2
 801466e:	2600      	movs	r6, #0
 8014670:	42a6      	cmp	r6, r4
 8014672:	d109      	bne.n	8014688 <__libc_init_array+0x24>
 8014674:	4d0b      	ldr	r5, [pc, #44]	@ (80146a4 <__libc_init_array+0x40>)
 8014676:	4c0c      	ldr	r4, [pc, #48]	@ (80146a8 <__libc_init_array+0x44>)
 8014678:	f000 fef6 	bl	8015468 <_init>
 801467c:	1b64      	subs	r4, r4, r5
 801467e:	10a4      	asrs	r4, r4, #2
 8014680:	2600      	movs	r6, #0
 8014682:	42a6      	cmp	r6, r4
 8014684:	d105      	bne.n	8014692 <__libc_init_array+0x2e>
 8014686:	bd70      	pop	{r4, r5, r6, pc}
 8014688:	f855 3b04 	ldr.w	r3, [r5], #4
 801468c:	4798      	blx	r3
 801468e:	3601      	adds	r6, #1
 8014690:	e7ee      	b.n	8014670 <__libc_init_array+0xc>
 8014692:	f855 3b04 	ldr.w	r3, [r5], #4
 8014696:	4798      	blx	r3
 8014698:	3601      	adds	r6, #1
 801469a:	e7f2      	b.n	8014682 <__libc_init_array+0x1e>
 801469c:	08015fe0 	.word	0x08015fe0
 80146a0:	08015fe0 	.word	0x08015fe0
 80146a4:	08015fe0 	.word	0x08015fe0
 80146a8:	08015fe4 	.word	0x08015fe4

080146ac <__retarget_lock_init_recursive>:
 80146ac:	4770      	bx	lr

080146ae <__retarget_lock_acquire_recursive>:
 80146ae:	4770      	bx	lr

080146b0 <__retarget_lock_release_recursive>:
 80146b0:	4770      	bx	lr

080146b2 <strcpy>:
 80146b2:	4603      	mov	r3, r0
 80146b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146b8:	f803 2b01 	strb.w	r2, [r3], #1
 80146bc:	2a00      	cmp	r2, #0
 80146be:	d1f9      	bne.n	80146b4 <strcpy+0x2>
 80146c0:	4770      	bx	lr

080146c2 <memcpy>:
 80146c2:	440a      	add	r2, r1
 80146c4:	4291      	cmp	r1, r2
 80146c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80146ca:	d100      	bne.n	80146ce <memcpy+0xc>
 80146cc:	4770      	bx	lr
 80146ce:	b510      	push	{r4, lr}
 80146d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80146d8:	4291      	cmp	r1, r2
 80146da:	d1f9      	bne.n	80146d0 <memcpy+0xe>
 80146dc:	bd10      	pop	{r4, pc}
	...

080146e0 <__assert_func>:
 80146e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146e2:	4614      	mov	r4, r2
 80146e4:	461a      	mov	r2, r3
 80146e6:	4b09      	ldr	r3, [pc, #36]	@ (801470c <__assert_func+0x2c>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	4605      	mov	r5, r0
 80146ec:	68d8      	ldr	r0, [r3, #12]
 80146ee:	b954      	cbnz	r4, 8014706 <__assert_func+0x26>
 80146f0:	4b07      	ldr	r3, [pc, #28]	@ (8014710 <__assert_func+0x30>)
 80146f2:	461c      	mov	r4, r3
 80146f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146f8:	9100      	str	r1, [sp, #0]
 80146fa:	462b      	mov	r3, r5
 80146fc:	4905      	ldr	r1, [pc, #20]	@ (8014714 <__assert_func+0x34>)
 80146fe:	f000 fbfd 	bl	8014efc <fiprintf>
 8014702:	f000 fc0d 	bl	8014f20 <abort>
 8014706:	4b04      	ldr	r3, [pc, #16]	@ (8014718 <__assert_func+0x38>)
 8014708:	e7f4      	b.n	80146f4 <__assert_func+0x14>
 801470a:	bf00      	nop
 801470c:	20000134 	.word	0x20000134
 8014710:	08015fa3 	.word	0x08015fa3
 8014714:	08015f75 	.word	0x08015f75
 8014718:	08015f68 	.word	0x08015f68

0801471c <__env_lock>:
 801471c:	4801      	ldr	r0, [pc, #4]	@ (8014724 <__env_lock+0x8>)
 801471e:	f7ff bfc6 	b.w	80146ae <__retarget_lock_acquire_recursive>
 8014722:	bf00      	nop
 8014724:	20009418 	.word	0x20009418

08014728 <__env_unlock>:
 8014728:	4801      	ldr	r0, [pc, #4]	@ (8014730 <__env_unlock+0x8>)
 801472a:	f7ff bfc1 	b.w	80146b0 <__retarget_lock_release_recursive>
 801472e:	bf00      	nop
 8014730:	20009418 	.word	0x20009418

08014734 <_free_r>:
 8014734:	b538      	push	{r3, r4, r5, lr}
 8014736:	4605      	mov	r5, r0
 8014738:	2900      	cmp	r1, #0
 801473a:	d041      	beq.n	80147c0 <_free_r+0x8c>
 801473c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014740:	1f0c      	subs	r4, r1, #4
 8014742:	2b00      	cmp	r3, #0
 8014744:	bfb8      	it	lt
 8014746:	18e4      	addlt	r4, r4, r3
 8014748:	f7ff fc40 	bl	8013fcc <__malloc_lock>
 801474c:	4a1d      	ldr	r2, [pc, #116]	@ (80147c4 <_free_r+0x90>)
 801474e:	6813      	ldr	r3, [r2, #0]
 8014750:	b933      	cbnz	r3, 8014760 <_free_r+0x2c>
 8014752:	6063      	str	r3, [r4, #4]
 8014754:	6014      	str	r4, [r2, #0]
 8014756:	4628      	mov	r0, r5
 8014758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801475c:	f7ff bc3c 	b.w	8013fd8 <__malloc_unlock>
 8014760:	42a3      	cmp	r3, r4
 8014762:	d908      	bls.n	8014776 <_free_r+0x42>
 8014764:	6820      	ldr	r0, [r4, #0]
 8014766:	1821      	adds	r1, r4, r0
 8014768:	428b      	cmp	r3, r1
 801476a:	bf01      	itttt	eq
 801476c:	6819      	ldreq	r1, [r3, #0]
 801476e:	685b      	ldreq	r3, [r3, #4]
 8014770:	1809      	addeq	r1, r1, r0
 8014772:	6021      	streq	r1, [r4, #0]
 8014774:	e7ed      	b.n	8014752 <_free_r+0x1e>
 8014776:	461a      	mov	r2, r3
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	b10b      	cbz	r3, 8014780 <_free_r+0x4c>
 801477c:	42a3      	cmp	r3, r4
 801477e:	d9fa      	bls.n	8014776 <_free_r+0x42>
 8014780:	6811      	ldr	r1, [r2, #0]
 8014782:	1850      	adds	r0, r2, r1
 8014784:	42a0      	cmp	r0, r4
 8014786:	d10b      	bne.n	80147a0 <_free_r+0x6c>
 8014788:	6820      	ldr	r0, [r4, #0]
 801478a:	4401      	add	r1, r0
 801478c:	1850      	adds	r0, r2, r1
 801478e:	4283      	cmp	r3, r0
 8014790:	6011      	str	r1, [r2, #0]
 8014792:	d1e0      	bne.n	8014756 <_free_r+0x22>
 8014794:	6818      	ldr	r0, [r3, #0]
 8014796:	685b      	ldr	r3, [r3, #4]
 8014798:	6053      	str	r3, [r2, #4]
 801479a:	4408      	add	r0, r1
 801479c:	6010      	str	r0, [r2, #0]
 801479e:	e7da      	b.n	8014756 <_free_r+0x22>
 80147a0:	d902      	bls.n	80147a8 <_free_r+0x74>
 80147a2:	230c      	movs	r3, #12
 80147a4:	602b      	str	r3, [r5, #0]
 80147a6:	e7d6      	b.n	8014756 <_free_r+0x22>
 80147a8:	6820      	ldr	r0, [r4, #0]
 80147aa:	1821      	adds	r1, r4, r0
 80147ac:	428b      	cmp	r3, r1
 80147ae:	bf04      	itt	eq
 80147b0:	6819      	ldreq	r1, [r3, #0]
 80147b2:	685b      	ldreq	r3, [r3, #4]
 80147b4:	6063      	str	r3, [r4, #4]
 80147b6:	bf04      	itt	eq
 80147b8:	1809      	addeq	r1, r1, r0
 80147ba:	6021      	streq	r1, [r4, #0]
 80147bc:	6054      	str	r4, [r2, #4]
 80147be:	e7ca      	b.n	8014756 <_free_r+0x22>
 80147c0:	bd38      	pop	{r3, r4, r5, pc}
 80147c2:	bf00      	nop
 80147c4:	200092d4 	.word	0x200092d4

080147c8 <_malloc_usable_size_r>:
 80147c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147cc:	1f18      	subs	r0, r3, #4
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	bfbc      	itt	lt
 80147d2:	580b      	ldrlt	r3, [r1, r0]
 80147d4:	18c0      	addlt	r0, r0, r3
 80147d6:	4770      	bx	lr

080147d8 <__ssputs_r>:
 80147d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147dc:	688e      	ldr	r6, [r1, #8]
 80147de:	461f      	mov	r7, r3
 80147e0:	42be      	cmp	r6, r7
 80147e2:	680b      	ldr	r3, [r1, #0]
 80147e4:	4682      	mov	sl, r0
 80147e6:	460c      	mov	r4, r1
 80147e8:	4690      	mov	r8, r2
 80147ea:	d82d      	bhi.n	8014848 <__ssputs_r+0x70>
 80147ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80147f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80147f4:	d026      	beq.n	8014844 <__ssputs_r+0x6c>
 80147f6:	6965      	ldr	r5, [r4, #20]
 80147f8:	6909      	ldr	r1, [r1, #16]
 80147fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147fe:	eba3 0901 	sub.w	r9, r3, r1
 8014802:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014806:	1c7b      	adds	r3, r7, #1
 8014808:	444b      	add	r3, r9
 801480a:	106d      	asrs	r5, r5, #1
 801480c:	429d      	cmp	r5, r3
 801480e:	bf38      	it	cc
 8014810:	461d      	movcc	r5, r3
 8014812:	0553      	lsls	r3, r2, #21
 8014814:	d527      	bpl.n	8014866 <__ssputs_r+0x8e>
 8014816:	4629      	mov	r1, r5
 8014818:	f7ff fb58 	bl	8013ecc <_malloc_r>
 801481c:	4606      	mov	r6, r0
 801481e:	b360      	cbz	r0, 801487a <__ssputs_r+0xa2>
 8014820:	6921      	ldr	r1, [r4, #16]
 8014822:	464a      	mov	r2, r9
 8014824:	f7ff ff4d 	bl	80146c2 <memcpy>
 8014828:	89a3      	ldrh	r3, [r4, #12]
 801482a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801482e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014832:	81a3      	strh	r3, [r4, #12]
 8014834:	6126      	str	r6, [r4, #16]
 8014836:	6165      	str	r5, [r4, #20]
 8014838:	444e      	add	r6, r9
 801483a:	eba5 0509 	sub.w	r5, r5, r9
 801483e:	6026      	str	r6, [r4, #0]
 8014840:	60a5      	str	r5, [r4, #8]
 8014842:	463e      	mov	r6, r7
 8014844:	42be      	cmp	r6, r7
 8014846:	d900      	bls.n	801484a <__ssputs_r+0x72>
 8014848:	463e      	mov	r6, r7
 801484a:	6820      	ldr	r0, [r4, #0]
 801484c:	4632      	mov	r2, r6
 801484e:	4641      	mov	r1, r8
 8014850:	f7ff fe54 	bl	80144fc <memmove>
 8014854:	68a3      	ldr	r3, [r4, #8]
 8014856:	1b9b      	subs	r3, r3, r6
 8014858:	60a3      	str	r3, [r4, #8]
 801485a:	6823      	ldr	r3, [r4, #0]
 801485c:	4433      	add	r3, r6
 801485e:	6023      	str	r3, [r4, #0]
 8014860:	2000      	movs	r0, #0
 8014862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014866:	462a      	mov	r2, r5
 8014868:	f7ff fc30 	bl	80140cc <_realloc_r>
 801486c:	4606      	mov	r6, r0
 801486e:	2800      	cmp	r0, #0
 8014870:	d1e0      	bne.n	8014834 <__ssputs_r+0x5c>
 8014872:	6921      	ldr	r1, [r4, #16]
 8014874:	4650      	mov	r0, sl
 8014876:	f7ff ff5d 	bl	8014734 <_free_r>
 801487a:	230c      	movs	r3, #12
 801487c:	f8ca 3000 	str.w	r3, [sl]
 8014880:	89a3      	ldrh	r3, [r4, #12]
 8014882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014886:	81a3      	strh	r3, [r4, #12]
 8014888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801488c:	e7e9      	b.n	8014862 <__ssputs_r+0x8a>
	...

08014890 <_svfiprintf_r>:
 8014890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014894:	4698      	mov	r8, r3
 8014896:	898b      	ldrh	r3, [r1, #12]
 8014898:	061b      	lsls	r3, r3, #24
 801489a:	b09d      	sub	sp, #116	@ 0x74
 801489c:	4607      	mov	r7, r0
 801489e:	460d      	mov	r5, r1
 80148a0:	4614      	mov	r4, r2
 80148a2:	d510      	bpl.n	80148c6 <_svfiprintf_r+0x36>
 80148a4:	690b      	ldr	r3, [r1, #16]
 80148a6:	b973      	cbnz	r3, 80148c6 <_svfiprintf_r+0x36>
 80148a8:	2140      	movs	r1, #64	@ 0x40
 80148aa:	f7ff fb0f 	bl	8013ecc <_malloc_r>
 80148ae:	6028      	str	r0, [r5, #0]
 80148b0:	6128      	str	r0, [r5, #16]
 80148b2:	b930      	cbnz	r0, 80148c2 <_svfiprintf_r+0x32>
 80148b4:	230c      	movs	r3, #12
 80148b6:	603b      	str	r3, [r7, #0]
 80148b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80148bc:	b01d      	add	sp, #116	@ 0x74
 80148be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c2:	2340      	movs	r3, #64	@ 0x40
 80148c4:	616b      	str	r3, [r5, #20]
 80148c6:	2300      	movs	r3, #0
 80148c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80148ca:	2320      	movs	r3, #32
 80148cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80148d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80148d4:	2330      	movs	r3, #48	@ 0x30
 80148d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014a74 <_svfiprintf_r+0x1e4>
 80148da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80148de:	f04f 0901 	mov.w	r9, #1
 80148e2:	4623      	mov	r3, r4
 80148e4:	469a      	mov	sl, r3
 80148e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148ea:	b10a      	cbz	r2, 80148f0 <_svfiprintf_r+0x60>
 80148ec:	2a25      	cmp	r2, #37	@ 0x25
 80148ee:	d1f9      	bne.n	80148e4 <_svfiprintf_r+0x54>
 80148f0:	ebba 0b04 	subs.w	fp, sl, r4
 80148f4:	d00b      	beq.n	801490e <_svfiprintf_r+0x7e>
 80148f6:	465b      	mov	r3, fp
 80148f8:	4622      	mov	r2, r4
 80148fa:	4629      	mov	r1, r5
 80148fc:	4638      	mov	r0, r7
 80148fe:	f7ff ff6b 	bl	80147d8 <__ssputs_r>
 8014902:	3001      	adds	r0, #1
 8014904:	f000 80a7 	beq.w	8014a56 <_svfiprintf_r+0x1c6>
 8014908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801490a:	445a      	add	r2, fp
 801490c:	9209      	str	r2, [sp, #36]	@ 0x24
 801490e:	f89a 3000 	ldrb.w	r3, [sl]
 8014912:	2b00      	cmp	r3, #0
 8014914:	f000 809f 	beq.w	8014a56 <_svfiprintf_r+0x1c6>
 8014918:	2300      	movs	r3, #0
 801491a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801491e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014922:	f10a 0a01 	add.w	sl, sl, #1
 8014926:	9304      	str	r3, [sp, #16]
 8014928:	9307      	str	r3, [sp, #28]
 801492a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801492e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014930:	4654      	mov	r4, sl
 8014932:	2205      	movs	r2, #5
 8014934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014938:	484e      	ldr	r0, [pc, #312]	@ (8014a74 <_svfiprintf_r+0x1e4>)
 801493a:	f7eb fc69 	bl	8000210 <memchr>
 801493e:	9a04      	ldr	r2, [sp, #16]
 8014940:	b9d8      	cbnz	r0, 801497a <_svfiprintf_r+0xea>
 8014942:	06d0      	lsls	r0, r2, #27
 8014944:	bf44      	itt	mi
 8014946:	2320      	movmi	r3, #32
 8014948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801494c:	0711      	lsls	r1, r2, #28
 801494e:	bf44      	itt	mi
 8014950:	232b      	movmi	r3, #43	@ 0x2b
 8014952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014956:	f89a 3000 	ldrb.w	r3, [sl]
 801495a:	2b2a      	cmp	r3, #42	@ 0x2a
 801495c:	d015      	beq.n	801498a <_svfiprintf_r+0xfa>
 801495e:	9a07      	ldr	r2, [sp, #28]
 8014960:	4654      	mov	r4, sl
 8014962:	2000      	movs	r0, #0
 8014964:	f04f 0c0a 	mov.w	ip, #10
 8014968:	4621      	mov	r1, r4
 801496a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801496e:	3b30      	subs	r3, #48	@ 0x30
 8014970:	2b09      	cmp	r3, #9
 8014972:	d94b      	bls.n	8014a0c <_svfiprintf_r+0x17c>
 8014974:	b1b0      	cbz	r0, 80149a4 <_svfiprintf_r+0x114>
 8014976:	9207      	str	r2, [sp, #28]
 8014978:	e014      	b.n	80149a4 <_svfiprintf_r+0x114>
 801497a:	eba0 0308 	sub.w	r3, r0, r8
 801497e:	fa09 f303 	lsl.w	r3, r9, r3
 8014982:	4313      	orrs	r3, r2
 8014984:	9304      	str	r3, [sp, #16]
 8014986:	46a2      	mov	sl, r4
 8014988:	e7d2      	b.n	8014930 <_svfiprintf_r+0xa0>
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	1d19      	adds	r1, r3, #4
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	9103      	str	r1, [sp, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	bfbb      	ittet	lt
 8014996:	425b      	neglt	r3, r3
 8014998:	f042 0202 	orrlt.w	r2, r2, #2
 801499c:	9307      	strge	r3, [sp, #28]
 801499e:	9307      	strlt	r3, [sp, #28]
 80149a0:	bfb8      	it	lt
 80149a2:	9204      	strlt	r2, [sp, #16]
 80149a4:	7823      	ldrb	r3, [r4, #0]
 80149a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80149a8:	d10a      	bne.n	80149c0 <_svfiprintf_r+0x130>
 80149aa:	7863      	ldrb	r3, [r4, #1]
 80149ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80149ae:	d132      	bne.n	8014a16 <_svfiprintf_r+0x186>
 80149b0:	9b03      	ldr	r3, [sp, #12]
 80149b2:	1d1a      	adds	r2, r3, #4
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	9203      	str	r2, [sp, #12]
 80149b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80149bc:	3402      	adds	r4, #2
 80149be:	9305      	str	r3, [sp, #20]
 80149c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014a84 <_svfiprintf_r+0x1f4>
 80149c4:	7821      	ldrb	r1, [r4, #0]
 80149c6:	2203      	movs	r2, #3
 80149c8:	4650      	mov	r0, sl
 80149ca:	f7eb fc21 	bl	8000210 <memchr>
 80149ce:	b138      	cbz	r0, 80149e0 <_svfiprintf_r+0x150>
 80149d0:	9b04      	ldr	r3, [sp, #16]
 80149d2:	eba0 000a 	sub.w	r0, r0, sl
 80149d6:	2240      	movs	r2, #64	@ 0x40
 80149d8:	4082      	lsls	r2, r0
 80149da:	4313      	orrs	r3, r2
 80149dc:	3401      	adds	r4, #1
 80149de:	9304      	str	r3, [sp, #16]
 80149e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149e4:	4824      	ldr	r0, [pc, #144]	@ (8014a78 <_svfiprintf_r+0x1e8>)
 80149e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80149ea:	2206      	movs	r2, #6
 80149ec:	f7eb fc10 	bl	8000210 <memchr>
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d036      	beq.n	8014a62 <_svfiprintf_r+0x1d2>
 80149f4:	4b21      	ldr	r3, [pc, #132]	@ (8014a7c <_svfiprintf_r+0x1ec>)
 80149f6:	bb1b      	cbnz	r3, 8014a40 <_svfiprintf_r+0x1b0>
 80149f8:	9b03      	ldr	r3, [sp, #12]
 80149fa:	3307      	adds	r3, #7
 80149fc:	f023 0307 	bic.w	r3, r3, #7
 8014a00:	3308      	adds	r3, #8
 8014a02:	9303      	str	r3, [sp, #12]
 8014a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a06:	4433      	add	r3, r6
 8014a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a0a:	e76a      	b.n	80148e2 <_svfiprintf_r+0x52>
 8014a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a10:	460c      	mov	r4, r1
 8014a12:	2001      	movs	r0, #1
 8014a14:	e7a8      	b.n	8014968 <_svfiprintf_r+0xd8>
 8014a16:	2300      	movs	r3, #0
 8014a18:	3401      	adds	r4, #1
 8014a1a:	9305      	str	r3, [sp, #20]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	f04f 0c0a 	mov.w	ip, #10
 8014a22:	4620      	mov	r0, r4
 8014a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a28:	3a30      	subs	r2, #48	@ 0x30
 8014a2a:	2a09      	cmp	r2, #9
 8014a2c:	d903      	bls.n	8014a36 <_svfiprintf_r+0x1a6>
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d0c6      	beq.n	80149c0 <_svfiprintf_r+0x130>
 8014a32:	9105      	str	r1, [sp, #20]
 8014a34:	e7c4      	b.n	80149c0 <_svfiprintf_r+0x130>
 8014a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e7f0      	b.n	8014a22 <_svfiprintf_r+0x192>
 8014a40:	ab03      	add	r3, sp, #12
 8014a42:	9300      	str	r3, [sp, #0]
 8014a44:	462a      	mov	r2, r5
 8014a46:	4b0e      	ldr	r3, [pc, #56]	@ (8014a80 <_svfiprintf_r+0x1f0>)
 8014a48:	a904      	add	r1, sp, #16
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f3af 8000 	nop.w
 8014a50:	1c42      	adds	r2, r0, #1
 8014a52:	4606      	mov	r6, r0
 8014a54:	d1d6      	bne.n	8014a04 <_svfiprintf_r+0x174>
 8014a56:	89ab      	ldrh	r3, [r5, #12]
 8014a58:	065b      	lsls	r3, r3, #25
 8014a5a:	f53f af2d 	bmi.w	80148b8 <_svfiprintf_r+0x28>
 8014a5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014a60:	e72c      	b.n	80148bc <_svfiprintf_r+0x2c>
 8014a62:	ab03      	add	r3, sp, #12
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	462a      	mov	r2, r5
 8014a68:	4b05      	ldr	r3, [pc, #20]	@ (8014a80 <_svfiprintf_r+0x1f0>)
 8014a6a:	a904      	add	r1, sp, #16
 8014a6c:	4638      	mov	r0, r7
 8014a6e:	f000 f879 	bl	8014b64 <_printf_i>
 8014a72:	e7ed      	b.n	8014a50 <_svfiprintf_r+0x1c0>
 8014a74:	08015fa4 	.word	0x08015fa4
 8014a78:	08015fae 	.word	0x08015fae
 8014a7c:	00000000 	.word	0x00000000
 8014a80:	080147d9 	.word	0x080147d9
 8014a84:	08015faa 	.word	0x08015faa

08014a88 <_printf_common>:
 8014a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a8c:	4616      	mov	r6, r2
 8014a8e:	4698      	mov	r8, r3
 8014a90:	688a      	ldr	r2, [r1, #8]
 8014a92:	690b      	ldr	r3, [r1, #16]
 8014a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014a98:	4293      	cmp	r3, r2
 8014a9a:	bfb8      	it	lt
 8014a9c:	4613      	movlt	r3, r2
 8014a9e:	6033      	str	r3, [r6, #0]
 8014aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014aa4:	4607      	mov	r7, r0
 8014aa6:	460c      	mov	r4, r1
 8014aa8:	b10a      	cbz	r2, 8014aae <_printf_common+0x26>
 8014aaa:	3301      	adds	r3, #1
 8014aac:	6033      	str	r3, [r6, #0]
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	0699      	lsls	r1, r3, #26
 8014ab2:	bf42      	ittt	mi
 8014ab4:	6833      	ldrmi	r3, [r6, #0]
 8014ab6:	3302      	addmi	r3, #2
 8014ab8:	6033      	strmi	r3, [r6, #0]
 8014aba:	6825      	ldr	r5, [r4, #0]
 8014abc:	f015 0506 	ands.w	r5, r5, #6
 8014ac0:	d106      	bne.n	8014ad0 <_printf_common+0x48>
 8014ac2:	f104 0a19 	add.w	sl, r4, #25
 8014ac6:	68e3      	ldr	r3, [r4, #12]
 8014ac8:	6832      	ldr	r2, [r6, #0]
 8014aca:	1a9b      	subs	r3, r3, r2
 8014acc:	42ab      	cmp	r3, r5
 8014ace:	dc26      	bgt.n	8014b1e <_printf_common+0x96>
 8014ad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014ad4:	6822      	ldr	r2, [r4, #0]
 8014ad6:	3b00      	subs	r3, #0
 8014ad8:	bf18      	it	ne
 8014ada:	2301      	movne	r3, #1
 8014adc:	0692      	lsls	r2, r2, #26
 8014ade:	d42b      	bmi.n	8014b38 <_printf_common+0xb0>
 8014ae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014ae4:	4641      	mov	r1, r8
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	47c8      	blx	r9
 8014aea:	3001      	adds	r0, #1
 8014aec:	d01e      	beq.n	8014b2c <_printf_common+0xa4>
 8014aee:	6823      	ldr	r3, [r4, #0]
 8014af0:	6922      	ldr	r2, [r4, #16]
 8014af2:	f003 0306 	and.w	r3, r3, #6
 8014af6:	2b04      	cmp	r3, #4
 8014af8:	bf02      	ittt	eq
 8014afa:	68e5      	ldreq	r5, [r4, #12]
 8014afc:	6833      	ldreq	r3, [r6, #0]
 8014afe:	1aed      	subeq	r5, r5, r3
 8014b00:	68a3      	ldr	r3, [r4, #8]
 8014b02:	bf0c      	ite	eq
 8014b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b08:	2500      	movne	r5, #0
 8014b0a:	4293      	cmp	r3, r2
 8014b0c:	bfc4      	itt	gt
 8014b0e:	1a9b      	subgt	r3, r3, r2
 8014b10:	18ed      	addgt	r5, r5, r3
 8014b12:	2600      	movs	r6, #0
 8014b14:	341a      	adds	r4, #26
 8014b16:	42b5      	cmp	r5, r6
 8014b18:	d11a      	bne.n	8014b50 <_printf_common+0xc8>
 8014b1a:	2000      	movs	r0, #0
 8014b1c:	e008      	b.n	8014b30 <_printf_common+0xa8>
 8014b1e:	2301      	movs	r3, #1
 8014b20:	4652      	mov	r2, sl
 8014b22:	4641      	mov	r1, r8
 8014b24:	4638      	mov	r0, r7
 8014b26:	47c8      	blx	r9
 8014b28:	3001      	adds	r0, #1
 8014b2a:	d103      	bne.n	8014b34 <_printf_common+0xac>
 8014b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b34:	3501      	adds	r5, #1
 8014b36:	e7c6      	b.n	8014ac6 <_printf_common+0x3e>
 8014b38:	18e1      	adds	r1, r4, r3
 8014b3a:	1c5a      	adds	r2, r3, #1
 8014b3c:	2030      	movs	r0, #48	@ 0x30
 8014b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014b42:	4422      	add	r2, r4
 8014b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014b4c:	3302      	adds	r3, #2
 8014b4e:	e7c7      	b.n	8014ae0 <_printf_common+0x58>
 8014b50:	2301      	movs	r3, #1
 8014b52:	4622      	mov	r2, r4
 8014b54:	4641      	mov	r1, r8
 8014b56:	4638      	mov	r0, r7
 8014b58:	47c8      	blx	r9
 8014b5a:	3001      	adds	r0, #1
 8014b5c:	d0e6      	beq.n	8014b2c <_printf_common+0xa4>
 8014b5e:	3601      	adds	r6, #1
 8014b60:	e7d9      	b.n	8014b16 <_printf_common+0x8e>
	...

08014b64 <_printf_i>:
 8014b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b68:	7e0f      	ldrb	r7, [r1, #24]
 8014b6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014b6c:	2f78      	cmp	r7, #120	@ 0x78
 8014b6e:	4691      	mov	r9, r2
 8014b70:	4680      	mov	r8, r0
 8014b72:	460c      	mov	r4, r1
 8014b74:	469a      	mov	sl, r3
 8014b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014b7a:	d807      	bhi.n	8014b8c <_printf_i+0x28>
 8014b7c:	2f62      	cmp	r7, #98	@ 0x62
 8014b7e:	d80a      	bhi.n	8014b96 <_printf_i+0x32>
 8014b80:	2f00      	cmp	r7, #0
 8014b82:	f000 80d2 	beq.w	8014d2a <_printf_i+0x1c6>
 8014b86:	2f58      	cmp	r7, #88	@ 0x58
 8014b88:	f000 80b9 	beq.w	8014cfe <_printf_i+0x19a>
 8014b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014b94:	e03a      	b.n	8014c0c <_printf_i+0xa8>
 8014b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014b9a:	2b15      	cmp	r3, #21
 8014b9c:	d8f6      	bhi.n	8014b8c <_printf_i+0x28>
 8014b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8014ba4 <_printf_i+0x40>)
 8014ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014ba4:	08014bfd 	.word	0x08014bfd
 8014ba8:	08014c11 	.word	0x08014c11
 8014bac:	08014b8d 	.word	0x08014b8d
 8014bb0:	08014b8d 	.word	0x08014b8d
 8014bb4:	08014b8d 	.word	0x08014b8d
 8014bb8:	08014b8d 	.word	0x08014b8d
 8014bbc:	08014c11 	.word	0x08014c11
 8014bc0:	08014b8d 	.word	0x08014b8d
 8014bc4:	08014b8d 	.word	0x08014b8d
 8014bc8:	08014b8d 	.word	0x08014b8d
 8014bcc:	08014b8d 	.word	0x08014b8d
 8014bd0:	08014d11 	.word	0x08014d11
 8014bd4:	08014c3b 	.word	0x08014c3b
 8014bd8:	08014ccb 	.word	0x08014ccb
 8014bdc:	08014b8d 	.word	0x08014b8d
 8014be0:	08014b8d 	.word	0x08014b8d
 8014be4:	08014d33 	.word	0x08014d33
 8014be8:	08014b8d 	.word	0x08014b8d
 8014bec:	08014c3b 	.word	0x08014c3b
 8014bf0:	08014b8d 	.word	0x08014b8d
 8014bf4:	08014b8d 	.word	0x08014b8d
 8014bf8:	08014cd3 	.word	0x08014cd3
 8014bfc:	6833      	ldr	r3, [r6, #0]
 8014bfe:	1d1a      	adds	r2, r3, #4
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	6032      	str	r2, [r6, #0]
 8014c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	e09d      	b.n	8014d4c <_printf_i+0x1e8>
 8014c10:	6833      	ldr	r3, [r6, #0]
 8014c12:	6820      	ldr	r0, [r4, #0]
 8014c14:	1d19      	adds	r1, r3, #4
 8014c16:	6031      	str	r1, [r6, #0]
 8014c18:	0606      	lsls	r6, r0, #24
 8014c1a:	d501      	bpl.n	8014c20 <_printf_i+0xbc>
 8014c1c:	681d      	ldr	r5, [r3, #0]
 8014c1e:	e003      	b.n	8014c28 <_printf_i+0xc4>
 8014c20:	0645      	lsls	r5, r0, #25
 8014c22:	d5fb      	bpl.n	8014c1c <_printf_i+0xb8>
 8014c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014c28:	2d00      	cmp	r5, #0
 8014c2a:	da03      	bge.n	8014c34 <_printf_i+0xd0>
 8014c2c:	232d      	movs	r3, #45	@ 0x2d
 8014c2e:	426d      	negs	r5, r5
 8014c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014c34:	4859      	ldr	r0, [pc, #356]	@ (8014d9c <_printf_i+0x238>)
 8014c36:	230a      	movs	r3, #10
 8014c38:	e011      	b.n	8014c5e <_printf_i+0xfa>
 8014c3a:	6821      	ldr	r1, [r4, #0]
 8014c3c:	6833      	ldr	r3, [r6, #0]
 8014c3e:	0608      	lsls	r0, r1, #24
 8014c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8014c44:	d402      	bmi.n	8014c4c <_printf_i+0xe8>
 8014c46:	0649      	lsls	r1, r1, #25
 8014c48:	bf48      	it	mi
 8014c4a:	b2ad      	uxthmi	r5, r5
 8014c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8014c4e:	4853      	ldr	r0, [pc, #332]	@ (8014d9c <_printf_i+0x238>)
 8014c50:	6033      	str	r3, [r6, #0]
 8014c52:	bf14      	ite	ne
 8014c54:	230a      	movne	r3, #10
 8014c56:	2308      	moveq	r3, #8
 8014c58:	2100      	movs	r1, #0
 8014c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014c5e:	6866      	ldr	r6, [r4, #4]
 8014c60:	60a6      	str	r6, [r4, #8]
 8014c62:	2e00      	cmp	r6, #0
 8014c64:	bfa2      	ittt	ge
 8014c66:	6821      	ldrge	r1, [r4, #0]
 8014c68:	f021 0104 	bicge.w	r1, r1, #4
 8014c6c:	6021      	strge	r1, [r4, #0]
 8014c6e:	b90d      	cbnz	r5, 8014c74 <_printf_i+0x110>
 8014c70:	2e00      	cmp	r6, #0
 8014c72:	d04b      	beq.n	8014d0c <_printf_i+0x1a8>
 8014c74:	4616      	mov	r6, r2
 8014c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8014c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8014c7e:	5dc7      	ldrb	r7, [r0, r7]
 8014c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014c84:	462f      	mov	r7, r5
 8014c86:	42bb      	cmp	r3, r7
 8014c88:	460d      	mov	r5, r1
 8014c8a:	d9f4      	bls.n	8014c76 <_printf_i+0x112>
 8014c8c:	2b08      	cmp	r3, #8
 8014c8e:	d10b      	bne.n	8014ca8 <_printf_i+0x144>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	07df      	lsls	r7, r3, #31
 8014c94:	d508      	bpl.n	8014ca8 <_printf_i+0x144>
 8014c96:	6923      	ldr	r3, [r4, #16]
 8014c98:	6861      	ldr	r1, [r4, #4]
 8014c9a:	4299      	cmp	r1, r3
 8014c9c:	bfde      	ittt	le
 8014c9e:	2330      	movle	r3, #48	@ 0x30
 8014ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014ca4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014ca8:	1b92      	subs	r2, r2, r6
 8014caa:	6122      	str	r2, [r4, #16]
 8014cac:	f8cd a000 	str.w	sl, [sp]
 8014cb0:	464b      	mov	r3, r9
 8014cb2:	aa03      	add	r2, sp, #12
 8014cb4:	4621      	mov	r1, r4
 8014cb6:	4640      	mov	r0, r8
 8014cb8:	f7ff fee6 	bl	8014a88 <_printf_common>
 8014cbc:	3001      	adds	r0, #1
 8014cbe:	d14a      	bne.n	8014d56 <_printf_i+0x1f2>
 8014cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cc4:	b004      	add	sp, #16
 8014cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cca:	6823      	ldr	r3, [r4, #0]
 8014ccc:	f043 0320 	orr.w	r3, r3, #32
 8014cd0:	6023      	str	r3, [r4, #0]
 8014cd2:	4833      	ldr	r0, [pc, #204]	@ (8014da0 <_printf_i+0x23c>)
 8014cd4:	2778      	movs	r7, #120	@ 0x78
 8014cd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	6831      	ldr	r1, [r6, #0]
 8014cde:	061f      	lsls	r7, r3, #24
 8014ce0:	f851 5b04 	ldr.w	r5, [r1], #4
 8014ce4:	d402      	bmi.n	8014cec <_printf_i+0x188>
 8014ce6:	065f      	lsls	r7, r3, #25
 8014ce8:	bf48      	it	mi
 8014cea:	b2ad      	uxthmi	r5, r5
 8014cec:	6031      	str	r1, [r6, #0]
 8014cee:	07d9      	lsls	r1, r3, #31
 8014cf0:	bf44      	itt	mi
 8014cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8014cf6:	6023      	strmi	r3, [r4, #0]
 8014cf8:	b11d      	cbz	r5, 8014d02 <_printf_i+0x19e>
 8014cfa:	2310      	movs	r3, #16
 8014cfc:	e7ac      	b.n	8014c58 <_printf_i+0xf4>
 8014cfe:	4827      	ldr	r0, [pc, #156]	@ (8014d9c <_printf_i+0x238>)
 8014d00:	e7e9      	b.n	8014cd6 <_printf_i+0x172>
 8014d02:	6823      	ldr	r3, [r4, #0]
 8014d04:	f023 0320 	bic.w	r3, r3, #32
 8014d08:	6023      	str	r3, [r4, #0]
 8014d0a:	e7f6      	b.n	8014cfa <_printf_i+0x196>
 8014d0c:	4616      	mov	r6, r2
 8014d0e:	e7bd      	b.n	8014c8c <_printf_i+0x128>
 8014d10:	6833      	ldr	r3, [r6, #0]
 8014d12:	6825      	ldr	r5, [r4, #0]
 8014d14:	6961      	ldr	r1, [r4, #20]
 8014d16:	1d18      	adds	r0, r3, #4
 8014d18:	6030      	str	r0, [r6, #0]
 8014d1a:	062e      	lsls	r6, r5, #24
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	d501      	bpl.n	8014d24 <_printf_i+0x1c0>
 8014d20:	6019      	str	r1, [r3, #0]
 8014d22:	e002      	b.n	8014d2a <_printf_i+0x1c6>
 8014d24:	0668      	lsls	r0, r5, #25
 8014d26:	d5fb      	bpl.n	8014d20 <_printf_i+0x1bc>
 8014d28:	8019      	strh	r1, [r3, #0]
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	6123      	str	r3, [r4, #16]
 8014d2e:	4616      	mov	r6, r2
 8014d30:	e7bc      	b.n	8014cac <_printf_i+0x148>
 8014d32:	6833      	ldr	r3, [r6, #0]
 8014d34:	1d1a      	adds	r2, r3, #4
 8014d36:	6032      	str	r2, [r6, #0]
 8014d38:	681e      	ldr	r6, [r3, #0]
 8014d3a:	6862      	ldr	r2, [r4, #4]
 8014d3c:	2100      	movs	r1, #0
 8014d3e:	4630      	mov	r0, r6
 8014d40:	f7eb fa66 	bl	8000210 <memchr>
 8014d44:	b108      	cbz	r0, 8014d4a <_printf_i+0x1e6>
 8014d46:	1b80      	subs	r0, r0, r6
 8014d48:	6060      	str	r0, [r4, #4]
 8014d4a:	6863      	ldr	r3, [r4, #4]
 8014d4c:	6123      	str	r3, [r4, #16]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014d54:	e7aa      	b.n	8014cac <_printf_i+0x148>
 8014d56:	6923      	ldr	r3, [r4, #16]
 8014d58:	4632      	mov	r2, r6
 8014d5a:	4649      	mov	r1, r9
 8014d5c:	4640      	mov	r0, r8
 8014d5e:	47d0      	blx	sl
 8014d60:	3001      	adds	r0, #1
 8014d62:	d0ad      	beq.n	8014cc0 <_printf_i+0x15c>
 8014d64:	6823      	ldr	r3, [r4, #0]
 8014d66:	079b      	lsls	r3, r3, #30
 8014d68:	d413      	bmi.n	8014d92 <_printf_i+0x22e>
 8014d6a:	68e0      	ldr	r0, [r4, #12]
 8014d6c:	9b03      	ldr	r3, [sp, #12]
 8014d6e:	4298      	cmp	r0, r3
 8014d70:	bfb8      	it	lt
 8014d72:	4618      	movlt	r0, r3
 8014d74:	e7a6      	b.n	8014cc4 <_printf_i+0x160>
 8014d76:	2301      	movs	r3, #1
 8014d78:	4632      	mov	r2, r6
 8014d7a:	4649      	mov	r1, r9
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	47d0      	blx	sl
 8014d80:	3001      	adds	r0, #1
 8014d82:	d09d      	beq.n	8014cc0 <_printf_i+0x15c>
 8014d84:	3501      	adds	r5, #1
 8014d86:	68e3      	ldr	r3, [r4, #12]
 8014d88:	9903      	ldr	r1, [sp, #12]
 8014d8a:	1a5b      	subs	r3, r3, r1
 8014d8c:	42ab      	cmp	r3, r5
 8014d8e:	dcf2      	bgt.n	8014d76 <_printf_i+0x212>
 8014d90:	e7eb      	b.n	8014d6a <_printf_i+0x206>
 8014d92:	2500      	movs	r5, #0
 8014d94:	f104 0619 	add.w	r6, r4, #25
 8014d98:	e7f5      	b.n	8014d86 <_printf_i+0x222>
 8014d9a:	bf00      	nop
 8014d9c:	08015fb5 	.word	0x08015fb5
 8014da0:	08015fc6 	.word	0x08015fc6

08014da4 <__sflush_r>:
 8014da4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dac:	0716      	lsls	r6, r2, #28
 8014dae:	4605      	mov	r5, r0
 8014db0:	460c      	mov	r4, r1
 8014db2:	d454      	bmi.n	8014e5e <__sflush_r+0xba>
 8014db4:	684b      	ldr	r3, [r1, #4]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	dc02      	bgt.n	8014dc0 <__sflush_r+0x1c>
 8014dba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	dd48      	ble.n	8014e52 <__sflush_r+0xae>
 8014dc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014dc2:	2e00      	cmp	r6, #0
 8014dc4:	d045      	beq.n	8014e52 <__sflush_r+0xae>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014dcc:	682f      	ldr	r7, [r5, #0]
 8014dce:	6a21      	ldr	r1, [r4, #32]
 8014dd0:	602b      	str	r3, [r5, #0]
 8014dd2:	d030      	beq.n	8014e36 <__sflush_r+0x92>
 8014dd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014dd6:	89a3      	ldrh	r3, [r4, #12]
 8014dd8:	0759      	lsls	r1, r3, #29
 8014dda:	d505      	bpl.n	8014de8 <__sflush_r+0x44>
 8014ddc:	6863      	ldr	r3, [r4, #4]
 8014dde:	1ad2      	subs	r2, r2, r3
 8014de0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014de2:	b10b      	cbz	r3, 8014de8 <__sflush_r+0x44>
 8014de4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014de6:	1ad2      	subs	r2, r2, r3
 8014de8:	2300      	movs	r3, #0
 8014dea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014dec:	6a21      	ldr	r1, [r4, #32]
 8014dee:	4628      	mov	r0, r5
 8014df0:	47b0      	blx	r6
 8014df2:	1c43      	adds	r3, r0, #1
 8014df4:	89a3      	ldrh	r3, [r4, #12]
 8014df6:	d106      	bne.n	8014e06 <__sflush_r+0x62>
 8014df8:	6829      	ldr	r1, [r5, #0]
 8014dfa:	291d      	cmp	r1, #29
 8014dfc:	d82b      	bhi.n	8014e56 <__sflush_r+0xb2>
 8014dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8014ea8 <__sflush_r+0x104>)
 8014e00:	410a      	asrs	r2, r1
 8014e02:	07d6      	lsls	r6, r2, #31
 8014e04:	d427      	bmi.n	8014e56 <__sflush_r+0xb2>
 8014e06:	2200      	movs	r2, #0
 8014e08:	6062      	str	r2, [r4, #4]
 8014e0a:	04d9      	lsls	r1, r3, #19
 8014e0c:	6922      	ldr	r2, [r4, #16]
 8014e0e:	6022      	str	r2, [r4, #0]
 8014e10:	d504      	bpl.n	8014e1c <__sflush_r+0x78>
 8014e12:	1c42      	adds	r2, r0, #1
 8014e14:	d101      	bne.n	8014e1a <__sflush_r+0x76>
 8014e16:	682b      	ldr	r3, [r5, #0]
 8014e18:	b903      	cbnz	r3, 8014e1c <__sflush_r+0x78>
 8014e1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e1e:	602f      	str	r7, [r5, #0]
 8014e20:	b1b9      	cbz	r1, 8014e52 <__sflush_r+0xae>
 8014e22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e26:	4299      	cmp	r1, r3
 8014e28:	d002      	beq.n	8014e30 <__sflush_r+0x8c>
 8014e2a:	4628      	mov	r0, r5
 8014e2c:	f7ff fc82 	bl	8014734 <_free_r>
 8014e30:	2300      	movs	r3, #0
 8014e32:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e34:	e00d      	b.n	8014e52 <__sflush_r+0xae>
 8014e36:	2301      	movs	r3, #1
 8014e38:	4628      	mov	r0, r5
 8014e3a:	47b0      	blx	r6
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	1c50      	adds	r0, r2, #1
 8014e40:	d1c9      	bne.n	8014dd6 <__sflush_r+0x32>
 8014e42:	682b      	ldr	r3, [r5, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d0c6      	beq.n	8014dd6 <__sflush_r+0x32>
 8014e48:	2b1d      	cmp	r3, #29
 8014e4a:	d001      	beq.n	8014e50 <__sflush_r+0xac>
 8014e4c:	2b16      	cmp	r3, #22
 8014e4e:	d11e      	bne.n	8014e8e <__sflush_r+0xea>
 8014e50:	602f      	str	r7, [r5, #0]
 8014e52:	2000      	movs	r0, #0
 8014e54:	e022      	b.n	8014e9c <__sflush_r+0xf8>
 8014e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e5a:	b21b      	sxth	r3, r3
 8014e5c:	e01b      	b.n	8014e96 <__sflush_r+0xf2>
 8014e5e:	690f      	ldr	r7, [r1, #16]
 8014e60:	2f00      	cmp	r7, #0
 8014e62:	d0f6      	beq.n	8014e52 <__sflush_r+0xae>
 8014e64:	0793      	lsls	r3, r2, #30
 8014e66:	680e      	ldr	r6, [r1, #0]
 8014e68:	bf08      	it	eq
 8014e6a:	694b      	ldreq	r3, [r1, #20]
 8014e6c:	600f      	str	r7, [r1, #0]
 8014e6e:	bf18      	it	ne
 8014e70:	2300      	movne	r3, #0
 8014e72:	eba6 0807 	sub.w	r8, r6, r7
 8014e76:	608b      	str	r3, [r1, #8]
 8014e78:	f1b8 0f00 	cmp.w	r8, #0
 8014e7c:	dde9      	ble.n	8014e52 <__sflush_r+0xae>
 8014e7e:	6a21      	ldr	r1, [r4, #32]
 8014e80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014e82:	4643      	mov	r3, r8
 8014e84:	463a      	mov	r2, r7
 8014e86:	4628      	mov	r0, r5
 8014e88:	47b0      	blx	r6
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	dc08      	bgt.n	8014ea0 <__sflush_r+0xfc>
 8014e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e96:	81a3      	strh	r3, [r4, #12]
 8014e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ea0:	4407      	add	r7, r0
 8014ea2:	eba8 0800 	sub.w	r8, r8, r0
 8014ea6:	e7e7      	b.n	8014e78 <__sflush_r+0xd4>
 8014ea8:	dfbffffe 	.word	0xdfbffffe

08014eac <_fflush_r>:
 8014eac:	b538      	push	{r3, r4, r5, lr}
 8014eae:	690b      	ldr	r3, [r1, #16]
 8014eb0:	4605      	mov	r5, r0
 8014eb2:	460c      	mov	r4, r1
 8014eb4:	b913      	cbnz	r3, 8014ebc <_fflush_r+0x10>
 8014eb6:	2500      	movs	r5, #0
 8014eb8:	4628      	mov	r0, r5
 8014eba:	bd38      	pop	{r3, r4, r5, pc}
 8014ebc:	b118      	cbz	r0, 8014ec6 <_fflush_r+0x1a>
 8014ebe:	6a03      	ldr	r3, [r0, #32]
 8014ec0:	b90b      	cbnz	r3, 8014ec6 <_fflush_r+0x1a>
 8014ec2:	f7ff fa35 	bl	8014330 <__sinit>
 8014ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d0f3      	beq.n	8014eb6 <_fflush_r+0xa>
 8014ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014ed0:	07d0      	lsls	r0, r2, #31
 8014ed2:	d404      	bmi.n	8014ede <_fflush_r+0x32>
 8014ed4:	0599      	lsls	r1, r3, #22
 8014ed6:	d402      	bmi.n	8014ede <_fflush_r+0x32>
 8014ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014eda:	f7ff fbe8 	bl	80146ae <__retarget_lock_acquire_recursive>
 8014ede:	4628      	mov	r0, r5
 8014ee0:	4621      	mov	r1, r4
 8014ee2:	f7ff ff5f 	bl	8014da4 <__sflush_r>
 8014ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ee8:	07da      	lsls	r2, r3, #31
 8014eea:	4605      	mov	r5, r0
 8014eec:	d4e4      	bmi.n	8014eb8 <_fflush_r+0xc>
 8014eee:	89a3      	ldrh	r3, [r4, #12]
 8014ef0:	059b      	lsls	r3, r3, #22
 8014ef2:	d4e1      	bmi.n	8014eb8 <_fflush_r+0xc>
 8014ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ef6:	f7ff fbdb 	bl	80146b0 <__retarget_lock_release_recursive>
 8014efa:	e7dd      	b.n	8014eb8 <_fflush_r+0xc>

08014efc <fiprintf>:
 8014efc:	b40e      	push	{r1, r2, r3}
 8014efe:	b503      	push	{r0, r1, lr}
 8014f00:	4601      	mov	r1, r0
 8014f02:	ab03      	add	r3, sp, #12
 8014f04:	4805      	ldr	r0, [pc, #20]	@ (8014f1c <fiprintf+0x20>)
 8014f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f0a:	6800      	ldr	r0, [r0, #0]
 8014f0c:	9301      	str	r3, [sp, #4]
 8014f0e:	f000 f837 	bl	8014f80 <_vfiprintf_r>
 8014f12:	b002      	add	sp, #8
 8014f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f18:	b003      	add	sp, #12
 8014f1a:	4770      	bx	lr
 8014f1c:	20000134 	.word	0x20000134

08014f20 <abort>:
 8014f20:	b508      	push	{r3, lr}
 8014f22:	2006      	movs	r0, #6
 8014f24:	f000 fa00 	bl	8015328 <raise>
 8014f28:	2001      	movs	r0, #1
 8014f2a:	f7ed fd4b 	bl	80029c4 <_exit>

08014f2e <__sfputc_r>:
 8014f2e:	6893      	ldr	r3, [r2, #8]
 8014f30:	3b01      	subs	r3, #1
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	b410      	push	{r4}
 8014f36:	6093      	str	r3, [r2, #8]
 8014f38:	da08      	bge.n	8014f4c <__sfputc_r+0x1e>
 8014f3a:	6994      	ldr	r4, [r2, #24]
 8014f3c:	42a3      	cmp	r3, r4
 8014f3e:	db01      	blt.n	8014f44 <__sfputc_r+0x16>
 8014f40:	290a      	cmp	r1, #10
 8014f42:	d103      	bne.n	8014f4c <__sfputc_r+0x1e>
 8014f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f48:	f000 b932 	b.w	80151b0 <__swbuf_r>
 8014f4c:	6813      	ldr	r3, [r2, #0]
 8014f4e:	1c58      	adds	r0, r3, #1
 8014f50:	6010      	str	r0, [r2, #0]
 8014f52:	7019      	strb	r1, [r3, #0]
 8014f54:	4608      	mov	r0, r1
 8014f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <__sfputs_r>:
 8014f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f5e:	4606      	mov	r6, r0
 8014f60:	460f      	mov	r7, r1
 8014f62:	4614      	mov	r4, r2
 8014f64:	18d5      	adds	r5, r2, r3
 8014f66:	42ac      	cmp	r4, r5
 8014f68:	d101      	bne.n	8014f6e <__sfputs_r+0x12>
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	e007      	b.n	8014f7e <__sfputs_r+0x22>
 8014f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f72:	463a      	mov	r2, r7
 8014f74:	4630      	mov	r0, r6
 8014f76:	f7ff ffda 	bl	8014f2e <__sfputc_r>
 8014f7a:	1c43      	adds	r3, r0, #1
 8014f7c:	d1f3      	bne.n	8014f66 <__sfputs_r+0xa>
 8014f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f80 <_vfiprintf_r>:
 8014f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f84:	460d      	mov	r5, r1
 8014f86:	b09d      	sub	sp, #116	@ 0x74
 8014f88:	4614      	mov	r4, r2
 8014f8a:	4698      	mov	r8, r3
 8014f8c:	4606      	mov	r6, r0
 8014f8e:	b118      	cbz	r0, 8014f98 <_vfiprintf_r+0x18>
 8014f90:	6a03      	ldr	r3, [r0, #32]
 8014f92:	b90b      	cbnz	r3, 8014f98 <_vfiprintf_r+0x18>
 8014f94:	f7ff f9cc 	bl	8014330 <__sinit>
 8014f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f9a:	07d9      	lsls	r1, r3, #31
 8014f9c:	d405      	bmi.n	8014faa <_vfiprintf_r+0x2a>
 8014f9e:	89ab      	ldrh	r3, [r5, #12]
 8014fa0:	059a      	lsls	r2, r3, #22
 8014fa2:	d402      	bmi.n	8014faa <_vfiprintf_r+0x2a>
 8014fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014fa6:	f7ff fb82 	bl	80146ae <__retarget_lock_acquire_recursive>
 8014faa:	89ab      	ldrh	r3, [r5, #12]
 8014fac:	071b      	lsls	r3, r3, #28
 8014fae:	d501      	bpl.n	8014fb4 <_vfiprintf_r+0x34>
 8014fb0:	692b      	ldr	r3, [r5, #16]
 8014fb2:	b99b      	cbnz	r3, 8014fdc <_vfiprintf_r+0x5c>
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	f000 f938 	bl	801522c <__swsetup_r>
 8014fbc:	b170      	cbz	r0, 8014fdc <_vfiprintf_r+0x5c>
 8014fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014fc0:	07dc      	lsls	r4, r3, #31
 8014fc2:	d504      	bpl.n	8014fce <_vfiprintf_r+0x4e>
 8014fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fc8:	b01d      	add	sp, #116	@ 0x74
 8014fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fce:	89ab      	ldrh	r3, [r5, #12]
 8014fd0:	0598      	lsls	r0, r3, #22
 8014fd2:	d4f7      	bmi.n	8014fc4 <_vfiprintf_r+0x44>
 8014fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014fd6:	f7ff fb6b 	bl	80146b0 <__retarget_lock_release_recursive>
 8014fda:	e7f3      	b.n	8014fc4 <_vfiprintf_r+0x44>
 8014fdc:	2300      	movs	r3, #0
 8014fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fe0:	2320      	movs	r3, #32
 8014fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fea:	2330      	movs	r3, #48	@ 0x30
 8014fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801519c <_vfiprintf_r+0x21c>
 8014ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014ff4:	f04f 0901 	mov.w	r9, #1
 8014ff8:	4623      	mov	r3, r4
 8014ffa:	469a      	mov	sl, r3
 8014ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015000:	b10a      	cbz	r2, 8015006 <_vfiprintf_r+0x86>
 8015002:	2a25      	cmp	r2, #37	@ 0x25
 8015004:	d1f9      	bne.n	8014ffa <_vfiprintf_r+0x7a>
 8015006:	ebba 0b04 	subs.w	fp, sl, r4
 801500a:	d00b      	beq.n	8015024 <_vfiprintf_r+0xa4>
 801500c:	465b      	mov	r3, fp
 801500e:	4622      	mov	r2, r4
 8015010:	4629      	mov	r1, r5
 8015012:	4630      	mov	r0, r6
 8015014:	f7ff ffa2 	bl	8014f5c <__sfputs_r>
 8015018:	3001      	adds	r0, #1
 801501a:	f000 80a7 	beq.w	801516c <_vfiprintf_r+0x1ec>
 801501e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015020:	445a      	add	r2, fp
 8015022:	9209      	str	r2, [sp, #36]	@ 0x24
 8015024:	f89a 3000 	ldrb.w	r3, [sl]
 8015028:	2b00      	cmp	r3, #0
 801502a:	f000 809f 	beq.w	801516c <_vfiprintf_r+0x1ec>
 801502e:	2300      	movs	r3, #0
 8015030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015038:	f10a 0a01 	add.w	sl, sl, #1
 801503c:	9304      	str	r3, [sp, #16]
 801503e:	9307      	str	r3, [sp, #28]
 8015040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015044:	931a      	str	r3, [sp, #104]	@ 0x68
 8015046:	4654      	mov	r4, sl
 8015048:	2205      	movs	r2, #5
 801504a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801504e:	4853      	ldr	r0, [pc, #332]	@ (801519c <_vfiprintf_r+0x21c>)
 8015050:	f7eb f8de 	bl	8000210 <memchr>
 8015054:	9a04      	ldr	r2, [sp, #16]
 8015056:	b9d8      	cbnz	r0, 8015090 <_vfiprintf_r+0x110>
 8015058:	06d1      	lsls	r1, r2, #27
 801505a:	bf44      	itt	mi
 801505c:	2320      	movmi	r3, #32
 801505e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015062:	0713      	lsls	r3, r2, #28
 8015064:	bf44      	itt	mi
 8015066:	232b      	movmi	r3, #43	@ 0x2b
 8015068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801506c:	f89a 3000 	ldrb.w	r3, [sl]
 8015070:	2b2a      	cmp	r3, #42	@ 0x2a
 8015072:	d015      	beq.n	80150a0 <_vfiprintf_r+0x120>
 8015074:	9a07      	ldr	r2, [sp, #28]
 8015076:	4654      	mov	r4, sl
 8015078:	2000      	movs	r0, #0
 801507a:	f04f 0c0a 	mov.w	ip, #10
 801507e:	4621      	mov	r1, r4
 8015080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015084:	3b30      	subs	r3, #48	@ 0x30
 8015086:	2b09      	cmp	r3, #9
 8015088:	d94b      	bls.n	8015122 <_vfiprintf_r+0x1a2>
 801508a:	b1b0      	cbz	r0, 80150ba <_vfiprintf_r+0x13a>
 801508c:	9207      	str	r2, [sp, #28]
 801508e:	e014      	b.n	80150ba <_vfiprintf_r+0x13a>
 8015090:	eba0 0308 	sub.w	r3, r0, r8
 8015094:	fa09 f303 	lsl.w	r3, r9, r3
 8015098:	4313      	orrs	r3, r2
 801509a:	9304      	str	r3, [sp, #16]
 801509c:	46a2      	mov	sl, r4
 801509e:	e7d2      	b.n	8015046 <_vfiprintf_r+0xc6>
 80150a0:	9b03      	ldr	r3, [sp, #12]
 80150a2:	1d19      	adds	r1, r3, #4
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	9103      	str	r1, [sp, #12]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	bfbb      	ittet	lt
 80150ac:	425b      	neglt	r3, r3
 80150ae:	f042 0202 	orrlt.w	r2, r2, #2
 80150b2:	9307      	strge	r3, [sp, #28]
 80150b4:	9307      	strlt	r3, [sp, #28]
 80150b6:	bfb8      	it	lt
 80150b8:	9204      	strlt	r2, [sp, #16]
 80150ba:	7823      	ldrb	r3, [r4, #0]
 80150bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80150be:	d10a      	bne.n	80150d6 <_vfiprintf_r+0x156>
 80150c0:	7863      	ldrb	r3, [r4, #1]
 80150c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80150c4:	d132      	bne.n	801512c <_vfiprintf_r+0x1ac>
 80150c6:	9b03      	ldr	r3, [sp, #12]
 80150c8:	1d1a      	adds	r2, r3, #4
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	9203      	str	r2, [sp, #12]
 80150ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80150d2:	3402      	adds	r4, #2
 80150d4:	9305      	str	r3, [sp, #20]
 80150d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80151ac <_vfiprintf_r+0x22c>
 80150da:	7821      	ldrb	r1, [r4, #0]
 80150dc:	2203      	movs	r2, #3
 80150de:	4650      	mov	r0, sl
 80150e0:	f7eb f896 	bl	8000210 <memchr>
 80150e4:	b138      	cbz	r0, 80150f6 <_vfiprintf_r+0x176>
 80150e6:	9b04      	ldr	r3, [sp, #16]
 80150e8:	eba0 000a 	sub.w	r0, r0, sl
 80150ec:	2240      	movs	r2, #64	@ 0x40
 80150ee:	4082      	lsls	r2, r0
 80150f0:	4313      	orrs	r3, r2
 80150f2:	3401      	adds	r4, #1
 80150f4:	9304      	str	r3, [sp, #16]
 80150f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150fa:	4829      	ldr	r0, [pc, #164]	@ (80151a0 <_vfiprintf_r+0x220>)
 80150fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015100:	2206      	movs	r2, #6
 8015102:	f7eb f885 	bl	8000210 <memchr>
 8015106:	2800      	cmp	r0, #0
 8015108:	d03f      	beq.n	801518a <_vfiprintf_r+0x20a>
 801510a:	4b26      	ldr	r3, [pc, #152]	@ (80151a4 <_vfiprintf_r+0x224>)
 801510c:	bb1b      	cbnz	r3, 8015156 <_vfiprintf_r+0x1d6>
 801510e:	9b03      	ldr	r3, [sp, #12]
 8015110:	3307      	adds	r3, #7
 8015112:	f023 0307 	bic.w	r3, r3, #7
 8015116:	3308      	adds	r3, #8
 8015118:	9303      	str	r3, [sp, #12]
 801511a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801511c:	443b      	add	r3, r7
 801511e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015120:	e76a      	b.n	8014ff8 <_vfiprintf_r+0x78>
 8015122:	fb0c 3202 	mla	r2, ip, r2, r3
 8015126:	460c      	mov	r4, r1
 8015128:	2001      	movs	r0, #1
 801512a:	e7a8      	b.n	801507e <_vfiprintf_r+0xfe>
 801512c:	2300      	movs	r3, #0
 801512e:	3401      	adds	r4, #1
 8015130:	9305      	str	r3, [sp, #20]
 8015132:	4619      	mov	r1, r3
 8015134:	f04f 0c0a 	mov.w	ip, #10
 8015138:	4620      	mov	r0, r4
 801513a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801513e:	3a30      	subs	r2, #48	@ 0x30
 8015140:	2a09      	cmp	r2, #9
 8015142:	d903      	bls.n	801514c <_vfiprintf_r+0x1cc>
 8015144:	2b00      	cmp	r3, #0
 8015146:	d0c6      	beq.n	80150d6 <_vfiprintf_r+0x156>
 8015148:	9105      	str	r1, [sp, #20]
 801514a:	e7c4      	b.n	80150d6 <_vfiprintf_r+0x156>
 801514c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015150:	4604      	mov	r4, r0
 8015152:	2301      	movs	r3, #1
 8015154:	e7f0      	b.n	8015138 <_vfiprintf_r+0x1b8>
 8015156:	ab03      	add	r3, sp, #12
 8015158:	9300      	str	r3, [sp, #0]
 801515a:	462a      	mov	r2, r5
 801515c:	4b12      	ldr	r3, [pc, #72]	@ (80151a8 <_vfiprintf_r+0x228>)
 801515e:	a904      	add	r1, sp, #16
 8015160:	4630      	mov	r0, r6
 8015162:	f3af 8000 	nop.w
 8015166:	4607      	mov	r7, r0
 8015168:	1c78      	adds	r0, r7, #1
 801516a:	d1d6      	bne.n	801511a <_vfiprintf_r+0x19a>
 801516c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801516e:	07d9      	lsls	r1, r3, #31
 8015170:	d405      	bmi.n	801517e <_vfiprintf_r+0x1fe>
 8015172:	89ab      	ldrh	r3, [r5, #12]
 8015174:	059a      	lsls	r2, r3, #22
 8015176:	d402      	bmi.n	801517e <_vfiprintf_r+0x1fe>
 8015178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801517a:	f7ff fa99 	bl	80146b0 <__retarget_lock_release_recursive>
 801517e:	89ab      	ldrh	r3, [r5, #12]
 8015180:	065b      	lsls	r3, r3, #25
 8015182:	f53f af1f 	bmi.w	8014fc4 <_vfiprintf_r+0x44>
 8015186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015188:	e71e      	b.n	8014fc8 <_vfiprintf_r+0x48>
 801518a:	ab03      	add	r3, sp, #12
 801518c:	9300      	str	r3, [sp, #0]
 801518e:	462a      	mov	r2, r5
 8015190:	4b05      	ldr	r3, [pc, #20]	@ (80151a8 <_vfiprintf_r+0x228>)
 8015192:	a904      	add	r1, sp, #16
 8015194:	4630      	mov	r0, r6
 8015196:	f7ff fce5 	bl	8014b64 <_printf_i>
 801519a:	e7e4      	b.n	8015166 <_vfiprintf_r+0x1e6>
 801519c:	08015fa4 	.word	0x08015fa4
 80151a0:	08015fae 	.word	0x08015fae
 80151a4:	00000000 	.word	0x00000000
 80151a8:	08014f5d 	.word	0x08014f5d
 80151ac:	08015faa 	.word	0x08015faa

080151b0 <__swbuf_r>:
 80151b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b2:	460e      	mov	r6, r1
 80151b4:	4614      	mov	r4, r2
 80151b6:	4605      	mov	r5, r0
 80151b8:	b118      	cbz	r0, 80151c2 <__swbuf_r+0x12>
 80151ba:	6a03      	ldr	r3, [r0, #32]
 80151bc:	b90b      	cbnz	r3, 80151c2 <__swbuf_r+0x12>
 80151be:	f7ff f8b7 	bl	8014330 <__sinit>
 80151c2:	69a3      	ldr	r3, [r4, #24]
 80151c4:	60a3      	str	r3, [r4, #8]
 80151c6:	89a3      	ldrh	r3, [r4, #12]
 80151c8:	071a      	lsls	r2, r3, #28
 80151ca:	d501      	bpl.n	80151d0 <__swbuf_r+0x20>
 80151cc:	6923      	ldr	r3, [r4, #16]
 80151ce:	b943      	cbnz	r3, 80151e2 <__swbuf_r+0x32>
 80151d0:	4621      	mov	r1, r4
 80151d2:	4628      	mov	r0, r5
 80151d4:	f000 f82a 	bl	801522c <__swsetup_r>
 80151d8:	b118      	cbz	r0, 80151e2 <__swbuf_r+0x32>
 80151da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80151de:	4638      	mov	r0, r7
 80151e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151e2:	6823      	ldr	r3, [r4, #0]
 80151e4:	6922      	ldr	r2, [r4, #16]
 80151e6:	1a98      	subs	r0, r3, r2
 80151e8:	6963      	ldr	r3, [r4, #20]
 80151ea:	b2f6      	uxtb	r6, r6
 80151ec:	4283      	cmp	r3, r0
 80151ee:	4637      	mov	r7, r6
 80151f0:	dc05      	bgt.n	80151fe <__swbuf_r+0x4e>
 80151f2:	4621      	mov	r1, r4
 80151f4:	4628      	mov	r0, r5
 80151f6:	f7ff fe59 	bl	8014eac <_fflush_r>
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d1ed      	bne.n	80151da <__swbuf_r+0x2a>
 80151fe:	68a3      	ldr	r3, [r4, #8]
 8015200:	3b01      	subs	r3, #1
 8015202:	60a3      	str	r3, [r4, #8]
 8015204:	6823      	ldr	r3, [r4, #0]
 8015206:	1c5a      	adds	r2, r3, #1
 8015208:	6022      	str	r2, [r4, #0]
 801520a:	701e      	strb	r6, [r3, #0]
 801520c:	6962      	ldr	r2, [r4, #20]
 801520e:	1c43      	adds	r3, r0, #1
 8015210:	429a      	cmp	r2, r3
 8015212:	d004      	beq.n	801521e <__swbuf_r+0x6e>
 8015214:	89a3      	ldrh	r3, [r4, #12]
 8015216:	07db      	lsls	r3, r3, #31
 8015218:	d5e1      	bpl.n	80151de <__swbuf_r+0x2e>
 801521a:	2e0a      	cmp	r6, #10
 801521c:	d1df      	bne.n	80151de <__swbuf_r+0x2e>
 801521e:	4621      	mov	r1, r4
 8015220:	4628      	mov	r0, r5
 8015222:	f7ff fe43 	bl	8014eac <_fflush_r>
 8015226:	2800      	cmp	r0, #0
 8015228:	d0d9      	beq.n	80151de <__swbuf_r+0x2e>
 801522a:	e7d6      	b.n	80151da <__swbuf_r+0x2a>

0801522c <__swsetup_r>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4b29      	ldr	r3, [pc, #164]	@ (80152d4 <__swsetup_r+0xa8>)
 8015230:	4605      	mov	r5, r0
 8015232:	6818      	ldr	r0, [r3, #0]
 8015234:	460c      	mov	r4, r1
 8015236:	b118      	cbz	r0, 8015240 <__swsetup_r+0x14>
 8015238:	6a03      	ldr	r3, [r0, #32]
 801523a:	b90b      	cbnz	r3, 8015240 <__swsetup_r+0x14>
 801523c:	f7ff f878 	bl	8014330 <__sinit>
 8015240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015244:	0719      	lsls	r1, r3, #28
 8015246:	d422      	bmi.n	801528e <__swsetup_r+0x62>
 8015248:	06da      	lsls	r2, r3, #27
 801524a:	d407      	bmi.n	801525c <__swsetup_r+0x30>
 801524c:	2209      	movs	r2, #9
 801524e:	602a      	str	r2, [r5, #0]
 8015250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015254:	81a3      	strh	r3, [r4, #12]
 8015256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801525a:	e033      	b.n	80152c4 <__swsetup_r+0x98>
 801525c:	0758      	lsls	r0, r3, #29
 801525e:	d512      	bpl.n	8015286 <__swsetup_r+0x5a>
 8015260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015262:	b141      	cbz	r1, 8015276 <__swsetup_r+0x4a>
 8015264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015268:	4299      	cmp	r1, r3
 801526a:	d002      	beq.n	8015272 <__swsetup_r+0x46>
 801526c:	4628      	mov	r0, r5
 801526e:	f7ff fa61 	bl	8014734 <_free_r>
 8015272:	2300      	movs	r3, #0
 8015274:	6363      	str	r3, [r4, #52]	@ 0x34
 8015276:	89a3      	ldrh	r3, [r4, #12]
 8015278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801527c:	81a3      	strh	r3, [r4, #12]
 801527e:	2300      	movs	r3, #0
 8015280:	6063      	str	r3, [r4, #4]
 8015282:	6923      	ldr	r3, [r4, #16]
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	89a3      	ldrh	r3, [r4, #12]
 8015288:	f043 0308 	orr.w	r3, r3, #8
 801528c:	81a3      	strh	r3, [r4, #12]
 801528e:	6923      	ldr	r3, [r4, #16]
 8015290:	b94b      	cbnz	r3, 80152a6 <__swsetup_r+0x7a>
 8015292:	89a3      	ldrh	r3, [r4, #12]
 8015294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801529c:	d003      	beq.n	80152a6 <__swsetup_r+0x7a>
 801529e:	4621      	mov	r1, r4
 80152a0:	4628      	mov	r0, r5
 80152a2:	f000 f883 	bl	80153ac <__smakebuf_r>
 80152a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152aa:	f013 0201 	ands.w	r2, r3, #1
 80152ae:	d00a      	beq.n	80152c6 <__swsetup_r+0x9a>
 80152b0:	2200      	movs	r2, #0
 80152b2:	60a2      	str	r2, [r4, #8]
 80152b4:	6962      	ldr	r2, [r4, #20]
 80152b6:	4252      	negs	r2, r2
 80152b8:	61a2      	str	r2, [r4, #24]
 80152ba:	6922      	ldr	r2, [r4, #16]
 80152bc:	b942      	cbnz	r2, 80152d0 <__swsetup_r+0xa4>
 80152be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80152c2:	d1c5      	bne.n	8015250 <__swsetup_r+0x24>
 80152c4:	bd38      	pop	{r3, r4, r5, pc}
 80152c6:	0799      	lsls	r1, r3, #30
 80152c8:	bf58      	it	pl
 80152ca:	6962      	ldrpl	r2, [r4, #20]
 80152cc:	60a2      	str	r2, [r4, #8]
 80152ce:	e7f4      	b.n	80152ba <__swsetup_r+0x8e>
 80152d0:	2000      	movs	r0, #0
 80152d2:	e7f7      	b.n	80152c4 <__swsetup_r+0x98>
 80152d4:	20000134 	.word	0x20000134

080152d8 <_raise_r>:
 80152d8:	291f      	cmp	r1, #31
 80152da:	b538      	push	{r3, r4, r5, lr}
 80152dc:	4605      	mov	r5, r0
 80152de:	460c      	mov	r4, r1
 80152e0:	d904      	bls.n	80152ec <_raise_r+0x14>
 80152e2:	2316      	movs	r3, #22
 80152e4:	6003      	str	r3, [r0, #0]
 80152e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152ea:	bd38      	pop	{r3, r4, r5, pc}
 80152ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80152ee:	b112      	cbz	r2, 80152f6 <_raise_r+0x1e>
 80152f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80152f4:	b94b      	cbnz	r3, 801530a <_raise_r+0x32>
 80152f6:	4628      	mov	r0, r5
 80152f8:	f000 f830 	bl	801535c <_getpid_r>
 80152fc:	4622      	mov	r2, r4
 80152fe:	4601      	mov	r1, r0
 8015300:	4628      	mov	r0, r5
 8015302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015306:	f000 b817 	b.w	8015338 <_kill_r>
 801530a:	2b01      	cmp	r3, #1
 801530c:	d00a      	beq.n	8015324 <_raise_r+0x4c>
 801530e:	1c59      	adds	r1, r3, #1
 8015310:	d103      	bne.n	801531a <_raise_r+0x42>
 8015312:	2316      	movs	r3, #22
 8015314:	6003      	str	r3, [r0, #0]
 8015316:	2001      	movs	r0, #1
 8015318:	e7e7      	b.n	80152ea <_raise_r+0x12>
 801531a:	2100      	movs	r1, #0
 801531c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015320:	4620      	mov	r0, r4
 8015322:	4798      	blx	r3
 8015324:	2000      	movs	r0, #0
 8015326:	e7e0      	b.n	80152ea <_raise_r+0x12>

08015328 <raise>:
 8015328:	4b02      	ldr	r3, [pc, #8]	@ (8015334 <raise+0xc>)
 801532a:	4601      	mov	r1, r0
 801532c:	6818      	ldr	r0, [r3, #0]
 801532e:	f7ff bfd3 	b.w	80152d8 <_raise_r>
 8015332:	bf00      	nop
 8015334:	20000134 	.word	0x20000134

08015338 <_kill_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4d07      	ldr	r5, [pc, #28]	@ (8015358 <_kill_r+0x20>)
 801533c:	2300      	movs	r3, #0
 801533e:	4604      	mov	r4, r0
 8015340:	4608      	mov	r0, r1
 8015342:	4611      	mov	r1, r2
 8015344:	602b      	str	r3, [r5, #0]
 8015346:	f7ed fb2d 	bl	80029a4 <_kill>
 801534a:	1c43      	adds	r3, r0, #1
 801534c:	d102      	bne.n	8015354 <_kill_r+0x1c>
 801534e:	682b      	ldr	r3, [r5, #0]
 8015350:	b103      	cbz	r3, 8015354 <_kill_r+0x1c>
 8015352:	6023      	str	r3, [r4, #0]
 8015354:	bd38      	pop	{r3, r4, r5, pc}
 8015356:	bf00      	nop
 8015358:	20009414 	.word	0x20009414

0801535c <_getpid_r>:
 801535c:	f7ed bb1a 	b.w	8002994 <_getpid>

08015360 <__swhatbuf_r>:
 8015360:	b570      	push	{r4, r5, r6, lr}
 8015362:	460c      	mov	r4, r1
 8015364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015368:	2900      	cmp	r1, #0
 801536a:	b096      	sub	sp, #88	@ 0x58
 801536c:	4615      	mov	r5, r2
 801536e:	461e      	mov	r6, r3
 8015370:	da0d      	bge.n	801538e <__swhatbuf_r+0x2e>
 8015372:	89a3      	ldrh	r3, [r4, #12]
 8015374:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015378:	f04f 0100 	mov.w	r1, #0
 801537c:	bf14      	ite	ne
 801537e:	2340      	movne	r3, #64	@ 0x40
 8015380:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015384:	2000      	movs	r0, #0
 8015386:	6031      	str	r1, [r6, #0]
 8015388:	602b      	str	r3, [r5, #0]
 801538a:	b016      	add	sp, #88	@ 0x58
 801538c:	bd70      	pop	{r4, r5, r6, pc}
 801538e:	466a      	mov	r2, sp
 8015390:	f000 f848 	bl	8015424 <_fstat_r>
 8015394:	2800      	cmp	r0, #0
 8015396:	dbec      	blt.n	8015372 <__swhatbuf_r+0x12>
 8015398:	9901      	ldr	r1, [sp, #4]
 801539a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801539e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80153a2:	4259      	negs	r1, r3
 80153a4:	4159      	adcs	r1, r3
 80153a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80153aa:	e7eb      	b.n	8015384 <__swhatbuf_r+0x24>

080153ac <__smakebuf_r>:
 80153ac:	898b      	ldrh	r3, [r1, #12]
 80153ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153b0:	079d      	lsls	r5, r3, #30
 80153b2:	4606      	mov	r6, r0
 80153b4:	460c      	mov	r4, r1
 80153b6:	d507      	bpl.n	80153c8 <__smakebuf_r+0x1c>
 80153b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80153bc:	6023      	str	r3, [r4, #0]
 80153be:	6123      	str	r3, [r4, #16]
 80153c0:	2301      	movs	r3, #1
 80153c2:	6163      	str	r3, [r4, #20]
 80153c4:	b003      	add	sp, #12
 80153c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153c8:	ab01      	add	r3, sp, #4
 80153ca:	466a      	mov	r2, sp
 80153cc:	f7ff ffc8 	bl	8015360 <__swhatbuf_r>
 80153d0:	9f00      	ldr	r7, [sp, #0]
 80153d2:	4605      	mov	r5, r0
 80153d4:	4639      	mov	r1, r7
 80153d6:	4630      	mov	r0, r6
 80153d8:	f7fe fd78 	bl	8013ecc <_malloc_r>
 80153dc:	b948      	cbnz	r0, 80153f2 <__smakebuf_r+0x46>
 80153de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153e2:	059a      	lsls	r2, r3, #22
 80153e4:	d4ee      	bmi.n	80153c4 <__smakebuf_r+0x18>
 80153e6:	f023 0303 	bic.w	r3, r3, #3
 80153ea:	f043 0302 	orr.w	r3, r3, #2
 80153ee:	81a3      	strh	r3, [r4, #12]
 80153f0:	e7e2      	b.n	80153b8 <__smakebuf_r+0xc>
 80153f2:	89a3      	ldrh	r3, [r4, #12]
 80153f4:	6020      	str	r0, [r4, #0]
 80153f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80153fa:	81a3      	strh	r3, [r4, #12]
 80153fc:	9b01      	ldr	r3, [sp, #4]
 80153fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015402:	b15b      	cbz	r3, 801541c <__smakebuf_r+0x70>
 8015404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015408:	4630      	mov	r0, r6
 801540a:	f000 f81d 	bl	8015448 <_isatty_r>
 801540e:	b128      	cbz	r0, 801541c <__smakebuf_r+0x70>
 8015410:	89a3      	ldrh	r3, [r4, #12]
 8015412:	f023 0303 	bic.w	r3, r3, #3
 8015416:	f043 0301 	orr.w	r3, r3, #1
 801541a:	81a3      	strh	r3, [r4, #12]
 801541c:	89a3      	ldrh	r3, [r4, #12]
 801541e:	431d      	orrs	r5, r3
 8015420:	81a5      	strh	r5, [r4, #12]
 8015422:	e7cf      	b.n	80153c4 <__smakebuf_r+0x18>

08015424 <_fstat_r>:
 8015424:	b538      	push	{r3, r4, r5, lr}
 8015426:	4d07      	ldr	r5, [pc, #28]	@ (8015444 <_fstat_r+0x20>)
 8015428:	2300      	movs	r3, #0
 801542a:	4604      	mov	r4, r0
 801542c:	4608      	mov	r0, r1
 801542e:	4611      	mov	r1, r2
 8015430:	602b      	str	r3, [r5, #0]
 8015432:	f7ed fb17 	bl	8002a64 <_fstat>
 8015436:	1c43      	adds	r3, r0, #1
 8015438:	d102      	bne.n	8015440 <_fstat_r+0x1c>
 801543a:	682b      	ldr	r3, [r5, #0]
 801543c:	b103      	cbz	r3, 8015440 <_fstat_r+0x1c>
 801543e:	6023      	str	r3, [r4, #0]
 8015440:	bd38      	pop	{r3, r4, r5, pc}
 8015442:	bf00      	nop
 8015444:	20009414 	.word	0x20009414

08015448 <_isatty_r>:
 8015448:	b538      	push	{r3, r4, r5, lr}
 801544a:	4d06      	ldr	r5, [pc, #24]	@ (8015464 <_isatty_r+0x1c>)
 801544c:	2300      	movs	r3, #0
 801544e:	4604      	mov	r4, r0
 8015450:	4608      	mov	r0, r1
 8015452:	602b      	str	r3, [r5, #0]
 8015454:	f7ed fb16 	bl	8002a84 <_isatty>
 8015458:	1c43      	adds	r3, r0, #1
 801545a:	d102      	bne.n	8015462 <_isatty_r+0x1a>
 801545c:	682b      	ldr	r3, [r5, #0]
 801545e:	b103      	cbz	r3, 8015462 <_isatty_r+0x1a>
 8015460:	6023      	str	r3, [r4, #0]
 8015462:	bd38      	pop	{r3, r4, r5, pc}
 8015464:	20009414 	.word	0x20009414

08015468 <_init>:
 8015468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801546a:	bf00      	nop
 801546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801546e:	bc08      	pop	{r3}
 8015470:	469e      	mov	lr, r3
 8015472:	4770      	bx	lr

08015474 <_fini>:
 8015474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015476:	bf00      	nop
 8015478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801547a:	bc08      	pop	{r3}
 801547c:	469e      	mov	lr, r3
 801547e:	4770      	bx	lr
