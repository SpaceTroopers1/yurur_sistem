
bts_with_encoder_right.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  080160a8  080160a8  000170a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d4c  08016d4c  000183a0  2**0
                  CONTENTS
  4 .ARM          00000008  08016d4c  08016d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d54  08016d54  000183a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016d54  08016d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016d5c  08016d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a0  20000000  08016d60  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc00  200003a0  08017100  000183a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dfa0  08017100  00018fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000183a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a285  00000000  00000000  000183d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb7  00000000  00000000  00032655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00036210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001141  00000000  00000000  00037858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000897e  00000000  00000000  00038999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c1d  00000000  00000000  00041317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4023  00000000  00000000  0005af34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  000fef57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c04  00000000  00000000  000fefd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00105bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a0 	.word	0x200003a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016090 	.word	0x08016090

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003a4 	.word	0x200003a4
 80001dc:	08016090 	.word	0x08016090

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2uiz>:
 8000628:	004a      	lsls	r2, r1, #1
 800062a:	d211      	bcs.n	8000650 <__aeabi_d2uiz+0x28>
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000630:	d211      	bcs.n	8000656 <__aeabi_d2uiz+0x2e>
 8000632:	d50d      	bpl.n	8000650 <__aeabi_d2uiz+0x28>
 8000634:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d40e      	bmi.n	800065c <__aeabi_d2uiz+0x34>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	fa23 f002 	lsr.w	r0, r3, r2
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065a:	d102      	bne.n	8000662 <__aeabi_d2uiz+0x3a>
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000660:	4770      	bx	lr
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	4770      	bx	lr

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000a04:	f006 fc70 	bl	80072e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a08:	4b5a      	ldr	r3, [pc, #360]	@ (8000b74 <pvPortMallocMicroROS+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000a10:	f000 f986 	bl	8000d20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a14:	4b58      	ldr	r3, [pc, #352]	@ (8000b78 <pvPortMallocMicroROS+0x180>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f040 8090 	bne.w	8000b42 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01e      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d015      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f023 0307 	bic.w	r3, r3, #7
 8000a40:	3308      	adds	r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00b      	beq.n	8000a66 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a52:	f383 8811 	msr	BASEPRI, r3
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	f3bf 8f4f 	dsb	sy
 8000a5e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d06a      	beq.n	8000b42 <pvPortMallocMicroROS+0x14a>
 8000a6c:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d865      	bhi.n	8000b42 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a76:	4b42      	ldr	r3, [pc, #264]	@ (8000b80 <pvPortMallocMicroROS+0x188>)
 8000a78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <pvPortMallocMicroROS+0x188>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a80:	e004      	b.n	8000a8c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d903      	bls.n	8000a9e <pvPortMallocMicroROS+0xa6>
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f1      	bne.n	8000a82 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a9e:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <pvPortMallocMicroROS+0x17c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d04c      	beq.n	8000b42 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2208      	movs	r2, #8
 8000aae:	4413      	add	r3, r2
 8000ab0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d920      	bls.n	8000b0c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae0:	f383 8811 	msr	BASEPRI, r3
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	613b      	str	r3, [r7, #16]
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	1ad2      	subs	r2, r2, r3
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b06:	69b8      	ldr	r0, [r7, #24]
 8000b08:	f000 f96c 	bl	8000de4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <pvPortMallocMicroROS+0x18c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d203      	bcs.n	8000b2e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <pvPortMallocMicroROS+0x184>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <pvPortMallocMicroROS+0x18c>)
 8000b2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <pvPortMallocMicroROS+0x180>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b42:	f006 fbdf 	bl	8007304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	60fb      	str	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b68:	69fb      	ldr	r3, [r7, #28]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3728      	adds	r7, #40	@ 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20003fc4 	.word	0x20003fc4
 8000b78:	20003fd0 	.word	0x20003fd0
 8000b7c:	20003fc8 	.word	0x20003fc8
 8000b80:	20003fbc 	.word	0x20003fbc
 8000b84:	20003fcc 	.word	0x20003fcc

08000b88 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d04a      	beq.n	8000c30 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10b      	bne.n	8000bce <vPortFreeMicroROS+0x46>
	__asm volatile
 8000bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bba:	f383 8811 	msr	BASEPRI, r3
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	60fb      	str	r3, [r7, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00b      	beq.n	8000bee <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bda:	f383 8811 	msr	BASEPRI, r3
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	60bb      	str	r3, [r7, #8]
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d019      	beq.n	8000c30 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d115      	bne.n	8000c30 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <vPortFreeMicroROS+0xb0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c14:	f006 fb68 	bl	80072e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <vPortFreeMicroROS+0xb4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <vPortFreeMicroROS+0xb4>)
 8000c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c26:	6938      	ldr	r0, [r7, #16]
 8000c28:	f000 f8dc 	bl	8000de4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c2c:	f006 fb6a 	bl	8007304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20003fd0 	.word	0x20003fd0
 8000c3c:	20003fc8 	.word	0x20003fc8

08000c40 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	425b      	negs	r3, r3
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4413      	add	r3, r2
 8000c54:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <getBlockSize+0x38>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

	return count;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20003fd0 	.word	0x20003fd0

08000c7c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c86:	f006 fb2f 	bl	80072e8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c8a:	6838      	ldr	r0, [r7, #0]
 8000c8c:	f7ff feb4 	bl	80009f8 <pvPortMallocMicroROS>
 8000c90:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d017      	beq.n	8000cc8 <pvPortReallocMicroROS+0x4c>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d014      	beq.n	8000cc8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffce 	bl	8000c40 <getBlockSize>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d201      	bcs.n	8000cb8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f014 fb14 	bl	80152ea <memcpy>

		vPortFreeMicroROS(pv);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff60 	bl	8000b88 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cc8:	f006 fb1c 	bl	8007304 <xTaskResumeAll>

	return newmem;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ce0:	f006 fb02 	bl	80072e8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff fe82 	bl	80009f8 <pvPortMallocMicroROS>
 8000cf4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cfa:	e004      	b.n	8000d06 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	613a      	str	r2, [r7, #16]
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	617a      	str	r2, [r7, #20]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f5      	bne.n	8000cfc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d10:	f006 faf8 	bl	8007304 <xTaskResumeAll>
  	return mem;
 8000d14:	68fb      	ldr	r3, [r7, #12]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <prvHeapInit+0xac>)
 8000d2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00c      	beq.n	8000d54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3307      	adds	r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f023 0307 	bic.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <prvHeapInit+0xac>)
 8000d50:	4413      	add	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d58:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <prvHeapInit+0xb0>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <prvHeapInit+0xb0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 0307 	bic.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <prvHeapInit+0xb4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <prvHeapInit+0xb8>)
 8000dae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <prvHeapInit+0xbc>)
 8000db6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <prvHeapInit+0xc0>)
 8000dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	200003bc 	.word	0x200003bc
 8000dd0:	20003fbc 	.word	0x20003fbc
 8000dd4:	20003fc4 	.word	0x20003fc4
 8000dd8:	20003fcc 	.word	0x20003fcc
 8000ddc:	20003fc8 	.word	0x20003fc8
 8000de0:	20003fd0 	.word	0x20003fd0

08000de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <prvInsertBlockIntoFreeList+0xac>)
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e002      	b.n	8000df8 <prvInsertBlockIntoFreeList+0x14>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8f7      	bhi.n	8000df2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d108      	bne.n	8000e26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	441a      	add	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d118      	bne.n	8000e6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <prvInsertBlockIntoFreeList+0xb0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d00d      	beq.n	8000e62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	441a      	add	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e008      	b.n	8000e74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <prvInsertBlockIntoFreeList+0xb0>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e003      	b.n	8000e74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d002      	beq.n	8000e82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20003fbc 	.word	0x20003fbc
 8000e94:	20003fc4 	.word	0x20003fc4

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 fb94 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f832 	bl	8000f08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fa6a 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fa40 	bl	800132c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 fa14 	bl	80012d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f896 	bl	8000fe0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000eb4:	f000 f968 	bl	8001188 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eb8:	f000 f9ba 	bl	8001230 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <main+0x60>)
 8000ec0:	f002 ffe6 	bl	8003e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <main+0x60>)
 8000ec8:	f002 ffe2 	bl	8003e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	480a      	ldr	r0, [pc, #40]	@ (8000ef8 <main+0x60>)
 8000ed0:	f002 ffde 	bl	8003e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <main+0x60>)
 8000ed8:	f002 ffda 	bl	8003e90 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000edc:	f005 f8e6 	bl	80060ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <main+0x64>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <main+0x68>)
 8000ee6:	f005 f92b 	bl	8006140 <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <main+0x6c>)
 8000eee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ef0:	f005 f900 	bl	80060f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <main+0x5c>
 8000ef8:	20003fd4 	.word	0x20003fd4
 8000efc:	0801610c 	.word	0x0801610c
 8000f00:	08001a21 	.word	0x08001a21
 8000f04:	200041b4 	.word	0x200041b4

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	@ 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f014 f91e 	bl	8015158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <SystemClock_Config+0xd0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <SystemClock_Config+0xd4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f54:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <SystemClock_Config+0xd4>)
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <SystemClock_Config+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f86:	2304      	movs	r3, #4
 8000f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fa3c 	bl	8003410 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f9e:	f000 fdf7 	bl	8001b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fc9e 	bl	8003900 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fca:	f000 fde1 	bl	8001b90 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	@ 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b096      	sub	sp, #88	@ 0x58
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2220      	movs	r2, #32
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f014 f89d 	bl	8015158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101e:	4b58      	ldr	r3, [pc, #352]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001020:	4a58      	ldr	r2, [pc, #352]	@ (8001184 <MX_TIM1_Init+0x1a4>)
 8001022:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001024:	4b56      	ldr	r3, [pc, #344]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001026:	2206      	movs	r2, #6
 8001028:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b55      	ldr	r3, [pc, #340]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001030:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001032:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103e:	4b50      	ldr	r3, [pc, #320]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b4e      	ldr	r3, [pc, #312]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800104a:	484d      	ldr	r0, [pc, #308]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800104c:	f002 fe78 	bl	8003d40 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001056:	f000 fd9b 	bl	8001b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001060:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001064:	4619      	mov	r1, r3
 8001066:	4846      	ldr	r0, [pc, #280]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001068:	f003 f92a 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001072:	f000 fd8d 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001076:	4842      	ldr	r0, [pc, #264]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001078:	f002 feb1 	bl	8003dde <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001082:	f000 fd85 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001092:	4619      	mov	r1, r3
 8001094:	483a      	ldr	r0, [pc, #232]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001096:	f003 fcb3 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010a0:	f000 fd76 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	@ 0x60
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	482d      	ldr	r0, [pc, #180]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 80010ca:	f003 f837 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010d4:	f000 fd5c 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4827      	ldr	r0, [pc, #156]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 80010e2:	f003 f82b 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010ec:	f000 fd50 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	4821      	ldr	r0, [pc, #132]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 80010fa:	f003 f81f 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001104:	f000 fd44 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110c:	220c      	movs	r2, #12
 800110e:	4619      	mov	r1, r3
 8001110:	481b      	ldr	r0, [pc, #108]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001112:	f003 f813 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800111c:	f000 fd38 	bl	8001b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001138:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	480f      	ldr	r0, [pc, #60]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001144:	f003 fcca 	bl	8004adc <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800114e:	f000 fd1f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001152:	2100      	movs	r1, #0
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001156:	f002 fe9b 	bl	8003e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800115a:	2104      	movs	r1, #4
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800115e:	f002 fe97 	bl	8003e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001162:	2108      	movs	r1, #8
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001166:	f002 fe93 	bl	8003e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800116a:	210c      	movs	r1, #12
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 800116e:	f002 fe8f 	bl	8003e90 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM1_Init+0x1a0>)
 8001174:	f000 ff40 	bl	8001ff8 <HAL_TIM_MspPostInit>

}
 8001178:	bf00      	nop
 800117a:	3758      	adds	r7, #88	@ 0x58
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20003fd4 	.word	0x20003fd4
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2224      	movs	r2, #36	@ 0x24
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f013 ffde 	bl	8015158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a4:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <MX_TIM3_Init+0xa4>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011e2:	2301      	movs	r3, #1
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011f6:	f002 fefb 	bl	8003ff0 <HAL_TIM_Encoder_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001200:	f000 fcc6 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_TIM3_Init+0xa0>)
 8001212:	f003 fbf5 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800121c:	f000 fcb8 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3730      	adds	r7, #48	@ 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000401c 	.word	0x2000401c
 800122c:	40000400 	.word	0x40000400

08001230 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	@ 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f013 ff8a 	bl	8015158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <MX_TIM4_Init+0xa4>)
 8001250:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 8001260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001264:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001272:	2301      	movs	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 800129e:	f002 fea7 	bl	8003ff0 <HAL_TIM_Encoder_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f000 fc72 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM4_Init+0xa0>)
 80012ba:	f003 fba1 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80012c4:	f000 fc64 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	@ 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20004064 	.word	0x20004064
 80012d4:	40000800 	.word	0x40000800

080012d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <MX_USART2_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_USART2_UART_Init+0x4c>)
 8001310:	f003 fc36 	bl	8004b80 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 fc39 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200040ac 	.word	0x200040ac
 8001328:	40004400 	.word	0x40004400

0800132c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <MX_DMA_Init+0x4c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <MX_DMA_Init+0x4c>)
 800133c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <MX_DMA_Init+0x4c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2105      	movs	r1, #5
 8001352:	2010      	movs	r0, #16
 8001354:	f001 fa85 	bl	8002862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001358:	2010      	movs	r0, #16
 800135a:	f001 fa9e 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	2011      	movs	r0, #17
 8001364:	f001 fa7d 	bl	8002862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001368:	2011      	movs	r0, #17
 800136a:	f001 fa96 	bl	800289a <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a2c      	ldr	r2, [pc, #176]	@ (800144c <MX_GPIO_Init+0xd0>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b26      	ldr	r3, [pc, #152]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a25      	ldr	r2, [pc, #148]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b23      	ldr	r3, [pc, #140]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a1e      	ldr	r2, [pc, #120]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2120      	movs	r1, #32
 8001406:	4812      	ldr	r0, [pc, #72]	@ (8001450 <MX_GPIO_Init+0xd4>)
 8001408:	f001 ffe8 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800140c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	@ (8001454 <MX_GPIO_Init+0xd8>)
 8001424:	f001 fe56 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001428:	2320      	movs	r3, #32
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4804      	ldr	r0, [pc, #16]	@ (8001450 <MX_GPIO_Init+0xd4>)
 8001440:	f001 fe48 	bl	80030d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020800 	.word	0x40020800

08001458 <setPWM>:
int16_t speedToPWM(int16_t speed, int16_t max_speed) {
    return speed;
}

/* --- PWM Ayarı --- */
void setPWM(uint32_t channel1, uint32_t channel2, int16_t pwmvalue) {
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	b08f      	sub	sp, #60	@ 0x3c
 800145e:	af00      	add	r7, sp, #0
 8001460:	6378      	str	r0, [r7, #52]	@ 0x34
 8001462:	6339      	str	r1, [r7, #48]	@ 0x30
 8001464:	4613      	mov	r3, r2
 8001466:	85fb      	strh	r3, [r7, #46]	@ 0x2e



	if (pwmvalue >= 0 && pwmvalue <= 1000) {
 8001468:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800146c:	2b00      	cmp	r3, #0
 800146e:	db79      	blt.n	8001564 <setPWM+0x10c>
 8001470:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001474:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001478:	dc74      	bgt.n	8001564 <setPWM+0x10c>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, fabs(pwmvalue));
 800147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147c:	2b00      	cmp	r3, #0
 800147e:	d113      	bne.n	80014a8 <setPWM+0x50>
 8001480:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f865 	bl	8000554 <__aeabi_i2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	623a      	str	r2, [r7, #32]
 8001490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
 8001496:	4b9c      	ldr	r3, [pc, #624]	@ (8001708 <setPWM+0x2b0>)
 8001498:	681c      	ldr	r4, [r3, #0]
 800149a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800149e:	f7ff f8c3 	bl	8000628 <__aeabi_d2uiz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80014a6:	e040      	b.n	800152a <setPWM+0xd2>
 80014a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d113      	bne.n	80014d6 <setPWM+0x7e>
 80014ae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f84e 	bl	8000554 <__aeabi_i2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	61ba      	str	r2, [r7, #24]
 80014be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	4b90      	ldr	r3, [pc, #576]	@ (8001708 <setPWM+0x2b0>)
 80014c6:	681c      	ldr	r4, [r3, #0]
 80014c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014cc:	f7ff f8ac 	bl	8000628 <__aeabi_d2uiz>
 80014d0:	4603      	mov	r3, r0
 80014d2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80014d4:	e029      	b.n	800152a <setPWM+0xd2>
 80014d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d113      	bne.n	8001504 <setPWM+0xac>
 80014dc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f837 	bl	8000554 <__aeabi_i2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	613a      	str	r2, [r7, #16]
 80014ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	4b85      	ldr	r3, [pc, #532]	@ (8001708 <setPWM+0x2b0>)
 80014f4:	681c      	ldr	r4, [r3, #0]
 80014f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014fa:	f7ff f895 	bl	8000628 <__aeabi_d2uiz>
 80014fe:	4603      	mov	r3, r0
 8001500:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001502:	e012      	b.n	800152a <setPWM+0xd2>
 8001504:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f823 	bl	8000554 <__aeabi_i2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	60ba      	str	r2, [r7, #8]
 8001514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b7b      	ldr	r3, [pc, #492]	@ (8001708 <setPWM+0x2b0>)
 800151c:	681c      	ldr	r4, [r3, #0]
 800151e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001522:	f7ff f881 	bl	8000628 <__aeabi_d2uiz>
 8001526:	4603      	mov	r3, r0
 8001528:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2,0);
 800152a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <setPWM+0xe2>
 8001530:	4b75      	ldr	r3, [pc, #468]	@ (8001708 <setPWM+0x2b0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	635a      	str	r2, [r3, #52]	@ 0x34
 8001538:	e115      	b.n	8001766 <setPWM+0x30e>
 800153a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800153c:	2b04      	cmp	r3, #4
 800153e:	d104      	bne.n	800154a <setPWM+0xf2>
 8001540:	4b71      	ldr	r3, [pc, #452]	@ (8001708 <setPWM+0x2b0>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38
 8001548:	e10d      	b.n	8001766 <setPWM+0x30e>
 800154a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800154c:	2b08      	cmp	r3, #8
 800154e:	d104      	bne.n	800155a <setPWM+0x102>
 8001550:	4b6d      	ldr	r3, [pc, #436]	@ (8001708 <setPWM+0x2b0>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001558:	e105      	b.n	8001766 <setPWM+0x30e>
 800155a:	4b6b      	ldr	r3, [pc, #428]	@ (8001708 <setPWM+0x2b0>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	e100      	b.n	8001766 <setPWM+0x30e>
    }

    else if(pwmvalue >= -1000 && pwmvalue < 0 ) {
 8001564:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001568:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800156c:	db75      	blt.n	800165a <setPWM+0x202>
 800156e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001572:	2b00      	cmp	r3, #0
 8001574:	da71      	bge.n	800165a <setPWM+0x202>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 0);
 8001576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001578:	2b00      	cmp	r3, #0
 800157a:	d104      	bne.n	8001586 <setPWM+0x12e>
 800157c:	4b62      	ldr	r3, [pc, #392]	@ (8001708 <setPWM+0x2b0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	635a      	str	r2, [r3, #52]	@ 0x34
 8001584:	e013      	b.n	80015ae <setPWM+0x156>
 8001586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001588:	2b04      	cmp	r3, #4
 800158a:	d104      	bne.n	8001596 <setPWM+0x13e>
 800158c:	4b5e      	ldr	r3, [pc, #376]	@ (8001708 <setPWM+0x2b0>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	6393      	str	r3, [r2, #56]	@ 0x38
 8001594:	e00b      	b.n	80015ae <setPWM+0x156>
 8001596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001598:	2b08      	cmp	r3, #8
 800159a:	d104      	bne.n	80015a6 <setPWM+0x14e>
 800159c:	4b5a      	ldr	r3, [pc, #360]	@ (8001708 <setPWM+0x2b0>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80015a4:	e003      	b.n	80015ae <setPWM+0x156>
 80015a6:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <setPWM+0x2b0>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, fabs(pwmvalue));
 80015ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d113      	bne.n	80015dc <setPWM+0x184>
 80015b4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffcb 	bl	8000554 <__aeabi_i2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	603a      	str	r2, [r7, #0]
 80015c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001708 <setPWM+0x2b0>)
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d2:	f7ff f829 	bl	8000628 <__aeabi_d2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80015da:	e0c4      	b.n	8001766 <setPWM+0x30e>
 80015dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d112      	bne.n	8001608 <setPWM+0x1b0>
 80015e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffb4 	bl	8000554 <__aeabi_i2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4615      	mov	r5, r2
 80015f2:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80015f6:	4b44      	ldr	r3, [pc, #272]	@ (8001708 <setPWM+0x2b0>)
 80015f8:	681c      	ldr	r4, [r3, #0]
 80015fa:	4628      	mov	r0, r5
 80015fc:	4631      	mov	r1, r6
 80015fe:	f7ff f813 	bl	8000628 <__aeabi_d2uiz>
 8001602:	4603      	mov	r3, r0
 8001604:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001606:	e0ae      	b.n	8001766 <setPWM+0x30e>
 8001608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800160a:	2b08      	cmp	r3, #8
 800160c:	d112      	bne.n	8001634 <setPWM+0x1dc>
 800160e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff9e 	bl	8000554 <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4692      	mov	sl, r2
 800161e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001622:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <setPWM+0x2b0>)
 8001624:	681c      	ldr	r4, [r3, #0]
 8001626:	4650      	mov	r0, sl
 8001628:	4659      	mov	r1, fp
 800162a:	f7fe fffd 	bl	8000628 <__aeabi_d2uiz>
 800162e:	4603      	mov	r3, r0
 8001630:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001632:	e098      	b.n	8001766 <setPWM+0x30e>
 8001634:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff8b 	bl	8000554 <__aeabi_i2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4690      	mov	r8, r2
 8001644:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001648:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <setPWM+0x2b0>)
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe ffea 	bl	8000628 <__aeabi_d2uiz>
 8001654:	4603      	mov	r3, r0
 8001656:	6423      	str	r3, [r4, #64]	@ 0x40
 8001658:	e085      	b.n	8001766 <setPWM+0x30e>
    }

    else if(pwmvalue > 1000 ) {
 800165a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800165e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001662:	dd3c      	ble.n	80016de <setPWM+0x286>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 1000);
 8001664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <setPWM+0x21e>
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <setPWM+0x2b0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001672:	635a      	str	r2, [r3, #52]	@ 0x34
 8001674:	e016      	b.n	80016a4 <setPWM+0x24c>
 8001676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001678:	2b04      	cmp	r3, #4
 800167a:	d105      	bne.n	8001688 <setPWM+0x230>
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <setPWM+0x2b0>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	6393      	str	r3, [r2, #56]	@ 0x38
 8001686:	e00d      	b.n	80016a4 <setPWM+0x24c>
 8001688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168a:	2b08      	cmp	r3, #8
 800168c:	d105      	bne.n	800169a <setPWM+0x242>
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <setPWM+0x2b0>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001696:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001698:	e004      	b.n	80016a4 <setPWM+0x24c>
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <setPWM+0x2b0>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a2:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 0);
 80016a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d104      	bne.n	80016b4 <setPWM+0x25c>
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <setPWM+0x2b0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 80016b2:	e058      	b.n	8001766 <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 0);
 80016b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d104      	bne.n	80016c4 <setPWM+0x26c>
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <setPWM+0x2b0>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80016c2:	e050      	b.n	8001766 <setPWM+0x30e>
 80016c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d104      	bne.n	80016d4 <setPWM+0x27c>
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <setPWM+0x2b0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016d2:	e048      	b.n	8001766 <setPWM+0x30e>
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <setPWM+0x2b0>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2300      	movs	r3, #0
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80016dc:	e043      	b.n	8001766 <setPWM+0x30e>
    else if(pwmvalue < -1000 ) {
 80016de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80016e2:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80016e6:	da3e      	bge.n	8001766 <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 0);
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d104      	bne.n	80016f8 <setPWM+0x2a0>
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <setPWM+0x2b0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016f6:	e015      	b.n	8001724 <setPWM+0x2cc>
 80016f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d106      	bne.n	800170c <setPWM+0x2b4>
 80016fe:	4b02      	ldr	r3, [pc, #8]	@ (8001708 <setPWM+0x2b0>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	6393      	str	r3, [r2, #56]	@ 0x38
 8001706:	e00d      	b.n	8001724 <setPWM+0x2cc>
 8001708:	20003fd4 	.word	0x20003fd4
 800170c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170e:	2b08      	cmp	r3, #8
 8001710:	d104      	bne.n	800171c <setPWM+0x2c4>
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <setPWM+0x318>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800171a:	e003      	b.n	8001724 <setPWM+0x2cc>
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <setPWM+0x318>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <setPWM+0x2de>
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <setPWM+0x318>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001734:	e017      	b.n	8001766 <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001738:	2b04      	cmp	r3, #4
 800173a:	d105      	bne.n	8001748 <setPWM+0x2f0>
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <setPWM+0x318>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001744:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001746:	e00e      	b.n	8001766 <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174a:	2b08      	cmp	r3, #8
 800174c:	d105      	bne.n	800175a <setPWM+0x302>
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <setPWM+0x318>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001756:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001758:	e005      	b.n	8001766 <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <setPWM+0x318>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001764:	e7ff      	b.n	8001766 <setPWM+0x30e>
 8001766:	bf00      	nop
 8001768:	373c      	adds	r7, #60	@ 0x3c
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001770:	20003fd4 	.word	0x20003fd4

08001774 <calculatePID>:

/* --- PID Hesaplama --- */
float calculatePID(Wheel *wheel, int max_pwm, int min_pwm, int dt) {
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]


	float error = wheel->targetSpeed-wheel->currentSpeed;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	461a      	mov	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	edc7 7a06 	vstr	s15, [r7, #24]
    wheel->integralSpeed += error / dt;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b4:	ed97 6a06 	vldr	s12, [r7, #24]
 80017b8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 2a90 	vmov	r2, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	609a      	str	r2, [r3, #8]
    if (wheel->integralSpeed > wheel->integralLimit) wheel->integralSpeed = max_pwm / wheel->KP;  // Anti-windup
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edd3 7a06 	vldr	s15, [r3, #24]
 80017de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	dd0f      	ble.n	8001808 <calculatePID+0x94>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80017f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001800:	ee17 2a90 	vmov	r2, s15
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	609a      	str	r2, [r3, #8]
    if (wheel->integralSpeed < -wheel->integralLimit) wheel->integralSpeed = min_pwm / wheel->KP;  // Anti-windup
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	edd3 7a06 	vldr	s15, [r3, #24]
 800181a:	eef1 7a67 	vneg.f32	s15, s15
 800181e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	d50f      	bpl.n	8001848 <calculatePID+0xd4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	ed93 7a03 	vldr	s14, [r3, #12]
 8001838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001840:	ee17 2a90 	vmov	r2, s15
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]

    float derivative = (error - wheel->previousErrorSpeed) * dt;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	ed97 7a06 	vldr	s14, [r7, #24]
 800185a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186c:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel->previousErrorSpeed = error;
 8001870:	edd7 7a06 	vldr	s15, [r7, #24]
 8001874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001878:	ee17 3a90 	vmov	r3, s15
 800187c:	b21a      	sxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	809a      	strh	r2, [r3, #4]

    float output = wheel->KP * error + wheel->KI * wheel->integralSpeed + wheel->KD * derivative;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	ed93 7a03 	vldr	s14, [r3, #12]
 8001888:	edd7 7a06 	vldr	s15, [r7, #24]
 800188c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	edd3 6a04 	vldr	s13, [r3, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80018b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc7 7a07 	vstr	s15, [r7, #28]

    if (output > max_pwm) output = max_pwm;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80018ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	dd06      	ble.n	80018e6 <calculatePID+0x172>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	edc7 7a07 	vstr	s15, [r7, #28]
    if (output < min_pwm) output = min_pwm;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d506      	bpl.n	800190c <calculatePID+0x198>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	edc7 7a07 	vstr	s15, [r7, #28]

    return output;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	ee07 3a90 	vmov	s15, r3
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	3724      	adds	r7, #36	@ 0x24
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <controlWheel>:

uint64_t now;
/* --- Tekerlek Kontrolü --- */
void controlWheel(uint32_t channel1, uint32_t channel2, Wheel *wheel) {
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]

	now = HAL_GetTick();
 800192c:	f000 feb2 	bl	8002694 <HAL_GetTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2200      	movs	r2, #0
 8001934:	461c      	mov	r4, r3
 8001936:	4615      	mov	r5, r2
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <controlWheel+0x70>)
 800193a:	e9c3 4500 	strd	r4, r5, [r3]
	dt = now - last_heartbeat_time;
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <controlWheel+0x70>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <controlWheel+0x74>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	461a      	mov	r2, r3
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <controlWheel+0x78>)
 800194e:	601a      	str	r2, [r3, #0]
	int16_t pwmValue = calculatePID(wheel, MAX_SPEED_PWM, MIN_SPEED_PWM, dt);
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <controlWheel+0x78>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <controlWheel+0x7c>)
 8001956:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff0a 	bl	8001774 <calculatePID>
 8001960:	eef0 7a40 	vmov.f32	s15, s0
 8001964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	82fb      	strh	r3, [r7, #22]
	last_heartbeat_time = HAL_GetTick();
 800196e:	f000 fe91 	bl	8002694 <HAL_GetTick>
 8001972:	4603      	mov	r3, r0
 8001974:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <controlWheel+0x74>)
 8001976:	6013      	str	r3, [r2, #0]
	setPWM(channel1, channel2, pwmValue);
 8001978:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff fd69 	bl	8001458 <setPWM>

}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	200041d8 	.word	0x200041d8
 8001994:	200041c8 	.word	0x200041c8
 8001998:	200041c4 	.word	0x200041c4
 800199c:	fffffc18 	.word	0xfffffc18

080019a0 <subscription_callback_controller>:




void subscription_callback_controller(const void * msgin){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]


	// Cast received message to used type
	const rover_msgs__msg__ControllerMsg * incoming_msg = (const rover_msgs__msg__ControllerMsg *)msgin;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2120      	movs	r1, #32
 80019b0:	4817      	ldr	r0, [pc, #92]	@ (8001a10 <subscription_callback_controller+0x70>)
 80019b2:	f001 fd13 	bl	80033dc <HAL_GPIO_WritePin>
    //en son alinan mesajin kacinci saniyede alindigini tut
	last_message_time = HAL_GetTick();
 80019b6:	f000 fe6d 	bl	8002694 <HAL_GetTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <subscription_callback_controller+0x74>)
 80019be:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2120      	movs	r1, #32
 80019c4:	4812      	ldr	r0, [pc, #72]	@ (8001a10 <subscription_callback_controller+0x70>)
 80019c6:	f001 fd09 	bl	80033dc <HAL_GPIO_WritePin>
    FrontWheel.targetSpeed  = (int)incoming_msg->right_speed;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	b21a      	sxth	r2, r3
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <subscription_callback_controller+0x78>)
 80019dc:	801a      	strh	r2, [r3, #0]
    BackWheel.targetSpeed   = (int)incoming_msg->right_speed;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e8:	ee17 3a90 	vmov	r3, s15
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <subscription_callback_controller+0x7c>)
 80019f0:	801a      	strh	r2, [r3, #0]

    // Rover'ı kontrol et
    controlWheel(TIM_CHANNEL_1, TIM_CHANNEL_2, &FrontWheel);
 80019f2:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <subscription_callback_controller+0x78>)
 80019f4:	2104      	movs	r1, #4
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff ff92 	bl	8001920 <controlWheel>
    controlWheel(TIM_CHANNEL_3, TIM_CHANNEL_4, &BackWheel);
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <subscription_callback_controller+0x7c>)
 80019fe:	210c      	movs	r1, #12
 8001a00:	2008      	movs	r0, #8
 8001a02:	f7ff ff8d 	bl	8001920 <controlWheel>

}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40020000 	.word	0x40020000
 8001a14:	200041d0 	.word	0x200041d0
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	2000001c 	.word	0x2000001c

08001a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b0c6      	sub	sp, #280	@ 0x118
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8001a28:	4b45      	ldr	r3, [pc, #276]	@ (8001b40 <StartDefaultTask+0x120>)
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	4b45      	ldr	r3, [pc, #276]	@ (8001b44 <StartDefaultTask+0x124>)
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <StartDefaultTask+0x128>)
 8001a32:	4a46      	ldr	r2, [pc, #280]	@ (8001b4c <StartDefaultTask+0x12c>)
 8001a34:	4946      	ldr	r1, [pc, #280]	@ (8001b50 <StartDefaultTask+0x130>)
 8001a36:	2001      	movs	r0, #1
 8001a38:	f008 f85e 	bl	8009af8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a3c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001a40:	4618      	mov	r0, r3
 8001a42:	f007 ffab 	bl	800999c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001a46:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <StartDefaultTask+0x134>)
 8001a48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a4c:	4b42      	ldr	r3, [pc, #264]	@ (8001b58 <StartDefaultTask+0x138>)
 8001a4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a52:	4b42      	ldr	r3, [pc, #264]	@ (8001b5c <StartDefaultTask+0x13c>)
 8001a54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a58:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <StartDefaultTask+0x140>)
 8001a5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	      rclc_support_t support;
	      rclc_executor_t executor;
	      rcl_allocator_t allocator;


	      allocator = rcl_get_default_allocator();
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 ffa9 	bl	80099b8 <rcutils_get_default_allocator>
 8001a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a6e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001a72:	461d      	mov	r5, r3
 8001a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a78:	682b      	ldr	r3, [r5, #0]
 8001a7a:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a80:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	f007 fec6 	bl	8009818 <rclc_support_init>


	      	    // create node
	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 8001a8c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a90:	4a34      	ldr	r2, [pc, #208]	@ (8001b64 <StartDefaultTask+0x144>)
 8001a92:	4935      	ldr	r1, [pc, #212]	@ (8001b68 <StartDefaultTask+0x148>)
 8001a94:	4835      	ldr	r0, [pc, #212]	@ (8001b6c <StartDefaultTask+0x14c>)
 8001a96:	f007 ff09 	bl	80098ac <rclc_node_init_default>
	      rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001aa2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f007 fbee 	bl	8009288 <rclc_executor_init>


	      	    // create subscription
	      rclc_subscription_init_default(
 8001aac:	f008 f83a 	bl	8009b24 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <StartDefaultTask+0x150>)
 8001ab4:	492d      	ldr	r1, [pc, #180]	@ (8001b6c <StartDefaultTask+0x14c>)
 8001ab6:	482f      	ldr	r0, [pc, #188]	@ (8001b74 <StartDefaultTask+0x154>)
 8001ab8:	f007 ff34 	bl	8009924 <rclc_subscription_init_default>
	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, ControllerMsg),
	      	        "joystick_cmd");



	      rclc_executor_add_subscription(
 8001abc:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001ac0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <StartDefaultTask+0x158>)
 8001aca:	492a      	ldr	r1, [pc, #168]	@ (8001b74 <StartDefaultTask+0x154>)
 8001acc:	f007 fc4c 	bl	8009368 <rclc_executor_add_subscription>


	  while(1)
	  {
		  //mesaj gelip gelmedigini kontrol et
		  rclc_executor_spin_some(&executor,100);
 8001ad0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001ad4:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	4608      	mov	r0, r1
 8001ade:	f007 fe63 	bl	80097a8 <rclc_executor_spin_some>

		  //programin calisma zamani
		  heartbeat_time = HAL_GetTick();
 8001ae2:	f000 fdd7 	bl	8002694 <HAL_GetTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <StartDefaultTask+0x15c>)
 8001aea:	6013      	str	r3, [r2, #0]

		  //250 milisaniye boyunca mesaj alinmamissa motorlari durdur.
		  if (HAL_GetTick() - last_message_time > 250) {
 8001aec:	f000 fdd2 	bl	8002694 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <StartDefaultTask+0x160>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2bfa      	cmp	r3, #250	@ 0xfa
 8001afa:	d903      	bls.n	8001b04 <StartDefaultTask+0xe4>
		      connection_lost = true;
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <StartDefaultTask+0x164>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e002      	b.n	8001b0a <StartDefaultTask+0xea>
		  }
		  else {
		      connection_lost = false;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <StartDefaultTask+0x164>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		  }

		  if(connection_lost == true){
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <StartDefaultTask+0x164>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0de      	beq.n	8001ad0 <StartDefaultTask+0xb0>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <StartDefaultTask+0x168>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <StartDefaultTask+0x168>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <StartDefaultTask+0x168>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <StartDefaultTask+0x168>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2120      	movs	r1, #32
 8001b36:	4815      	ldr	r0, [pc, #84]	@ (8001b8c <StartDefaultTask+0x16c>)
 8001b38:	f001 fc50 	bl	80033dc <HAL_GPIO_WritePin>
		  rclc_executor_spin_some(&executor,100);
 8001b3c:	e7c8      	b.n	8001ad0 <StartDefaultTask+0xb0>
 8001b3e:	bf00      	nop
 8001b40:	080024cd 	.word	0x080024cd
 8001b44:	08002465 	.word	0x08002465
 8001b48:	08002445 	.word	0x08002445
 8001b4c:	08002419 	.word	0x08002419
 8001b50:	200040ac 	.word	0x200040ac
 8001b54:	08001b99 	.word	0x08001b99
 8001b58:	08001bdd 	.word	0x08001bdd
 8001b5c:	08001c15 	.word	0x08001c15
 8001b60:	08001c81 	.word	0x08001c81
 8001b64:	080160b4 	.word	0x080160b4
 8001b68:	080160b8 	.word	0x080160b8
 8001b6c:	200041b8 	.word	0x200041b8
 8001b70:	080160c4 	.word	0x080160c4
 8001b74:	200041c0 	.word	0x200041c0
 8001b78:	080019a1 	.word	0x080019a1
 8001b7c:	200041cc 	.word	0x200041cc
 8001b80:	200041d0 	.word	0x200041d0
 8001b84:	200041d4 	.word	0x200041d4
 8001b88:	20003fd4 	.word	0x20003fd4
 8001b8c:	40020000 	.word	0x40020000

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <Error_Handler+0x4>

08001b98 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <microros_allocate+0x3c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <microros_allocate+0x3c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <microros_allocate+0x40>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <microros_allocate+0x40>)
 8001bc0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe ff18 	bl	80009f8 <pvPortMallocMicroROS>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200041e0 	.word	0x200041e0
 8001bd8:	200041e4 	.word	0x200041e4

08001bdc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff f827 	bl	8000c40 <getBlockSize>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <microros_deallocate+0x34>)
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <microros_deallocate+0x34>)
 8001bfe:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe ffc1 	bl	8000b88 <vPortFreeMicroROS>
  }
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200041e4 	.word	0x200041e4

08001c14 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <microros_reallocate+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4413      	add	r3, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <microros_reallocate+0x64>)
 8001c2e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <microros_reallocate+0x68>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <microros_reallocate+0x68>)
 8001c3e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d104      	bne.n	8001c50 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001c46:	68b8      	ldr	r0, [r7, #8]
 8001c48:	f7fe fed6 	bl	80009f8 <pvPortMallocMicroROS>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	e00e      	b.n	8001c6e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7fe fff5 	bl	8000c40 <getBlockSize>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a08      	ldr	r2, [pc, #32]	@ (8001c7c <microros_reallocate+0x68>)
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <microros_reallocate+0x68>)
 8001c62:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff f808 	bl	8000c7c <pvPortReallocMicroROS>
 8001c6c:	4603      	mov	r3, r0
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200041e0 	.word	0x200041e0
 8001c7c:	200041e4 	.word	0x200041e4

08001c80 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <microros_zero_allocate+0x48>)
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <microros_zero_allocate+0x48>)
 8001c9e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <microros_zero_allocate+0x4c>)
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <microros_zero_allocate+0x4c>)
 8001cb2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff f80d 	bl	8000cd6 <pvPortCallocMicroROS>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200041e0 	.word	0x200041e0
 8001ccc:	200041e4 	.word	0x200041e4

08001cd0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ce6:	a320      	add	r3, pc, #128	@ (adr r3, 8001d68 <UTILS_NanosecondsToTimespec+0x98>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fcbc 	bl	8000668 <__aeabi_ldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cfe:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d68 <UTILS_NanosecondsToTimespec+0x98>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fcb0 	bl	8000668 <__aeabi_ldivmod>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da20      	bge.n	8001d56 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <UTILS_NanosecondsToTimespec+0x90>)
 8001d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1e:	1712      	asrs	r2, r2, #28
 8001d20:	17db      	asrs	r3, r3, #31
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	17c8      	asrs	r0, r1, #31
 8001d32:	460c      	mov	r4, r1
 8001d34:	4605      	mov	r5, r0
 8001d36:	ebb2 0804 	subs.w	r8, r2, r4
 8001d3a:	eb63 0905 	sbc.w	r9, r3, r5
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4906      	ldr	r1, [pc, #24]	@ (8001d64 <UTILS_NanosecondsToTimespec+0x94>)
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	441a      	add	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
    }
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d60:	44b82fa1 	.word	0x44b82fa1
 8001d64:	3b9aca00 	.word	0x3b9aca00
 8001d68:	3b9aca00 	.word	0x3b9aca00
 8001d6c:	00000000 	.word	0x00000000

08001d70 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d74:	b08e      	sub	sp, #56	@ 0x38
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d7a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001d7c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d80:	2300      	movs	r3, #0
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fd30 	bl	80077fc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9e:	17da      	asrs	r2, r3, #31
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	61fa      	str	r2, [r7, #28]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	69b9      	ldr	r1, [r7, #24]
 8001dae:	000b      	movs	r3, r1
 8001db0:	2200      	movs	r2, #0
 8001db2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db8:	2200      	movs	r2, #0
 8001dba:	461c      	mov	r4, r3
 8001dbc:	4615      	mov	r5, r2
 8001dbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001dc2:	1911      	adds	r1, r2, r4
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	416b      	adcs	r3, r5
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dce:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001dd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	f04f 0400 	mov.w	r4, #0
 8001dde:	f04f 0500 	mov.w	r5, #0
 8001de2:	015d      	lsls	r5, r3, #5
 8001de4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001de8:	0154      	lsls	r4, r2, #5
 8001dea:	4622      	mov	r2, r4
 8001dec:	462b      	mov	r3, r5
 8001dee:	ebb2 0800 	subs.w	r8, r2, r0
 8001df2:	eb63 0901 	sbc.w	r9, r3, r1
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e02:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e06:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	eb18 0a00 	adds.w	sl, r8, r0
 8001e12:	eb49 0b01 	adc.w	fp, r9, r1
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e22:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e26:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e2a:	ebb2 040a 	subs.w	r4, r2, sl
 8001e2e:	603c      	str	r4, [r7, #0]
 8001e30:	eb63 030b 	sbc.w	r3, r3, fp
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	181b      	adds	r3, r3, r0
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	462b      	mov	r3, r5
 8001e42:	eb41 0303 	adc.w	r3, r1, r3
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	6a3a      	ldr	r2, [r7, #32]
 8001e4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e4e:	f7ff ff3f 	bl	8001cd0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	3738      	adds	r7, #56	@ 0x38
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_MspInit+0x54>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_MspInit+0x54>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_MspInit+0x54>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_MspInit+0x54>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <HAL_MspInit+0x54>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <HAL_MspInit+0x54>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	f06f 0001 	mvn.w	r0, #1
 8001ea6:	f000 fcdc 	bl	8002862 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_TIM_Base_MspInit+0x40>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <HAL_TIM_Base_MspInit+0x40>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <HAL_TIM_Base_MspInit+0x40>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12c      	bne.n	8001f78 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a30      	ldr	r2, [pc, #192]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f56:	23c0      	movs	r3, #192	@ 0xc0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481e      	ldr	r0, [pc, #120]	@ (8001fec <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f72:	f001 f8af 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f76:	e030      	b.n	8001fda <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fba:	23c0      	movs	r3, #192	@ 0xc0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4807      	ldr	r0, [pc, #28]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001fd6:	f001 f87d 	bl	80030d4 <HAL_GPIO_Init>
}
 8001fda:	bf00      	nop
 8001fdc:	3730      	adds	r7, #48	@ 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40020400 	.word	0x40020400

08001ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <HAL_TIM_MspPostInit+0x68>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d11e      	bne.n	8002058 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_TIM_MspPostInit+0x6c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <HAL_TIM_MspPostInit+0x6c>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <HAL_TIM_MspPostInit+0x6c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002036:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800203a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002048:	2301      	movs	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <HAL_TIM_MspPostInit+0x70>)
 8002054:	f001 f83e 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010000 	.word	0x40010000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020000 	.word	0x40020000

0800206c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a4d      	ldr	r2, [pc, #308]	@ (80021c0 <HAL_UART_MspInit+0x154>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f040 8093 	bne.w	80021b6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	4b4b      	ldr	r3, [pc, #300]	@ (80021c4 <HAL_UART_MspInit+0x158>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	4a4a      	ldr	r2, [pc, #296]	@ (80021c4 <HAL_UART_MspInit+0x158>)
 800209a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209e:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a0:	4b48      	ldr	r3, [pc, #288]	@ (80021c4 <HAL_UART_MspInit+0x158>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <HAL_UART_MspInit+0x158>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	4a43      	ldr	r2, [pc, #268]	@ (80021c4 <HAL_UART_MspInit+0x158>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80020bc:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_UART_MspInit+0x158>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020c8:	230c      	movs	r3, #12
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d8:	2307      	movs	r3, #7
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4839      	ldr	r0, [pc, #228]	@ (80021c8 <HAL_UART_MspInit+0x15c>)
 80020e4:	f000 fff6 	bl	80030d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80020e8:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <HAL_UART_MspInit+0x160>)
 80020ea:	4a39      	ldr	r2, [pc, #228]	@ (80021d0 <HAL_UART_MspInit+0x164>)
 80020ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80020ee:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HAL_UART_MspInit+0x160>)
 80020f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f6:	4b35      	ldr	r3, [pc, #212]	@ (80021cc <HAL_UART_MspInit+0x160>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	4b33      	ldr	r3, [pc, #204]	@ (80021cc <HAL_UART_MspInit+0x160>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002104:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002108:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210a:	4b30      	ldr	r3, [pc, #192]	@ (80021cc <HAL_UART_MspInit+0x160>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002110:	4b2e      	ldr	r3, [pc, #184]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002116:	4b2d      	ldr	r3, [pc, #180]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002118:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800211c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002120:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002124:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002126:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002128:	2200      	movs	r2, #0
 800212a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800212c:	4827      	ldr	r0, [pc, #156]	@ (80021cc <HAL_UART_MspInit+0x160>)
 800212e:	f000 fbcf 	bl	80028d0 <HAL_DMA_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002138:	f7ff fd2a 	bl	8001b90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a23      	ldr	r2, [pc, #140]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002140:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002142:	4a22      	ldr	r2, [pc, #136]	@ (80021cc <HAL_UART_MspInit+0x160>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <HAL_UART_MspInit+0x16c>)
 800214c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800214e:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 8002150:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002154:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002156:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 8002158:	2240      	movs	r2, #64	@ 0x40
 800215a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 8002164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002168:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002170:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 8002178:	2200      	movs	r2, #0
 800217a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800217c:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 800217e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002182:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800218a:	4812      	ldr	r0, [pc, #72]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 800218c:	f000 fba0 	bl	80028d0 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002196:	f7ff fcfb 	bl	8001b90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 800219e:	639a      	str	r2, [r3, #56]	@ 0x38
 80021a0:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_UART_MspInit+0x168>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2105      	movs	r1, #5
 80021aa:	2026      	movs	r0, #38	@ 0x26
 80021ac:	f000 fb59 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021b0:	2026      	movs	r0, #38	@ 0x26
 80021b2:	f000 fb72 	bl	800289a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	@ 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40004400 	.word	0x40004400
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	200040f4 	.word	0x200040f4
 80021d0:	40026088 	.word	0x40026088
 80021d4:	20004154 	.word	0x20004154
 80021d8:	400260a0 	.word	0x400260a0

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <NMI_Handler+0x4>

080021e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <MemManage_Handler+0x4>

080021f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <UsageFault_Handler+0x4>

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002216:	f000 fa29 	bl	800266c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800221a:	f005 fc73 	bl	8007b04 <xTaskGetSchedulerState>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	d001      	beq.n	8002228 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002224:	f006 fa68 	bl	80086f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <DMA1_Stream5_IRQHandler+0x10>)
 8002232:	f000 fce5 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200040f4 	.word	0x200040f4

08002240 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <DMA1_Stream6_IRQHandler+0x10>)
 8002246:	f000 fcdb 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20004154 	.word	0x20004154

08002254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <USART2_IRQHandler+0x10>)
 800225a:	f002 fdf5 	bl	8004e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200040ac 	.word	0x200040ac

08002268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_kill>:

int _kill(int pid, int sig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002282:	f012 fffd 	bl	8015280 <__errno>
 8002286:	4603      	mov	r3, r0
 8002288:	2216      	movs	r2, #22
 800228a:	601a      	str	r2, [r3, #0]
  return -1;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_exit>:

void _exit (int status)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ffe7 	bl	8002278 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022aa:	bf00      	nop
 80022ac:	e7fd      	b.n	80022aa <_exit+0x12>

080022ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e00a      	b.n	80022d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022c0:	f3af 8000 	nop.w
 80022c4:	4601      	mov	r1, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	60ba      	str	r2, [r7, #8]
 80022cc:	b2ca      	uxtb	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbf0      	blt.n	80022c0 <_read+0x12>
  }

  return len;
 80022de:	687b      	ldr	r3, [r7, #4]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e009      	b.n	800230e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	60ba      	str	r2, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	dbf1      	blt.n	80022fa <_write+0x12>
  }
  return len;
 8002316:	687b      	ldr	r3, [r7, #4]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_close>:

int _close(int file)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002348:	605a      	str	r2, [r3, #4]
  return 0;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_isatty>:

int _isatty(int file)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002390:	4a14      	ldr	r2, [pc, #80]	@ (80023e4 <_sbrk+0x5c>)
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <_sbrk+0x60>)
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800239c:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a4:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <_sbrk+0x64>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	@ (80023f0 <_sbrk+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d207      	bcs.n	80023c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b8:	f012 ff62 	bl	8015280 <__errno>
 80023bc:	4603      	mov	r3, r0
 80023be:	220c      	movs	r2, #12
 80023c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023c6:	e009      	b.n	80023dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ce:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <_sbrk+0x64>)
 80023d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20018000 	.word	0x20018000
 80023e8:	00000400 	.word	0x00000400
 80023ec:	200041ec 	.word	0x200041ec
 80023f0:	2000dfa0 	.word	0x2000dfa0

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <SystemInit+0x20>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	4a05      	ldr	r2, [pc, #20]	@ (8002414 <SystemInit+0x20>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002426:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002428:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800242c:	4904      	ldr	r1, [pc, #16]	@ (8002440 <cubemx_transport_open+0x28>)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f002 fc66 	bl	8004d00 <HAL_UART_Receive_DMA>
    return true;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200041f0 	.word	0x200041f0

08002444 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002452:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f002 fc78 	bl	8004d4a <HAL_UART_DMAStop>
    return true;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002478:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d11c      	bne.n	80024c0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	b29b      	uxth	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f002 fbc6 	bl	8004c20 <HAL_UART_Transmit_DMA>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002498:	e002      	b.n	80024a0 <cubemx_transport_write+0x3c>
            osDelay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f003 fee2 	bl	8006264 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <cubemx_transport_write+0x4e>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d1f3      	bne.n	800249a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <cubemx_transport_write+0x58>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	e002      	b.n	80024c2 <cubemx_transport_write+0x5e>
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80024c0:	2300      	movs	r3, #0
    }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80024e0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e6:	b672      	cpsid	i
}
 80024e8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80024f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <cubemx_transport_read+0x9c>)
 80024f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024fa:	b662      	cpsie	i
}
 80024fc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002504:	2001      	movs	r0, #1
 8002506:	f003 fead 	bl	8006264 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800250a:	4b18      	ldr	r3, [pc, #96]	@ (800256c <cubemx_transport_read+0xa0>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <cubemx_transport_read+0x9c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d103      	bne.n	800251e <cubemx_transport_read+0x52>
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbe3      	blt.n	80024e6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002522:	e011      	b.n	8002548 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <cubemx_transport_read+0xa0>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	440b      	add	r3, r1
 800252e:	4910      	ldr	r1, [pc, #64]	@ (8002570 <cubemx_transport_read+0xa4>)
 8002530:	5c8a      	ldrb	r2, [r1, r2]
 8002532:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002534:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <cubemx_transport_read+0xa0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253e:	4a0b      	ldr	r2, [pc, #44]	@ (800256c <cubemx_transport_read+0xa0>)
 8002540:	6013      	str	r3, [r2, #0]
        wrote++;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	3301      	adds	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <cubemx_transport_read+0xa0>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <cubemx_transport_read+0x9c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d003      	beq.n	800255c <cubemx_transport_read+0x90>
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d3e3      	bcc.n	8002524 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800255c:	69bb      	ldr	r3, [r7, #24]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200049f4 	.word	0x200049f4
 800256c:	200049f0 	.word	0x200049f0
 8002570:	200041f0 	.word	0x200041f0

08002574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002578:	f7ff ff3c 	bl	80023f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800257c:	480c      	ldr	r0, [pc, #48]	@ (80025b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800257e:	490d      	ldr	r1, [pc, #52]	@ (80025b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002580:	4a0d      	ldr	r2, [pc, #52]	@ (80025b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002594:	4c0a      	ldr	r4, [pc, #40]	@ (80025c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f012 fe73 	bl	801528c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a6:	f7fe fc77 	bl	8000e98 <main>
  bx  lr    
 80025aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 80025b8:	08016d60 	.word	0x08016d60
  ldr r2, =_sbss
 80025bc:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 80025c0:	2000dfa0 	.word	0x2000dfa0

080025c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC_IRQHandler>
	...

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002608 <HAL_Init+0x40>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <HAL_Init+0x40>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	@ (8002608 <HAL_Init+0x40>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 f92b 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	200f      	movs	r0, #15
 80025f8:	f000 f808 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7ff fc30 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_InitTick+0x54>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_InitTick+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f943 	bl	80028b6 <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002648:	f000 f90b 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <HAL_InitTick+0x5c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000003c 	.word	0x2000003c
 8002664:	20000044 	.word	0x20000044
 8002668:	20000040 	.word	0x20000040

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000044 	.word	0x20000044
 8002690:	200049f8 	.word	0x200049f8

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	200049f8 	.word	0x200049f8

080026ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026de:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	60d3      	str	r3, [r2, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <__NVIC_GetPriorityGrouping+0x18>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	f003 0307 	and.w	r3, r3, #7
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	db0b      	blt.n	800273a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4907      	ldr	r1, [pc, #28]	@ (8002748 <__NVIC_EnableIRQ+0x38>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2001      	movs	r0, #1
 8002732:	fa00 f202 	lsl.w	r2, r0, r2
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	@ (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	@ 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	@ 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800282c:	f7ff ff8e 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff29 	bl	80026ac <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff3e 	bl	80026f4 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff8e 	bl	80027a0 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5d 	bl	800274c <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff31 	bl	8002710 <__NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa2 	bl	8002808 <SysTick_Config>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff feda 	bl	8002694 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e099      	b.n	8002a20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290c:	e00f      	b.n	800292e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800290e:	f7ff fec1 	bl	8002694 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b05      	cmp	r3, #5
 800291a:	d908      	bls.n	800292e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e078      	b.n	8002a20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e8      	bne.n	800290e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4b38      	ldr	r3, [pc, #224]	@ (8002a28 <HAL_DMA_Init+0x158>)
 8002948:	4013      	ands	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	2b04      	cmp	r3, #4
 8002986:	d107      	bne.n	8002998 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	4313      	orrs	r3, r2
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0307 	bic.w	r3, r3, #7
 80029ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d117      	bne.n	80029f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb01 	bl	8002fdc <DMA_CheckFifoParam>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2240      	movs	r2, #64	@ 0x40
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029ee:	2301      	movs	r3, #1
 80029f0:	e016      	b.n	8002a20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fab8 	bl	8002f70 <DMA_CalcBaseAndBitshift>
 8002a00:	4603      	mov	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	223f      	movs	r2, #63	@ 0x3f
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	f010803f 	.word	0xf010803f

08002a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_Start_IT+0x26>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e040      	b.n	8002ad4 <HAL_DMA_Start_IT+0xa8>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d12f      	bne.n	8002ac6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa4a 	bl	8002f14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a84:	223f      	movs	r2, #63	@ 0x3f
 8002a86:	409a      	lsls	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0216 	orr.w	r2, r2, #22
 8002a9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e005      	b.n	8002ad2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aea:	f7ff fdd3 	bl	8002694 <HAL_GetTick>
 8002aee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d008      	beq.n	8002b0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e052      	b.n	8002bb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0216 	bic.w	r2, r2, #22
 8002b1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_DMA_Abort+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0208 	bic.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5e:	e013      	b.n	8002b88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b60:	f7ff fd98 	bl	8002694 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d90c      	bls.n	8002b88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2203      	movs	r2, #3
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e015      	b.n	8002bb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e4      	bne.n	8002b60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	223f      	movs	r2, #63	@ 0x3f
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00c      	b.n	8002bf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2205      	movs	r2, #5
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e48 <HAL_DMA_IRQHandler+0x248>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a8e      	ldr	r2, [pc, #568]	@ (8002e4c <HAL_DMA_IRQHandler+0x24c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a9b      	lsrs	r3, r3, #10
 8002c18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01a      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	2208      	movs	r2, #8
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	2201      	movs	r2, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	2210      	movs	r2, #16
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d043      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03c      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
 8002d2e:	e01f      	b.n	8002d70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e016      	b.n	8002d70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0208 	bic.w	r2, r2, #8
 8002d5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	2220      	movs	r2, #32
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 808f 	beq.w	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8087 	beq.w	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	2220      	movs	r2, #32
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d136      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0216 	bic.w	r2, r2, #22
 8002db8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_DMA_IRQHandler+0x1da>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0208 	bic.w	r2, r2, #8
 8002de8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	223f      	movs	r2, #63	@ 0x3f
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d07e      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
        }
        return;
 8002e16:	e079      	b.n	8002f0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01d      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d031      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e02c      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
 8002e46:	bf00      	nop
 8002e48:	2000003c 	.word	0x2000003c
 8002e4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	e01e      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0210 	bic.w	r2, r2, #16
 8002e7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d032      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d307      	bcc.n	8002ee8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f2      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x2cc>
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ee8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
 8002f0a:	e000      	b.n	8002f0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f0c:	bf00      	nop
    }
  }
}
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b40      	cmp	r3, #64	@ 0x40
 8002f40:	d108      	bne.n	8002f54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f52:	e007      	b.n	8002f64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	3b10      	subs	r3, #16
 8002f80:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d909      	bls.n	8002fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fb0:	e007      	b.n	8002fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	aaaaaaab 	.word	0xaaaaaaab
 8002fd8:	08016148 	.word	0x08016148

08002fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d856      	bhi.n	80030aa <DMA_CheckFifoParam+0xce>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <DMA_CheckFifoParam+0x28>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003015 	.word	0x08003015
 8003008:	08003027 	.word	0x08003027
 800300c:	08003015 	.word	0x08003015
 8003010:	080030ab 	.word	0x080030ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d046      	beq.n	80030ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e043      	b.n	80030ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800302e:	d140      	bne.n	80030b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003034:	e03d      	b.n	80030b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303e:	d121      	bne.n	8003084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d837      	bhi.n	80030b6 <DMA_CheckFifoParam+0xda>
 8003046:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <DMA_CheckFifoParam+0x70>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800305d 	.word	0x0800305d
 8003050:	08003063 	.word	0x08003063
 8003054:	0800305d 	.word	0x0800305d
 8003058:	08003075 	.word	0x08003075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e030      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d025      	beq.n	80030ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003072:	e022      	b.n	80030ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800307c:	d11f      	bne.n	80030be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003082:	e01c      	b.n	80030be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d903      	bls.n	8003092 <DMA_CheckFifoParam+0xb6>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d003      	beq.n	8003098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003090:	e018      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      break;
 8003096:	e015      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00e      	beq.n	80030c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e00b      	b.n	80030c2 <DMA_CheckFifoParam+0xe6>
      break;
 80030aa:	bf00      	nop
 80030ac:	e00a      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e008      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e006      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
    }
  } 
  
  return status; 
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	e159      	b.n	80033a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	f040 8148 	bne.w	800339e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d005      	beq.n	8003126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	2b02      	cmp	r3, #2
 8003124:	d130      	bne.n	8003188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0201 	and.w	r2, r3, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d017      	beq.n	80031c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d123      	bne.n	8003218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a2 	beq.w	800339e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b57      	ldr	r3, [pc, #348]	@ (80033bc <HAL_GPIO_Init+0x2e8>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	4a56      	ldr	r2, [pc, #344]	@ (80033bc <HAL_GPIO_Init+0x2e8>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003268:	6453      	str	r3, [r2, #68]	@ 0x44
 800326a:	4b54      	ldr	r3, [pc, #336]	@ (80033bc <HAL_GPIO_Init+0x2e8>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003276:	4a52      	ldr	r2, [pc, #328]	@ (80033c0 <HAL_GPIO_Init+0x2ec>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a49      	ldr	r2, [pc, #292]	@ (80033c4 <HAL_GPIO_Init+0x2f0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x202>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a48      	ldr	r2, [pc, #288]	@ (80033c8 <HAL_GPIO_Init+0x2f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x1fe>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a47      	ldr	r2, [pc, #284]	@ (80033cc <HAL_GPIO_Init+0x2f8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x1fa>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a46      	ldr	r2, [pc, #280]	@ (80033d0 <HAL_GPIO_Init+0x2fc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x1f6>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a45      	ldr	r2, [pc, #276]	@ (80033d4 <HAL_GPIO_Init+0x300>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x1f2>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032c6:	2307      	movs	r3, #7
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x204>
 80032d6:	2300      	movs	r3, #0
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f002 0203 	and.w	r2, r2, #3
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	@ (80033c0 <HAL_GPIO_Init+0x2ec>)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b38      	ldr	r3, [pc, #224]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331a:	4a2f      	ldr	r2, [pc, #188]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003320:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003344:	4a24      	ldr	r2, [pc, #144]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334a:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336e:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003374:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003398:	4a0f      	ldr	r2, [pc, #60]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3301      	adds	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2b0f      	cmp	r3, #15
 80033a8:	f67f aea2 	bls.w	80030f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3724      	adds	r7, #36	@ 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40013c00 	.word	0x40013c00

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e267      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d075      	beq.n	800351a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800342e:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b04      	cmp	r3, #4
 8003438:	d00c      	beq.n	8003454 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003442:	2b08      	cmp	r3, #8
 8003444:	d112      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b82      	ldr	r3, [pc, #520]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b7e      	ldr	r3, [pc, #504]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05b      	beq.n	8003518 <HAL_RCC_OscConfig+0x108>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d157      	bne.n	8003518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e242      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x74>
 8003476:	4b76      	ldr	r3, [pc, #472]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a75      	ldr	r2, [pc, #468]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x98>
 800348e:	4b70      	ldr	r3, [pc, #448]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6f      	ldr	r2, [pc, #444]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b6d      	ldr	r3, [pc, #436]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6c      	ldr	r2, [pc, #432]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 80034a8:	4b69      	ldr	r3, [pc, #420]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a68      	ldr	r2, [pc, #416]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b66      	ldr	r3, [pc, #408]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff f8e4 	bl	8002694 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7ff f8e0 	bl	8002694 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	@ 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e207      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xc0>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff f8d0 	bl	8002694 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7ff f8cc 	bl	8002694 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1f3      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0xe8>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d063      	beq.n	80035ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003526:	4b4a      	ldr	r3, [pc, #296]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800353a:	2b08      	cmp	r3, #8
 800353c:	d11c      	bne.n	8003578 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_OscConfig+0x152>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e1c7      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4937      	ldr	r1, [pc, #220]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	e03a      	b.n	80035ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	4b34      	ldr	r3, [pc, #208]	@ (8003654 <HAL_RCC_OscConfig+0x244>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7ff f885 	bl	8002694 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358e:	f7ff f881 	bl	8002694 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1a8      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b28      	ldr	r3, [pc, #160]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4925      	ldr	r1, [pc, #148]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	e015      	b.n	80035ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <HAL_RCC_OscConfig+0x244>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7ff f864 	bl	8002694 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d0:	f7ff f860 	bl	8002694 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e187      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d036      	beq.n	8003668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <HAL_RCC_OscConfig+0x248>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7ff f844 	bl	8002694 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7ff f840 	bl	8002694 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e167      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x200>
 800362e:	e01b      	b.n	8003668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003630:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <HAL_RCC_OscConfig+0x248>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7ff f82d 	bl	8002694 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	e00e      	b.n	800365c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363e:	f7ff f829 	bl	8002694 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d907      	bls.n	800365c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e150      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	42470000 	.word	0x42470000
 8003658:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8097 	beq.w	80037a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b81      	ldr	r3, [pc, #516]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	4b7d      	ldr	r3, [pc, #500]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	4a7c      	ldr	r2, [pc, #496]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	@ 0x40
 8003696:	4b7a      	ldr	r3, [pc, #488]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b77      	ldr	r3, [pc, #476]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b2:	4b74      	ldr	r3, [pc, #464]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a73      	ldr	r2, [pc, #460]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036be:	f7fe ffe9 	bl	8002694 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c6:	f7fe ffe5 	bl	8002694 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e10c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x2ea>
 80036ec:	4b64      	ldr	r3, [pc, #400]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a63      	ldr	r2, [pc, #396]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x324>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x30c>
 8003702:	4b5f      	ldr	r3, [pc, #380]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	4a5e      	ldr	r2, [pc, #376]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	@ 0x70
 800370e:	4b5c      	ldr	r3, [pc, #368]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a5b      	ldr	r2, [pc, #364]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0x324>
 800371c:	4b58      	ldr	r3, [pc, #352]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	4a57      	ldr	r2, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	@ 0x70
 8003728:	4b55      	ldr	r3, [pc, #340]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	4a54      	ldr	r2, [pc, #336]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 0304 	bic.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe ffaa 	bl	8002694 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fe ffa6 	bl	8002694 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0cb      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	4b49      	ldr	r3, [pc, #292]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ee      	beq.n	8003744 <HAL_RCC_OscConfig+0x334>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fe ff94 	bl	8002694 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fe ff90 	bl	8002694 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0b5      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	4b3e      	ldr	r3, [pc, #248]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ee      	bne.n	8003770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b39      	ldr	r3, [pc, #228]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	4a38      	ldr	r2, [pc, #224]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a1 	beq.w	80038f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ae:	4b34      	ldr	r3, [pc, #208]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d05c      	beq.n	8003874 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d141      	bne.n	8003846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe ff64 	bl	8002694 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe ff60 	bl	8002694 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e087      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	491b      	ldr	r1, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x478>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe ff39 	bl	8002694 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe ff35 	bl	8002694 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e05c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x416>
 8003844:	e054      	b.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <HAL_RCC_OscConfig+0x478>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe ff22 	bl	8002694 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe ff1e 	bl	8002694 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e045      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x444>
 8003872:	e03d      	b.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e038      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
 8003880:	40023800 	.word	0x40023800
 8003884:	40007000 	.word	0x40007000
 8003888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800388c:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x4ec>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d028      	beq.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d121      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d11a      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d111      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0cc      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003914:	4b68      	ldr	r3, [pc, #416]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d90c      	bls.n	800393c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b65      	ldr	r3, [pc, #404]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b63      	ldr	r3, [pc, #396]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b8      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003954:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a58      	ldr	r2, [pc, #352]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800395e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800396c:	4b53      	ldr	r3, [pc, #332]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a52      	ldr	r2, [pc, #328]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b50      	ldr	r3, [pc, #320]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	494d      	ldr	r1, [pc, #308]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d044      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b47      	ldr	r3, [pc, #284]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d119      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e07f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	4b3f      	ldr	r3, [pc, #252]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e06f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e067      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4934      	ldr	r1, [pc, #208]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f0:	f7fe fe50 	bl	8002694 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7fe fe4c 	bl	8002694 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e04f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 020c 	and.w	r2, r3, #12
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1eb      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d20c      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e032      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4916      	ldr	r1, [pc, #88]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	490e      	ldr	r1, [pc, #56]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a86:	f000 f821 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	490a      	ldr	r1, [pc, #40]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	5ccb      	ldrb	r3, [r1, r3]
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fdb0 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08016130 	.word	0x08016130
 8003ac4:	2000003c 	.word	0x2000003c
 8003ac8:	20000040 	.word	0x20000040

08003acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b094      	sub	sp, #80	@ 0x50
 8003ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae4:	4b79      	ldr	r3, [pc, #484]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d00d      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x40>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	f200 80e1 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x34>
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003afe:	e0db      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b73      	ldr	r3, [pc, #460]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b04:	e0db      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b06:	4b73      	ldr	r3, [pc, #460]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b0a:	e0d8      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b16:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b36:	2300      	movs	r3, #0
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4621      	mov	r1, r4
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	6139      	str	r1, [r7, #16]
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b70:	4659      	mov	r1, fp
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4651      	mov	r1, sl
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4651      	mov	r1, sl
 8003b80:	ebb2 0801 	subs.w	r8, r2, r1
 8003b84:	4659      	mov	r1, fp
 8003b86:	eb63 0901 	sbc.w	r9, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4699      	mov	r9, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb18 0303 	adds.w	r3, r8, r3
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	462b      	mov	r3, r5
 8003bac:	eb49 0303 	adc.w	r3, r9, r3
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	024b      	lsls	r3, r1, #9
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc8:	4621      	mov	r1, r4
 8003bca:	024a      	lsls	r2, r1, #9
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bdc:	f7fc fd94 	bl	8000708 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4613      	mov	r3, r2
 8003be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be8:	e058      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bea:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	099b      	lsrs	r3, r3, #6
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	0159      	lsls	r1, r3, #5
 8003c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c16:	0150      	lsls	r0, r2, #5
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c40:	eb63 050b 	sbc.w	r5, r3, fp
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	00eb      	lsls	r3, r5, #3
 8003c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c52:	00e2      	lsls	r2, r4, #3
 8003c54:	4614      	mov	r4, r2
 8003c56:	461d      	mov	r5, r3
 8003c58:	4643      	mov	r3, r8
 8003c5a:	18e3      	adds	r3, r4, r3
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	464b      	mov	r3, r9
 8003c60:	eb45 0303 	adc.w	r3, r5, r3
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c72:	4629      	mov	r1, r5
 8003c74:	028b      	lsls	r3, r1, #10
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	028a      	lsls	r2, r1, #10
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	61fa      	str	r2, [r7, #28]
 8003c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c90:	f7fc fd3a 	bl	8000708 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3750      	adds	r7, #80	@ 0x50
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000003c 	.word	0x2000003c

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08016140 	.word	0x08016140

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d1c:	f7ff ffdc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0b5b      	lsrs	r3, r3, #13
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08016140 	.word	0x08016140

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe f8a6 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fb66 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e041      	b.n	8003e74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f839 	bl	8003e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f000 fb17 	bl	8004450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_TIM_PWM_Start+0x24>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e022      	b.n	8003efa <HAL_TIM_PWM_Start+0x6a>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d109      	bne.n	8003ece <HAL_TIM_PWM_Start+0x3e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e015      	b.n	8003efa <HAL_TIM_PWM_Start+0x6a>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d109      	bne.n	8003ee8 <HAL_TIM_PWM_Start+0x58>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e008      	b.n	8003efa <HAL_TIM_PWM_Start+0x6a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e068      	b.n	8003fd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x82>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f10:	e013      	b.n	8003f3a <HAL_TIM_PWM_Start+0xaa>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_PWM_Start+0x92>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f20:	e00b      	b.n	8003f3a <HAL_TIM_PWM_Start+0xaa>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xa2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f30:	e003      	b.n	8003f3a <HAL_TIM_PWM_Start+0xaa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fd36 	bl	80049b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <HAL_TIM_PWM_Start+0x14c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d107      	bne.n	8003f62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <HAL_TIM_PWM_Start+0x14c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f74:	d013      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a19      	ldr	r2, [pc, #100]	@ (8003fe0 <HAL_TIM_PWM_Start+0x150>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_TIM_PWM_Start+0x154>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	@ (8003fe8 <HAL_TIM_PWM_Start+0x158>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x10e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a14      	ldr	r2, [pc, #80]	@ (8003fec <HAL_TIM_PWM_Start+0x15c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d111      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d010      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	e007      	b.n	8003fd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40014000 	.word	0x40014000

08003ff0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e097      	b.n	8004134 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fd ff6f 	bl	8001efc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004034:	f023 0307 	bic.w	r3, r3, #7
 8004038:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f000 fa03 	bl	8004450 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004090:	f023 030c 	bic.w	r3, r3, #12
 8004094:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800409c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	4313      	orrs	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	011a      	lsls	r2, r3, #4
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	031b      	lsls	r3, r3, #12
 80040c0:	4313      	orrs	r3, r2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	4313      	orrs	r3, r2
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ae      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	f200 809f 	bhi.w	80042a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080042a9 	.word	0x080042a9
 8004178:	080042a9 	.word	0x080042a9
 800417c:	080042a9 	.word	0x080042a9
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080042a9 	.word	0x080042a9
 8004188:	080042a9 	.word	0x080042a9
 800418c:	080042a9 	.word	0x080042a9
 8004190:	08004227 	.word	0x08004227
 8004194:	080042a9 	.word	0x080042a9
 8004198:	080042a9 	.word	0x080042a9
 800419c:	080042a9 	.word	0x080042a9
 80041a0:	08004267 	.word	0x08004267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f9dc 	bl	8004568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
      break;
 80041e2:	e064      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa22 	bl	8004634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	619a      	str	r2, [r3, #24]
      break;
 8004224:	e043      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa6d 	bl	800470c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0208 	orr.w	r2, r2, #8
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0204 	bic.w	r2, r2, #4
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	61da      	str	r2, [r3, #28]
      break;
 8004264:	e023      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fab7 	bl	80047e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	021a      	lsls	r2, r3, #8
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	61da      	str	r2, [r3, #28]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_ConfigClockSource+0x1c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e0b4      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x186>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004314:	d03e      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xd4>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431a:	f200 8087 	bhi.w	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004322:	f000 8086 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x172>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432a:	d87f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b70      	cmp	r3, #112	@ 0x70
 800432e:	d01a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xa6>
 8004330:	2b70      	cmp	r3, #112	@ 0x70
 8004332:	d87b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b60      	cmp	r3, #96	@ 0x60
 8004336:	d050      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x11a>
 8004338:	2b60      	cmp	r3, #96	@ 0x60
 800433a:	d877      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b50      	cmp	r3, #80	@ 0x50
 800433e:	d03c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0xfa>
 8004340:	2b50      	cmp	r3, #80	@ 0x50
 8004342:	d873      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d058      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x13a>
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d86f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b30      	cmp	r3, #48	@ 0x30
 800434e:	d064      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b30      	cmp	r3, #48	@ 0x30
 8004352:	d86b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d060      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d867      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05c      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d05a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	e062      	b.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	f000 fafd 	bl	8004974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e04f      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	f000 fae6 	bl	8004974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b6:	609a      	str	r2, [r3, #8]
      break;
 80043b8:	e03c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fa5a 	bl	8004880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2150      	movs	r1, #80	@ 0x50
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fab3 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80043d8:	e02c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fa79 	bl	80048de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2160      	movs	r1, #96	@ 0x60
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 faa3 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80043f8:	e01c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 fa3a 	bl	8004880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2140      	movs	r1, #64	@ 0x40
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa93 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004418:	e00c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f000 fa8a 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 800442a:	e003      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e000      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3a      	ldr	r2, [pc, #232]	@ (800454c <TIM_Base_SetConfig+0xfc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00f      	beq.n	8004488 <TIM_Base_SetConfig+0x38>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446e:	d00b      	beq.n	8004488 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a37      	ldr	r2, [pc, #220]	@ (8004550 <TIM_Base_SetConfig+0x100>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a36      	ldr	r2, [pc, #216]	@ (8004554 <TIM_Base_SetConfig+0x104>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a35      	ldr	r2, [pc, #212]	@ (8004558 <TIM_Base_SetConfig+0x108>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2b      	ldr	r2, [pc, #172]	@ (800454c <TIM_Base_SetConfig+0xfc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01b      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a8:	d017      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a28      	ldr	r2, [pc, #160]	@ (8004550 <TIM_Base_SetConfig+0x100>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a27      	ldr	r2, [pc, #156]	@ (8004554 <TIM_Base_SetConfig+0x104>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00f      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a26      	ldr	r2, [pc, #152]	@ (8004558 <TIM_Base_SetConfig+0x108>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00b      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a25      	ldr	r2, [pc, #148]	@ (800455c <TIM_Base_SetConfig+0x10c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a24      	ldr	r2, [pc, #144]	@ (8004560 <TIM_Base_SetConfig+0x110>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a23      	ldr	r2, [pc, #140]	@ (8004564 <TIM_Base_SetConfig+0x114>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a0e      	ldr	r2, [pc, #56]	@ (800454c <TIM_Base_SetConfig+0xfc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d103      	bne.n	8004520 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f023 0201 	bic.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	611a      	str	r2, [r3, #16]
  }
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800

08004568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f023 0201 	bic.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f023 0302 	bic.w	r3, r3, #2
 80045b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a1c      	ldr	r2, [pc, #112]	@ (8004630 <TIM_OC1_SetConfig+0xc8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10c      	bne.n	80045de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0308 	bic.w	r3, r3, #8
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <TIM_OC1_SetConfig+0xc8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d111      	bne.n	800460a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40010000 	.word	0x40010000

08004634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f023 0210 	bic.w	r2, r3, #16
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0320 	bic.w	r3, r3, #32
 800467e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1e      	ldr	r2, [pc, #120]	@ (8004708 <TIM_OC2_SetConfig+0xd4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10d      	bne.n	80046b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <TIM_OC2_SetConfig+0xd4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d113      	bne.n	80046e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010000 	.word	0x40010000

0800470c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <TIM_OC3_SetConfig+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10d      	bne.n	8004786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <TIM_OC3_SetConfig+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d113      	bne.n	80047b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40010000 	.word	0x40010000

080047e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a10      	ldr	r2, [pc, #64]	@ (800487c <TIM_OC4_SetConfig+0x9c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d109      	bne.n	8004854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000

08004880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 030a 	bic.w	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800491a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1a      	ldr	r2, [r3, #32]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e050      	b.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d018      	beq.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d013      	beq.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d009      	beq.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a13      	ldr	r2, [pc, #76]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40014000 	.word	0x40014000

08004adc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e03d      	b.n	8004b74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e042      	b.n	8004c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fd fa60 	bl	800206c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	@ 0x24
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 ffc9 	bl	8005b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	@ 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d156      	bne.n	8004ce8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_UART_Transmit_DMA+0x26>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e04f      	b.n	8004cea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2221      	movs	r2, #33	@ 0x21
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6e:	4a21      	ldr	r2, [pc, #132]	@ (8004cf4 <HAL_UART_Transmit_DMA+0xd4>)
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c76:	4a20      	ldr	r2, [pc, #128]	@ (8004cf8 <HAL_UART_Transmit_DMA+0xd8>)
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cfc <HAL_UART_Transmit_DMA+0xdc>)
 8004c80:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	2200      	movs	r2, #0
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004c8a:	f107 0308 	add.w	r3, r7, #8
 8004c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	f7fd fec3 	bl	8002a2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3730      	adds	r7, #48	@ 0x30
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	080053e9 	.word	0x080053e9
 8004cf8:	08005483 	.word	0x08005483
 8004cfc:	08005607 	.word	0x08005607

08004d00 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d112      	bne.n	8004d40 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_UART_Receive_DMA+0x26>
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e00b      	b.n	8004d42 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fcb0 	bl	800569c <UART_Start_Receive_DMA>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	e000      	b.n	8004d42 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b090      	sub	sp, #64	@ 0x40
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d60:	2b80      	cmp	r3, #128	@ 0x80
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b21      	cmp	r3, #33	@ 0x21
 8004d76:	d128      	bne.n	8004dca <HAL_UART_DMAStop+0x80>
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d025      	beq.n	8004dca <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fe8c 	bl	8002adc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fd03 	bl	80057d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b22      	cmp	r3, #34	@ 0x22
 8004dea:	d128      	bne.n	8004e3e <HAL_UART_DMAStop+0xf4>
 8004dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d025      	beq.n	8004e3e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e12:	61fa      	str	r2, [r7, #28]
 8004e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69b9      	ldr	r1, [r7, #24]
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fd fe52 	bl	8002adc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fcf1 	bl	8005820 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3740      	adds	r7, #64	@ 0x40
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_UART_IRQHandler+0x66>
 8004e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd99 	bl	80059de <UART_Receive_IT>
      return;
 8004eac:	e25b      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80de 	beq.w	8005074 <HAL_UART_IRQHandler+0x22c>
 8004eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80d1 	beq.w	8005074 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xae>
 8004ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_UART_IRQHandler+0xd2>
 8004f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xf6>
 8004f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <HAL_UART_IRQHandler+0x126>
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	f043 0208 	orr.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 81f2 	beq.w	800535c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_UART_IRQHandler+0x14e>
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fd24 	bl	80059de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x17a>
 8004fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04f      	beq.n	8005062 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fc2c 	bl	8005820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b40      	cmp	r3, #64	@ 0x40
 8004fd4:	d141      	bne.n	800505a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3314      	adds	r3, #20
 8004fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005002:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800500e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800501a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1d9      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d013      	beq.n	8005052 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	4a7e      	ldr	r2, [pc, #504]	@ (8005228 <HAL_UART_IRQHandler+0x3e0>)
 8005030:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd fdc0 	bl	8002bbc <HAL_DMA_Abort_IT>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800504c:	4610      	mov	r0, r2
 800504e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e00e      	b.n	8005070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9b2 	bl	80053bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e00a      	b.n	8005070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9ae 	bl	80053bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	e006      	b.n	8005070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f9aa 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800506e:	e175      	b.n	800535c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	bf00      	nop
    return;
 8005072:	e173      	b.n	800535c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 814f 	bne.w	800531c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 8148 	beq.w	800531c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8141 	beq.w	800531c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b40      	cmp	r3, #64	@ 0x40
 80050bc:	f040 80b6 	bne.w	800522c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8145 	beq.w	8005360 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050de:	429a      	cmp	r2, r3
 80050e0:	f080 813e 	bcs.w	8005360 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050f6:	f000 8088 	beq.w	800520a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800512a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800513e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3314      	adds	r3, #20
 8005166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800516a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800516e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800517c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e1      	bne.n	8005146 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e3      	bne.n	8005182 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051da:	f023 0310 	bic.w	r3, r3, #16
 80051de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e3      	bne.n	80051c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005204:	4618      	mov	r0, r3
 8005206:	f7fd fc69 	bl	8002adc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005218:	b29b      	uxth	r3, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	b29b      	uxth	r3, r3
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8d5 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005226:	e09b      	b.n	8005360 <HAL_UART_IRQHandler+0x518>
 8005228:	080058e7 	.word	0x080058e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005234:	b29b      	uxth	r3, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 808e 	beq.w	8005364 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8089 	beq.w	8005364 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005276:	647a      	str	r2, [r7, #68]	@ 0x44
 8005278:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800527c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e3      	bne.n	8005252 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	623b      	str	r3, [r7, #32]
   return(result);
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e3      	bne.n	800528a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052f4:	61fa      	str	r2, [r7, #28]
 80052f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	69b9      	ldr	r1, [r7, #24]
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	617b      	str	r3, [r7, #20]
   return(result);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e3      	bne.n	80052d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800530e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f85b 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800531a:	e023      	b.n	8005364 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <HAL_UART_IRQHandler+0x4f4>
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 faea 	bl	800590e <UART_Transmit_IT>
    return;
 800533a:	e014      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <HAL_UART_IRQHandler+0x51e>
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb2a 	bl	80059ae <UART_EndTransmit_IT>
    return;
 800535a:	e004      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
    return;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
      return;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
      return;
 8005364:	bf00      	nop
  }
}
 8005366:	37e8      	adds	r7, #232	@ 0xe8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b090      	sub	sp, #64	@ 0x40
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d137      	bne.n	8005474 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005406:	2200      	movs	r2, #0
 8005408:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800540a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	623b      	str	r3, [r7, #32]
   return(result);
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005420:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3314      	adds	r3, #20
 8005428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800542a:	633a      	str	r2, [r7, #48]	@ 0x30
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	60fb      	str	r3, [r7, #12]
   return(result);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005454:	637b      	str	r3, [r7, #52]	@ 0x34
 8005456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800545e:	61fa      	str	r2, [r7, #28]
 8005460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	617b      	str	r3, [r7, #20]
   return(result);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e5      	bne.n	800543e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005472:	e002      	b.n	800547a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005474:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005476:	f7ff ff79 	bl	800536c <HAL_UART_TxCpltCallback>
}
 800547a:	bf00      	nop
 800547c:	3740      	adds	r7, #64	@ 0x40
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ff75 	bl	8005380 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b09c      	sub	sp, #112	@ 0x70
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d172      	bne.n	80055a0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80054ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054bc:	2200      	movs	r2, #0
 80054be:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3314      	adds	r3, #20
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	667b      	str	r3, [r7, #100]	@ 0x64
 800550c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3314      	adds	r3, #20
 8005512:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005514:	647a      	str	r2, [r7, #68]	@ 0x44
 8005516:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800551a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e5      	bne.n	80054f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	623b      	str	r3, [r7, #32]
   return(result);
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005548:	633a      	str	r2, [r7, #48]	@ 0x30
 800554a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800554e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800555c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	d119      	bne.n	80055a0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60fb      	str	r3, [r7, #12]
   return(result);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0310 	bic.w	r3, r3, #16
 8005582:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800558c:	61fa      	str	r2, [r7, #28]
 800558e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	69b9      	ldr	r1, [r7, #24]
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	617b      	str	r3, [r7, #20]
   return(result);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055a2:	2200      	movs	r2, #0
 80055a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d106      	bne.n	80055bc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b2:	4619      	mov	r1, r3
 80055b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80055b6:	f7ff ff0b 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055ba:	e002      	b.n	80055c2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80055bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80055be:	f7ff fee9 	bl	8005394 <HAL_UART_RxCpltCallback>
}
 80055c2:	bf00      	nop
 80055c4:	3770      	adds	r7, #112	@ 0x70
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d108      	bne.n	80055f8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4619      	mov	r1, r3
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff feed 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055f6:	e002      	b.n	80055fe <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fed5 	bl	80053a8 <HAL_UART_RxHalfCpltCallback>
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b21      	cmp	r3, #33	@ 0x21
 8005638:	d108      	bne.n	800564c <UART_DMAError+0x46>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005646:	68b8      	ldr	r0, [r7, #8]
 8005648:	f000 f8c2 	bl	80057d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b22      	cmp	r3, #34	@ 0x22
 800566c:	d108      	bne.n	8005680 <UART_DMAError+0x7a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2200      	movs	r2, #0
 8005678:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800567a:	68b8      	ldr	r0, [r7, #8]
 800567c:	f000 f8d0 	bl	8005820 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005684:	f043 0210 	orr.w	r2, r3, #16
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800568c:	68b8      	ldr	r0, [r7, #8]
 800568e:	f7ff fe95 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b098      	sub	sp, #96	@ 0x60
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2222      	movs	r2, #34	@ 0x22
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	4a3e      	ldr	r2, [pc, #248]	@ (80057c4 <UART_Start_Receive_DMA+0x128>)
 80056ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d0:	4a3d      	ldr	r2, [pc, #244]	@ (80057c8 <UART_Start_Receive_DMA+0x12c>)
 80056d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d8:	4a3c      	ldr	r2, [pc, #240]	@ (80057cc <UART_Start_Receive_DMA+0x130>)
 80056da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e0:	2200      	movs	r2, #0
 80056e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	f7fd f996 	bl	8002a2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d019      	beq.n	8005752 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800572e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800573e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005740:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005744:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800574c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	657b      	str	r3, [r7, #84]	@ 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005772:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	617b      	str	r3, [r7, #20]
   return(result);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800579c:	653b      	str	r3, [r7, #80]	@ 0x50
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80057a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80057a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6a39      	ldr	r1, [r7, #32]
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3760      	adds	r7, #96	@ 0x60
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	0800549f 	.word	0x0800549f
 80057c8:	080055cb 	.word	0x080055cb
 80057cc:	08005607 	.word	0x08005607

080057d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	@ 0x24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	61ba      	str	r2, [r7, #24]
 80057fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005814:	bf00      	nop
 8005816:	3724      	adds	r7, #36	@ 0x24
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b095      	sub	sp, #84	@ 0x54
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005848:	643a      	str	r2, [r7, #64]	@ 0x40
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800584e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3314      	adds	r3, #20
 8005862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	61fb      	str	r3, [r7, #28]
   return(result);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800587c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800587e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	d119      	bne.n	80058cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058b8:	61ba      	str	r2, [r7, #24]
 80058ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6979      	ldr	r1, [r7, #20]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	613b      	str	r3, [r7, #16]
   return(result);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058da:	bf00      	nop
 80058dc:	3754      	adds	r7, #84	@ 0x54
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff fd5b 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b21      	cmp	r3, #33	@ 0x21
 8005920:	d13e      	bne.n	80059a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800592a:	d114      	bne.n	8005956 <UART_Transmit_IT+0x48>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d110      	bne.n	8005956 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	621a      	str	r2, [r3, #32]
 8005954:	e008      	b.n	8005968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6211      	str	r1, [r2, #32]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29b      	uxth	r3, r3
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10f      	bne.n	800599c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800598a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800599a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e000      	b.n	80059a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fccc 	bl	800536c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b08c      	sub	sp, #48	@ 0x30
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b22      	cmp	r3, #34	@ 0x22
 80059f0:	f040 80ae 	bne.w	8005b50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fc:	d117      	bne.n	8005a2e <UART_Receive_IT+0x50>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d113      	bne.n	8005a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a2c:	e026      	b.n	8005a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a40:	d007      	beq.n	8005a52 <UART_Receive_IT+0x74>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <UART_Receive_IT+0x82>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e008      	b.n	8005a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d15d      	bne.n	8005b4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0220 	bic.w	r2, r2, #32
 8005a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d135      	bne.n	8005b42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005afc:	623a      	str	r2, [r7, #32]
 8005afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	69f9      	ldr	r1, [r7, #28]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d10a      	bne.n	8005b34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fc48 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
 8005b40:	e002      	b.n	8005b48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fc26 	bl	8005394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e002      	b.n	8005b52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3730      	adds	r7, #48	@ 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b60:	b0c0      	sub	sp, #256	@ 0x100
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	68d9      	ldr	r1, [r3, #12]
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	ea40 0301 	orr.w	r3, r0, r1
 8005b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bb4:	f021 010c 	bic.w	r1, r1, #12
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	6999      	ldr	r1, [r3, #24]
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	ea40 0301 	orr.w	r3, r0, r1
 8005be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b8f      	ldr	r3, [pc, #572]	@ (8005e28 <UART_SetConfig+0x2cc>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d005      	beq.n	8005bfc <UART_SetConfig+0xa0>
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8005e2c <UART_SetConfig+0x2d0>)
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d104      	bne.n	8005c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fe f88c 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8005c00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c04:	e003      	b.n	8005c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c06:	f7fe f873 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c18:	f040 810c 	bne.w	8005e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	1891      	adds	r1, r2, r2
 8005c34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c36:	415b      	adcs	r3, r3
 8005c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c3e:	4621      	mov	r1, r4
 8005c40:	eb12 0801 	adds.w	r8, r2, r1
 8005c44:	4629      	mov	r1, r5
 8005c46:	eb43 0901 	adc.w	r9, r3, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c5e:	4690      	mov	r8, r2
 8005c60:	4699      	mov	r9, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	eb18 0303 	adds.w	r3, r8, r3
 8005c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	eb49 0303 	adc.w	r3, r9, r3
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	18db      	adds	r3, r3, r3
 8005c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c90:	4613      	mov	r3, r2
 8005c92:	eb42 0303 	adc.w	r3, r2, r3
 8005c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ca0:	f7fa fd32 	bl	8000708 <__aeabi_uldivmod>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4b61      	ldr	r3, [pc, #388]	@ (8005e30 <UART_SetConfig+0x2d4>)
 8005caa:	fba3 2302 	umull	r2, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	011c      	lsls	r4, r3, #4
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	1891      	adds	r1, r2, r2
 8005cca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ccc:	415b      	adcs	r3, r3
 8005cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf4:	4692      	mov	sl, r2
 8005cf6:	469b      	mov	fp, r3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8005cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d02:	464b      	mov	r3, r9
 8005d04:	eb4b 0303 	adc.w	r3, fp, r3
 8005d08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d20:	460b      	mov	r3, r1
 8005d22:	18db      	adds	r3, r3, r3
 8005d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d26:	4613      	mov	r3, r2
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d36:	f7fa fce7 	bl	8000708 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4b3b      	ldr	r3, [pc, #236]	@ (8005e30 <UART_SetConfig+0x2d4>)
 8005d42:	fba3 2301 	umull	r2, r3, r3, r1
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	2264      	movs	r2, #100	@ 0x64
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	1acb      	subs	r3, r1, r3
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d56:	4b36      	ldr	r3, [pc, #216]	@ (8005e30 <UART_SetConfig+0x2d4>)
 8005d58:	fba3 2302 	umull	r2, r3, r3, r2
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d64:	441c      	add	r4, r3
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d80:	415b      	adcs	r3, r3
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ddc:	460b      	mov	r3, r1
 8005dde:	18db      	adds	r3, r3, r3
 8005de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005de2:	4613      	mov	r3, r2
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005df2:	f7fa fc89 	bl	8000708 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <UART_SetConfig+0x2d4>)
 8005dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	2164      	movs	r1, #100	@ 0x64
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	3332      	adds	r3, #50	@ 0x32
 8005e0e:	4a08      	ldr	r2, [pc, #32]	@ (8005e30 <UART_SetConfig+0x2d4>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	f003 0207 	and.w	r2, r3, #7
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4422      	add	r2, r4
 8005e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e24:	e106      	b.n	8006034 <UART_SetConfig+0x4d8>
 8005e26:	bf00      	nop
 8005e28:	40011000 	.word	0x40011000
 8005e2c:	40011400 	.word	0x40011400
 8005e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e46:	4642      	mov	r2, r8
 8005e48:	464b      	mov	r3, r9
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	6239      	str	r1, [r7, #32]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e56:	4641      	mov	r1, r8
 8005e58:	1854      	adds	r4, r2, r1
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	eb43 0501 	adc.w	r5, r3, r1
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	eb45 0303 	adc.w	r3, r5, r3
 8005e82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	008b      	lsls	r3, r1, #2
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eac:	4621      	mov	r1, r4
 8005eae:	008a      	lsls	r2, r1, #2
 8005eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005eb4:	f7fa fc28 	bl	8000708 <__aeabi_uldivmod>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4b60      	ldr	r3, [pc, #384]	@ (8006040 <UART_SetConfig+0x4e4>)
 8005ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	011c      	lsls	r4, r3, #4
 8005ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ed0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	1891      	adds	r1, r2, r2
 8005ede:	61b9      	str	r1, [r7, #24]
 8005ee0:	415b      	adcs	r3, r3
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee8:	4641      	mov	r1, r8
 8005eea:	1851      	adds	r1, r2, r1
 8005eec:	6139      	str	r1, [r7, #16]
 8005eee:	4649      	mov	r1, r9
 8005ef0:	414b      	adcs	r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	00cb      	lsls	r3, r1, #3
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	00ca      	lsls	r2, r1, #3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	4642      	mov	r2, r8
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	460a      	mov	r2, r1
 8005f20:	eb42 0303 	adc.w	r3, r2, r3
 8005f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f40:	4649      	mov	r1, r9
 8005f42:	008b      	lsls	r3, r1, #2
 8005f44:	4641      	mov	r1, r8
 8005f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	008a      	lsls	r2, r1, #2
 8005f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f52:	f7fa fbd9 	bl	8000708 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4b38      	ldr	r3, [pc, #224]	@ (8006040 <UART_SetConfig+0x4e4>)
 8005f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	2264      	movs	r2, #100	@ 0x64
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	1acb      	subs	r3, r1, r3
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	3332      	adds	r3, #50	@ 0x32
 8005f70:	4a33      	ldr	r2, [pc, #204]	@ (8006040 <UART_SetConfig+0x4e4>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f7c:	441c      	add	r4, r3
 8005f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f82:	2200      	movs	r2, #0
 8005f84:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f86:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	1891      	adds	r1, r2, r2
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	415b      	adcs	r3, r3
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	1851      	adds	r1, r2, r1
 8005fa0:	6039      	str	r1, [r7, #0]
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	414b      	adcs	r3, r1
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fb4:	4659      	mov	r1, fp
 8005fb6:	00cb      	lsls	r3, r1, #3
 8005fb8:	4651      	mov	r1, sl
 8005fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fbe:	4651      	mov	r1, sl
 8005fc0:	00ca      	lsls	r2, r1, #3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4642      	mov	r2, r8
 8005fca:	189b      	adds	r3, r3, r2
 8005fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fce:	464b      	mov	r3, r9
 8005fd0:	460a      	mov	r2, r1
 8005fd2:	eb42 0303 	adc.w	r3, r2, r3
 8005fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fe2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	008b      	lsls	r3, r1, #2
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	008a      	lsls	r2, r1, #2
 8005ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006002:	f7fa fb81 	bl	8000708 <__aeabi_uldivmod>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <UART_SetConfig+0x4e4>)
 800600c:	fba3 1302 	umull	r1, r3, r3, r2
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	2164      	movs	r1, #100	@ 0x64
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	3332      	adds	r3, #50	@ 0x32
 800601e:	4a08      	ldr	r2, [pc, #32]	@ (8006040 <UART_SetConfig+0x4e4>)
 8006020:	fba2 2303 	umull	r2, r3, r2, r3
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4422      	add	r2, r4
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800603a:	46bd      	mov	sp, r7
 800603c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006040:	51eb851f 	.word	0x51eb851f

08006044 <__NVIC_SetPriority>:
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	6039      	str	r1, [r7, #0]
 800604e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006054:	2b00      	cmp	r3, #0
 8006056:	db0a      	blt.n	800606e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	490c      	ldr	r1, [pc, #48]	@ (8006090 <__NVIC_SetPriority+0x4c>)
 800605e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006062:	0112      	lsls	r2, r2, #4
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	440b      	add	r3, r1
 8006068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800606c:	e00a      	b.n	8006084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4908      	ldr	r1, [pc, #32]	@ (8006094 <__NVIC_SetPriority+0x50>)
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	3b04      	subs	r3, #4
 800607c:	0112      	lsls	r2, r2, #4
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	440b      	add	r3, r1
 8006082:	761a      	strb	r2, [r3, #24]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	e000e100 	.word	0xe000e100
 8006094:	e000ed00 	.word	0xe000ed00

08006098 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800609c:	2100      	movs	r1, #0
 800609e:	f06f 0004 	mvn.w	r0, #4
 80060a2:	f7ff ffcf 	bl	8006044 <__NVIC_SetPriority>
#endif
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b2:	f3ef 8305 	mrs	r3, IPSR
 80060b6:	603b      	str	r3, [r7, #0]
  return(result);
 80060b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060be:	f06f 0305 	mvn.w	r3, #5
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e00c      	b.n	80060e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060c6:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <osKernelInitialize+0x44>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060ce:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <osKernelInitialize+0x44>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e002      	b.n	80060e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060e0:	687b      	ldr	r3, [r7, #4]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200049fc 	.word	0x200049fc

080060f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fa:	f3ef 8305 	mrs	r3, IPSR
 80060fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006106:	f06f 0305 	mvn.w	r3, #5
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	e010      	b.n	8006130 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800610e:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <osKernelStart+0x48>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d109      	bne.n	800612a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006116:	f7ff ffbf 	bl	8006098 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800611a:	4b08      	ldr	r3, [pc, #32]	@ (800613c <osKernelStart+0x48>)
 800611c:	2202      	movs	r2, #2
 800611e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006120:	f001 f87a 	bl	8007218 <vTaskStartScheduler>
      stat = osOK;
 8006124:	2300      	movs	r3, #0
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	e002      	b.n	8006130 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800612e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006130:	687b      	ldr	r3, [r7, #4]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	200049fc 	.word	0x200049fc

08006140 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	@ 0x38
 8006144:	af04      	add	r7, sp, #16
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006150:	f3ef 8305 	mrs	r3, IPSR
 8006154:	617b      	str	r3, [r7, #20]
  return(result);
 8006156:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006158:	2b00      	cmp	r3, #0
 800615a:	d17e      	bne.n	800625a <osThreadNew+0x11a>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d07b      	beq.n	800625a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006162:	2380      	movs	r3, #128	@ 0x80
 8006164:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006166:	2318      	movs	r3, #24
 8006168:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800616e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006172:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d045      	beq.n	8006206 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <osThreadNew+0x48>
        name = attr->name;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <osThreadNew+0x6e>
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b38      	cmp	r3, #56	@ 0x38
 80061a0:	d805      	bhi.n	80061ae <osThreadNew+0x6e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <osThreadNew+0x72>
        return (NULL);
 80061ae:	2300      	movs	r3, #0
 80061b0:	e054      	b.n	800625c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <osThreadNew+0xa8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b5b      	cmp	r3, #91	@ 0x5b
 80061d0:	d90a      	bls.n	80061e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d006      	beq.n	80061e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <osThreadNew+0xa8>
        mem = 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e010      	b.n	800620a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10c      	bne.n	800620a <osThreadNew+0xca>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <osThreadNew+0xca>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <osThreadNew+0xca>
          mem = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e001      	b.n	800620a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d110      	bne.n	8006232 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fe1a 	bl	8006e60 <xTaskCreateStatic>
 800622c:	4603      	mov	r3, r0
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e013      	b.n	800625a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d110      	bne.n	800625a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	b29a      	uxth	r2, r3
 800623c:	f107 0310 	add.w	r3, r7, #16
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fe68 	bl	8006f20 <xTaskCreate>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d001      	beq.n	800625a <osThreadNew+0x11a>
            hTask = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800625a:	693b      	ldr	r3, [r7, #16]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3728      	adds	r7, #40	@ 0x28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626c:	f3ef 8305 	mrs	r3, IPSR
 8006270:	60bb      	str	r3, [r7, #8]
  return(result);
 8006272:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <osDelay+0x1c>
    stat = osErrorISR;
 8006278:	f06f 0305 	mvn.w	r3, #5
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e007      	b.n	8006290 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <osDelay+0x2c>
      vTaskDelay(ticks);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 ff8e 	bl	80071ac <vTaskDelay>
    }
  }

  return (stat);
 8006290:	68fb      	ldr	r3, [r7, #12]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a07      	ldr	r2, [pc, #28]	@ (80062c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80062ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4a06      	ldr	r2, [pc, #24]	@ (80062cc <vApplicationGetIdleTaskMemory+0x30>)
 80062b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2280      	movs	r2, #128	@ 0x80
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20004a00 	.word	0x20004a00
 80062cc:	20004a5c 	.word	0x20004a5c

080062d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a07      	ldr	r2, [pc, #28]	@ (80062fc <vApplicationGetTimerTaskMemory+0x2c>)
 80062e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a06      	ldr	r2, [pc, #24]	@ (8006300 <vApplicationGetTimerTaskMemory+0x30>)
 80062e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062ee:	601a      	str	r2, [r3, #0]
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20004c5c 	.word	0x20004c5c
 8006300:	20004cb8 	.word	0x20004cb8

08006304 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f103 0208 	add.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800631c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0208 	add.w	r2, r3, #8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f103 0208 	add.w	r2, r3, #8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063bc:	d103      	bne.n	80063c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e00c      	b.n	80063e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3308      	adds	r3, #8
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e002      	b.n	80063d4 <vListInsert+0x2e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d2f6      	bcs.n	80063ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6892      	ldr	r2, [r2, #8]
 800642e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6852      	ldr	r2, [r2, #4]
 8006438:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d103      	bne.n	800644c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <xQueueGenericReset+0x2c>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60bb      	str	r3, [r7, #8]
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006498:	f002 f89e 	bl	80085d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	68f9      	ldr	r1, [r7, #12]
 80064a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	441a      	add	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	3b01      	subs	r3, #1
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	22ff      	movs	r2, #255	@ 0xff
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	22ff      	movs	r2, #255	@ 0xff
 80064e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d114      	bne.n	8006518 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01a      	beq.n	800652c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3310      	adds	r3, #16
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f91a 	bl	8007734 <xTaskRemoveFromEventList>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d012      	beq.n	800652c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006506:	4b0d      	ldr	r3, [pc, #52]	@ (800653c <xQueueGenericReset+0xd0>)
 8006508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	e009      	b.n	800652c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3310      	adds	r3, #16
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fef1 	bl	8006304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3324      	adds	r3, #36	@ 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff feec 	bl	8006304 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800652c:	f002 f886 	bl	800863c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006530:	2301      	movs	r3, #1
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	@ 0x38
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	e7fd      	b.n	8006586 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <xQueueGenericCreateStatic+0x56>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <xQueueGenericCreateStatic+0x5a>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <xQueueGenericCreateStatic+0x5c>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	623b      	str	r3, [r7, #32]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d102      	bne.n	80065c4 <xQueueGenericCreateStatic+0x84>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <xQueueGenericCreateStatic+0x88>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <xQueueGenericCreateStatic+0x8a>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	61fb      	str	r3, [r7, #28]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065e6:	2350      	movs	r3, #80	@ 0x50
 80065e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b50      	cmp	r3, #80	@ 0x50
 80065ee:	d00b      	beq.n	8006608 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	61bb      	str	r3, [r7, #24]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006608:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800661c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f805 	bl	800663a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006632:	4618      	mov	r0, r3
 8006634:	3730      	adds	r7, #48	@ 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e002      	b.n	800665c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006668:	2101      	movs	r1, #1
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f7ff fefe 	bl	800646c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	@ 0x38
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <xQueueGenericSend+0x34>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <xQueueGenericSend+0x42>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSend+0x46>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSend+0x48>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <xQueueGenericSend+0x64>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d103      	bne.n	80066f2 <xQueueGenericSend+0x72>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <xQueueGenericSend+0x76>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericSend+0x78>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <xQueueGenericSend+0x94>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006714:	f001 f9f6 	bl	8007b04 <xTaskGetSchedulerState>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <xQueueGenericSend+0xa4>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xQueueGenericSend+0xa8>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xQueueGenericSend+0xaa>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <xQueueGenericSend+0xc6>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	61fb      	str	r3, [r7, #28]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006746:	f001 ff47 	bl	80085d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <xQueueGenericSend+0xdc>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d129      	bne.n	80067b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006762:	f000 fa0f 	bl	8006b84 <prvCopyDataToQueue>
 8006766:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d010      	beq.n	8006792 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	3324      	adds	r3, #36	@ 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f000 ffdd 	bl	8007734 <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006780:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <xQueueGenericSend+0x200>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	e00a      	b.n	80067a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006798:	4b39      	ldr	r3, [pc, #228]	@ (8006880 <xQueueGenericSend+0x200>)
 800679a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067a8:	f001 ff48 	bl	800863c <vPortExitCritical>
				return pdPASS;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e063      	b.n	8006878 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067b6:	f001 ff41 	bl	800863c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e05c      	b.n	8006878 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 f83f 	bl	800784c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067d2:	f001 ff33 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067d6:	f000 fd87 	bl	80072e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067da:	f001 fefd 	bl	80085d8 <vPortEnterCritical>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ea:	d103      	bne.n	80067f4 <xQueueGenericSend+0x174>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006800:	d103      	bne.n	800680a <xQueueGenericSend+0x18a>
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800680a:	f001 ff17 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800680e:	1d3a      	adds	r2, r7, #4
 8006810:	f107 0314 	add.w	r3, r7, #20
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f82e 	bl	8007878 <xTaskCheckForTimeOut>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d124      	bne.n	800686c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006824:	f000 faa6 	bl	8006d74 <prvIsQueueFull>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	3310      	adds	r3, #16
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ff2a 	bl	8007690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800683c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800683e:	f000 fa31 	bl	8006ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006842:	f000 fd5f 	bl	8007304 <xTaskResumeAll>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f47f af7c 	bne.w	8006746 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800684e:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <xQueueGenericSend+0x200>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	e772      	b.n	8006746 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006862:	f000 fa1f 	bl	8006ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006866:	f000 fd4d 	bl	8007304 <xTaskResumeAll>
 800686a:	e76c      	b.n	8006746 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800686c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800686e:	f000 fa19 	bl	8006ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006872:	f000 fd47 	bl	8007304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006876:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006878:	4618      	mov	r0, r3
 800687a:	3738      	adds	r7, #56	@ 0x38
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b090      	sub	sp, #64	@ 0x40
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <xQueueGenericSendFromISR+0x3e>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <xQueueGenericSendFromISR+0x42>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <xQueueGenericSendFromISR+0x44>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSendFromISR+0x6e>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericSendFromISR+0x72>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericSendFromISR+0x74>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006914:	f001 ff40 	bl	8008798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006918:	f3ef 8211 	mrs	r2, BASEPRI
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61fa      	str	r2, [r7, #28]
 800692e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006930:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <xQueueGenericSendFromISR+0xc2>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d12f      	bne.n	80069a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800694c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800695c:	f000 f912 	bl	8006b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006960:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006968:	d112      	bne.n	8006990 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d016      	beq.n	80069a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	3324      	adds	r3, #36	@ 0x24
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fedc 	bl	8007734 <xTaskRemoveFromEventList>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00e      	beq.n	80069a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e007      	b.n	80069a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006994:	3301      	adds	r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	b25a      	sxtb	r2, r3
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069a0:	2301      	movs	r3, #1
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80069a4:	e001      	b.n	80069aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3740      	adds	r7, #64	@ 0x40
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08c      	sub	sp, #48	@ 0x30
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <xQueueReceive+0x32>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	623b      	str	r3, [r7, #32]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <xQueueReceive+0x40>
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <xQueueReceive+0x44>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <xQueueReceive+0x46>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <xQueueReceive+0x62>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	61fb      	str	r3, [r7, #28]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a22:	f001 f86f 	bl	8007b04 <xTaskGetSchedulerState>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <xQueueReceive+0x72>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <xQueueReceive+0x76>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <xQueueReceive+0x78>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <xQueueReceive+0x94>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	61bb      	str	r3, [r7, #24]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a54:	f001 fdc0 	bl	80085d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01f      	beq.n	8006aa4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a68:	f000 f8f6 	bl	8006c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	1e5a      	subs	r2, r3, #1
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00f      	beq.n	8006a9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	3310      	adds	r3, #16
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fe57 	bl	8007734 <xTaskRemoveFromEventList>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b80 <xQueueReceive+0x1c0>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a9c:	f001 fdce 	bl	800863c <vPortExitCritical>
				return pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e069      	b.n	8006b78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aaa:	f001 fdc7 	bl	800863c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e062      	b.n	8006b78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ab8:	f107 0310 	add.w	r3, r7, #16
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fec5 	bl	800784c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ac6:	f001 fdb9 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aca:	f000 fc0d 	bl	80072e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ace:	f001 fd83 	bl	80085d8 <vPortEnterCritical>
 8006ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ade:	d103      	bne.n	8006ae8 <xQueueReceive+0x128>
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006af4:	d103      	bne.n	8006afe <xQueueReceive+0x13e>
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006afe:	f001 fd9d 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b02:	1d3a      	adds	r2, r7, #4
 8006b04:	f107 0310 	add.w	r3, r7, #16
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 feb4 	bl	8007878 <xTaskCheckForTimeOut>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d123      	bne.n	8006b5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b18:	f000 f916 	bl	8006d48 <prvIsQueueEmpty>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d017      	beq.n	8006b52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	3324      	adds	r3, #36	@ 0x24
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fdb0 	bl	8007690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b32:	f000 f8b7 	bl	8006ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b36:	f000 fbe5 	bl	8007304 <xTaskResumeAll>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d189      	bne.n	8006a54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b40:	4b0f      	ldr	r3, [pc, #60]	@ (8006b80 <xQueueReceive+0x1c0>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	e780      	b.n	8006a54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b54:	f000 f8a6 	bl	8006ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b58:	f000 fbd4 	bl	8007304 <xTaskResumeAll>
 8006b5c:	e77a      	b.n	8006a54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b60:	f000 f8a0 	bl	8006ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b64:	f000 fbce 	bl	8007304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b6a:	f000 f8ed 	bl	8006d48 <prvIsQueueEmpty>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f af6f 	beq.w	8006a54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3730      	adds	r7, #48	@ 0x30
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10d      	bne.n	8006bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d14d      	bne.n	8006c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ffc6 	bl	8007b40 <xTaskPriorityDisinherit>
 8006bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	e043      	b.n	8006c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d119      	bne.n	8006bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6858      	ldr	r0, [r3, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	f00e fb8b 	bl	80152ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	441a      	add	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d32b      	bcc.n	8006c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	e026      	b.n	8006c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68d8      	ldr	r0, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c00:	461a      	mov	r2, r3
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	f00e fb71 	bl	80152ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c10:	425b      	negs	r3, r3
 8006c12:	441a      	add	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d207      	bcs.n	8006c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	425b      	negs	r3, r3
 8006c2e:	441a      	add	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d105      	bne.n	8006c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c4e:	697b      	ldr	r3, [r7, #20]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d018      	beq.n	8006c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d303      	bcc.n	8006c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68d9      	ldr	r1, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c94:	461a      	mov	r2, r3
 8006c96:	6838      	ldr	r0, [r7, #0]
 8006c98:	f00e fb27 	bl	80152ea <memcpy>
	}
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cac:	f001 fc94 	bl	80085d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cb8:	e011      	b.n	8006cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d012      	beq.n	8006ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3324      	adds	r3, #36	@ 0x24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fd34 	bl	8007734 <xTaskRemoveFromEventList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cd2:	f000 fe35 	bl	8007940 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dce9      	bgt.n	8006cba <prvUnlockQueue+0x16>
 8006ce6:	e000      	b.n	8006cea <prvUnlockQueue+0x46>
					break;
 8006ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	22ff      	movs	r2, #255	@ 0xff
 8006cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006cf2:	f001 fca3 	bl	800863c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cf6:	f001 fc6f 	bl	80085d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d02:	e011      	b.n	8006d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d012      	beq.n	8006d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3310      	adds	r3, #16
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fd0f 	bl	8007734 <xTaskRemoveFromEventList>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d1c:	f000 fe10 	bl	8007940 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dce9      	bgt.n	8006d04 <prvUnlockQueue+0x60>
 8006d30:	e000      	b.n	8006d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	22ff      	movs	r2, #255	@ 0xff
 8006d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d3c:	f001 fc7e 	bl	800863c <vPortExitCritical>
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d50:	f001 fc42 	bl	80085d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e001      	b.n	8006d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f001 fc69 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d7c:	f001 fc2c 	bl	80085d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d102      	bne.n	8006d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e001      	b.n	8006d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d96:	f001 fc51 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	e014      	b.n	8006dde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006db4:	4a0f      	ldr	r2, [pc, #60]	@ (8006df4 <vQueueAddToRegistry+0x50>)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10b      	bne.n	8006dd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006dc0:	490c      	ldr	r1, [pc, #48]	@ (8006df4 <vQueueAddToRegistry+0x50>)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006dca:	4a0a      	ldr	r2, [pc, #40]	@ (8006df4 <vQueueAddToRegistry+0x50>)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dd6:	e006      	b.n	8006de6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	d9e7      	bls.n	8006db4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	200050b8 	.word	0x200050b8

08006df8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e08:	f001 fbe6 	bl	80085d8 <vPortEnterCritical>
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e12:	b25b      	sxtb	r3, r3
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e18:	d103      	bne.n	8006e22 <vQueueWaitForMessageRestricted+0x2a>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e28:	b25b      	sxtb	r3, r3
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e2e:	d103      	bne.n	8006e38 <vQueueWaitForMessageRestricted+0x40>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e38:	f001 fc00 	bl	800863c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d106      	bne.n	8006e52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3324      	adds	r3, #36	@ 0x24
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fc45 	bl	80076dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f7ff ff26 	bl	8006ca4 <prvUnlockQueue>
	}
 8006e58:	bf00      	nop
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08e      	sub	sp, #56	@ 0x38
 8006e64:	af04      	add	r7, sp, #16
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	623b      	str	r3, [r7, #32]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10b      	bne.n	8006eaa <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	61fb      	str	r3, [r7, #28]
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	e7fd      	b.n	8006ea6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eaa:	235c      	movs	r3, #92	@ 0x5c
 8006eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006eb2:	d00b      	beq.n	8006ecc <xTaskCreateStatic+0x6c>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61bb      	str	r3, [r7, #24]
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ecc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01e      	beq.n	8006f12 <xTaskCreateStatic+0xb2>
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01b      	beq.n	8006f12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f850 	bl	8006faa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f0c:	f000 f8de 	bl	80070cc <prvAddNewTaskToReadyList>
 8006f10:	e001      	b.n	8006f16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f16:	697b      	ldr	r3, [r7, #20]
	}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	@ 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08c      	sub	sp, #48	@ 0x30
 8006f24:	af04      	add	r7, sp, #16
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fc71 	bl	800881c <pvPortMalloc>
 8006f3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f42:	205c      	movs	r0, #92	@ 0x5c
 8006f44:	f001 fc6a 	bl	800881c <pvPortMalloc>
 8006f48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f56:	e005      	b.n	8006f64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f58:	6978      	ldr	r0, [r7, #20]
 8006f5a:	f001 fd2d 	bl	80089b8 <vPortFree>
 8006f5e:	e001      	b.n	8006f64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d017      	beq.n	8006f9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	2300      	movs	r3, #0
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	9302      	str	r3, [sp, #8]
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f80e 	bl	8006faa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f8e:	69f8      	ldr	r0, [r7, #28]
 8006f90:	f000 f89c 	bl	80070cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f94:	2301      	movs	r3, #1
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	e002      	b.n	8006fa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b088      	sub	sp, #32
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	21a5      	movs	r1, #165	@ 0xa5
 8006fc4:	f00e f8c8 	bl	8015158 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	617b      	str	r3, [r7, #20]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01f      	beq.n	800704a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800700a:	2300      	movs	r3, #0
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	e012      	b.n	8007036 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	3334      	adds	r3, #52	@ 0x34
 8007020:	460a      	mov	r2, r1
 8007022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	4413      	add	r3, r2
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	3301      	adds	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d9e9      	bls.n	8007010 <prvInitialiseNewTask+0x66>
 800703c:	e000      	b.n	8007040 <prvInitialiseNewTask+0x96>
			{
				break;
 800703e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007048:	e003      	b.n	8007052 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	2b37      	cmp	r3, #55	@ 0x37
 8007056:	d901      	bls.n	800705c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007058:	2337      	movs	r3, #55	@ 0x37
 800705a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007060:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007066:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	2200      	movs	r2, #0
 800706c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	3304      	adds	r3, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff f966 	bl	8006344 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	3318      	adds	r3, #24
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff f961 	bl	8006344 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007096:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2200      	movs	r2, #0
 800709c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	68f9      	ldr	r1, [r7, #12]
 80070aa:	69b8      	ldr	r0, [r7, #24]
 80070ac:	f001 f966 	bl	800837c <pxPortInitialiseStack>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070c2:	bf00      	nop
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070d4:	f001 fa80 	bl	80085d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007190 <prvAddNewTaskToReadyList+0xc4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3301      	adds	r3, #1
 80070de:	4a2c      	ldr	r2, [pc, #176]	@ (8007190 <prvAddNewTaskToReadyList+0xc4>)
 80070e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007194 <prvAddNewTaskToReadyList+0xc8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007194 <prvAddNewTaskToReadyList+0xc8>)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070f0:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <prvAddNewTaskToReadyList+0xc4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d110      	bne.n	800711a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070f8:	f000 fc46 	bl	8007988 <prvInitialiseTaskLists>
 80070fc:	e00d      	b.n	800711a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070fe:	4b26      	ldr	r3, [pc, #152]	@ (8007198 <prvAddNewTaskToReadyList+0xcc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007106:	4b23      	ldr	r3, [pc, #140]	@ (8007194 <prvAddNewTaskToReadyList+0xc8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	429a      	cmp	r2, r3
 8007112:	d802      	bhi.n	800711a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007114:	4a1f      	ldr	r2, [pc, #124]	@ (8007194 <prvAddNewTaskToReadyList+0xc8>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800711a:	4b20      	ldr	r3, [pc, #128]	@ (800719c <prvAddNewTaskToReadyList+0xd0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	4a1e      	ldr	r2, [pc, #120]	@ (800719c <prvAddNewTaskToReadyList+0xd0>)
 8007122:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007124:	4b1d      	ldr	r3, [pc, #116]	@ (800719c <prvAddNewTaskToReadyList+0xd0>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007130:	4b1b      	ldr	r3, [pc, #108]	@ (80071a0 <prvAddNewTaskToReadyList+0xd4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d903      	bls.n	8007140 <prvAddNewTaskToReadyList+0x74>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713c:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <prvAddNewTaskToReadyList+0xd4>)
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4a15      	ldr	r2, [pc, #84]	@ (80071a4 <prvAddNewTaskToReadyList+0xd8>)
 800714e:	441a      	add	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f7ff f901 	bl	800635e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800715c:	f001 fa6e 	bl	800863c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007160:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <prvAddNewTaskToReadyList+0xcc>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00e      	beq.n	8007186 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007168:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <prvAddNewTaskToReadyList+0xc8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d207      	bcs.n	8007186 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007176:	4b0c      	ldr	r3, [pc, #48]	@ (80071a8 <prvAddNewTaskToReadyList+0xdc>)
 8007178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200055cc 	.word	0x200055cc
 8007194:	200050f8 	.word	0x200050f8
 8007198:	200055d8 	.word	0x200055d8
 800719c:	200055e8 	.word	0x200055e8
 80071a0:	200055d4 	.word	0x200055d4
 80071a4:	200050fc 	.word	0x200050fc
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d018      	beq.n	80071f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <vTaskDelay+0x64>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <vTaskDelay+0x32>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071de:	f000 f883 	bl	80072e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fd1b 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071ea:	f000 f88b 	bl	8007304 <xTaskResumeAll>
 80071ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071f6:	4b07      	ldr	r3, [pc, #28]	@ (8007214 <vTaskDelay+0x68>)
 80071f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200055f4 	.word	0x200055f4
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007226:	463a      	mov	r2, r7
 8007228:	1d39      	adds	r1, r7, #4
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff f834 	bl	800629c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	9202      	str	r2, [sp, #8]
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	2300      	movs	r3, #0
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	2300      	movs	r3, #0
 8007244:	460a      	mov	r2, r1
 8007246:	4922      	ldr	r1, [pc, #136]	@ (80072d0 <vTaskStartScheduler+0xb8>)
 8007248:	4822      	ldr	r0, [pc, #136]	@ (80072d4 <vTaskStartScheduler+0xbc>)
 800724a:	f7ff fe09 	bl	8006e60 <xTaskCreateStatic>
 800724e:	4603      	mov	r3, r0
 8007250:	4a21      	ldr	r2, [pc, #132]	@ (80072d8 <vTaskStartScheduler+0xc0>)
 8007252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007254:	4b20      	ldr	r3, [pc, #128]	@ (80072d8 <vTaskStartScheduler+0xc0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	e001      	b.n	8007266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d102      	bne.n	8007272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800726c:	f000 fd2c 	bl	8007cc8 <xTimerCreateTimerTask>
 8007270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d116      	bne.n	80072a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	613b      	str	r3, [r7, #16]
}
 800728a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800728c:	4b13      	ldr	r3, [pc, #76]	@ (80072dc <vTaskStartScheduler+0xc4>)
 800728e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007292:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007294:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <vTaskStartScheduler+0xc8>)
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800729a:	4b12      	ldr	r3, [pc, #72]	@ (80072e4 <vTaskStartScheduler+0xcc>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072a0:	f001 f8f6 	bl	8008490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072a4:	e00f      	b.n	80072c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ac:	d10b      	bne.n	80072c6 <vTaskStartScheduler+0xae>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	60fb      	str	r3, [r7, #12]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <vTaskStartScheduler+0xaa>
}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	080160d4 	.word	0x080160d4
 80072d4:	08007959 	.word	0x08007959
 80072d8:	200055f0 	.word	0x200055f0
 80072dc:	200055ec 	.word	0x200055ec
 80072e0:	200055d8 	.word	0x200055d8
 80072e4:	200055d0 	.word	0x200055d0

080072e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072ec:	4b04      	ldr	r3, [pc, #16]	@ (8007300 <vTaskSuspendAll+0x18>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	4a03      	ldr	r2, [pc, #12]	@ (8007300 <vTaskSuspendAll+0x18>)
 80072f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072f6:	bf00      	nop
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	200055f4 	.word	0x200055f4

08007304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800730e:	2300      	movs	r3, #0
 8007310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007312:	4b42      	ldr	r3, [pc, #264]	@ (800741c <xTaskResumeAll+0x118>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10b      	bne.n	8007332 <xTaskResumeAll+0x2e>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	603b      	str	r3, [r7, #0]
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	e7fd      	b.n	800732e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007332:	f001 f951 	bl	80085d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007336:	4b39      	ldr	r3, [pc, #228]	@ (800741c <xTaskResumeAll+0x118>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3b01      	subs	r3, #1
 800733c:	4a37      	ldr	r2, [pc, #220]	@ (800741c <xTaskResumeAll+0x118>)
 800733e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007340:	4b36      	ldr	r3, [pc, #216]	@ (800741c <xTaskResumeAll+0x118>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d162      	bne.n	800740e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007348:	4b35      	ldr	r3, [pc, #212]	@ (8007420 <xTaskResumeAll+0x11c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d05e      	beq.n	800740e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007350:	e02f      	b.n	80073b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b34      	ldr	r3, [pc, #208]	@ (8007424 <xTaskResumeAll+0x120>)
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3318      	adds	r3, #24
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff f85a 	bl	8006418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3304      	adds	r3, #4
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff f855 	bl	8006418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	4b2d      	ldr	r3, [pc, #180]	@ (8007428 <xTaskResumeAll+0x124>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d903      	bls.n	8007382 <xTaskResumeAll+0x7e>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	4a2a      	ldr	r2, [pc, #168]	@ (8007428 <xTaskResumeAll+0x124>)
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4a27      	ldr	r2, [pc, #156]	@ (800742c <xTaskResumeAll+0x128>)
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3304      	adds	r3, #4
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f7fe ffe0 	bl	800635e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a2:	4b23      	ldr	r3, [pc, #140]	@ (8007430 <xTaskResumeAll+0x12c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d302      	bcc.n	80073b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80073ac:	4b21      	ldr	r3, [pc, #132]	@ (8007434 <xTaskResumeAll+0x130>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007424 <xTaskResumeAll+0x120>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1cb      	bne.n	8007352 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073c0:	f000 fb80 	bl	8007ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007438 <xTaskResumeAll+0x134>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073d0:	f000 f846 	bl	8007460 <xTaskIncrementTick>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80073da:	4b16      	ldr	r3, [pc, #88]	@ (8007434 <xTaskResumeAll+0x130>)
 80073dc:	2201      	movs	r2, #1
 80073de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f1      	bne.n	80073d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80073ec:	4b12      	ldr	r3, [pc, #72]	@ (8007438 <xTaskResumeAll+0x134>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073f2:	4b10      	ldr	r3, [pc, #64]	@ (8007434 <xTaskResumeAll+0x130>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073fe:	4b0f      	ldr	r3, [pc, #60]	@ (800743c <xTaskResumeAll+0x138>)
 8007400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800740e:	f001 f915 	bl	800863c <vPortExitCritical>

	return xAlreadyYielded;
 8007412:	68bb      	ldr	r3, [r7, #8]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	200055f4 	.word	0x200055f4
 8007420:	200055cc 	.word	0x200055cc
 8007424:	2000558c 	.word	0x2000558c
 8007428:	200055d4 	.word	0x200055d4
 800742c:	200050fc 	.word	0x200050fc
 8007430:	200050f8 	.word	0x200050f8
 8007434:	200055e0 	.word	0x200055e0
 8007438:	200055dc 	.word	0x200055dc
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007446:	4b05      	ldr	r3, [pc, #20]	@ (800745c <xTaskGetTickCount+0x1c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800744c:	687b      	ldr	r3, [r7, #4]
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	200055d0 	.word	0x200055d0

08007460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800746a:	4b4f      	ldr	r3, [pc, #316]	@ (80075a8 <xTaskIncrementTick+0x148>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f040 8090 	bne.w	8007594 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007474:	4b4d      	ldr	r3, [pc, #308]	@ (80075ac <xTaskIncrementTick+0x14c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800747c:	4a4b      	ldr	r2, [pc, #300]	@ (80075ac <xTaskIncrementTick+0x14c>)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d121      	bne.n	80074cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007488:	4b49      	ldr	r3, [pc, #292]	@ (80075b0 <xTaskIncrementTick+0x150>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	603b      	str	r3, [r7, #0]
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <xTaskIncrementTick+0x46>
 80074aa:	4b41      	ldr	r3, [pc, #260]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	4b40      	ldr	r3, [pc, #256]	@ (80075b4 <xTaskIncrementTick+0x154>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a3e      	ldr	r2, [pc, #248]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	4a3e      	ldr	r2, [pc, #248]	@ (80075b4 <xTaskIncrementTick+0x154>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	4b3e      	ldr	r3, [pc, #248]	@ (80075b8 <xTaskIncrementTick+0x158>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	4a3c      	ldr	r2, [pc, #240]	@ (80075b8 <xTaskIncrementTick+0x158>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	f000 fafc 	bl	8007ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074cc:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <xTaskIncrementTick+0x15c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d349      	bcc.n	800756a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074d6:	4b36      	ldr	r3, [pc, #216]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e0:	4b36      	ldr	r3, [pc, #216]	@ (80075bc <xTaskIncrementTick+0x15c>)
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074e6:	601a      	str	r2, [r3, #0]
					break;
 80074e8:	e03f      	b.n	800756a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ea:	4b31      	ldr	r3, [pc, #196]	@ (80075b0 <xTaskIncrementTick+0x150>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d203      	bcs.n	800750a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007502:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <xTaskIncrementTick+0x15c>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007508:	e02f      	b.n	800756a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe ff82 	bl	8006418 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	3318      	adds	r3, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe ff79 	bl	8006418 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752a:	4b25      	ldr	r3, [pc, #148]	@ (80075c0 <xTaskIncrementTick+0x160>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	d903      	bls.n	800753a <xTaskIncrementTick+0xda>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	4a22      	ldr	r2, [pc, #136]	@ (80075c0 <xTaskIncrementTick+0x160>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753e:	4613      	mov	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4a1f      	ldr	r2, [pc, #124]	@ (80075c4 <xTaskIncrementTick+0x164>)
 8007548:	441a      	add	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f7fe ff04 	bl	800635e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755a:	4b1b      	ldr	r3, [pc, #108]	@ (80075c8 <xTaskIncrementTick+0x168>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	429a      	cmp	r2, r3
 8007562:	d3b8      	bcc.n	80074d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007568:	e7b5      	b.n	80074d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800756a:	4b17      	ldr	r3, [pc, #92]	@ (80075c8 <xTaskIncrementTick+0x168>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007570:	4914      	ldr	r1, [pc, #80]	@ (80075c4 <xTaskIncrementTick+0x164>)
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d901      	bls.n	8007586 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007582:	2301      	movs	r3, #1
 8007584:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007586:	4b11      	ldr	r3, [pc, #68]	@ (80075cc <xTaskIncrementTick+0x16c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	e004      	b.n	800759e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007594:	4b0e      	ldr	r3, [pc, #56]	@ (80075d0 <xTaskIncrementTick+0x170>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	4a0d      	ldr	r2, [pc, #52]	@ (80075d0 <xTaskIncrementTick+0x170>)
 800759c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800759e:	697b      	ldr	r3, [r7, #20]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	200055f4 	.word	0x200055f4
 80075ac:	200055d0 	.word	0x200055d0
 80075b0:	20005584 	.word	0x20005584
 80075b4:	20005588 	.word	0x20005588
 80075b8:	200055e4 	.word	0x200055e4
 80075bc:	200055ec 	.word	0x200055ec
 80075c0:	200055d4 	.word	0x200055d4
 80075c4:	200050fc 	.word	0x200050fc
 80075c8:	200050f8 	.word	0x200050f8
 80075cc:	200055e0 	.word	0x200055e0
 80075d0:	200055dc 	.word	0x200055dc

080075d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075da:	4b28      	ldr	r3, [pc, #160]	@ (800767c <vTaskSwitchContext+0xa8>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075e2:	4b27      	ldr	r3, [pc, #156]	@ (8007680 <vTaskSwitchContext+0xac>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075e8:	e042      	b.n	8007670 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80075ea:	4b25      	ldr	r3, [pc, #148]	@ (8007680 <vTaskSwitchContext+0xac>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f0:	4b24      	ldr	r3, [pc, #144]	@ (8007684 <vTaskSwitchContext+0xb0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	e011      	b.n	800761c <vTaskSwitchContext+0x48>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <vTaskSwitchContext+0x42>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <vTaskSwitchContext+0x3e>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3b01      	subs	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	491a      	ldr	r1, [pc, #104]	@ (8007688 <vTaskSwitchContext+0xb4>)
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0e3      	beq.n	80075f8 <vTaskSwitchContext+0x24>
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4a13      	ldr	r2, [pc, #76]	@ (8007688 <vTaskSwitchContext+0xb4>)
 800763c:	4413      	add	r3, r2
 800763e:	60bb      	str	r3, [r7, #8]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	3308      	adds	r3, #8
 8007652:	429a      	cmp	r2, r3
 8007654:	d104      	bne.n	8007660 <vTaskSwitchContext+0x8c>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	605a      	str	r2, [r3, #4]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	4a09      	ldr	r2, [pc, #36]	@ (800768c <vTaskSwitchContext+0xb8>)
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	4a06      	ldr	r2, [pc, #24]	@ (8007684 <vTaskSwitchContext+0xb0>)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6013      	str	r3, [r2, #0]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	200055f4 	.word	0x200055f4
 8007680:	200055e0 	.word	0x200055e0
 8007684:	200055d4 	.word	0x200055d4
 8007688:	200050fc 	.word	0x200050fc
 800768c:	200050f8 	.word	0x200050f8

08007690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	60fb      	str	r3, [r7, #12]
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076b8:	4b07      	ldr	r3, [pc, #28]	@ (80076d8 <vTaskPlaceOnEventList+0x48>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3318      	adds	r3, #24
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fe fe70 	bl	80063a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076c6:	2101      	movs	r1, #1
 80076c8:	6838      	ldr	r0, [r7, #0]
 80076ca:	f000 faa9 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	200050f8 	.word	0x200050f8

080076dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	617b      	str	r3, [r7, #20]
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	e7fd      	b.n	8007702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007706:	4b0a      	ldr	r3, [pc, #40]	@ (8007730 <vTaskPlaceOnEventListRestricted+0x54>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3318      	adds	r3, #24
 800770c:	4619      	mov	r1, r3
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7fe fe25 	bl	800635e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800771e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	68b8      	ldr	r0, [r7, #8]
 8007724:	f000 fa7c 	bl	8007c20 <prvAddCurrentTaskToDelayedList>
	}
 8007728:	bf00      	nop
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	200050f8 	.word	0x200050f8

08007734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	60fb      	str	r3, [r7, #12]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	3318      	adds	r3, #24
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fe56 	bl	8006418 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800776c:	4b1d      	ldr	r3, [pc, #116]	@ (80077e4 <xTaskRemoveFromEventList+0xb0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d11d      	bne.n	80077b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	3304      	adds	r3, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fe4d 	bl	8006418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007782:	4b19      	ldr	r3, [pc, #100]	@ (80077e8 <xTaskRemoveFromEventList+0xb4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d903      	bls.n	8007792 <xTaskRemoveFromEventList+0x5e>
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	4a16      	ldr	r2, [pc, #88]	@ (80077e8 <xTaskRemoveFromEventList+0xb4>)
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4a13      	ldr	r2, [pc, #76]	@ (80077ec <xTaskRemoveFromEventList+0xb8>)
 80077a0:	441a      	add	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fe fdd8 	bl	800635e <vListInsertEnd>
 80077ae:	e005      	b.n	80077bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	3318      	adds	r3, #24
 80077b4:	4619      	mov	r1, r3
 80077b6:	480e      	ldr	r0, [pc, #56]	@ (80077f0 <xTaskRemoveFromEventList+0xbc>)
 80077b8:	f7fe fdd1 	bl	800635e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c0:	4b0c      	ldr	r3, [pc, #48]	@ (80077f4 <xTaskRemoveFromEventList+0xc0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d905      	bls.n	80077d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077ce:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <xTaskRemoveFromEventList+0xc4>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e001      	b.n	80077da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077da:	697b      	ldr	r3, [r7, #20]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200055f4 	.word	0x200055f4
 80077e8:	200055d4 	.word	0x200055d4
 80077ec:	200050fc 	.word	0x200050fc
 80077f0:	2000558c 	.word	0x2000558c
 80077f4:	200050f8 	.word	0x200050f8
 80077f8:	200055e0 	.word	0x200055e0

080077fc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60fb      	str	r3, [r7, #12]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007822:	f000 fed9 	bl	80085d8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <vTaskSetTimeOutState+0x48>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800782e:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <vTaskSetTimeOutState+0x4c>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007836:	f000 ff01 	bl	800863c <vPortExitCritical>
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	200055e4 	.word	0x200055e4
 8007848:	200055d0 	.word	0x200055d0

0800784c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007854:	4b06      	ldr	r3, [pc, #24]	@ (8007870 <vTaskInternalSetTimeOutState+0x24>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800785c:	4b05      	ldr	r3, [pc, #20]	@ (8007874 <vTaskInternalSetTimeOutState+0x28>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	605a      	str	r2, [r3, #4]
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	200055e4 	.word	0x200055e4
 8007874:	200055d0 	.word	0x200055d0

08007878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	613b      	str	r3, [r7, #16]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60fb      	str	r3, [r7, #12]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80078be:	f000 fe8b 	bl	80085d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <xTaskCheckForTimeOut+0xc0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078da:	d102      	bne.n	80078e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078dc:	2300      	movs	r3, #0
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	e023      	b.n	800792a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b15      	ldr	r3, [pc, #84]	@ (800793c <xTaskCheckForTimeOut+0xc4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d007      	beq.n	80078fe <xTaskCheckForTimeOut+0x86>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d302      	bcc.n	80078fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078f8:	2301      	movs	r3, #1
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	e015      	b.n	800792a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	429a      	cmp	r2, r3
 8007906:	d20b      	bcs.n	8007920 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	1ad2      	subs	r2, r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ff99 	bl	800784c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e004      	b.n	800792a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007926:	2301      	movs	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800792a:	f000 fe87 	bl	800863c <vPortExitCritical>

	return xReturn;
 800792e:	69fb      	ldr	r3, [r7, #28]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200055d0 	.word	0x200055d0
 800793c:	200055e4 	.word	0x200055e4

08007940 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007944:	4b03      	ldr	r3, [pc, #12]	@ (8007954 <vTaskMissedYield+0x14>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]
}
 800794a:	bf00      	nop
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	200055e0 	.word	0x200055e0

08007958 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007960:	f000 f852 	bl	8007a08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007964:	4b06      	ldr	r3, [pc, #24]	@ (8007980 <prvIdleTask+0x28>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d9f9      	bls.n	8007960 <prvIdleTask+0x8>
			{
				taskYIELD();
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <prvIdleTask+0x2c>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800797c:	e7f0      	b.n	8007960 <prvIdleTask+0x8>
 800797e:	bf00      	nop
 8007980:	200050fc 	.word	0x200050fc
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	e00c      	b.n	80079ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4a12      	ldr	r2, [pc, #72]	@ (80079e8 <prvInitialiseTaskLists+0x60>)
 80079a0:	4413      	add	r3, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fcae 	bl	8006304 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3301      	adds	r3, #1
 80079ac:	607b      	str	r3, [r7, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b37      	cmp	r3, #55	@ 0x37
 80079b2:	d9ef      	bls.n	8007994 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079b4:	480d      	ldr	r0, [pc, #52]	@ (80079ec <prvInitialiseTaskLists+0x64>)
 80079b6:	f7fe fca5 	bl	8006304 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079ba:	480d      	ldr	r0, [pc, #52]	@ (80079f0 <prvInitialiseTaskLists+0x68>)
 80079bc:	f7fe fca2 	bl	8006304 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079c0:	480c      	ldr	r0, [pc, #48]	@ (80079f4 <prvInitialiseTaskLists+0x6c>)
 80079c2:	f7fe fc9f 	bl	8006304 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079c6:	480c      	ldr	r0, [pc, #48]	@ (80079f8 <prvInitialiseTaskLists+0x70>)
 80079c8:	f7fe fc9c 	bl	8006304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079cc:	480b      	ldr	r0, [pc, #44]	@ (80079fc <prvInitialiseTaskLists+0x74>)
 80079ce:	f7fe fc99 	bl	8006304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a00 <prvInitialiseTaskLists+0x78>)
 80079d4:	4a05      	ldr	r2, [pc, #20]	@ (80079ec <prvInitialiseTaskLists+0x64>)
 80079d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a04 <prvInitialiseTaskLists+0x7c>)
 80079da:	4a05      	ldr	r2, [pc, #20]	@ (80079f0 <prvInitialiseTaskLists+0x68>)
 80079dc:	601a      	str	r2, [r3, #0]
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	200050fc 	.word	0x200050fc
 80079ec:	2000555c 	.word	0x2000555c
 80079f0:	20005570 	.word	0x20005570
 80079f4:	2000558c 	.word	0x2000558c
 80079f8:	200055a0 	.word	0x200055a0
 80079fc:	200055b8 	.word	0x200055b8
 8007a00:	20005584 	.word	0x20005584
 8007a04:	20005588 	.word	0x20005588

08007a08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a0e:	e019      	b.n	8007a44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a10:	f000 fde2 	bl	80085d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a14:	4b10      	ldr	r3, [pc, #64]	@ (8007a58 <prvCheckTasksWaitingTermination+0x50>)
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fcf9 	bl	8006418 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <prvCheckTasksWaitingTermination+0x54>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8007a5c <prvCheckTasksWaitingTermination+0x54>)
 8007a2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a30:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <prvCheckTasksWaitingTermination+0x58>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <prvCheckTasksWaitingTermination+0x58>)
 8007a38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a3a:	f000 fdff 	bl	800863c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f810 	bl	8007a64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a44:	4b06      	ldr	r3, [pc, #24]	@ (8007a60 <prvCheckTasksWaitingTermination+0x58>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e1      	bne.n	8007a10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200055a0 	.word	0x200055a0
 8007a5c:	200055cc 	.word	0x200055cc
 8007a60:	200055b4 	.word	0x200055b4

08007a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d108      	bne.n	8007a88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 ff9c 	bl	80089b8 <vPortFree>
				vPortFree( pxTCB );
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 ff99 	bl	80089b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a86:	e019      	b.n	8007abc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d103      	bne.n	8007a9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 ff90 	bl	80089b8 <vPortFree>
	}
 8007a98:	e010      	b.n	8007abc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d00b      	beq.n	8007abc <prvDeleteTCB+0x58>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	60fb      	str	r3, [r7, #12]
}
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	e7fd      	b.n	8007ab8 <prvDeleteTCB+0x54>
	}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aca:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <prvResetNextTaskUnblockTime+0x38>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b00 <prvResetNextTaskUnblockTime+0x3c>)
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007adc:	e008      	b.n	8007af0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ade:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <prvResetNextTaskUnblockTime+0x38>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	4a04      	ldr	r2, [pc, #16]	@ (8007b00 <prvResetNextTaskUnblockTime+0x3c>)
 8007aee:	6013      	str	r3, [r2, #0]
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	20005584 	.word	0x20005584
 8007b00:	200055ec 	.word	0x200055ec

08007b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b38 <xTaskGetSchedulerState+0x34>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b12:	2301      	movs	r3, #1
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	e008      	b.n	8007b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b18:	4b08      	ldr	r3, [pc, #32]	@ (8007b3c <xTaskGetSchedulerState+0x38>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b20:	2302      	movs	r3, #2
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	e001      	b.n	8007b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b2a:	687b      	ldr	r3, [r7, #4]
	}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	200055d8 	.word	0x200055d8
 8007b3c:	200055f4 	.word	0x200055f4

08007b40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d058      	beq.n	8007c08 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b56:	4b2f      	ldr	r3, [pc, #188]	@ (8007c14 <xTaskPriorityDisinherit+0xd4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d00b      	beq.n	8007b78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	60fb      	str	r3, [r7, #12]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10b      	bne.n	8007b98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60bb      	str	r3, [r7, #8]
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	e7fd      	b.n	8007b94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	1e5a      	subs	r2, r3, #1
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d02c      	beq.n	8007c08 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d128      	bne.n	8007c08 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fc2c 	bl	8006418 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <xTaskPriorityDisinherit+0xd8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d903      	bls.n	8007be8 <xTaskPriorityDisinherit+0xa8>
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be4:	4a0c      	ldr	r2, [pc, #48]	@ (8007c18 <xTaskPriorityDisinherit+0xd8>)
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4a09      	ldr	r2, [pc, #36]	@ (8007c1c <xTaskPriorityDisinherit+0xdc>)
 8007bf6:	441a      	add	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7fe fbad 	bl	800635e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c04:	2301      	movs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c08:	697b      	ldr	r3, [r7, #20]
	}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	200050f8 	.word	0x200050f8
 8007c18:	200055d4 	.word	0x200055d4
 8007c1c:	200050fc 	.word	0x200050fc

08007c20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c2a:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c30:	4b20      	ldr	r3, [pc, #128]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fbee 	bl	8006418 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c42:	d10a      	bne.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4819      	ldr	r0, [pc, #100]	@ (8007cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c54:	f7fe fb83 	bl	800635e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c58:	e026      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c62:	4b14      	ldr	r3, [pc, #80]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d209      	bcs.n	8007c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f7fe fb91 	bl	80063a6 <vListInsert>
}
 8007c84:	e010      	b.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c86:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7fe fb87 	bl	80063a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c98:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d202      	bcs.n	8007ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ca2:	4a08      	ldr	r2, [pc, #32]	@ (8007cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6013      	str	r3, [r2, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	200055d0 	.word	0x200055d0
 8007cb4:	200050f8 	.word	0x200050f8
 8007cb8:	200055b8 	.word	0x200055b8
 8007cbc:	20005588 	.word	0x20005588
 8007cc0:	20005584 	.word	0x20005584
 8007cc4:	200055ec 	.word	0x200055ec

08007cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	@ 0x28
 8007ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cd2:	f000 fb13 	bl	80082fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d4c <xTimerCreateTimerTask+0x84>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d021      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ce6:	1d3a      	adds	r2, r7, #4
 8007ce8:	f107 0108 	add.w	r1, r7, #8
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe faed 	bl	80062d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	9202      	str	r2, [sp, #8]
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	2302      	movs	r3, #2
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	460a      	mov	r2, r1
 8007d08:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <xTimerCreateTimerTask+0x88>)
 8007d0a:	4812      	ldr	r0, [pc, #72]	@ (8007d54 <xTimerCreateTimerTask+0x8c>)
 8007d0c:	f7ff f8a8 	bl	8006e60 <xTaskCreateStatic>
 8007d10:	4603      	mov	r3, r0
 8007d12:	4a11      	ldr	r2, [pc, #68]	@ (8007d58 <xTimerCreateTimerTask+0x90>)
 8007d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d16:	4b10      	ldr	r3, [pc, #64]	@ (8007d58 <xTimerCreateTimerTask+0x90>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	613b      	str	r3, [r7, #16]
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	e7fd      	b.n	8007d3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d40:	697b      	ldr	r3, [r7, #20]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20005628 	.word	0x20005628
 8007d50:	080160dc 	.word	0x080160dc
 8007d54:	08007e95 	.word	0x08007e95
 8007d58:	2000562c 	.word	0x2000562c

08007d5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <xTimerGenericCommand+0x30>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	623b      	str	r3, [r7, #32]
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d8c:	4b19      	ldr	r3, [pc, #100]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d02a      	beq.n	8007dea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	dc18      	bgt.n	8007dd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007da6:	f7ff fead 	bl	8007b04 <xTaskGetSchedulerState>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d109      	bne.n	8007dc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007db0:	4b10      	ldr	r3, [pc, #64]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	f107 0110 	add.w	r1, r7, #16
 8007db8:	2300      	movs	r3, #0
 8007dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dbc:	f7fe fc60 	bl	8006680 <xQueueGenericSend>
 8007dc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dc2:	e012      	b.n	8007dea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	f107 0110 	add.w	r1, r7, #16
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7fe fc56 	bl	8006680 <xQueueGenericSend>
 8007dd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dd6:	e008      	b.n	8007dea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dd8:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <xTimerGenericCommand+0x98>)
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	f107 0110 	add.w	r1, r7, #16
 8007de0:	2300      	movs	r3, #0
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	f7fe fd4e 	bl	8006884 <xQueueGenericSendFromISR>
 8007de8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3728      	adds	r7, #40	@ 0x28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20005628 	.word	0x20005628

08007df8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e02:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <prvProcessExpiredTimer+0x98>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fb01 	bl	8006418 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d023      	beq.n	8007e6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	18d1      	adds	r1, r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	6978      	ldr	r0, [r7, #20]
 8007e32:	f000 f8d5 	bl	8007fe0 <prvInsertTimerInActiveList>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d020      	beq.n	8007e7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2300      	movs	r3, #0
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	2100      	movs	r1, #0
 8007e46:	6978      	ldr	r0, [r7, #20]
 8007e48:	f7ff ff88 	bl	8007d5c <xTimerGenericCommand>
 8007e4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d114      	bne.n	8007e7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	60fb      	str	r3, [r7, #12]
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	e7fd      	b.n	8007e68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	6978      	ldr	r0, [r7, #20]
 8007e84:	4798      	blx	r3
}
 8007e86:	bf00      	nop
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20005620 	.word	0x20005620

08007e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f859 	bl	8007f58 <prvGetNextExpireTime>
 8007ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f805 	bl	8007ebc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007eb2:	f000 f8d7 	bl	8008064 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eb6:	bf00      	nop
 8007eb8:	e7f0      	b.n	8007e9c <prvTimerTask+0x8>
	...

08007ebc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ec6:	f7ff fa0f 	bl	80072e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eca:	f107 0308 	add.w	r3, r7, #8
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f866 	bl	8007fa0 <prvSampleTimeNow>
 8007ed4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d130      	bne.n	8007f3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <prvProcessTimerOrBlockTask+0x3c>
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d806      	bhi.n	8007ef8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eea:	f7ff fa0b 	bl	8007304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ff81 	bl	8007df8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ef6:	e024      	b.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007efe:	4b13      	ldr	r3, [pc, #76]	@ (8007f4c <prvProcessTimerOrBlockTask+0x90>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <prvProcessTimerOrBlockTask+0x50>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <prvProcessTimerOrBlockTask+0x52>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f10:	4b0f      	ldr	r3, [pc, #60]	@ (8007f50 <prvProcessTimerOrBlockTask+0x94>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f7fe ff6b 	bl	8006df8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f22:	f7ff f9ef 	bl	8007304 <xTaskResumeAll>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f2c:	4b09      	ldr	r3, [pc, #36]	@ (8007f54 <prvProcessTimerOrBlockTask+0x98>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
}
 8007f3c:	e001      	b.n	8007f42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f3e:	f7ff f9e1 	bl	8007304 <xTaskResumeAll>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20005624 	.word	0x20005624
 8007f50:	20005628 	.word	0x20005628
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f60:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <prvGetNextExpireTime+0x44>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <prvGetNextExpireTime+0x16>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	e000      	b.n	8007f70 <prvGetNextExpireTime+0x18>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f7c:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <prvGetNextExpireTime+0x44>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e001      	b.n	8007f8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20005620 	.word	0x20005620

08007fa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fa8:	f7ff fa4a 	bl	8007440 <xTaskGetTickCount>
 8007fac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <prvSampleTimeNow+0x3c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d205      	bcs.n	8007fc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fb8:	f000 f93a 	bl	8008230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fca:	4a04      	ldr	r2, [pc, #16]	@ (8007fdc <prvSampleTimeNow+0x3c>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20005630 	.word	0x20005630

08007fe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d812      	bhi.n	800802c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	429a      	cmp	r2, r3
 8008012:	d302      	bcc.n	800801a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e01b      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800801a:	4b10      	ldr	r3, [pc, #64]	@ (800805c <prvInsertTimerInActiveList+0x7c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f7fe f9be 	bl	80063a6 <vListInsert>
 800802a:	e012      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d206      	bcs.n	8008042 <prvInsertTimerInActiveList+0x62>
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d302      	bcc.n	8008042 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e007      	b.n	8008052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008042:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <prvInsertTimerInActiveList+0x80>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fe f9aa 	bl	80063a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008052:	697b      	ldr	r3, [r7, #20]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20005624 	.word	0x20005624
 8008060:	20005620 	.word	0x20005620

08008064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	@ 0x38
 8008068:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806a:	e0ce      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	da19      	bge.n	80080a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008072:	1d3b      	adds	r3, r7, #4
 8008074:	3304      	adds	r3, #4
 8008076:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	61fb      	str	r3, [r7, #28]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809c:	6850      	ldr	r0, [r2, #4]
 800809e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a0:	6892      	ldr	r2, [r2, #8]
 80080a2:	4611      	mov	r1, r2
 80080a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f2c0 80ae 	blt.w	800820a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe f9aa 	bl	8006418 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080c4:	463b      	mov	r3, r7
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff ff6a 	bl	8007fa0 <prvSampleTimeNow>
 80080cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	f200 8097 	bhi.w	8008204 <prvProcessReceivedCommands+0x1a0>
 80080d6:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <prvProcessReceivedCommands+0x78>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	08008105 	.word	0x08008105
 80080e0:	08008105 	.word	0x08008105
 80080e4:	08008105 	.word	0x08008105
 80080e8:	0800817b 	.word	0x0800817b
 80080ec:	0800818f 	.word	0x0800818f
 80080f0:	080081db 	.word	0x080081db
 80080f4:	08008105 	.word	0x08008105
 80080f8:	08008105 	.word	0x08008105
 80080fc:	0800817b 	.word	0x0800817b
 8008100:	0800818f 	.word	0x0800818f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800810a:	f043 0301 	orr.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	18d1      	adds	r1, r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008124:	f7ff ff5c 	bl	8007fe0 <prvInsertTimerInActiveList>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d06c      	beq.n	8008208 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008134:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d061      	beq.n	8008208 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	441a      	add	r2, r3
 800814c:	2300      	movs	r3, #0
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	2100      	movs	r1, #0
 8008154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008156:	f7ff fe01 	bl	8007d5c <xTimerGenericCommand>
 800815a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d152      	bne.n	8008208 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	61bb      	str	r3, [r7, #24]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800818c:	e03d      	b.n	800820a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800818e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	b2da      	uxtb	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	617b      	str	r3, [r7, #20]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	18d1      	adds	r1, r2, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081d4:	f7ff ff04 	bl	8007fe0 <prvInsertTimerInActiveList>
					break;
 80081d8:	e017      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80081e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ea:	f000 fbe5 	bl	80089b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081ee:	e00c      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f6:	f023 0301 	bic.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008202:	e002      	b.n	800820a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <prvProcessReceivedCommands+0x1a6>
					break;
 8008208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800820a:	4b08      	ldr	r3, [pc, #32]	@ (800822c <prvProcessReceivedCommands+0x1c8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	1d39      	adds	r1, r7, #4
 8008210:	2200      	movs	r2, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fbd4 	bl	80069c0 <xQueueReceive>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	f47f af26 	bne.w	800806c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3730      	adds	r7, #48	@ 0x30
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20005628 	.word	0x20005628

08008230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008236:	e049      	b.n	80082cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008238:	4b2e      	ldr	r3, [pc, #184]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008242:	4b2c      	ldr	r3, [pc, #176]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe f8e1 	bl	8006418 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d02f      	beq.n	80082cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	d90e      	bls.n	800829c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800828a:	4b1a      	ldr	r3, [pc, #104]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fe f886 	bl	80063a6 <vListInsert>
 800829a:	e017      	b.n	80082cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff fd58 	bl	8007d5c <xTimerGenericCommand>
 80082ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10b      	bne.n	80082cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	603b      	str	r3, [r7, #0]
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	e7fd      	b.n	80082c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082cc:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1b0      	bne.n	8008238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082d6:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a04      	ldr	r2, [pc, #16]	@ (80082f4 <prvSwitchTimerLists+0xc4>)
 80082e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082e4:	4a04      	ldr	r2, [pc, #16]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	6013      	str	r3, [r2, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20005620 	.word	0x20005620
 80082f8:	20005624 	.word	0x20005624

080082fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008302:	f000 f969 	bl	80085d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008306:	4b15      	ldr	r3, [pc, #84]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d120      	bne.n	8008350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800830e:	4814      	ldr	r0, [pc, #80]	@ (8008360 <prvCheckForValidListAndQueue+0x64>)
 8008310:	f7fd fff8 	bl	8006304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008314:	4813      	ldr	r0, [pc, #76]	@ (8008364 <prvCheckForValidListAndQueue+0x68>)
 8008316:	f7fd fff5 	bl	8006304 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800831a:	4b13      	ldr	r3, [pc, #76]	@ (8008368 <prvCheckForValidListAndQueue+0x6c>)
 800831c:	4a10      	ldr	r2, [pc, #64]	@ (8008360 <prvCheckForValidListAndQueue+0x64>)
 800831e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008320:	4b12      	ldr	r3, [pc, #72]	@ (800836c <prvCheckForValidListAndQueue+0x70>)
 8008322:	4a10      	ldr	r2, [pc, #64]	@ (8008364 <prvCheckForValidListAndQueue+0x68>)
 8008324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008326:	2300      	movs	r3, #0
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	4b11      	ldr	r3, [pc, #68]	@ (8008370 <prvCheckForValidListAndQueue+0x74>)
 800832c:	4a11      	ldr	r2, [pc, #68]	@ (8008374 <prvCheckForValidListAndQueue+0x78>)
 800832e:	2110      	movs	r1, #16
 8008330:	200a      	movs	r0, #10
 8008332:	f7fe f905 	bl	8006540 <xQueueGenericCreateStatic>
 8008336:	4603      	mov	r3, r0
 8008338:	4a08      	ldr	r2, [pc, #32]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 800833a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800833c:	4b07      	ldr	r3, [pc, #28]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008344:	4b05      	ldr	r3, [pc, #20]	@ (800835c <prvCheckForValidListAndQueue+0x60>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	490b      	ldr	r1, [pc, #44]	@ (8008378 <prvCheckForValidListAndQueue+0x7c>)
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fd2a 	bl	8006da4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008350:	f000 f974 	bl	800863c <vPortExitCritical>
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20005628 	.word	0x20005628
 8008360:	200055f8 	.word	0x200055f8
 8008364:	2000560c 	.word	0x2000560c
 8008368:	20005620 	.word	0x20005620
 800836c:	20005624 	.word	0x20005624
 8008370:	200056d4 	.word	0x200056d4
 8008374:	20005634 	.word	0x20005634
 8008378:	080160e4 	.word	0x080160e4

0800837c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3b04      	subs	r3, #4
 800838c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3b04      	subs	r3, #4
 800839a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f023 0201 	bic.w	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3b04      	subs	r3, #4
 80083aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083ac:	4a0c      	ldr	r2, [pc, #48]	@ (80083e0 <pxPortInitialiseStack+0x64>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3b14      	subs	r3, #20
 80083b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3b04      	subs	r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f06f 0202 	mvn.w	r2, #2
 80083ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3b20      	subs	r3, #32
 80083d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083d2:	68fb      	ldr	r3, [r7, #12]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	080083e5 	.word	0x080083e5

080083e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083ee:	4b13      	ldr	r3, [pc, #76]	@ (800843c <prvTaskExitError+0x58>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083f6:	d00b      	beq.n	8008410 <prvTaskExitError+0x2c>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	e7fd      	b.n	800840c <prvTaskExitError+0x28>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60bb      	str	r3, [r7, #8]
}
 8008422:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008424:	bf00      	nop
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0fc      	beq.n	8008426 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20000048 	.word	0x20000048

08008440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	@ (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	200050f8 	.word	0x200050f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008468:	4808      	ldr	r0, [pc, #32]	@ (800848c <prvPortStartFirstTask+0x24>)
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f380 8808 	msr	MSP, r0
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8814 	msr	CONTROL, r0
 800847a:	b662      	cpsie	i
 800847c:	b661      	cpsie	f
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	df00      	svc	0
 8008488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800848a:	bf00      	nop
 800848c:	e000ed08 	.word	0xe000ed08

08008490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008496:	4b47      	ldr	r3, [pc, #284]	@ (80085b4 <xPortStartScheduler+0x124>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a47      	ldr	r2, [pc, #284]	@ (80085b8 <xPortStartScheduler+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10b      	bne.n	80084b8 <xPortStartScheduler+0x28>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	613b      	str	r3, [r7, #16]
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	e7fd      	b.n	80084b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084b8:	4b3e      	ldr	r3, [pc, #248]	@ (80085b4 <xPortStartScheduler+0x124>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a3f      	ldr	r2, [pc, #252]	@ (80085bc <xPortStartScheduler+0x12c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10b      	bne.n	80084da <xPortStartScheduler+0x4a>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60fb      	str	r3, [r7, #12]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084da:	4b39      	ldr	r3, [pc, #228]	@ (80085c0 <xPortStartScheduler+0x130>)
 80084dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	22ff      	movs	r2, #255	@ 0xff
 80084ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	4b31      	ldr	r3, [pc, #196]	@ (80085c4 <xPortStartScheduler+0x134>)
 8008500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008502:	4b31      	ldr	r3, [pc, #196]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008504:	2207      	movs	r2, #7
 8008506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008508:	e009      	b.n	800851e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800850a:	4b2f      	ldr	r3, [pc, #188]	@ (80085c8 <xPortStartScheduler+0x138>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3b01      	subs	r3, #1
 8008510:	4a2d      	ldr	r2, [pc, #180]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008526:	2b80      	cmp	r3, #128	@ 0x80
 8008528:	d0ef      	beq.n	800850a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800852a:	4b27      	ldr	r3, [pc, #156]	@ (80085c8 <xPortStartScheduler+0x138>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f1c3 0307 	rsb	r3, r3, #7
 8008532:	2b04      	cmp	r3, #4
 8008534:	d00b      	beq.n	800854e <xPortStartScheduler+0xbe>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800854e:	4b1e      	ldr	r3, [pc, #120]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	021b      	lsls	r3, r3, #8
 8008554:	4a1c      	ldr	r2, [pc, #112]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008558:	4b1b      	ldr	r3, [pc, #108]	@ (80085c8 <xPortStartScheduler+0x138>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008560:	4a19      	ldr	r2, [pc, #100]	@ (80085c8 <xPortStartScheduler+0x138>)
 8008562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800856c:	4b17      	ldr	r3, [pc, #92]	@ (80085cc <xPortStartScheduler+0x13c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <xPortStartScheduler+0x13c>)
 8008572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008578:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <xPortStartScheduler+0x13c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a13      	ldr	r2, [pc, #76]	@ (80085cc <xPortStartScheduler+0x13c>)
 800857e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008584:	f000 f8da 	bl	800873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008588:	4b11      	ldr	r3, [pc, #68]	@ (80085d0 <xPortStartScheduler+0x140>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800858e:	f000 f8f9 	bl	8008784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <xPortStartScheduler+0x144>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0f      	ldr	r2, [pc, #60]	@ (80085d4 <xPortStartScheduler+0x144>)
 8008598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800859c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800859e:	f7ff ff63 	bl	8008468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085a2:	f7ff f817 	bl	80075d4 <vTaskSwitchContext>
	prvTaskExitError();
 80085a6:	f7ff ff1d 	bl	80083e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	e000ed00 	.word	0xe000ed00
 80085b8:	410fc271 	.word	0x410fc271
 80085bc:	410fc270 	.word	0x410fc270
 80085c0:	e000e400 	.word	0xe000e400
 80085c4:	20005724 	.word	0x20005724
 80085c8:	20005728 	.word	0x20005728
 80085cc:	e000ed20 	.word	0xe000ed20
 80085d0:	20000048 	.word	0x20000048
 80085d4:	e000ef34 	.word	0xe000ef34

080085d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	607b      	str	r3, [r7, #4]
}
 80085f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085f2:	4b10      	ldr	r3, [pc, #64]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <vPortEnterCritical+0x5c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d110      	bne.n	8008626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <vPortEnterCritical+0x60>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <vPortEnterCritical+0x4e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	603b      	str	r3, [r7, #0]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <vPortEnterCritical+0x4a>
	}
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000048 	.word	0x20000048
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008642:	4b12      	ldr	r3, [pc, #72]	@ (800868c <vPortExitCritical+0x50>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10b      	bne.n	8008662 <vPortExitCritical+0x26>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	607b      	str	r3, [r7, #4]
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	e7fd      	b.n	800865e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a08      	ldr	r2, [pc, #32]	@ (800868c <vPortExitCritical+0x50>)
 800866a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vPortExitCritical+0x50>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <vPortExitCritical+0x44>
 8008674:	2300      	movs	r3, #0
 8008676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	20000048 	.word	0x20000048

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b15      	ldr	r3, [pc, #84]	@ (80086f0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f01e 0f10 	tst.w	lr, #16
 80086a0:	bf08      	it	eq
 80086a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086b4:	f380 8811 	msr	BASEPRI, r0
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f7fe ff88 	bl	80075d4 <vTaskSwitchContext>
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f380 8811 	msr	BASEPRI, r0
 80086cc:	bc09      	pop	{r0, r3}
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	f01e 0f10 	tst.w	lr, #16
 80086da:	bf08      	it	eq
 80086dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086e0:	f380 8809 	msr	PSP, r0
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst>:
 80086f0:	200050f8 	.word	0x200050f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008712:	f7fe fea5 	bl	8007460 <xTaskIncrementTick>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800871c:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <xPortSysTickHandler+0x40>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008740:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008746:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <vPortSetupTimerInterrupt+0x38>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800874c:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <vPortSetupTimerInterrupt+0x3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a0a      	ldr	r2, [pc, #40]	@ (800877c <vPortSetupTimerInterrupt+0x40>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	099b      	lsrs	r3, r3, #6
 8008758:	4a09      	ldr	r2, [pc, #36]	@ (8008780 <vPortSetupTimerInterrupt+0x44>)
 800875a:	3b01      	subs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800875e:	4b04      	ldr	r3, [pc, #16]	@ (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	e000e010 	.word	0xe000e010
 8008774:	e000e018 	.word	0xe000e018
 8008778:	2000003c 	.word	0x2000003c
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	e000e014 	.word	0xe000e014

08008784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008794 <vPortEnableVFP+0x10>
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008792:	bf00      	nop
 8008794:	e000ed88 	.word	0xe000ed88

08008798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d915      	bls.n	80087d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <vPortValidateInterruptPriority+0x74>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087b4:	4b16      	ldr	r3, [pc, #88]	@ (8008810 <vPortValidateInterruptPriority+0x78>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	7afa      	ldrb	r2, [r7, #11]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d20b      	bcs.n	80087d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008814 <vPortValidateInterruptPriority+0x7c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087de:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <vPortValidateInterruptPriority+0x80>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d90b      	bls.n	80087fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	603b      	str	r3, [r7, #0]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <vPortValidateInterruptPriority+0x62>
	}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	e000e3f0 	.word	0xe000e3f0
 8008810:	20005724 	.word	0x20005724
 8008814:	e000ed0c 	.word	0xe000ed0c
 8008818:	20005728 	.word	0x20005728

0800881c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008828:	f7fe fd5e 	bl	80072e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800882c:	4b5c      	ldr	r3, [pc, #368]	@ (80089a0 <pvPortMalloc+0x184>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008834:	f000 f924 	bl	8008a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008838:	4b5a      	ldr	r3, [pc, #360]	@ (80089a4 <pvPortMalloc+0x188>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8095 	bne.w	8008970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01e      	beq.n	800888a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800884c:	2208      	movs	r2, #8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d015      	beq.n	800888a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f023 0307 	bic.w	r3, r3, #7
 8008864:	3308      	adds	r3, #8
 8008866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <pvPortMalloc+0x6e>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	617b      	str	r3, [r7, #20]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d06f      	beq.n	8008970 <pvPortMalloc+0x154>
 8008890:	4b45      	ldr	r3, [pc, #276]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d86a      	bhi.n	8008970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800889a:	4b44      	ldr	r3, [pc, #272]	@ (80089ac <pvPortMalloc+0x190>)
 800889c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800889e:	4b43      	ldr	r3, [pc, #268]	@ (80089ac <pvPortMalloc+0x190>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088a4:	e004      	b.n	80088b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d903      	bls.n	80088c2 <pvPortMalloc+0xa6>
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f1      	bne.n	80088a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088c2:	4b37      	ldr	r3, [pc, #220]	@ (80089a0 <pvPortMalloc+0x184>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d051      	beq.n	8008970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2208      	movs	r2, #8
 80088d2:	4413      	add	r3, r2
 80088d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	2308      	movs	r3, #8
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d920      	bls.n	8008930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <pvPortMalloc+0xfc>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800892a:	69b8      	ldr	r0, [r7, #24]
 800892c:	f000 f90a 	bl	8008b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008930:	4b1d      	ldr	r3, [pc, #116]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	4a1b      	ldr	r2, [pc, #108]	@ (80089a8 <pvPortMalloc+0x18c>)
 800893c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800893e:	4b1a      	ldr	r3, [pc, #104]	@ (80089a8 <pvPortMalloc+0x18c>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b1b      	ldr	r3, [pc, #108]	@ (80089b0 <pvPortMalloc+0x194>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d203      	bcs.n	8008952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800894a:	4b17      	ldr	r3, [pc, #92]	@ (80089a8 <pvPortMalloc+0x18c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <pvPortMalloc+0x194>)
 8008950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <pvPortMalloc+0x188>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	431a      	orrs	r2, r3
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008966:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <pvPortMalloc+0x198>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	4a11      	ldr	r2, [pc, #68]	@ (80089b4 <pvPortMalloc+0x198>)
 800896e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008970:	f7fe fcc8 	bl	8007304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <pvPortMalloc+0x17a>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	60fb      	str	r3, [r7, #12]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <pvPortMalloc+0x176>
	return pvReturn;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20009334 	.word	0x20009334
 80089a4:	20009348 	.word	0x20009348
 80089a8:	20009338 	.word	0x20009338
 80089ac:	2000932c 	.word	0x2000932c
 80089b0:	2000933c 	.word	0x2000933c
 80089b4:	20009340 	.word	0x20009340

080089b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d04f      	beq.n	8008a6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ca:	2308      	movs	r3, #8
 80089cc:	425b      	negs	r3, r3
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4413      	add	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b25      	ldr	r3, [pc, #148]	@ (8008a74 <vPortFree+0xbc>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4013      	ands	r3, r2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <vPortFree+0x46>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00b      	beq.n	8008a1e <vPortFree+0x66>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60bb      	str	r3, [r7, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4b14      	ldr	r3, [pc, #80]	@ (8008a74 <vPortFree+0xbc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4013      	ands	r3, r2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11a      	bne.n	8008a6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <vPortFree+0xbc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	401a      	ands	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a44:	f7fe fc50 	bl	80072e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <vPortFree+0xc0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4413      	add	r3, r2
 8008a52:	4a09      	ldr	r2, [pc, #36]	@ (8008a78 <vPortFree+0xc0>)
 8008a54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f000 f874 	bl	8008b44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <vPortFree+0xc4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	4a06      	ldr	r2, [pc, #24]	@ (8008a7c <vPortFree+0xc4>)
 8008a64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a66:	f7fe fc4d 	bl	8007304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20009348 	.word	0x20009348
 8008a78:	20009338 	.word	0x20009338
 8008a7c:	20009344 	.word	0x20009344

08008a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a8c:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <prvHeapInit+0xac>)
 8008a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3307      	adds	r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0307 	bic.w	r3, r3, #7
 8008aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	4a1f      	ldr	r2, [pc, #124]	@ (8008b2c <prvHeapInit+0xac>)
 8008ab0:	4413      	add	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b30 <prvHeapInit+0xb0>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008abe:	4b1c      	ldr	r3, [pc, #112]	@ (8008b30 <prvHeapInit+0xb0>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008acc:	2208      	movs	r2, #8
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0307 	bic.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <prvHeapInit+0xb4>)
 8008ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ae2:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <prvHeapInit+0xb4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008aea:	4b12      	ldr	r3, [pc, #72]	@ (8008b34 <prvHeapInit+0xb4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b00:	4b0c      	ldr	r3, [pc, #48]	@ (8008b34 <prvHeapInit+0xb4>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b38 <prvHeapInit+0xb8>)
 8008b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4a09      	ldr	r2, [pc, #36]	@ (8008b3c <prvHeapInit+0xbc>)
 8008b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b18:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <prvHeapInit+0xc0>)
 8008b1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b1e:	601a      	str	r2, [r3, #0]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	2000572c 	.word	0x2000572c
 8008b30:	2000932c 	.word	0x2000932c
 8008b34:	20009334 	.word	0x20009334
 8008b38:	2000933c 	.word	0x2000933c
 8008b3c:	20009338 	.word	0x20009338
 8008b40:	20009348 	.word	0x20009348

08008b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b4c:	4b28      	ldr	r3, [pc, #160]	@ (8008bf0 <prvInsertBlockIntoFreeList+0xac>)
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e002      	b.n	8008b58 <prvInsertBlockIntoFreeList+0x14>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d8f7      	bhi.n	8008b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d108      	bne.n	8008b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d118      	bne.n	8008bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b15      	ldr	r3, [pc, #84]	@ (8008bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d00d      	beq.n	8008bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	e008      	b.n	8008bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e003      	b.n	8008bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d002      	beq.n	8008be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	2000932c 	.word	0x2000932c
 8008bf4:	20009334 	.word	0x20009334

08008bf8 <_rclc_check_for_new_data>:
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d046      	beq.n	8008c8a <_rclc_check_for_new_data+0x92>
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	7802      	ldrb	r2, [r0, #0]
 8008c00:	b084      	sub	sp, #16
 8008c02:	4603      	mov	r3, r0
 8008c04:	2a0a      	cmp	r2, #10
 8008c06:	d842      	bhi.n	8008c8e <_rclc_check_for_new_data+0x96>
 8008c08:	e8df f002 	tbb	[pc, r2]
 8008c0c:	14181212 	.word	0x14181212
 8008c10:	06060614 	.word	0x06060614
 8008c14:	2e1a      	.short	0x2e1a
 8008c16:	16          	.byte	0x16
 8008c17:	00          	.byte	0x00
 8008c18:	6a0a      	ldr	r2, [r1, #32]
 8008c1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008c1c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008c20:	2000      	movs	r0, #0
 8008c22:	1a12      	subs	r2, r2, r0
 8008c24:	bf18      	it	ne
 8008c26:	2201      	movne	r2, #1
 8008c28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8008c2c:	b004      	add	sp, #16
 8008c2e:	bd10      	pop	{r4, pc}
 8008c30:	680a      	ldr	r2, [r1, #0]
 8008c32:	e7f2      	b.n	8008c1a <_rclc_check_for_new_data+0x22>
 8008c34:	698a      	ldr	r2, [r1, #24]
 8008c36:	e7f0      	b.n	8008c1a <_rclc_check_for_new_data+0x22>
 8008c38:	688a      	ldr	r2, [r1, #8]
 8008c3a:	e7ee      	b.n	8008c1a <_rclc_check_for_new_data+0x22>
 8008c3c:	690a      	ldr	r2, [r1, #16]
 8008c3e:	e7ec      	b.n	8008c1a <_rclc_check_for_new_data+0x22>
 8008c40:	685c      	ldr	r4, [r3, #4]
 8008c42:	4608      	mov	r0, r1
 8008c44:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8008c48:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8008c4c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8008c50:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8008c5a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8008c5e:	f104 0110 	add.w	r1, r4, #16
 8008c62:	f004 fa61 	bl	800d128 <rcl_action_client_wait_set_get_entities_ready>
 8008c66:	e7e1      	b.n	8008c2c <_rclc_check_for_new_data+0x34>
 8008c68:	685c      	ldr	r4, [r3, #4]
 8008c6a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8008c6e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8008c72:	e9cd 3200 	strd	r3, r2, [sp]
 8008c76:	4608      	mov	r0, r1
 8008c78:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8008c7c:	f104 0220 	add.w	r2, r4, #32
 8008c80:	f104 0110 	add.w	r1, r4, #16
 8008c84:	f004 fc68 	bl	800d558 <rcl_action_server_wait_set_get_entities_ready>
 8008c88:	e7d0      	b.n	8008c2c <_rclc_check_for_new_data+0x34>
 8008c8a:	200b      	movs	r0, #11
 8008c8c:	4770      	bx	lr
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e7cc      	b.n	8008c2c <_rclc_check_for_new_data+0x34>
 8008c92:	bf00      	nop

08008c94 <_rclc_take_new_data>:
 8008c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c96:	b09b      	sub	sp, #108	@ 0x6c
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f000 8088 	beq.w	8008dae <_rclc_take_new_data+0x11a>
 8008c9e:	7803      	ldrb	r3, [r0, #0]
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2b0a      	cmp	r3, #10
 8008ca4:	f200 8167 	bhi.w	8008f76 <_rclc_take_new_data+0x2e2>
 8008ca8:	e8df f003 	tbb	[pc, r3]
 8008cac:	44152d2d 	.word	0x44152d2d
 8008cb0:	19191944 	.word	0x19191944
 8008cb4:	065a      	.short	0x065a
 8008cb6:	15          	.byte	0x15
 8008cb7:	00          	.byte	0x00
 8008cb8:	6840      	ldr	r0, [r0, #4]
 8008cba:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f040 80b2 	bne.w	8008e28 <_rclc_take_new_data+0x194>
 8008cc4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f040 80e4 	bne.w	8008e96 <_rclc_take_new_data+0x202>
 8008cce:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d16f      	bne.n	8008db6 <_rclc_take_new_data+0x122>
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	4628      	mov	r0, r5
 8008cda:	b01b      	add	sp, #108	@ 0x6c
 8008cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cde:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008ce0:	6a0b      	ldr	r3, [r1, #32]
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0f5      	beq.n	8008cd6 <_rclc_take_new_data+0x42>
 8008cea:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8008cee:	f104 0110 	add.w	r1, r4, #16
 8008cf2:	f002 ff5f 	bl	800bbb4 <rcl_take_request>
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d0ec      	beq.n	8008cd6 <_rclc_take_new_data+0x42>
 8008cfc:	f240 2359 	movw	r3, #601	@ 0x259
 8008d00:	4298      	cmp	r0, r3
 8008d02:	d013      	beq.n	8008d2c <_rclc_take_new_data+0x98>
 8008d04:	e029      	b.n	8008d5a <_rclc_take_new_data+0xc6>
 8008d06:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008d08:	680b      	ldr	r3, [r1, #0]
 8008d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0e1      	beq.n	8008cd6 <_rclc_take_new_data+0x42>
 8008d12:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8008d16:	2300      	movs	r3, #0
 8008d18:	aa0a      	add	r2, sp, #40	@ 0x28
 8008d1a:	f003 f889 	bl	800be30 <rcl_take>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d0d9      	beq.n	8008cd8 <_rclc_take_new_data+0x44>
 8008d24:	f240 1391 	movw	r3, #401	@ 0x191
 8008d28:	4298      	cmp	r0, r3
 8008d2a:	d116      	bne.n	8008d5a <_rclc_take_new_data+0xc6>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8008d32:	e7d1      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008d34:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008d36:	698b      	ldr	r3, [r1, #24]
 8008d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0ca      	beq.n	8008cd6 <_rclc_take_new_data+0x42>
 8008d40:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8008d44:	f104 0110 	add.w	r1, r4, #16
 8008d48:	f002 fa12 	bl	800b170 <rcl_take_response>
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0c1      	beq.n	8008cd6 <_rclc_take_new_data+0x42>
 8008d52:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8008d56:	4298      	cmp	r0, r3
 8008d58:	d0be      	beq.n	8008cd8 <_rclc_take_new_data+0x44>
 8008d5a:	f000 fe61 	bl	8009a20 <rcutils_reset_error>
 8008d5e:	e7bb      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008d60:	6840      	ldr	r0, [r0, #4]
 8008d62:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d17d      	bne.n	8008e66 <_rclc_take_new_data+0x1d2>
 8008d6a:	69c3      	ldr	r3, [r0, #28]
 8008d6c:	b11b      	cbz	r3, 8008d76 <_rclc_take_new_data+0xe2>
 8008d6e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d144      	bne.n	8008e00 <_rclc_take_new_data+0x16c>
 8008d76:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f040 80ac 	bne.w	8008ed8 <_rclc_take_new_data+0x244>
 8008d80:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0a6      	beq.n	8008cd6 <_rclc_take_new_data+0x42>
 8008d88:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008d8a:	a90a      	add	r1, sp, #40	@ 0x28
 8008d8c:	3010      	adds	r0, #16
 8008d8e:	f004 f8a3 	bl	800ced8 <rcl_action_take_result_response>
 8008d92:	4605      	mov	r5, r0
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d1e0      	bne.n	8008d5a <_rclc_take_new_data+0xc6>
 8008d98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d9c:	6860      	ldr	r0, [r4, #4]
 8008d9e:	f004 fcff 	bl	800d7a0 <rclc_action_find_handle_by_result_request_sequence_number>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d098      	beq.n	8008cd8 <_rclc_take_new_data+0x44>
 8008da6:	2301      	movs	r3, #1
 8008da8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8008dac:	e794      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008dae:	250b      	movs	r5, #11
 8008db0:	4628      	mov	r0, r5
 8008db2:	b01b      	add	sp, #108	@ 0x6c
 8008db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db6:	ae04      	add	r6, sp, #16
 8008db8:	aa0a      	add	r2, sp, #40	@ 0x28
 8008dba:	3010      	adds	r0, #16
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	f004 faff 	bl	800d3c0 <rcl_action_take_cancel_request>
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d1c8      	bne.n	8008d5a <_rclc_take_new_data+0xc6>
 8008dc8:	6860      	ldr	r0, [r4, #4]
 8008dca:	a90a      	add	r1, sp, #40	@ 0x28
 8008dcc:	f004 fca6 	bl	800d71c <rclc_action_find_goal_handle_by_uuid>
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f000 80bb 	beq.w	8008f4e <_rclc_take_new_data+0x2ba>
 8008dd8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8008ddc:	2101      	movs	r1, #1
 8008dde:	f004 fc27 	bl	800d630 <rcl_action_transition_goal_state>
 8008de2:	2803      	cmp	r0, #3
 8008de4:	4684      	mov	ip, r0
 8008de6:	f040 80a7 	bne.w	8008f38 <_rclc_take_new_data+0x2a4>
 8008dea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008dec:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8008df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008df2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008df6:	e884 0003 	stmia.w	r4, {r0, r1}
 8008dfa:	f887 c008 	strb.w	ip, [r7, #8]
 8008dfe:	e76b      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008e00:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008e02:	3010      	adds	r0, #16
 8008e04:	f004 f8e8 	bl	800cfd8 <rcl_action_take_feedback>
 8008e08:	4605      	mov	r5, r0
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1a5      	bne.n	8008d5a <_rclc_take_new_data+0xc6>
 8008e0e:	6860      	ldr	r0, [r4, #4]
 8008e10:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008e12:	f004 fc83 	bl	800d71c <rclc_action_find_goal_handle_by_uuid>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f000 80a3 	beq.w	8008f64 <_rclc_take_new_data+0x2d0>
 8008e1e:	2201      	movs	r2, #1
 8008e20:	6860      	ldr	r0, [r4, #4]
 8008e22:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8008e26:	e7a6      	b.n	8008d76 <_rclc_take_new_data+0xe2>
 8008e28:	f004 fc52 	bl	800d6d0 <rclc_action_take_goal_handle>
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	6860      	ldr	r0, [r4, #4]
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	f43f af47 	beq.w	8008cc4 <_rclc_take_new_data+0x30>
 8008e36:	6070      	str	r0, [r6, #4]
 8008e38:	69f2      	ldr	r2, [r6, #28]
 8008e3a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8008e3e:	3010      	adds	r0, #16
 8008e40:	f004 fa06 	bl	800d250 <rcl_action_take_goal_request>
 8008e44:	4605      	mov	r5, r0
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f040 808e 	bne.w	8008f68 <_rclc_take_new_data+0x2d4>
 8008e4c:	69f7      	ldr	r7, [r6, #28]
 8008e4e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e50:	7235      	strb	r5, [r6, #8]
 8008e52:	f8c6 0009 	str.w	r0, [r6, #9]
 8008e56:	f8c6 100d 	str.w	r1, [r6, #13]
 8008e5a:	6860      	ldr	r0, [r4, #4]
 8008e5c:	f8c6 2011 	str.w	r2, [r6, #17]
 8008e60:	f8c6 3015 	str.w	r3, [r6, #21]
 8008e64:	e72e      	b.n	8008cc4 <_rclc_take_new_data+0x30>
 8008e66:	aa04      	add	r2, sp, #16
 8008e68:	a90a      	add	r1, sp, #40	@ 0x28
 8008e6a:	3010      	adds	r0, #16
 8008e6c:	f003 ffbc 	bl	800cde8 <rcl_action_take_goal_response>
 8008e70:	4605      	mov	r5, r0
 8008e72:	2800      	cmp	r0, #0
 8008e74:	f47f af71 	bne.w	8008d5a <_rclc_take_new_data+0xc6>
 8008e78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e7c:	6860      	ldr	r0, [r4, #4]
 8008e7e:	f004 fc7d 	bl	800d77c <rclc_action_find_handle_by_goal_request_sequence_number>
 8008e82:	b130      	cbz	r0, 8008e92 <_rclc_take_new_data+0x1fe>
 8008e84:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008e88:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f880 2020 	strb.w	r2, [r0, #32]
 8008e92:	6860      	ldr	r0, [r4, #4]
 8008e94:	e769      	b.n	8008d6a <_rclc_take_new_data+0xd6>
 8008e96:	aa04      	add	r2, sp, #16
 8008e98:	3010      	adds	r0, #16
 8008e9a:	a90a      	add	r1, sp, #40	@ 0x28
 8008e9c:	f004 fa50 	bl	800d340 <rcl_action_take_result_request>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f47f af59 	bne.w	8008d5a <_rclc_take_new_data+0xc6>
 8008ea8:	6860      	ldr	r0, [r4, #4]
 8008eaa:	a904      	add	r1, sp, #16
 8008eac:	f004 fc36 	bl	800d71c <rclc_action_find_goal_handle_by_uuid>
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	b160      	cbz	r0, 8008ece <_rclc_take_new_data+0x23a>
 8008eb4:	ad0a      	add	r5, sp, #40	@ 0x28
 8008eb6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8008eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ebc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008ebe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ec2:	f04f 0c02 	mov.w	ip, #2
 8008ec6:	e886 0003 	stmia.w	r6, {r0, r1}
 8008eca:	f887 c008 	strb.w	ip, [r7, #8]
 8008ece:	6860      	ldr	r0, [r4, #4]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8008ed6:	e6fa      	b.n	8008cce <_rclc_take_new_data+0x3a>
 8008ed8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8008edc:	a90a      	add	r1, sp, #40	@ 0x28
 8008ede:	3010      	adds	r0, #16
 8008ee0:	f004 f83a 	bl	800cf58 <rcl_action_take_cancel_response>
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f47f af37 	bne.w	8008d5a <_rclc_take_new_data+0xc6>
 8008eec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ef0:	6860      	ldr	r0, [r4, #4]
 8008ef2:	f004 fc67 	bl	800d7c4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	6860      	ldr	r0, [r4, #4]
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	f43f af40 	beq.w	8008d80 <_rclc_take_new_data+0xec>
 8008f00:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008f02:	2701      	movs	r7, #1
 8008f04:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f43f af3a 	beq.w	8008d80 <_rclc_take_new_data+0xec>
 8008f0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f0e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008f12:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008f16:	f004 fc01 	bl	800d71c <rclc_action_find_goal_handle_by_uuid>
 8008f1a:	b138      	cbz	r0, 8008f2c <_rclc_take_new_data+0x298>
 8008f1c:	6860      	ldr	r0, [r4, #4]
 8008f1e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008f20:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8008f24:	3501      	adds	r5, #1
 8008f26:	42ab      	cmp	r3, r5
 8008f28:	d8f0      	bhi.n	8008f0c <_rclc_take_new_data+0x278>
 8008f2a:	e729      	b.n	8008d80 <_rclc_take_new_data+0xec>
 8008f2c:	6860      	ldr	r0, [r4, #4]
 8008f2e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008f30:	3501      	adds	r5, #1
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	d8ea      	bhi.n	8008f0c <_rclc_take_new_data+0x278>
 8008f36:	e723      	b.n	8008d80 <_rclc_take_new_data+0xec>
 8008f38:	ab06      	add	r3, sp, #24
 8008f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f3c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008f40:	2103      	movs	r1, #3
 8008f42:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008f46:	6860      	ldr	r0, [r4, #4]
 8008f48:	f004 fcb2 	bl	800d8b0 <rclc_action_server_goal_cancel_reject>
 8008f4c:	e6c4      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008f4e:	ab06      	add	r3, sp, #24
 8008f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008f56:	2102      	movs	r1, #2
 8008f58:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008f5c:	6860      	ldr	r0, [r4, #4]
 8008f5e:	f004 fca7 	bl	800d8b0 <rclc_action_server_goal_cancel_reject>
 8008f62:	e6b9      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008f64:	6860      	ldr	r0, [r4, #4]
 8008f66:	e706      	b.n	8008d76 <_rclc_take_new_data+0xe2>
 8008f68:	6860      	ldr	r0, [r4, #4]
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	f004 fbc0 	bl	800d6f0 <rclc_action_remove_used_goal_handle>
 8008f70:	f000 fd56 	bl	8009a20 <rcutils_reset_error>
 8008f74:	e6b0      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008f76:	2501      	movs	r5, #1
 8008f78:	e6ae      	b.n	8008cd8 <_rclc_take_new_data+0x44>
 8008f7a:	bf00      	nop

08008f7c <_rclc_execute.part.0>:
 8008f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f7e:	7803      	ldrb	r3, [r0, #0]
 8008f80:	b087      	sub	sp, #28
 8008f82:	4604      	mov	r4, r0
 8008f84:	2b0a      	cmp	r3, #10
 8008f86:	f200 8136 	bhi.w	80091f6 <_rclc_execute.part.0+0x27a>
 8008f8a:	e8df f003 	tbb	[pc, r3]
 8008f8e:	435e      	.short	0x435e
 8008f90:	06a1664f 	.word	0x06a1664f
 8008f94:	6c1e0606 	.word	0x6c1e0606
 8008f98:	59          	.byte	0x59
 8008f99:	00          	.byte	0x00
 8008f9a:	2b06      	cmp	r3, #6
 8008f9c:	f000 8122 	beq.w	80091e4 <_rclc_execute.part.0+0x268>
 8008fa0:	2b07      	cmp	r3, #7
 8008fa2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008fa4:	f040 8118 	bne.w	80091d8 <_rclc_execute.part.0+0x25c>
 8008fa8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8008fac:	6880      	ldr	r0, [r0, #8]
 8008fae:	4798      	blx	r3
 8008fb0:	f104 0110 	add.w	r1, r4, #16
 8008fb4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008fb6:	6860      	ldr	r0, [r4, #4]
 8008fb8:	f002 fe3c 	bl	800bc34 <rcl_send_response>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d033      	beq.n	8009028 <_rclc_execute.part.0+0xac>
 8008fc0:	9005      	str	r0, [sp, #20]
 8008fc2:	f000 fd2d 	bl	8009a20 <rcutils_reset_error>
 8008fc6:	9805      	ldr	r0, [sp, #20]
 8008fc8:	e02e      	b.n	8009028 <_rclc_execute.part.0+0xac>
 8008fca:	6840      	ldr	r0, [r0, #4]
 8008fcc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8086 	beq.w	80090e2 <_rclc_execute.part.0+0x166>
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	2701      	movs	r7, #1
 8008fda:	e004      	b.n	8008fe6 <_rclc_execute.part.0+0x6a>
 8008fdc:	f004 fb52 	bl	800d684 <rclc_action_send_result_request>
 8008fe0:	b998      	cbnz	r0, 800900a <_rclc_execute.part.0+0x8e>
 8008fe2:	722f      	strb	r7, [r5, #8]
 8008fe4:	6860      	ldr	r0, [r4, #4]
 8008fe6:	f004 fbff 	bl	800d7e8 <rclc_action_find_first_handle_with_goal_response>
 8008fea:	4605      	mov	r5, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d077      	beq.n	80090e0 <_rclc_execute.part.0+0x164>
 8008ff0:	6863      	ldr	r3, [r4, #4]
 8008ff2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8008ffa:	f885 6020 	strb.w	r6, [r5, #32]
 8008ffe:	4798      	blx	r3
 8009000:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009004:	4628      	mov	r0, r5
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e8      	bne.n	8008fdc <_rclc_execute.part.0+0x60>
 800900a:	6860      	ldr	r0, [r4, #4]
 800900c:	4629      	mov	r1, r5
 800900e:	f004 fb6f 	bl	800d6f0 <rclc_action_remove_used_goal_handle>
 8009012:	e7e7      	b.n	8008fe4 <_rclc_execute.part.0+0x68>
 8009014:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009018:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800901c:	2d00      	cmp	r5, #0
 800901e:	f000 80c9 	beq.w	80091b4 <_rclc_execute.part.0+0x238>
 8009022:	6880      	ldr	r0, [r0, #8]
 8009024:	4798      	blx	r3
 8009026:	2000      	movs	r0, #0
 8009028:	b007      	add	sp, #28
 800902a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902c:	6840      	ldr	r0, [r0, #4]
 800902e:	f003 f803 	bl	800c038 <rcl_timer_call>
 8009032:	f240 3321 	movw	r3, #801	@ 0x321
 8009036:	4298      	cmp	r0, r3
 8009038:	d004      	beq.n	8009044 <_rclc_execute.part.0+0xc8>
 800903a:	2800      	cmp	r0, #0
 800903c:	d0f4      	beq.n	8009028 <_rclc_execute.part.0+0xac>
 800903e:	e7bf      	b.n	8008fc0 <_rclc_execute.part.0+0x44>
 8009040:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009042:	4798      	blx	r3
 8009044:	2000      	movs	r0, #0
 8009046:	b007      	add	sp, #28
 8009048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800904a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800904e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009050:	b925      	cbnz	r5, 800905c <_rclc_execute.part.0+0xe0>
 8009052:	4628      	mov	r0, r5
 8009054:	4798      	blx	r3
 8009056:	4628      	mov	r0, r5
 8009058:	e7e6      	b.n	8009028 <_rclc_execute.part.0+0xac>
 800905a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800905c:	68a0      	ldr	r0, [r4, #8]
 800905e:	4798      	blx	r3
 8009060:	2000      	movs	r0, #0
 8009062:	b007      	add	sp, #28
 8009064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009066:	6840      	ldr	r0, [r0, #4]
 8009068:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800906c:	bb3b      	cbnz	r3, 80090be <_rclc_execute.part.0+0x142>
 800906e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d07b      	beq.n	800916e <_rclc_execute.part.0+0x1f2>
 8009076:	f640 0634 	movw	r6, #2100	@ 0x834
 800907a:	2701      	movs	r7, #1
 800907c:	e007      	b.n	800908e <_rclc_execute.part.0+0x112>
 800907e:	4628      	mov	r0, r5
 8009080:	f004 fbca 	bl	800d818 <rclc_action_server_response_goal_request>
 8009084:	6860      	ldr	r0, [r4, #4]
 8009086:	4629      	mov	r1, r5
 8009088:	f004 fb32 	bl	800d6f0 <rclc_action_remove_used_goal_handle>
 800908c:	6860      	ldr	r0, [r4, #4]
 800908e:	2100      	movs	r1, #0
 8009090:	f004 fb5c 	bl	800d74c <rclc_action_find_first_handle_by_status>
 8009094:	4605      	mov	r5, r0
 8009096:	2800      	cmp	r0, #0
 8009098:	d066      	beq.n	8009168 <_rclc_execute.part.0+0x1ec>
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	4798      	blx	r3
 80090a2:	42b0      	cmp	r0, r6
 80090a4:	f04f 0100 	mov.w	r1, #0
 80090a8:	d1e9      	bne.n	800907e <_rclc_execute.part.0+0x102>
 80090aa:	2101      	movs	r1, #1
 80090ac:	4628      	mov	r0, r5
 80090ae:	f004 fbb3 	bl	800d818 <rclc_action_server_response_goal_request>
 80090b2:	722f      	strb	r7, [r5, #8]
 80090b4:	e7ea      	b.n	800908c <_rclc_execute.part.0+0x110>
 80090b6:	6848      	ldr	r0, [r1, #4]
 80090b8:	f004 fb1a 	bl	800d6f0 <rclc_action_remove_used_goal_handle>
 80090bc:	6860      	ldr	r0, [r4, #4]
 80090be:	f004 fb51 	bl	800d764 <rclc_action_find_first_terminated_handle>
 80090c2:	4601      	mov	r1, r0
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d1f6      	bne.n	80090b6 <_rclc_execute.part.0+0x13a>
 80090c8:	6860      	ldr	r0, [r4, #4]
 80090ca:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80090ce:	e7ce      	b.n	800906e <_rclc_execute.part.0+0xf2>
 80090d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80090d2:	6880      	ldr	r0, [r0, #8]
 80090d4:	f104 0110 	add.w	r1, r4, #16
 80090d8:	4798      	blx	r3
 80090da:	2000      	movs	r0, #0
 80090dc:	b007      	add	sp, #28
 80090de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e0:	6860      	ldr	r0, [r4, #4]
 80090e2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80090e6:	b18b      	cbz	r3, 800910c <_rclc_execute.part.0+0x190>
 80090e8:	68c5      	ldr	r5, [r0, #12]
 80090ea:	b32d      	cbz	r5, 8009138 <_rclc_execute.part.0+0x1bc>
 80090ec:	2600      	movs	r6, #0
 80090ee:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80090f2:	b143      	cbz	r3, 8009106 <_rclc_execute.part.0+0x18a>
 80090f4:	69c3      	ldr	r3, [r0, #28]
 80090f6:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80090fa:	b123      	cbz	r3, 8009106 <_rclc_execute.part.0+0x18a>
 80090fc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80090fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009100:	4628      	mov	r0, r5
 8009102:	4798      	blx	r3
 8009104:	6860      	ldr	r0, [r4, #4]
 8009106:	682d      	ldr	r5, [r5, #0]
 8009108:	2d00      	cmp	r5, #0
 800910a:	d1f0      	bne.n	80090ee <_rclc_execute.part.0+0x172>
 800910c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009110:	b193      	cbz	r3, 8009138 <_rclc_execute.part.0+0x1bc>
 8009112:	68c5      	ldr	r5, [r0, #12]
 8009114:	b185      	cbz	r5, 8009138 <_rclc_execute.part.0+0x1bc>
 8009116:	2600      	movs	r6, #0
 8009118:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800911c:	b14b      	cbz	r3, 8009132 <_rclc_execute.part.0+0x1b6>
 800911e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009120:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009124:	b12b      	cbz	r3, 8009132 <_rclc_execute.part.0+0x1b6>
 8009126:	4628      	mov	r0, r5
 8009128:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800912c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800912e:	4798      	blx	r3
 8009130:	6860      	ldr	r0, [r4, #4]
 8009132:	682d      	ldr	r5, [r5, #0]
 8009134:	2d00      	cmp	r5, #0
 8009136:	d1ef      	bne.n	8009118 <_rclc_execute.part.0+0x19c>
 8009138:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800913c:	2b00      	cmp	r3, #0
 800913e:	d081      	beq.n	8009044 <_rclc_execute.part.0+0xc8>
 8009140:	2700      	movs	r7, #0
 8009142:	e00b      	b.n	800915c <_rclc_execute.part.0+0x1e0>
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009148:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800914a:	6a1e      	ldr	r6, [r3, #32]
 800914c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009150:	47b0      	blx	r6
 8009152:	6860      	ldr	r0, [r4, #4]
 8009154:	4629      	mov	r1, r5
 8009156:	f004 facb 	bl	800d6f0 <rclc_action_remove_used_goal_handle>
 800915a:	6860      	ldr	r0, [r4, #4]
 800915c:	f004 fb50 	bl	800d800 <rclc_action_find_first_handle_with_result_response>
 8009160:	4605      	mov	r5, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d1ee      	bne.n	8009144 <_rclc_execute.part.0+0x1c8>
 8009166:	e76d      	b.n	8009044 <_rclc_execute.part.0+0xc8>
 8009168:	6860      	ldr	r0, [r4, #4]
 800916a:	f880 5020 	strb.w	r5, [r0, #32]
 800916e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009172:	2b00      	cmp	r3, #0
 8009174:	f43f af66 	beq.w	8009044 <_rclc_execute.part.0+0xc8>
 8009178:	68c5      	ldr	r5, [r0, #12]
 800917a:	b1b5      	cbz	r5, 80091aa <_rclc_execute.part.0+0x22e>
 800917c:	2602      	movs	r6, #2
 800917e:	e001      	b.n	8009184 <_rclc_execute.part.0+0x208>
 8009180:	682d      	ldr	r5, [r5, #0]
 8009182:	b195      	cbz	r5, 80091aa <_rclc_execute.part.0+0x22e>
 8009184:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d1f9      	bne.n	8009180 <_rclc_execute.part.0+0x204>
 800918c:	69c3      	ldr	r3, [r0, #28]
 800918e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009190:	4628      	mov	r0, r5
 8009192:	4798      	blx	r3
 8009194:	4603      	mov	r3, r0
 8009196:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800919a:	4628      	mov	r0, r5
 800919c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80091a0:	b163      	cbz	r3, 80091bc <_rclc_execute.part.0+0x240>
 80091a2:	f004 fb59 	bl	800d858 <rclc_action_server_goal_cancel_accept>
 80091a6:	6860      	ldr	r0, [r4, #4]
 80091a8:	e7ea      	b.n	8009180 <_rclc_execute.part.0+0x204>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80091b0:	4618      	mov	r0, r3
 80091b2:	e739      	b.n	8009028 <_rclc_execute.part.0+0xac>
 80091b4:	4628      	mov	r0, r5
 80091b6:	4798      	blx	r3
 80091b8:	4628      	mov	r0, r5
 80091ba:	e735      	b.n	8009028 <_rclc_execute.part.0+0xac>
 80091bc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80091be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80091c2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80091c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ca:	6860      	ldr	r0, [r4, #4]
 80091cc:	2101      	movs	r1, #1
 80091ce:	f004 fb6f 	bl	800d8b0 <rclc_action_server_goal_cancel_reject>
 80091d2:	722e      	strb	r6, [r5, #8]
 80091d4:	6860      	ldr	r0, [r4, #4]
 80091d6:	e7d3      	b.n	8009180 <_rclc_execute.part.0+0x204>
 80091d8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80091da:	6880      	ldr	r0, [r0, #8]
 80091dc:	4798      	blx	r3
 80091de:	f104 0110 	add.w	r1, r4, #16
 80091e2:	e6e7      	b.n	8008fb4 <_rclc_execute.part.0+0x38>
 80091e4:	f100 0110 	add.w	r1, r0, #16
 80091e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80091ea:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80091ec:	6880      	ldr	r0, [r0, #8]
 80091ee:	9105      	str	r1, [sp, #20]
 80091f0:	4798      	blx	r3
 80091f2:	9905      	ldr	r1, [sp, #20]
 80091f4:	e6de      	b.n	8008fb4 <_rclc_execute.part.0+0x38>
 80091f6:	2001      	movs	r0, #1
 80091f8:	e716      	b.n	8009028 <_rclc_execute.part.0+0xac>
 80091fa:	bf00      	nop

080091fc <rclc_executor_trigger_any>:
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d03f      	beq.n	8009280 <rclc_executor_trigger_any+0x84>
 8009200:	2900      	cmp	r1, #0
 8009202:	d03e      	beq.n	8009282 <rclc_executor_trigger_any+0x86>
 8009204:	4603      	mov	r3, r0
 8009206:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800920a:	2200      	movs	r2, #0
 800920c:	2800      	cmp	r0, #0
 800920e:	d037      	beq.n	8009280 <rclc_executor_trigger_any+0x84>
 8009210:	b430      	push	{r4, r5}
 8009212:	f893 c000 	ldrb.w	ip, [r3]
 8009216:	f1bc 0f08 	cmp.w	ip, #8
 800921a:	d11e      	bne.n	800925a <rclc_executor_trigger_any+0x5e>
 800921c:	685c      	ldr	r4, [r3, #4]
 800921e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009220:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009224:	d105      	bne.n	8009232 <rclc_executor_trigger_any+0x36>
 8009226:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800922a:	b910      	cbnz	r0, 8009232 <rclc_executor_trigger_any+0x36>
 800922c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009230:	b128      	cbz	r0, 800923e <rclc_executor_trigger_any+0x42>
 8009232:	bc30      	pop	{r4, r5}
 8009234:	4770      	bx	lr
 8009236:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800923a:	2800      	cmp	r0, #0
 800923c:	d1f9      	bne.n	8009232 <rclc_executor_trigger_any+0x36>
 800923e:	3201      	adds	r2, #1
 8009240:	4291      	cmp	r1, r2
 8009242:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009246:	d018      	beq.n	800927a <rclc_executor_trigger_any+0x7e>
 8009248:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800924c:	2800      	cmp	r0, #0
 800924e:	d0f0      	beq.n	8009232 <rclc_executor_trigger_any+0x36>
 8009250:	f893 c000 	ldrb.w	ip, [r3]
 8009254:	f1bc 0f08 	cmp.w	ip, #8
 8009258:	d0e0      	beq.n	800921c <rclc_executor_trigger_any+0x20>
 800925a:	f1bc 0f09 	cmp.w	ip, #9
 800925e:	d1ea      	bne.n	8009236 <rclc_executor_trigger_any+0x3a>
 8009260:	685c      	ldr	r4, [r3, #4]
 8009262:	6a25      	ldr	r5, [r4, #32]
 8009264:	2d00      	cmp	r5, #0
 8009266:	d1e4      	bne.n	8009232 <rclc_executor_trigger_any+0x36>
 8009268:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800926c:	2800      	cmp	r0, #0
 800926e:	d1e0      	bne.n	8009232 <rclc_executor_trigger_any+0x36>
 8009270:	3201      	adds	r2, #1
 8009272:	4291      	cmp	r1, r2
 8009274:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009278:	d1e6      	bne.n	8009248 <rclc_executor_trigger_any+0x4c>
 800927a:	2000      	movs	r0, #0
 800927c:	bc30      	pop	{r4, r5}
 800927e:	4770      	bx	lr
 8009280:	4770      	bx	lr
 8009282:	4608      	mov	r0, r1
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop

08009288 <rclc_executor_init>:
 8009288:	2800      	cmp	r0, #0
 800928a:	d05f      	beq.n	800934c <rclc_executor_init+0xc4>
 800928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	460c      	mov	r4, r1
 8009292:	b0b0      	sub	sp, #192	@ 0xc0
 8009294:	2900      	cmp	r1, #0
 8009296:	d051      	beq.n	800933c <rclc_executor_init+0xb4>
 8009298:	4605      	mov	r5, r0
 800929a:	4618      	mov	r0, r3
 800929c:	4616      	mov	r6, r2
 800929e:	461f      	mov	r7, r3
 80092a0:	f000 fb98 	bl	80099d4 <rcutils_allocator_is_valid>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d049      	beq.n	800933c <rclc_executor_init+0xb4>
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	d047      	beq.n	800933c <rclc_executor_init+0xb4>
 80092ac:	492c      	ldr	r1, [pc, #176]	@ (8009360 <rclc_executor_init+0xd8>)
 80092ae:	2288      	movs	r2, #136	@ 0x88
 80092b0:	a80e      	add	r0, sp, #56	@ 0x38
 80092b2:	f00c f81a 	bl	80152ea <memcpy>
 80092b6:	a90e      	add	r1, sp, #56	@ 0x38
 80092b8:	2288      	movs	r2, #136	@ 0x88
 80092ba:	4628      	mov	r0, r5
 80092bc:	f00c f815 	bl	80152ea <memcpy>
 80092c0:	602c      	str	r4, [r5, #0]
 80092c2:	4668      	mov	r0, sp
 80092c4:	60ae      	str	r6, [r5, #8]
 80092c6:	466c      	mov	r4, sp
 80092c8:	f002 ffbe 	bl	800c248 <rcl_get_zero_initialized_wait_set>
 80092cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092ce:	f105 0c14 	add.w	ip, r5, #20
 80092d2:	f8d7 8000 	ldr.w	r8, [r7]
 80092d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80092e6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009358 <rclc_executor_init+0xd0>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	f8cc 3000 	str.w	r3, [ip]
 80092f0:	6939      	ldr	r1, [r7, #16]
 80092f2:	612f      	str	r7, [r5, #16]
 80092f4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 80092f8:	01b0      	lsls	r0, r6, #6
 80092fa:	47c0      	blx	r8
 80092fc:	6068      	str	r0, [r5, #4]
 80092fe:	b338      	cbz	r0, 8009350 <rclc_executor_init+0xc8>
 8009300:	2400      	movs	r4, #0
 8009302:	e000      	b.n	8009306 <rclc_executor_init+0x7e>
 8009304:	6868      	ldr	r0, [r5, #4]
 8009306:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800930a:	4631      	mov	r1, r6
 800930c:	3401      	adds	r4, #1
 800930e:	f000 fa6b 	bl	80097e8 <rclc_executor_handle_init>
 8009312:	42a6      	cmp	r6, r4
 8009314:	d1f6      	bne.n	8009304 <rclc_executor_init+0x7c>
 8009316:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800931a:	f000 fa5b 	bl	80097d4 <rclc_executor_handle_counters_zero_init>
 800931e:	4a11      	ldr	r2, [pc, #68]	@ (8009364 <rclc_executor_init+0xdc>)
 8009320:	686b      	ldr	r3, [r5, #4]
 8009322:	2000      	movs	r0, #0
 8009324:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009328:	b163      	cbz	r3, 8009344 <rclc_executor_init+0xbc>
 800932a:	692b      	ldr	r3, [r5, #16]
 800932c:	b153      	cbz	r3, 8009344 <rclc_executor_init+0xbc>
 800932e:	68ab      	ldr	r3, [r5, #8]
 8009330:	b143      	cbz	r3, 8009344 <rclc_executor_init+0xbc>
 8009332:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009336:	b030      	add	sp, #192	@ 0xc0
 8009338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800933c:	200b      	movs	r0, #11
 800933e:	b030      	add	sp, #192	@ 0xc0
 8009340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009344:	4618      	mov	r0, r3
 8009346:	b030      	add	sp, #192	@ 0xc0
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934c:	200b      	movs	r0, #11
 800934e:	4770      	bx	lr
 8009350:	200a      	movs	r0, #10
 8009352:	e7f4      	b.n	800933e <rclc_executor_init+0xb6>
 8009354:	f3af 8000 	nop.w
 8009358:	3b9aca00 	.word	0x3b9aca00
 800935c:	00000000 	.word	0x00000000
 8009360:	08016150 	.word	0x08016150
 8009364:	080091fd 	.word	0x080091fd

08009368 <rclc_executor_add_subscription>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800936e:	b338      	cbz	r0, 80093c0 <rclc_executor_add_subscription+0x58>
 8009370:	b331      	cbz	r1, 80093c0 <rclc_executor_add_subscription+0x58>
 8009372:	b32a      	cbz	r2, 80093c0 <rclc_executor_add_subscription+0x58>
 8009374:	b323      	cbz	r3, 80093c0 <rclc_executor_add_subscription+0x58>
 8009376:	4604      	mov	r4, r0
 8009378:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800937c:	42a8      	cmp	r0, r5
 800937e:	d301      	bcc.n	8009384 <rclc_executor_add_subscription+0x1c>
 8009380:	2001      	movs	r0, #1
 8009382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009384:	6866      	ldr	r6, [r4, #4]
 8009386:	0187      	lsls	r7, r0, #6
 8009388:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800938c:	2500      	movs	r5, #0
 800938e:	55f5      	strb	r5, [r6, r7]
 8009390:	3001      	adds	r0, #1
 8009392:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009396:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800939a:	2301      	movs	r3, #1
 800939c:	f104 0514 	add.w	r5, r4, #20
 80093a0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 80093a4:	f88c e001 	strb.w	lr, [ip, #1]
 80093a8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 80093ac:	60e0      	str	r0, [r4, #12]
 80093ae:	4628      	mov	r0, r5
 80093b0:	f002 ff5e 	bl	800c270 <rcl_wait_set_is_valid>
 80093b4:	b930      	cbnz	r0, 80093c4 <rclc_executor_add_subscription+0x5c>
 80093b6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80093b8:	3301      	adds	r3, #1
 80093ba:	2000      	movs	r0, #0
 80093bc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80093be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c0:	200b      	movs	r0, #11
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c4:	4628      	mov	r0, r5
 80093c6:	f002 ff59 	bl	800c27c <rcl_wait_set_fini>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d0f3      	beq.n	80093b6 <rclc_executor_add_subscription+0x4e>
 80093ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093d0 <rclc_executor_prepare>:
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d044      	beq.n	800945e <rclc_executor_prepare+0x8e>
 80093d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093d6:	f100 0514 	add.w	r5, r0, #20
 80093da:	b09b      	sub	sp, #108	@ 0x6c
 80093dc:	4604      	mov	r4, r0
 80093de:	4628      	mov	r0, r5
 80093e0:	f002 ff46 	bl	800c270 <rcl_wait_set_is_valid>
 80093e4:	b110      	cbz	r0, 80093ec <rclc_executor_prepare+0x1c>
 80093e6:	2000      	movs	r0, #0
 80093e8:	b01b      	add	sp, #108	@ 0x6c
 80093ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ec:	4628      	mov	r0, r5
 80093ee:	f002 ff45 	bl	800c27c <rcl_wait_set_fini>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d130      	bne.n	8009458 <rclc_executor_prepare+0x88>
 80093f6:	a80c      	add	r0, sp, #48	@ 0x30
 80093f8:	f002 ff26 	bl	800c248 <rcl_get_zero_initialized_wait_set>
 80093fc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009400:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009404:	46ae      	mov	lr, r5
 8009406:	6927      	ldr	r7, [r4, #16]
 8009408:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800940c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009410:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009414:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009418:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800941c:	f8dc 3000 	ldr.w	r3, [ip]
 8009420:	f8ce 3000 	str.w	r3, [lr]
 8009424:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009426:	ae04      	add	r6, sp, #16
 8009428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	6033      	str	r3, [r6, #0]
 8009430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009432:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009434:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009438:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800943c:	e9cd 2100 	strd	r2, r1, [sp]
 8009440:	4628      	mov	r0, r5
 8009442:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009444:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009446:	f003 fa17 	bl	800c878 <rcl_wait_set_init>
 800944a:	2800      	cmp	r0, #0
 800944c:	d0cc      	beq.n	80093e8 <rclc_executor_prepare+0x18>
 800944e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009450:	f000 fae6 	bl	8009a20 <rcutils_reset_error>
 8009454:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009456:	e7c7      	b.n	80093e8 <rclc_executor_prepare+0x18>
 8009458:	f000 fae2 	bl	8009a20 <rcutils_reset_error>
 800945c:	e7cb      	b.n	80093f6 <rclc_executor_prepare+0x26>
 800945e:	200b      	movs	r0, #11
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop

08009464 <rclc_executor_spin_some.part.0>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	f100 0614 	add.w	r6, r0, #20
 800946c:	b083      	sub	sp, #12
 800946e:	4691      	mov	r9, r2
 8009470:	4698      	mov	r8, r3
 8009472:	4605      	mov	r5, r0
 8009474:	f7ff ffac 	bl	80093d0 <rclc_executor_prepare>
 8009478:	4630      	mov	r0, r6
 800947a:	f002 ffcb 	bl	800c414 <rcl_wait_set_clear>
 800947e:	4607      	mov	r7, r0
 8009480:	2800      	cmp	r0, #0
 8009482:	f040 80ed 	bne.w	8009660 <rclc_executor_spin_some.part.0+0x1fc>
 8009486:	68ab      	ldr	r3, [r5, #8]
 8009488:	4604      	mov	r4, r0
 800948a:	b303      	cbz	r3, 80094ce <rclc_executor_spin_some.part.0+0x6a>
 800948c:	6869      	ldr	r1, [r5, #4]
 800948e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009492:	01a2      	lsls	r2, r4, #6
 8009494:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009498:	b1cb      	cbz	r3, 80094ce <rclc_executor_spin_some.part.0+0x6a>
 800949a:	5c8b      	ldrb	r3, [r1, r2]
 800949c:	2b0a      	cmp	r3, #10
 800949e:	f200 80d8 	bhi.w	8009652 <rclc_executor_spin_some.part.0+0x1ee>
 80094a2:	e8df f003 	tbb	[pc, r3]
 80094a6:	9c9c      	.short	0x9c9c
 80094a8:	068c8ca7 	.word	0x068c8ca7
 80094ac:	bdc90606 	.word	0xbdc90606
 80094b0:	b2          	.byte	0xb2
 80094b1:	00          	.byte	0x00
 80094b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80094b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80094ba:	4630      	mov	r0, r6
 80094bc:	f003 faf2 	bl	800caa4 <rcl_wait_set_add_service>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f040 8086 	bne.w	80095d2 <rclc_executor_spin_some.part.0+0x16e>
 80094c6:	68ab      	ldr	r3, [r5, #8]
 80094c8:	3401      	adds	r4, #1
 80094ca:	429c      	cmp	r4, r3
 80094cc:	d3de      	bcc.n	800948c <rclc_executor_spin_some.part.0+0x28>
 80094ce:	4643      	mov	r3, r8
 80094d0:	464a      	mov	r2, r9
 80094d2:	4630      	mov	r0, r6
 80094d4:	f003 fb14 	bl	800cb00 <rcl_wait>
 80094d8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 80c7 	beq.w	8009670 <rclc_executor_spin_some.part.0+0x20c>
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	f040 80b5 	bne.w	8009652 <rclc_executor_spin_some.part.0+0x1ee>
 80094e8:	68ab      	ldr	r3, [r5, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 8159 	beq.w	80097a2 <rclc_executor_spin_some.part.0+0x33e>
 80094f0:	2400      	movs	r4, #0
 80094f2:	46a0      	mov	r8, r4
 80094f4:	f240 1991 	movw	r9, #401	@ 0x191
 80094f8:	e00a      	b.n	8009510 <rclc_executor_spin_some.part.0+0xac>
 80094fa:	f7ff fb7d 	bl	8008bf8 <_rclc_check_for_new_data>
 80094fe:	4604      	mov	r4, r0
 8009500:	b110      	cbz	r0, 8009508 <rclc_executor_spin_some.part.0+0xa4>
 8009502:	4548      	cmp	r0, r9
 8009504:	f040 80b2 	bne.w	800966c <rclc_executor_spin_some.part.0+0x208>
 8009508:	68ab      	ldr	r3, [r5, #8]
 800950a:	4598      	cmp	r8, r3
 800950c:	f080 8126 	bcs.w	800975c <rclc_executor_spin_some.part.0+0x2f8>
 8009510:	686a      	ldr	r2, [r5, #4]
 8009512:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009516:	4631      	mov	r1, r6
 8009518:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800951c:	f108 0801 	add.w	r8, r8, #1
 8009520:	f1bc 0f00 	cmp.w	ip, #0
 8009524:	d1e9      	bne.n	80094fa <rclc_executor_spin_some.part.0+0x96>
 8009526:	4619      	mov	r1, r3
 8009528:	4610      	mov	r0, r2
 800952a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800952e:	4798      	blx	r3
 8009530:	2800      	cmp	r0, #0
 8009532:	f000 809b 	beq.w	800966c <rclc_executor_spin_some.part.0+0x208>
 8009536:	68ab      	ldr	r3, [r5, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 8097 	beq.w	800966c <rclc_executor_spin_some.part.0+0x208>
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	f240 1991 	movw	r9, #401	@ 0x191
 8009546:	e009      	b.n	800955c <rclc_executor_spin_some.part.0+0xf8>
 8009548:	f7ff fba4 	bl	8008c94 <_rclc_take_new_data>
 800954c:	4604      	mov	r4, r0
 800954e:	b110      	cbz	r0, 8009556 <rclc_executor_spin_some.part.0+0xf2>
 8009550:	4548      	cmp	r0, r9
 8009552:	f040 808b 	bne.w	800966c <rclc_executor_spin_some.part.0+0x208>
 8009556:	68ab      	ldr	r3, [r5, #8]
 8009558:	4598      	cmp	r8, r3
 800955a:	d209      	bcs.n	8009570 <rclc_executor_spin_some.part.0+0x10c>
 800955c:	6868      	ldr	r0, [r5, #4]
 800955e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009562:	4631      	mov	r1, r6
 8009564:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009568:	f108 0801 	add.w	r8, r8, #1
 800956c:	2a00      	cmp	r2, #0
 800956e:	d1eb      	bne.n	8009548 <rclc_executor_spin_some.part.0+0xe4>
 8009570:	2600      	movs	r6, #0
 8009572:	b97b      	cbnz	r3, 8009594 <rclc_executor_spin_some.part.0+0x130>
 8009574:	e07a      	b.n	800966c <rclc_executor_spin_some.part.0+0x208>
 8009576:	f812 200c 	ldrb.w	r2, [r2, ip]
 800957a:	2a08      	cmp	r2, #8
 800957c:	f000 80fd 	beq.w	800977a <rclc_executor_spin_some.part.0+0x316>
 8009580:	2a09      	cmp	r2, #9
 8009582:	f000 80ef 	beq.w	8009764 <rclc_executor_spin_some.part.0+0x300>
 8009586:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800958a:	b98a      	cbnz	r2, 80095b0 <rclc_executor_spin_some.part.0+0x14c>
 800958c:	3601      	adds	r6, #1
 800958e:	429e      	cmp	r6, r3
 8009590:	d262      	bcs.n	8009658 <rclc_executor_spin_some.part.0+0x1f4>
 8009592:	2400      	movs	r4, #0
 8009594:	686a      	ldr	r2, [r5, #4]
 8009596:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800959a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800959e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 80095a2:	2900      	cmp	r1, #0
 80095a4:	d062      	beq.n	800966c <rclc_executor_spin_some.part.0+0x208>
 80095a6:	7841      	ldrb	r1, [r0, #1]
 80095a8:	2900      	cmp	r1, #0
 80095aa:	d0e4      	beq.n	8009576 <rclc_executor_spin_some.part.0+0x112>
 80095ac:	2901      	cmp	r1, #1
 80095ae:	d1ed      	bne.n	800958c <rclc_executor_spin_some.part.0+0x128>
 80095b0:	f7ff fce4 	bl	8008f7c <_rclc_execute.part.0>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f040 80b6 	bne.w	8009726 <rclc_executor_spin_some.part.0+0x2c2>
 80095ba:	68ab      	ldr	r3, [r5, #8]
 80095bc:	e7e6      	b.n	800958c <rclc_executor_spin_some.part.0+0x128>
 80095be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095c2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095c6:	4630      	mov	r0, r6
 80095c8:	f003 fa40 	bl	800ca4c <rcl_wait_set_add_client>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f43f af7a 	beq.w	80094c6 <rclc_executor_spin_some.part.0+0x62>
 80095d2:	9001      	str	r0, [sp, #4]
 80095d4:	f000 fa24 	bl	8009a20 <rcutils_reset_error>
 80095d8:	9801      	ldr	r0, [sp, #4]
 80095da:	4607      	mov	r7, r0
 80095dc:	e03c      	b.n	8009658 <rclc_executor_spin_some.part.0+0x1f4>
 80095de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095e6:	4630      	mov	r0, r6
 80095e8:	f002 fee8 	bl	800c3bc <rcl_wait_set_add_subscription>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f43f af6a 	beq.w	80094c6 <rclc_executor_spin_some.part.0+0x62>
 80095f2:	e7ee      	b.n	80095d2 <rclc_executor_spin_some.part.0+0x16e>
 80095f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80095f8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80095fc:	4630      	mov	r0, r6
 80095fe:	f003 f9f5 	bl	800c9ec <rcl_wait_set_add_timer>
 8009602:	2800      	cmp	r0, #0
 8009604:	f43f af5f 	beq.w	80094c6 <rclc_executor_spin_some.part.0+0x62>
 8009608:	e7e3      	b.n	80095d2 <rclc_executor_spin_some.part.0+0x16e>
 800960a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800960e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009612:	4630      	mov	r0, r6
 8009614:	f003 f9be 	bl	800c994 <rcl_wait_set_add_guard_condition>
 8009618:	2800      	cmp	r0, #0
 800961a:	f43f af54 	beq.w	80094c6 <rclc_executor_spin_some.part.0+0x62>
 800961e:	e7d8      	b.n	80095d2 <rclc_executor_spin_some.part.0+0x16e>
 8009620:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009624:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009628:	3110      	adds	r1, #16
 800962a:	4630      	mov	r0, r6
 800962c:	f003 ff40 	bl	800d4b0 <rcl_action_wait_set_add_action_server>
 8009630:	2800      	cmp	r0, #0
 8009632:	f43f af48 	beq.w	80094c6 <rclc_executor_spin_some.part.0+0x62>
 8009636:	e7cc      	b.n	80095d2 <rclc_executor_spin_some.part.0+0x16e>
 8009638:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800963c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009640:	3110      	adds	r1, #16
 8009642:	2300      	movs	r3, #0
 8009644:	4630      	mov	r0, r6
 8009646:	f003 fd0b 	bl	800d060 <rcl_action_wait_set_add_action_client>
 800964a:	2800      	cmp	r0, #0
 800964c:	f43f af3b 	beq.w	80094c6 <rclc_executor_spin_some.part.0+0x62>
 8009650:	e7bf      	b.n	80095d2 <rclc_executor_spin_some.part.0+0x16e>
 8009652:	f000 f9e5 	bl	8009a20 <rcutils_reset_error>
 8009656:	2701      	movs	r7, #1
 8009658:	4638      	mov	r0, r7
 800965a:	b003      	add	sp, #12
 800965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009660:	f000 f9de 	bl	8009a20 <rcutils_reset_error>
 8009664:	4638      	mov	r0, r7
 8009666:	b003      	add	sp, #12
 8009668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	4627      	mov	r7, r4
 800966e:	e7f3      	b.n	8009658 <rclc_executor_spin_some.part.0+0x1f4>
 8009670:	68ab      	ldr	r3, [r5, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8092 	beq.w	800979c <rclc_executor_spin_some.part.0+0x338>
 8009678:	2400      	movs	r4, #0
 800967a:	46a0      	mov	r8, r4
 800967c:	f240 1991 	movw	r9, #401	@ 0x191
 8009680:	e008      	b.n	8009694 <rclc_executor_spin_some.part.0+0x230>
 8009682:	f7ff fab9 	bl	8008bf8 <_rclc_check_for_new_data>
 8009686:	4604      	mov	r4, r0
 8009688:	b108      	cbz	r0, 800968e <rclc_executor_spin_some.part.0+0x22a>
 800968a:	4548      	cmp	r0, r9
 800968c:	d1ee      	bne.n	800966c <rclc_executor_spin_some.part.0+0x208>
 800968e:	68ab      	ldr	r3, [r5, #8]
 8009690:	4598      	cmp	r8, r3
 8009692:	d265      	bcs.n	8009760 <rclc_executor_spin_some.part.0+0x2fc>
 8009694:	686a      	ldr	r2, [r5, #4]
 8009696:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800969a:	4631      	mov	r1, r6
 800969c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80096a0:	f108 0801 	add.w	r8, r8, #1
 80096a4:	f1bc 0f00 	cmp.w	ip, #0
 80096a8:	d1eb      	bne.n	8009682 <rclc_executor_spin_some.part.0+0x21e>
 80096aa:	4619      	mov	r1, r3
 80096ac:	4610      	mov	r0, r2
 80096ae:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80096b2:	4798      	blx	r3
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d0d9      	beq.n	800966c <rclc_executor_spin_some.part.0+0x208>
 80096b8:	68ab      	ldr	r3, [r5, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0d6      	beq.n	800966c <rclc_executor_spin_some.part.0+0x208>
 80096be:	f04f 0800 	mov.w	r8, #0
 80096c2:	f240 1991 	movw	r9, #401	@ 0x191
 80096c6:	f240 2a59 	movw	sl, #601	@ 0x259
 80096ca:	e00e      	b.n	80096ea <rclc_executor_spin_some.part.0+0x286>
 80096cc:	f813 300b 	ldrb.w	r3, [r3, fp]
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d033      	beq.n	800973c <rclc_executor_spin_some.part.0+0x2d8>
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d028      	beq.n	800972a <rclc_executor_spin_some.part.0+0x2c6>
 80096d8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80096dc:	b9fb      	cbnz	r3, 800971e <rclc_executor_spin_some.part.0+0x2ba>
 80096de:	68ab      	ldr	r3, [r5, #8]
 80096e0:	f108 0801 	add.w	r8, r8, #1
 80096e4:	4598      	cmp	r8, r3
 80096e6:	d2b7      	bcs.n	8009658 <rclc_executor_spin_some.part.0+0x1f4>
 80096e8:	2400      	movs	r4, #0
 80096ea:	6868      	ldr	r0, [r5, #4]
 80096ec:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80096f0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80096f4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0b7      	beq.n	800966c <rclc_executor_spin_some.part.0+0x208>
 80096fc:	4631      	mov	r1, r6
 80096fe:	f7ff fac9 	bl	8008c94 <_rclc_take_new_data>
 8009702:	b118      	cbz	r0, 800970c <rclc_executor_spin_some.part.0+0x2a8>
 8009704:	4548      	cmp	r0, r9
 8009706:	d001      	beq.n	800970c <rclc_executor_spin_some.part.0+0x2a8>
 8009708:	4550      	cmp	r0, sl
 800970a:	d10c      	bne.n	8009726 <rclc_executor_spin_some.part.0+0x2c2>
 800970c:	686b      	ldr	r3, [r5, #4]
 800970e:	eb13 000b 	adds.w	r0, r3, fp
 8009712:	d021      	beq.n	8009758 <rclc_executor_spin_some.part.0+0x2f4>
 8009714:	7842      	ldrb	r2, [r0, #1]
 8009716:	2a00      	cmp	r2, #0
 8009718:	d0d8      	beq.n	80096cc <rclc_executor_spin_some.part.0+0x268>
 800971a:	2a01      	cmp	r2, #1
 800971c:	d1df      	bne.n	80096de <rclc_executor_spin_some.part.0+0x27a>
 800971e:	f7ff fc2d 	bl	8008f7c <_rclc_execute.part.0>
 8009722:	2800      	cmp	r0, #0
 8009724:	d0db      	beq.n	80096de <rclc_executor_spin_some.part.0+0x27a>
 8009726:	4607      	mov	r7, r0
 8009728:	e796      	b.n	8009658 <rclc_executor_spin_some.part.0+0x1f4>
 800972a:	6843      	ldr	r3, [r0, #4]
 800972c:	6a1a      	ldr	r2, [r3, #32]
 800972e:	2a00      	cmp	r2, #0
 8009730:	d1f5      	bne.n	800971e <rclc_executor_spin_some.part.0+0x2ba>
 8009732:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0d1      	beq.n	80096de <rclc_executor_spin_some.part.0+0x27a>
 800973a:	e7f0      	b.n	800971e <rclc_executor_spin_some.part.0+0x2ba>
 800973c:	6843      	ldr	r3, [r0, #4]
 800973e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009740:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8009744:	d1eb      	bne.n	800971e <rclc_executor_spin_some.part.0+0x2ba>
 8009746:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800974a:	2a00      	cmp	r2, #0
 800974c:	d1e7      	bne.n	800971e <rclc_executor_spin_some.part.0+0x2ba>
 800974e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0c3      	beq.n	80096de <rclc_executor_spin_some.part.0+0x27a>
 8009756:	e7e2      	b.n	800971e <rclc_executor_spin_some.part.0+0x2ba>
 8009758:	270b      	movs	r7, #11
 800975a:	e77d      	b.n	8009658 <rclc_executor_spin_some.part.0+0x1f4>
 800975c:	686a      	ldr	r2, [r5, #4]
 800975e:	e6e2      	b.n	8009526 <rclc_executor_spin_some.part.0+0xc2>
 8009760:	686a      	ldr	r2, [r5, #4]
 8009762:	e7a2      	b.n	80096aa <rclc_executor_spin_some.part.0+0x246>
 8009764:	6842      	ldr	r2, [r0, #4]
 8009766:	6a11      	ldr	r1, [r2, #32]
 8009768:	2900      	cmp	r1, #0
 800976a:	f47f af21 	bne.w	80095b0 <rclc_executor_spin_some.part.0+0x14c>
 800976e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009772:	2a00      	cmp	r2, #0
 8009774:	f43f af0a 	beq.w	800958c <rclc_executor_spin_some.part.0+0x128>
 8009778:	e71a      	b.n	80095b0 <rclc_executor_spin_some.part.0+0x14c>
 800977a:	6842      	ldr	r2, [r0, #4]
 800977c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800977e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8009782:	f47f af15 	bne.w	80095b0 <rclc_executor_spin_some.part.0+0x14c>
 8009786:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800978a:	2900      	cmp	r1, #0
 800978c:	f47f af10 	bne.w	80095b0 <rclc_executor_spin_some.part.0+0x14c>
 8009790:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8009794:	2a00      	cmp	r2, #0
 8009796:	f43f aef9 	beq.w	800958c <rclc_executor_spin_some.part.0+0x128>
 800979a:	e709      	b.n	80095b0 <rclc_executor_spin_some.part.0+0x14c>
 800979c:	686a      	ldr	r2, [r5, #4]
 800979e:	461c      	mov	r4, r3
 80097a0:	e783      	b.n	80096aa <rclc_executor_spin_some.part.0+0x246>
 80097a2:	686a      	ldr	r2, [r5, #4]
 80097a4:	461c      	mov	r4, r3
 80097a6:	e6be      	b.n	8009526 <rclc_executor_spin_some.part.0+0xc2>

080097a8 <rclc_executor_spin_some>:
 80097a8:	b190      	cbz	r0, 80097d0 <rclc_executor_spin_some+0x28>
 80097aa:	b570      	push	{r4, r5, r6, lr}
 80097ac:	4604      	mov	r4, r0
 80097ae:	6800      	ldr	r0, [r0, #0]
 80097b0:	4616      	mov	r6, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	f001 fd38 	bl	800b228 <rcl_context_is_valid>
 80097b8:	b130      	cbz	r0, 80097c8 <rclc_executor_spin_some+0x20>
 80097ba:	4632      	mov	r2, r6
 80097bc:	462b      	mov	r3, r5
 80097be:	4620      	mov	r0, r4
 80097c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097c4:	f7ff be4e 	b.w	8009464 <rclc_executor_spin_some.part.0>
 80097c8:	f000 f92a 	bl	8009a20 <rcutils_reset_error>
 80097cc:	2001      	movs	r0, #1
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	200b      	movs	r0, #11
 80097d2:	4770      	bx	lr

080097d4 <rclc_executor_handle_counters_zero_init>:
 80097d4:	b130      	cbz	r0, 80097e4 <rclc_executor_handle_counters_zero_init+0x10>
 80097d6:	b508      	push	{r3, lr}
 80097d8:	2220      	movs	r2, #32
 80097da:	2100      	movs	r1, #0
 80097dc:	f00b fcbc 	bl	8015158 <memset>
 80097e0:	2000      	movs	r0, #0
 80097e2:	bd08      	pop	{r3, pc}
 80097e4:	200b      	movs	r0, #11
 80097e6:	4770      	bx	lr

080097e8 <rclc_executor_handle_init>:
 80097e8:	b168      	cbz	r0, 8009806 <rclc_executor_handle_init+0x1e>
 80097ea:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009810 <rclc_executor_handle_init+0x28>
 80097ee:	2300      	movs	r3, #0
 80097f0:	220b      	movs	r2, #11
 80097f2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 80097f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80097fa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80097fe:	8002      	strh	r2, [r0, #0]
 8009800:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009802:	4618      	mov	r0, r3
 8009804:	4770      	bx	lr
 8009806:	200b      	movs	r0, #11
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
	...

08009818 <rclc_support_init>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	b3b8      	cbz	r0, 8009890 <rclc_support_init+0x78>
 8009820:	461c      	mov	r4, r3
 8009822:	b3ab      	cbz	r3, 8009890 <rclc_support_init+0x78>
 8009824:	460f      	mov	r7, r1
 8009826:	4690      	mov	r8, r2
 8009828:	4606      	mov	r6, r0
 800982a:	f001 fe51 	bl	800b4d0 <rcl_get_zero_initialized_init_options>
 800982e:	f104 030c 	add.w	r3, r4, #12
 8009832:	9005      	str	r0, [sp, #20]
 8009834:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009838:	e88d 0003 	stmia.w	sp, {r0, r1}
 800983c:	a805      	add	r0, sp, #20
 800983e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009842:	f001 fe47 	bl	800b4d4 <rcl_init_options_init>
 8009846:	4605      	mov	r5, r0
 8009848:	b9e0      	cbnz	r0, 8009884 <rclc_support_init+0x6c>
 800984a:	ad02      	add	r5, sp, #8
 800984c:	4628      	mov	r0, r5
 800984e:	f001 fce1 	bl	800b214 <rcl_get_zero_initialized_context>
 8009852:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009856:	4633      	mov	r3, r6
 8009858:	e886 0003 	stmia.w	r6, {r0, r1}
 800985c:	aa05      	add	r2, sp, #20
 800985e:	4641      	mov	r1, r8
 8009860:	4638      	mov	r0, r7
 8009862:	f001 fd47 	bl	800b2f4 <rcl_init>
 8009866:	4605      	mov	r5, r0
 8009868:	b9b8      	cbnz	r0, 800989a <rclc_support_init+0x82>
 800986a:	60b4      	str	r4, [r6, #8]
 800986c:	4622      	mov	r2, r4
 800986e:	f106 010c 	add.w	r1, r6, #12
 8009872:	2003      	movs	r0, #3
 8009874:	f002 fb5c 	bl	800bf30 <rcl_clock_init>
 8009878:	4605      	mov	r5, r0
 800987a:	b970      	cbnz	r0, 800989a <rclc_support_init+0x82>
 800987c:	a805      	add	r0, sp, #20
 800987e:	f001 fe8f 	bl	800b5a0 <rcl_init_options_fini>
 8009882:	b108      	cbz	r0, 8009888 <rclc_support_init+0x70>
 8009884:	f000 f8cc 	bl	8009a20 <rcutils_reset_error>
 8009888:	4628      	mov	r0, r5
 800988a:	b006      	add	sp, #24
 800988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009890:	250b      	movs	r5, #11
 8009892:	4628      	mov	r0, r5
 8009894:	b006      	add	sp, #24
 8009896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989a:	f000 f8c1 	bl	8009a20 <rcutils_reset_error>
 800989e:	a805      	add	r0, sp, #20
 80098a0:	f001 fe7e 	bl	800b5a0 <rcl_init_options_fini>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d0ef      	beq.n	8009888 <rclc_support_init+0x70>
 80098a8:	e7ec      	b.n	8009884 <rclc_support_init+0x6c>
 80098aa:	bf00      	nop

080098ac <rclc_node_init_default>:
 80098ac:	b3b8      	cbz	r0, 800991e <rclc_node_init_default+0x72>
 80098ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098b2:	460d      	mov	r5, r1
 80098b4:	b0a1      	sub	sp, #132	@ 0x84
 80098b6:	b329      	cbz	r1, 8009904 <rclc_node_init_default+0x58>
 80098b8:	4616      	mov	r6, r2
 80098ba:	b31a      	cbz	r2, 8009904 <rclc_node_init_default+0x58>
 80098bc:	461f      	mov	r7, r3
 80098be:	b30b      	cbz	r3, 8009904 <rclc_node_init_default+0x58>
 80098c0:	f10d 0810 	add.w	r8, sp, #16
 80098c4:	4604      	mov	r4, r0
 80098c6:	4640      	mov	r0, r8
 80098c8:	f001 ff22 	bl	800b710 <rcl_get_zero_initialized_node>
 80098cc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80098d0:	f10d 0918 	add.w	r9, sp, #24
 80098d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80098d8:	4648      	mov	r0, r9
 80098da:	f002 f891 	bl	800ba00 <rcl_node_get_default_options>
 80098de:	4640      	mov	r0, r8
 80098e0:	f001 ff16 	bl	800b710 <rcl_get_zero_initialized_node>
 80098e4:	f8cd 9000 	str.w	r9, [sp]
 80098e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80098ec:	463b      	mov	r3, r7
 80098ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80098f2:	4632      	mov	r2, r6
 80098f4:	4629      	mov	r1, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	f001 ff14 	bl	800b724 <rcl_node_init>
 80098fc:	b930      	cbnz	r0, 800990c <rclc_node_init_default+0x60>
 80098fe:	b021      	add	sp, #132	@ 0x84
 8009900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009904:	200b      	movs	r0, #11
 8009906:	b021      	add	sp, #132	@ 0x84
 8009908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800990c:	9003      	str	r0, [sp, #12]
 800990e:	f000 f887 	bl	8009a20 <rcutils_reset_error>
 8009912:	f000 f885 	bl	8009a20 <rcutils_reset_error>
 8009916:	9803      	ldr	r0, [sp, #12]
 8009918:	b021      	add	sp, #132	@ 0x84
 800991a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800991e:	200b      	movs	r0, #11
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop

08009924 <rclc_subscription_init_default>:
 8009924:	b368      	cbz	r0, 8009982 <rclc_subscription_init_default+0x5e>
 8009926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	460d      	mov	r5, r1
 800992c:	b0a0      	sub	sp, #128	@ 0x80
 800992e:	b321      	cbz	r1, 800997a <rclc_subscription_init_default+0x56>
 8009930:	4616      	mov	r6, r2
 8009932:	b312      	cbz	r2, 800997a <rclc_subscription_init_default+0x56>
 8009934:	461f      	mov	r7, r3
 8009936:	b303      	cbz	r3, 800997a <rclc_subscription_init_default+0x56>
 8009938:	4604      	mov	r4, r0
 800993a:	f002 f99d 	bl	800bc78 <rcl_get_zero_initialized_subscription>
 800993e:	f10d 0810 	add.w	r8, sp, #16
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	4640      	mov	r0, r8
 8009946:	f002 fa45 	bl	800bdd4 <rcl_subscription_get_default_options>
 800994a:	490f      	ldr	r1, [pc, #60]	@ (8009988 <rclc_subscription_init_default+0x64>)
 800994c:	2250      	movs	r2, #80	@ 0x50
 800994e:	4640      	mov	r0, r8
 8009950:	f00b fccb 	bl	80152ea <memcpy>
 8009954:	f8cd 8000 	str.w	r8, [sp]
 8009958:	463b      	mov	r3, r7
 800995a:	4632      	mov	r2, r6
 800995c:	4629      	mov	r1, r5
 800995e:	4620      	mov	r0, r4
 8009960:	f002 f990 	bl	800bc84 <rcl_subscription_init>
 8009964:	b910      	cbnz	r0, 800996c <rclc_subscription_init_default+0x48>
 8009966:	b020      	add	sp, #128	@ 0x80
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	9003      	str	r0, [sp, #12]
 800996e:	f000 f857 	bl	8009a20 <rcutils_reset_error>
 8009972:	9803      	ldr	r0, [sp, #12]
 8009974:	b020      	add	sp, #128	@ 0x80
 8009976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800997a:	200b      	movs	r0, #11
 800997c:	b020      	add	sp, #128	@ 0x80
 800997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009982:	200b      	movs	r0, #11
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	080161d8 	.word	0x080161d8

0800998c <__default_zero_allocate>:
 800998c:	f00b b80c 	b.w	80149a8 <calloc>

08009990 <__default_reallocate>:
 8009990:	f00b b998 	b.w	8014cc4 <realloc>

08009994 <__default_deallocate>:
 8009994:	f00b b874 	b.w	8014a80 <free>

08009998 <__default_allocate>:
 8009998:	f00b b86a 	b.w	8014a70 <malloc>

0800999c <rcutils_get_zero_initialized_allocator>:
 800999c:	b510      	push	{r4, lr}
 800999e:	4c05      	ldr	r4, [pc, #20]	@ (80099b4 <rcutils_get_zero_initialized_allocator+0x18>)
 80099a0:	4686      	mov	lr, r0
 80099a2:	4684      	mov	ip, r0
 80099a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	f8cc 3000 	str.w	r3, [ip]
 80099b0:	4670      	mov	r0, lr
 80099b2:	bd10      	pop	{r4, pc}
 80099b4:	08016228 	.word	0x08016228

080099b8 <rcutils_get_default_allocator>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	4c05      	ldr	r4, [pc, #20]	@ (80099d0 <rcutils_get_default_allocator+0x18>)
 80099bc:	4686      	mov	lr, r0
 80099be:	4684      	mov	ip, r0
 80099c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	f8cc 3000 	str.w	r3, [ip]
 80099cc:	4670      	mov	r0, lr
 80099ce:	bd10      	pop	{r4, pc}
 80099d0:	2000004c 	.word	0x2000004c

080099d4 <rcutils_allocator_is_valid>:
 80099d4:	b158      	cbz	r0, 80099ee <rcutils_allocator_is_valid+0x1a>
 80099d6:	6803      	ldr	r3, [r0, #0]
 80099d8:	b143      	cbz	r3, 80099ec <rcutils_allocator_is_valid+0x18>
 80099da:	6843      	ldr	r3, [r0, #4]
 80099dc:	b133      	cbz	r3, 80099ec <rcutils_allocator_is_valid+0x18>
 80099de:	68c3      	ldr	r3, [r0, #12]
 80099e0:	b123      	cbz	r3, 80099ec <rcutils_allocator_is_valid+0x18>
 80099e2:	6880      	ldr	r0, [r0, #8]
 80099e4:	3800      	subs	r0, #0
 80099e6:	bf18      	it	ne
 80099e8:	2001      	movne	r0, #1
 80099ea:	4770      	bx	lr
 80099ec:	4618      	mov	r0, r3
 80099ee:	4770      	bx	lr

080099f0 <rcutils_get_error_string>:
 80099f0:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <rcutils_get_error_string+0x1c>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	b13b      	cbz	r3, 8009a06 <rcutils_get_error_string+0x16>
 80099f6:	4b06      	ldr	r3, [pc, #24]	@ (8009a10 <rcutils_get_error_string+0x20>)
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	b90a      	cbnz	r2, 8009a00 <rcutils_get_error_string+0x10>
 80099fc:	2201      	movs	r2, #1
 80099fe:	701a      	strb	r2, [r3, #0]
 8009a00:	4b04      	ldr	r3, [pc, #16]	@ (8009a14 <rcutils_get_error_string+0x24>)
 8009a02:	7818      	ldrb	r0, [r3, #0]
 8009a04:	4770      	bx	lr
 8009a06:	4b04      	ldr	r3, [pc, #16]	@ (8009a18 <rcutils_get_error_string+0x28>)
 8009a08:	7818      	ldrb	r0, [r3, #0]
 8009a0a:	4770      	bx	lr
 8009a0c:	2000934c 	.word	0x2000934c
 8009a10:	20009361 	.word	0x20009361
 8009a14:	20009360 	.word	0x20009360
 8009a18:	0801623c 	.word	0x0801623c
 8009a1c:	00000000 	.word	0x00000000

08009a20 <rcutils_reset_error>:
 8009a20:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009a40 <rcutils_reset_error+0x20>
 8009a24:	4a08      	ldr	r2, [pc, #32]	@ (8009a48 <rcutils_reset_error+0x28>)
 8009a26:	4809      	ldr	r0, [pc, #36]	@ (8009a4c <rcutils_reset_error+0x2c>)
 8009a28:	4909      	ldr	r1, [pc, #36]	@ (8009a50 <rcutils_reset_error+0x30>)
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	8013      	strh	r3, [r2, #0]
 8009a2e:	ed82 7b02 	vstr	d7, [r2, #8]
 8009a32:	4a08      	ldr	r2, [pc, #32]	@ (8009a54 <rcutils_reset_error+0x34>)
 8009a34:	7003      	strb	r3, [r0, #0]
 8009a36:	700b      	strb	r3, [r1, #0]
 8009a38:	7013      	strb	r3, [r2, #0]
 8009a3a:	4770      	bx	lr
 8009a3c:	f3af 8000 	nop.w
	...
 8009a48:	20009350 	.word	0x20009350
 8009a4c:	20009361 	.word	0x20009361
 8009a50:	20009360 	.word	0x20009360
 8009a54:	2000934c 	.word	0x2000934c

08009a58 <rcutils_system_time_now>:
 8009a58:	b308      	cbz	r0, 8009a9e <rcutils_system_time_now+0x46>
 8009a5a:	b570      	push	{r4, r5, r6, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4669      	mov	r1, sp
 8009a62:	2001      	movs	r0, #1
 8009a64:	f7f8 f984 	bl	8001d70 <clock_gettime>
 8009a68:	e9dd 3500 	ldrd	r3, r5, [sp]
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	db13      	blt.n	8009a98 <rcutils_system_time_now+0x40>
 8009a70:	9902      	ldr	r1, [sp, #8]
 8009a72:	2900      	cmp	r1, #0
 8009a74:	db0d      	blt.n	8009a92 <rcutils_system_time_now+0x3a>
 8009a76:	4e0b      	ldr	r6, [pc, #44]	@ (8009aa4 <rcutils_system_time_now+0x4c>)
 8009a78:	fba3 3206 	umull	r3, r2, r3, r6
 8009a7c:	185b      	adds	r3, r3, r1
 8009a7e:	fb06 2205 	mla	r2, r6, r5, r2
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8009a8a:	e9c4 3200 	strd	r3, r2, [r4]
 8009a8e:	b004      	add	sp, #16
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	ea53 0205 	orrs.w	r2, r3, r5
 8009a96:	d1ee      	bne.n	8009a76 <rcutils_system_time_now+0x1e>
 8009a98:	2002      	movs	r0, #2
 8009a9a:	b004      	add	sp, #16
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	200b      	movs	r0, #11
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	3b9aca00 	.word	0x3b9aca00

08009aa8 <rcutils_steady_time_now>:
 8009aa8:	b308      	cbz	r0, 8009aee <rcutils_steady_time_now+0x46>
 8009aaa:	b570      	push	{r4, r5, r6, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4669      	mov	r1, sp
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f7f8 f95c 	bl	8001d70 <clock_gettime>
 8009ab8:	e9dd 3500 	ldrd	r3, r5, [sp]
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	db13      	blt.n	8009ae8 <rcutils_steady_time_now+0x40>
 8009ac0:	9902      	ldr	r1, [sp, #8]
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	db0d      	blt.n	8009ae2 <rcutils_steady_time_now+0x3a>
 8009ac6:	4e0b      	ldr	r6, [pc, #44]	@ (8009af4 <rcutils_steady_time_now+0x4c>)
 8009ac8:	fba3 3206 	umull	r3, r2, r3, r6
 8009acc:	185b      	adds	r3, r3, r1
 8009ace:	fb06 2205 	mla	r2, r6, r5, r2
 8009ad2:	f04f 0000 	mov.w	r0, #0
 8009ad6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8009ada:	e9c4 3200 	strd	r3, r2, [r4]
 8009ade:	b004      	add	sp, #16
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	ea53 0205 	orrs.w	r2, r3, r5
 8009ae6:	d1ee      	bne.n	8009ac6 <rcutils_steady_time_now+0x1e>
 8009ae8:	2002      	movs	r0, #2
 8009aea:	b004      	add	sp, #16
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
 8009aee:	200b      	movs	r0, #11
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	3b9aca00 	.word	0x3b9aca00

08009af8 <rmw_uros_set_custom_transport>:
 8009af8:	b470      	push	{r4, r5, r6}
 8009afa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8009afe:	b162      	cbz	r2, 8009b1a <rmw_uros_set_custom_transport+0x22>
 8009b00:	b15b      	cbz	r3, 8009b1a <rmw_uros_set_custom_transport+0x22>
 8009b02:	b155      	cbz	r5, 8009b1a <rmw_uros_set_custom_transport+0x22>
 8009b04:	b14e      	cbz	r6, 8009b1a <rmw_uros_set_custom_transport+0x22>
 8009b06:	4c06      	ldr	r4, [pc, #24]	@ (8009b20 <rmw_uros_set_custom_transport+0x28>)
 8009b08:	7020      	strb	r0, [r4, #0]
 8009b0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009b0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009b12:	6166      	str	r6, [r4, #20]
 8009b14:	2000      	movs	r0, #0
 8009b16:	bc70      	pop	{r4, r5, r6}
 8009b18:	4770      	bx	lr
 8009b1a:	200b      	movs	r0, #11
 8009b1c:	bc70      	pop	{r4, r5, r6}
 8009b1e:	4770      	bx	lr
 8009b20:	20009364 	.word	0x20009364

08009b24 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 8009b24:	4b04      	ldr	r3, [pc, #16]	@ (8009b38 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	b10a      	cbz	r2, 8009b2e <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 8009b2a:	4803      	ldr	r0, [pc, #12]	@ (8009b38 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 8009b2c:	4770      	bx	lr
 8009b2e:	4a03      	ldr	r2, [pc, #12]	@ (8009b3c <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 8009b30:	4801      	ldr	r0, [pc, #4]	@ (8009b38 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 8009b32:	6812      	ldr	r2, [r2, #0]
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	4770      	bx	lr
 8009b38:	20000068 	.word	0x20000068
 8009b3c:	2000033c 	.word	0x2000033c

08009b40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 8009b40:	4a02      	ldr	r2, [pc, #8]	@ (8009b4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xc>)
 8009b42:	4b03      	ldr	r3, [pc, #12]	@ (8009b50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x10>)
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	2000033c 	.word	0x2000033c
 8009b50:	20000068 	.word	0x20000068

08009b54 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_init_function>:
 8009b54:	f006 b85a 	b.w	800fc0c <rover_msgs__msg__ControllerMsg__init>

08009b58 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_fini_function>:
 8009b58:	f006 b85c 	b.w	800fc14 <rover_msgs__msg__ControllerMsg__fini>

08009b5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 8009b5c:	4b04      	ldr	r3, [pc, #16]	@ (8009b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	b10a      	cbz	r2, 8009b66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 8009b62:	4803      	ldr	r0, [pc, #12]	@ (8009b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 8009b64:	4770      	bx	lr
 8009b66:	4a03      	ldr	r2, [pc, #12]	@ (8009b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 8009b68:	4801      	ldr	r0, [pc, #4]	@ (8009b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 8009b6a:	6812      	ldr	r2, [r2, #0]
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	4770      	bx	lr
 8009b70:	20000308 	.word	0x20000308
 8009b74:	20000340 	.word	0x20000340

08009b78 <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	2104      	movs	r1, #4
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	f001 fa4d 	bl	800b01c <ucdr_alignment>
 8009b82:	1d26      	adds	r6, r4, #4
 8009b84:	4406      	add	r6, r0
 8009b86:	2104      	movs	r1, #4
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f001 fa47 	bl	800b01c <ucdr_alignment>
 8009b8e:	1d05      	adds	r5, r0, #4
 8009b90:	442e      	add	r6, r5
 8009b92:	2104      	movs	r1, #4
 8009b94:	4630      	mov	r0, r6
 8009b96:	f001 fa41 	bl	800b01c <ucdr_alignment>
 8009b9a:	1d05      	adds	r5, r0, #4
 8009b9c:	4435      	add	r5, r6
 8009b9e:	2104      	movs	r1, #4
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f001 fa3b 	bl	800b01c <ucdr_alignment>
 8009ba6:	3004      	adds	r0, #4
 8009ba8:	4405      	add	r5, r0
 8009baa:	2104      	movs	r1, #4
 8009bac:	4628      	mov	r0, r5
 8009bae:	f001 fa35 	bl	800b01c <ucdr_alignment>
 8009bb2:	3004      	adds	r0, #4
 8009bb4:	1946      	adds	r6, r0, r5
 8009bb6:	2104      	movs	r1, #4
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f001 fa2f 	bl	800b01c <ucdr_alignment>
 8009bbe:	1d05      	adds	r5, r0, #4
 8009bc0:	4435      	add	r5, r6
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f001 fa29 	bl	800b01c <ucdr_alignment>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	4405      	add	r5, r0
 8009bce:	2104      	movs	r1, #4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f001 fa23 	bl	800b01c <ucdr_alignment>
 8009bd6:	3004      	adds	r0, #4
 8009bd8:	1946      	adds	r6, r0, r5
 8009bda:	2104      	movs	r1, #4
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f001 fa1d 	bl	800b01c <ucdr_alignment>
 8009be2:	1d05      	adds	r5, r0, #4
 8009be4:	4435      	add	r5, r6
 8009be6:	2104      	movs	r1, #4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f001 fa17 	bl	800b01c <ucdr_alignment>
 8009bee:	3004      	adds	r0, #4
 8009bf0:	4405      	add	r5, r0
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f001 fa11 	bl	800b01c <ucdr_alignment>
 8009bfa:	f1c4 0404 	rsb	r4, r4, #4
 8009bfe:	4420      	add	r0, r4
 8009c00:	4428      	add	r0, r5
 8009c02:	bd70      	pop	{r4, r5, r6, pc}

08009c04 <get_serialized_size_rover_msgs__msg__ControllerMsg>:
 8009c04:	b110      	cbz	r0, 8009c0c <get_serialized_size_rover_msgs__msg__ControllerMsg+0x8>
 8009c06:	4608      	mov	r0, r1
 8009c08:	f7ff bfb6 	b.w	8009b78 <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop

08009c10 <_ControllerMsg__get_serialized_size>:
 8009c10:	b110      	cbz	r0, 8009c18 <_ControllerMsg__get_serialized_size+0x8>
 8009c12:	2000      	movs	r0, #0
 8009c14:	f7ff bfb0 	b.w	8009b78 <get_serialized_size_rover_msgs__msg__ControllerMsg.part.0>
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop

08009c1c <_ControllerMsg__cdr_deserialize>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b3a9      	cbz	r1, 8009c8e <_ControllerMsg__cdr_deserialize+0x72>
 8009c22:	4605      	mov	r5, r0
 8009c24:	f001 f912 	bl	800ae4c <ucdr_deserialize_float>
 8009c28:	1d21      	adds	r1, r4, #4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f001 f90e 	bl	800ae4c <ucdr_deserialize_float>
 8009c30:	f104 0108 	add.w	r1, r4, #8
 8009c34:	4628      	mov	r0, r5
 8009c36:	f001 f909 	bl	800ae4c <ucdr_deserialize_float>
 8009c3a:	f104 010c 	add.w	r1, r4, #12
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 ffdc 	bl	800abfc <ucdr_deserialize_int32_t>
 8009c44:	f104 0110 	add.w	r1, r4, #16
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 ffd7 	bl	800abfc <ucdr_deserialize_int32_t>
 8009c4e:	f104 0114 	add.w	r1, r4, #20
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 ffd2 	bl	800abfc <ucdr_deserialize_int32_t>
 8009c58:	f104 0118 	add.w	r1, r4, #24
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f000 fe2b 	bl	800a8b8 <ucdr_deserialize_int8_t>
 8009c62:	f104 011c 	add.w	r1, r4, #28
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 ffc8 	bl	800abfc <ucdr_deserialize_int32_t>
 8009c6c:	f104 0120 	add.w	r1, r4, #32
 8009c70:	4628      	mov	r0, r5
 8009c72:	f001 f8eb 	bl	800ae4c <ucdr_deserialize_float>
 8009c76:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f001 f8e6 	bl	800ae4c <ucdr_deserialize_float>
 8009c80:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8009c84:	4628      	mov	r0, r5
 8009c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c8a:	f001 b8df 	b.w	800ae4c <ucdr_deserialize_float>
 8009c8e:	4608      	mov	r0, r1
 8009c90:	bd38      	pop	{r3, r4, r5, pc}
 8009c92:	bf00      	nop

08009c94 <_ControllerMsg__cdr_serialize>:
 8009c94:	b3b8      	cbz	r0, 8009d06 <_ControllerMsg__cdr_serialize+0x72>
 8009c96:	b538      	push	{r3, r4, r5, lr}
 8009c98:	ed90 0a00 	vldr	s0, [r0]
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	f001 f83b 	bl	800ad1c <ucdr_serialize_float>
 8009ca6:	ed94 0a01 	vldr	s0, [r4, #4]
 8009caa:	4628      	mov	r0, r5
 8009cac:	f001 f836 	bl	800ad1c <ucdr_serialize_float>
 8009cb0:	ed94 0a02 	vldr	s0, [r4, #8]
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f001 f831 	bl	800ad1c <ucdr_serialize_float>
 8009cba:	68e1      	ldr	r1, [r4, #12]
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 ff05 	bl	800aacc <ucdr_serialize_int32_t>
 8009cc2:	6921      	ldr	r1, [r4, #16]
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 ff01 	bl	800aacc <ucdr_serialize_int32_t>
 8009cca:	6961      	ldr	r1, [r4, #20]
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f000 fefd 	bl	800aacc <ucdr_serialize_int32_t>
 8009cd2:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 fdd8 	bl	800a88c <ucdr_serialize_int8_t>
 8009cdc:	69e1      	ldr	r1, [r4, #28]
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 fef4 	bl	800aacc <ucdr_serialize_int32_t>
 8009ce4:	ed94 0a08 	vldr	s0, [r4, #32]
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f001 f817 	bl	800ad1c <ucdr_serialize_float>
 8009cee:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f001 f812 	bl	800ad1c <ucdr_serialize_float>
 8009cf8:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d02:	f001 b80b 	b.w	800ad1c <ucdr_serialize_float>
 8009d06:	4770      	bx	lr

08009d08 <max_serialized_size_rover_msgs__msg__ControllerMsg>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	2701      	movs	r7, #1
 8009d0e:	7007      	strb	r7, [r0, #0]
 8009d10:	2104      	movs	r1, #4
 8009d12:	4620      	mov	r0, r4
 8009d14:	f001 f982 	bl	800b01c <ucdr_alignment>
 8009d18:	1d26      	adds	r6, r4, #4
 8009d1a:	4406      	add	r6, r0
 8009d1c:	2104      	movs	r1, #4
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f001 f97c 	bl	800b01c <ucdr_alignment>
 8009d24:	1d05      	adds	r5, r0, #4
 8009d26:	442e      	add	r6, r5
 8009d28:	2104      	movs	r1, #4
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f001 f976 	bl	800b01c <ucdr_alignment>
 8009d30:	1d05      	adds	r5, r0, #4
 8009d32:	4435      	add	r5, r6
 8009d34:	2104      	movs	r1, #4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f001 f970 	bl	800b01c <ucdr_alignment>
 8009d3c:	3004      	adds	r0, #4
 8009d3e:	4405      	add	r5, r0
 8009d40:	2104      	movs	r1, #4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f001 f96a 	bl	800b01c <ucdr_alignment>
 8009d48:	3004      	adds	r0, #4
 8009d4a:	1946      	adds	r6, r0, r5
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f001 f964 	bl	800b01c <ucdr_alignment>
 8009d54:	1d05      	adds	r5, r0, #4
 8009d56:	4435      	add	r5, r6
 8009d58:	4639      	mov	r1, r7
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f001 f95e 	bl	800b01c <ucdr_alignment>
 8009d60:	4438      	add	r0, r7
 8009d62:	4405      	add	r5, r0
 8009d64:	2104      	movs	r1, #4
 8009d66:	4628      	mov	r0, r5
 8009d68:	f001 f958 	bl	800b01c <ucdr_alignment>
 8009d6c:	3004      	adds	r0, #4
 8009d6e:	1946      	adds	r6, r0, r5
 8009d70:	2104      	movs	r1, #4
 8009d72:	4630      	mov	r0, r6
 8009d74:	f001 f952 	bl	800b01c <ucdr_alignment>
 8009d78:	1d05      	adds	r5, r0, #4
 8009d7a:	4435      	add	r5, r6
 8009d7c:	2104      	movs	r1, #4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f001 f94c 	bl	800b01c <ucdr_alignment>
 8009d84:	3004      	adds	r0, #4
 8009d86:	4405      	add	r5, r0
 8009d88:	2104      	movs	r1, #4
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f001 f946 	bl	800b01c <ucdr_alignment>
 8009d90:	f1c4 0404 	rsb	r4, r4, #4
 8009d94:	4420      	add	r0, r4
 8009d96:	4428      	add	r0, r5
 8009d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9a:	bf00      	nop

08009d9c <_ControllerMsg__max_serialized_size>:
 8009d9c:	b500      	push	{lr}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	2100      	movs	r1, #0
 8009da2:	f10d 0007 	add.w	r0, sp, #7
 8009da6:	f7ff ffaf 	bl	8009d08 <max_serialized_size_rover_msgs__msg__ControllerMsg>
 8009daa:	b003      	add	sp, #12
 8009dac:	f85d fb04 	ldr.w	pc, [sp], #4

08009db0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 8009db0:	4800      	ldr	r0, [pc, #0]	@ (8009db4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x4>)
 8009db2:	4770      	bx	lr
 8009db4:	20000314 	.word	0x20000314

08009db8 <ucdr_serialize_bool>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	460d      	mov	r5, r1
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	f001 f8e0 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009dc4:	b148      	cbz	r0, 8009dda <ucdr_serialize_bool+0x22>
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	701d      	strb	r5, [r3, #0]
 8009dca:	68a2      	ldr	r2, [r4, #8]
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	2101      	movs	r1, #1
 8009dd0:	440a      	add	r2, r1
 8009dd2:	440b      	add	r3, r1
 8009dd4:	60a2      	str	r2, [r4, #8]
 8009dd6:	6123      	str	r3, [r4, #16]
 8009dd8:	7561      	strb	r1, [r4, #21]
 8009dda:	7da0      	ldrb	r0, [r4, #22]
 8009ddc:	f080 0001 	eor.w	r0, r0, #1
 8009de0:	bd38      	pop	{r3, r4, r5, pc}
 8009de2:	bf00      	nop

08009de4 <ucdr_deserialize_bool>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	460d      	mov	r5, r1
 8009de8:	2101      	movs	r1, #1
 8009dea:	4604      	mov	r4, r0
 8009dec:	f001 f8ca 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009df0:	b160      	cbz	r0, 8009e0c <ucdr_deserialize_bool+0x28>
 8009df2:	68a2      	ldr	r2, [r4, #8]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009dfa:	3900      	subs	r1, #0
 8009dfc:	bf18      	it	ne
 8009dfe:	2101      	movne	r1, #1
 8009e00:	7029      	strb	r1, [r5, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	2101      	movs	r1, #1
 8009e06:	60a2      	str	r2, [r4, #8]
 8009e08:	6123      	str	r3, [r4, #16]
 8009e0a:	7561      	strb	r1, [r4, #21]
 8009e0c:	7da0      	ldrb	r0, [r4, #22]
 8009e0e:	f080 0001 	eor.w	r0, r0, #1
 8009e12:	bd38      	pop	{r3, r4, r5, pc}

08009e14 <ucdr_serialize_uint8_t>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	460d      	mov	r5, r1
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f001 f8b2 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009e20:	b148      	cbz	r0, 8009e36 <ucdr_serialize_uint8_t+0x22>
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	701d      	strb	r5, [r3, #0]
 8009e26:	68a2      	ldr	r2, [r4, #8]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	440a      	add	r2, r1
 8009e2e:	440b      	add	r3, r1
 8009e30:	60a2      	str	r2, [r4, #8]
 8009e32:	6123      	str	r3, [r4, #16]
 8009e34:	7561      	strb	r1, [r4, #21]
 8009e36:	7da0      	ldrb	r0, [r4, #22]
 8009e38:	f080 0001 	eor.w	r0, r0, #1
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop

08009e40 <ucdr_deserialize_uint8_t>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	460d      	mov	r5, r1
 8009e44:	2101      	movs	r1, #1
 8009e46:	4604      	mov	r4, r0
 8009e48:	f001 f89c 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009e4c:	b150      	cbz	r0, 8009e64 <ucdr_deserialize_uint8_t+0x24>
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	702b      	strb	r3, [r5, #0]
 8009e54:	68a2      	ldr	r2, [r4, #8]
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	2101      	movs	r1, #1
 8009e5a:	440a      	add	r2, r1
 8009e5c:	440b      	add	r3, r1
 8009e5e:	60a2      	str	r2, [r4, #8]
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	7561      	strb	r1, [r4, #21]
 8009e64:	7da0      	ldrb	r0, [r4, #22]
 8009e66:	f080 0001 	eor.w	r0, r0, #1
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}

08009e6c <ucdr_serialize_uint16_t>:
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	460b      	mov	r3, r1
 8009e74:	2102      	movs	r1, #2
 8009e76:	4604      	mov	r4, r0
 8009e78:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009e7c:	f001 f8d6 	bl	800b02c <ucdr_buffer_alignment>
 8009e80:	4601      	mov	r1, r0
 8009e82:	4620      	mov	r0, r4
 8009e84:	7d67      	ldrb	r7, [r4, #21]
 8009e86:	f001 f915 	bl	800b0b4 <ucdr_advance_buffer>
 8009e8a:	2102      	movs	r1, #2
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f001 f86d 	bl	800af6c <ucdr_check_buffer_available_for>
 8009e92:	bb78      	cbnz	r0, 8009ef4 <ucdr_serialize_uint16_t+0x88>
 8009e94:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009e98:	42ab      	cmp	r3, r5
 8009e9a:	d926      	bls.n	8009eea <ucdr_serialize_uint16_t+0x7e>
 8009e9c:	1b5e      	subs	r6, r3, r5
 8009e9e:	60a3      	str	r3, [r4, #8]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	f1c6 0802 	rsb	r8, r6, #2
 8009ea6:	4433      	add	r3, r6
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	4641      	mov	r1, r8
 8009eac:	4620      	mov	r0, r4
 8009eae:	f001 f869 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d03b      	beq.n	8009f2e <ucdr_serialize_uint16_t+0xc2>
 8009eb6:	7d23      	ldrb	r3, [r4, #20]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d04a      	beq.n	8009f52 <ucdr_serialize_uint16_t+0xe6>
 8009ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009ec0:	702b      	strb	r3, [r5, #0]
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	d040      	beq.n	8009f48 <ucdr_serialize_uint16_t+0xdc>
 8009ec6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009eca:	706b      	strb	r3, [r5, #1]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	68a2      	ldr	r2, [r4, #8]
 8009ed0:	7da0      	ldrb	r0, [r4, #22]
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	1b9e      	subs	r6, r3, r6
 8009ed6:	4442      	add	r2, r8
 8009ed8:	2302      	movs	r3, #2
 8009eda:	f080 0001 	eor.w	r0, r0, #1
 8009ede:	60a2      	str	r2, [r4, #8]
 8009ee0:	6126      	str	r6, [r4, #16]
 8009ee2:	7563      	strb	r3, [r4, #21]
 8009ee4:	b002      	add	sp, #8
 8009ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eea:	2102      	movs	r1, #2
 8009eec:	4620      	mov	r0, r4
 8009eee:	f001 f849 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009ef2:	b190      	cbz	r0, 8009f1a <ucdr_serialize_uint16_t+0xae>
 8009ef4:	7d23      	ldrb	r3, [r4, #20]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	68a3      	ldr	r3, [r4, #8]
 8009efa:	d014      	beq.n	8009f26 <ucdr_serialize_uint16_t+0xba>
 8009efc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009f08:	705a      	strb	r2, [r3, #1]
 8009f0a:	68a2      	ldr	r2, [r4, #8]
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	3202      	adds	r2, #2
 8009f10:	3302      	adds	r3, #2
 8009f12:	2102      	movs	r1, #2
 8009f14:	60a2      	str	r2, [r4, #8]
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	7561      	strb	r1, [r4, #21]
 8009f1a:	7da0      	ldrb	r0, [r4, #22]
 8009f1c:	f080 0001 	eor.w	r0, r0, #1
 8009f20:	b002      	add	sp, #8
 8009f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e7ed      	b.n	8009f0a <ucdr_serialize_uint16_t+0x9e>
 8009f2e:	68a2      	ldr	r2, [r4, #8]
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	7da0      	ldrb	r0, [r4, #22]
 8009f34:	7567      	strb	r7, [r4, #21]
 8009f36:	1b92      	subs	r2, r2, r6
 8009f38:	1b9b      	subs	r3, r3, r6
 8009f3a:	f080 0001 	eor.w	r0, r0, #1
 8009f3e:	60a2      	str	r2, [r4, #8]
 8009f40:	6123      	str	r3, [r4, #16]
 8009f42:	b002      	add	sp, #8
 8009f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f48:	68a3      	ldr	r3, [r4, #8]
 8009f4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009f4e:	701a      	strb	r2, [r3, #0]
 8009f50:	e7bc      	b.n	8009ecc <ucdr_serialize_uint16_t+0x60>
 8009f52:	4628      	mov	r0, r5
 8009f54:	f10d 0506 	add.w	r5, sp, #6
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4632      	mov	r2, r6
 8009f5c:	f00b f9c5 	bl	80152ea <memcpy>
 8009f60:	68a0      	ldr	r0, [r4, #8]
 8009f62:	4642      	mov	r2, r8
 8009f64:	19a9      	adds	r1, r5, r6
 8009f66:	f00b f9c0 	bl	80152ea <memcpy>
 8009f6a:	e7af      	b.n	8009ecc <ucdr_serialize_uint16_t+0x60>

08009f6c <ucdr_serialize_endian_uint16_t>:
 8009f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f70:	b083      	sub	sp, #12
 8009f72:	460d      	mov	r5, r1
 8009f74:	2102      	movs	r1, #2
 8009f76:	4604      	mov	r4, r0
 8009f78:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009f7c:	f001 f856 	bl	800b02c <ucdr_buffer_alignment>
 8009f80:	4601      	mov	r1, r0
 8009f82:	4620      	mov	r0, r4
 8009f84:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009f88:	f001 f894 	bl	800b0b4 <ucdr_advance_buffer>
 8009f8c:	2102      	movs	r1, #2
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 ffec 	bl	800af6c <ucdr_check_buffer_available_for>
 8009f94:	bb70      	cbnz	r0, 8009ff4 <ucdr_serialize_endian_uint16_t+0x88>
 8009f96:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009f9a:	42be      	cmp	r6, r7
 8009f9c:	d925      	bls.n	8009fea <ucdr_serialize_endian_uint16_t+0x7e>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	60a6      	str	r6, [r4, #8]
 8009fa2:	1bf6      	subs	r6, r6, r7
 8009fa4:	4433      	add	r3, r6
 8009fa6:	f1c6 0902 	rsb	r9, r6, #2
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	4649      	mov	r1, r9
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 ffe8 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d039      	beq.n	800a02c <ucdr_serialize_endian_uint16_t+0xc0>
 8009fb8:	2d01      	cmp	r5, #1
 8009fba:	d04a      	beq.n	800a052 <ucdr_serialize_endian_uint16_t+0xe6>
 8009fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009fc0:	703b      	strb	r3, [r7, #0]
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	d040      	beq.n	800a048 <ucdr_serialize_endian_uint16_t+0xdc>
 8009fc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009fca:	707b      	strb	r3, [r7, #1]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	68a2      	ldr	r2, [r4, #8]
 8009fd0:	7da0      	ldrb	r0, [r4, #22]
 8009fd2:	3302      	adds	r3, #2
 8009fd4:	444a      	add	r2, r9
 8009fd6:	1b9b      	subs	r3, r3, r6
 8009fd8:	2102      	movs	r1, #2
 8009fda:	f080 0001 	eor.w	r0, r0, #1
 8009fde:	60a2      	str	r2, [r4, #8]
 8009fe0:	6123      	str	r3, [r4, #16]
 8009fe2:	7561      	strb	r1, [r4, #21]
 8009fe4:	b003      	add	sp, #12
 8009fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fea:	2102      	movs	r1, #2
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 ffc9 	bl	800af84 <ucdr_check_final_buffer_behavior>
 8009ff2:	b188      	cbz	r0, 800a018 <ucdr_serialize_endian_uint16_t+0xac>
 8009ff4:	2d01      	cmp	r5, #1
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	d014      	beq.n	800a024 <ucdr_serialize_endian_uint16_t+0xb8>
 8009ffa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009ffe:	701a      	strb	r2, [r3, #0]
 800a000:	68a3      	ldr	r3, [r4, #8]
 800a002:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a006:	705a      	strb	r2, [r3, #1]
 800a008:	68a2      	ldr	r2, [r4, #8]
 800a00a:	6923      	ldr	r3, [r4, #16]
 800a00c:	3202      	adds	r2, #2
 800a00e:	3302      	adds	r3, #2
 800a010:	2102      	movs	r1, #2
 800a012:	60a2      	str	r2, [r4, #8]
 800a014:	6123      	str	r3, [r4, #16]
 800a016:	7561      	strb	r1, [r4, #21]
 800a018:	7da0      	ldrb	r0, [r4, #22]
 800a01a:	f080 0001 	eor.w	r0, r0, #1
 800a01e:	b003      	add	sp, #12
 800a020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a024:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a028:	801a      	strh	r2, [r3, #0]
 800a02a:	e7ed      	b.n	800a008 <ucdr_serialize_endian_uint16_t+0x9c>
 800a02c:	68a2      	ldr	r2, [r4, #8]
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	7da0      	ldrb	r0, [r4, #22]
 800a032:	f884 8015 	strb.w	r8, [r4, #21]
 800a036:	1b92      	subs	r2, r2, r6
 800a038:	1b9b      	subs	r3, r3, r6
 800a03a:	f080 0001 	eor.w	r0, r0, #1
 800a03e:	60a2      	str	r2, [r4, #8]
 800a040:	6123      	str	r3, [r4, #16]
 800a042:	b003      	add	sp, #12
 800a044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a048:	68a3      	ldr	r3, [r4, #8]
 800a04a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a04e:	701a      	strb	r2, [r3, #0]
 800a050:	e7bc      	b.n	8009fcc <ucdr_serialize_endian_uint16_t+0x60>
 800a052:	f10d 0506 	add.w	r5, sp, #6
 800a056:	4629      	mov	r1, r5
 800a058:	4632      	mov	r2, r6
 800a05a:	4638      	mov	r0, r7
 800a05c:	f00b f945 	bl	80152ea <memcpy>
 800a060:	68a0      	ldr	r0, [r4, #8]
 800a062:	464a      	mov	r2, r9
 800a064:	19a9      	adds	r1, r5, r6
 800a066:	f00b f940 	bl	80152ea <memcpy>
 800a06a:	e7af      	b.n	8009fcc <ucdr_serialize_endian_uint16_t+0x60>

0800a06c <ucdr_deserialize_uint16_t>:
 800a06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a070:	460d      	mov	r5, r1
 800a072:	2102      	movs	r1, #2
 800a074:	4604      	mov	r4, r0
 800a076:	f000 ffd9 	bl	800b02c <ucdr_buffer_alignment>
 800a07a:	4601      	mov	r1, r0
 800a07c:	4620      	mov	r0, r4
 800a07e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a082:	f001 f817 	bl	800b0b4 <ucdr_advance_buffer>
 800a086:	2102      	movs	r1, #2
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 ff6f 	bl	800af6c <ucdr_check_buffer_available_for>
 800a08e:	bb60      	cbnz	r0, 800a0ea <ucdr_deserialize_uint16_t+0x7e>
 800a090:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a094:	42be      	cmp	r6, r7
 800a096:	d923      	bls.n	800a0e0 <ucdr_deserialize_uint16_t+0x74>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	60a6      	str	r6, [r4, #8]
 800a09c:	1bf6      	subs	r6, r6, r7
 800a09e:	4433      	add	r3, r6
 800a0a0:	f1c6 0902 	rsb	r9, r6, #2
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 ff6b 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d034      	beq.n	800a11c <ucdr_deserialize_uint16_t+0xb0>
 800a0b2:	7d23      	ldrb	r3, [r4, #20]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d042      	beq.n	800a13e <ucdr_deserialize_uint16_t+0xd2>
 800a0b8:	787b      	ldrb	r3, [r7, #1]
 800a0ba:	702b      	strb	r3, [r5, #0]
 800a0bc:	2e00      	cmp	r6, #0
 800a0be:	d03a      	beq.n	800a136 <ucdr_deserialize_uint16_t+0xca>
 800a0c0:	783b      	ldrb	r3, [r7, #0]
 800a0c2:	706b      	strb	r3, [r5, #1]
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	68a2      	ldr	r2, [r4, #8]
 800a0c8:	7da0      	ldrb	r0, [r4, #22]
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	444a      	add	r2, r9
 800a0d0:	1b9b      	subs	r3, r3, r6
 800a0d2:	7561      	strb	r1, [r4, #21]
 800a0d4:	60a2      	str	r2, [r4, #8]
 800a0d6:	6123      	str	r3, [r4, #16]
 800a0d8:	f080 0001 	eor.w	r0, r0, #1
 800a0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e0:	2102      	movs	r1, #2
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 ff4e 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a0e8:	b180      	cbz	r0, 800a10c <ucdr_deserialize_uint16_t+0xa0>
 800a0ea:	7d23      	ldrb	r3, [r4, #20]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	68a3      	ldr	r3, [r4, #8]
 800a0f0:	d011      	beq.n	800a116 <ucdr_deserialize_uint16_t+0xaa>
 800a0f2:	785b      	ldrb	r3, [r3, #1]
 800a0f4:	702b      	strb	r3, [r5, #0]
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	706b      	strb	r3, [r5, #1]
 800a0fc:	68a2      	ldr	r2, [r4, #8]
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	3202      	adds	r2, #2
 800a102:	3302      	adds	r3, #2
 800a104:	2102      	movs	r1, #2
 800a106:	60a2      	str	r2, [r4, #8]
 800a108:	6123      	str	r3, [r4, #16]
 800a10a:	7561      	strb	r1, [r4, #21]
 800a10c:	7da0      	ldrb	r0, [r4, #22]
 800a10e:	f080 0001 	eor.w	r0, r0, #1
 800a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	802b      	strh	r3, [r5, #0]
 800a11a:	e7ef      	b.n	800a0fc <ucdr_deserialize_uint16_t+0x90>
 800a11c:	68a2      	ldr	r2, [r4, #8]
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	7da0      	ldrb	r0, [r4, #22]
 800a122:	f884 8015 	strb.w	r8, [r4, #21]
 800a126:	1b92      	subs	r2, r2, r6
 800a128:	1b9b      	subs	r3, r3, r6
 800a12a:	60a2      	str	r2, [r4, #8]
 800a12c:	6123      	str	r3, [r4, #16]
 800a12e:	f080 0001 	eor.w	r0, r0, #1
 800a132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	706b      	strb	r3, [r5, #1]
 800a13c:	e7c2      	b.n	800a0c4 <ucdr_deserialize_uint16_t+0x58>
 800a13e:	4639      	mov	r1, r7
 800a140:	4632      	mov	r2, r6
 800a142:	4628      	mov	r0, r5
 800a144:	f00b f8d1 	bl	80152ea <memcpy>
 800a148:	68a1      	ldr	r1, [r4, #8]
 800a14a:	464a      	mov	r2, r9
 800a14c:	19a8      	adds	r0, r5, r6
 800a14e:	f00b f8cc 	bl	80152ea <memcpy>
 800a152:	e7b7      	b.n	800a0c4 <ucdr_deserialize_uint16_t+0x58>

0800a154 <ucdr_deserialize_endian_uint16_t>:
 800a154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a158:	460e      	mov	r6, r1
 800a15a:	2102      	movs	r1, #2
 800a15c:	4604      	mov	r4, r0
 800a15e:	4615      	mov	r5, r2
 800a160:	f000 ff64 	bl	800b02c <ucdr_buffer_alignment>
 800a164:	4601      	mov	r1, r0
 800a166:	4620      	mov	r0, r4
 800a168:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a16c:	f000 ffa2 	bl	800b0b4 <ucdr_advance_buffer>
 800a170:	2102      	movs	r1, #2
 800a172:	4620      	mov	r0, r4
 800a174:	f000 fefa 	bl	800af6c <ucdr_check_buffer_available_for>
 800a178:	bb70      	cbnz	r0, 800a1d8 <ucdr_deserialize_endian_uint16_t+0x84>
 800a17a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800a17e:	4547      	cmp	r7, r8
 800a180:	d925      	bls.n	800a1ce <ucdr_deserialize_endian_uint16_t+0x7a>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	60a7      	str	r7, [r4, #8]
 800a186:	eba7 0708 	sub.w	r7, r7, r8
 800a18a:	443b      	add	r3, r7
 800a18c:	f1c7 0a02 	rsb	sl, r7, #2
 800a190:	6123      	str	r3, [r4, #16]
 800a192:	4651      	mov	r1, sl
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fef5 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d034      	beq.n	800a208 <ucdr_deserialize_endian_uint16_t+0xb4>
 800a19e:	2e01      	cmp	r6, #1
 800a1a0:	d043      	beq.n	800a22a <ucdr_deserialize_endian_uint16_t+0xd6>
 800a1a2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a1a6:	702b      	strb	r3, [r5, #0]
 800a1a8:	2f00      	cmp	r7, #0
 800a1aa:	d03a      	beq.n	800a222 <ucdr_deserialize_endian_uint16_t+0xce>
 800a1ac:	f898 3000 	ldrb.w	r3, [r8]
 800a1b0:	706b      	strb	r3, [r5, #1]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	68a2      	ldr	r2, [r4, #8]
 800a1b6:	7da0      	ldrb	r0, [r4, #22]
 800a1b8:	2102      	movs	r1, #2
 800a1ba:	3302      	adds	r3, #2
 800a1bc:	4452      	add	r2, sl
 800a1be:	1bdb      	subs	r3, r3, r7
 800a1c0:	7561      	strb	r1, [r4, #21]
 800a1c2:	60a2      	str	r2, [r4, #8]
 800a1c4:	6123      	str	r3, [r4, #16]
 800a1c6:	f080 0001 	eor.w	r0, r0, #1
 800a1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ce:	2102      	movs	r1, #2
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fed7 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a1d6:	b178      	cbz	r0, 800a1f8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800a1d8:	2e01      	cmp	r6, #1
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	d011      	beq.n	800a202 <ucdr_deserialize_endian_uint16_t+0xae>
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	702b      	strb	r3, [r5, #0]
 800a1e2:	68a3      	ldr	r3, [r4, #8]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	706b      	strb	r3, [r5, #1]
 800a1e8:	68a2      	ldr	r2, [r4, #8]
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	3202      	adds	r2, #2
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	60a2      	str	r2, [r4, #8]
 800a1f4:	6123      	str	r3, [r4, #16]
 800a1f6:	7561      	strb	r1, [r4, #21]
 800a1f8:	7da0      	ldrb	r0, [r4, #22]
 800a1fa:	f080 0001 	eor.w	r0, r0, #1
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	802b      	strh	r3, [r5, #0]
 800a206:	e7ef      	b.n	800a1e8 <ucdr_deserialize_endian_uint16_t+0x94>
 800a208:	68a2      	ldr	r2, [r4, #8]
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	7da0      	ldrb	r0, [r4, #22]
 800a20e:	f884 9015 	strb.w	r9, [r4, #21]
 800a212:	1bd2      	subs	r2, r2, r7
 800a214:	1bdb      	subs	r3, r3, r7
 800a216:	60a2      	str	r2, [r4, #8]
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	f080 0001 	eor.w	r0, r0, #1
 800a21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	706b      	strb	r3, [r5, #1]
 800a228:	e7c3      	b.n	800a1b2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800a22a:	4641      	mov	r1, r8
 800a22c:	463a      	mov	r2, r7
 800a22e:	4628      	mov	r0, r5
 800a230:	f00b f85b 	bl	80152ea <memcpy>
 800a234:	68a1      	ldr	r1, [r4, #8]
 800a236:	4652      	mov	r2, sl
 800a238:	19e8      	adds	r0, r5, r7
 800a23a:	f00b f856 	bl	80152ea <memcpy>
 800a23e:	e7b8      	b.n	800a1b2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800a240 <ucdr_serialize_uint32_t>:
 800a240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	4604      	mov	r4, r0
 800a248:	9101      	str	r1, [sp, #4]
 800a24a:	2104      	movs	r1, #4
 800a24c:	f000 feee 	bl	800b02c <ucdr_buffer_alignment>
 800a250:	4601      	mov	r1, r0
 800a252:	4620      	mov	r0, r4
 800a254:	7d67      	ldrb	r7, [r4, #21]
 800a256:	f000 ff2d 	bl	800b0b4 <ucdr_advance_buffer>
 800a25a:	2104      	movs	r1, #4
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 fe85 	bl	800af6c <ucdr_check_buffer_available_for>
 800a262:	2800      	cmp	r0, #0
 800a264:	d139      	bne.n	800a2da <ucdr_serialize_uint32_t+0x9a>
 800a266:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a26a:	42ab      	cmp	r3, r5
 800a26c:	d930      	bls.n	800a2d0 <ucdr_serialize_uint32_t+0x90>
 800a26e:	1b5e      	subs	r6, r3, r5
 800a270:	60a3      	str	r3, [r4, #8]
 800a272:	6923      	ldr	r3, [r4, #16]
 800a274:	f1c6 0804 	rsb	r8, r6, #4
 800a278:	4433      	add	r3, r6
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	4641      	mov	r1, r8
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fe80 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a284:	2800      	cmp	r0, #0
 800a286:	d04c      	beq.n	800a322 <ucdr_serialize_uint32_t+0xe2>
 800a288:	7d23      	ldrb	r3, [r4, #20]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d063      	beq.n	800a356 <ucdr_serialize_uint32_t+0x116>
 800a28e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a292:	702b      	strb	r3, [r5, #0]
 800a294:	2e00      	cmp	r6, #0
 800a296:	d051      	beq.n	800a33c <ucdr_serialize_uint32_t+0xfc>
 800a298:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a29c:	706b      	strb	r3, [r5, #1]
 800a29e:	2e01      	cmp	r6, #1
 800a2a0:	d050      	beq.n	800a344 <ucdr_serialize_uint32_t+0x104>
 800a2a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a2a6:	70ab      	strb	r3, [r5, #2]
 800a2a8:	2e02      	cmp	r6, #2
 800a2aa:	d04f      	beq.n	800a34c <ucdr_serialize_uint32_t+0x10c>
 800a2ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a2b0:	70eb      	strb	r3, [r5, #3]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	68a2      	ldr	r2, [r4, #8]
 800a2b6:	7da0      	ldrb	r0, [r4, #22]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	1b9e      	subs	r6, r3, r6
 800a2bc:	4442      	add	r2, r8
 800a2be:	2304      	movs	r3, #4
 800a2c0:	f080 0001 	eor.w	r0, r0, #1
 800a2c4:	60a2      	str	r2, [r4, #8]
 800a2c6:	6126      	str	r6, [r4, #16]
 800a2c8:	7563      	strb	r3, [r4, #21]
 800a2ca:	b002      	add	sp, #8
 800a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d0:	2104      	movs	r1, #4
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 fe56 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a2d8:	b1d0      	cbz	r0, 800a310 <ucdr_serialize_uint32_t+0xd0>
 800a2da:	7d23      	ldrb	r3, [r4, #20]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	d01c      	beq.n	800a31c <ucdr_serialize_uint32_t+0xdc>
 800a2e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	68a3      	ldr	r3, [r4, #8]
 800a2ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a2ee:	705a      	strb	r2, [r3, #1]
 800a2f0:	68a3      	ldr	r3, [r4, #8]
 800a2f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a2f6:	709a      	strb	r2, [r3, #2]
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a2fe:	70da      	strb	r2, [r3, #3]
 800a300:	68a2      	ldr	r2, [r4, #8]
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	3204      	adds	r2, #4
 800a306:	3304      	adds	r3, #4
 800a308:	2104      	movs	r1, #4
 800a30a:	60a2      	str	r2, [r4, #8]
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	7561      	strb	r1, [r4, #21]
 800a310:	7da0      	ldrb	r0, [r4, #22]
 800a312:	f080 0001 	eor.w	r0, r0, #1
 800a316:	b002      	add	sp, #8
 800a318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a31c:	9a01      	ldr	r2, [sp, #4]
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e7ee      	b.n	800a300 <ucdr_serialize_uint32_t+0xc0>
 800a322:	68a2      	ldr	r2, [r4, #8]
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	7da0      	ldrb	r0, [r4, #22]
 800a328:	7567      	strb	r7, [r4, #21]
 800a32a:	1b92      	subs	r2, r2, r6
 800a32c:	1b9b      	subs	r3, r3, r6
 800a32e:	f080 0001 	eor.w	r0, r0, #1
 800a332:	60a2      	str	r2, [r4, #8]
 800a334:	6123      	str	r3, [r4, #16]
 800a336:	b002      	add	sp, #8
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	68a3      	ldr	r3, [r4, #8]
 800a346:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	68a3      	ldr	r3, [r4, #8]
 800a34e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	e7ad      	b.n	800a2b2 <ucdr_serialize_uint32_t+0x72>
 800a356:	4628      	mov	r0, r5
 800a358:	ad01      	add	r5, sp, #4
 800a35a:	4629      	mov	r1, r5
 800a35c:	4632      	mov	r2, r6
 800a35e:	f00a ffc4 	bl	80152ea <memcpy>
 800a362:	68a0      	ldr	r0, [r4, #8]
 800a364:	4642      	mov	r2, r8
 800a366:	19a9      	adds	r1, r5, r6
 800a368:	f00a ffbf 	bl	80152ea <memcpy>
 800a36c:	e7a1      	b.n	800a2b2 <ucdr_serialize_uint32_t+0x72>
 800a36e:	bf00      	nop

0800a370 <ucdr_serialize_endian_uint32_t>:
 800a370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a374:	b083      	sub	sp, #12
 800a376:	460d      	mov	r5, r1
 800a378:	2104      	movs	r1, #4
 800a37a:	4604      	mov	r4, r0
 800a37c:	9201      	str	r2, [sp, #4]
 800a37e:	f000 fe55 	bl	800b02c <ucdr_buffer_alignment>
 800a382:	4601      	mov	r1, r0
 800a384:	4620      	mov	r0, r4
 800a386:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a38a:	f000 fe93 	bl	800b0b4 <ucdr_advance_buffer>
 800a38e:	2104      	movs	r1, #4
 800a390:	4620      	mov	r0, r4
 800a392:	f000 fdeb 	bl	800af6c <ucdr_check_buffer_available_for>
 800a396:	2800      	cmp	r0, #0
 800a398:	d138      	bne.n	800a40c <ucdr_serialize_endian_uint32_t+0x9c>
 800a39a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a39e:	42b7      	cmp	r7, r6
 800a3a0:	d92f      	bls.n	800a402 <ucdr_serialize_endian_uint32_t+0x92>
 800a3a2:	6923      	ldr	r3, [r4, #16]
 800a3a4:	60a7      	str	r7, [r4, #8]
 800a3a6:	1bbf      	subs	r7, r7, r6
 800a3a8:	443b      	add	r3, r7
 800a3aa:	f1c7 0904 	rsb	r9, r7, #4
 800a3ae:	6123      	str	r3, [r4, #16]
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fde6 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d04a      	beq.n	800a452 <ucdr_serialize_endian_uint32_t+0xe2>
 800a3bc:	2d01      	cmp	r5, #1
 800a3be:	d063      	beq.n	800a488 <ucdr_serialize_endian_uint32_t+0x118>
 800a3c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a3c4:	7033      	strb	r3, [r6, #0]
 800a3c6:	2f00      	cmp	r7, #0
 800a3c8:	d051      	beq.n	800a46e <ucdr_serialize_endian_uint32_t+0xfe>
 800a3ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a3ce:	7073      	strb	r3, [r6, #1]
 800a3d0:	2f01      	cmp	r7, #1
 800a3d2:	d050      	beq.n	800a476 <ucdr_serialize_endian_uint32_t+0x106>
 800a3d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3d8:	70b3      	strb	r3, [r6, #2]
 800a3da:	2f02      	cmp	r7, #2
 800a3dc:	d04f      	beq.n	800a47e <ucdr_serialize_endian_uint32_t+0x10e>
 800a3de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a3e2:	70f3      	strb	r3, [r6, #3]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	68a2      	ldr	r2, [r4, #8]
 800a3e8:	7da0      	ldrb	r0, [r4, #22]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	444a      	add	r2, r9
 800a3ee:	1bdb      	subs	r3, r3, r7
 800a3f0:	2104      	movs	r1, #4
 800a3f2:	f080 0001 	eor.w	r0, r0, #1
 800a3f6:	60a2      	str	r2, [r4, #8]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	7561      	strb	r1, [r4, #21]
 800a3fc:	b003      	add	sp, #12
 800a3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a402:	2104      	movs	r1, #4
 800a404:	4620      	mov	r0, r4
 800a406:	f000 fdbd 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a40a:	b1c8      	cbz	r0, 800a440 <ucdr_serialize_endian_uint32_t+0xd0>
 800a40c:	2d01      	cmp	r5, #1
 800a40e:	68a3      	ldr	r3, [r4, #8]
 800a410:	d01c      	beq.n	800a44c <ucdr_serialize_endian_uint32_t+0xdc>
 800a412:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a41e:	705a      	strb	r2, [r3, #1]
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a426:	709a      	strb	r2, [r3, #2]
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a42e:	70da      	strb	r2, [r3, #3]
 800a430:	68a2      	ldr	r2, [r4, #8]
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	3204      	adds	r2, #4
 800a436:	3304      	adds	r3, #4
 800a438:	2104      	movs	r1, #4
 800a43a:	60a2      	str	r2, [r4, #8]
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	7561      	strb	r1, [r4, #21]
 800a440:	7da0      	ldrb	r0, [r4, #22]
 800a442:	f080 0001 	eor.w	r0, r0, #1
 800a446:	b003      	add	sp, #12
 800a448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44c:	9a01      	ldr	r2, [sp, #4]
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e7ee      	b.n	800a430 <ucdr_serialize_endian_uint32_t+0xc0>
 800a452:	68a2      	ldr	r2, [r4, #8]
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	7da0      	ldrb	r0, [r4, #22]
 800a458:	f884 8015 	strb.w	r8, [r4, #21]
 800a45c:	1bd2      	subs	r2, r2, r7
 800a45e:	1bdb      	subs	r3, r3, r7
 800a460:	f080 0001 	eor.w	r0, r0, #1
 800a464:	60a2      	str	r2, [r4, #8]
 800a466:	6123      	str	r3, [r4, #16]
 800a468:	b003      	add	sp, #12
 800a46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	68a3      	ldr	r3, [r4, #8]
 800a480:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	e7ad      	b.n	800a3e4 <ucdr_serialize_endian_uint32_t+0x74>
 800a488:	ad01      	add	r5, sp, #4
 800a48a:	4629      	mov	r1, r5
 800a48c:	463a      	mov	r2, r7
 800a48e:	4630      	mov	r0, r6
 800a490:	f00a ff2b 	bl	80152ea <memcpy>
 800a494:	68a0      	ldr	r0, [r4, #8]
 800a496:	464a      	mov	r2, r9
 800a498:	19e9      	adds	r1, r5, r7
 800a49a:	f00a ff26 	bl	80152ea <memcpy>
 800a49e:	e7a1      	b.n	800a3e4 <ucdr_serialize_endian_uint32_t+0x74>

0800a4a0 <ucdr_deserialize_uint32_t>:
 800a4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	f000 fdbf 	bl	800b02c <ucdr_buffer_alignment>
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a4b6:	f000 fdfd 	bl	800b0b4 <ucdr_advance_buffer>
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 fd55 	bl	800af6c <ucdr_check_buffer_available_for>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d138      	bne.n	800a538 <ucdr_deserialize_uint32_t+0x98>
 800a4c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a4ca:	42b7      	cmp	r7, r6
 800a4cc:	d92f      	bls.n	800a52e <ucdr_deserialize_uint32_t+0x8e>
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	60a7      	str	r7, [r4, #8]
 800a4d2:	1bbf      	subs	r7, r7, r6
 800a4d4:	443b      	add	r3, r7
 800a4d6:	f1c7 0904 	rsb	r9, r7, #4
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	4649      	mov	r1, r9
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 fd50 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d046      	beq.n	800a576 <ucdr_deserialize_uint32_t+0xd6>
 800a4e8:	7d23      	ldrb	r3, [r4, #20]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d05c      	beq.n	800a5a8 <ucdr_deserialize_uint32_t+0x108>
 800a4ee:	78f3      	ldrb	r3, [r6, #3]
 800a4f0:	702b      	strb	r3, [r5, #0]
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	d04c      	beq.n	800a590 <ucdr_deserialize_uint32_t+0xf0>
 800a4f6:	78b3      	ldrb	r3, [r6, #2]
 800a4f8:	706b      	strb	r3, [r5, #1]
 800a4fa:	2f01      	cmp	r7, #1
 800a4fc:	f105 0302 	add.w	r3, r5, #2
 800a500:	d04a      	beq.n	800a598 <ucdr_deserialize_uint32_t+0xf8>
 800a502:	7873      	ldrb	r3, [r6, #1]
 800a504:	70ab      	strb	r3, [r5, #2]
 800a506:	2f02      	cmp	r7, #2
 800a508:	f105 0303 	add.w	r3, r5, #3
 800a50c:	d048      	beq.n	800a5a0 <ucdr_deserialize_uint32_t+0x100>
 800a50e:	7833      	ldrb	r3, [r6, #0]
 800a510:	70eb      	strb	r3, [r5, #3]
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	68a2      	ldr	r2, [r4, #8]
 800a516:	7da0      	ldrb	r0, [r4, #22]
 800a518:	2104      	movs	r1, #4
 800a51a:	3304      	adds	r3, #4
 800a51c:	444a      	add	r2, r9
 800a51e:	1bdb      	subs	r3, r3, r7
 800a520:	7561      	strb	r1, [r4, #21]
 800a522:	60a2      	str	r2, [r4, #8]
 800a524:	6123      	str	r3, [r4, #16]
 800a526:	f080 0001 	eor.w	r0, r0, #1
 800a52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a52e:	2104      	movs	r1, #4
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fd27 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a536:	b1b0      	cbz	r0, 800a566 <ucdr_deserialize_uint32_t+0xc6>
 800a538:	7d23      	ldrb	r3, [r4, #20]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	d017      	beq.n	800a570 <ucdr_deserialize_uint32_t+0xd0>
 800a540:	78db      	ldrb	r3, [r3, #3]
 800a542:	702b      	strb	r3, [r5, #0]
 800a544:	68a3      	ldr	r3, [r4, #8]
 800a546:	789b      	ldrb	r3, [r3, #2]
 800a548:	706b      	strb	r3, [r5, #1]
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	785b      	ldrb	r3, [r3, #1]
 800a54e:	70ab      	strb	r3, [r5, #2]
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	70eb      	strb	r3, [r5, #3]
 800a556:	68a2      	ldr	r2, [r4, #8]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	3204      	adds	r2, #4
 800a55c:	3304      	adds	r3, #4
 800a55e:	2104      	movs	r1, #4
 800a560:	60a2      	str	r2, [r4, #8]
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	7561      	strb	r1, [r4, #21]
 800a566:	7da0      	ldrb	r0, [r4, #22]
 800a568:	f080 0001 	eor.w	r0, r0, #1
 800a56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	e7ef      	b.n	800a556 <ucdr_deserialize_uint32_t+0xb6>
 800a576:	68a2      	ldr	r2, [r4, #8]
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	7da0      	ldrb	r0, [r4, #22]
 800a57c:	f884 8015 	strb.w	r8, [r4, #21]
 800a580:	1bd2      	subs	r2, r2, r7
 800a582:	1bdb      	subs	r3, r3, r7
 800a584:	60a2      	str	r2, [r4, #8]
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	f080 0001 	eor.w	r0, r0, #1
 800a58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	789b      	ldrb	r3, [r3, #2]
 800a594:	706b      	strb	r3, [r5, #1]
 800a596:	1cab      	adds	r3, r5, #2
 800a598:	68a2      	ldr	r2, [r4, #8]
 800a59a:	7852      	ldrb	r2, [r2, #1]
 800a59c:	f803 2b01 	strb.w	r2, [r3], #1
 800a5a0:	68a2      	ldr	r2, [r4, #8]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e7b4      	b.n	800a512 <ucdr_deserialize_uint32_t+0x72>
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f00a fe9c 	bl	80152ea <memcpy>
 800a5b2:	68a1      	ldr	r1, [r4, #8]
 800a5b4:	464a      	mov	r2, r9
 800a5b6:	19e8      	adds	r0, r5, r7
 800a5b8:	f00a fe97 	bl	80152ea <memcpy>
 800a5bc:	e7a9      	b.n	800a512 <ucdr_deserialize_uint32_t+0x72>
 800a5be:	bf00      	nop

0800a5c0 <ucdr_deserialize_endian_uint32_t>:
 800a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	460e      	mov	r6, r1
 800a5c6:	2104      	movs	r1, #4
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	4615      	mov	r5, r2
 800a5cc:	f000 fd2e 	bl	800b02c <ucdr_buffer_alignment>
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a5d8:	f000 fd6c 	bl	800b0b4 <ucdr_advance_buffer>
 800a5dc:	2104      	movs	r1, #4
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f000 fcc4 	bl	800af6c <ucdr_check_buffer_available_for>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d13c      	bne.n	800a662 <ucdr_deserialize_endian_uint32_t+0xa2>
 800a5e8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a5ec:	42bb      	cmp	r3, r7
 800a5ee:	d933      	bls.n	800a658 <ucdr_deserialize_endian_uint32_t+0x98>
 800a5f0:	eba3 0807 	sub.w	r8, r3, r7
 800a5f4:	60a3      	str	r3, [r4, #8]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	f1c8 0a04 	rsb	sl, r8, #4
 800a5fc:	4443      	add	r3, r8
 800a5fe:	6123      	str	r3, [r4, #16]
 800a600:	4651      	mov	r1, sl
 800a602:	4620      	mov	r0, r4
 800a604:	f000 fcbe 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d048      	beq.n	800a69e <ucdr_deserialize_endian_uint32_t+0xde>
 800a60c:	2e01      	cmp	r6, #1
 800a60e:	d061      	beq.n	800a6d4 <ucdr_deserialize_endian_uint32_t+0x114>
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	702b      	strb	r3, [r5, #0]
 800a614:	f1b8 0f00 	cmp.w	r8, #0
 800a618:	d050      	beq.n	800a6bc <ucdr_deserialize_endian_uint32_t+0xfc>
 800a61a:	78bb      	ldrb	r3, [r7, #2]
 800a61c:	706b      	strb	r3, [r5, #1]
 800a61e:	f1b8 0f01 	cmp.w	r8, #1
 800a622:	f105 0302 	add.w	r3, r5, #2
 800a626:	d04d      	beq.n	800a6c4 <ucdr_deserialize_endian_uint32_t+0x104>
 800a628:	787b      	ldrb	r3, [r7, #1]
 800a62a:	70ab      	strb	r3, [r5, #2]
 800a62c:	f1b8 0f02 	cmp.w	r8, #2
 800a630:	f105 0303 	add.w	r3, r5, #3
 800a634:	d04a      	beq.n	800a6cc <ucdr_deserialize_endian_uint32_t+0x10c>
 800a636:	783b      	ldrb	r3, [r7, #0]
 800a638:	70eb      	strb	r3, [r5, #3]
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	68a2      	ldr	r2, [r4, #8]
 800a63e:	7da0      	ldrb	r0, [r4, #22]
 800a640:	2104      	movs	r1, #4
 800a642:	3304      	adds	r3, #4
 800a644:	4452      	add	r2, sl
 800a646:	eba3 0308 	sub.w	r3, r3, r8
 800a64a:	7561      	strb	r1, [r4, #21]
 800a64c:	60a2      	str	r2, [r4, #8]
 800a64e:	6123      	str	r3, [r4, #16]
 800a650:	f080 0001 	eor.w	r0, r0, #1
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	2104      	movs	r1, #4
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fc92 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a660:	b1a8      	cbz	r0, 800a68e <ucdr_deserialize_endian_uint32_t+0xce>
 800a662:	2e01      	cmp	r6, #1
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	d017      	beq.n	800a698 <ucdr_deserialize_endian_uint32_t+0xd8>
 800a668:	78db      	ldrb	r3, [r3, #3]
 800a66a:	702b      	strb	r3, [r5, #0]
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	789b      	ldrb	r3, [r3, #2]
 800a670:	706b      	strb	r3, [r5, #1]
 800a672:	68a3      	ldr	r3, [r4, #8]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	70ab      	strb	r3, [r5, #2]
 800a678:	68a3      	ldr	r3, [r4, #8]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	70eb      	strb	r3, [r5, #3]
 800a67e:	68a2      	ldr	r2, [r4, #8]
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	3204      	adds	r2, #4
 800a684:	3304      	adds	r3, #4
 800a686:	2104      	movs	r1, #4
 800a688:	60a2      	str	r2, [r4, #8]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	7561      	strb	r1, [r4, #21]
 800a68e:	7da0      	ldrb	r0, [r4, #22]
 800a690:	f080 0001 	eor.w	r0, r0, #1
 800a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	602b      	str	r3, [r5, #0]
 800a69c:	e7ef      	b.n	800a67e <ucdr_deserialize_endian_uint32_t+0xbe>
 800a69e:	68a2      	ldr	r2, [r4, #8]
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	7da0      	ldrb	r0, [r4, #22]
 800a6a4:	f884 9015 	strb.w	r9, [r4, #21]
 800a6a8:	eba2 0208 	sub.w	r2, r2, r8
 800a6ac:	eba3 0308 	sub.w	r3, r3, r8
 800a6b0:	60a2      	str	r2, [r4, #8]
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	f080 0001 	eor.w	r0, r0, #1
 800a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6bc:	68a3      	ldr	r3, [r4, #8]
 800a6be:	789b      	ldrb	r3, [r3, #2]
 800a6c0:	706b      	strb	r3, [r5, #1]
 800a6c2:	1cab      	adds	r3, r5, #2
 800a6c4:	68a2      	ldr	r2, [r4, #8]
 800a6c6:	7852      	ldrb	r2, [r2, #1]
 800a6c8:	f803 2b01 	strb.w	r2, [r3], #1
 800a6cc:	68a2      	ldr	r2, [r4, #8]
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e7b2      	b.n	800a63a <ucdr_deserialize_endian_uint32_t+0x7a>
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4642      	mov	r2, r8
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f00a fe06 	bl	80152ea <memcpy>
 800a6de:	68a1      	ldr	r1, [r4, #8]
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	eb05 0008 	add.w	r0, r5, r8
 800a6e6:	f00a fe00 	bl	80152ea <memcpy>
 800a6ea:	e7a6      	b.n	800a63a <ucdr_deserialize_endian_uint32_t+0x7a>

0800a6ec <ucdr_serialize_uint64_t>:
 800a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f0:	2108      	movs	r1, #8
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	e9cd 2300 	strd	r2, r3, [sp]
 800a6fa:	f000 fc97 	bl	800b02c <ucdr_buffer_alignment>
 800a6fe:	4601      	mov	r1, r0
 800a700:	4620      	mov	r0, r4
 800a702:	7d67      	ldrb	r7, [r4, #21]
 800a704:	f000 fcd6 	bl	800b0b4 <ucdr_advance_buffer>
 800a708:	2108      	movs	r1, #8
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fc2e 	bl	800af6c <ucdr_check_buffer_available_for>
 800a710:	2800      	cmp	r0, #0
 800a712:	d14e      	bne.n	800a7b2 <ucdr_serialize_uint64_t+0xc6>
 800a714:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a718:	42ab      	cmp	r3, r5
 800a71a:	d945      	bls.n	800a7a8 <ucdr_serialize_uint64_t+0xbc>
 800a71c:	1b5e      	subs	r6, r3, r5
 800a71e:	60a3      	str	r3, [r4, #8]
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	f1c6 0808 	rsb	r8, r6, #8
 800a726:	4433      	add	r3, r6
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	4641      	mov	r1, r8
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 fc29 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a732:	2800      	cmp	r0, #0
 800a734:	d074      	beq.n	800a820 <ucdr_serialize_uint64_t+0x134>
 800a736:	7d23      	ldrb	r3, [r4, #20]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	f000 809b 	beq.w	800a874 <ucdr_serialize_uint64_t+0x188>
 800a73e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a742:	702b      	strb	r3, [r5, #0]
 800a744:	2e00      	cmp	r6, #0
 800a746:	d078      	beq.n	800a83a <ucdr_serialize_uint64_t+0x14e>
 800a748:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a74c:	706b      	strb	r3, [r5, #1]
 800a74e:	2e01      	cmp	r6, #1
 800a750:	d077      	beq.n	800a842 <ucdr_serialize_uint64_t+0x156>
 800a752:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a756:	70ab      	strb	r3, [r5, #2]
 800a758:	2e02      	cmp	r6, #2
 800a75a:	d076      	beq.n	800a84a <ucdr_serialize_uint64_t+0x15e>
 800a75c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a760:	70eb      	strb	r3, [r5, #3]
 800a762:	2e03      	cmp	r6, #3
 800a764:	d075      	beq.n	800a852 <ucdr_serialize_uint64_t+0x166>
 800a766:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a76a:	712b      	strb	r3, [r5, #4]
 800a76c:	2e04      	cmp	r6, #4
 800a76e:	d074      	beq.n	800a85a <ucdr_serialize_uint64_t+0x16e>
 800a770:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a774:	716b      	strb	r3, [r5, #5]
 800a776:	2e05      	cmp	r6, #5
 800a778:	d073      	beq.n	800a862 <ucdr_serialize_uint64_t+0x176>
 800a77a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a77e:	71ab      	strb	r3, [r5, #6]
 800a780:	2e06      	cmp	r6, #6
 800a782:	d072      	beq.n	800a86a <ucdr_serialize_uint64_t+0x17e>
 800a784:	f89d 3000 	ldrb.w	r3, [sp]
 800a788:	71eb      	strb	r3, [r5, #7]
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	68a2      	ldr	r2, [r4, #8]
 800a78e:	7da0      	ldrb	r0, [r4, #22]
 800a790:	3308      	adds	r3, #8
 800a792:	1b9e      	subs	r6, r3, r6
 800a794:	4442      	add	r2, r8
 800a796:	2308      	movs	r3, #8
 800a798:	f080 0001 	eor.w	r0, r0, #1
 800a79c:	60a2      	str	r2, [r4, #8]
 800a79e:	6126      	str	r6, [r4, #16]
 800a7a0:	7563      	strb	r3, [r4, #21]
 800a7a2:	b002      	add	sp, #8
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	2108      	movs	r1, #8
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 fbea 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a7b0:	b350      	cbz	r0, 800a808 <ucdr_serialize_uint64_t+0x11c>
 800a7b2:	7d23      	ldrb	r3, [r4, #20]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d02d      	beq.n	800a814 <ucdr_serialize_uint64_t+0x128>
 800a7b8:	68a3      	ldr	r3, [r4, #8]
 800a7ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	68a3      	ldr	r3, [r4, #8]
 800a7c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a7c6:	705a      	strb	r2, [r3, #1]
 800a7c8:	68a3      	ldr	r3, [r4, #8]
 800a7ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a7ce:	709a      	strb	r2, [r3, #2]
 800a7d0:	68a3      	ldr	r3, [r4, #8]
 800a7d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a7d6:	70da      	strb	r2, [r3, #3]
 800a7d8:	68a3      	ldr	r3, [r4, #8]
 800a7da:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a7de:	711a      	strb	r2, [r3, #4]
 800a7e0:	68a3      	ldr	r3, [r4, #8]
 800a7e2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a7e6:	715a      	strb	r2, [r3, #5]
 800a7e8:	68a3      	ldr	r3, [r4, #8]
 800a7ea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a7ee:	719a      	strb	r2, [r3, #6]
 800a7f0:	68a3      	ldr	r3, [r4, #8]
 800a7f2:	f89d 2000 	ldrb.w	r2, [sp]
 800a7f6:	71da      	strb	r2, [r3, #7]
 800a7f8:	68a2      	ldr	r2, [r4, #8]
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	3208      	adds	r2, #8
 800a7fe:	3308      	adds	r3, #8
 800a800:	2108      	movs	r1, #8
 800a802:	60a2      	str	r2, [r4, #8]
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	7561      	strb	r1, [r4, #21]
 800a808:	7da0      	ldrb	r0, [r4, #22]
 800a80a:	f080 0001 	eor.w	r0, r0, #1
 800a80e:	b002      	add	sp, #8
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	466b      	mov	r3, sp
 800a816:	cb03      	ldmia	r3!, {r0, r1}
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	6018      	str	r0, [r3, #0]
 800a81c:	6059      	str	r1, [r3, #4]
 800a81e:	e7eb      	b.n	800a7f8 <ucdr_serialize_uint64_t+0x10c>
 800a820:	68a2      	ldr	r2, [r4, #8]
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	7da0      	ldrb	r0, [r4, #22]
 800a826:	7567      	strb	r7, [r4, #21]
 800a828:	1b92      	subs	r2, r2, r6
 800a82a:	1b9b      	subs	r3, r3, r6
 800a82c:	f080 0001 	eor.w	r0, r0, #1
 800a830:	60a2      	str	r2, [r4, #8]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	b002      	add	sp, #8
 800a836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	68a3      	ldr	r3, [r4, #8]
 800a84c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	68a3      	ldr	r3, [r4, #8]
 800a864:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	f89d 2000 	ldrb.w	r2, [sp]
 800a870:	701a      	strb	r2, [r3, #0]
 800a872:	e78a      	b.n	800a78a <ucdr_serialize_uint64_t+0x9e>
 800a874:	4628      	mov	r0, r5
 800a876:	466d      	mov	r5, sp
 800a878:	4629      	mov	r1, r5
 800a87a:	4632      	mov	r2, r6
 800a87c:	f00a fd35 	bl	80152ea <memcpy>
 800a880:	68a0      	ldr	r0, [r4, #8]
 800a882:	4642      	mov	r2, r8
 800a884:	19a9      	adds	r1, r5, r6
 800a886:	f00a fd30 	bl	80152ea <memcpy>
 800a88a:	e77e      	b.n	800a78a <ucdr_serialize_uint64_t+0x9e>

0800a88c <ucdr_serialize_int8_t>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	460d      	mov	r5, r1
 800a890:	2101      	movs	r1, #1
 800a892:	4604      	mov	r4, r0
 800a894:	f000 fb76 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a898:	b148      	cbz	r0, 800a8ae <ucdr_serialize_int8_t+0x22>
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	701d      	strb	r5, [r3, #0]
 800a89e:	68a2      	ldr	r2, [r4, #8]
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	440a      	add	r2, r1
 800a8a6:	440b      	add	r3, r1
 800a8a8:	60a2      	str	r2, [r4, #8]
 800a8aa:	6123      	str	r3, [r4, #16]
 800a8ac:	7561      	strb	r1, [r4, #21]
 800a8ae:	7da0      	ldrb	r0, [r4, #22]
 800a8b0:	f080 0001 	eor.w	r0, r0, #1
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop

0800a8b8 <ucdr_deserialize_int8_t>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	2101      	movs	r1, #1
 800a8be:	4604      	mov	r4, r0
 800a8c0:	f000 fb60 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a8c4:	b150      	cbz	r0, 800a8dc <ucdr_deserialize_int8_t+0x24>
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	702b      	strb	r3, [r5, #0]
 800a8cc:	68a2      	ldr	r2, [r4, #8]
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	440a      	add	r2, r1
 800a8d4:	440b      	add	r3, r1
 800a8d6:	60a2      	str	r2, [r4, #8]
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	7561      	strb	r1, [r4, #21]
 800a8dc:	7da0      	ldrb	r0, [r4, #22]
 800a8de:	f080 0001 	eor.w	r0, r0, #1
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}

0800a8e4 <ucdr_serialize_int16_t>:
 800a8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	2102      	movs	r1, #2
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a8f4:	f000 fb9a 	bl	800b02c <ucdr_buffer_alignment>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	7d67      	ldrb	r7, [r4, #21]
 800a8fe:	f000 fbd9 	bl	800b0b4 <ucdr_advance_buffer>
 800a902:	2102      	movs	r1, #2
 800a904:	4620      	mov	r0, r4
 800a906:	f000 fb31 	bl	800af6c <ucdr_check_buffer_available_for>
 800a90a:	bb78      	cbnz	r0, 800a96c <ucdr_serialize_int16_t+0x88>
 800a90c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a910:	42ab      	cmp	r3, r5
 800a912:	d926      	bls.n	800a962 <ucdr_serialize_int16_t+0x7e>
 800a914:	1b5e      	subs	r6, r3, r5
 800a916:	60a3      	str	r3, [r4, #8]
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	f1c6 0802 	rsb	r8, r6, #2
 800a91e:	4433      	add	r3, r6
 800a920:	6123      	str	r3, [r4, #16]
 800a922:	4641      	mov	r1, r8
 800a924:	4620      	mov	r0, r4
 800a926:	f000 fb2d 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d03b      	beq.n	800a9a6 <ucdr_serialize_int16_t+0xc2>
 800a92e:	7d23      	ldrb	r3, [r4, #20]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d04a      	beq.n	800a9ca <ucdr_serialize_int16_t+0xe6>
 800a934:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a938:	702b      	strb	r3, [r5, #0]
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	d040      	beq.n	800a9c0 <ucdr_serialize_int16_t+0xdc>
 800a93e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a942:	706b      	strb	r3, [r5, #1]
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	68a2      	ldr	r2, [r4, #8]
 800a948:	7da0      	ldrb	r0, [r4, #22]
 800a94a:	3302      	adds	r3, #2
 800a94c:	1b9e      	subs	r6, r3, r6
 800a94e:	4442      	add	r2, r8
 800a950:	2302      	movs	r3, #2
 800a952:	f080 0001 	eor.w	r0, r0, #1
 800a956:	60a2      	str	r2, [r4, #8]
 800a958:	6126      	str	r6, [r4, #16]
 800a95a:	7563      	strb	r3, [r4, #21]
 800a95c:	b002      	add	sp, #8
 800a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a962:	2102      	movs	r1, #2
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fb0d 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800a96a:	b190      	cbz	r0, 800a992 <ucdr_serialize_int16_t+0xae>
 800a96c:	7d23      	ldrb	r3, [r4, #20]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	68a3      	ldr	r3, [r4, #8]
 800a972:	d014      	beq.n	800a99e <ucdr_serialize_int16_t+0xba>
 800a974:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a980:	705a      	strb	r2, [r3, #1]
 800a982:	68a2      	ldr	r2, [r4, #8]
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	3202      	adds	r2, #2
 800a988:	3302      	adds	r3, #2
 800a98a:	2102      	movs	r1, #2
 800a98c:	60a2      	str	r2, [r4, #8]
 800a98e:	6123      	str	r3, [r4, #16]
 800a990:	7561      	strb	r1, [r4, #21]
 800a992:	7da0      	ldrb	r0, [r4, #22]
 800a994:	f080 0001 	eor.w	r0, r0, #1
 800a998:	b002      	add	sp, #8
 800a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a99e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a9a2:	801a      	strh	r2, [r3, #0]
 800a9a4:	e7ed      	b.n	800a982 <ucdr_serialize_int16_t+0x9e>
 800a9a6:	68a2      	ldr	r2, [r4, #8]
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	7da0      	ldrb	r0, [r4, #22]
 800a9ac:	7567      	strb	r7, [r4, #21]
 800a9ae:	1b92      	subs	r2, r2, r6
 800a9b0:	1b9b      	subs	r3, r3, r6
 800a9b2:	f080 0001 	eor.w	r0, r0, #1
 800a9b6:	60a2      	str	r2, [r4, #8]
 800a9b8:	6123      	str	r3, [r4, #16]
 800a9ba:	b002      	add	sp, #8
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e7bc      	b.n	800a944 <ucdr_serialize_int16_t+0x60>
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f10d 0506 	add.w	r5, sp, #6
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	f00a fc89 	bl	80152ea <memcpy>
 800a9d8:	68a0      	ldr	r0, [r4, #8]
 800a9da:	4642      	mov	r2, r8
 800a9dc:	19a9      	adds	r1, r5, r6
 800a9de:	f00a fc84 	bl	80152ea <memcpy>
 800a9e2:	e7af      	b.n	800a944 <ucdr_serialize_int16_t+0x60>

0800a9e4 <ucdr_deserialize_int16_t>:
 800a9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	2102      	movs	r1, #2
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	f000 fb1d 	bl	800b02c <ucdr_buffer_alignment>
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a9fa:	f000 fb5b 	bl	800b0b4 <ucdr_advance_buffer>
 800a9fe:	2102      	movs	r1, #2
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 fab3 	bl	800af6c <ucdr_check_buffer_available_for>
 800aa06:	bb60      	cbnz	r0, 800aa62 <ucdr_deserialize_int16_t+0x7e>
 800aa08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa0c:	42be      	cmp	r6, r7
 800aa0e:	d923      	bls.n	800aa58 <ucdr_deserialize_int16_t+0x74>
 800aa10:	6923      	ldr	r3, [r4, #16]
 800aa12:	60a6      	str	r6, [r4, #8]
 800aa14:	1bf6      	subs	r6, r6, r7
 800aa16:	4433      	add	r3, r6
 800aa18:	f1c6 0902 	rsb	r9, r6, #2
 800aa1c:	6123      	str	r3, [r4, #16]
 800aa1e:	4649      	mov	r1, r9
 800aa20:	4620      	mov	r0, r4
 800aa22:	f000 faaf 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d034      	beq.n	800aa94 <ucdr_deserialize_int16_t+0xb0>
 800aa2a:	7d23      	ldrb	r3, [r4, #20]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d042      	beq.n	800aab6 <ucdr_deserialize_int16_t+0xd2>
 800aa30:	787b      	ldrb	r3, [r7, #1]
 800aa32:	702b      	strb	r3, [r5, #0]
 800aa34:	2e00      	cmp	r6, #0
 800aa36:	d03a      	beq.n	800aaae <ucdr_deserialize_int16_t+0xca>
 800aa38:	783b      	ldrb	r3, [r7, #0]
 800aa3a:	706b      	strb	r3, [r5, #1]
 800aa3c:	6923      	ldr	r3, [r4, #16]
 800aa3e:	68a2      	ldr	r2, [r4, #8]
 800aa40:	7da0      	ldrb	r0, [r4, #22]
 800aa42:	2102      	movs	r1, #2
 800aa44:	3302      	adds	r3, #2
 800aa46:	444a      	add	r2, r9
 800aa48:	1b9b      	subs	r3, r3, r6
 800aa4a:	7561      	strb	r1, [r4, #21]
 800aa4c:	60a2      	str	r2, [r4, #8]
 800aa4e:	6123      	str	r3, [r4, #16]
 800aa50:	f080 0001 	eor.w	r0, r0, #1
 800aa54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa58:	2102      	movs	r1, #2
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 fa92 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800aa60:	b180      	cbz	r0, 800aa84 <ucdr_deserialize_int16_t+0xa0>
 800aa62:	7d23      	ldrb	r3, [r4, #20]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	d011      	beq.n	800aa8e <ucdr_deserialize_int16_t+0xaa>
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	702b      	strb	r3, [r5, #0]
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	706b      	strb	r3, [r5, #1]
 800aa74:	68a2      	ldr	r2, [r4, #8]
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	3202      	adds	r2, #2
 800aa7a:	3302      	adds	r3, #2
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	60a2      	str	r2, [r4, #8]
 800aa80:	6123      	str	r3, [r4, #16]
 800aa82:	7561      	strb	r1, [r4, #21]
 800aa84:	7da0      	ldrb	r0, [r4, #22]
 800aa86:	f080 0001 	eor.w	r0, r0, #1
 800aa8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	802b      	strh	r3, [r5, #0]
 800aa92:	e7ef      	b.n	800aa74 <ucdr_deserialize_int16_t+0x90>
 800aa94:	68a2      	ldr	r2, [r4, #8]
 800aa96:	6923      	ldr	r3, [r4, #16]
 800aa98:	7da0      	ldrb	r0, [r4, #22]
 800aa9a:	f884 8015 	strb.w	r8, [r4, #21]
 800aa9e:	1b92      	subs	r2, r2, r6
 800aaa0:	1b9b      	subs	r3, r3, r6
 800aaa2:	60a2      	str	r2, [r4, #8]
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	f080 0001 	eor.w	r0, r0, #1
 800aaaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	706b      	strb	r3, [r5, #1]
 800aab4:	e7c2      	b.n	800aa3c <ucdr_deserialize_int16_t+0x58>
 800aab6:	4639      	mov	r1, r7
 800aab8:	4632      	mov	r2, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	f00a fc15 	bl	80152ea <memcpy>
 800aac0:	68a1      	ldr	r1, [r4, #8]
 800aac2:	464a      	mov	r2, r9
 800aac4:	19a8      	adds	r0, r5, r6
 800aac6:	f00a fc10 	bl	80152ea <memcpy>
 800aaca:	e7b7      	b.n	800aa3c <ucdr_deserialize_int16_t+0x58>

0800aacc <ucdr_serialize_int32_t>:
 800aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	4604      	mov	r4, r0
 800aad4:	9101      	str	r1, [sp, #4]
 800aad6:	2104      	movs	r1, #4
 800aad8:	f000 faa8 	bl	800b02c <ucdr_buffer_alignment>
 800aadc:	4601      	mov	r1, r0
 800aade:	4620      	mov	r0, r4
 800aae0:	7d67      	ldrb	r7, [r4, #21]
 800aae2:	f000 fae7 	bl	800b0b4 <ucdr_advance_buffer>
 800aae6:	2104      	movs	r1, #4
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fa3f 	bl	800af6c <ucdr_check_buffer_available_for>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d139      	bne.n	800ab66 <ucdr_serialize_int32_t+0x9a>
 800aaf2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aaf6:	42ab      	cmp	r3, r5
 800aaf8:	d930      	bls.n	800ab5c <ucdr_serialize_int32_t+0x90>
 800aafa:	1b5e      	subs	r6, r3, r5
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	f1c6 0804 	rsb	r8, r6, #4
 800ab04:	4433      	add	r3, r6
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	4641      	mov	r1, r8
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fa3a 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d04c      	beq.n	800abae <ucdr_serialize_int32_t+0xe2>
 800ab14:	7d23      	ldrb	r3, [r4, #20]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d063      	beq.n	800abe2 <ucdr_serialize_int32_t+0x116>
 800ab1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab1e:	702b      	strb	r3, [r5, #0]
 800ab20:	2e00      	cmp	r6, #0
 800ab22:	d051      	beq.n	800abc8 <ucdr_serialize_int32_t+0xfc>
 800ab24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab28:	706b      	strb	r3, [r5, #1]
 800ab2a:	2e01      	cmp	r6, #1
 800ab2c:	d050      	beq.n	800abd0 <ucdr_serialize_int32_t+0x104>
 800ab2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab32:	70ab      	strb	r3, [r5, #2]
 800ab34:	2e02      	cmp	r6, #2
 800ab36:	d04f      	beq.n	800abd8 <ucdr_serialize_int32_t+0x10c>
 800ab38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ab3c:	70eb      	strb	r3, [r5, #3]
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	68a2      	ldr	r2, [r4, #8]
 800ab42:	7da0      	ldrb	r0, [r4, #22]
 800ab44:	3304      	adds	r3, #4
 800ab46:	1b9e      	subs	r6, r3, r6
 800ab48:	4442      	add	r2, r8
 800ab4a:	2304      	movs	r3, #4
 800ab4c:	f080 0001 	eor.w	r0, r0, #1
 800ab50:	60a2      	str	r2, [r4, #8]
 800ab52:	6126      	str	r6, [r4, #16]
 800ab54:	7563      	strb	r3, [r4, #21]
 800ab56:	b002      	add	sp, #8
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5c:	2104      	movs	r1, #4
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 fa10 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800ab64:	b1d0      	cbz	r0, 800ab9c <ucdr_serialize_int32_t+0xd0>
 800ab66:	7d23      	ldrb	r3, [r4, #20]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	68a3      	ldr	r3, [r4, #8]
 800ab6c:	d01c      	beq.n	800aba8 <ucdr_serialize_int32_t+0xdc>
 800ab6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ab72:	701a      	strb	r2, [r3, #0]
 800ab74:	68a3      	ldr	r3, [r4, #8]
 800ab76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab7a:	705a      	strb	r2, [r3, #1]
 800ab7c:	68a3      	ldr	r3, [r4, #8]
 800ab7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ab82:	709a      	strb	r2, [r3, #2]
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ab8a:	70da      	strb	r2, [r3, #3]
 800ab8c:	68a2      	ldr	r2, [r4, #8]
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	3204      	adds	r2, #4
 800ab92:	3304      	adds	r3, #4
 800ab94:	2104      	movs	r1, #4
 800ab96:	60a2      	str	r2, [r4, #8]
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	7561      	strb	r1, [r4, #21]
 800ab9c:	7da0      	ldrb	r0, [r4, #22]
 800ab9e:	f080 0001 	eor.w	r0, r0, #1
 800aba2:	b002      	add	sp, #8
 800aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba8:	9a01      	ldr	r2, [sp, #4]
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	e7ee      	b.n	800ab8c <ucdr_serialize_int32_t+0xc0>
 800abae:	68a2      	ldr	r2, [r4, #8]
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	7da0      	ldrb	r0, [r4, #22]
 800abb4:	7567      	strb	r7, [r4, #21]
 800abb6:	1b92      	subs	r2, r2, r6
 800abb8:	1b9b      	subs	r3, r3, r6
 800abba:	f080 0001 	eor.w	r0, r0, #1
 800abbe:	60a2      	str	r2, [r4, #8]
 800abc0:	6123      	str	r3, [r4, #16]
 800abc2:	b002      	add	sp, #8
 800abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	68a3      	ldr	r3, [r4, #8]
 800abd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800abd6:	701a      	strb	r2, [r3, #0]
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abde:	701a      	strb	r2, [r3, #0]
 800abe0:	e7ad      	b.n	800ab3e <ucdr_serialize_int32_t+0x72>
 800abe2:	4628      	mov	r0, r5
 800abe4:	ad01      	add	r5, sp, #4
 800abe6:	4629      	mov	r1, r5
 800abe8:	4632      	mov	r2, r6
 800abea:	f00a fb7e 	bl	80152ea <memcpy>
 800abee:	68a0      	ldr	r0, [r4, #8]
 800abf0:	4642      	mov	r2, r8
 800abf2:	19a9      	adds	r1, r5, r6
 800abf4:	f00a fb79 	bl	80152ea <memcpy>
 800abf8:	e7a1      	b.n	800ab3e <ucdr_serialize_int32_t+0x72>
 800abfa:	bf00      	nop

0800abfc <ucdr_deserialize_int32_t>:
 800abfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac00:	460d      	mov	r5, r1
 800ac02:	2104      	movs	r1, #4
 800ac04:	4604      	mov	r4, r0
 800ac06:	f000 fa11 	bl	800b02c <ucdr_buffer_alignment>
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac12:	f000 fa4f 	bl	800b0b4 <ucdr_advance_buffer>
 800ac16:	2104      	movs	r1, #4
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 f9a7 	bl	800af6c <ucdr_check_buffer_available_for>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d138      	bne.n	800ac94 <ucdr_deserialize_int32_t+0x98>
 800ac22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ac26:	42b7      	cmp	r7, r6
 800ac28:	d92f      	bls.n	800ac8a <ucdr_deserialize_int32_t+0x8e>
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	60a7      	str	r7, [r4, #8]
 800ac2e:	1bbf      	subs	r7, r7, r6
 800ac30:	443b      	add	r3, r7
 800ac32:	f1c7 0904 	rsb	r9, r7, #4
 800ac36:	6123      	str	r3, [r4, #16]
 800ac38:	4649      	mov	r1, r9
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 f9a2 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d046      	beq.n	800acd2 <ucdr_deserialize_int32_t+0xd6>
 800ac44:	7d23      	ldrb	r3, [r4, #20]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d05c      	beq.n	800ad04 <ucdr_deserialize_int32_t+0x108>
 800ac4a:	78f3      	ldrb	r3, [r6, #3]
 800ac4c:	702b      	strb	r3, [r5, #0]
 800ac4e:	2f00      	cmp	r7, #0
 800ac50:	d04c      	beq.n	800acec <ucdr_deserialize_int32_t+0xf0>
 800ac52:	78b3      	ldrb	r3, [r6, #2]
 800ac54:	706b      	strb	r3, [r5, #1]
 800ac56:	2f01      	cmp	r7, #1
 800ac58:	f105 0302 	add.w	r3, r5, #2
 800ac5c:	d04a      	beq.n	800acf4 <ucdr_deserialize_int32_t+0xf8>
 800ac5e:	7873      	ldrb	r3, [r6, #1]
 800ac60:	70ab      	strb	r3, [r5, #2]
 800ac62:	2f02      	cmp	r7, #2
 800ac64:	f105 0303 	add.w	r3, r5, #3
 800ac68:	d048      	beq.n	800acfc <ucdr_deserialize_int32_t+0x100>
 800ac6a:	7833      	ldrb	r3, [r6, #0]
 800ac6c:	70eb      	strb	r3, [r5, #3]
 800ac6e:	6923      	ldr	r3, [r4, #16]
 800ac70:	68a2      	ldr	r2, [r4, #8]
 800ac72:	7da0      	ldrb	r0, [r4, #22]
 800ac74:	2104      	movs	r1, #4
 800ac76:	3304      	adds	r3, #4
 800ac78:	444a      	add	r2, r9
 800ac7a:	1bdb      	subs	r3, r3, r7
 800ac7c:	7561      	strb	r1, [r4, #21]
 800ac7e:	60a2      	str	r2, [r4, #8]
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	f080 0001 	eor.w	r0, r0, #1
 800ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8a:	2104      	movs	r1, #4
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 f979 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800ac92:	b1b0      	cbz	r0, 800acc2 <ucdr_deserialize_int32_t+0xc6>
 800ac94:	7d23      	ldrb	r3, [r4, #20]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	68a3      	ldr	r3, [r4, #8]
 800ac9a:	d017      	beq.n	800accc <ucdr_deserialize_int32_t+0xd0>
 800ac9c:	78db      	ldrb	r3, [r3, #3]
 800ac9e:	702b      	strb	r3, [r5, #0]
 800aca0:	68a3      	ldr	r3, [r4, #8]
 800aca2:	789b      	ldrb	r3, [r3, #2]
 800aca4:	706b      	strb	r3, [r5, #1]
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	70ab      	strb	r3, [r5, #2]
 800acac:	68a3      	ldr	r3, [r4, #8]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	70eb      	strb	r3, [r5, #3]
 800acb2:	68a2      	ldr	r2, [r4, #8]
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	3204      	adds	r2, #4
 800acb8:	3304      	adds	r3, #4
 800acba:	2104      	movs	r1, #4
 800acbc:	60a2      	str	r2, [r4, #8]
 800acbe:	6123      	str	r3, [r4, #16]
 800acc0:	7561      	strb	r1, [r4, #21]
 800acc2:	7da0      	ldrb	r0, [r4, #22]
 800acc4:	f080 0001 	eor.w	r0, r0, #1
 800acc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	e7ef      	b.n	800acb2 <ucdr_deserialize_int32_t+0xb6>
 800acd2:	68a2      	ldr	r2, [r4, #8]
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	7da0      	ldrb	r0, [r4, #22]
 800acd8:	f884 8015 	strb.w	r8, [r4, #21]
 800acdc:	1bd2      	subs	r2, r2, r7
 800acde:	1bdb      	subs	r3, r3, r7
 800ace0:	60a2      	str	r2, [r4, #8]
 800ace2:	6123      	str	r3, [r4, #16]
 800ace4:	f080 0001 	eor.w	r0, r0, #1
 800ace8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acec:	68a3      	ldr	r3, [r4, #8]
 800acee:	789b      	ldrb	r3, [r3, #2]
 800acf0:	706b      	strb	r3, [r5, #1]
 800acf2:	1cab      	adds	r3, r5, #2
 800acf4:	68a2      	ldr	r2, [r4, #8]
 800acf6:	7852      	ldrb	r2, [r2, #1]
 800acf8:	f803 2b01 	strb.w	r2, [r3], #1
 800acfc:	68a2      	ldr	r2, [r4, #8]
 800acfe:	7812      	ldrb	r2, [r2, #0]
 800ad00:	701a      	strb	r2, [r3, #0]
 800ad02:	e7b4      	b.n	800ac6e <ucdr_deserialize_int32_t+0x72>
 800ad04:	4631      	mov	r1, r6
 800ad06:	463a      	mov	r2, r7
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f00a faee 	bl	80152ea <memcpy>
 800ad0e:	68a1      	ldr	r1, [r4, #8]
 800ad10:	464a      	mov	r2, r9
 800ad12:	19e8      	adds	r0, r5, r7
 800ad14:	f00a fae9 	bl	80152ea <memcpy>
 800ad18:	e7a9      	b.n	800ac6e <ucdr_deserialize_int32_t+0x72>
 800ad1a:	bf00      	nop

0800ad1c <ucdr_serialize_float>:
 800ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad20:	2104      	movs	r1, #4
 800ad22:	b082      	sub	sp, #8
 800ad24:	4604      	mov	r4, r0
 800ad26:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ad2a:	f000 f97f 	bl	800b02c <ucdr_buffer_alignment>
 800ad2e:	4601      	mov	r1, r0
 800ad30:	4620      	mov	r0, r4
 800ad32:	7d67      	ldrb	r7, [r4, #21]
 800ad34:	f000 f9be 	bl	800b0b4 <ucdr_advance_buffer>
 800ad38:	2104      	movs	r1, #4
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 f916 	bl	800af6c <ucdr_check_buffer_available_for>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d139      	bne.n	800adb8 <ucdr_serialize_float+0x9c>
 800ad44:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ad48:	42ab      	cmp	r3, r5
 800ad4a:	d930      	bls.n	800adae <ucdr_serialize_float+0x92>
 800ad4c:	1b5e      	subs	r6, r3, r5
 800ad4e:	60a3      	str	r3, [r4, #8]
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	f1c6 0804 	rsb	r8, r6, #4
 800ad56:	4433      	add	r3, r6
 800ad58:	6123      	str	r3, [r4, #16]
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 f911 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d04c      	beq.n	800ae00 <ucdr_serialize_float+0xe4>
 800ad66:	7d23      	ldrb	r3, [r4, #20]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d063      	beq.n	800ae34 <ucdr_serialize_float+0x118>
 800ad6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad70:	702b      	strb	r3, [r5, #0]
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d051      	beq.n	800ae1a <ucdr_serialize_float+0xfe>
 800ad76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad7a:	706b      	strb	r3, [r5, #1]
 800ad7c:	2e01      	cmp	r6, #1
 800ad7e:	d050      	beq.n	800ae22 <ucdr_serialize_float+0x106>
 800ad80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad84:	70ab      	strb	r3, [r5, #2]
 800ad86:	2e02      	cmp	r6, #2
 800ad88:	d04f      	beq.n	800ae2a <ucdr_serialize_float+0x10e>
 800ad8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad8e:	70eb      	strb	r3, [r5, #3]
 800ad90:	6923      	ldr	r3, [r4, #16]
 800ad92:	68a2      	ldr	r2, [r4, #8]
 800ad94:	7da0      	ldrb	r0, [r4, #22]
 800ad96:	3304      	adds	r3, #4
 800ad98:	1b9e      	subs	r6, r3, r6
 800ad9a:	4442      	add	r2, r8
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	f080 0001 	eor.w	r0, r0, #1
 800ada2:	60a2      	str	r2, [r4, #8]
 800ada4:	6126      	str	r6, [r4, #16]
 800ada6:	7563      	strb	r3, [r4, #21]
 800ada8:	b002      	add	sp, #8
 800adaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adae:	2104      	movs	r1, #4
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 f8e7 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800adb6:	b1d0      	cbz	r0, 800adee <ucdr_serialize_float+0xd2>
 800adb8:	7d23      	ldrb	r3, [r4, #20]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	68a3      	ldr	r3, [r4, #8]
 800adbe:	d01c      	beq.n	800adfa <ucdr_serialize_float+0xde>
 800adc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	68a3      	ldr	r3, [r4, #8]
 800adc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800adcc:	705a      	strb	r2, [r3, #1]
 800adce:	68a3      	ldr	r3, [r4, #8]
 800add0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800add4:	709a      	strb	r2, [r3, #2]
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800addc:	70da      	strb	r2, [r3, #3]
 800adde:	68a2      	ldr	r2, [r4, #8]
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	3204      	adds	r2, #4
 800ade4:	3304      	adds	r3, #4
 800ade6:	2104      	movs	r1, #4
 800ade8:	60a2      	str	r2, [r4, #8]
 800adea:	6123      	str	r3, [r4, #16]
 800adec:	7561      	strb	r1, [r4, #21]
 800adee:	7da0      	ldrb	r0, [r4, #22]
 800adf0:	f080 0001 	eor.w	r0, r0, #1
 800adf4:	b002      	add	sp, #8
 800adf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfa:	9a01      	ldr	r2, [sp, #4]
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	e7ee      	b.n	800adde <ucdr_serialize_float+0xc2>
 800ae00:	68a2      	ldr	r2, [r4, #8]
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	7da0      	ldrb	r0, [r4, #22]
 800ae06:	7567      	strb	r7, [r4, #21]
 800ae08:	1b92      	subs	r2, r2, r6
 800ae0a:	1b9b      	subs	r3, r3, r6
 800ae0c:	f080 0001 	eor.w	r0, r0, #1
 800ae10:	60a2      	str	r2, [r4, #8]
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	b002      	add	sp, #8
 800ae16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1a:	68a3      	ldr	r3, [r4, #8]
 800ae1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae28:	701a      	strb	r2, [r3, #0]
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae30:	701a      	strb	r2, [r3, #0]
 800ae32:	e7ad      	b.n	800ad90 <ucdr_serialize_float+0x74>
 800ae34:	4628      	mov	r0, r5
 800ae36:	ad01      	add	r5, sp, #4
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4632      	mov	r2, r6
 800ae3c:	f00a fa55 	bl	80152ea <memcpy>
 800ae40:	68a0      	ldr	r0, [r4, #8]
 800ae42:	4642      	mov	r2, r8
 800ae44:	19a9      	adds	r1, r5, r6
 800ae46:	f00a fa50 	bl	80152ea <memcpy>
 800ae4a:	e7a1      	b.n	800ad90 <ucdr_serialize_float+0x74>

0800ae4c <ucdr_deserialize_float>:
 800ae4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae50:	460d      	mov	r5, r1
 800ae52:	2104      	movs	r1, #4
 800ae54:	4604      	mov	r4, r0
 800ae56:	f000 f8e9 	bl	800b02c <ucdr_buffer_alignment>
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae62:	f000 f927 	bl	800b0b4 <ucdr_advance_buffer>
 800ae66:	2104      	movs	r1, #4
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 f87f 	bl	800af6c <ucdr_check_buffer_available_for>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d138      	bne.n	800aee4 <ucdr_deserialize_float+0x98>
 800ae72:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae76:	42b7      	cmp	r7, r6
 800ae78:	d92f      	bls.n	800aeda <ucdr_deserialize_float+0x8e>
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	60a7      	str	r7, [r4, #8]
 800ae7e:	1bbf      	subs	r7, r7, r6
 800ae80:	443b      	add	r3, r7
 800ae82:	f1c7 0904 	rsb	r9, r7, #4
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f87a 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d046      	beq.n	800af22 <ucdr_deserialize_float+0xd6>
 800ae94:	7d23      	ldrb	r3, [r4, #20]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d05c      	beq.n	800af54 <ucdr_deserialize_float+0x108>
 800ae9a:	78f3      	ldrb	r3, [r6, #3]
 800ae9c:	702b      	strb	r3, [r5, #0]
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d04c      	beq.n	800af3c <ucdr_deserialize_float+0xf0>
 800aea2:	78b3      	ldrb	r3, [r6, #2]
 800aea4:	706b      	strb	r3, [r5, #1]
 800aea6:	2f01      	cmp	r7, #1
 800aea8:	f105 0302 	add.w	r3, r5, #2
 800aeac:	d04a      	beq.n	800af44 <ucdr_deserialize_float+0xf8>
 800aeae:	7873      	ldrb	r3, [r6, #1]
 800aeb0:	70ab      	strb	r3, [r5, #2]
 800aeb2:	2f02      	cmp	r7, #2
 800aeb4:	f105 0303 	add.w	r3, r5, #3
 800aeb8:	d048      	beq.n	800af4c <ucdr_deserialize_float+0x100>
 800aeba:	7833      	ldrb	r3, [r6, #0]
 800aebc:	70eb      	strb	r3, [r5, #3]
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	68a2      	ldr	r2, [r4, #8]
 800aec2:	7da0      	ldrb	r0, [r4, #22]
 800aec4:	2104      	movs	r1, #4
 800aec6:	3304      	adds	r3, #4
 800aec8:	444a      	add	r2, r9
 800aeca:	1bdb      	subs	r3, r3, r7
 800aecc:	7561      	strb	r1, [r4, #21]
 800aece:	60a2      	str	r2, [r4, #8]
 800aed0:	6123      	str	r3, [r4, #16]
 800aed2:	f080 0001 	eor.w	r0, r0, #1
 800aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeda:	2104      	movs	r1, #4
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 f851 	bl	800af84 <ucdr_check_final_buffer_behavior>
 800aee2:	b1b0      	cbz	r0, 800af12 <ucdr_deserialize_float+0xc6>
 800aee4:	7d23      	ldrb	r3, [r4, #20]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	68a3      	ldr	r3, [r4, #8]
 800aeea:	d017      	beq.n	800af1c <ucdr_deserialize_float+0xd0>
 800aeec:	78db      	ldrb	r3, [r3, #3]
 800aeee:	702b      	strb	r3, [r5, #0]
 800aef0:	68a3      	ldr	r3, [r4, #8]
 800aef2:	789b      	ldrb	r3, [r3, #2]
 800aef4:	706b      	strb	r3, [r5, #1]
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	785b      	ldrb	r3, [r3, #1]
 800aefa:	70ab      	strb	r3, [r5, #2]
 800aefc:	68a3      	ldr	r3, [r4, #8]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	70eb      	strb	r3, [r5, #3]
 800af02:	68a2      	ldr	r2, [r4, #8]
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	3204      	adds	r2, #4
 800af08:	3304      	adds	r3, #4
 800af0a:	2104      	movs	r1, #4
 800af0c:	60a2      	str	r2, [r4, #8]
 800af0e:	6123      	str	r3, [r4, #16]
 800af10:	7561      	strb	r1, [r4, #21]
 800af12:	7da0      	ldrb	r0, [r4, #22]
 800af14:	f080 0001 	eor.w	r0, r0, #1
 800af18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	e7ef      	b.n	800af02 <ucdr_deserialize_float+0xb6>
 800af22:	68a2      	ldr	r2, [r4, #8]
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	7da0      	ldrb	r0, [r4, #22]
 800af28:	f884 8015 	strb.w	r8, [r4, #21]
 800af2c:	1bd2      	subs	r2, r2, r7
 800af2e:	1bdb      	subs	r3, r3, r7
 800af30:	60a2      	str	r2, [r4, #8]
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	f080 0001 	eor.w	r0, r0, #1
 800af38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3c:	68a3      	ldr	r3, [r4, #8]
 800af3e:	789b      	ldrb	r3, [r3, #2]
 800af40:	706b      	strb	r3, [r5, #1]
 800af42:	1cab      	adds	r3, r5, #2
 800af44:	68a2      	ldr	r2, [r4, #8]
 800af46:	7852      	ldrb	r2, [r2, #1]
 800af48:	f803 2b01 	strb.w	r2, [r3], #1
 800af4c:	68a2      	ldr	r2, [r4, #8]
 800af4e:	7812      	ldrb	r2, [r2, #0]
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e7b4      	b.n	800aebe <ucdr_deserialize_float+0x72>
 800af54:	4631      	mov	r1, r6
 800af56:	463a      	mov	r2, r7
 800af58:	4628      	mov	r0, r5
 800af5a:	f00a f9c6 	bl	80152ea <memcpy>
 800af5e:	68a1      	ldr	r1, [r4, #8]
 800af60:	464a      	mov	r2, r9
 800af62:	19e8      	adds	r0, r5, r7
 800af64:	f00a f9c1 	bl	80152ea <memcpy>
 800af68:	e7a9      	b.n	800aebe <ucdr_deserialize_float+0x72>
 800af6a:	bf00      	nop

0800af6c <ucdr_check_buffer_available_for>:
 800af6c:	7d83      	ldrb	r3, [r0, #22]
 800af6e:	b93b      	cbnz	r3, 800af80 <ucdr_check_buffer_available_for+0x14>
 800af70:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800af74:	4419      	add	r1, r3
 800af76:	4288      	cmp	r0, r1
 800af78:	bf34      	ite	cc
 800af7a:	2000      	movcc	r0, #0
 800af7c:	2001      	movcs	r0, #1
 800af7e:	4770      	bx	lr
 800af80:	2000      	movs	r0, #0
 800af82:	4770      	bx	lr

0800af84 <ucdr_check_final_buffer_behavior>:
 800af84:	7d83      	ldrb	r3, [r0, #22]
 800af86:	b943      	cbnz	r3, 800af9a <ucdr_check_final_buffer_behavior+0x16>
 800af88:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800af8c:	4291      	cmp	r1, r2
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	d205      	bcs.n	800afa0 <ucdr_check_final_buffer_behavior+0x1c>
 800af94:	2301      	movs	r3, #1
 800af96:	4618      	mov	r0, r3
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	2300      	movs	r3, #0
 800af9c:	4618      	mov	r0, r3
 800af9e:	4770      	bx	lr
 800afa0:	6982      	ldr	r2, [r0, #24]
 800afa2:	b13a      	cbz	r2, 800afb4 <ucdr_check_final_buffer_behavior+0x30>
 800afa4:	69c1      	ldr	r1, [r0, #28]
 800afa6:	4790      	blx	r2
 800afa8:	f080 0301 	eor.w	r3, r0, #1
 800afac:	b2db      	uxtb	r3, r3
 800afae:	75a0      	strb	r0, [r4, #22]
 800afb0:	4618      	mov	r0, r3
 800afb2:	bd10      	pop	{r4, pc}
 800afb4:	2001      	movs	r0, #1
 800afb6:	75a0      	strb	r0, [r4, #22]
 800afb8:	e7fa      	b.n	800afb0 <ucdr_check_final_buffer_behavior+0x2c>
 800afba:	bf00      	nop

0800afbc <ucdr_set_on_full_buffer_callback>:
 800afbc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop

0800afc4 <ucdr_init_buffer_origin_offset_endian>:
 800afc4:	b410      	push	{r4}
 800afc6:	9c01      	ldr	r4, [sp, #4]
 800afc8:	6001      	str	r1, [r0, #0]
 800afca:	440a      	add	r2, r1
 800afcc:	6042      	str	r2, [r0, #4]
 800afce:	190a      	adds	r2, r1, r4
 800afd0:	441c      	add	r4, r3
 800afd2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800afd6:	6082      	str	r2, [r0, #8]
 800afd8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800afdc:	7503      	strb	r3, [r0, #20]
 800afde:	2200      	movs	r2, #0
 800afe0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800afe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afe8:	7542      	strb	r2, [r0, #21]
 800afea:	7582      	strb	r2, [r0, #22]
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop

0800aff0 <ucdr_init_buffer_origin_offset>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	9c04      	ldr	r4, [sp, #16]
 800aff6:	9400      	str	r4, [sp, #0]
 800aff8:	2401      	movs	r4, #1
 800affa:	9401      	str	r4, [sp, #4]
 800affc:	f7ff ffe2 	bl	800afc4 <ucdr_init_buffer_origin_offset_endian>
 800b000:	b002      	add	sp, #8
 800b002:	bd10      	pop	{r4, pc}

0800b004 <ucdr_init_buffer_origin>:
 800b004:	b510      	push	{r4, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	2400      	movs	r4, #0
 800b00a:	9400      	str	r4, [sp, #0]
 800b00c:	f7ff fff0 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 800b010:	b002      	add	sp, #8
 800b012:	bd10      	pop	{r4, pc}

0800b014 <ucdr_init_buffer>:
 800b014:	2300      	movs	r3, #0
 800b016:	f7ff bff5 	b.w	800b004 <ucdr_init_buffer_origin>
 800b01a:	bf00      	nop

0800b01c <ucdr_alignment>:
 800b01c:	fbb0 f3f1 	udiv	r3, r0, r1
 800b020:	fb03 0011 	mls	r0, r3, r1, r0
 800b024:	1a08      	subs	r0, r1, r0
 800b026:	3901      	subs	r1, #1
 800b028:	4008      	ands	r0, r1
 800b02a:	4770      	bx	lr

0800b02c <ucdr_buffer_alignment>:
 800b02c:	7d43      	ldrb	r3, [r0, #21]
 800b02e:	428b      	cmp	r3, r1
 800b030:	d208      	bcs.n	800b044 <ucdr_buffer_alignment+0x18>
 800b032:	6900      	ldr	r0, [r0, #16]
 800b034:	fbb0 f3f1 	udiv	r3, r0, r1
 800b038:	fb01 0013 	mls	r0, r1, r3, r0
 800b03c:	1a08      	subs	r0, r1, r0
 800b03e:	3901      	subs	r1, #1
 800b040:	4008      	ands	r0, r1
 800b042:	4770      	bx	lr
 800b044:	2000      	movs	r0, #0
 800b046:	4770      	bx	lr

0800b048 <ucdr_align_to>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	460d      	mov	r5, r1
 800b04e:	f7ff ffed 	bl	800b02c <ucdr_buffer_alignment>
 800b052:	68a3      	ldr	r3, [r4, #8]
 800b054:	6921      	ldr	r1, [r4, #16]
 800b056:	7565      	strb	r5, [r4, #21]
 800b058:	181a      	adds	r2, r3, r0
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	4293      	cmp	r3, r2
 800b05e:	4408      	add	r0, r1
 800b060:	bf28      	it	cs
 800b062:	4613      	movcs	r3, r2
 800b064:	6120      	str	r0, [r4, #16]
 800b066:	60a3      	str	r3, [r4, #8]
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	bf00      	nop

0800b06c <ucdr_buffer_length>:
 800b06c:	6882      	ldr	r2, [r0, #8]
 800b06e:	6800      	ldr	r0, [r0, #0]
 800b070:	1a10      	subs	r0, r2, r0
 800b072:	4770      	bx	lr

0800b074 <ucdr_buffer_remaining>:
 800b074:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b078:	1a10      	subs	r0, r2, r0
 800b07a:	4770      	bx	lr

0800b07c <ucdr_check_final_buffer_behavior_array>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	7d83      	ldrb	r3, [r0, #22]
 800b080:	b963      	cbnz	r3, 800b09c <ucdr_check_final_buffer_behavior_array+0x20>
 800b082:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b086:	429a      	cmp	r2, r3
 800b088:	4604      	mov	r4, r0
 800b08a:	460d      	mov	r5, r1
 800b08c:	d308      	bcc.n	800b0a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800b08e:	b139      	cbz	r1, 800b0a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800b090:	6983      	ldr	r3, [r0, #24]
 800b092:	b163      	cbz	r3, 800b0ae <ucdr_check_final_buffer_behavior_array+0x32>
 800b094:	69c1      	ldr	r1, [r0, #28]
 800b096:	4798      	blx	r3
 800b098:	75a0      	strb	r0, [r4, #22]
 800b09a:	b108      	cbz	r0, 800b0a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800b09c:	2000      	movs	r0, #0
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f7ff ffe7 	bl	800b074 <ucdr_buffer_remaining>
 800b0a6:	42a8      	cmp	r0, r5
 800b0a8:	bf28      	it	cs
 800b0aa:	4628      	movcs	r0, r5
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	7583      	strb	r3, [r0, #22]
 800b0b2:	e7f3      	b.n	800b09c <ucdr_check_final_buffer_behavior_array+0x20>

0800b0b4 <ucdr_advance_buffer>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	f7ff ff57 	bl	800af6c <ucdr_check_buffer_available_for>
 800b0be:	b178      	cbz	r0, 800b0e0 <ucdr_advance_buffer+0x2c>
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	68a2      	ldr	r2, [r4, #8]
 800b0c4:	442b      	add	r3, r5
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	442a      	add	r2, r5
 800b0cc:	7563      	strb	r3, [r4, #21]
 800b0ce:	60a2      	str	r2, [r4, #8]
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	68a2      	ldr	r2, [r4, #8]
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	4402      	add	r2, r0
 800b0d8:	4403      	add	r3, r0
 800b0da:	1a2d      	subs	r5, r5, r0
 800b0dc:	60a2      	str	r2, [r4, #8]
 800b0de:	6123      	str	r3, [r4, #16]
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f7ff ffc9 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d1f1      	bne.n	800b0d2 <ucdr_advance_buffer+0x1e>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	7563      	strb	r3, [r4, #21]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}

0800b0f4 <rcl_client_get_rmw_handle>:
 800b0f4:	b118      	cbz	r0, 800b0fe <rcl_client_get_rmw_handle+0xa>
 800b0f6:	6800      	ldr	r0, [r0, #0]
 800b0f8:	b108      	cbz	r0, 800b0fe <rcl_client_get_rmw_handle+0xa>
 800b0fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800b0fe:	4770      	bx	lr

0800b100 <rcl_send_request>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	b1e8      	cbz	r0, 800b142 <rcl_send_request+0x42>
 800b106:	4604      	mov	r4, r0
 800b108:	6800      	ldr	r0, [r0, #0]
 800b10a:	b1d0      	cbz	r0, 800b142 <rcl_send_request+0x42>
 800b10c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800b110:	b1bb      	cbz	r3, 800b142 <rcl_send_request+0x42>
 800b112:	460e      	mov	r6, r1
 800b114:	b1d1      	cbz	r1, 800b14c <rcl_send_request+0x4c>
 800b116:	4615      	mov	r5, r2
 800b118:	b1c2      	cbz	r2, 800b14c <rcl_send_request+0x4c>
 800b11a:	2105      	movs	r1, #5
 800b11c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800b120:	f002 fbe6 	bl	800d8f0 <__atomic_load_8>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	e9c5 0100 	strd	r0, r1, [r5]
 800b12a:	462a      	mov	r2, r5
 800b12c:	4631      	mov	r1, r6
 800b12e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b132:	f003 fce3 	bl	800eafc <rmw_send_request>
 800b136:	4606      	mov	r6, r0
 800b138:	b160      	cbz	r0, 800b154 <rcl_send_request+0x54>
 800b13a:	2601      	movs	r6, #1
 800b13c:	4630      	mov	r0, r6
 800b13e:	b002      	add	sp, #8
 800b140:	bd70      	pop	{r4, r5, r6, pc}
 800b142:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800b146:	4630      	mov	r0, r6
 800b148:	b002      	add	sp, #8
 800b14a:	bd70      	pop	{r4, r5, r6, pc}
 800b14c:	260b      	movs	r6, #11
 800b14e:	4630      	mov	r0, r6
 800b150:	b002      	add	sp, #8
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	2105      	movs	r1, #5
 800b158:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b15c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800b160:	9100      	str	r1, [sp, #0]
 800b162:	f002 fc31 	bl	800d9c8 <__atomic_exchange_8>
 800b166:	4630      	mov	r0, r6
 800b168:	b002      	add	sp, #8
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
 800b16c:	0000      	movs	r0, r0
	...

0800b170 <rcl_take_response>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	468e      	mov	lr, r1
 800b174:	460c      	mov	r4, r1
 800b176:	4616      	mov	r6, r2
 800b178:	4605      	mov	r5, r0
 800b17a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b17e:	b08c      	sub	sp, #48	@ 0x30
 800b180:	f10d 0c18 	add.w	ip, sp, #24
 800b184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b188:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b18c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b190:	b35d      	cbz	r5, 800b1ea <rcl_take_response+0x7a>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	b34b      	cbz	r3, 800b1ea <rcl_take_response+0x7a>
 800b196:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800b19a:	b330      	cbz	r0, 800b1ea <rcl_take_response+0x7a>
 800b19c:	b346      	cbz	r6, 800b1f0 <rcl_take_response+0x80>
 800b19e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800b1f8 <rcl_take_response+0x88>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f88d 3007 	strb.w	r3, [sp, #7]
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	f10d 0307 	add.w	r3, sp, #7
 800b1ae:	a902      	add	r1, sp, #8
 800b1b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b1b8:	f003 fda8 	bl	800ed0c <rmw_take_response>
 800b1bc:	4605      	mov	r5, r0
 800b1be:	b9c8      	cbnz	r0, 800b1f4 <rcl_take_response+0x84>
 800b1c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1c4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	bf08      	it	eq
 800b1cc:	461d      	moveq	r5, r3
 800b1ce:	f10d 0e18 	add.w	lr, sp, #24
 800b1d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b1d6:	46a4      	mov	ip, r4
 800b1d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b1dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b1e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	b00c      	add	sp, #48	@ 0x30
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800b1ee:	e7ee      	b.n	800b1ce <rcl_take_response+0x5e>
 800b1f0:	250b      	movs	r5, #11
 800b1f2:	e7ec      	b.n	800b1ce <rcl_take_response+0x5e>
 800b1f4:	2501      	movs	r5, #1
 800b1f6:	e7ea      	b.n	800b1ce <rcl_take_response+0x5e>
	...

0800b200 <rcl_client_is_valid>:
 800b200:	b130      	cbz	r0, 800b210 <rcl_client_is_valid+0x10>
 800b202:	6800      	ldr	r0, [r0, #0]
 800b204:	b120      	cbz	r0, 800b210 <rcl_client_is_valid+0x10>
 800b206:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800b20a:	3800      	subs	r0, #0
 800b20c:	bf18      	it	ne
 800b20e:	2001      	movne	r0, #1
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop

0800b214 <rcl_get_zero_initialized_context>:
 800b214:	4a03      	ldr	r2, [pc, #12]	@ (800b224 <rcl_get_zero_initialized_context+0x10>)
 800b216:	4603      	mov	r3, r0
 800b218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b21c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b220:	4618      	mov	r0, r3
 800b222:	4770      	bx	lr
 800b224:	08016410 	.word	0x08016410

0800b228 <rcl_context_is_valid>:
 800b228:	b118      	cbz	r0, 800b232 <rcl_context_is_valid+0xa>
 800b22a:	6840      	ldr	r0, [r0, #4]
 800b22c:	3800      	subs	r0, #0
 800b22e:	bf18      	it	ne
 800b230:	2001      	movne	r0, #1
 800b232:	4770      	bx	lr

0800b234 <__cleanup_context>:
 800b234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b238:	4606      	mov	r6, r0
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	2300      	movs	r3, #0
 800b23e:	6073      	str	r3, [r6, #4]
 800b240:	2800      	cmp	r0, #0
 800b242:	d049      	beq.n	800b2d8 <__cleanup_context+0xa4>
 800b244:	6947      	ldr	r7, [r0, #20]
 800b246:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b24a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b24e:	b137      	cbz	r7, 800b25e <__cleanup_context+0x2a>
 800b250:	3014      	adds	r0, #20
 800b252:	f000 f9a5 	bl	800b5a0 <rcl_init_options_fini>
 800b256:	4607      	mov	r7, r0
 800b258:	2800      	cmp	r0, #0
 800b25a:	d144      	bne.n	800b2e6 <__cleanup_context+0xb2>
 800b25c:	6830      	ldr	r0, [r6, #0]
 800b25e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b260:	b143      	cbz	r3, 800b274 <__cleanup_context+0x40>
 800b262:	3028      	adds	r0, #40	@ 0x28
 800b264:	f003 fab2 	bl	800e7cc <rmw_context_fini>
 800b268:	b118      	cbz	r0, 800b272 <__cleanup_context+0x3e>
 800b26a:	2f00      	cmp	r7, #0
 800b26c:	d03e      	beq.n	800b2ec <__cleanup_context+0xb8>
 800b26e:	f7fe fbd7 	bl	8009a20 <rcutils_reset_error>
 800b272:	6830      	ldr	r0, [r6, #0]
 800b274:	6a03      	ldr	r3, [r0, #32]
 800b276:	b1db      	cbz	r3, 800b2b0 <__cleanup_context+0x7c>
 800b278:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800b27c:	2a01      	cmp	r2, #1
 800b27e:	f17c 0100 	sbcs.w	r1, ip, #0
 800b282:	db11      	blt.n	800b2a8 <__cleanup_context+0x74>
 800b284:	2400      	movs	r4, #0
 800b286:	4625      	mov	r5, r4
 800b288:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b28c:	4649      	mov	r1, r9
 800b28e:	b1b8      	cbz	r0, 800b2c0 <__cleanup_context+0x8c>
 800b290:	47c0      	blx	r8
 800b292:	6833      	ldr	r3, [r6, #0]
 800b294:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800b298:	3401      	adds	r4, #1
 800b29a:	f145 0500 	adc.w	r5, r5, #0
 800b29e:	4294      	cmp	r4, r2
 800b2a0:	eb75 010c 	sbcs.w	r1, r5, ip
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	dbef      	blt.n	800b288 <__cleanup_context+0x54>
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	47c0      	blx	r8
 800b2ae:	6830      	ldr	r0, [r6, #0]
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	47c0      	blx	r8
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	e9c6 3300 	strd	r3, r3, [r6]
 800b2ba:	4638      	mov	r0, r7
 800b2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	f145 0500 	adc.w	r5, r5, #0
 800b2c6:	4294      	cmp	r4, r2
 800b2c8:	eb75 010c 	sbcs.w	r1, r5, ip
 800b2cc:	dbdc      	blt.n	800b288 <__cleanup_context+0x54>
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	47c0      	blx	r8
 800b2d4:	6830      	ldr	r0, [r6, #0]
 800b2d6:	e7eb      	b.n	800b2b0 <__cleanup_context+0x7c>
 800b2d8:	4607      	mov	r7, r0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e9c6 3300 	strd	r3, r3, [r6]
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e6:	f7fe fb9b 	bl	8009a20 <rcutils_reset_error>
 800b2ea:	e7b7      	b.n	800b25c <__cleanup_context+0x28>
 800b2ec:	f007 fec6 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	e7bc      	b.n	800b26e <__cleanup_context+0x3a>

0800b2f4 <rcl_init>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	1e05      	subs	r5, r0, #0
 800b2fa:	b09c      	sub	sp, #112	@ 0x70
 800b2fc:	460e      	mov	r6, r1
 800b2fe:	4690      	mov	r8, r2
 800b300:	461f      	mov	r7, r3
 800b302:	f340 8099 	ble.w	800b438 <rcl_init+0x144>
 800b306:	2900      	cmp	r1, #0
 800b308:	f000 8099 	beq.w	800b43e <rcl_init+0x14a>
 800b30c:	f1a1 0e04 	sub.w	lr, r1, #4
 800b310:	f04f 0c00 	mov.w	ip, #0
 800b314:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800b318:	f10c 0c01 	add.w	ip, ip, #1
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	f000 808e 	beq.w	800b43e <rcl_init+0x14a>
 800b322:	4565      	cmp	r5, ip
 800b324:	d1f6      	bne.n	800b314 <rcl_init+0x20>
 800b326:	f1b8 0f00 	cmp.w	r8, #0
 800b32a:	f000 8088 	beq.w	800b43e <rcl_init+0x14a>
 800b32e:	f8d8 4000 	ldr.w	r4, [r8]
 800b332:	2c00      	cmp	r4, #0
 800b334:	f000 8083 	beq.w	800b43e <rcl_init+0x14a>
 800b338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b33a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800b33e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	f8cc 3000 	str.w	r3, [ip]
 800b348:	a817      	add	r0, sp, #92	@ 0x5c
 800b34a:	f7fe fb43 	bl	80099d4 <rcutils_allocator_is_valid>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d075      	beq.n	800b43e <rcl_init+0x14a>
 800b352:	2f00      	cmp	r7, #0
 800b354:	d073      	beq.n	800b43e <rcl_init+0x14a>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d175      	bne.n	800b448 <rcl_init+0x154>
 800b35c:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800b360:	2178      	movs	r1, #120	@ 0x78
 800b362:	2001      	movs	r0, #1
 800b364:	4798      	blx	r3
 800b366:	4604      	mov	r4, r0
 800b368:	6038      	str	r0, [r7, #0]
 800b36a:	2800      	cmp	r0, #0
 800b36c:	f000 80a0 	beq.w	800b4b0 <rcl_init+0x1bc>
 800b370:	a802      	add	r0, sp, #8
 800b372:	f002 fdfd 	bl	800df70 <rmw_get_zero_initialized_context>
 800b376:	a902      	add	r1, sp, #8
 800b378:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b37c:	2250      	movs	r2, #80	@ 0x50
 800b37e:	ac17      	add	r4, sp, #92	@ 0x5c
 800b380:	f009 ffb3 	bl	80152ea <memcpy>
 800b384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b386:	f8d7 e000 	ldr.w	lr, [r7]
 800b38a:	46f4      	mov	ip, lr
 800b38c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	f8cc 3000 	str.w	r3, [ip]
 800b396:	f10e 0114 	add.w	r1, lr, #20
 800b39a:	4640      	mov	r0, r8
 800b39c:	f000 f92a 	bl	800b5f4 <rcl_init_options_copy>
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d144      	bne.n	800b430 <rcl_init+0x13c>
 800b3a6:	f8d7 9000 	ldr.w	r9, [r7]
 800b3aa:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800b3ae:	f8c9 0020 	str.w	r0, [r9, #32]
 800b3b2:	f8c9 5018 	str.w	r5, [r9, #24]
 800b3b6:	f8c9 801c 	str.w	r8, [r9, #28]
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	d04b      	beq.n	800b456 <rcl_init+0x162>
 800b3be:	2e00      	cmp	r6, #0
 800b3c0:	d049      	beq.n	800b456 <rcl_init+0x162>
 800b3c2:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800b3c6:	2104      	movs	r1, #4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	4798      	blx	r3
 800b3cc:	f8c9 0020 	str.w	r0, [r9, #32]
 800b3d0:	f8d7 9000 	ldr.w	r9, [r7]
 800b3d4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b3d8:	46ca      	mov	sl, r9
 800b3da:	b343      	cbz	r3, 800b42e <rcl_init+0x13a>
 800b3dc:	2d01      	cmp	r5, #1
 800b3de:	f178 0300 	sbcs.w	r3, r8, #0
 800b3e2:	db38      	blt.n	800b456 <rcl_init+0x162>
 800b3e4:	2400      	movs	r4, #0
 800b3e6:	3e04      	subs	r6, #4
 800b3e8:	46a1      	mov	r9, r4
 800b3ea:	e00b      	b.n	800b404 <rcl_init+0x110>
 800b3ec:	6831      	ldr	r1, [r6, #0]
 800b3ee:	f009 ff7c 	bl	80152ea <memcpy>
 800b3f2:	3401      	adds	r4, #1
 800b3f4:	f149 0900 	adc.w	r9, r9, #0
 800b3f8:	45c8      	cmp	r8, r9
 800b3fa:	bf08      	it	eq
 800b3fc:	42a5      	cmpeq	r5, r4
 800b3fe:	d028      	beq.n	800b452 <rcl_init+0x15e>
 800b400:	f8d7 a000 	ldr.w	sl, [r7]
 800b404:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800b408:	f7f4 fef4 	bl	80001f4 <strlen>
 800b40c:	1c42      	adds	r2, r0, #1
 800b40e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b410:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b412:	f8da a020 	ldr.w	sl, [sl, #32]
 800b416:	9201      	str	r2, [sp, #4]
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	9a01      	ldr	r2, [sp, #4]
 800b426:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d1de      	bne.n	800b3ec <rcl_init+0xf8>
 800b42e:	240a      	movs	r4, #10
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff feff 	bl	800b234 <__cleanup_context>
 800b436:	e003      	b.n	800b440 <rcl_init+0x14c>
 800b438:	2900      	cmp	r1, #0
 800b43a:	f43f af74 	beq.w	800b326 <rcl_init+0x32>
 800b43e:	240b      	movs	r4, #11
 800b440:	4620      	mov	r0, r4
 800b442:	b01c      	add	sp, #112	@ 0x70
 800b444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b448:	2464      	movs	r4, #100	@ 0x64
 800b44a:	4620      	mov	r0, r4
 800b44c:	b01c      	add	sp, #112	@ 0x70
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	f8d7 9000 	ldr.w	r9, [r7]
 800b456:	491d      	ldr	r1, [pc, #116]	@ (800b4cc <rcl_init+0x1d8>)
 800b458:	680b      	ldr	r3, [r1, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	d023      	beq.n	800b4a6 <rcl_init+0x1b2>
 800b45e:	600b      	str	r3, [r1, #0]
 800b460:	461a      	mov	r2, r3
 800b462:	2400      	movs	r4, #0
 800b464:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800b468:	607b      	str	r3, [r7, #4]
 800b46a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b46c:	6182      	str	r2, [r0, #24]
 800b46e:	3301      	adds	r3, #1
 800b470:	61c4      	str	r4, [r0, #28]
 800b472:	d01f      	beq.n	800b4b4 <rcl_init+0x1c0>
 800b474:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800b478:	b94b      	cbnz	r3, 800b48e <rcl_init+0x19a>
 800b47a:	3030      	adds	r0, #48	@ 0x30
 800b47c:	f000 f926 	bl	800b6cc <rcl_get_localhost_only>
 800b480:	4604      	mov	r4, r0
 800b482:	2800      	cmp	r0, #0
 800b484:	d1d4      	bne.n	800b430 <rcl_init+0x13c>
 800b486:	f8d7 9000 	ldr.w	r9, [r7]
 800b48a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800b48e:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800b492:	3018      	adds	r0, #24
 800b494:	f003 f864 	bl	800e560 <rmw_init>
 800b498:	4604      	mov	r4, r0
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d0d0      	beq.n	800b440 <rcl_init+0x14c>
 800b49e:	f007 fded 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	e7c4      	b.n	800b430 <rcl_init+0x13c>
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	461c      	mov	r4, r3
 800b4aa:	600a      	str	r2, [r1, #0]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	e7d9      	b.n	800b464 <rcl_init+0x170>
 800b4b0:	240a      	movs	r4, #10
 800b4b2:	e7c5      	b.n	800b440 <rcl_init+0x14c>
 800b4b4:	3024      	adds	r0, #36	@ 0x24
 800b4b6:	f007 fdf5 	bl	80130a4 <rcl_get_default_domain_id>
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1b7      	bne.n	800b430 <rcl_init+0x13c>
 800b4c0:	f8d7 9000 	ldr.w	r9, [r7]
 800b4c4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800b4c8:	e7d4      	b.n	800b474 <rcl_init+0x180>
 800b4ca:	bf00      	nop
 800b4cc:	20009380 	.word	0x20009380

0800b4d0 <rcl_get_zero_initialized_init_options>:
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4770      	bx	lr

0800b4d4 <rcl_init_options_init>:
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4d8:	b097      	sub	sp, #92	@ 0x5c
 800b4da:	ae1d      	add	r6, sp, #116	@ 0x74
 800b4dc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d058      	beq.n	800b596 <rcl_init_options_init+0xc2>
 800b4e4:	6803      	ldr	r3, [r0, #0]
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	b133      	cbz	r3, 800b4f8 <rcl_init_options_init+0x24>
 800b4ea:	2464      	movs	r4, #100	@ 0x64
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	b017      	add	sp, #92	@ 0x5c
 800b4f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b4f4:	b004      	add	sp, #16
 800b4f6:	4770      	bx	lr
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7fe fa6b 	bl	80099d4 <rcutils_allocator_is_valid>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d049      	beq.n	800b596 <rcl_init_options_init+0xc2>
 800b502:	46b4      	mov	ip, r6
 800b504:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b508:	ac11      	add	r4, sp, #68	@ 0x44
 800b50a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b50c:	f8dc 3000 	ldr.w	r3, [ip]
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b514:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b516:	2050      	movs	r0, #80	@ 0x50
 800b518:	4798      	blx	r3
 800b51a:	4604      	mov	r4, r0
 800b51c:	6028      	str	r0, [r5, #0]
 800b51e:	2800      	cmp	r0, #0
 800b520:	d03b      	beq.n	800b59a <rcl_init_options_init+0xc6>
 800b522:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b526:	4686      	mov	lr, r0
 800b528:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b52c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b530:	f8dc 3000 	ldr.w	r3, [ip]
 800b534:	f8ce 3000 	str.w	r3, [lr]
 800b538:	a802      	add	r0, sp, #8
 800b53a:	f002 fd29 	bl	800df90 <rmw_get_zero_initialized_init_options>
 800b53e:	f10d 0e08 	add.w	lr, sp, #8
 800b542:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b546:	f104 0c18 	add.w	ip, r4, #24
 800b54a:	682f      	ldr	r7, [r5, #0]
 800b54c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b550:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b55c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b560:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b564:	ac20      	add	r4, sp, #128	@ 0x80
 800b566:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b56a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b56e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b572:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800b576:	f107 0018 	add.w	r0, r7, #24
 800b57a:	f002 fecf 	bl	800e31c <rmw_init_options_init>
 800b57e:	4604      	mov	r4, r0
 800b580:	2800      	cmp	r0, #0
 800b582:	d0b3      	beq.n	800b4ec <rcl_init_options_init+0x18>
 800b584:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800b586:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b588:	6828      	ldr	r0, [r5, #0]
 800b58a:	4798      	blx	r3
 800b58c:	4620      	mov	r0, r4
 800b58e:	f007 fd75 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800b592:	4604      	mov	r4, r0
 800b594:	e7aa      	b.n	800b4ec <rcl_init_options_init+0x18>
 800b596:	240b      	movs	r4, #11
 800b598:	e7a8      	b.n	800b4ec <rcl_init_options_init+0x18>
 800b59a:	240a      	movs	r4, #10
 800b59c:	e7a6      	b.n	800b4ec <rcl_init_options_init+0x18>
 800b59e:	bf00      	nop

0800b5a0 <rcl_init_options_fini>:
 800b5a0:	b530      	push	{r4, r5, lr}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	b1f0      	cbz	r0, 800b5e4 <rcl_init_options_fini+0x44>
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	b1db      	cbz	r3, 800b5e4 <rcl_init_options_fini+0x44>
 800b5ac:	469c      	mov	ip, r3
 800b5ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b5b2:	f10d 0e04 	add.w	lr, sp, #4
 800b5b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b5ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b5be:	f8ce 3000 	str.w	r3, [lr]
 800b5c2:	a801      	add	r0, sp, #4
 800b5c4:	f7fe fa06 	bl	80099d4 <rcutils_allocator_is_valid>
 800b5c8:	b160      	cbz	r0, 800b5e4 <rcl_init_options_fini+0x44>
 800b5ca:	6820      	ldr	r0, [r4, #0]
 800b5cc:	3018      	adds	r0, #24
 800b5ce:	f002 ff7b 	bl	800e4c8 <rmw_init_options_fini>
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	b950      	cbnz	r0, 800b5ec <rcl_init_options_fini+0x4c>
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	9905      	ldr	r1, [sp, #20]
 800b5dc:	4798      	blx	r3
 800b5de:	4628      	mov	r0, r5
 800b5e0:	b007      	add	sp, #28
 800b5e2:	bd30      	pop	{r4, r5, pc}
 800b5e4:	250b      	movs	r5, #11
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	b007      	add	sp, #28
 800b5ea:	bd30      	pop	{r4, r5, pc}
 800b5ec:	f007 fd46 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	e7f8      	b.n	800b5e6 <rcl_init_options_fini+0x46>

0800b5f4 <rcl_init_options_copy>:
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	b094      	sub	sp, #80	@ 0x50
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d058      	beq.n	800b6b0 <rcl_init_options_copy+0xbc>
 800b5fe:	4604      	mov	r4, r0
 800b600:	6800      	ldr	r0, [r0, #0]
 800b602:	2800      	cmp	r0, #0
 800b604:	d054      	beq.n	800b6b0 <rcl_init_options_copy+0xbc>
 800b606:	460e      	mov	r6, r1
 800b608:	f7fe f9e4 	bl	80099d4 <rcutils_allocator_is_valid>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d04f      	beq.n	800b6b0 <rcl_init_options_copy+0xbc>
 800b610:	2e00      	cmp	r6, #0
 800b612:	d04d      	beq.n	800b6b0 <rcl_init_options_copy+0xbc>
 800b614:	6833      	ldr	r3, [r6, #0]
 800b616:	b123      	cbz	r3, 800b622 <rcl_init_options_copy+0x2e>
 800b618:	2464      	movs	r4, #100	@ 0x64
 800b61a:	4620      	mov	r0, r4
 800b61c:	b014      	add	sp, #80	@ 0x50
 800b61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b622:	6827      	ldr	r7, [r4, #0]
 800b624:	46bc      	mov	ip, r7
 800b626:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b62a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800b62c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b62e:	f8dc 3000 	ldr.w	r3, [ip]
 800b632:	f8d7 8000 	ldr.w	r8, [r7]
 800b636:	602b      	str	r3, [r5, #0]
 800b638:	4619      	mov	r1, r3
 800b63a:	2050      	movs	r0, #80	@ 0x50
 800b63c:	47c0      	blx	r8
 800b63e:	4605      	mov	r5, r0
 800b640:	6030      	str	r0, [r6, #0]
 800b642:	b3d0      	cbz	r0, 800b6ba <rcl_init_options_copy+0xc6>
 800b644:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800b648:	4686      	mov	lr, r0
 800b64a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b64e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b652:	f8dc 3000 	ldr.w	r3, [ip]
 800b656:	f8ce 3000 	str.w	r3, [lr]
 800b65a:	4668      	mov	r0, sp
 800b65c:	f002 fc98 	bl	800df90 <rmw_get_zero_initialized_init_options>
 800b660:	46ee      	mov	lr, sp
 800b662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b666:	f105 0c18 	add.w	ip, r5, #24
 800b66a:	6824      	ldr	r4, [r4, #0]
 800b66c:	6835      	ldr	r5, [r6, #0]
 800b66e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b672:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b676:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b67a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b67e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b682:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b686:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b68a:	f104 0018 	add.w	r0, r4, #24
 800b68e:	f105 0118 	add.w	r1, r5, #24
 800b692:	f002 fea5 	bl	800e3e0 <rmw_init_options_copy>
 800b696:	4604      	mov	r4, r0
 800b698:	2800      	cmp	r0, #0
 800b69a:	d0be      	beq.n	800b61a <rcl_init_options_copy+0x26>
 800b69c:	f7fe f9a8 	bl	80099f0 <rcutils_get_error_string>
 800b6a0:	f7fe f9be 	bl	8009a20 <rcutils_reset_error>
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f7ff ff7b 	bl	800b5a0 <rcl_init_options_fini>
 800b6aa:	b140      	cbz	r0, 800b6be <rcl_init_options_copy+0xca>
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	e7b4      	b.n	800b61a <rcl_init_options_copy+0x26>
 800b6b0:	240b      	movs	r4, #11
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	b014      	add	sp, #80	@ 0x50
 800b6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ba:	240a      	movs	r4, #10
 800b6bc:	e7ad      	b.n	800b61a <rcl_init_options_copy+0x26>
 800b6be:	4620      	mov	r0, r4
 800b6c0:	b014      	add	sp, #80	@ 0x50
 800b6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c6:	f007 bcd9 	b.w	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800b6ca:	bf00      	nop

0800b6cc <rcl_get_localhost_only>:
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	b1b8      	cbz	r0, 800b706 <rcl_get_localhost_only+0x3a>
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	a901      	add	r1, sp, #4
 800b6da:	480c      	ldr	r0, [pc, #48]	@ (800b70c <rcl_get_localhost_only+0x40>)
 800b6dc:	f002 f9ac 	bl	800da38 <rcutils_get_env>
 800b6e0:	b110      	cbz	r0, 800b6e8 <rcl_get_localhost_only+0x1c>
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	b002      	add	sp, #8
 800b6e6:	bd10      	pop	{r4, pc}
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	b113      	cbz	r3, 800b6f2 <rcl_get_localhost_only+0x26>
 800b6ec:	781a      	ldrb	r2, [r3, #0]
 800b6ee:	2a31      	cmp	r2, #49	@ 0x31
 800b6f0:	d004      	beq.n	800b6fc <rcl_get_localhost_only+0x30>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	7023      	strb	r3, [r4, #0]
 800b6f8:	b002      	add	sp, #8
 800b6fa:	bd10      	pop	{r4, pc}
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1f7      	bne.n	800b6f2 <rcl_get_localhost_only+0x26>
 800b702:	2301      	movs	r3, #1
 800b704:	e7f6      	b.n	800b6f4 <rcl_get_localhost_only+0x28>
 800b706:	200b      	movs	r0, #11
 800b708:	b002      	add	sp, #8
 800b70a:	bd10      	pop	{r4, pc}
 800b70c:	08016418 	.word	0x08016418

0800b710 <rcl_get_zero_initialized_node>:
 800b710:	4a03      	ldr	r2, [pc, #12]	@ (800b720 <rcl_get_zero_initialized_node+0x10>)
 800b712:	4603      	mov	r3, r0
 800b714:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b718:	e883 0003 	stmia.w	r3, {r0, r1}
 800b71c:	4618      	mov	r0, r3
 800b71e:	4770      	bx	lr
 800b720:	08016448 	.word	0x08016448

0800b724 <rcl_node_init>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	b0a9      	sub	sp, #164	@ 0xa4
 800b72a:	4604      	mov	r4, r0
 800b72c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800b730:	a823      	add	r0, sp, #140	@ 0x8c
 800b732:	460e      	mov	r6, r1
 800b734:	4615      	mov	r5, r2
 800b736:	461f      	mov	r7, r3
 800b738:	f007 fedc 	bl	80134f4 <rcl_guard_condition_get_default_options>
 800b73c:	f1b8 0f00 	cmp.w	r8, #0
 800b740:	f000 80e6 	beq.w	800b910 <rcl_node_init+0x1ec>
 800b744:	4640      	mov	r0, r8
 800b746:	f7fe f945 	bl	80099d4 <rcutils_allocator_is_valid>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	f000 80e0 	beq.w	800b910 <rcl_node_init+0x1ec>
 800b750:	2e00      	cmp	r6, #0
 800b752:	f000 80dd 	beq.w	800b910 <rcl_node_init+0x1ec>
 800b756:	2d00      	cmp	r5, #0
 800b758:	f000 80da 	beq.w	800b910 <rcl_node_init+0x1ec>
 800b75c:	2c00      	cmp	r4, #0
 800b75e:	f000 80d7 	beq.w	800b910 <rcl_node_init+0x1ec>
 800b762:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b766:	f1b9 0f00 	cmp.w	r9, #0
 800b76a:	f040 80fd 	bne.w	800b968 <rcl_node_init+0x244>
 800b76e:	2f00      	cmp	r7, #0
 800b770:	f000 80ce 	beq.w	800b910 <rcl_node_init+0x1ec>
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff fd57 	bl	800b228 <rcl_context_is_valid>
 800b77a:	4682      	mov	sl, r0
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f000 80cd 	beq.w	800b91c <rcl_node_init+0x1f8>
 800b782:	464a      	mov	r2, r9
 800b784:	a922      	add	r1, sp, #136	@ 0x88
 800b786:	4630      	mov	r0, r6
 800b788:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800b78c:	f002 fd1e 	bl	800e1cc <rmw_validate_node_name>
 800b790:	4681      	mov	r9, r0
 800b792:	2800      	cmp	r0, #0
 800b794:	f040 80be 	bne.w	800b914 <rcl_node_init+0x1f0>
 800b798:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800b79a:	2800      	cmp	r0, #0
 800b79c:	f040 80f0 	bne.w	800b980 <rcl_node_init+0x25c>
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	f7f4 fd27 	bl	80001f4 <strlen>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f040 80bb 	bne.w	800b922 <rcl_node_init+0x1fe>
 800b7ac:	4d7c      	ldr	r5, [pc, #496]	@ (800b9a0 <rcl_node_init+0x27c>)
 800b7ae:	a922      	add	r1, sp, #136	@ 0x88
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f002 fcec 	bl	800e190 <rmw_validate_namespace>
 800b7b8:	4681      	mov	r9, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	f040 80aa 	bne.w	800b914 <rcl_node_init+0x1f0>
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f040 80e0 	bne.w	800b98a <rcl_node_init+0x266>
 800b7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b7d2:	2078      	movs	r0, #120	@ 0x78
 800b7d4:	4798      	blx	r3
 800b7d6:	4681      	mov	r9, r0
 800b7d8:	6060      	str	r0, [r4, #4]
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f000 80ca 	beq.w	800b974 <rcl_node_init+0x250>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800b7e8:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800b7ec:	a808      	add	r0, sp, #32
 800b7ee:	f000 f907 	bl	800ba00 <rcl_node_get_default_options>
 800b7f2:	a908      	add	r1, sp, #32
 800b7f4:	4648      	mov	r0, r9
 800b7f6:	2268      	movs	r2, #104	@ 0x68
 800b7f8:	f009 fd77 	bl	80152ea <memcpy>
 800b7fc:	6861      	ldr	r1, [r4, #4]
 800b7fe:	6027      	str	r7, [r4, #0]
 800b800:	4640      	mov	r0, r8
 800b802:	f000 f90b 	bl	800ba1c <rcl_node_options_copy>
 800b806:	2800      	cmp	r0, #0
 800b808:	d158      	bne.n	800b8bc <rcl_node_init+0x198>
 800b80a:	4628      	mov	r0, r5
 800b80c:	f7f4 fcf2 	bl	80001f4 <strlen>
 800b810:	4428      	add	r0, r5
 800b812:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800b816:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800b81a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b81c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	bf0c      	ite	eq
 800b824:	4b5f      	ldreq	r3, [pc, #380]	@ (800b9a4 <rcl_node_init+0x280>)
 800b826:	4b60      	ldrne	r3, [pc, #384]	@ (800b9a8 <rcl_node_init+0x284>)
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800b834:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b838:	f002 f916 	bl	800da68 <rcutils_format_string_limit>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	4631      	mov	r1, r6
 800b846:	3028      	adds	r0, #40	@ 0x28
 800b848:	462a      	mov	r2, r5
 800b84a:	6866      	ldr	r6, [r4, #4]
 800b84c:	f003 f86a 	bl	800e924 <rmw_create_node>
 800b850:	6863      	ldr	r3, [r4, #4]
 800b852:	66b0      	str	r0, [r6, #104]	@ 0x68
 800b854:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b856:	2800      	cmp	r0, #0
 800b858:	d032      	beq.n	800b8c0 <rcl_node_init+0x19c>
 800b85a:	f003 f8f7 	bl	800ea4c <rmw_node_get_graph_guard_condition>
 800b85e:	4681      	mov	r9, r0
 800b860:	b360      	cbz	r0, 800b8bc <rcl_node_init+0x198>
 800b862:	f8d8 3000 	ldr.w	r3, [r8]
 800b866:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b86a:	6866      	ldr	r6, [r4, #4]
 800b86c:	2008      	movs	r0, #8
 800b86e:	4798      	blx	r3
 800b870:	6863      	ldr	r3, [r4, #4]
 800b872:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800b874:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800b878:	f1bb 0f00 	cmp.w	fp, #0
 800b87c:	d020      	beq.n	800b8c0 <rcl_node_init+0x19c>
 800b87e:	a806      	add	r0, sp, #24
 800b880:	f007 fda8 	bl	80133d4 <rcl_get_zero_initialized_guard_condition>
 800b884:	a806      	add	r0, sp, #24
 800b886:	c803      	ldmia	r0, {r0, r1}
 800b888:	6863      	ldr	r3, [r4, #4]
 800b88a:	46c4      	mov	ip, r8
 800b88c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800b890:	e88b 0003 	stmia.w	fp, {r0, r1}
 800b894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b898:	ae23      	add	r6, sp, #140	@ 0x8c
 800b89a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b89c:	f8dc 3000 	ldr.w	r3, [ip]
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	ab28      	add	r3, sp, #160	@ 0xa0
 800b8a4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b8a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8b0:	463a      	mov	r2, r7
 800b8b2:	4670      	mov	r0, lr
 800b8b4:	f007 fd98 	bl	80133e8 <rcl_guard_condition_init_from_rmw>
 800b8b8:	4681      	mov	r9, r0
 800b8ba:	b328      	cbz	r0, 800b908 <rcl_node_init+0x1e4>
 800b8bc:	6863      	ldr	r3, [r4, #4]
 800b8be:	b1f3      	cbz	r3, 800b8fe <rcl_node_init+0x1da>
 800b8c0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b8c2:	b128      	cbz	r0, 800b8d0 <rcl_node_init+0x1ac>
 800b8c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8c8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b8cc:	4798      	blx	r3
 800b8ce:	6863      	ldr	r3, [r4, #4]
 800b8d0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800b8d2:	b110      	cbz	r0, 800b8da <rcl_node_init+0x1b6>
 800b8d4:	f003 f83e 	bl	800e954 <rmw_destroy_node>
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b8dc:	b148      	cbz	r0, 800b8f2 <rcl_node_init+0x1ce>
 800b8de:	f007 fde3 	bl	80134a8 <rcl_guard_condition_fini>
 800b8e2:	6863      	ldr	r3, [r4, #4]
 800b8e4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b8e8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b8ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8ee:	4798      	blx	r3
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8fc:	4798      	blx	r3
 800b8fe:	2300      	movs	r3, #0
 800b900:	e9c4 3300 	strd	r3, r3, [r4]
 800b904:	f04f 0901 	mov.w	r9, #1
 800b908:	f1ba 0f00 	cmp.w	sl, #0
 800b90c:	d125      	bne.n	800b95a <rcl_node_init+0x236>
 800b90e:	e001      	b.n	800b914 <rcl_node_init+0x1f0>
 800b910:	f04f 090b 	mov.w	r9, #11
 800b914:	4648      	mov	r0, r9
 800b916:	b029      	add	sp, #164	@ 0xa4
 800b918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800b920:	e7f8      	b.n	800b914 <rcl_node_init+0x1f0>
 800b922:	782b      	ldrb	r3, [r5, #0]
 800b924:	2b2f      	cmp	r3, #47	@ 0x2f
 800b926:	f43f af42 	beq.w	800b7ae <rcl_node_init+0x8a>
 800b92a:	9503      	str	r5, [sp, #12]
 800b92c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	4b1e      	ldr	r3, [pc, #120]	@ (800b9ac <rcl_node_init+0x288>)
 800b934:	9302      	str	r3, [sp, #8]
 800b936:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800b940:	f002 f892 	bl	800da68 <rcutils_format_string_limit>
 800b944:	4605      	mov	r5, r0
 800b946:	b340      	cbz	r0, 800b99a <rcl_node_init+0x276>
 800b948:	2200      	movs	r2, #0
 800b94a:	a922      	add	r1, sp, #136	@ 0x88
 800b94c:	9222      	str	r2, [sp, #136]	@ 0x88
 800b94e:	f002 fc1f 	bl	800e190 <rmw_validate_namespace>
 800b952:	4681      	mov	r9, r0
 800b954:	2800      	cmp	r0, #0
 800b956:	f43f af34 	beq.w	800b7c2 <rcl_node_init+0x9e>
 800b95a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b95e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b962:	4628      	mov	r0, r5
 800b964:	4798      	blx	r3
 800b966:	e7d5      	b.n	800b914 <rcl_node_init+0x1f0>
 800b968:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800b96c:	4648      	mov	r0, r9
 800b96e:	b029      	add	sp, #164	@ 0xa4
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	f04f 090a 	mov.w	r9, #10
 800b978:	f1ba 0f00 	cmp.w	sl, #0
 800b97c:	d1ed      	bne.n	800b95a <rcl_node_init+0x236>
 800b97e:	e7c9      	b.n	800b914 <rcl_node_init+0x1f0>
 800b980:	f002 fc76 	bl	800e270 <rmw_node_name_validation_result_string>
 800b984:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800b988:	e7c4      	b.n	800b914 <rcl_node_init+0x1f0>
 800b98a:	f002 fc13 	bl	800e1b4 <rmw_namespace_validation_result_string>
 800b98e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800b992:	f1ba 0f00 	cmp.w	sl, #0
 800b996:	d1e0      	bne.n	800b95a <rcl_node_init+0x236>
 800b998:	e7bc      	b.n	800b914 <rcl_node_init+0x1f0>
 800b99a:	f04f 090a 	mov.w	r9, #10
 800b99e:	e7b9      	b.n	800b914 <rcl_node_init+0x1f0>
 800b9a0:	08016430 	.word	0x08016430
 800b9a4:	08016438 	.word	0x08016438
 800b9a8:	08016440 	.word	0x08016440
 800b9ac:	08016434 	.word	0x08016434

0800b9b0 <rcl_node_is_valid>:
 800b9b0:	b130      	cbz	r0, 800b9c0 <rcl_node_is_valid+0x10>
 800b9b2:	6843      	ldr	r3, [r0, #4]
 800b9b4:	b123      	cbz	r3, 800b9c0 <rcl_node_is_valid+0x10>
 800b9b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9b8:	b113      	cbz	r3, 800b9c0 <rcl_node_is_valid+0x10>
 800b9ba:	6800      	ldr	r0, [r0, #0]
 800b9bc:	f7ff bc34 	b.w	800b228 <rcl_context_is_valid>
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	4770      	bx	lr

0800b9c4 <rcl_node_get_name>:
 800b9c4:	b120      	cbz	r0, 800b9d0 <rcl_node_get_name+0xc>
 800b9c6:	6840      	ldr	r0, [r0, #4]
 800b9c8:	b110      	cbz	r0, 800b9d0 <rcl_node_get_name+0xc>
 800b9ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b9cc:	b100      	cbz	r0, 800b9d0 <rcl_node_get_name+0xc>
 800b9ce:	6880      	ldr	r0, [r0, #8]
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop

0800b9d4 <rcl_node_get_namespace>:
 800b9d4:	b120      	cbz	r0, 800b9e0 <rcl_node_get_namespace+0xc>
 800b9d6:	6840      	ldr	r0, [r0, #4]
 800b9d8:	b110      	cbz	r0, 800b9e0 <rcl_node_get_namespace+0xc>
 800b9da:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b9dc:	b100      	cbz	r0, 800b9e0 <rcl_node_get_namespace+0xc>
 800b9de:	68c0      	ldr	r0, [r0, #12]
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop

0800b9e4 <rcl_node_get_options>:
 800b9e4:	b128      	cbz	r0, 800b9f2 <rcl_node_get_options+0xe>
 800b9e6:	6840      	ldr	r0, [r0, #4]
 800b9e8:	b118      	cbz	r0, 800b9f2 <rcl_node_get_options+0xe>
 800b9ea:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bf08      	it	eq
 800b9f0:	2000      	moveq	r0, #0
 800b9f2:	4770      	bx	lr

0800b9f4 <rcl_node_get_rmw_handle>:
 800b9f4:	b110      	cbz	r0, 800b9fc <rcl_node_get_rmw_handle+0x8>
 800b9f6:	6840      	ldr	r0, [r0, #4]
 800b9f8:	b100      	cbz	r0, 800b9fc <rcl_node_get_rmw_handle+0x8>
 800b9fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop

0800ba00 <rcl_node_get_default_options>:
 800ba00:	b510      	push	{r4, lr}
 800ba02:	2268      	movs	r2, #104	@ 0x68
 800ba04:	4604      	mov	r4, r0
 800ba06:	2100      	movs	r1, #0
 800ba08:	f009 fba6 	bl	8015158 <memset>
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f7fd ffd3 	bl	80099b8 <rcutils_get_default_allocator>
 800ba12:	2301      	movs	r3, #1
 800ba14:	7523      	strb	r3, [r4, #20]
 800ba16:	4620      	mov	r0, r4
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	bf00      	nop

0800ba1c <rcl_node_options_copy>:
 800ba1c:	b1d0      	cbz	r0, 800ba54 <rcl_node_options_copy+0x38>
 800ba1e:	b570      	push	{r4, r5, r6, lr}
 800ba20:	460c      	mov	r4, r1
 800ba22:	b1a9      	cbz	r1, 800ba50 <rcl_node_options_copy+0x34>
 800ba24:	4288      	cmp	r0, r1
 800ba26:	4684      	mov	ip, r0
 800ba28:	d012      	beq.n	800ba50 <rcl_node_options_copy+0x34>
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	8a86      	ldrh	r6, [r0, #20]
 800ba2e:	468e      	mov	lr, r1
 800ba30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba32:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	f8ce 3000 	str.w	r3, [lr]
 800ba3c:	f10c 0118 	add.w	r1, ip, #24
 800ba40:	2250      	movs	r2, #80	@ 0x50
 800ba42:	82a6      	strh	r6, [r4, #20]
 800ba44:	f104 0018 	add.w	r0, r4, #24
 800ba48:	f009 fc4f 	bl	80152ea <memcpy>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}
 800ba50:	200b      	movs	r0, #11
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	200b      	movs	r0, #11
 800ba56:	4770      	bx	lr

0800ba58 <rcl_node_resolve_name>:
 800ba58:	b082      	sub	sp, #8
 800ba5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5e:	b091      	sub	sp, #68	@ 0x44
 800ba60:	ac1a      	add	r4, sp, #104	@ 0x68
 800ba62:	e884 000c 	stmia.w	r4, {r2, r3}
 800ba66:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d03b      	beq.n	800bae6 <rcl_node_resolve_name+0x8e>
 800ba6e:	460c      	mov	r4, r1
 800ba70:	4605      	mov	r5, r0
 800ba72:	f7ff ffb7 	bl	800b9e4 <rcl_node_get_options>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d037      	beq.n	800baea <rcl_node_resolve_name+0x92>
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f7ff ffa2 	bl	800b9c4 <rcl_node_get_name>
 800ba80:	4606      	mov	r6, r0
 800ba82:	4628      	mov	r0, r5
 800ba84:	f7ff ffa6 	bl	800b9d4 <rcl_node_get_namespace>
 800ba88:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800ba8c:	4681      	mov	r9, r0
 800ba8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba92:	ad0b      	add	r5, sp, #44	@ 0x2c
 800ba94:	46ac      	mov	ip, r5
 800ba96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba9a:	f8de 3000 	ldr.w	r3, [lr]
 800ba9e:	f8cc 3000 	str.w	r3, [ip]
 800baa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800baa4:	b1fb      	cbz	r3, 800bae6 <rcl_node_resolve_name+0x8e>
 800baa6:	468a      	mov	sl, r1
 800baa8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800baac:	f002 f934 	bl	800dd18 <rcutils_get_zero_initialized_string_map>
 800bab0:	ab10      	add	r3, sp, #64	@ 0x40
 800bab2:	9008      	str	r0, [sp, #32]
 800bab4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800bab8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800babc:	2100      	movs	r1, #0
 800babe:	e895 000c 	ldmia.w	r5, {r2, r3}
 800bac2:	a808      	add	r0, sp, #32
 800bac4:	f002 f9a0 	bl	800de08 <rcutils_string_map_init>
 800bac8:	4607      	mov	r7, r0
 800baca:	b180      	cbz	r0, 800baee <rcl_node_resolve_name+0x96>
 800bacc:	f7fd ff90 	bl	80099f0 <rcutils_get_error_string>
 800bad0:	f7fd ffa6 	bl	8009a20 <rcutils_reset_error>
 800bad4:	2f0a      	cmp	r7, #10
 800bad6:	bf18      	it	ne
 800bad8:	2701      	movne	r7, #1
 800bada:	4638      	mov	r0, r7
 800badc:	b011      	add	sp, #68	@ 0x44
 800bade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae2:	b002      	add	sp, #8
 800bae4:	4770      	bx	lr
 800bae6:	270b      	movs	r7, #11
 800bae8:	e7f7      	b.n	800bada <rcl_node_resolve_name+0x82>
 800baea:	2701      	movs	r7, #1
 800baec:	e7f5      	b.n	800bada <rcl_node_resolve_name+0x82>
 800baee:	9009      	str	r0, [sp, #36]	@ 0x24
 800baf0:	9007      	str	r0, [sp, #28]
 800baf2:	a808      	add	r0, sp, #32
 800baf4:	f007 fc68 	bl	80133c8 <rcl_get_default_topic_name_substitutions>
 800baf8:	4607      	mov	r7, r0
 800bafa:	b1a8      	cbz	r0, 800bb28 <rcl_node_resolve_name+0xd0>
 800bafc:	280a      	cmp	r0, #10
 800bafe:	9c07      	ldr	r4, [sp, #28]
 800bb00:	d000      	beq.n	800bb04 <rcl_node_resolve_name+0xac>
 800bb02:	2701      	movs	r7, #1
 800bb04:	a808      	add	r0, sp, #32
 800bb06:	f002 f9bf 	bl	800de88 <rcutils_string_map_fini>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d13d      	bne.n	800bb8a <rcl_node_resolve_name+0x132>
 800bb0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb10:	4659      	mov	r1, fp
 800bb12:	47d0      	blx	sl
 800bb14:	4659      	mov	r1, fp
 800bb16:	4620      	mov	r0, r4
 800bb18:	47d0      	blx	sl
 800bb1a:	f1b8 0f00 	cmp.w	r8, #0
 800bb1e:	d0dc      	beq.n	800bada <rcl_node_resolve_name+0x82>
 800bb20:	2f67      	cmp	r7, #103	@ 0x67
 800bb22:	bf08      	it	eq
 800bb24:	2768      	moveq	r7, #104	@ 0x68
 800bb26:	e7d8      	b.n	800bada <rcl_node_resolve_name+0x82>
 800bb28:	ab09      	add	r3, sp, #36	@ 0x24
 800bb2a:	9305      	str	r3, [sp, #20]
 800bb2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb2e:	46ec      	mov	ip, sp
 800bb30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	f8cc 3000 	str.w	r3, [ip]
 800bb3a:	464a      	mov	r2, r9
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4620      	mov	r0, r4
 800bb40:	ab08      	add	r3, sp, #32
 800bb42:	f007 fae3 	bl	801310c <rcl_expand_topic_name>
 800bb46:	4607      	mov	r7, r0
 800bb48:	b9b8      	cbnz	r0, 800bb7a <rcl_node_resolve_name+0x122>
 800bb4a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bb4c:	9009      	str	r0, [sp, #36]	@ 0x24
 800bb4e:	4602      	mov	r2, r0
 800bb50:	a90a      	add	r1, sp, #40	@ 0x28
 800bb52:	4620      	mov	r0, r4
 800bb54:	f002 fa58 	bl	800e008 <rmw_validate_full_topic_name>
 800bb58:	b988      	cbnz	r0, 800bb7e <rcl_node_resolve_name+0x126>
 800bb5a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bb5c:	b9d5      	cbnz	r5, 800bb94 <rcl_node_resolve_name+0x13c>
 800bb5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb60:	a808      	add	r0, sp, #32
 800bb62:	601c      	str	r4, [r3, #0]
 800bb64:	f002 f990 	bl	800de88 <rcutils_string_map_fini>
 800bb68:	4607      	mov	r7, r0
 800bb6a:	b1a8      	cbz	r0, 800bb98 <rcl_node_resolve_name+0x140>
 800bb6c:	f7fd ff40 	bl	80099f0 <rcutils_get_error_string>
 800bb70:	462c      	mov	r4, r5
 800bb72:	f7fd ff55 	bl	8009a20 <rcutils_reset_error>
 800bb76:	2701      	movs	r7, #1
 800bb78:	e7c9      	b.n	800bb0e <rcl_node_resolve_name+0xb6>
 800bb7a:	9c07      	ldr	r4, [sp, #28]
 800bb7c:	e7c2      	b.n	800bb04 <rcl_node_resolve_name+0xac>
 800bb7e:	f7fd ff37 	bl	80099f0 <rcutils_get_error_string>
 800bb82:	2701      	movs	r7, #1
 800bb84:	f7fd ff4c 	bl	8009a20 <rcutils_reset_error>
 800bb88:	e7bc      	b.n	800bb04 <rcl_node_resolve_name+0xac>
 800bb8a:	f7fd ff31 	bl	80099f0 <rcutils_get_error_string>
 800bb8e:	f7fd ff47 	bl	8009a20 <rcutils_reset_error>
 800bb92:	e7bc      	b.n	800bb0e <rcl_node_resolve_name+0xb6>
 800bb94:	2767      	movs	r7, #103	@ 0x67
 800bb96:	e7b5      	b.n	800bb04 <rcl_node_resolve_name+0xac>
 800bb98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	47d0      	blx	sl
 800bb9e:	4659      	mov	r1, fp
 800bba0:	4638      	mov	r0, r7
 800bba2:	47d0      	blx	sl
 800bba4:	e799      	b.n	800bada <rcl_node_resolve_name+0x82>
 800bba6:	bf00      	nop

0800bba8 <rcl_service_get_rmw_handle>:
 800bba8:	b118      	cbz	r0, 800bbb2 <rcl_service_get_rmw_handle+0xa>
 800bbaa:	6800      	ldr	r0, [r0, #0]
 800bbac:	b108      	cbz	r0, 800bbb2 <rcl_service_get_rmw_handle+0xa>
 800bbae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800bbb2:	4770      	bx	lr

0800bbb4 <rcl_take_request>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	468e      	mov	lr, r1
 800bbb8:	460c      	mov	r4, r1
 800bbba:	4616      	mov	r6, r2
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bbc2:	b08c      	sub	sp, #48	@ 0x30
 800bbc4:	f10d 0c18 	add.w	ip, sp, #24
 800bbc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bbcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bbd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bbd4:	b30d      	cbz	r5, 800bc1a <rcl_take_request+0x66>
 800bbd6:	682b      	ldr	r3, [r5, #0]
 800bbd8:	b1fb      	cbz	r3, 800bc1a <rcl_take_request+0x66>
 800bbda:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800bbde:	b1e0      	cbz	r0, 800bc1a <rcl_take_request+0x66>
 800bbe0:	b336      	cbz	r6, 800bc30 <rcl_take_request+0x7c>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f88d 3007 	strb.w	r3, [sp, #7]
 800bbe8:	4632      	mov	r2, r6
 800bbea:	f10d 0307 	add.w	r3, sp, #7
 800bbee:	a902      	add	r1, sp, #8
 800bbf0:	f002 ffd2 	bl	800eb98 <rmw_take_request>
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	b198      	cbz	r0, 800bc20 <rcl_take_request+0x6c>
 800bbf8:	280a      	cmp	r0, #10
 800bbfa:	bf18      	it	ne
 800bbfc:	2501      	movne	r5, #1
 800bbfe:	f10d 0e18 	add.w	lr, sp, #24
 800bc02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc06:	46a4      	mov	ip, r4
 800bc08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bc10:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bc14:	4628      	mov	r0, r5
 800bc16:	b00c      	add	sp, #48	@ 0x30
 800bc18:	bd70      	pop	{r4, r5, r6, pc}
 800bc1a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800bc1e:	e7ee      	b.n	800bbfe <rcl_take_request+0x4a>
 800bc20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc24:	f240 2359 	movw	r3, #601	@ 0x259
 800bc28:	2a00      	cmp	r2, #0
 800bc2a:	bf08      	it	eq
 800bc2c:	461d      	moveq	r5, r3
 800bc2e:	e7e6      	b.n	800bbfe <rcl_take_request+0x4a>
 800bc30:	250b      	movs	r5, #11
 800bc32:	e7e4      	b.n	800bbfe <rcl_take_request+0x4a>

0800bc34 <rcl_send_response>:
 800bc34:	b170      	cbz	r0, 800bc54 <rcl_send_response+0x20>
 800bc36:	6800      	ldr	r0, [r0, #0]
 800bc38:	b160      	cbz	r0, 800bc54 <rcl_send_response+0x20>
 800bc3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800bc3e:	b148      	cbz	r0, 800bc54 <rcl_send_response+0x20>
 800bc40:	b159      	cbz	r1, 800bc5a <rcl_send_response+0x26>
 800bc42:	b510      	push	{r4, lr}
 800bc44:	b15a      	cbz	r2, 800bc5e <rcl_send_response+0x2a>
 800bc46:	f003 f805 	bl	800ec54 <rmw_send_response>
 800bc4a:	b110      	cbz	r0, 800bc52 <rcl_send_response+0x1e>
 800bc4c:	2802      	cmp	r0, #2
 800bc4e:	bf18      	it	ne
 800bc50:	2001      	movne	r0, #1
 800bc52:	bd10      	pop	{r4, pc}
 800bc54:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800bc58:	4770      	bx	lr
 800bc5a:	200b      	movs	r0, #11
 800bc5c:	4770      	bx	lr
 800bc5e:	200b      	movs	r0, #11
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop

0800bc64 <rcl_service_is_valid>:
 800bc64:	b130      	cbz	r0, 800bc74 <rcl_service_is_valid+0x10>
 800bc66:	6800      	ldr	r0, [r0, #0]
 800bc68:	b120      	cbz	r0, 800bc74 <rcl_service_is_valid+0x10>
 800bc6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800bc6e:	3800      	subs	r0, #0
 800bc70:	bf18      	it	ne
 800bc72:	2001      	movne	r0, #1
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop

0800bc78 <rcl_get_zero_initialized_subscription>:
 800bc78:	4b01      	ldr	r3, [pc, #4]	@ (800bc80 <rcl_get_zero_initialized_subscription+0x8>)
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	08016450 	.word	0x08016450

0800bc84 <rcl_subscription_init>:
 800bc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc88:	b089      	sub	sp, #36	@ 0x24
 800bc8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800bc8c:	b1d6      	cbz	r6, 800bcc4 <rcl_subscription_init+0x40>
 800bc8e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800bc92:	4604      	mov	r4, r0
 800bc94:	4648      	mov	r0, r9
 800bc96:	460d      	mov	r5, r1
 800bc98:	4690      	mov	r8, r2
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	f7fd fe9a 	bl	80099d4 <rcutils_allocator_is_valid>
 800bca0:	b180      	cbz	r0, 800bcc4 <rcl_subscription_init+0x40>
 800bca2:	b17c      	cbz	r4, 800bcc4 <rcl_subscription_init+0x40>
 800bca4:	4628      	mov	r0, r5
 800bca6:	f7ff fe83 	bl	800b9b0 <rcl_node_is_valid>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d054      	beq.n	800bd58 <rcl_subscription_init+0xd4>
 800bcae:	f1b8 0f00 	cmp.w	r8, #0
 800bcb2:	d007      	beq.n	800bcc4 <rcl_subscription_init+0x40>
 800bcb4:	b137      	cbz	r7, 800bcc4 <rcl_subscription_init+0x40>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	b14b      	cbz	r3, 800bcce <rcl_subscription_init+0x4a>
 800bcba:	2764      	movs	r7, #100	@ 0x64
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	b009      	add	sp, #36	@ 0x24
 800bcc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc4:	270b      	movs	r7, #11
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	b009      	add	sp, #36	@ 0x24
 800bcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800bcd2:	aa07      	add	r2, sp, #28
 800bcd4:	9205      	str	r2, [sp, #20]
 800bcd6:	9307      	str	r3, [sp, #28]
 800bcd8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800bcdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bce0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bce4:	4639      	mov	r1, r7
 800bce6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7ff feb4 	bl	800ba58 <rcl_node_resolve_name>
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d15f      	bne.n	800bdb6 <rcl_subscription_init+0x132>
 800bcf6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800bcfa:	21c8      	movs	r1, #200	@ 0xc8
 800bcfc:	2001      	movs	r0, #1
 800bcfe:	4798      	blx	r3
 800bd00:	6020      	str	r0, [r4, #0]
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d05d      	beq.n	800bdc2 <rcl_subscription_init+0x13e>
 800bd06:	4628      	mov	r0, r5
 800bd08:	f7ff fe74 	bl	800b9f4 <rcl_node_get_rmw_handle>
 800bd0c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	9a07      	ldr	r2, [sp, #28]
 800bd14:	6827      	ldr	r7, [r4, #0]
 800bd16:	4641      	mov	r1, r8
 800bd18:	4633      	mov	r3, r6
 800bd1a:	f003 f885 	bl	800ee28 <rmw_create_subscription>
 800bd1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800bd22:	6827      	ldr	r7, [r4, #0]
 800bd24:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800bd28:	b348      	cbz	r0, 800bd7e <rcl_subscription_init+0xfa>
 800bd2a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800bd2e:	f003 f95d 	bl	800efec <rmw_subscription_get_actual_qos>
 800bd32:	4607      	mov	r7, r0
 800bd34:	b9a8      	cbnz	r0, 800bd62 <rcl_subscription_init+0xde>
 800bd36:	6820      	ldr	r0, [r4, #0]
 800bd38:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800bd3c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800bd40:	2270      	movs	r2, #112	@ 0x70
 800bd42:	4631      	mov	r1, r6
 800bd44:	f009 fad1 	bl	80152ea <memcpy>
 800bd48:	9807      	ldr	r0, [sp, #28]
 800bd4a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800bd4c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800bd4e:	4798      	blx	r3
 800bd50:	4638      	mov	r0, r7
 800bd52:	b009      	add	sp, #36	@ 0x24
 800bd54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd58:	27c8      	movs	r7, #200	@ 0xc8
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	b009      	add	sp, #36	@ 0x24
 800bd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd62:	6827      	ldr	r7, [r4, #0]
 800bd64:	b32f      	cbz	r7, 800bdb2 <rcl_subscription_init+0x12e>
 800bd66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd6a:	b14b      	cbz	r3, 800bd80 <rcl_subscription_init+0xfc>
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f7ff fe41 	bl	800b9f4 <rcl_node_get_rmw_handle>
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800bd78:	f003 f948 	bl	800f00c <rmw_destroy_subscription>
 800bd7c:	6827      	ldr	r7, [r4, #0]
 800bd7e:	b197      	cbz	r7, 800bda6 <rcl_subscription_init+0x122>
 800bd80:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7fd fe25 	bl	80099d4 <rcutils_allocator_is_valid>
 800bd8a:	b158      	cbz	r0, 800bda4 <rcl_subscription_init+0x120>
 800bd8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd8e:	b148      	cbz	r0, 800bda4 <rcl_subscription_init+0x120>
 800bd90:	4629      	mov	r1, r5
 800bd92:	f002 f911 	bl	800dfb8 <rmw_subscription_content_filter_options_fini>
 800bd96:	4605      	mov	r5, r0
 800bd98:	b9b8      	cbnz	r0, 800bdca <rcl_subscription_init+0x146>
 800bd9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd9c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800bd9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bda0:	4798      	blx	r3
 800bda2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800bda4:	6827      	ldr	r7, [r4, #0]
 800bda6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800bda8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800bdaa:	4638      	mov	r0, r7
 800bdac:	4798      	blx	r3
 800bdae:	2300      	movs	r3, #0
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	2701      	movs	r7, #1
 800bdb4:	e7c8      	b.n	800bd48 <rcl_subscription_init+0xc4>
 800bdb6:	2867      	cmp	r0, #103	@ 0x67
 800bdb8:	d0c6      	beq.n	800bd48 <rcl_subscription_init+0xc4>
 800bdba:	2869      	cmp	r0, #105	@ 0x69
 800bdbc:	d003      	beq.n	800bdc6 <rcl_subscription_init+0x142>
 800bdbe:	280a      	cmp	r0, #10
 800bdc0:	d1f7      	bne.n	800bdb2 <rcl_subscription_init+0x12e>
 800bdc2:	270a      	movs	r7, #10
 800bdc4:	e7c0      	b.n	800bd48 <rcl_subscription_init+0xc4>
 800bdc6:	2767      	movs	r7, #103	@ 0x67
 800bdc8:	e7be      	b.n	800bd48 <rcl_subscription_init+0xc4>
 800bdca:	f007 f957 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800bdce:	6827      	ldr	r7, [r4, #0]
 800bdd0:	e7e9      	b.n	800bda6 <rcl_subscription_init+0x122>
 800bdd2:	bf00      	nop

0800bdd4 <rcl_subscription_get_default_options>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4d14      	ldr	r5, [pc, #80]	@ (800be28 <rcl_subscription_get_default_options+0x54>)
 800bdd8:	4914      	ldr	r1, [pc, #80]	@ (800be2c <rcl_subscription_get_default_options+0x58>)
 800bdda:	b08a      	sub	sp, #40	@ 0x28
 800bddc:	4604      	mov	r4, r0
 800bdde:	2250      	movs	r2, #80	@ 0x50
 800bde0:	4628      	mov	r0, r5
 800bde2:	f009 fa82 	bl	80152ea <memcpy>
 800bde6:	a804      	add	r0, sp, #16
 800bde8:	f7fd fde6 	bl	80099b8 <rcutils_get_default_allocator>
 800bdec:	f10d 0c10 	add.w	ip, sp, #16
 800bdf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bdf4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bdf8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bdfc:	466e      	mov	r6, sp
 800bdfe:	f8dc 3000 	ldr.w	r3, [ip]
 800be02:	f8ce 3000 	str.w	r3, [lr]
 800be06:	4630      	mov	r0, r6
 800be08:	f002 f8f0 	bl	800dfec <rmw_get_default_subscription_options>
 800be0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800be10:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800be14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be18:	2270      	movs	r2, #112	@ 0x70
 800be1a:	4629      	mov	r1, r5
 800be1c:	4620      	mov	r0, r4
 800be1e:	f009 fa64 	bl	80152ea <memcpy>
 800be22:	4620      	mov	r0, r4
 800be24:	b00a      	add	sp, #40	@ 0x28
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	20009388 	.word	0x20009388
 800be2c:	08016458 	.word	0x08016458

0800be30 <rcl_take>:
 800be30:	2800      	cmp	r0, #0
 800be32:	d04a      	beq.n	800beca <rcl_take+0x9a>
 800be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be38:	4604      	mov	r4, r0
 800be3a:	6800      	ldr	r0, [r0, #0]
 800be3c:	b0a4      	sub	sp, #144	@ 0x90
 800be3e:	2800      	cmp	r0, #0
 800be40:	d03b      	beq.n	800beba <rcl_take+0x8a>
 800be42:	461f      	mov	r7, r3
 800be44:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d036      	beq.n	800beba <rcl_take+0x8a>
 800be4c:	460e      	mov	r6, r1
 800be4e:	2900      	cmp	r1, #0
 800be50:	d039      	beq.n	800bec6 <rcl_take+0x96>
 800be52:	4615      	mov	r5, r2
 800be54:	2a00      	cmp	r2, #0
 800be56:	d03c      	beq.n	800bed2 <rcl_take+0xa2>
 800be58:	a802      	add	r0, sp, #8
 800be5a:	f002 f8cd 	bl	800dff8 <rmw_get_zero_initialized_message_info>
 800be5e:	f10d 0c08 	add.w	ip, sp, #8
 800be62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800be66:	46ae      	mov	lr, r5
 800be68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800be6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800be70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800be74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800be78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800be7c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800be80:	f04f 0800 	mov.w	r8, #0
 800be84:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800be88:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800be8c:	6822      	ldr	r2, [r4, #0]
 800be8e:	462b      	mov	r3, r5
 800be90:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800be94:	9700      	str	r7, [sp, #0]
 800be96:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800be9a:	4631      	mov	r1, r6
 800be9c:	f003 f916 	bl	800f0cc <rmw_take_with_info>
 800bea0:	4603      	mov	r3, r0
 800bea2:	b9c0      	cbnz	r0, 800bed6 <rcl_take+0xa6>
 800bea4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800bea8:	f240 1291 	movw	r2, #401	@ 0x191
 800beac:	2900      	cmp	r1, #0
 800beae:	bf08      	it	eq
 800beb0:	4613      	moveq	r3, r2
 800beb2:	4618      	mov	r0, r3
 800beb4:	b024      	add	sp, #144	@ 0x90
 800beb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beba:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800bebe:	4618      	mov	r0, r3
 800bec0:	b024      	add	sp, #144	@ 0x90
 800bec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec6:	230b      	movs	r3, #11
 800bec8:	e7f3      	b.n	800beb2 <rcl_take+0x82>
 800beca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800bece:	4618      	mov	r0, r3
 800bed0:	4770      	bx	lr
 800bed2:	ad14      	add	r5, sp, #80	@ 0x50
 800bed4:	e7c0      	b.n	800be58 <rcl_take+0x28>
 800bed6:	f007 f8d1 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 800beda:	4603      	mov	r3, r0
 800bedc:	e7e9      	b.n	800beb2 <rcl_take+0x82>
 800bede:	bf00      	nop

0800bee0 <rcl_subscription_get_rmw_handle>:
 800bee0:	b118      	cbz	r0, 800beea <rcl_subscription_get_rmw_handle+0xa>
 800bee2:	6800      	ldr	r0, [r0, #0]
 800bee4:	b108      	cbz	r0, 800beea <rcl_subscription_get_rmw_handle+0xa>
 800bee6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800beea:	4770      	bx	lr

0800beec <rcl_subscription_is_valid>:
 800beec:	b130      	cbz	r0, 800befc <rcl_subscription_is_valid+0x10>
 800beee:	6800      	ldr	r0, [r0, #0]
 800bef0:	b120      	cbz	r0, 800befc <rcl_subscription_is_valid+0x10>
 800bef2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800bef6:	3800      	subs	r0, #0
 800bef8:	bf18      	it	ne
 800befa:	2001      	movne	r0, #1
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop

0800bf00 <rcl_get_system_time>:
 800bf00:	4608      	mov	r0, r1
 800bf02:	f7fd bda9 	b.w	8009a58 <rcutils_system_time_now>
 800bf06:	bf00      	nop

0800bf08 <rcl_get_steady_time>:
 800bf08:	4608      	mov	r0, r1
 800bf0a:	f7fd bdcd 	b.w	8009aa8 <rcutils_steady_time_now>
 800bf0e:	bf00      	nop

0800bf10 <rcl_get_ros_time>:
 800bf10:	7a03      	ldrb	r3, [r0, #8]
 800bf12:	b510      	push	{r4, lr}
 800bf14:	460c      	mov	r4, r1
 800bf16:	b133      	cbz	r3, 800bf26 <rcl_get_ros_time+0x16>
 800bf18:	2105      	movs	r1, #5
 800bf1a:	f001 fce9 	bl	800d8f0 <__atomic_load_8>
 800bf1e:	e9c4 0100 	strd	r0, r1, [r4]
 800bf22:	2000      	movs	r0, #0
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf2a:	4608      	mov	r0, r1
 800bf2c:	f7fd bd94 	b.w	8009a58 <rcutils_system_time_now>

0800bf30 <rcl_clock_init>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	4605      	mov	r5, r0
 800bf34:	4610      	mov	r0, r2
 800bf36:	4614      	mov	r4, r2
 800bf38:	460e      	mov	r6, r1
 800bf3a:	f7fd fd4b 	bl	80099d4 <rcutils_allocator_is_valid>
 800bf3e:	b128      	cbz	r0, 800bf4c <rcl_clock_init+0x1c>
 800bf40:	2d03      	cmp	r5, #3
 800bf42:	d803      	bhi.n	800bf4c <rcl_clock_init+0x1c>
 800bf44:	e8df f005 	tbb	[pc, r5]
 800bf48:	06532e1d 	.word	0x06532e1d
 800bf4c:	f04f 0c0b 	mov.w	ip, #11
 800bf50:	4660      	mov	r0, ip
 800bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf54:	2e00      	cmp	r6, #0
 800bf56:	d0f9      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	d0f7      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800bf62:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800c018 <rcl_clock_init+0xe8>
 800bf66:	6133      	str	r3, [r6, #16]
 800bf68:	f106 0514 	add.w	r5, r6, #20
 800bf6c:	469c      	mov	ip, r3
 800bf6e:	2703      	movs	r7, #3
 800bf70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	7037      	strb	r7, [r6, #0]
 800bf7a:	f8c6 e00c 	str.w	lr, [r6, #12]
 800bf7e:	4660      	mov	r0, ip
 800bf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	d0e2      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bf86:	2300      	movs	r3, #0
 800bf88:	7033      	strb	r3, [r6, #0]
 800bf8a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800bf8e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800bf92:	469c      	mov	ip, r3
 800bf94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf96:	f106 0514 	add.w	r5, r6, #20
 800bf9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	4660      	mov	r0, ip
 800bfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa4:	2e00      	cmp	r6, #0
 800bfa6:	d0d1      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bfa8:	2c00      	cmp	r4, #0
 800bfaa:	d0cf      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bfac:	2700      	movs	r7, #0
 800bfae:	7037      	strb	r7, [r6, #0]
 800bfb0:	46a4      	mov	ip, r4
 800bfb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfb6:	f106 0514 	add.w	r5, r6, #20
 800bfba:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800bfbe:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800bfc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfc4:	f8dc 3000 	ldr.w	r3, [ip]
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	6921      	ldr	r1, [r4, #16]
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	2010      	movs	r0, #16
 800bfd0:	4798      	blx	r3
 800bfd2:	6130      	str	r0, [r6, #16]
 800bfd4:	b1d0      	cbz	r0, 800c00c <rcl_clock_init+0xdc>
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e9c0 2300 	strd	r2, r3, [r0]
 800bfde:	2301      	movs	r3, #1
 800bfe0:	7207      	strb	r7, [r0, #8]
 800bfe2:	4a0c      	ldr	r2, [pc, #48]	@ (800c014 <rcl_clock_init+0xe4>)
 800bfe4:	7033      	strb	r3, [r6, #0]
 800bfe6:	46bc      	mov	ip, r7
 800bfe8:	60f2      	str	r2, [r6, #12]
 800bfea:	4660      	mov	r0, ip
 800bfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfee:	2e00      	cmp	r6, #0
 800bff0:	d0ac      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bff2:	2c00      	cmp	r4, #0
 800bff4:	d0aa      	beq.n	800bf4c <rcl_clock_init+0x1c>
 800bff6:	2300      	movs	r3, #0
 800bff8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800bffc:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800c01c <rcl_clock_init+0xec>
 800c000:	6133      	str	r3, [r6, #16]
 800c002:	f106 0514 	add.w	r5, r6, #20
 800c006:	469c      	mov	ip, r3
 800c008:	2702      	movs	r7, #2
 800c00a:	e7b1      	b.n	800bf70 <rcl_clock_init+0x40>
 800c00c:	f04f 0c0a 	mov.w	ip, #10
 800c010:	e79e      	b.n	800bf50 <rcl_clock_init+0x20>
 800c012:	bf00      	nop
 800c014:	0800bf11 	.word	0x0800bf11
 800c018:	0800bf09 	.word	0x0800bf09
 800c01c:	0800bf01 	.word	0x0800bf01

0800c020 <rcl_clock_get_now>:
 800c020:	b140      	cbz	r0, 800c034 <rcl_clock_get_now+0x14>
 800c022:	b139      	cbz	r1, 800c034 <rcl_clock_get_now+0x14>
 800c024:	7803      	ldrb	r3, [r0, #0]
 800c026:	b11b      	cbz	r3, 800c030 <rcl_clock_get_now+0x10>
 800c028:	68c3      	ldr	r3, [r0, #12]
 800c02a:	b10b      	cbz	r3, 800c030 <rcl_clock_get_now+0x10>
 800c02c:	6900      	ldr	r0, [r0, #16]
 800c02e:	4718      	bx	r3
 800c030:	2001      	movs	r0, #1
 800c032:	4770      	bx	lr
 800c034:	200b      	movs	r0, #11
 800c036:	4770      	bx	lr

0800c038 <rcl_timer_call>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	b087      	sub	sp, #28
 800c03e:	2800      	cmp	r0, #0
 800c040:	d06d      	beq.n	800c11e <rcl_timer_call+0xe6>
 800c042:	6803      	ldr	r3, [r0, #0]
 800c044:	4604      	mov	r4, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d063      	beq.n	800c112 <rcl_timer_call+0xda>
 800c04a:	f3bf 8f5b 	dmb	ish
 800c04e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c052:	f3bf 8f5b 	dmb	ish
 800c056:	2b00      	cmp	r3, #0
 800c058:	d150      	bne.n	800c0fc <rcl_timer_call+0xc4>
 800c05a:	6803      	ldr	r3, [r0, #0]
 800c05c:	a904      	add	r1, sp, #16
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	f7ff ffde 	bl	800c020 <rcl_clock_get_now>
 800c064:	4605      	mov	r5, r0
 800c066:	2800      	cmp	r0, #0
 800c068:	d14a      	bne.n	800c100 <rcl_timer_call+0xc8>
 800c06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	db4a      	blt.n	800c108 <rcl_timer_call+0xd0>
 800c072:	6820      	ldr	r0, [r4, #0]
 800c074:	f04f 0a05 	mov.w	sl, #5
 800c078:	f8cd a000 	str.w	sl, [sp]
 800c07c:	3020      	adds	r0, #32
 800c07e:	f001 fca3 	bl	800d9c8 <__atomic_exchange_8>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	f3bf 8f5b 	dmb	ish
 800c088:	4680      	mov	r8, r0
 800c08a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c08e:	f3bf 8f5b 	dmb	ish
 800c092:	6820      	ldr	r0, [r4, #0]
 800c094:	4689      	mov	r9, r1
 800c096:	3028      	adds	r0, #40	@ 0x28
 800c098:	4651      	mov	r1, sl
 800c09a:	f001 fc29 	bl	800d8f0 <__atomic_load_8>
 800c09e:	4606      	mov	r6, r0
 800c0a0:	6820      	ldr	r0, [r4, #0]
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	3018      	adds	r0, #24
 800c0a6:	4651      	mov	r1, sl
 800c0a8:	f001 fc22 	bl	800d8f0 <__atomic_load_8>
 800c0ac:	1836      	adds	r6, r6, r0
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	4682      	mov	sl, r0
 800c0b2:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800c0b6:	eb47 0701 	adc.w	r7, r7, r1
 800c0ba:	4286      	cmp	r6, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	eb77 010c 	sbcs.w	r1, r7, ip
 800c0c2:	da04      	bge.n	800c0ce <rcl_timer_call+0x96>
 800c0c4:	ea53 0102 	orrs.w	r1, r3, r2
 800c0c8:	d12e      	bne.n	800c128 <rcl_timer_call+0xf0>
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	4667      	mov	r7, ip
 800c0ce:	6820      	ldr	r0, [r4, #0]
 800c0d0:	2105      	movs	r1, #5
 800c0d2:	4632      	mov	r2, r6
 800c0d4:	463b      	mov	r3, r7
 800c0d6:	3028      	adds	r0, #40	@ 0x28
 800c0d8:	9100      	str	r1, [sp, #0]
 800c0da:	f001 fc3f 	bl	800d95c <__atomic_store_8>
 800c0de:	f1bb 0f00 	cmp.w	fp, #0
 800c0e2:	d00d      	beq.n	800c100 <rcl_timer_call+0xc8>
 800c0e4:	9a04      	ldr	r2, [sp, #16]
 800c0e6:	9b05      	ldr	r3, [sp, #20]
 800c0e8:	ebb2 0208 	subs.w	r2, r2, r8
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	eb63 0309 	sbc.w	r3, r3, r9
 800c0f2:	47d8      	blx	fp
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	b007      	add	sp, #28
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	f240 3521 	movw	r5, #801	@ 0x321
 800c100:	4628      	mov	r0, r5
 800c102:	b007      	add	sp, #28
 800c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c108:	2501      	movs	r5, #1
 800c10a:	4628      	mov	r0, r5
 800c10c:	b007      	add	sp, #28
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800c116:	4628      	mov	r0, r5
 800c118:	b007      	add	sp, #28
 800c11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11e:	250b      	movs	r5, #11
 800c120:	4628      	mov	r0, r5
 800c122:	b007      	add	sp, #28
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	1b80      	subs	r0, r0, r6
 800c12a:	eb6c 0107 	sbc.w	r1, ip, r7
 800c12e:	3801      	subs	r0, #1
 800c130:	f161 0100 	sbc.w	r1, r1, #0
 800c134:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c138:	f7f4 fa96 	bl	8000668 <__aeabi_ldivmod>
 800c13c:	9b02      	ldr	r3, [sp, #8]
 800c13e:	3001      	adds	r0, #1
 800c140:	f141 0100 	adc.w	r1, r1, #0
 800c144:	fb00 f303 	mul.w	r3, r0, r3
 800c148:	fb01 330a 	mla	r3, r1, sl, r3
 800c14c:	fba0 0a0a 	umull	r0, sl, r0, sl
 800c150:	1986      	adds	r6, r0, r6
 800c152:	4453      	add	r3, sl
 800c154:	eb43 0707 	adc.w	r7, r3, r7
 800c158:	e7b9      	b.n	800c0ce <rcl_timer_call+0x96>
 800c15a:	bf00      	nop

0800c15c <rcl_timer_is_ready>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	b378      	cbz	r0, 800c1c2 <rcl_timer_is_ready+0x66>
 800c162:	6803      	ldr	r3, [r0, #0]
 800c164:	4604      	mov	r4, r0
 800c166:	b383      	cbz	r3, 800c1ca <rcl_timer_is_ready+0x6e>
 800c168:	460d      	mov	r5, r1
 800c16a:	b351      	cbz	r1, 800c1c2 <rcl_timer_is_ready+0x66>
 800c16c:	f3bf 8f5b 	dmb	ish
 800c170:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c174:	f3bf 8f5b 	dmb	ish
 800c178:	b953      	cbnz	r3, 800c190 <rcl_timer_is_ready+0x34>
 800c17a:	6803      	ldr	r3, [r0, #0]
 800c17c:	4669      	mov	r1, sp
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	f7ff ff4e 	bl	800c020 <rcl_clock_get_now>
 800c184:	4606      	mov	r6, r0
 800c186:	b140      	cbz	r0, 800c19a <rcl_timer_is_ready+0x3e>
 800c188:	f240 3321 	movw	r3, #801	@ 0x321
 800c18c:	4298      	cmp	r0, r3
 800c18e:	d101      	bne.n	800c194 <rcl_timer_is_ready+0x38>
 800c190:	2600      	movs	r6, #0
 800c192:	702e      	strb	r6, [r5, #0]
 800c194:	4630      	mov	r0, r6
 800c196:	b002      	add	sp, #8
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	6820      	ldr	r0, [r4, #0]
 800c19c:	2105      	movs	r1, #5
 800c19e:	3028      	adds	r0, #40	@ 0x28
 800c1a0:	f001 fba6 	bl	800d8f0 <__atomic_load_8>
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	1ac0      	subs	r0, r0, r3
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	eb61 0103 	sbc.w	r1, r1, r3
 800c1ae:	2801      	cmp	r0, #1
 800c1b0:	f171 0300 	sbcs.w	r3, r1, #0
 800c1b4:	bfb4      	ite	lt
 800c1b6:	2301      	movlt	r3, #1
 800c1b8:	2300      	movge	r3, #0
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	702b      	strb	r3, [r5, #0]
 800c1be:	b002      	add	sp, #8
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
 800c1c2:	260b      	movs	r6, #11
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	b002      	add	sp, #8
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c1ce:	e7e1      	b.n	800c194 <rcl_timer_is_ready+0x38>

0800c1d0 <rcl_timer_get_time_until_next_call>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	b330      	cbz	r0, 800c224 <rcl_timer_get_time_until_next_call+0x54>
 800c1d6:	6803      	ldr	r3, [r0, #0]
 800c1d8:	4604      	mov	r4, r0
 800c1da:	b33b      	cbz	r3, 800c22c <rcl_timer_get_time_until_next_call+0x5c>
 800c1dc:	460d      	mov	r5, r1
 800c1de:	b309      	cbz	r1, 800c224 <rcl_timer_get_time_until_next_call+0x54>
 800c1e0:	f3bf 8f5b 	dmb	ish
 800c1e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c1e8:	f3bf 8f5b 	dmb	ish
 800c1ec:	b9ab      	cbnz	r3, 800c21a <rcl_timer_get_time_until_next_call+0x4a>
 800c1ee:	6803      	ldr	r3, [r0, #0]
 800c1f0:	4669      	mov	r1, sp
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	f7ff ff14 	bl	800c020 <rcl_clock_get_now>
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	b958      	cbnz	r0, 800c214 <rcl_timer_get_time_until_next_call+0x44>
 800c1fc:	6820      	ldr	r0, [r4, #0]
 800c1fe:	2105      	movs	r1, #5
 800c200:	3028      	adds	r0, #40	@ 0x28
 800c202:	f001 fb75 	bl	800d8f0 <__atomic_load_8>
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	1ac0      	subs	r0, r0, r3
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	6028      	str	r0, [r5, #0]
 800c20e:	eb61 0103 	sbc.w	r1, r1, r3
 800c212:	6069      	str	r1, [r5, #4]
 800c214:	4630      	mov	r0, r6
 800c216:	b002      	add	sp, #8
 800c218:	bd70      	pop	{r4, r5, r6, pc}
 800c21a:	f240 3621 	movw	r6, #801	@ 0x321
 800c21e:	4630      	mov	r0, r6
 800c220:	b002      	add	sp, #8
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	260b      	movs	r6, #11
 800c226:	4630      	mov	r0, r6
 800c228:	b002      	add	sp, #8
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800c230:	e7f0      	b.n	800c214 <rcl_timer_get_time_until_next_call+0x44>
 800c232:	bf00      	nop

0800c234 <rcl_timer_get_guard_condition>:
 800c234:	b130      	cbz	r0, 800c244 <rcl_timer_get_guard_condition+0x10>
 800c236:	6800      	ldr	r0, [r0, #0]
 800c238:	b120      	cbz	r0, 800c244 <rcl_timer_get_guard_condition+0x10>
 800c23a:	68c3      	ldr	r3, [r0, #12]
 800c23c:	b10b      	cbz	r3, 800c242 <rcl_timer_get_guard_condition+0xe>
 800c23e:	3008      	adds	r0, #8
 800c240:	4770      	bx	lr
 800c242:	4618      	mov	r0, r3
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop

0800c248 <rcl_get_zero_initialized_wait_set>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	4c08      	ldr	r4, [pc, #32]	@ (800c26c <rcl_get_zero_initialized_wait_set+0x24>)
 800c24c:	4686      	mov	lr, r0
 800c24e:	4684      	mov	ip, r0
 800c250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c252:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c258:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c25c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c25e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c262:	6823      	ldr	r3, [r4, #0]
 800c264:	f8cc 3000 	str.w	r3, [ip]
 800c268:	4670      	mov	r0, lr
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	080164a8 	.word	0x080164a8

0800c270 <rcl_wait_set_is_valid>:
 800c270:	b118      	cbz	r0, 800c27a <rcl_wait_set_is_valid+0xa>
 800c272:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c274:	3800      	subs	r0, #0
 800c276:	bf18      	it	ne
 800c278:	2001      	movne	r0, #1
 800c27a:	4770      	bx	lr

0800c27c <rcl_wait_set_fini>:
 800c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c280:	b082      	sub	sp, #8
 800c282:	2800      	cmp	r0, #0
 800c284:	f000 8095 	beq.w	800c3b2 <rcl_wait_set_fini+0x136>
 800c288:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800c28a:	4604      	mov	r4, r0
 800c28c:	2e00      	cmp	r6, #0
 800c28e:	f000 808c 	beq.w	800c3aa <rcl_wait_set_fini+0x12e>
 800c292:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800c294:	f003 f908 	bl	800f4a8 <rmw_destroy_wait_set>
 800c298:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c29a:	1e06      	subs	r6, r0, #0
 800c29c:	bf18      	it	ne
 800c29e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800c2a2:	2d00      	cmp	r5, #0
 800c2a4:	f000 8081 	beq.w	800c3aa <rcl_wait_set_fini+0x12e>
 800c2a8:	6820      	ldr	r0, [r4, #0]
 800c2aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800c2ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c2b0:	2700      	movs	r7, #0
 800c2b2:	6067      	str	r7, [r4, #4]
 800c2b4:	602f      	str	r7, [r5, #0]
 800c2b6:	b120      	cbz	r0, 800c2c2 <rcl_wait_set_fini+0x46>
 800c2b8:	9101      	str	r1, [sp, #4]
 800c2ba:	47c0      	blx	r8
 800c2bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c2be:	9901      	ldr	r1, [sp, #4]
 800c2c0:	6027      	str	r7, [r4, #0]
 800c2c2:	68a8      	ldr	r0, [r5, #8]
 800c2c4:	b120      	cbz	r0, 800c2d0 <rcl_wait_set_fini+0x54>
 800c2c6:	47c0      	blx	r8
 800c2c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800c2d0:	68a0      	ldr	r0, [r4, #8]
 800c2d2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800c2d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c2d6:	f04f 0800 	mov.w	r8, #0
 800c2da:	f8c4 800c 	str.w	r8, [r4, #12]
 800c2de:	f8c5 800c 	str.w	r8, [r5, #12]
 800c2e2:	b128      	cbz	r0, 800c2f0 <rcl_wait_set_fini+0x74>
 800c2e4:	47b8      	blx	r7
 800c2e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c2e8:	f8c4 8008 	str.w	r8, [r4, #8]
 800c2ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800c2ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c2f0:	6968      	ldr	r0, [r5, #20]
 800c2f2:	f04f 0800 	mov.w	r8, #0
 800c2f6:	f8c5 8010 	str.w	r8, [r5, #16]
 800c2fa:	b128      	cbz	r0, 800c308 <rcl_wait_set_fini+0x8c>
 800c2fc:	47b8      	blx	r7
 800c2fe:	f8c5 8014 	str.w	r8, [r5, #20]
 800c302:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c304:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800c306:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c308:	6920      	ldr	r0, [r4, #16]
 800c30a:	f04f 0800 	mov.w	r8, #0
 800c30e:	f8c4 8014 	str.w	r8, [r4, #20]
 800c312:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800c316:	b128      	cbz	r0, 800c324 <rcl_wait_set_fini+0xa8>
 800c318:	47b8      	blx	r7
 800c31a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c31c:	f8c4 8010 	str.w	r8, [r4, #16]
 800c320:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800c322:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c324:	69a0      	ldr	r0, [r4, #24]
 800c326:	f04f 0800 	mov.w	r8, #0
 800c32a:	f8c4 801c 	str.w	r8, [r4, #28]
 800c32e:	f8c5 8018 	str.w	r8, [r5, #24]
 800c332:	b128      	cbz	r0, 800c340 <rcl_wait_set_fini+0xc4>
 800c334:	9101      	str	r1, [sp, #4]
 800c336:	47b8      	blx	r7
 800c338:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c33a:	9901      	ldr	r1, [sp, #4]
 800c33c:	f8c4 8018 	str.w	r8, [r4, #24]
 800c340:	6a28      	ldr	r0, [r5, #32]
 800c342:	b120      	cbz	r0, 800c34e <rcl_wait_set_fini+0xd2>
 800c344:	47b8      	blx	r7
 800c346:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c348:	2300      	movs	r3, #0
 800c34a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800c34e:	6a20      	ldr	r0, [r4, #32]
 800c350:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800c354:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c356:	2700      	movs	r7, #0
 800c358:	6267      	str	r7, [r4, #36]	@ 0x24
 800c35a:	626f      	str	r7, [r5, #36]	@ 0x24
 800c35c:	b120      	cbz	r0, 800c368 <rcl_wait_set_fini+0xec>
 800c35e:	9101      	str	r1, [sp, #4]
 800c360:	47c0      	blx	r8
 800c362:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c364:	9901      	ldr	r1, [sp, #4]
 800c366:	6227      	str	r7, [r4, #32]
 800c368:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800c36a:	b120      	cbz	r0, 800c376 <rcl_wait_set_fini+0xfa>
 800c36c:	47c0      	blx	r8
 800c36e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c370:	2300      	movs	r3, #0
 800c372:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800c376:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c378:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800c37c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c37e:	2700      	movs	r7, #0
 800c380:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800c382:	632f      	str	r7, [r5, #48]	@ 0x30
 800c384:	b120      	cbz	r0, 800c390 <rcl_wait_set_fini+0x114>
 800c386:	9101      	str	r1, [sp, #4]
 800c388:	47c0      	blx	r8
 800c38a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c38c:	9901      	ldr	r1, [sp, #4]
 800c38e:	62a7      	str	r7, [r4, #40]	@ 0x28
 800c390:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800c392:	b120      	cbz	r0, 800c39e <rcl_wait_set_fini+0x122>
 800c394:	47c0      	blx	r8
 800c396:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c398:	2300      	movs	r3, #0
 800c39a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800c39e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c3a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	4798      	blx	r3
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	b002      	add	sp, #8
 800c3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b2:	260b      	movs	r6, #11
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	b002      	add	sp, #8
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c3bc <rcl_wait_set_add_subscription>:
 800c3bc:	b318      	cbz	r0, 800c406 <rcl_wait_set_add_subscription+0x4a>
 800c3be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	b30b      	cbz	r3, 800c40a <rcl_wait_set_add_subscription+0x4e>
 800c3c6:	b319      	cbz	r1, 800c410 <rcl_wait_set_add_subscription+0x54>
 800c3c8:	681d      	ldr	r5, [r3, #0]
 800c3ca:	6840      	ldr	r0, [r0, #4]
 800c3cc:	4285      	cmp	r5, r0
 800c3ce:	d217      	bcs.n	800c400 <rcl_wait_set_add_subscription+0x44>
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	1c6e      	adds	r6, r5, #1
 800c3d4:	601e      	str	r6, [r3, #0]
 800c3d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800c3da:	b102      	cbz	r2, 800c3de <rcl_wait_set_add_subscription+0x22>
 800c3dc:	6015      	str	r5, [r2, #0]
 800c3de:	4608      	mov	r0, r1
 800c3e0:	f7ff fd7e 	bl	800bee0 <rcl_subscription_get_rmw_handle>
 800c3e4:	b150      	cbz	r0, 800c3fc <rcl_wait_set_add_subscription+0x40>
 800c3e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c3e8:	6842      	ldr	r2, [r0, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c3f2:	6853      	ldr	r3, [r2, #4]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	6053      	str	r3, [r2, #4]
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}
 800c400:	f240 3086 	movw	r0, #902	@ 0x386
 800c404:	bd70      	pop	{r4, r5, r6, pc}
 800c406:	200b      	movs	r0, #11
 800c408:	4770      	bx	lr
 800c40a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	200b      	movs	r0, #11
 800c412:	bd70      	pop	{r4, r5, r6, pc}

0800c414 <rcl_wait_set_clear>:
 800c414:	2800      	cmp	r0, #0
 800c416:	d073      	beq.n	800c500 <rcl_wait_set_clear+0xec>
 800c418:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c41a:	b510      	push	{r4, lr}
 800c41c:	4604      	mov	r4, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d070      	beq.n	800c504 <rcl_wait_set_clear+0xf0>
 800c422:	6800      	ldr	r0, [r0, #0]
 800c424:	b138      	cbz	r0, 800c436 <rcl_wait_set_clear+0x22>
 800c426:	6862      	ldr	r2, [r4, #4]
 800c428:	2100      	movs	r1, #0
 800c42a:	0092      	lsls	r2, r2, #2
 800c42c:	f008 fe94 	bl	8015158 <memset>
 800c430:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	68a0      	ldr	r0, [r4, #8]
 800c438:	b138      	cbz	r0, 800c44a <rcl_wait_set_clear+0x36>
 800c43a:	68e2      	ldr	r2, [r4, #12]
 800c43c:	2100      	movs	r1, #0
 800c43e:	0092      	lsls	r2, r2, #2
 800c440:	f008 fe8a 	bl	8015158 <memset>
 800c444:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c446:	2200      	movs	r2, #0
 800c448:	60da      	str	r2, [r3, #12]
 800c44a:	69a0      	ldr	r0, [r4, #24]
 800c44c:	b138      	cbz	r0, 800c45e <rcl_wait_set_clear+0x4a>
 800c44e:	69e2      	ldr	r2, [r4, #28]
 800c450:	2100      	movs	r1, #0
 800c452:	0092      	lsls	r2, r2, #2
 800c454:	f008 fe80 	bl	8015158 <memset>
 800c458:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c45a:	2200      	movs	r2, #0
 800c45c:	619a      	str	r2, [r3, #24]
 800c45e:	6a20      	ldr	r0, [r4, #32]
 800c460:	b138      	cbz	r0, 800c472 <rcl_wait_set_clear+0x5e>
 800c462:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c464:	2100      	movs	r1, #0
 800c466:	0092      	lsls	r2, r2, #2
 800c468:	f008 fe76 	bl	8015158 <memset>
 800c46c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c46e:	2200      	movs	r2, #0
 800c470:	625a      	str	r2, [r3, #36]	@ 0x24
 800c472:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c474:	b138      	cbz	r0, 800c486 <rcl_wait_set_clear+0x72>
 800c476:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c478:	2100      	movs	r1, #0
 800c47a:	0092      	lsls	r2, r2, #2
 800c47c:	f008 fe6c 	bl	8015158 <memset>
 800c480:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c482:	2200      	movs	r2, #0
 800c484:	631a      	str	r2, [r3, #48]	@ 0x30
 800c486:	6920      	ldr	r0, [r4, #16]
 800c488:	b138      	cbz	r0, 800c49a <rcl_wait_set_clear+0x86>
 800c48a:	6962      	ldr	r2, [r4, #20]
 800c48c:	2100      	movs	r1, #0
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	f008 fe62 	bl	8015158 <memset>
 800c494:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c496:	2200      	movs	r2, #0
 800c498:	641a      	str	r2, [r3, #64]	@ 0x40
 800c49a:	6898      	ldr	r0, [r3, #8]
 800c49c:	b138      	cbz	r0, 800c4ae <rcl_wait_set_clear+0x9a>
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	0092      	lsls	r2, r2, #2
 800c4a4:	f008 fe58 	bl	8015158 <memset>
 800c4a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	605a      	str	r2, [r3, #4]
 800c4ae:	6958      	ldr	r0, [r3, #20]
 800c4b0:	b138      	cbz	r0, 800c4c2 <rcl_wait_set_clear+0xae>
 800c4b2:	691a      	ldr	r2, [r3, #16]
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	0092      	lsls	r2, r2, #2
 800c4b8:	f008 fe4e 	bl	8015158 <memset>
 800c4bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4be:	2200      	movs	r2, #0
 800c4c0:	611a      	str	r2, [r3, #16]
 800c4c2:	6a18      	ldr	r0, [r3, #32]
 800c4c4:	b138      	cbz	r0, 800c4d6 <rcl_wait_set_clear+0xc2>
 800c4c6:	69da      	ldr	r2, [r3, #28]
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	0092      	lsls	r2, r2, #2
 800c4cc:	f008 fe44 	bl	8015158 <memset>
 800c4d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	61da      	str	r2, [r3, #28]
 800c4d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c4d8:	b138      	cbz	r0, 800c4ea <rcl_wait_set_clear+0xd6>
 800c4da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4dc:	2100      	movs	r1, #0
 800c4de:	0092      	lsls	r2, r2, #2
 800c4e0:	f008 fe3a 	bl	8015158 <memset>
 800c4e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c4ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c4ec:	b138      	cbz	r0, 800c4fe <rcl_wait_set_clear+0xea>
 800c4ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	0092      	lsls	r2, r2, #2
 800c4f4:	f008 fe30 	bl	8015158 <memset>
 800c4f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	6358      	str	r0, [r3, #52]	@ 0x34
 800c4fe:	bd10      	pop	{r4, pc}
 800c500:	200b      	movs	r0, #11
 800c502:	4770      	bx	lr
 800c504:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800c508:	bd10      	pop	{r4, pc}
 800c50a:	bf00      	nop

0800c50c <rcl_wait_set_resize>:
 800c50c:	2800      	cmp	r0, #0
 800c50e:	f000 8185 	beq.w	800c81c <rcl_wait_set_resize+0x310>
 800c512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c516:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800c518:	b083      	sub	sp, #12
 800c51a:	4605      	mov	r5, r0
 800c51c:	2c00      	cmp	r4, #0
 800c51e:	f000 817f 	beq.w	800c820 <rcl_wait_set_resize+0x314>
 800c522:	f04f 0900 	mov.w	r9, #0
 800c526:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800c52a:	461f      	mov	r7, r3
 800c52c:	4688      	mov	r8, r1
 800c52e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800c532:	4616      	mov	r6, r2
 800c534:	f8c0 9004 	str.w	r9, [r0, #4]
 800c538:	f8c4 9000 	str.w	r9, [r4]
 800c53c:	2900      	cmp	r1, #0
 800c53e:	f000 80bd 	beq.w	800c6bc <rcl_wait_set_resize+0x1b0>
 800c542:	008c      	lsls	r4, r1, #2
 800c544:	6800      	ldr	r0, [r0, #0]
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	4652      	mov	r2, sl
 800c54a:	4621      	mov	r1, r4
 800c54c:	4798      	blx	r3
 800c54e:	9b01      	ldr	r3, [sp, #4]
 800c550:	6028      	str	r0, [r5, #0]
 800c552:	2800      	cmp	r0, #0
 800c554:	f000 80cb 	beq.w	800c6ee <rcl_wait_set_resize+0x1e2>
 800c558:	4622      	mov	r2, r4
 800c55a:	4649      	mov	r1, r9
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	f008 fdfb 	bl	8015158 <memset>
 800c562:	f8c5 8004 	str.w	r8, [r5, #4]
 800c566:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800c56a:	9b01      	ldr	r3, [sp, #4]
 800c56c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c570:	f8c8 9004 	str.w	r9, [r8, #4]
 800c574:	4652      	mov	r2, sl
 800c576:	4621      	mov	r1, r4
 800c578:	4798      	blx	r3
 800c57a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c57c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 80ac 	beq.w	800c6e0 <rcl_wait_set_resize+0x1d4>
 800c588:	4622      	mov	r2, r4
 800c58a:	4649      	mov	r1, r9
 800c58c:	4618      	mov	r0, r3
 800c58e:	f008 fde3 	bl	8015158 <memset>
 800c592:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c594:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c598:	f04f 0800 	mov.w	r8, #0
 800c59c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800c5a0:	f8c5 800c 	str.w	r8, [r5, #12]
 800c5a4:	f8c4 800c 	str.w	r8, [r4, #12]
 800c5a8:	2e00      	cmp	r6, #0
 800c5aa:	f040 80a4 	bne.w	800c6f6 <rcl_wait_set_resize+0x1ea>
 800c5ae:	68a8      	ldr	r0, [r5, #8]
 800c5b0:	b128      	cbz	r0, 800c5be <rcl_wait_set_resize+0xb2>
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	4790      	blx	r2
 800c5b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c5b8:	60ae      	str	r6, [r5, #8]
 800c5ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c5be:	f04f 0800 	mov.w	r8, #0
 800c5c2:	19f6      	adds	r6, r6, r7
 800c5c4:	f8c4 8010 	str.w	r8, [r4, #16]
 800c5c8:	f040 80ac 	bne.w	800c724 <rcl_wait_set_resize+0x218>
 800c5cc:	6960      	ldr	r0, [r4, #20]
 800c5ce:	b130      	cbz	r0, 800c5de <rcl_wait_set_resize+0xd2>
 800c5d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c5d2:	4649      	mov	r1, r9
 800c5d4:	4798      	blx	r3
 800c5d6:	6166      	str	r6, [r4, #20]
 800c5d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c5da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c5de:	2600      	movs	r6, #0
 800c5e0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800c5e4:	616e      	str	r6, [r5, #20]
 800c5e6:	6426      	str	r6, [r4, #64]	@ 0x40
 800c5e8:	2f00      	cmp	r7, #0
 800c5ea:	f040 80ad 	bne.w	800c748 <rcl_wait_set_resize+0x23c>
 800c5ee:	6928      	ldr	r0, [r5, #16]
 800c5f0:	b138      	cbz	r0, 800c602 <rcl_wait_set_resize+0xf6>
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	47d0      	blx	sl
 800c5f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c5f8:	612f      	str	r7, [r5, #16]
 800c5fa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800c5fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c602:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c604:	2600      	movs	r6, #0
 800c606:	61ee      	str	r6, [r5, #28]
 800c608:	61a6      	str	r6, [r4, #24]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 80af 	bne.w	800c76e <rcl_wait_set_resize+0x262>
 800c610:	69a8      	ldr	r0, [r5, #24]
 800c612:	b120      	cbz	r0, 800c61e <rcl_wait_set_resize+0x112>
 800c614:	4649      	mov	r1, r9
 800c616:	47d0      	blx	sl
 800c618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c61a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c61c:	61ab      	str	r3, [r5, #24]
 800c61e:	6a20      	ldr	r0, [r4, #32]
 800c620:	b128      	cbz	r0, 800c62e <rcl_wait_set_resize+0x122>
 800c622:	4649      	mov	r1, r9
 800c624:	47d0      	blx	sl
 800c626:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c628:	2300      	movs	r3, #0
 800c62a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c62e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c630:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800c632:	2600      	movs	r6, #0
 800c634:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800c638:	626e      	str	r6, [r5, #36]	@ 0x24
 800c63a:	6266      	str	r6, [r4, #36]	@ 0x24
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80b6 	beq.w	800c7ae <rcl_wait_set_resize+0x2a2>
 800c642:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800c646:	6a28      	ldr	r0, [r5, #32]
 800c648:	463a      	mov	r2, r7
 800c64a:	4651      	mov	r1, sl
 800c64c:	47c8      	blx	r9
 800c64e:	6228      	str	r0, [r5, #32]
 800c650:	2800      	cmp	r0, #0
 800c652:	d04c      	beq.n	800c6ee <rcl_wait_set_resize+0x1e2>
 800c654:	4652      	mov	r2, sl
 800c656:	4631      	mov	r1, r6
 800c658:	f008 fd7e 	bl	8015158 <memset>
 800c65c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c65e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c660:	626b      	str	r3, [r5, #36]	@ 0x24
 800c662:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c664:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c666:	463a      	mov	r2, r7
 800c668:	4651      	mov	r1, sl
 800c66a:	47c8      	blx	r9
 800c66c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c66e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800c670:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800c672:	2c00      	cmp	r4, #0
 800c674:	f000 80f0 	beq.w	800c858 <rcl_wait_set_resize+0x34c>
 800c678:	4620      	mov	r0, r4
 800c67a:	4652      	mov	r2, sl
 800c67c:	4631      	mov	r1, r6
 800c67e:	f008 fd6b 	bl	8015158 <memset>
 800c682:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c686:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800c688:	2600      	movs	r6, #0
 800c68a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800c68e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800c690:	6326      	str	r6, [r4, #48]	@ 0x30
 800c692:	2b00      	cmp	r3, #0
 800c694:	f040 809d 	bne.w	800c7d2 <rcl_wait_set_resize+0x2c6>
 800c698:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800c69a:	b120      	cbz	r0, 800c6a6 <rcl_wait_set_resize+0x19a>
 800c69c:	4639      	mov	r1, r7
 800c69e:	47c0      	blx	r8
 800c6a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c6a4:	62ab      	str	r3, [r5, #40]	@ 0x28
 800c6a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800c6a8:	b310      	cbz	r0, 800c6f0 <rcl_wait_set_resize+0x1e4>
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	47c0      	blx	r8
 800c6ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800c6b6:	b003      	add	sp, #12
 800c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6bc:	6800      	ldr	r0, [r0, #0]
 800c6be:	b120      	cbz	r0, 800c6ca <rcl_wait_set_resize+0x1be>
 800c6c0:	4651      	mov	r1, sl
 800c6c2:	47d8      	blx	fp
 800c6c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c6c6:	f8c5 8000 	str.w	r8, [r5]
 800c6ca:	68a0      	ldr	r0, [r4, #8]
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f43f af61 	beq.w	800c594 <rcl_wait_set_resize+0x88>
 800c6d2:	4651      	mov	r1, sl
 800c6d4:	47d8      	blx	fp
 800c6d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c6d8:	2300      	movs	r3, #0
 800c6da:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c6de:	e759      	b.n	800c594 <rcl_wait_set_resize+0x88>
 800c6e0:	6828      	ldr	r0, [r5, #0]
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	4651      	mov	r1, sl
 800c6e6:	47d8      	blx	fp
 800c6e8:	9b01      	ldr	r3, [sp, #4]
 800c6ea:	e9c5 3300 	strd	r3, r3, [r5]
 800c6ee:	200a      	movs	r0, #10
 800c6f0:	b003      	add	sp, #12
 800c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f6:	00b4      	lsls	r4, r6, #2
 800c6f8:	68a8      	ldr	r0, [r5, #8]
 800c6fa:	464a      	mov	r2, r9
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	4798      	blx	r3
 800c700:	60a8      	str	r0, [r5, #8]
 800c702:	2800      	cmp	r0, #0
 800c704:	d0f3      	beq.n	800c6ee <rcl_wait_set_resize+0x1e2>
 800c706:	4622      	mov	r2, r4
 800c708:	4641      	mov	r1, r8
 800c70a:	f008 fd25 	bl	8015158 <memset>
 800c70e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c710:	60ee      	str	r6, [r5, #12]
 800c712:	f04f 0800 	mov.w	r8, #0
 800c716:	19f6      	adds	r6, r6, r7
 800c718:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c71c:	f8c4 8010 	str.w	r8, [r4, #16]
 800c720:	f43f af54 	beq.w	800c5cc <rcl_wait_set_resize+0xc0>
 800c724:	00b6      	lsls	r6, r6, #2
 800c726:	464a      	mov	r2, r9
 800c728:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c72a:	6960      	ldr	r0, [r4, #20]
 800c72c:	4631      	mov	r1, r6
 800c72e:	4798      	blx	r3
 800c730:	4681      	mov	r9, r0
 800c732:	6160      	str	r0, [r4, #20]
 800c734:	2800      	cmp	r0, #0
 800c736:	d076      	beq.n	800c826 <rcl_wait_set_resize+0x31a>
 800c738:	4632      	mov	r2, r6
 800c73a:	4641      	mov	r1, r8
 800c73c:	f008 fd0c 	bl	8015158 <memset>
 800c740:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c742:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c746:	e74a      	b.n	800c5de <rcl_wait_set_resize+0xd2>
 800c748:	00bc      	lsls	r4, r7, #2
 800c74a:	6928      	ldr	r0, [r5, #16]
 800c74c:	464a      	mov	r2, r9
 800c74e:	4621      	mov	r1, r4
 800c750:	47c0      	blx	r8
 800c752:	6128      	str	r0, [r5, #16]
 800c754:	2800      	cmp	r0, #0
 800c756:	d0ca      	beq.n	800c6ee <rcl_wait_set_resize+0x1e2>
 800c758:	4622      	mov	r2, r4
 800c75a:	4631      	mov	r1, r6
 800c75c:	f008 fcfc 	bl	8015158 <memset>
 800c760:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c762:	616f      	str	r7, [r5, #20]
 800c764:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800c768:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800c76c:	e749      	b.n	800c602 <rcl_wait_set_resize+0xf6>
 800c76e:	009c      	lsls	r4, r3, #2
 800c770:	69a8      	ldr	r0, [r5, #24]
 800c772:	464a      	mov	r2, r9
 800c774:	4621      	mov	r1, r4
 800c776:	47c0      	blx	r8
 800c778:	61a8      	str	r0, [r5, #24]
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d0b7      	beq.n	800c6ee <rcl_wait_set_resize+0x1e2>
 800c77e:	4622      	mov	r2, r4
 800c780:	4631      	mov	r1, r6
 800c782:	f008 fce9 	bl	8015158 <memset>
 800c786:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800c788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c78a:	61eb      	str	r3, [r5, #28]
 800c78c:	6a38      	ldr	r0, [r7, #32]
 800c78e:	61fe      	str	r6, [r7, #28]
 800c790:	464a      	mov	r2, r9
 800c792:	4621      	mov	r1, r4
 800c794:	47c0      	blx	r8
 800c796:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c798:	6238      	str	r0, [r7, #32]
 800c79a:	6a1f      	ldr	r7, [r3, #32]
 800c79c:	2f00      	cmp	r7, #0
 800c79e:	d054      	beq.n	800c84a <rcl_wait_set_resize+0x33e>
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f008 fcd7 	bl	8015158 <memset>
 800c7aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c7ac:	e73f      	b.n	800c62e <rcl_wait_set_resize+0x122>
 800c7ae:	6a28      	ldr	r0, [r5, #32]
 800c7b0:	b120      	cbz	r0, 800c7bc <rcl_wait_set_resize+0x2b0>
 800c7b2:	4639      	mov	r1, r7
 800c7b4:	47c0      	blx	r8
 800c7b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c7ba:	622b      	str	r3, [r5, #32]
 800c7bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	f43f af60 	beq.w	800c684 <rcl_wait_set_resize+0x178>
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	47c0      	blx	r8
 800c7c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800c7d0:	e758      	b.n	800c684 <rcl_wait_set_resize+0x178>
 800c7d2:	009c      	lsls	r4, r3, #2
 800c7d4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800c7d6:	463a      	mov	r2, r7
 800c7d8:	4621      	mov	r1, r4
 800c7da:	47c8      	blx	r9
 800c7dc:	62a8      	str	r0, [r5, #40]	@ 0x28
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d085      	beq.n	800c6ee <rcl_wait_set_resize+0x1e2>
 800c7e2:	4622      	mov	r2, r4
 800c7e4:	4631      	mov	r1, r6
 800c7e6:	f008 fcb7 	bl	8015158 <memset>
 800c7ea:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800c7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800c7f2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800c7f6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800c7fa:	463a      	mov	r2, r7
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	47c8      	blx	r9
 800c800:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c802:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800c806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c808:	b36b      	cbz	r3, 800c866 <rcl_wait_set_resize+0x35a>
 800c80a:	4622      	mov	r2, r4
 800c80c:	4631      	mov	r1, r6
 800c80e:	4618      	mov	r0, r3
 800c810:	f008 fca2 	bl	8015158 <memset>
 800c814:	4630      	mov	r0, r6
 800c816:	b003      	add	sp, #12
 800c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81c:	200b      	movs	r0, #11
 800c81e:	4770      	bx	lr
 800c820:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800c824:	e764      	b.n	800c6f0 <rcl_wait_set_resize+0x1e4>
 800c826:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c828:	68a8      	ldr	r0, [r5, #8]
 800c82a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800c82c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c82e:	4798      	blx	r3
 800c830:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c832:	6928      	ldr	r0, [r5, #16]
 800c834:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c836:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800c838:	f8c5 900c 	str.w	r9, [r5, #12]
 800c83c:	f8c5 9008 	str.w	r9, [r5, #8]
 800c840:	4790      	blx	r2
 800c842:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800c846:	200a      	movs	r0, #10
 800c848:	e752      	b.n	800c6f0 <rcl_wait_set_resize+0x1e4>
 800c84a:	69a8      	ldr	r0, [r5, #24]
 800c84c:	4649      	mov	r1, r9
 800c84e:	47d0      	blx	sl
 800c850:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800c854:	200a      	movs	r0, #10
 800c856:	e74b      	b.n	800c6f0 <rcl_wait_set_resize+0x1e4>
 800c858:	6a28      	ldr	r0, [r5, #32]
 800c85a:	4639      	mov	r1, r7
 800c85c:	47c0      	blx	r8
 800c85e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800c862:	200a      	movs	r0, #10
 800c864:	e744      	b.n	800c6f0 <rcl_wait_set_resize+0x1e4>
 800c866:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	4639      	mov	r1, r7
 800c86c:	47c0      	blx	r8
 800c86e:	9b01      	ldr	r3, [sp, #4]
 800c870:	200a      	movs	r0, #10
 800c872:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800c876:	e73b      	b.n	800c6f0 <rcl_wait_set_resize+0x1e4>

0800c878 <rcl_wait_set_init>:
 800c878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	4604      	mov	r4, r0
 800c880:	a810      	add	r0, sp, #64	@ 0x40
 800c882:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800c886:	460f      	mov	r7, r1
 800c888:	4690      	mov	r8, r2
 800c88a:	4699      	mov	r9, r3
 800c88c:	f7fd f8a2 	bl	80099d4 <rcutils_allocator_is_valid>
 800c890:	2800      	cmp	r0, #0
 800c892:	d06b      	beq.n	800c96c <rcl_wait_set_init+0xf4>
 800c894:	2c00      	cmp	r4, #0
 800c896:	d069      	beq.n	800c96c <rcl_wait_set_init+0xf4>
 800c898:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800c89a:	b125      	cbz	r5, 800c8a6 <rcl_wait_set_init+0x2e>
 800c89c:	2564      	movs	r5, #100	@ 0x64
 800c89e:	4628      	mov	r0, r5
 800c8a0:	b004      	add	sp, #16
 800c8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a6:	f1ba 0f00 	cmp.w	sl, #0
 800c8aa:	d05f      	beq.n	800c96c <rcl_wait_set_init+0xf4>
 800c8ac:	4650      	mov	r0, sl
 800c8ae:	f7fe fcbb 	bl	800b228 <rcl_context_is_valid>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d067      	beq.n	800c986 <rcl_wait_set_init+0x10e>
 800c8b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8b8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800c8ba:	205c      	movs	r0, #92	@ 0x5c
 800c8bc:	4798      	blx	r3
 800c8be:	6320      	str	r0, [r4, #48]	@ 0x30
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d062      	beq.n	800c98a <rcl_wait_set_init+0x112>
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	225c      	movs	r2, #92	@ 0x5c
 800c8c8:	f008 fc46 	bl	8015158 <memset>
 800c8cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800c8d0:	eb03 0e02 	add.w	lr, r3, r2
 800c8d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8d6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800c8d8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800c8dc:	449e      	add	lr, r3
 800c8de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c8e2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800c8e6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800c8ea:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800c8ee:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800c8f2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800c8f6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800c8fa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800c8fe:	f8da a000 	ldr.w	sl, [sl]
 800c902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c904:	44c6      	add	lr, r8
 800c906:	f8dc 3000 	ldr.w	r3, [ip]
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800c910:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800c914:	f002 fdbe 	bl	800f494 <rmw_create_wait_set>
 800c918:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c91a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800c91c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c91e:	b350      	cbz	r0, 800c976 <rcl_wait_set_init+0xfe>
 800c920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	4642      	mov	r2, r8
 800c92e:	464b      	mov	r3, r9
 800c930:	4639      	mov	r1, r7
 800c932:	4620      	mov	r0, r4
 800c934:	f7ff fdea 	bl	800c50c <rcl_wait_set_resize>
 800c938:	4605      	mov	r5, r0
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d0af      	beq.n	800c89e <rcl_wait_set_init+0x26>
 800c93e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c940:	bb2b      	cbnz	r3, 800c98e <rcl_wait_set_init+0x116>
 800c942:	2600      	movs	r6, #0
 800c944:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800c948:	9600      	str	r6, [sp, #0]
 800c94a:	4633      	mov	r3, r6
 800c94c:	4632      	mov	r2, r6
 800c94e:	4631      	mov	r1, r6
 800c950:	4620      	mov	r0, r4
 800c952:	f7ff fddb 	bl	800c50c <rcl_wait_set_resize>
 800c956:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c958:	2800      	cmp	r0, #0
 800c95a:	d0a0      	beq.n	800c89e <rcl_wait_set_init+0x26>
 800c95c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800c95e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800c960:	4798      	blx	r3
 800c962:	4628      	mov	r0, r5
 800c964:	6326      	str	r6, [r4, #48]	@ 0x30
 800c966:	b004      	add	sp, #16
 800c968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96c:	250b      	movs	r5, #11
 800c96e:	4628      	mov	r0, r5
 800c970:	b004      	add	sp, #16
 800c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c976:	2501      	movs	r5, #1
 800c978:	f002 fd96 	bl	800f4a8 <rmw_destroy_wait_set>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	bf18      	it	ne
 800c980:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800c984:	e7dd      	b.n	800c942 <rcl_wait_set_init+0xca>
 800c986:	2565      	movs	r5, #101	@ 0x65
 800c988:	e789      	b.n	800c89e <rcl_wait_set_init+0x26>
 800c98a:	250a      	movs	r5, #10
 800c98c:	e787      	b.n	800c89e <rcl_wait_set_init+0x26>
 800c98e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c990:	e7f2      	b.n	800c978 <rcl_wait_set_init+0x100>
 800c992:	bf00      	nop

0800c994 <rcl_wait_set_add_guard_condition>:
 800c994:	b318      	cbz	r0, 800c9de <rcl_wait_set_add_guard_condition+0x4a>
 800c996:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	4604      	mov	r4, r0
 800c99c:	b30b      	cbz	r3, 800c9e2 <rcl_wait_set_add_guard_condition+0x4e>
 800c99e:	b319      	cbz	r1, 800c9e8 <rcl_wait_set_add_guard_condition+0x54>
 800c9a0:	68dd      	ldr	r5, [r3, #12]
 800c9a2:	68c0      	ldr	r0, [r0, #12]
 800c9a4:	4285      	cmp	r5, r0
 800c9a6:	d217      	bcs.n	800c9d8 <rcl_wait_set_add_guard_condition+0x44>
 800c9a8:	68a0      	ldr	r0, [r4, #8]
 800c9aa:	1c6e      	adds	r6, r5, #1
 800c9ac:	60de      	str	r6, [r3, #12]
 800c9ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800c9b2:	b102      	cbz	r2, 800c9b6 <rcl_wait_set_add_guard_condition+0x22>
 800c9b4:	6015      	str	r5, [r2, #0]
 800c9b6:	4608      	mov	r0, r1
 800c9b8:	f006 fdb8 	bl	801352c <rcl_guard_condition_get_rmw_handle>
 800c9bc:	b150      	cbz	r0, 800c9d4 <rcl_wait_set_add_guard_condition+0x40>
 800c9be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c9c0:	6842      	ldr	r2, [r0, #4]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c9ca:	6913      	ldr	r3, [r2, #16]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	6113      	str	r3, [r2, #16]
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	bd70      	pop	{r4, r5, r6, pc}
 800c9d8:	f240 3086 	movw	r0, #902	@ 0x386
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	200b      	movs	r0, #11
 800c9e0:	4770      	bx	lr
 800c9e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	200b      	movs	r0, #11
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}

0800c9ec <rcl_wait_set_add_timer>:
 800c9ec:	b328      	cbz	r0, 800ca3a <rcl_wait_set_add_timer+0x4e>
 800c9ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	b31b      	cbz	r3, 800ca3e <rcl_wait_set_add_timer+0x52>
 800c9f6:	b329      	cbz	r1, 800ca44 <rcl_wait_set_add_timer+0x58>
 800c9f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c9fa:	6965      	ldr	r5, [r4, #20]
 800c9fc:	42a8      	cmp	r0, r5
 800c9fe:	d219      	bcs.n	800ca34 <rcl_wait_set_add_timer+0x48>
 800ca00:	6925      	ldr	r5, [r4, #16]
 800ca02:	1c46      	adds	r6, r0, #1
 800ca04:	641e      	str	r6, [r3, #64]	@ 0x40
 800ca06:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800ca0a:	b102      	cbz	r2, 800ca0e <rcl_wait_set_add_timer+0x22>
 800ca0c:	6010      	str	r0, [r2, #0]
 800ca0e:	4608      	mov	r0, r1
 800ca10:	f7ff fc10 	bl	800c234 <rcl_timer_get_guard_condition>
 800ca14:	b168      	cbz	r0, 800ca32 <rcl_wait_set_add_timer+0x46>
 800ca16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ca18:	68e3      	ldr	r3, [r4, #12]
 800ca1a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	441d      	add	r5, r3
 800ca20:	f006 fd84 	bl	801352c <rcl_guard_condition_get_rmw_handle>
 800ca24:	b180      	cbz	r0, 800ca48 <rcl_wait_set_add_timer+0x5c>
 800ca26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ca28:	6842      	ldr	r2, [r0, #4]
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca30:	2000      	movs	r0, #0
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	f240 3086 	movw	r0, #902	@ 0x386
 800ca38:	bd70      	pop	{r4, r5, r6, pc}
 800ca3a:	200b      	movs	r0, #11
 800ca3c:	4770      	bx	lr
 800ca3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
 800ca44:	200b      	movs	r0, #11
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	2001      	movs	r0, #1
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}

0800ca4c <rcl_wait_set_add_client>:
 800ca4c:	b318      	cbz	r0, 800ca96 <rcl_wait_set_add_client+0x4a>
 800ca4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca50:	b570      	push	{r4, r5, r6, lr}
 800ca52:	4604      	mov	r4, r0
 800ca54:	b30b      	cbz	r3, 800ca9a <rcl_wait_set_add_client+0x4e>
 800ca56:	b319      	cbz	r1, 800caa0 <rcl_wait_set_add_client+0x54>
 800ca58:	699d      	ldr	r5, [r3, #24]
 800ca5a:	69c0      	ldr	r0, [r0, #28]
 800ca5c:	4285      	cmp	r5, r0
 800ca5e:	d217      	bcs.n	800ca90 <rcl_wait_set_add_client+0x44>
 800ca60:	69a0      	ldr	r0, [r4, #24]
 800ca62:	1c6e      	adds	r6, r5, #1
 800ca64:	619e      	str	r6, [r3, #24]
 800ca66:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ca6a:	b102      	cbz	r2, 800ca6e <rcl_wait_set_add_client+0x22>
 800ca6c:	6015      	str	r5, [r2, #0]
 800ca6e:	4608      	mov	r0, r1
 800ca70:	f7fe fb40 	bl	800b0f4 <rcl_client_get_rmw_handle>
 800ca74:	b150      	cbz	r0, 800ca8c <rcl_wait_set_add_client+0x40>
 800ca76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ca78:	6842      	ldr	r2, [r0, #4]
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ca82:	69d3      	ldr	r3, [r2, #28]
 800ca84:	3301      	adds	r3, #1
 800ca86:	2000      	movs	r0, #0
 800ca88:	61d3      	str	r3, [r2, #28]
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	f240 3086 	movw	r0, #902	@ 0x386
 800ca94:	bd70      	pop	{r4, r5, r6, pc}
 800ca96:	200b      	movs	r0, #11
 800ca98:	4770      	bx	lr
 800ca9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}
 800caa0:	200b      	movs	r0, #11
 800caa2:	bd70      	pop	{r4, r5, r6, pc}

0800caa4 <rcl_wait_set_add_service>:
 800caa4:	b318      	cbz	r0, 800caee <rcl_wait_set_add_service+0x4a>
 800caa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800caa8:	b570      	push	{r4, r5, r6, lr}
 800caaa:	4604      	mov	r4, r0
 800caac:	b30b      	cbz	r3, 800caf2 <rcl_wait_set_add_service+0x4e>
 800caae:	b319      	cbz	r1, 800caf8 <rcl_wait_set_add_service+0x54>
 800cab0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800cab2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800cab4:	4285      	cmp	r5, r0
 800cab6:	d217      	bcs.n	800cae8 <rcl_wait_set_add_service+0x44>
 800cab8:	6a20      	ldr	r0, [r4, #32]
 800caba:	1c6e      	adds	r6, r5, #1
 800cabc:	625e      	str	r6, [r3, #36]	@ 0x24
 800cabe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800cac2:	b102      	cbz	r2, 800cac6 <rcl_wait_set_add_service+0x22>
 800cac4:	6015      	str	r5, [r2, #0]
 800cac6:	4608      	mov	r0, r1
 800cac8:	f7ff f86e 	bl	800bba8 <rcl_service_get_rmw_handle>
 800cacc:	b150      	cbz	r0, 800cae4 <rcl_wait_set_add_service+0x40>
 800cace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cad0:	6842      	ldr	r2, [r0, #4]
 800cad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cad4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cad8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800cada:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800cadc:	3301      	adds	r3, #1
 800cade:	2000      	movs	r0, #0
 800cae0:	6293      	str	r3, [r2, #40]	@ 0x28
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	2001      	movs	r0, #1
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	f240 3086 	movw	r0, #902	@ 0x386
 800caec:	bd70      	pop	{r4, r5, r6, pc}
 800caee:	200b      	movs	r0, #11
 800caf0:	4770      	bx	lr
 800caf2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800caf6:	bd70      	pop	{r4, r5, r6, pc}
 800caf8:	200b      	movs	r0, #11
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	0000      	movs	r0, r0
	...

0800cb00 <rcl_wait>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	ed2d 8b02 	vpush	{d8}
 800cb08:	b08d      	sub	sp, #52	@ 0x34
 800cb0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f000 8143 	beq.w	800cd9a <rcl_wait+0x29a>
 800cb14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800cb16:	4605      	mov	r5, r0
 800cb18:	2e00      	cmp	r6, #0
 800cb1a:	f000 8112 	beq.w	800cd42 <rcl_wait+0x242>
 800cb1e:	6843      	ldr	r3, [r0, #4]
 800cb20:	b983      	cbnz	r3, 800cb44 <rcl_wait+0x44>
 800cb22:	68eb      	ldr	r3, [r5, #12]
 800cb24:	b973      	cbnz	r3, 800cb44 <rcl_wait+0x44>
 800cb26:	696b      	ldr	r3, [r5, #20]
 800cb28:	b963      	cbnz	r3, 800cb44 <rcl_wait+0x44>
 800cb2a:	69eb      	ldr	r3, [r5, #28]
 800cb2c:	b953      	cbnz	r3, 800cb44 <rcl_wait+0x44>
 800cb2e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800cb30:	b943      	cbnz	r3, 800cb44 <rcl_wait+0x44>
 800cb32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800cb34:	b933      	cbnz	r3, 800cb44 <rcl_wait+0x44>
 800cb36:	f240 3085 	movw	r0, #901	@ 0x385
 800cb3a:	b00d      	add	sp, #52	@ 0x34
 800cb3c:	ecbd 8b02 	vpop	{d8}
 800cb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb44:	9b04      	ldr	r3, [sp, #16]
 800cb46:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	f173 0300 	sbcs.w	r3, r3, #0
 800cb50:	f2c0 80f0 	blt.w	800cd34 <rcl_wait+0x234>
 800cb54:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800cb58:	4643      	mov	r3, r8
 800cb5a:	2a00      	cmp	r2, #0
 800cb5c:	f000 8133 	beq.w	800cdc6 <rcl_wait+0x2c6>
 800cb60:	2400      	movs	r4, #0
 800cb62:	4613      	mov	r3, r2
 800cb64:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800cdd8 <rcl_wait+0x2d8>
 800cb68:	46a2      	mov	sl, r4
 800cb6a:	46a3      	mov	fp, r4
 800cb6c:	f240 3921 	movw	r9, #801	@ 0x321
 800cb70:	4632      	mov	r2, r6
 800cb72:	e014      	b.n	800cb9e <rcl_wait+0x9e>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d1e0      	bne.n	800cb3a <rcl_wait+0x3a>
 800cb78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb7c:	4542      	cmp	r2, r8
 800cb7e:	eb73 0107 	sbcs.w	r1, r3, r7
 800cb82:	da03      	bge.n	800cb8c <rcl_wait+0x8c>
 800cb84:	4690      	mov	r8, r2
 800cb86:	461f      	mov	r7, r3
 800cb88:	f04f 0b01 	mov.w	fp, #1
 800cb8c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800cb8e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800cb90:	3401      	adds	r4, #1
 800cb92:	f14a 0a00 	adc.w	sl, sl, #0
 800cb96:	429c      	cmp	r4, r3
 800cb98:	f17a 0100 	sbcs.w	r1, sl, #0
 800cb9c:	d228      	bcs.n	800cbf0 <rcl_wait+0xf0>
 800cb9e:	6928      	ldr	r0, [r5, #16]
 800cba0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cba4:	a908      	add	r1, sp, #32
 800cba6:	00a6      	lsls	r6, r4, #2
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d0f1      	beq.n	800cb90 <rcl_wait+0x90>
 800cbac:	68eb      	ldr	r3, [r5, #12]
 800cbae:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800cbb2:	4423      	add	r3, r4
 800cbb4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800cbb8:	f1be 0f00 	cmp.w	lr, #0
 800cbbc:	d006      	beq.n	800cbcc <rcl_wait+0xcc>
 800cbbe:	6913      	ldr	r3, [r2, #16]
 800cbc0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	6113      	str	r3, [r2, #16]
 800cbc8:	692b      	ldr	r3, [r5, #16]
 800cbca:	5998      	ldr	r0, [r3, r6]
 800cbcc:	ed8d 8b08 	vstr	d8, [sp, #32]
 800cbd0:	f7ff fafe 	bl	800c1d0 <rcl_timer_get_time_until_next_call>
 800cbd4:	4548      	cmp	r0, r9
 800cbd6:	d1cd      	bne.n	800cb74 <rcl_wait+0x74>
 800cbd8:	692b      	ldr	r3, [r5, #16]
 800cbda:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800cbdc:	2100      	movs	r1, #0
 800cbde:	5199      	str	r1, [r3, r6]
 800cbe0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800cbe2:	3401      	adds	r4, #1
 800cbe4:	f14a 0a00 	adc.w	sl, sl, #0
 800cbe8:	429c      	cmp	r4, r3
 800cbea:	f17a 0100 	sbcs.w	r1, sl, #0
 800cbee:	d3d6      	bcc.n	800cb9e <rcl_wait+0x9e>
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	46d9      	mov	r9, fp
 800cbfa:	f040 80a9 	bne.w	800cd50 <rcl_wait+0x250>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2200      	movs	r2, #0
 800cc02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc06:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800cc0a:	ab08      	add	r3, sp, #32
 800cc0c:	9302      	str	r3, [sp, #8]
 800cc0e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800cc10:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800cc14:	e9cd 3200 	strd	r3, r2, [sp]
 800cc18:	f106 0110 	add.w	r1, r6, #16
 800cc1c:	f106 031c 	add.w	r3, r6, #28
 800cc20:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800cc24:	1d30      	adds	r0, r6, #4
 800cc26:	f002 fabd 	bl	800f1a4 <rmw_wait>
 800cc2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cc2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc2e:	4680      	mov	r8, r0
 800cc30:	b1ca      	cbz	r2, 800cc66 <rcl_wait+0x166>
 800cc32:	2400      	movs	r4, #0
 800cc34:	4627      	mov	r7, r4
 800cc36:	692a      	ldr	r2, [r5, #16]
 800cc38:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800cc3c:	f10d 011f 	add.w	r1, sp, #31
 800cc40:	00a6      	lsls	r6, r4, #2
 800cc42:	b160      	cbz	r0, 800cc5e <rcl_wait+0x15e>
 800cc44:	f88d 701f 	strb.w	r7, [sp, #31]
 800cc48:	f7ff fa88 	bl	800c15c <rcl_timer_is_ready>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f47f af74 	bne.w	800cb3a <rcl_wait+0x3a>
 800cc52:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800cc56:	b90b      	cbnz	r3, 800cc5c <rcl_wait+0x15c>
 800cc58:	692a      	ldr	r2, [r5, #16]
 800cc5a:	5193      	str	r3, [r2, r6]
 800cc5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cc5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc60:	3401      	adds	r4, #1
 800cc62:	42a2      	cmp	r2, r4
 800cc64:	d8e7      	bhi.n	800cc36 <rcl_wait+0x136>
 800cc66:	f038 0002 	bics.w	r0, r8, #2
 800cc6a:	f040 8090 	bne.w	800cd8e <rcl_wait+0x28e>
 800cc6e:	686e      	ldr	r6, [r5, #4]
 800cc70:	4602      	mov	r2, r0
 800cc72:	b91e      	cbnz	r6, 800cc7c <rcl_wait+0x17c>
 800cc74:	e00d      	b.n	800cc92 <rcl_wait+0x192>
 800cc76:	3201      	adds	r2, #1
 800cc78:	42b2      	cmp	r2, r6
 800cc7a:	d00a      	beq.n	800cc92 <rcl_wait+0x192>
 800cc7c:	6899      	ldr	r1, [r3, #8]
 800cc7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800cc82:	2900      	cmp	r1, #0
 800cc84:	d1f7      	bne.n	800cc76 <rcl_wait+0x176>
 800cc86:	682c      	ldr	r4, [r5, #0]
 800cc88:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800cc8c:	3201      	adds	r2, #1
 800cc8e:	42b2      	cmp	r2, r6
 800cc90:	d1f4      	bne.n	800cc7c <rcl_wait+0x17c>
 800cc92:	68ee      	ldr	r6, [r5, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	b91e      	cbnz	r6, 800cca0 <rcl_wait+0x1a0>
 800cc98:	e00d      	b.n	800ccb6 <rcl_wait+0x1b6>
 800cc9a:	3201      	adds	r2, #1
 800cc9c:	42b2      	cmp	r2, r6
 800cc9e:	d00a      	beq.n	800ccb6 <rcl_wait+0x1b6>
 800cca0:	6959      	ldr	r1, [r3, #20]
 800cca2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800cca6:	2900      	cmp	r1, #0
 800cca8:	d1f7      	bne.n	800cc9a <rcl_wait+0x19a>
 800ccaa:	68ac      	ldr	r4, [r5, #8]
 800ccac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ccb0:	3201      	adds	r2, #1
 800ccb2:	42b2      	cmp	r2, r6
 800ccb4:	d1f4      	bne.n	800cca0 <rcl_wait+0x1a0>
 800ccb6:	69ee      	ldr	r6, [r5, #28]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	b91e      	cbnz	r6, 800ccc4 <rcl_wait+0x1c4>
 800ccbc:	e00d      	b.n	800ccda <rcl_wait+0x1da>
 800ccbe:	3201      	adds	r2, #1
 800ccc0:	42b2      	cmp	r2, r6
 800ccc2:	d00a      	beq.n	800ccda <rcl_wait+0x1da>
 800ccc4:	6a19      	ldr	r1, [r3, #32]
 800ccc6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ccca:	2900      	cmp	r1, #0
 800cccc:	d1f7      	bne.n	800ccbe <rcl_wait+0x1be>
 800ccce:	69ac      	ldr	r4, [r5, #24]
 800ccd0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ccd4:	3201      	adds	r2, #1
 800ccd6:	42b2      	cmp	r2, r6
 800ccd8:	d1f4      	bne.n	800ccc4 <rcl_wait+0x1c4>
 800ccda:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800ccdc:	2200      	movs	r2, #0
 800ccde:	b91e      	cbnz	r6, 800cce8 <rcl_wait+0x1e8>
 800cce0:	e00d      	b.n	800ccfe <rcl_wait+0x1fe>
 800cce2:	3201      	adds	r2, #1
 800cce4:	4296      	cmp	r6, r2
 800cce6:	d00a      	beq.n	800ccfe <rcl_wait+0x1fe>
 800cce8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ccea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	d1f7      	bne.n	800cce2 <rcl_wait+0x1e2>
 800ccf2:	6a2c      	ldr	r4, [r5, #32]
 800ccf4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ccf8:	3201      	adds	r2, #1
 800ccfa:	4296      	cmp	r6, r2
 800ccfc:	d1f4      	bne.n	800cce8 <rcl_wait+0x1e8>
 800ccfe:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800cd00:	2200      	movs	r2, #0
 800cd02:	b91e      	cbnz	r6, 800cd0c <rcl_wait+0x20c>
 800cd04:	e00d      	b.n	800cd22 <rcl_wait+0x222>
 800cd06:	3201      	adds	r2, #1
 800cd08:	42b2      	cmp	r2, r6
 800cd0a:	d00a      	beq.n	800cd22 <rcl_wait+0x222>
 800cd0c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800cd0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800cd12:	2900      	cmp	r1, #0
 800cd14:	d1f7      	bne.n	800cd06 <rcl_wait+0x206>
 800cd16:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800cd18:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800cd1c:	3201      	adds	r2, #1
 800cd1e:	42b2      	cmp	r2, r6
 800cd20:	d1f4      	bne.n	800cd0c <rcl_wait+0x20c>
 800cd22:	f1b8 0f02 	cmp.w	r8, #2
 800cd26:	f47f af08 	bne.w	800cb3a <rcl_wait+0x3a>
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	bf08      	it	eq
 800cd30:	2002      	moveq	r0, #2
 800cd32:	e702      	b.n	800cb3a <rcl_wait+0x3a>
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	d03a      	beq.n	800cdae <rcl_wait+0x2ae>
 800cd38:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800cd3c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800cd40:	e70e      	b.n	800cb60 <rcl_wait+0x60>
 800cd42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800cd46:	b00d      	add	sp, #52	@ 0x34
 800cd48:	ecbd 8b02 	vpop	{d8}
 800cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	9b05      	ldr	r3, [sp, #20]
 800cd56:	f173 0300 	sbcs.w	r3, r3, #0
 800cd5a:	db24      	blt.n	800cda6 <rcl_wait+0x2a6>
 800cd5c:	2f00      	cmp	r7, #0
 800cd5e:	bfbc      	itt	lt
 800cd60:	f04f 0800 	movlt.w	r8, #0
 800cd64:	4647      	movlt	r7, r8
 800cd66:	a31e      	add	r3, pc, #120	@ (adr r3, 800cde0 <rcl_wait+0x2e0>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	4639      	mov	r1, r7
 800cd70:	f7f3 fc7a 	bl	8000668 <__aeabi_ldivmod>
 800cd74:	a31a      	add	r3, pc, #104	@ (adr r3, 800cde0 <rcl_wait+0x2e0>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd7e:	4640      	mov	r0, r8
 800cd80:	4639      	mov	r1, r7
 800cd82:	f7f3 fc71 	bl	8000668 <__aeabi_ldivmod>
 800cd86:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800cd8a:	ab08      	add	r3, sp, #32
 800cd8c:	e73e      	b.n	800cc0c <rcl_wait+0x10c>
 800cd8e:	2001      	movs	r0, #1
 800cd90:	b00d      	add	sp, #52	@ 0x34
 800cd92:	ecbd 8b02 	vpop	{d8}
 800cd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9a:	200b      	movs	r0, #11
 800cd9c:	b00d      	add	sp, #52	@ 0x34
 800cd9e:	ecbd 8b02 	vpop	{d8}
 800cda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda6:	465b      	mov	r3, fp
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1d7      	bne.n	800cd5c <rcl_wait+0x25c>
 800cdac:	e72e      	b.n	800cc0c <rcl_wait+0x10c>
 800cdae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800cdb2:	430b      	orrs	r3, r1
 800cdb4:	bf08      	it	eq
 800cdb6:	4691      	moveq	r9, r2
 800cdb8:	f43f af21 	beq.w	800cbfe <rcl_wait+0xfe>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800cdc2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	9b05      	ldr	r3, [sp, #20]
 800cdca:	f173 0300 	sbcs.w	r3, r3, #0
 800cdce:	f04f 0300 	mov.w	r3, #0
 800cdd2:	4699      	mov	r9, r3
 800cdd4:	dac2      	bge.n	800cd5c <rcl_wait+0x25c>
 800cdd6:	e719      	b.n	800cc0c <rcl_wait+0x10c>
 800cdd8:	ffffffff 	.word	0xffffffff
 800cddc:	7fffffff 	.word	0x7fffffff
 800cde0:	3b9aca00 	.word	0x3b9aca00
 800cde4:	00000000 	.word	0x00000000

0800cde8 <rcl_action_take_goal_response>:
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d039      	beq.n	800ce60 <rcl_action_take_goal_response+0x78>
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	4604      	mov	r4, r0
 800cdf0:	6800      	ldr	r0, [r0, #0]
 800cdf2:	b380      	cbz	r0, 800ce56 <rcl_action_take_goal_response+0x6e>
 800cdf4:	460d      	mov	r5, r1
 800cdf6:	4616      	mov	r6, r2
 800cdf8:	f7fe fa02 	bl	800b200 <rcl_client_is_valid>
 800cdfc:	b330      	cbz	r0, 800ce4c <rcl_action_take_goal_response+0x64>
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	3004      	adds	r0, #4
 800ce02:	f7fe f9fd 	bl	800b200 <rcl_client_is_valid>
 800ce06:	b308      	cbz	r0, 800ce4c <rcl_action_take_goal_response+0x64>
 800ce08:	6820      	ldr	r0, [r4, #0]
 800ce0a:	3008      	adds	r0, #8
 800ce0c:	f7fe f9f8 	bl	800b200 <rcl_client_is_valid>
 800ce10:	b1e0      	cbz	r0, 800ce4c <rcl_action_take_goal_response+0x64>
 800ce12:	6820      	ldr	r0, [r4, #0]
 800ce14:	300c      	adds	r0, #12
 800ce16:	f7ff f869 	bl	800beec <rcl_subscription_is_valid>
 800ce1a:	b1b8      	cbz	r0, 800ce4c <rcl_action_take_goal_response+0x64>
 800ce1c:	6820      	ldr	r0, [r4, #0]
 800ce1e:	3010      	adds	r0, #16
 800ce20:	f7ff f864 	bl	800beec <rcl_subscription_is_valid>
 800ce24:	b190      	cbz	r0, 800ce4c <rcl_action_take_goal_response+0x64>
 800ce26:	b1cd      	cbz	r5, 800ce5c <rcl_action_take_goal_response+0x74>
 800ce28:	b1c6      	cbz	r6, 800ce5c <rcl_action_take_goal_response+0x74>
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7fe f99e 	bl	800b170 <rcl_take_response>
 800ce34:	b148      	cbz	r0, 800ce4a <rcl_action_take_goal_response+0x62>
 800ce36:	280a      	cmp	r0, #10
 800ce38:	d007      	beq.n	800ce4a <rcl_action_take_goal_response+0x62>
 800ce3a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800ce3e:	f640 0337 	movw	r3, #2103	@ 0x837
 800ce42:	4290      	cmp	r0, r2
 800ce44:	bf0c      	ite	eq
 800ce46:	4618      	moveq	r0, r3
 800ce48:	2001      	movne	r0, #1
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f7fc fde8 	bl	8009a20 <rcutils_reset_error>
 800ce50:	f640 0036 	movw	r0, #2102	@ 0x836
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	f640 0036 	movw	r0, #2102	@ 0x836
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}
 800ce5c:	200b      	movs	r0, #11
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	f640 0036 	movw	r0, #2102	@ 0x836
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop

0800ce68 <rcl_action_send_result_request>:
 800ce68:	b390      	cbz	r0, 800ced0 <rcl_action_send_result_request+0x68>
 800ce6a:	b570      	push	{r4, r5, r6, lr}
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	6800      	ldr	r0, [r0, #0]
 800ce70:	b348      	cbz	r0, 800cec6 <rcl_action_send_result_request+0x5e>
 800ce72:	460d      	mov	r5, r1
 800ce74:	4616      	mov	r6, r2
 800ce76:	f7fe f9c3 	bl	800b200 <rcl_client_is_valid>
 800ce7a:	b1f8      	cbz	r0, 800cebc <rcl_action_send_result_request+0x54>
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	3004      	adds	r0, #4
 800ce80:	f7fe f9be 	bl	800b200 <rcl_client_is_valid>
 800ce84:	b1d0      	cbz	r0, 800cebc <rcl_action_send_result_request+0x54>
 800ce86:	6820      	ldr	r0, [r4, #0]
 800ce88:	3008      	adds	r0, #8
 800ce8a:	f7fe f9b9 	bl	800b200 <rcl_client_is_valid>
 800ce8e:	b1a8      	cbz	r0, 800cebc <rcl_action_send_result_request+0x54>
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	300c      	adds	r0, #12
 800ce94:	f7ff f82a 	bl	800beec <rcl_subscription_is_valid>
 800ce98:	b180      	cbz	r0, 800cebc <rcl_action_send_result_request+0x54>
 800ce9a:	6820      	ldr	r0, [r4, #0]
 800ce9c:	3010      	adds	r0, #16
 800ce9e:	f7ff f825 	bl	800beec <rcl_subscription_is_valid>
 800cea2:	b158      	cbz	r0, 800cebc <rcl_action_send_result_request+0x54>
 800cea4:	b195      	cbz	r5, 800cecc <rcl_action_send_result_request+0x64>
 800cea6:	b18e      	cbz	r6, 800cecc <rcl_action_send_result_request+0x64>
 800cea8:	6820      	ldr	r0, [r4, #0]
 800ceaa:	4632      	mov	r2, r6
 800ceac:	4629      	mov	r1, r5
 800ceae:	3008      	adds	r0, #8
 800ceb0:	f7fe f926 	bl	800b100 <rcl_send_request>
 800ceb4:	3800      	subs	r0, #0
 800ceb6:	bf18      	it	ne
 800ceb8:	2001      	movne	r0, #1
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	f7fc fdb0 	bl	8009a20 <rcutils_reset_error>
 800cec0:	f640 0036 	movw	r0, #2102	@ 0x836
 800cec4:	bd70      	pop	{r4, r5, r6, pc}
 800cec6:	f640 0036 	movw	r0, #2102	@ 0x836
 800ceca:	bd70      	pop	{r4, r5, r6, pc}
 800cecc:	200b      	movs	r0, #11
 800cece:	bd70      	pop	{r4, r5, r6, pc}
 800ced0:	f640 0036 	movw	r0, #2102	@ 0x836
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop

0800ced8 <rcl_action_take_result_response>:
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d03a      	beq.n	800cf52 <rcl_action_take_result_response+0x7a>
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	6800      	ldr	r0, [r0, #0]
 800cee2:	b388      	cbz	r0, 800cf48 <rcl_action_take_result_response+0x70>
 800cee4:	460d      	mov	r5, r1
 800cee6:	4616      	mov	r6, r2
 800cee8:	f7fe f98a 	bl	800b200 <rcl_client_is_valid>
 800ceec:	b338      	cbz	r0, 800cf3e <rcl_action_take_result_response+0x66>
 800ceee:	6820      	ldr	r0, [r4, #0]
 800cef0:	3004      	adds	r0, #4
 800cef2:	f7fe f985 	bl	800b200 <rcl_client_is_valid>
 800cef6:	b310      	cbz	r0, 800cf3e <rcl_action_take_result_response+0x66>
 800cef8:	6820      	ldr	r0, [r4, #0]
 800cefa:	3008      	adds	r0, #8
 800cefc:	f7fe f980 	bl	800b200 <rcl_client_is_valid>
 800cf00:	b1e8      	cbz	r0, 800cf3e <rcl_action_take_result_response+0x66>
 800cf02:	6820      	ldr	r0, [r4, #0]
 800cf04:	300c      	adds	r0, #12
 800cf06:	f7fe fff1 	bl	800beec <rcl_subscription_is_valid>
 800cf0a:	b1c0      	cbz	r0, 800cf3e <rcl_action_take_result_response+0x66>
 800cf0c:	6820      	ldr	r0, [r4, #0]
 800cf0e:	3010      	adds	r0, #16
 800cf10:	f7fe ffec 	bl	800beec <rcl_subscription_is_valid>
 800cf14:	b198      	cbz	r0, 800cf3e <rcl_action_take_result_response+0x66>
 800cf16:	b1d5      	cbz	r5, 800cf4e <rcl_action_take_result_response+0x76>
 800cf18:	b1ce      	cbz	r6, 800cf4e <rcl_action_take_result_response+0x76>
 800cf1a:	6820      	ldr	r0, [r4, #0]
 800cf1c:	4632      	mov	r2, r6
 800cf1e:	4629      	mov	r1, r5
 800cf20:	3008      	adds	r0, #8
 800cf22:	f7fe f925 	bl	800b170 <rcl_take_response>
 800cf26:	b148      	cbz	r0, 800cf3c <rcl_action_take_result_response+0x64>
 800cf28:	280a      	cmp	r0, #10
 800cf2a:	d007      	beq.n	800cf3c <rcl_action_take_result_response+0x64>
 800cf2c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800cf30:	f640 0337 	movw	r3, #2103	@ 0x837
 800cf34:	4290      	cmp	r0, r2
 800cf36:	bf0c      	ite	eq
 800cf38:	4618      	moveq	r0, r3
 800cf3a:	2001      	movne	r0, #1
 800cf3c:	bd70      	pop	{r4, r5, r6, pc}
 800cf3e:	f7fc fd6f 	bl	8009a20 <rcutils_reset_error>
 800cf42:	f640 0036 	movw	r0, #2102	@ 0x836
 800cf46:	bd70      	pop	{r4, r5, r6, pc}
 800cf48:	f640 0036 	movw	r0, #2102	@ 0x836
 800cf4c:	bd70      	pop	{r4, r5, r6, pc}
 800cf4e:	200b      	movs	r0, #11
 800cf50:	bd70      	pop	{r4, r5, r6, pc}
 800cf52:	f640 0036 	movw	r0, #2102	@ 0x836
 800cf56:	4770      	bx	lr

0800cf58 <rcl_action_take_cancel_response>:
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d03a      	beq.n	800cfd2 <rcl_action_take_cancel_response+0x7a>
 800cf5c:	b570      	push	{r4, r5, r6, lr}
 800cf5e:	4604      	mov	r4, r0
 800cf60:	6800      	ldr	r0, [r0, #0]
 800cf62:	b388      	cbz	r0, 800cfc8 <rcl_action_take_cancel_response+0x70>
 800cf64:	460d      	mov	r5, r1
 800cf66:	4616      	mov	r6, r2
 800cf68:	f7fe f94a 	bl	800b200 <rcl_client_is_valid>
 800cf6c:	b338      	cbz	r0, 800cfbe <rcl_action_take_cancel_response+0x66>
 800cf6e:	6820      	ldr	r0, [r4, #0]
 800cf70:	3004      	adds	r0, #4
 800cf72:	f7fe f945 	bl	800b200 <rcl_client_is_valid>
 800cf76:	b310      	cbz	r0, 800cfbe <rcl_action_take_cancel_response+0x66>
 800cf78:	6820      	ldr	r0, [r4, #0]
 800cf7a:	3008      	adds	r0, #8
 800cf7c:	f7fe f940 	bl	800b200 <rcl_client_is_valid>
 800cf80:	b1e8      	cbz	r0, 800cfbe <rcl_action_take_cancel_response+0x66>
 800cf82:	6820      	ldr	r0, [r4, #0]
 800cf84:	300c      	adds	r0, #12
 800cf86:	f7fe ffb1 	bl	800beec <rcl_subscription_is_valid>
 800cf8a:	b1c0      	cbz	r0, 800cfbe <rcl_action_take_cancel_response+0x66>
 800cf8c:	6820      	ldr	r0, [r4, #0]
 800cf8e:	3010      	adds	r0, #16
 800cf90:	f7fe ffac 	bl	800beec <rcl_subscription_is_valid>
 800cf94:	b198      	cbz	r0, 800cfbe <rcl_action_take_cancel_response+0x66>
 800cf96:	b1d5      	cbz	r5, 800cfce <rcl_action_take_cancel_response+0x76>
 800cf98:	b1ce      	cbz	r6, 800cfce <rcl_action_take_cancel_response+0x76>
 800cf9a:	6820      	ldr	r0, [r4, #0]
 800cf9c:	4632      	mov	r2, r6
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	3004      	adds	r0, #4
 800cfa2:	f7fe f8e5 	bl	800b170 <rcl_take_response>
 800cfa6:	b148      	cbz	r0, 800cfbc <rcl_action_take_cancel_response+0x64>
 800cfa8:	280a      	cmp	r0, #10
 800cfaa:	d007      	beq.n	800cfbc <rcl_action_take_cancel_response+0x64>
 800cfac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800cfb0:	f640 0337 	movw	r3, #2103	@ 0x837
 800cfb4:	4290      	cmp	r0, r2
 800cfb6:	bf0c      	ite	eq
 800cfb8:	4618      	moveq	r0, r3
 800cfba:	2001      	movne	r0, #1
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}
 800cfbe:	f7fc fd2f 	bl	8009a20 <rcutils_reset_error>
 800cfc2:	f640 0036 	movw	r0, #2102	@ 0x836
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	f640 0036 	movw	r0, #2102	@ 0x836
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	200b      	movs	r0, #11
 800cfd0:	bd70      	pop	{r4, r5, r6, pc}
 800cfd2:	f640 0036 	movw	r0, #2102	@ 0x836
 800cfd6:	4770      	bx	lr

0800cfd8 <rcl_action_take_feedback>:
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d038      	beq.n	800d04e <rcl_action_take_feedback+0x76>
 800cfdc:	b530      	push	{r4, r5, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	6800      	ldr	r0, [r0, #0]
 800cfe2:	b091      	sub	sp, #68	@ 0x44
 800cfe4:	b378      	cbz	r0, 800d046 <rcl_action_take_feedback+0x6e>
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	f7fe f90a 	bl	800b200 <rcl_client_is_valid>
 800cfec:	b328      	cbz	r0, 800d03a <rcl_action_take_feedback+0x62>
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	3004      	adds	r0, #4
 800cff2:	f7fe f905 	bl	800b200 <rcl_client_is_valid>
 800cff6:	b300      	cbz	r0, 800d03a <rcl_action_take_feedback+0x62>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	3008      	adds	r0, #8
 800cffc:	f7fe f900 	bl	800b200 <rcl_client_is_valid>
 800d000:	b1d8      	cbz	r0, 800d03a <rcl_action_take_feedback+0x62>
 800d002:	6820      	ldr	r0, [r4, #0]
 800d004:	300c      	adds	r0, #12
 800d006:	f7fe ff71 	bl	800beec <rcl_subscription_is_valid>
 800d00a:	b1b0      	cbz	r0, 800d03a <rcl_action_take_feedback+0x62>
 800d00c:	6820      	ldr	r0, [r4, #0]
 800d00e:	3010      	adds	r0, #16
 800d010:	f7fe ff6c 	bl	800beec <rcl_subscription_is_valid>
 800d014:	b188      	cbz	r0, 800d03a <rcl_action_take_feedback+0x62>
 800d016:	b1ed      	cbz	r5, 800d054 <rcl_action_take_feedback+0x7c>
 800d018:	6820      	ldr	r0, [r4, #0]
 800d01a:	2300      	movs	r3, #0
 800d01c:	466a      	mov	r2, sp
 800d01e:	4629      	mov	r1, r5
 800d020:	300c      	adds	r0, #12
 800d022:	f7fe ff05 	bl	800be30 <rcl_take>
 800d026:	b160      	cbz	r0, 800d042 <rcl_action_take_feedback+0x6a>
 800d028:	f240 1391 	movw	r3, #401	@ 0x191
 800d02c:	4298      	cmp	r0, r3
 800d02e:	d014      	beq.n	800d05a <rcl_action_take_feedback+0x82>
 800d030:	280a      	cmp	r0, #10
 800d032:	bf18      	it	ne
 800d034:	2001      	movne	r0, #1
 800d036:	b011      	add	sp, #68	@ 0x44
 800d038:	bd30      	pop	{r4, r5, pc}
 800d03a:	f7fc fcf1 	bl	8009a20 <rcutils_reset_error>
 800d03e:	f640 0036 	movw	r0, #2102	@ 0x836
 800d042:	b011      	add	sp, #68	@ 0x44
 800d044:	bd30      	pop	{r4, r5, pc}
 800d046:	f640 0036 	movw	r0, #2102	@ 0x836
 800d04a:	b011      	add	sp, #68	@ 0x44
 800d04c:	bd30      	pop	{r4, r5, pc}
 800d04e:	f640 0036 	movw	r0, #2102	@ 0x836
 800d052:	4770      	bx	lr
 800d054:	200b      	movs	r0, #11
 800d056:	b011      	add	sp, #68	@ 0x44
 800d058:	bd30      	pop	{r4, r5, pc}
 800d05a:	f640 0037 	movw	r0, #2103	@ 0x837
 800d05e:	e7f0      	b.n	800d042 <rcl_action_take_feedback+0x6a>

0800d060 <rcl_action_wait_set_add_action_client>:
 800d060:	2800      	cmp	r0, #0
 800d062:	d048      	beq.n	800d0f6 <rcl_action_wait_set_add_action_client+0x96>
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	460c      	mov	r4, r1
 800d068:	2900      	cmp	r1, #0
 800d06a:	d03c      	beq.n	800d0e6 <rcl_action_wait_set_add_action_client+0x86>
 800d06c:	4605      	mov	r5, r0
 800d06e:	6808      	ldr	r0, [r1, #0]
 800d070:	2800      	cmp	r0, #0
 800d072:	d038      	beq.n	800d0e6 <rcl_action_wait_set_add_action_client+0x86>
 800d074:	4617      	mov	r7, r2
 800d076:	461e      	mov	r6, r3
 800d078:	f7fe f8c2 	bl	800b200 <rcl_client_is_valid>
 800d07c:	b3b0      	cbz	r0, 800d0ec <rcl_action_wait_set_add_action_client+0x8c>
 800d07e:	6820      	ldr	r0, [r4, #0]
 800d080:	3004      	adds	r0, #4
 800d082:	f7fe f8bd 	bl	800b200 <rcl_client_is_valid>
 800d086:	b388      	cbz	r0, 800d0ec <rcl_action_wait_set_add_action_client+0x8c>
 800d088:	6820      	ldr	r0, [r4, #0]
 800d08a:	3008      	adds	r0, #8
 800d08c:	f7fe f8b8 	bl	800b200 <rcl_client_is_valid>
 800d090:	b360      	cbz	r0, 800d0ec <rcl_action_wait_set_add_action_client+0x8c>
 800d092:	6820      	ldr	r0, [r4, #0]
 800d094:	300c      	adds	r0, #12
 800d096:	f7fe ff29 	bl	800beec <rcl_subscription_is_valid>
 800d09a:	b338      	cbz	r0, 800d0ec <rcl_action_wait_set_add_action_client+0x8c>
 800d09c:	6820      	ldr	r0, [r4, #0]
 800d09e:	3010      	adds	r0, #16
 800d0a0:	f7fe ff24 	bl	800beec <rcl_subscription_is_valid>
 800d0a4:	b310      	cbz	r0, 800d0ec <rcl_action_wait_set_add_action_client+0x8c>
 800d0a6:	6821      	ldr	r1, [r4, #0]
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 800d0ae:	f7ff fccd 	bl	800ca4c <rcl_wait_set_add_client>
 800d0b2:	b9b8      	cbnz	r0, 800d0e4 <rcl_action_wait_set_add_action_client+0x84>
 800d0b4:	6821      	ldr	r1, [r4, #0]
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 800d0bc:	3104      	adds	r1, #4
 800d0be:	f7ff fcc5 	bl	800ca4c <rcl_wait_set_add_client>
 800d0c2:	b978      	cbnz	r0, 800d0e4 <rcl_action_wait_set_add_action_client+0x84>
 800d0c4:	6821      	ldr	r1, [r4, #0]
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 800d0cc:	3108      	adds	r1, #8
 800d0ce:	f7ff fcbd 	bl	800ca4c <rcl_wait_set_add_client>
 800d0d2:	b938      	cbnz	r0, 800d0e4 <rcl_action_wait_set_add_action_client+0x84>
 800d0d4:	6821      	ldr	r1, [r4, #0]
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 800d0dc:	310c      	adds	r1, #12
 800d0de:	f7ff f96d 	bl	800c3bc <rcl_wait_set_add_subscription>
 800d0e2:	b158      	cbz	r0, 800d0fc <rcl_action_wait_set_add_action_client+0x9c>
 800d0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e6:	f640 0036 	movw	r0, #2102	@ 0x836
 800d0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ec:	f7fc fc98 	bl	8009a20 <rcutils_reset_error>
 800d0f0:	f640 0036 	movw	r0, #2102	@ 0x836
 800d0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d0fa:	4770      	bx	lr
 800d0fc:	6821      	ldr	r1, [r4, #0]
 800d0fe:	4628      	mov	r0, r5
 800d100:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 800d104:	3110      	adds	r1, #16
 800d106:	f7ff f959 	bl	800c3bc <rcl_wait_set_add_subscription>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d1ea      	bne.n	800d0e4 <rcl_action_wait_set_add_action_client+0x84>
 800d10e:	b11f      	cbz	r7, 800d118 <rcl_action_wait_set_add_action_client+0xb8>
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800d116:	603b      	str	r3, [r7, #0]
 800d118:	2e00      	cmp	r6, #0
 800d11a:	d0e3      	beq.n	800d0e4 <rcl_action_wait_set_add_action_client+0x84>
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800d122:	6033      	str	r3, [r6, #0]
 800d124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d126:	bf00      	nop

0800d128 <rcl_action_client_wait_set_get_entities_ready>:
 800d128:	2800      	cmp	r0, #0
 800d12a:	f000 808d 	beq.w	800d248 <rcl_action_client_wait_set_get_entities_ready+0x120>
 800d12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	460c      	mov	r4, r1
 800d134:	2900      	cmp	r1, #0
 800d136:	d077      	beq.n	800d228 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800d138:	4605      	mov	r5, r0
 800d13a:	6808      	ldr	r0, [r1, #0]
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d073      	beq.n	800d228 <rcl_action_client_wait_set_get_entities_ready+0x100>
 800d140:	4616      	mov	r6, r2
 800d142:	461f      	mov	r7, r3
 800d144:	f7fe f85c 	bl	800b200 <rcl_client_is_valid>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d071      	beq.n	800d230 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d14c:	6820      	ldr	r0, [r4, #0]
 800d14e:	3004      	adds	r0, #4
 800d150:	f7fe f856 	bl	800b200 <rcl_client_is_valid>
 800d154:	2800      	cmp	r0, #0
 800d156:	d06b      	beq.n	800d230 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d158:	6820      	ldr	r0, [r4, #0]
 800d15a:	3008      	adds	r0, #8
 800d15c:	f7fe f850 	bl	800b200 <rcl_client_is_valid>
 800d160:	2800      	cmp	r0, #0
 800d162:	d065      	beq.n	800d230 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d164:	6820      	ldr	r0, [r4, #0]
 800d166:	300c      	adds	r0, #12
 800d168:	f7fe fec0 	bl	800beec <rcl_subscription_is_valid>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d05f      	beq.n	800d230 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d170:	6820      	ldr	r0, [r4, #0]
 800d172:	3010      	adds	r0, #16
 800d174:	f7fe feba 	bl	800beec <rcl_subscription_is_valid>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d059      	beq.n	800d230 <rcl_action_client_wait_set_get_entities_ready+0x108>
 800d17c:	2e00      	cmp	r6, #0
 800d17e:	d060      	beq.n	800d242 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d180:	2f00      	cmp	r7, #0
 800d182:	d05e      	beq.n	800d242 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d184:	9b06      	ldr	r3, [sp, #24]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d05b      	beq.n	800d242 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d18a:	9b07      	ldr	r3, [sp, #28]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d058      	beq.n	800d242 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d190:	9b08      	ldr	r3, [sp, #32]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d055      	beq.n	800d242 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	686a      	ldr	r2, [r5, #4]
 800d19a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 800d19e:	428a      	cmp	r2, r1
 800d1a0:	d94c      	bls.n	800d23c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d1a2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 800d1a6:	4282      	cmp	r2, r0
 800d1a8:	d948      	bls.n	800d23c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d1aa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 800d1ae:	69ea      	ldr	r2, [r5, #28]
 800d1b0:	42a2      	cmp	r2, r4
 800d1b2:	d943      	bls.n	800d23c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d1b4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 800d1b8:	4562      	cmp	r2, ip
 800d1ba:	d93f      	bls.n	800d23c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d1bc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 800d1c0:	4572      	cmp	r2, lr
 800d1c2:	d93b      	bls.n	800d23c <rcl_action_client_wait_set_get_entities_ready+0x114>
 800d1c4:	69aa      	ldr	r2, [r5, #24]
 800d1c6:	682d      	ldr	r5, [r5, #0]
 800d1c8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 800d1cc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800d1d0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800d1d4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800d1d8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800d1dc:	f103 0c0c 	add.w	ip, r3, #12
 800d1e0:	eba5 050c 	sub.w	r5, r5, ip
 800d1e4:	fab5 f585 	clz	r5, r5
 800d1e8:	096d      	lsrs	r5, r5, #5
 800d1ea:	7035      	strb	r5, [r6, #0]
 800d1ec:	f103 0510 	add.w	r5, r3, #16
 800d1f0:	1b64      	subs	r4, r4, r5
 800d1f2:	fab4 f484 	clz	r4, r4
 800d1f6:	0964      	lsrs	r4, r4, #5
 800d1f8:	703c      	strb	r4, [r7, #0]
 800d1fa:	eba3 0008 	sub.w	r0, r3, r8
 800d1fe:	1d1c      	adds	r4, r3, #4
 800d200:	3308      	adds	r3, #8
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	fab0 f080 	clz	r0, r0
 800d208:	9a06      	ldr	r2, [sp, #24]
 800d20a:	0940      	lsrs	r0, r0, #5
 800d20c:	1b09      	subs	r1, r1, r4
 800d20e:	7010      	strb	r0, [r2, #0]
 800d210:	fab1 f181 	clz	r1, r1
 800d214:	9a07      	ldr	r2, [sp, #28]
 800d216:	0949      	lsrs	r1, r1, #5
 800d218:	7011      	strb	r1, [r2, #0]
 800d21a:	fab3 f383 	clz	r3, r3
 800d21e:	9a08      	ldr	r2, [sp, #32]
 800d220:	095b      	lsrs	r3, r3, #5
 800d222:	2000      	movs	r0, #0
 800d224:	7013      	strb	r3, [r2, #0]
 800d226:	e001      	b.n	800d22c <rcl_action_client_wait_set_get_entities_ready+0x104>
 800d228:	f640 0036 	movw	r0, #2102	@ 0x836
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	f7fc fbf6 	bl	8009a20 <rcutils_reset_error>
 800d234:	f640 0036 	movw	r0, #2102	@ 0x836
 800d238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d23c:	2001      	movs	r0, #1
 800d23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d242:	200b      	movs	r0, #11
 800d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d248:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop

0800d250 <rcl_action_take_goal_request>:
 800d250:	2800      	cmp	r0, #0
 800d252:	d039      	beq.n	800d2c8 <rcl_action_take_goal_request+0x78>
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	4604      	mov	r4, r0
 800d258:	6800      	ldr	r0, [r0, #0]
 800d25a:	b380      	cbz	r0, 800d2be <rcl_action_take_goal_request+0x6e>
 800d25c:	460d      	mov	r5, r1
 800d25e:	4616      	mov	r6, r2
 800d260:	f7fe fd00 	bl	800bc64 <rcl_service_is_valid>
 800d264:	b330      	cbz	r0, 800d2b4 <rcl_action_take_goal_request+0x64>
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	3004      	adds	r0, #4
 800d26a:	f7fe fcfb 	bl	800bc64 <rcl_service_is_valid>
 800d26e:	b308      	cbz	r0, 800d2b4 <rcl_action_take_goal_request+0x64>
 800d270:	6820      	ldr	r0, [r4, #0]
 800d272:	3008      	adds	r0, #8
 800d274:	f7fe fcf6 	bl	800bc64 <rcl_service_is_valid>
 800d278:	b1e0      	cbz	r0, 800d2b4 <rcl_action_take_goal_request+0x64>
 800d27a:	6820      	ldr	r0, [r4, #0]
 800d27c:	300c      	adds	r0, #12
 800d27e:	f006 f95b 	bl	8013538 <rcl_publisher_is_valid>
 800d282:	b1b8      	cbz	r0, 800d2b4 <rcl_action_take_goal_request+0x64>
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	3010      	adds	r0, #16
 800d288:	f006 f956 	bl	8013538 <rcl_publisher_is_valid>
 800d28c:	b190      	cbz	r0, 800d2b4 <rcl_action_take_goal_request+0x64>
 800d28e:	b1cd      	cbz	r5, 800d2c4 <rcl_action_take_goal_request+0x74>
 800d290:	b1c6      	cbz	r6, 800d2c4 <rcl_action_take_goal_request+0x74>
 800d292:	6820      	ldr	r0, [r4, #0]
 800d294:	4632      	mov	r2, r6
 800d296:	4629      	mov	r1, r5
 800d298:	f7fe fc8c 	bl	800bbb4 <rcl_take_request>
 800d29c:	b148      	cbz	r0, 800d2b2 <rcl_action_take_goal_request+0x62>
 800d29e:	280a      	cmp	r0, #10
 800d2a0:	d007      	beq.n	800d2b2 <rcl_action_take_goal_request+0x62>
 800d2a2:	f240 2259 	movw	r2, #601	@ 0x259
 800d2a6:	f640 0399 	movw	r3, #2201	@ 0x899
 800d2aa:	4290      	cmp	r0, r2
 800d2ac:	bf0c      	ite	eq
 800d2ae:	4618      	moveq	r0, r3
 800d2b0:	2001      	movne	r0, #1
 800d2b2:	bd70      	pop	{r4, r5, r6, pc}
 800d2b4:	f7fc fbb4 	bl	8009a20 <rcutils_reset_error>
 800d2b8:	f640 0098 	movw	r0, #2200	@ 0x898
 800d2bc:	bd70      	pop	{r4, r5, r6, pc}
 800d2be:	f640 0098 	movw	r0, #2200	@ 0x898
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}
 800d2c4:	200b      	movs	r0, #11
 800d2c6:	bd70      	pop	{r4, r5, r6, pc}
 800d2c8:	f640 0098 	movw	r0, #2200	@ 0x898
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop

0800d2d0 <rcl_action_send_goal_response>:
 800d2d0:	b390      	cbz	r0, 800d338 <rcl_action_send_goal_response+0x68>
 800d2d2:	b570      	push	{r4, r5, r6, lr}
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	6800      	ldr	r0, [r0, #0]
 800d2d8:	b348      	cbz	r0, 800d32e <rcl_action_send_goal_response+0x5e>
 800d2da:	460d      	mov	r5, r1
 800d2dc:	4616      	mov	r6, r2
 800d2de:	f7fe fcc1 	bl	800bc64 <rcl_service_is_valid>
 800d2e2:	b1f8      	cbz	r0, 800d324 <rcl_action_send_goal_response+0x54>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	3004      	adds	r0, #4
 800d2e8:	f7fe fcbc 	bl	800bc64 <rcl_service_is_valid>
 800d2ec:	b1d0      	cbz	r0, 800d324 <rcl_action_send_goal_response+0x54>
 800d2ee:	6820      	ldr	r0, [r4, #0]
 800d2f0:	3008      	adds	r0, #8
 800d2f2:	f7fe fcb7 	bl	800bc64 <rcl_service_is_valid>
 800d2f6:	b1a8      	cbz	r0, 800d324 <rcl_action_send_goal_response+0x54>
 800d2f8:	6820      	ldr	r0, [r4, #0]
 800d2fa:	300c      	adds	r0, #12
 800d2fc:	f006 f91c 	bl	8013538 <rcl_publisher_is_valid>
 800d300:	b180      	cbz	r0, 800d324 <rcl_action_send_goal_response+0x54>
 800d302:	6820      	ldr	r0, [r4, #0]
 800d304:	3010      	adds	r0, #16
 800d306:	f006 f917 	bl	8013538 <rcl_publisher_is_valid>
 800d30a:	b158      	cbz	r0, 800d324 <rcl_action_send_goal_response+0x54>
 800d30c:	b195      	cbz	r5, 800d334 <rcl_action_send_goal_response+0x64>
 800d30e:	b18e      	cbz	r6, 800d334 <rcl_action_send_goal_response+0x64>
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	4632      	mov	r2, r6
 800d314:	4629      	mov	r1, r5
 800d316:	f7fe fc8d 	bl	800bc34 <rcl_send_response>
 800d31a:	b110      	cbz	r0, 800d322 <rcl_action_send_goal_response+0x52>
 800d31c:	2802      	cmp	r0, #2
 800d31e:	bf18      	it	ne
 800d320:	2001      	movne	r0, #1
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	f7fc fb7c 	bl	8009a20 <rcutils_reset_error>
 800d328:	f640 0098 	movw	r0, #2200	@ 0x898
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	f640 0098 	movw	r0, #2200	@ 0x898
 800d332:	bd70      	pop	{r4, r5, r6, pc}
 800d334:	200b      	movs	r0, #11
 800d336:	bd70      	pop	{r4, r5, r6, pc}
 800d338:	f640 0098 	movw	r0, #2200	@ 0x898
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop

0800d340 <rcl_action_take_result_request>:
 800d340:	2800      	cmp	r0, #0
 800d342:	d03a      	beq.n	800d3ba <rcl_action_take_result_request+0x7a>
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	4604      	mov	r4, r0
 800d348:	6800      	ldr	r0, [r0, #0]
 800d34a:	b388      	cbz	r0, 800d3b0 <rcl_action_take_result_request+0x70>
 800d34c:	460d      	mov	r5, r1
 800d34e:	4616      	mov	r6, r2
 800d350:	f7fe fc88 	bl	800bc64 <rcl_service_is_valid>
 800d354:	b338      	cbz	r0, 800d3a6 <rcl_action_take_result_request+0x66>
 800d356:	6820      	ldr	r0, [r4, #0]
 800d358:	3004      	adds	r0, #4
 800d35a:	f7fe fc83 	bl	800bc64 <rcl_service_is_valid>
 800d35e:	b310      	cbz	r0, 800d3a6 <rcl_action_take_result_request+0x66>
 800d360:	6820      	ldr	r0, [r4, #0]
 800d362:	3008      	adds	r0, #8
 800d364:	f7fe fc7e 	bl	800bc64 <rcl_service_is_valid>
 800d368:	b1e8      	cbz	r0, 800d3a6 <rcl_action_take_result_request+0x66>
 800d36a:	6820      	ldr	r0, [r4, #0]
 800d36c:	300c      	adds	r0, #12
 800d36e:	f006 f8e3 	bl	8013538 <rcl_publisher_is_valid>
 800d372:	b1c0      	cbz	r0, 800d3a6 <rcl_action_take_result_request+0x66>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	3010      	adds	r0, #16
 800d378:	f006 f8de 	bl	8013538 <rcl_publisher_is_valid>
 800d37c:	b198      	cbz	r0, 800d3a6 <rcl_action_take_result_request+0x66>
 800d37e:	b1d5      	cbz	r5, 800d3b6 <rcl_action_take_result_request+0x76>
 800d380:	b1ce      	cbz	r6, 800d3b6 <rcl_action_take_result_request+0x76>
 800d382:	6820      	ldr	r0, [r4, #0]
 800d384:	4632      	mov	r2, r6
 800d386:	4629      	mov	r1, r5
 800d388:	3008      	adds	r0, #8
 800d38a:	f7fe fc13 	bl	800bbb4 <rcl_take_request>
 800d38e:	b148      	cbz	r0, 800d3a4 <rcl_action_take_result_request+0x64>
 800d390:	280a      	cmp	r0, #10
 800d392:	d007      	beq.n	800d3a4 <rcl_action_take_result_request+0x64>
 800d394:	f240 2259 	movw	r2, #601	@ 0x259
 800d398:	f640 0399 	movw	r3, #2201	@ 0x899
 800d39c:	4290      	cmp	r0, r2
 800d39e:	bf0c      	ite	eq
 800d3a0:	4618      	moveq	r0, r3
 800d3a2:	2001      	movne	r0, #1
 800d3a4:	bd70      	pop	{r4, r5, r6, pc}
 800d3a6:	f7fc fb3b 	bl	8009a20 <rcutils_reset_error>
 800d3aa:	f640 0098 	movw	r0, #2200	@ 0x898
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	f640 0098 	movw	r0, #2200	@ 0x898
 800d3b4:	bd70      	pop	{r4, r5, r6, pc}
 800d3b6:	200b      	movs	r0, #11
 800d3b8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ba:	f640 0098 	movw	r0, #2200	@ 0x898
 800d3be:	4770      	bx	lr

0800d3c0 <rcl_action_take_cancel_request>:
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d03a      	beq.n	800d43a <rcl_action_take_cancel_request+0x7a>
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	6800      	ldr	r0, [r0, #0]
 800d3ca:	b388      	cbz	r0, 800d430 <rcl_action_take_cancel_request+0x70>
 800d3cc:	460d      	mov	r5, r1
 800d3ce:	4616      	mov	r6, r2
 800d3d0:	f7fe fc48 	bl	800bc64 <rcl_service_is_valid>
 800d3d4:	b338      	cbz	r0, 800d426 <rcl_action_take_cancel_request+0x66>
 800d3d6:	6820      	ldr	r0, [r4, #0]
 800d3d8:	3004      	adds	r0, #4
 800d3da:	f7fe fc43 	bl	800bc64 <rcl_service_is_valid>
 800d3de:	b310      	cbz	r0, 800d426 <rcl_action_take_cancel_request+0x66>
 800d3e0:	6820      	ldr	r0, [r4, #0]
 800d3e2:	3008      	adds	r0, #8
 800d3e4:	f7fe fc3e 	bl	800bc64 <rcl_service_is_valid>
 800d3e8:	b1e8      	cbz	r0, 800d426 <rcl_action_take_cancel_request+0x66>
 800d3ea:	6820      	ldr	r0, [r4, #0]
 800d3ec:	300c      	adds	r0, #12
 800d3ee:	f006 f8a3 	bl	8013538 <rcl_publisher_is_valid>
 800d3f2:	b1c0      	cbz	r0, 800d426 <rcl_action_take_cancel_request+0x66>
 800d3f4:	6820      	ldr	r0, [r4, #0]
 800d3f6:	3010      	adds	r0, #16
 800d3f8:	f006 f89e 	bl	8013538 <rcl_publisher_is_valid>
 800d3fc:	b198      	cbz	r0, 800d426 <rcl_action_take_cancel_request+0x66>
 800d3fe:	b1d5      	cbz	r5, 800d436 <rcl_action_take_cancel_request+0x76>
 800d400:	b1ce      	cbz	r6, 800d436 <rcl_action_take_cancel_request+0x76>
 800d402:	6820      	ldr	r0, [r4, #0]
 800d404:	4632      	mov	r2, r6
 800d406:	4629      	mov	r1, r5
 800d408:	3004      	adds	r0, #4
 800d40a:	f7fe fbd3 	bl	800bbb4 <rcl_take_request>
 800d40e:	b148      	cbz	r0, 800d424 <rcl_action_take_cancel_request+0x64>
 800d410:	280a      	cmp	r0, #10
 800d412:	d007      	beq.n	800d424 <rcl_action_take_cancel_request+0x64>
 800d414:	f240 2259 	movw	r2, #601	@ 0x259
 800d418:	f640 0399 	movw	r3, #2201	@ 0x899
 800d41c:	4290      	cmp	r0, r2
 800d41e:	bf0c      	ite	eq
 800d420:	4618      	moveq	r0, r3
 800d422:	2001      	movne	r0, #1
 800d424:	bd70      	pop	{r4, r5, r6, pc}
 800d426:	f7fc fafb 	bl	8009a20 <rcutils_reset_error>
 800d42a:	f640 0098 	movw	r0, #2200	@ 0x898
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	f640 0098 	movw	r0, #2200	@ 0x898
 800d434:	bd70      	pop	{r4, r5, r6, pc}
 800d436:	200b      	movs	r0, #11
 800d438:	bd70      	pop	{r4, r5, r6, pc}
 800d43a:	f640 0098 	movw	r0, #2200	@ 0x898
 800d43e:	4770      	bx	lr

0800d440 <rcl_action_send_cancel_response>:
 800d440:	b398      	cbz	r0, 800d4aa <rcl_action_send_cancel_response+0x6a>
 800d442:	b570      	push	{r4, r5, r6, lr}
 800d444:	4604      	mov	r4, r0
 800d446:	6800      	ldr	r0, [r0, #0]
 800d448:	b350      	cbz	r0, 800d4a0 <rcl_action_send_cancel_response+0x60>
 800d44a:	460d      	mov	r5, r1
 800d44c:	4616      	mov	r6, r2
 800d44e:	f7fe fc09 	bl	800bc64 <rcl_service_is_valid>
 800d452:	b300      	cbz	r0, 800d496 <rcl_action_send_cancel_response+0x56>
 800d454:	6820      	ldr	r0, [r4, #0]
 800d456:	3004      	adds	r0, #4
 800d458:	f7fe fc04 	bl	800bc64 <rcl_service_is_valid>
 800d45c:	b1d8      	cbz	r0, 800d496 <rcl_action_send_cancel_response+0x56>
 800d45e:	6820      	ldr	r0, [r4, #0]
 800d460:	3008      	adds	r0, #8
 800d462:	f7fe fbff 	bl	800bc64 <rcl_service_is_valid>
 800d466:	b1b0      	cbz	r0, 800d496 <rcl_action_send_cancel_response+0x56>
 800d468:	6820      	ldr	r0, [r4, #0]
 800d46a:	300c      	adds	r0, #12
 800d46c:	f006 f864 	bl	8013538 <rcl_publisher_is_valid>
 800d470:	b188      	cbz	r0, 800d496 <rcl_action_send_cancel_response+0x56>
 800d472:	6820      	ldr	r0, [r4, #0]
 800d474:	3010      	adds	r0, #16
 800d476:	f006 f85f 	bl	8013538 <rcl_publisher_is_valid>
 800d47a:	b160      	cbz	r0, 800d496 <rcl_action_send_cancel_response+0x56>
 800d47c:	b19d      	cbz	r5, 800d4a6 <rcl_action_send_cancel_response+0x66>
 800d47e:	b196      	cbz	r6, 800d4a6 <rcl_action_send_cancel_response+0x66>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	4632      	mov	r2, r6
 800d484:	4629      	mov	r1, r5
 800d486:	3004      	adds	r0, #4
 800d488:	f7fe fbd4 	bl	800bc34 <rcl_send_response>
 800d48c:	b110      	cbz	r0, 800d494 <rcl_action_send_cancel_response+0x54>
 800d48e:	2802      	cmp	r0, #2
 800d490:	bf18      	it	ne
 800d492:	2001      	movne	r0, #1
 800d494:	bd70      	pop	{r4, r5, r6, pc}
 800d496:	f7fc fac3 	bl	8009a20 <rcutils_reset_error>
 800d49a:	f640 0098 	movw	r0, #2200	@ 0x898
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	f640 0098 	movw	r0, #2200	@ 0x898
 800d4a4:	bd70      	pop	{r4, r5, r6, pc}
 800d4a6:	200b      	movs	r0, #11
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
 800d4aa:	f640 0098 	movw	r0, #2200	@ 0x898
 800d4ae:	4770      	bx	lr

0800d4b0 <rcl_action_wait_set_add_action_server>:
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d04d      	beq.n	800d550 <rcl_action_wait_set_add_action_server+0xa0>
 800d4b4:	b570      	push	{r4, r5, r6, lr}
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	b159      	cbz	r1, 800d4d2 <rcl_action_wait_set_add_action_server+0x22>
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	6808      	ldr	r0, [r1, #0]
 800d4be:	b140      	cbz	r0, 800d4d2 <rcl_action_wait_set_add_action_server+0x22>
 800d4c0:	4616      	mov	r6, r2
 800d4c2:	f7fe fbcf 	bl	800bc64 <rcl_service_is_valid>
 800d4c6:	b120      	cbz	r0, 800d4d2 <rcl_action_wait_set_add_action_server+0x22>
 800d4c8:	6820      	ldr	r0, [r4, #0]
 800d4ca:	3004      	adds	r0, #4
 800d4cc:	f7fe fbca 	bl	800bc64 <rcl_service_is_valid>
 800d4d0:	b910      	cbnz	r0, 800d4d8 <rcl_action_wait_set_add_action_server+0x28>
 800d4d2:	f640 0098 	movw	r0, #2200	@ 0x898
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}
 800d4d8:	6820      	ldr	r0, [r4, #0]
 800d4da:	3008      	adds	r0, #8
 800d4dc:	f7fe fbc2 	bl	800bc64 <rcl_service_is_valid>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d0f6      	beq.n	800d4d2 <rcl_action_wait_set_add_action_server+0x22>
 800d4e4:	6820      	ldr	r0, [r4, #0]
 800d4e6:	300c      	adds	r0, #12
 800d4e8:	f006 f83e 	bl	8013568 <rcl_publisher_is_valid_except_context>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d0f0      	beq.n	800d4d2 <rcl_action_wait_set_add_action_server+0x22>
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	3010      	adds	r0, #16
 800d4f4:	f006 f838 	bl	8013568 <rcl_publisher_is_valid_except_context>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d0ea      	beq.n	800d4d2 <rcl_action_wait_set_add_action_server+0x22>
 800d4fc:	6821      	ldr	r1, [r4, #0]
 800d4fe:	4628      	mov	r0, r5
 800d500:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 800d504:	f7ff face 	bl	800caa4 <rcl_wait_set_add_service>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d1e4      	bne.n	800d4d6 <rcl_action_wait_set_add_action_server+0x26>
 800d50c:	6821      	ldr	r1, [r4, #0]
 800d50e:	4628      	mov	r0, r5
 800d510:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 800d514:	3104      	adds	r1, #4
 800d516:	f7ff fac5 	bl	800caa4 <rcl_wait_set_add_service>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d1db      	bne.n	800d4d6 <rcl_action_wait_set_add_action_server+0x26>
 800d51e:	6821      	ldr	r1, [r4, #0]
 800d520:	4628      	mov	r0, r5
 800d522:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 800d526:	3108      	adds	r1, #8
 800d528:	f7ff fabc 	bl	800caa4 <rcl_wait_set_add_service>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d1d2      	bne.n	800d4d6 <rcl_action_wait_set_add_action_server+0x26>
 800d530:	6821      	ldr	r1, [r4, #0]
 800d532:	4628      	mov	r0, r5
 800d534:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 800d538:	3114      	adds	r1, #20
 800d53a:	f7ff fa57 	bl	800c9ec <rcl_wait_set_add_timer>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d1c9      	bne.n	800d4d6 <rcl_action_wait_set_add_action_server+0x26>
 800d542:	2e00      	cmp	r6, #0
 800d544:	d0c7      	beq.n	800d4d6 <rcl_action_wait_set_add_action_server+0x26>
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800d54c:	6033      	str	r3, [r6, #0]
 800d54e:	bd70      	pop	{r4, r5, r6, pc}
 800d550:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop

0800d558 <rcl_action_server_wait_set_get_entities_ready>:
 800d558:	2800      	cmp	r0, #0
 800d55a:	d05a      	beq.n	800d612 <rcl_action_server_wait_set_get_entities_ready+0xba>
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	460c      	mov	r4, r1
 800d560:	b161      	cbz	r1, 800d57c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800d562:	4605      	mov	r5, r0
 800d564:	6808      	ldr	r0, [r1, #0]
 800d566:	b148      	cbz	r0, 800d57c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800d568:	4616      	mov	r6, r2
 800d56a:	461f      	mov	r7, r3
 800d56c:	f7fe fb7a 	bl	800bc64 <rcl_service_is_valid>
 800d570:	b120      	cbz	r0, 800d57c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800d572:	6820      	ldr	r0, [r4, #0]
 800d574:	3004      	adds	r0, #4
 800d576:	f7fe fb75 	bl	800bc64 <rcl_service_is_valid>
 800d57a:	b910      	cbnz	r0, 800d582 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 800d57c:	f640 0098 	movw	r0, #2200	@ 0x898
 800d580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d582:	6820      	ldr	r0, [r4, #0]
 800d584:	3008      	adds	r0, #8
 800d586:	f7fe fb6d 	bl	800bc64 <rcl_service_is_valid>
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d0f6      	beq.n	800d57c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800d58e:	6820      	ldr	r0, [r4, #0]
 800d590:	300c      	adds	r0, #12
 800d592:	f005 ffe9 	bl	8013568 <rcl_publisher_is_valid_except_context>
 800d596:	2800      	cmp	r0, #0
 800d598:	d0f0      	beq.n	800d57c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800d59a:	6820      	ldr	r0, [r4, #0]
 800d59c:	3010      	adds	r0, #16
 800d59e:	f005 ffe3 	bl	8013568 <rcl_publisher_is_valid_except_context>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0ea      	beq.n	800d57c <rcl_action_server_wait_set_get_entities_ready+0x24>
 800d5a6:	b3be      	cbz	r6, 800d618 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800d5a8:	b3b7      	cbz	r7, 800d618 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800d5aa:	9b06      	ldr	r3, [sp, #24]
 800d5ac:	b3a3      	cbz	r3, 800d618 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800d5ae:	9b07      	ldr	r3, [sp, #28]
 800d5b0:	b393      	cbz	r3, 800d618 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 800d5b2:	6821      	ldr	r1, [r4, #0]
 800d5b4:	692a      	ldr	r2, [r5, #16]
 800d5b6:	6a2c      	ldr	r4, [r5, #32]
 800d5b8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 800d5bc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 800d5c0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800d5c4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 800d5c8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 800d5cc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800d5d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800d5d4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800d5d8:	1a64      	subs	r4, r4, r1
 800d5da:	fab4 f484 	clz	r4, r4
 800d5de:	0964      	lsrs	r4, r4, #5
 800d5e0:	7034      	strb	r4, [r6, #0]
 800d5e2:	1d0c      	adds	r4, r1, #4
 800d5e4:	1b1b      	subs	r3, r3, r4
 800d5e6:	fab3 f383 	clz	r3, r3
 800d5ea:	095b      	lsrs	r3, r3, #5
 800d5ec:	f101 0408 	add.w	r4, r1, #8
 800d5f0:	703b      	strb	r3, [r7, #0]
 800d5f2:	f101 0314 	add.w	r3, r1, #20
 800d5f6:	1b01      	subs	r1, r0, r4
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	fab1 f181 	clz	r1, r1
 800d5fe:	9a06      	ldr	r2, [sp, #24]
 800d600:	0949      	lsrs	r1, r1, #5
 800d602:	7011      	strb	r1, [r2, #0]
 800d604:	fab3 f383 	clz	r3, r3
 800d608:	9a07      	ldr	r2, [sp, #28]
 800d60a:	095b      	lsrs	r3, r3, #5
 800d60c:	2000      	movs	r0, #0
 800d60e:	7013      	strb	r3, [r2, #0]
 800d610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d612:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800d616:	4770      	bx	lr
 800d618:	200b      	movs	r0, #11
 800d61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d61c <_execute_event_handler>:
 800d61c:	2002      	movs	r0, #2
 800d61e:	4770      	bx	lr

0800d620 <_cancel_goal_event_handler>:
 800d620:	2003      	movs	r0, #3
 800d622:	4770      	bx	lr

0800d624 <_succeed_event_handler>:
 800d624:	2004      	movs	r0, #4
 800d626:	4770      	bx	lr

0800d628 <_abort_event_handler>:
 800d628:	2006      	movs	r0, #6
 800d62a:	4770      	bx	lr

0800d62c <_canceled_event_handler>:
 800d62c:	2005      	movs	r0, #5
 800d62e:	4770      	bx	lr

0800d630 <rcl_action_transition_goal_state>:
 800d630:	b2c2      	uxtb	r2, r0
 800d632:	2a06      	cmp	r2, #6
 800d634:	d80c      	bhi.n	800d650 <rcl_action_transition_goal_state+0x20>
 800d636:	2904      	cmp	r1, #4
 800d638:	d80a      	bhi.n	800d650 <rcl_action_transition_goal_state+0x20>
 800d63a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800d63e:	b410      	push	{r4}
 800d640:	1853      	adds	r3, r2, r1
 800d642:	4c06      	ldr	r4, [pc, #24]	@ (800d65c <rcl_action_transition_goal_state+0x2c>)
 800d644:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800d648:	b123      	cbz	r3, 800d654 <rcl_action_transition_goal_state+0x24>
 800d64a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d64e:	4718      	bx	r3
 800d650:	2000      	movs	r0, #0
 800d652:	4770      	bx	lr
 800d654:	2000      	movs	r0, #0
 800d656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	080164dc 	.word	0x080164dc

0800d660 <rcl_action_get_zero_initialized_cancel_response>:
 800d660:	b510      	push	{r4, lr}
 800d662:	4c07      	ldr	r4, [pc, #28]	@ (800d680 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 800d664:	4686      	mov	lr, r0
 800d666:	4684      	mov	ip, r0
 800d668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d66a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d66e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	f8cc 3000 	str.w	r3, [ip]
 800d67a:	4670      	mov	r0, lr
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	bf00      	nop
 800d680:	08016568 	.word	0x08016568

0800d684 <rclc_action_send_result_request>:
 800d684:	b1d0      	cbz	r0, 800d6bc <rclc_action_send_result_request+0x38>
 800d686:	b500      	push	{lr}
 800d688:	4684      	mov	ip, r0
 800d68a:	b087      	sub	sp, #28
 800d68c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 800d690:	f8dc 100d 	ldr.w	r1, [ip, #13]
 800d694:	f8dc 2011 	ldr.w	r2, [ip, #17]
 800d698:	f8dc 3015 	ldr.w	r3, [ip, #21]
 800d69c:	f10d 0e08 	add.w	lr, sp, #8
 800d6a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d6a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800d6a8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 800d6ac:	a902      	add	r1, sp, #8
 800d6ae:	3010      	adds	r0, #16
 800d6b0:	f7ff fbda 	bl	800ce68 <rcl_action_send_result_request>
 800d6b4:	b920      	cbnz	r0, 800d6c0 <rclc_action_send_result_request+0x3c>
 800d6b6:	b007      	add	sp, #28
 800d6b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6bc:	200b      	movs	r0, #11
 800d6be:	4770      	bx	lr
 800d6c0:	9001      	str	r0, [sp, #4]
 800d6c2:	f7fc f9ad 	bl	8009a20 <rcutils_reset_error>
 800d6c6:	9801      	ldr	r0, [sp, #4]
 800d6c8:	b007      	add	sp, #28
 800d6ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6ce:	bf00      	nop

0800d6d0 <rclc_action_take_goal_handle>:
 800d6d0:	b160      	cbz	r0, 800d6ec <rclc_action_take_goal_handle+0x1c>
 800d6d2:	6883      	ldr	r3, [r0, #8]
 800d6d4:	b143      	cbz	r3, 800d6e8 <rclc_action_take_goal_handle+0x18>
 800d6d6:	6819      	ldr	r1, [r3, #0]
 800d6d8:	6081      	str	r1, [r0, #8]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	721a      	strb	r2, [r3, #8]
 800d6de:	68c1      	ldr	r1, [r0, #12]
 800d6e0:	6019      	str	r1, [r3, #0]
 800d6e2:	621a      	str	r2, [r3, #32]
 800d6e4:	849a      	strh	r2, [r3, #36]	@ 0x24
 800d6e6:	60c3      	str	r3, [r0, #12]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	4770      	bx	lr
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	e7fb      	b.n	800d6e8 <rclc_action_take_goal_handle+0x18>

0800d6f0 <rclc_action_remove_used_goal_handle>:
 800d6f0:	b180      	cbz	r0, 800d714 <rclc_action_remove_used_goal_handle+0x24>
 800d6f2:	b179      	cbz	r1, 800d714 <rclc_action_remove_used_goal_handle+0x24>
 800d6f4:	68c3      	ldr	r3, [r0, #12]
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	d00d      	beq.n	800d716 <rclc_action_remove_used_goal_handle+0x26>
 800d6fa:	b12b      	cbz	r3, 800d708 <rclc_action_remove_used_goal_handle+0x18>
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	4291      	cmp	r1, r2
 800d700:	d003      	beq.n	800d70a <rclc_action_remove_used_goal_handle+0x1a>
 800d702:	4613      	mov	r3, r2
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1f9      	bne.n	800d6fc <rclc_action_remove_used_goal_handle+0xc>
 800d708:	4770      	bx	lr
 800d70a:	680a      	ldr	r2, [r1, #0]
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	6883      	ldr	r3, [r0, #8]
 800d710:	600b      	str	r3, [r1, #0]
 800d712:	6081      	str	r1, [r0, #8]
 800d714:	4770      	bx	lr
 800d716:	680b      	ldr	r3, [r1, #0]
 800d718:	60c3      	str	r3, [r0, #12]
 800d71a:	e7f8      	b.n	800d70e <rclc_action_remove_used_goal_handle+0x1e>

0800d71c <rclc_action_find_goal_handle_by_uuid>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	b180      	cbz	r0, 800d742 <rclc_action_find_goal_handle_by_uuid+0x26>
 800d720:	460d      	mov	r5, r1
 800d722:	b181      	cbz	r1, 800d746 <rclc_action_find_goal_handle_by_uuid+0x2a>
 800d724:	68c4      	ldr	r4, [r0, #12]
 800d726:	b914      	cbnz	r4, 800d72e <rclc_action_find_goal_handle_by_uuid+0x12>
 800d728:	e009      	b.n	800d73e <rclc_action_find_goal_handle_by_uuid+0x22>
 800d72a:	6824      	ldr	r4, [r4, #0]
 800d72c:	b13c      	cbz	r4, 800d73e <rclc_action_find_goal_handle_by_uuid+0x22>
 800d72e:	f104 0009 	add.w	r0, r4, #9
 800d732:	2210      	movs	r2, #16
 800d734:	4629      	mov	r1, r5
 800d736:	f007 fce5 	bl	8015104 <memcmp>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d1f5      	bne.n	800d72a <rclc_action_find_goal_handle_by_uuid+0xe>
 800d73e:	4620      	mov	r0, r4
 800d740:	bd38      	pop	{r3, r4, r5, pc}
 800d742:	4604      	mov	r4, r0
 800d744:	e7fb      	b.n	800d73e <rclc_action_find_goal_handle_by_uuid+0x22>
 800d746:	460c      	mov	r4, r1
 800d748:	e7f9      	b.n	800d73e <rclc_action_find_goal_handle_by_uuid+0x22>
 800d74a:	bf00      	nop

0800d74c <rclc_action_find_first_handle_by_status>:
 800d74c:	b140      	cbz	r0, 800d760 <rclc_action_find_first_handle_by_status+0x14>
 800d74e:	68c0      	ldr	r0, [r0, #12]
 800d750:	b910      	cbnz	r0, 800d758 <rclc_action_find_first_handle_by_status+0xc>
 800d752:	e005      	b.n	800d760 <rclc_action_find_first_handle_by_status+0x14>
 800d754:	6800      	ldr	r0, [r0, #0]
 800d756:	b118      	cbz	r0, 800d760 <rclc_action_find_first_handle_by_status+0x14>
 800d758:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800d75c:	428b      	cmp	r3, r1
 800d75e:	d1f9      	bne.n	800d754 <rclc_action_find_first_handle_by_status+0x8>
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop

0800d764 <rclc_action_find_first_terminated_handle>:
 800d764:	b140      	cbz	r0, 800d778 <rclc_action_find_first_terminated_handle+0x14>
 800d766:	68c0      	ldr	r0, [r0, #12]
 800d768:	b910      	cbnz	r0, 800d770 <rclc_action_find_first_terminated_handle+0xc>
 800d76a:	e005      	b.n	800d778 <rclc_action_find_first_terminated_handle+0x14>
 800d76c:	6800      	ldr	r0, [r0, #0]
 800d76e:	b118      	cbz	r0, 800d778 <rclc_action_find_first_terminated_handle+0x14>
 800d770:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800d774:	2b03      	cmp	r3, #3
 800d776:	ddf9      	ble.n	800d76c <rclc_action_find_first_terminated_handle+0x8>
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop

0800d77c <rclc_action_find_handle_by_goal_request_sequence_number>:
 800d77c:	b170      	cbz	r0, 800d79c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800d77e:	68c0      	ldr	r0, [r0, #12]
 800d780:	b160      	cbz	r0, 800d79c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 800d782:	b410      	push	{r4}
 800d784:	e001      	b.n	800d78a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 800d786:	6800      	ldr	r0, [r0, #0]
 800d788:	b128      	cbz	r0, 800d796 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 800d78a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 800d78e:	4299      	cmp	r1, r3
 800d790:	bf08      	it	eq
 800d792:	4294      	cmpeq	r4, r2
 800d794:	d1f7      	bne.n	800d786 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 800d796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop

0800d7a0 <rclc_action_find_handle_by_result_request_sequence_number>:
 800d7a0:	b170      	cbz	r0, 800d7c0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800d7a2:	68c0      	ldr	r0, [r0, #12]
 800d7a4:	b160      	cbz	r0, 800d7c0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 800d7a6:	b410      	push	{r4}
 800d7a8:	e001      	b.n	800d7ae <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 800d7aa:	6800      	ldr	r0, [r0, #0]
 800d7ac:	b128      	cbz	r0, 800d7ba <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 800d7ae:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 800d7b2:	4299      	cmp	r1, r3
 800d7b4:	bf08      	it	eq
 800d7b6:	4294      	cmpeq	r4, r2
 800d7b8:	d1f7      	bne.n	800d7aa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 800d7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop

0800d7c4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 800d7c4:	b170      	cbz	r0, 800d7e4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800d7c6:	68c0      	ldr	r0, [r0, #12]
 800d7c8:	b160      	cbz	r0, 800d7e4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 800d7ca:	b410      	push	{r4}
 800d7cc:	e001      	b.n	800d7d2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 800d7ce:	6800      	ldr	r0, [r0, #0]
 800d7d0:	b128      	cbz	r0, 800d7de <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 800d7d2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 800d7d6:	4299      	cmp	r1, r3
 800d7d8:	bf08      	it	eq
 800d7da:	4294      	cmpeq	r4, r2
 800d7dc:	d1f7      	bne.n	800d7ce <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 800d7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop

0800d7e8 <rclc_action_find_first_handle_with_goal_response>:
 800d7e8:	b140      	cbz	r0, 800d7fc <rclc_action_find_first_handle_with_goal_response+0x14>
 800d7ea:	68c0      	ldr	r0, [r0, #12]
 800d7ec:	b910      	cbnz	r0, 800d7f4 <rclc_action_find_first_handle_with_goal_response+0xc>
 800d7ee:	e005      	b.n	800d7fc <rclc_action_find_first_handle_with_goal_response+0x14>
 800d7f0:	6800      	ldr	r0, [r0, #0]
 800d7f2:	b118      	cbz	r0, 800d7fc <rclc_action_find_first_handle_with_goal_response+0x14>
 800d7f4:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0f9      	beq.n	800d7f0 <rclc_action_find_first_handle_with_goal_response+0x8>
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop

0800d800 <rclc_action_find_first_handle_with_result_response>:
 800d800:	b140      	cbz	r0, 800d814 <rclc_action_find_first_handle_with_result_response+0x14>
 800d802:	68c0      	ldr	r0, [r0, #12]
 800d804:	b910      	cbnz	r0, 800d80c <rclc_action_find_first_handle_with_result_response+0xc>
 800d806:	e005      	b.n	800d814 <rclc_action_find_first_handle_with_result_response+0x14>
 800d808:	6800      	ldr	r0, [r0, #0]
 800d80a:	b118      	cbz	r0, 800d814 <rclc_action_find_first_handle_with_result_response+0x14>
 800d80c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0f9      	beq.n	800d808 <rclc_action_find_first_handle_with_result_response+0x8>
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop

0800d818 <rclc_action_server_response_goal_request>:
 800d818:	b198      	cbz	r0, 800d842 <rclc_action_server_response_goal_request+0x2a>
 800d81a:	b510      	push	{r4, lr}
 800d81c:	6844      	ldr	r4, [r0, #4]
 800d81e:	b086      	sub	sp, #24
 800d820:	2200      	movs	r2, #0
 800d822:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800d826:	460b      	mov	r3, r1
 800d828:	9205      	str	r2, [sp, #20]
 800d82a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800d82e:	aa03      	add	r2, sp, #12
 800d830:	f104 0010 	add.w	r0, r4, #16
 800d834:	f88d 300c 	strb.w	r3, [sp, #12]
 800d838:	f7ff fd4a 	bl	800d2d0 <rcl_action_send_goal_response>
 800d83c:	b918      	cbnz	r0, 800d846 <rclc_action_server_response_goal_request+0x2e>
 800d83e:	b006      	add	sp, #24
 800d840:	bd10      	pop	{r4, pc}
 800d842:	200b      	movs	r0, #11
 800d844:	4770      	bx	lr
 800d846:	9001      	str	r0, [sp, #4]
 800d848:	f7fc f8ea 	bl	8009a20 <rcutils_reset_error>
 800d84c:	9801      	ldr	r0, [sp, #4]
 800d84e:	b006      	add	sp, #24
 800d850:	bd10      	pop	{r4, pc}
 800d852:	bf00      	nop
 800d854:	0000      	movs	r0, r0
	...

0800d858 <rclc_action_server_goal_cancel_accept>:
 800d858:	b310      	cbz	r0, 800d8a0 <rclc_action_server_goal_cancel_accept+0x48>
 800d85a:	b510      	push	{r4, lr}
 800d85c:	b090      	sub	sp, #64	@ 0x40
 800d85e:	4604      	mov	r4, r0
 800d860:	a806      	add	r0, sp, #24
 800d862:	f7ff fefd 	bl	800d660 <rcl_action_get_zero_initialized_cancel_response>
 800d866:	2300      	movs	r3, #0
 800d868:	f8d4 0009 	ldr.w	r0, [r4, #9]
 800d86c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 800d870:	f8d4 2011 	ldr.w	r2, [r4, #17]
 800d874:	f88d 3018 	strb.w	r3, [sp, #24]
 800d878:	f8d4 3015 	ldr.w	r3, [r4, #21]
 800d87c:	f8cd d01c 	str.w	sp, [sp, #28]
 800d880:	46ec      	mov	ip, sp
 800d882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d886:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800d8a8 <rclc_action_server_goal_cancel_accept+0x50>
 800d88a:	6860      	ldr	r0, [r4, #4]
 800d88c:	aa06      	add	r2, sp, #24
 800d88e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800d892:	3010      	adds	r0, #16
 800d894:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d898:	f7ff fdd2 	bl	800d440 <rcl_action_send_cancel_response>
 800d89c:	b010      	add	sp, #64	@ 0x40
 800d89e:	bd10      	pop	{r4, pc}
 800d8a0:	200b      	movs	r0, #11
 800d8a2:	4770      	bx	lr
 800d8a4:	f3af 8000 	nop.w
 800d8a8:	00000001 	.word	0x00000001
 800d8ac:	00000001 	.word	0x00000001

0800d8b0 <rclc_action_server_goal_cancel_reject>:
 800d8b0:	b082      	sub	sp, #8
 800d8b2:	b530      	push	{r4, r5, lr}
 800d8b4:	b08b      	sub	sp, #44	@ 0x2c
 800d8b6:	ac0e      	add	r4, sp, #56	@ 0x38
 800d8b8:	e884 000c 	stmia.w	r4, {r2, r3}
 800d8bc:	b188      	cbz	r0, 800d8e2 <rclc_action_server_goal_cancel_reject+0x32>
 800d8be:	4604      	mov	r4, r0
 800d8c0:	a801      	add	r0, sp, #4
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	f7ff fecc 	bl	800d660 <rcl_action_get_zero_initialized_cancel_response>
 800d8c8:	aa01      	add	r2, sp, #4
 800d8ca:	a90e      	add	r1, sp, #56	@ 0x38
 800d8cc:	f104 0010 	add.w	r0, r4, #16
 800d8d0:	f88d 5004 	strb.w	r5, [sp, #4]
 800d8d4:	f7ff fdb4 	bl	800d440 <rcl_action_send_cancel_response>
 800d8d8:	b00b      	add	sp, #44	@ 0x2c
 800d8da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8de:	b002      	add	sp, #8
 800d8e0:	4770      	bx	lr
 800d8e2:	200b      	movs	r0, #11
 800d8e4:	b00b      	add	sp, #44	@ 0x2c
 800d8e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8ea:	b002      	add	sp, #8
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop

0800d8f0 <__atomic_load_8>:
 800d8f0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d8f4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d8f8:	4a15      	ldr	r2, [pc, #84]	@ (800d950 <__atomic_load_8+0x60>)
 800d8fa:	4b16      	ldr	r3, [pc, #88]	@ (800d954 <__atomic_load_8+0x64>)
 800d8fc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d900:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d904:	fb02 f101 	mul.w	r1, r2, r1
 800d908:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d90c:	fba3 2301 	umull	r2, r3, r3, r1
 800d910:	091b      	lsrs	r3, r3, #4
 800d912:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d916:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800d91a:	b4d0      	push	{r4, r6, r7}
 800d91c:	4c0e      	ldr	r4, [pc, #56]	@ (800d958 <__atomic_load_8+0x68>)
 800d91e:	1ac9      	subs	r1, r1, r3
 800d920:	1862      	adds	r2, r4, r1
 800d922:	f04f 0c01 	mov.w	ip, #1
 800d926:	e8d2 3f4f 	ldrexb	r3, [r2]
 800d92a:	e8c2 cf46 	strexb	r6, ip, [r2]
 800d92e:	2e00      	cmp	r6, #0
 800d930:	d1f9      	bne.n	800d926 <__atomic_load_8+0x36>
 800d932:	f3bf 8f5b 	dmb	ish
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1f4      	bne.n	800d926 <__atomic_load_8+0x36>
 800d93c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d940:	f3bf 8f5b 	dmb	ish
 800d944:	5463      	strb	r3, [r4, r1]
 800d946:	4630      	mov	r0, r6
 800d948:	4639      	mov	r1, r7
 800d94a:	bcd0      	pop	{r4, r6, r7}
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	27d4eb2d 	.word	0x27d4eb2d
 800d954:	b21642c9 	.word	0xb21642c9
 800d958:	200093f8 	.word	0x200093f8

0800d95c <__atomic_store_8>:
 800d95c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d960:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d96a:	4c14      	ldr	r4, [pc, #80]	@ (800d9bc <__atomic_store_8+0x60>)
 800d96c:	4d14      	ldr	r5, [pc, #80]	@ (800d9c0 <__atomic_store_8+0x64>)
 800d96e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d972:	fb04 f101 	mul.w	r1, r4, r1
 800d976:	4c13      	ldr	r4, [pc, #76]	@ (800d9c4 <__atomic_store_8+0x68>)
 800d978:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800d97c:	fba4 4e01 	umull	r4, lr, r4, r1
 800d980:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800d984:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800d988:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800d98c:	eba1 0e0e 	sub.w	lr, r1, lr
 800d990:	eb05 0c0e 	add.w	ip, r5, lr
 800d994:	f04f 0401 	mov.w	r4, #1
 800d998:	e8dc 1f4f 	ldrexb	r1, [ip]
 800d99c:	e8cc 4f46 	strexb	r6, r4, [ip]
 800d9a0:	2e00      	cmp	r6, #0
 800d9a2:	d1f9      	bne.n	800d998 <__atomic_store_8+0x3c>
 800d9a4:	f3bf 8f5b 	dmb	ish
 800d9a8:	b2c9      	uxtb	r1, r1
 800d9aa:	2900      	cmp	r1, #0
 800d9ac:	d1f4      	bne.n	800d998 <__atomic_store_8+0x3c>
 800d9ae:	e9c0 2300 	strd	r2, r3, [r0]
 800d9b2:	f3bf 8f5b 	dmb	ish
 800d9b6:	f805 100e 	strb.w	r1, [r5, lr]
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	27d4eb2d 	.word	0x27d4eb2d
 800d9c0:	200093f8 	.word	0x200093f8
 800d9c4:	b21642c9 	.word	0xb21642c9

0800d9c8 <__atomic_exchange_8>:
 800d9c8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800d9cc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800d9d0:	4916      	ldr	r1, [pc, #88]	@ (800da2c <__atomic_exchange_8+0x64>)
 800d9d2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800d9d6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800d9da:	fb01 fc0c 	mul.w	ip, r1, ip
 800d9de:	4914      	ldr	r1, [pc, #80]	@ (800da30 <__atomic_exchange_8+0x68>)
 800d9e0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800d9e4:	b570      	push	{r4, r5, r6, lr}
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	fba1 010c 	umull	r0, r1, r1, ip
 800d9ec:	0909      	lsrs	r1, r1, #4
 800d9ee:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800d9f2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800d9f6:	4e0f      	ldr	r6, [pc, #60]	@ (800da34 <__atomic_exchange_8+0x6c>)
 800d9f8:	ebac 0c01 	sub.w	ip, ip, r1
 800d9fc:	eb06 010c 	add.w	r1, r6, ip
 800da00:	f04f 0e01 	mov.w	lr, #1
 800da04:	e8d1 4f4f 	ldrexb	r4, [r1]
 800da08:	e8c1 ef40 	strexb	r0, lr, [r1]
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d1f9      	bne.n	800da04 <__atomic_exchange_8+0x3c>
 800da10:	f3bf 8f5b 	dmb	ish
 800da14:	b2e4      	uxtb	r4, r4
 800da16:	2c00      	cmp	r4, #0
 800da18:	d1f4      	bne.n	800da04 <__atomic_exchange_8+0x3c>
 800da1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800da1e:	e9c5 2300 	strd	r2, r3, [r5]
 800da22:	f3bf 8f5b 	dmb	ish
 800da26:	f806 400c 	strb.w	r4, [r6, ip]
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	27d4eb2d 	.word	0x27d4eb2d
 800da30:	b21642c9 	.word	0xb21642c9
 800da34:	200093f8 	.word	0x200093f8

0800da38 <rcutils_get_env>:
 800da38:	b168      	cbz	r0, 800da56 <rcutils_get_env+0x1e>
 800da3a:	b510      	push	{r4, lr}
 800da3c:	460c      	mov	r4, r1
 800da3e:	b129      	cbz	r1, 800da4c <rcutils_get_env+0x14>
 800da40:	f006 ffce 	bl	80149e0 <getenv>
 800da44:	b120      	cbz	r0, 800da50 <rcutils_get_env+0x18>
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	2000      	movs	r0, #0
 800da4a:	bd10      	pop	{r4, pc}
 800da4c:	4803      	ldr	r0, [pc, #12]	@ (800da5c <rcutils_get_env+0x24>)
 800da4e:	bd10      	pop	{r4, pc}
 800da50:	4b03      	ldr	r3, [pc, #12]	@ (800da60 <rcutils_get_env+0x28>)
 800da52:	6023      	str	r3, [r4, #0]
 800da54:	bd10      	pop	{r4, pc}
 800da56:	4803      	ldr	r0, [pc, #12]	@ (800da64 <rcutils_get_env+0x2c>)
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	080165a8 	.word	0x080165a8
 800da60:	080166cc 	.word	0x080166cc
 800da64:	0801658c 	.word	0x0801658c

0800da68 <rcutils_format_string_limit>:
 800da68:	b40f      	push	{r0, r1, r2, r3}
 800da6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6c:	b083      	sub	sp, #12
 800da6e:	ac08      	add	r4, sp, #32
 800da70:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800da72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da76:	b34e      	cbz	r6, 800dacc <rcutils_format_string_limit+0x64>
 800da78:	a808      	add	r0, sp, #32
 800da7a:	f7fb ffab 	bl	80099d4 <rcutils_allocator_is_valid>
 800da7e:	b328      	cbz	r0, 800dacc <rcutils_format_string_limit+0x64>
 800da80:	2100      	movs	r1, #0
 800da82:	ab0f      	add	r3, sp, #60	@ 0x3c
 800da84:	4632      	mov	r2, r6
 800da86:	4608      	mov	r0, r1
 800da88:	e9cd 3300 	strd	r3, r3, [sp]
 800da8c:	f000 f8f4 	bl	800dc78 <rcutils_vsnprintf>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	4605      	mov	r5, r0
 800da94:	d01a      	beq.n	800dacc <rcutils_format_string_limit+0x64>
 800da96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da9a:	1c47      	adds	r7, r0, #1
 800da9c:	429f      	cmp	r7, r3
 800da9e:	bf84      	itt	hi
 800daa0:	461f      	movhi	r7, r3
 800daa2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800daa6:	4638      	mov	r0, r7
 800daa8:	9b08      	ldr	r3, [sp, #32]
 800daaa:	4798      	blx	r3
 800daac:	4604      	mov	r4, r0
 800daae:	b168      	cbz	r0, 800dacc <rcutils_format_string_limit+0x64>
 800dab0:	9b01      	ldr	r3, [sp, #4]
 800dab2:	4632      	mov	r2, r6
 800dab4:	4639      	mov	r1, r7
 800dab6:	f000 f8df 	bl	800dc78 <rcutils_vsnprintf>
 800daba:	2800      	cmp	r0, #0
 800dabc:	db02      	blt.n	800dac4 <rcutils_format_string_limit+0x5c>
 800dabe:	2300      	movs	r3, #0
 800dac0:	5563      	strb	r3, [r4, r5]
 800dac2:	e004      	b.n	800dace <rcutils_format_string_limit+0x66>
 800dac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dac8:	4620      	mov	r0, r4
 800daca:	4798      	blx	r3
 800dacc:	2400      	movs	r4, #0
 800dace:	4620      	mov	r0, r4
 800dad0:	b003      	add	sp, #12
 800dad2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dad6:	b004      	add	sp, #16
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop

0800dadc <rcutils_repl_str>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	ed2d 8b02 	vpush	{d8}
 800dae4:	b087      	sub	sp, #28
 800dae6:	4680      	mov	r8, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	f8cd 8004 	str.w	r8, [sp, #4]
 800daee:	ee08 2a10 	vmov	s16, r2
 800daf2:	468a      	mov	sl, r1
 800daf4:	4699      	mov	r9, r3
 800daf6:	f7f2 fb7d 	bl	80001f4 <strlen>
 800dafa:	2600      	movs	r6, #0
 800dafc:	4647      	mov	r7, r8
 800dafe:	9002      	str	r0, [sp, #8]
 800db00:	46b3      	mov	fp, r6
 800db02:	2510      	movs	r5, #16
 800db04:	46b0      	mov	r8, r6
 800db06:	e01d      	b.n	800db44 <rcutils_repl_str+0x68>
 800db08:	f10b 0b01 	add.w	fp, fp, #1
 800db0c:	455e      	cmp	r6, fp
 800db0e:	d211      	bcs.n	800db34 <rcutils_repl_str+0x58>
 800db10:	442e      	add	r6, r5
 800db12:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800db16:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800db1a:	00b1      	lsls	r1, r6, #2
 800db1c:	4798      	blx	r3
 800db1e:	2800      	cmp	r0, #0
 800db20:	f000 8088 	beq.w	800dc34 <rcutils_repl_str+0x158>
 800db24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db28:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800db2c:	4680      	mov	r8, r0
 800db2e:	bf28      	it	cs
 800db30:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800db34:	9a01      	ldr	r2, [sp, #4]
 800db36:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800db3a:	1aa2      	subs	r2, r4, r2
 800db3c:	f843 2c04 	str.w	r2, [r3, #-4]
 800db40:	9b02      	ldr	r3, [sp, #8]
 800db42:	18e7      	adds	r7, r4, r3
 800db44:	4651      	mov	r1, sl
 800db46:	4638      	mov	r0, r7
 800db48:	f007 fb2d 	bl	80151a6 <strstr>
 800db4c:	4604      	mov	r4, r0
 800db4e:	4640      	mov	r0, r8
 800db50:	2c00      	cmp	r4, #0
 800db52:	d1d9      	bne.n	800db08 <rcutils_repl_str+0x2c>
 800db54:	46b8      	mov	r8, r7
 800db56:	4607      	mov	r7, r0
 800db58:	4640      	mov	r0, r8
 800db5a:	f7f2 fb4b 	bl	80001f4 <strlen>
 800db5e:	9b01      	ldr	r3, [sp, #4]
 800db60:	eba8 0303 	sub.w	r3, r8, r3
 800db64:	181c      	adds	r4, r3, r0
 800db66:	9404      	str	r4, [sp, #16]
 800db68:	f1bb 0f00 	cmp.w	fp, #0
 800db6c:	d04a      	beq.n	800dc04 <rcutils_repl_str+0x128>
 800db6e:	ee18 0a10 	vmov	r0, s16
 800db72:	f7f2 fb3f 	bl	80001f4 <strlen>
 800db76:	9b02      	ldr	r3, [sp, #8]
 800db78:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800db7c:	1ac3      	subs	r3, r0, r3
 800db7e:	fb0b 4303 	mla	r3, fp, r3, r4
 800db82:	461a      	mov	r2, r3
 800db84:	9305      	str	r3, [sp, #20]
 800db86:	4606      	mov	r6, r0
 800db88:	f8d9 3000 	ldr.w	r3, [r9]
 800db8c:	1c50      	adds	r0, r2, #1
 800db8e:	4798      	blx	r3
 800db90:	9003      	str	r0, [sp, #12]
 800db92:	2800      	cmp	r0, #0
 800db94:	d04f      	beq.n	800dc36 <rcutils_repl_str+0x15a>
 800db96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	4641      	mov	r1, r8
 800db9e:	f007 fba4 	bl	80152ea <memcpy>
 800dba2:	683d      	ldr	r5, [r7, #0]
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	9701      	str	r7, [sp, #4]
 800dba8:	46ba      	mov	sl, r7
 800dbaa:	441d      	add	r5, r3
 800dbac:	9f02      	ldr	r7, [sp, #8]
 800dbae:	f8cd 9008 	str.w	r9, [sp, #8]
 800dbb2:	2401      	movs	r4, #1
 800dbb4:	46d1      	mov	r9, sl
 800dbb6:	ee18 aa10 	vmov	sl, s16
 800dbba:	e00a      	b.n	800dbd2 <rcutils_repl_str+0xf6>
 800dbbc:	f8d9 5000 	ldr.w	r5, [r9]
 800dbc0:	1aaa      	subs	r2, r5, r2
 800dbc2:	1885      	adds	r5, r0, r2
 800dbc4:	f007 fb91 	bl	80152ea <memcpy>
 800dbc8:	45a3      	cmp	fp, r4
 800dbca:	f104 0201 	add.w	r2, r4, #1
 800dbce:	d935      	bls.n	800dc3c <rcutils_repl_str+0x160>
 800dbd0:	4614      	mov	r4, r2
 800dbd2:	4632      	mov	r2, r6
 800dbd4:	4651      	mov	r1, sl
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f007 fb87 	bl	80152ea <memcpy>
 800dbdc:	f859 2b04 	ldr.w	r2, [r9], #4
 800dbe0:	45a3      	cmp	fp, r4
 800dbe2:	443a      	add	r2, r7
 800dbe4:	eb05 0006 	add.w	r0, r5, r6
 800dbe8:	eb08 0102 	add.w	r1, r8, r2
 800dbec:	d1e6      	bne.n	800dbbc <rcutils_repl_str+0xe0>
 800dbee:	9b04      	ldr	r3, [sp, #16]
 800dbf0:	1a9a      	subs	r2, r3, r2
 800dbf2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dbf6:	f007 fb78 	bl	80152ea <memcpy>
 800dbfa:	9a03      	ldr	r2, [sp, #12]
 800dbfc:	9905      	ldr	r1, [sp, #20]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	5453      	strb	r3, [r2, r1]
 800dc02:	e00b      	b.n	800dc1c <rcutils_repl_str+0x140>
 800dc04:	4620      	mov	r0, r4
 800dc06:	f8d9 3000 	ldr.w	r3, [r9]
 800dc0a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dc0e:	3001      	adds	r0, #1
 800dc10:	4798      	blx	r3
 800dc12:	9003      	str	r0, [sp, #12]
 800dc14:	b110      	cbz	r0, 800dc1c <rcutils_repl_str+0x140>
 800dc16:	9901      	ldr	r1, [sp, #4]
 800dc18:	f007 fb5f 	bl	80152da <strcpy>
 800dc1c:	4638      	mov	r0, r7
 800dc1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dc22:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dc26:	4798      	blx	r3
 800dc28:	9803      	ldr	r0, [sp, #12]
 800dc2a:	b007      	add	sp, #28
 800dc2c:	ecbd 8b02 	vpop	{d8}
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	4647      	mov	r7, r8
 800dc36:	2300      	movs	r3, #0
 800dc38:	9303      	str	r3, [sp, #12]
 800dc3a:	e7ef      	b.n	800dc1c <rcutils_repl_str+0x140>
 800dc3c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800dc40:	e7db      	b.n	800dbfa <rcutils_repl_str+0x11e>
 800dc42:	bf00      	nop

0800dc44 <rcutils_snprintf>:
 800dc44:	b40c      	push	{r2, r3}
 800dc46:	b530      	push	{r4, r5, lr}
 800dc48:	b083      	sub	sp, #12
 800dc4a:	ab06      	add	r3, sp, #24
 800dc4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc50:	9301      	str	r3, [sp, #4]
 800dc52:	b152      	cbz	r2, 800dc6a <rcutils_snprintf+0x26>
 800dc54:	b138      	cbz	r0, 800dc66 <rcutils_snprintf+0x22>
 800dc56:	b141      	cbz	r1, 800dc6a <rcutils_snprintf+0x26>
 800dc58:	f007 fa46 	bl	80150e8 <vsniprintf>
 800dc5c:	b003      	add	sp, #12
 800dc5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc62:	b002      	add	sp, #8
 800dc64:	4770      	bx	lr
 800dc66:	2900      	cmp	r1, #0
 800dc68:	d0f6      	beq.n	800dc58 <rcutils_snprintf+0x14>
 800dc6a:	f007 fb09 	bl	8015280 <__errno>
 800dc6e:	2316      	movs	r3, #22
 800dc70:	6003      	str	r3, [r0, #0]
 800dc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc76:	e7f1      	b.n	800dc5c <rcutils_snprintf+0x18>

0800dc78 <rcutils_vsnprintf>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	b13a      	cbz	r2, 800dc8c <rcutils_vsnprintf+0x14>
 800dc7c:	b120      	cbz	r0, 800dc88 <rcutils_vsnprintf+0x10>
 800dc7e:	b129      	cbz	r1, 800dc8c <rcutils_vsnprintf+0x14>
 800dc80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc84:	f007 ba30 	b.w	80150e8 <vsniprintf>
 800dc88:	2900      	cmp	r1, #0
 800dc8a:	d0f9      	beq.n	800dc80 <rcutils_vsnprintf+0x8>
 800dc8c:	f007 faf8 	bl	8015280 <__errno>
 800dc90:	2316      	movs	r3, #22
 800dc92:	6003      	str	r3, [r0, #0]
 800dc94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc98:	bd70      	pop	{r4, r5, r6, pc}
 800dc9a:	bf00      	nop

0800dc9c <rcutils_strdup>:
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	b570      	push	{r4, r5, r6, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	ac07      	add	r4, sp, #28
 800dca4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800dca8:	4605      	mov	r5, r0
 800dcaa:	b1b0      	cbz	r0, 800dcda <rcutils_strdup+0x3e>
 800dcac:	f7f2 faa2 	bl	80001f4 <strlen>
 800dcb0:	1c42      	adds	r2, r0, #1
 800dcb2:	9b07      	ldr	r3, [sp, #28]
 800dcb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dcb6:	9201      	str	r2, [sp, #4]
 800dcb8:	4606      	mov	r6, r0
 800dcba:	4610      	mov	r0, r2
 800dcbc:	4798      	blx	r3
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	b128      	cbz	r0, 800dcce <rcutils_strdup+0x32>
 800dcc2:	9a01      	ldr	r2, [sp, #4]
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	f007 fb10 	bl	80152ea <memcpy>
 800dcca:	2300      	movs	r3, #0
 800dccc:	55a3      	strb	r3, [r4, r6]
 800dcce:	4620      	mov	r0, r4
 800dcd0:	b002      	add	sp, #8
 800dcd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcd6:	b004      	add	sp, #16
 800dcd8:	4770      	bx	lr
 800dcda:	4604      	mov	r4, r0
 800dcdc:	e7f7      	b.n	800dcce <rcutils_strdup+0x32>
 800dcde:	bf00      	nop

0800dce0 <rcutils_strndup>:
 800dce0:	b082      	sub	sp, #8
 800dce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce4:	ac06      	add	r4, sp, #24
 800dce6:	e884 000c 	stmia.w	r4, {r2, r3}
 800dcea:	4605      	mov	r5, r0
 800dcec:	b188      	cbz	r0, 800dd12 <rcutils_strndup+0x32>
 800dcee:	1c4f      	adds	r7, r1, #1
 800dcf0:	460e      	mov	r6, r1
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dcf6:	4790      	blx	r2
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	b128      	cbz	r0, 800dd08 <rcutils_strndup+0x28>
 800dcfc:	463a      	mov	r2, r7
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f007 faf3 	bl	80152ea <memcpy>
 800dd04:	2300      	movs	r3, #0
 800dd06:	55a3      	strb	r3, [r4, r6]
 800dd08:	4620      	mov	r0, r4
 800dd0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd0e:	b002      	add	sp, #8
 800dd10:	4770      	bx	lr
 800dd12:	4604      	mov	r4, r0
 800dd14:	e7f8      	b.n	800dd08 <rcutils_strndup+0x28>
 800dd16:	bf00      	nop

0800dd18 <rcutils_get_zero_initialized_string_map>:
 800dd18:	4b01      	ldr	r3, [pc, #4]	@ (800dd20 <rcutils_get_zero_initialized_string_map+0x8>)
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	6018      	str	r0, [r3, #0]
 800dd1e:	4770      	bx	lr
 800dd20:	20009410 	.word	0x20009410

0800dd24 <rcutils_string_map_reserve>:
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d05f      	beq.n	800dde8 <rcutils_string_map_reserve+0xc4>
 800dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	6801      	ldr	r1, [r0, #0]
 800dd30:	b082      	sub	sp, #8
 800dd32:	4605      	mov	r5, r0
 800dd34:	b129      	cbz	r1, 800dd42 <rcutils_string_map_reserve+0x1e>
 800dd36:	68cb      	ldr	r3, [r1, #12]
 800dd38:	42a3      	cmp	r3, r4
 800dd3a:	d906      	bls.n	800dd4a <rcutils_string_map_reserve+0x26>
 800dd3c:	461c      	mov	r4, r3
 800dd3e:	2900      	cmp	r1, #0
 800dd40:	d1f9      	bne.n	800dd36 <rcutils_string_map_reserve+0x12>
 800dd42:	201f      	movs	r0, #31
 800dd44:	b002      	add	sp, #8
 800dd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd4a:	688b      	ldr	r3, [r1, #8]
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	d047      	beq.n	800dde0 <rcutils_string_map_reserve+0xbc>
 800dd50:	6a0e      	ldr	r6, [r1, #32]
 800dd52:	2c00      	cmp	r4, #0
 800dd54:	d034      	beq.n	800ddc0 <rcutils_string_map_reserve+0x9c>
 800dd56:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800dd5a:	d243      	bcs.n	800dde4 <rcutils_string_map_reserve+0xc0>
 800dd5c:	00a7      	lsls	r7, r4, #2
 800dd5e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800dd62:	6808      	ldr	r0, [r1, #0]
 800dd64:	4632      	mov	r2, r6
 800dd66:	4639      	mov	r1, r7
 800dd68:	47c0      	blx	r8
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d03a      	beq.n	800dde4 <rcutils_string_map_reserve+0xc0>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	4632      	mov	r2, r6
 800dd72:	6018      	str	r0, [r3, #0]
 800dd74:	4639      	mov	r1, r7
 800dd76:	6858      	ldr	r0, [r3, #4]
 800dd78:	47c0      	blx	r8
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d032      	beq.n	800dde4 <rcutils_string_map_reserve+0xc0>
 800dd7e:	682d      	ldr	r5, [r5, #0]
 800dd80:	68ab      	ldr	r3, [r5, #8]
 800dd82:	6068      	str	r0, [r5, #4]
 800dd84:	42a3      	cmp	r3, r4
 800dd86:	d226      	bcs.n	800ddd6 <rcutils_string_map_reserve+0xb2>
 800dd88:	682a      	ldr	r2, [r5, #0]
 800dd8a:	eb00 0c07 	add.w	ip, r0, r7
 800dd8e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800dd92:	45e6      	cmp	lr, ip
 800dd94:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800dd98:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800dd9c:	d203      	bcs.n	800dda6 <rcutils_string_map_reserve+0x82>
 800dd9e:	eb02 0c07 	add.w	ip, r2, r7
 800dda2:	4566      	cmp	r6, ip
 800dda4:	d322      	bcc.n	800ddec <rcutils_string_map_reserve+0xc8>
 800dda6:	1ae3      	subs	r3, r4, r3
 800dda8:	009a      	lsls	r2, r3, #2
 800ddaa:	4670      	mov	r0, lr
 800ddac:	2100      	movs	r1, #0
 800ddae:	9201      	str	r2, [sp, #4]
 800ddb0:	f007 f9d2 	bl	8015158 <memset>
 800ddb4:	9a01      	ldr	r2, [sp, #4]
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f007 f9cd 	bl	8015158 <memset>
 800ddbe:	e00a      	b.n	800ddd6 <rcutils_string_map_reserve+0xb2>
 800ddc0:	694f      	ldr	r7, [r1, #20]
 800ddc2:	6808      	ldr	r0, [r1, #0]
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	47b8      	blx	r7
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	4631      	mov	r1, r6
 800ddcc:	6858      	ldr	r0, [r3, #4]
 800ddce:	601c      	str	r4, [r3, #0]
 800ddd0:	47b8      	blx	r7
 800ddd2:	682d      	ldr	r5, [r5, #0]
 800ddd4:	606c      	str	r4, [r5, #4]
 800ddd6:	2000      	movs	r0, #0
 800ddd8:	60ac      	str	r4, [r5, #8]
 800ddda:	b002      	add	sp, #8
 800dddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde0:	2000      	movs	r0, #0
 800dde2:	e7af      	b.n	800dd44 <rcutils_string_map_reserve+0x20>
 800dde4:	200a      	movs	r0, #10
 800dde6:	e7ad      	b.n	800dd44 <rcutils_string_map_reserve+0x20>
 800dde8:	200b      	movs	r0, #11
 800ddea:	4770      	bx	lr
 800ddec:	1f0b      	subs	r3, r1, #4
 800ddee:	4418      	add	r0, r3
 800ddf0:	4413      	add	r3, r2
 800ddf2:	3a04      	subs	r2, #4
 800ddf4:	4417      	add	r7, r2
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f843 2f04 	str.w	r2, [r3, #4]!
 800ddfc:	42bb      	cmp	r3, r7
 800ddfe:	f840 2f04 	str.w	r2, [r0, #4]!
 800de02:	d1f9      	bne.n	800ddf8 <rcutils_string_map_reserve+0xd4>
 800de04:	e7e7      	b.n	800ddd6 <rcutils_string_map_reserve+0xb2>
 800de06:	bf00      	nop

0800de08 <rcutils_string_map_init>:
 800de08:	b082      	sub	sp, #8
 800de0a:	b570      	push	{r4, r5, r6, lr}
 800de0c:	ac04      	add	r4, sp, #16
 800de0e:	e884 000c 	stmia.w	r4, {r2, r3}
 800de12:	b380      	cbz	r0, 800de76 <rcutils_string_map_init+0x6e>
 800de14:	6806      	ldr	r6, [r0, #0]
 800de16:	4604      	mov	r4, r0
 800de18:	b12e      	cbz	r6, 800de26 <rcutils_string_map_init+0x1e>
 800de1a:	251e      	movs	r5, #30
 800de1c:	4628      	mov	r0, r5
 800de1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de22:	b002      	add	sp, #8
 800de24:	4770      	bx	lr
 800de26:	a804      	add	r0, sp, #16
 800de28:	460d      	mov	r5, r1
 800de2a:	f7fb fdd3 	bl	80099d4 <rcutils_allocator_is_valid>
 800de2e:	b310      	cbz	r0, 800de76 <rcutils_string_map_init+0x6e>
 800de30:	9b04      	ldr	r3, [sp, #16]
 800de32:	9908      	ldr	r1, [sp, #32]
 800de34:	2024      	movs	r0, #36	@ 0x24
 800de36:	4798      	blx	r3
 800de38:	6020      	str	r0, [r4, #0]
 800de3a:	b310      	cbz	r0, 800de82 <rcutils_string_map_init+0x7a>
 800de3c:	f10d 0e10 	add.w	lr, sp, #16
 800de40:	e9c0 6600 	strd	r6, r6, [r0]
 800de44:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800de48:	f100 0c10 	add.w	ip, r0, #16
 800de4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800de50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de54:	f8de 3000 	ldr.w	r3, [lr]
 800de58:	f8cc 3000 	str.w	r3, [ip]
 800de5c:	4629      	mov	r1, r5
 800de5e:	4620      	mov	r0, r4
 800de60:	f7ff ff60 	bl	800dd24 <rcutils_string_map_reserve>
 800de64:	4605      	mov	r5, r0
 800de66:	2800      	cmp	r0, #0
 800de68:	d0d8      	beq.n	800de1c <rcutils_string_map_init+0x14>
 800de6a:	9b05      	ldr	r3, [sp, #20]
 800de6c:	9908      	ldr	r1, [sp, #32]
 800de6e:	6820      	ldr	r0, [r4, #0]
 800de70:	4798      	blx	r3
 800de72:	6026      	str	r6, [r4, #0]
 800de74:	e7d2      	b.n	800de1c <rcutils_string_map_init+0x14>
 800de76:	250b      	movs	r5, #11
 800de78:	4628      	mov	r0, r5
 800de7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de7e:	b002      	add	sp, #8
 800de80:	4770      	bx	lr
 800de82:	250a      	movs	r5, #10
 800de84:	e7ca      	b.n	800de1c <rcutils_string_map_init+0x14>
 800de86:	bf00      	nop

0800de88 <rcutils_string_map_fini>:
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	b082      	sub	sp, #8
 800de8e:	2800      	cmp	r0, #0
 800de90:	d03a      	beq.n	800df08 <rcutils_string_map_fini+0x80>
 800de92:	6804      	ldr	r4, [r0, #0]
 800de94:	4606      	mov	r6, r0
 800de96:	2c00      	cmp	r4, #0
 800de98:	d032      	beq.n	800df00 <rcutils_string_map_fini+0x78>
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	b32b      	cbz	r3, 800deea <rcutils_string_map_fini+0x62>
 800de9e:	2500      	movs	r5, #0
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	462f      	mov	r7, r5
 800dea4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800dea8:	b1e0      	cbz	r0, 800dee4 <rcutils_string_map_fini+0x5c>
 800deaa:	6a21      	ldr	r1, [r4, #32]
 800deac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800deb0:	9101      	str	r1, [sp, #4]
 800deb2:	47c0      	blx	r8
 800deb4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800deb8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800debc:	9901      	ldr	r1, [sp, #4]
 800debe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dec2:	47c0      	blx	r8
 800dec4:	68e3      	ldr	r3, [r4, #12]
 800dec6:	6862      	ldr	r2, [r4, #4]
 800dec8:	3b01      	subs	r3, #1
 800deca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800dece:	60e3      	str	r3, [r4, #12]
 800ded0:	6834      	ldr	r4, [r6, #0]
 800ded2:	68a3      	ldr	r3, [r4, #8]
 800ded4:	3501      	adds	r5, #1
 800ded6:	429d      	cmp	r5, r3
 800ded8:	d207      	bcs.n	800deea <rcutils_string_map_fini+0x62>
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d1e2      	bne.n	800deaa <rcutils_string_map_fini+0x22>
 800dee4:	3501      	adds	r5, #1
 800dee6:	429d      	cmp	r5, r3
 800dee8:	d3dc      	bcc.n	800dea4 <rcutils_string_map_fini+0x1c>
 800deea:	2100      	movs	r1, #0
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff ff19 	bl	800dd24 <rcutils_string_map_reserve>
 800def2:	4604      	mov	r4, r0
 800def4:	b920      	cbnz	r0, 800df00 <rcutils_string_map_fini+0x78>
 800def6:	6830      	ldr	r0, [r6, #0]
 800def8:	6943      	ldr	r3, [r0, #20]
 800defa:	6a01      	ldr	r1, [r0, #32]
 800defc:	4798      	blx	r3
 800defe:	6034      	str	r4, [r6, #0]
 800df00:	4620      	mov	r0, r4
 800df02:	b002      	add	sp, #8
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	240b      	movs	r4, #11
 800df0a:	4620      	mov	r0, r4
 800df0c:	b002      	add	sp, #8
 800df0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df12:	bf00      	nop

0800df14 <rcutils_string_map_getn>:
 800df14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	b300      	cbz	r0, 800df5c <rcutils_string_map_getn+0x48>
 800df1a:	6807      	ldr	r7, [r0, #0]
 800df1c:	b1ff      	cbz	r7, 800df5e <rcutils_string_map_getn+0x4a>
 800df1e:	4688      	mov	r8, r1
 800df20:	b1e1      	cbz	r1, 800df5c <rcutils_string_map_getn+0x48>
 800df22:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800df26:	683e      	ldr	r6, [r7, #0]
 800df28:	f1ba 0f00 	cmp.w	sl, #0
 800df2c:	d016      	beq.n	800df5c <rcutils_string_map_getn+0x48>
 800df2e:	4691      	mov	r9, r2
 800df30:	3e04      	subs	r6, #4
 800df32:	2400      	movs	r4, #0
 800df34:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800df38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df3c:	4628      	mov	r0, r5
 800df3e:	3401      	adds	r4, #1
 800df40:	b155      	cbz	r5, 800df58 <rcutils_string_map_getn+0x44>
 800df42:	f7f2 f957 	bl	80001f4 <strlen>
 800df46:	4548      	cmp	r0, r9
 800df48:	4602      	mov	r2, r0
 800df4a:	4629      	mov	r1, r5
 800df4c:	bf38      	it	cc
 800df4e:	464a      	movcc	r2, r9
 800df50:	4640      	mov	r0, r8
 800df52:	f007 f916 	bl	8015182 <strncmp>
 800df56:	b128      	cbz	r0, 800df64 <rcutils_string_map_getn+0x50>
 800df58:	45a2      	cmp	sl, r4
 800df5a:	d1eb      	bne.n	800df34 <rcutils_string_map_getn+0x20>
 800df5c:	2700      	movs	r7, #0
 800df5e:	4638      	mov	r0, r7
 800df60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f853 700b 	ldr.w	r7, [r3, fp]
 800df6a:	4638      	mov	r0, r7
 800df6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df70 <rmw_get_zero_initialized_context>:
 800df70:	b510      	push	{r4, lr}
 800df72:	4604      	mov	r4, r0
 800df74:	3010      	adds	r0, #16
 800df76:	f000 f80b 	bl	800df90 <rmw_get_zero_initialized_init_options>
 800df7a:	2300      	movs	r3, #0
 800df7c:	2000      	movs	r0, #0
 800df7e:	2100      	movs	r1, #0
 800df80:	e9c4 0100 	strd	r0, r1, [r4]
 800df84:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800df88:	60a3      	str	r3, [r4, #8]
 800df8a:	4620      	mov	r0, r4
 800df8c:	bd10      	pop	{r4, pc}
 800df8e:	bf00      	nop

0800df90 <rmw_get_zero_initialized_init_options>:
 800df90:	b510      	push	{r4, lr}
 800df92:	2238      	movs	r2, #56	@ 0x38
 800df94:	4604      	mov	r4, r0
 800df96:	2100      	movs	r1, #0
 800df98:	f007 f8de 	bl	8015158 <memset>
 800df9c:	f104 0010 	add.w	r0, r4, #16
 800dfa0:	f000 f806 	bl	800dfb0 <rmw_get_default_security_options>
 800dfa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfa8:	60e3      	str	r3, [r4, #12]
 800dfaa:	4620      	mov	r0, r4
 800dfac:	bd10      	pop	{r4, pc}
 800dfae:	bf00      	nop

0800dfb0 <rmw_get_default_security_options>:
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	7002      	strb	r2, [r0, #0]
 800dfb4:	6042      	str	r2, [r0, #4]
 800dfb6:	4770      	bx	lr

0800dfb8 <rmw_subscription_content_filter_options_fini>:
 800dfb8:	b1b0      	cbz	r0, 800dfe8 <rmw_subscription_content_filter_options_fini+0x30>
 800dfba:	b538      	push	{r3, r4, r5, lr}
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	4608      	mov	r0, r1
 800dfc0:	460d      	mov	r5, r1
 800dfc2:	f7fb fd07 	bl	80099d4 <rcutils_allocator_is_valid>
 800dfc6:	b168      	cbz	r0, 800dfe4 <rmw_subscription_content_filter_options_fini+0x2c>
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	b120      	cbz	r0, 800dfd6 <rmw_subscription_content_filter_options_fini+0x1e>
 800dfcc:	686b      	ldr	r3, [r5, #4]
 800dfce:	6929      	ldr	r1, [r5, #16]
 800dfd0:	4798      	blx	r3
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	1d20      	adds	r0, r4, #4
 800dfd8:	f005 fba2 	bl	8013720 <rcutils_string_array_fini>
 800dfdc:	3800      	subs	r0, #0
 800dfde:	bf18      	it	ne
 800dfe0:	2001      	movne	r0, #1
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	200b      	movs	r0, #11
 800dfe6:	bd38      	pop	{r3, r4, r5, pc}
 800dfe8:	200b      	movs	r0, #11
 800dfea:	4770      	bx	lr

0800dfec <rmw_get_default_subscription_options>:
 800dfec:	2200      	movs	r2, #0
 800dfee:	e9c0 2200 	strd	r2, r2, [r0]
 800dff2:	6082      	str	r2, [r0, #8]
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop

0800dff8 <rmw_get_zero_initialized_message_info>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	2240      	movs	r2, #64	@ 0x40
 800dffc:	4604      	mov	r4, r0
 800dffe:	2100      	movs	r1, #0
 800e000:	f007 f8aa 	bl	8015158 <memset>
 800e004:	4620      	mov	r0, r4
 800e006:	bd10      	pop	{r4, pc}

0800e008 <rmw_validate_full_topic_name>:
 800e008:	2800      	cmp	r0, #0
 800e00a:	d057      	beq.n	800e0bc <rmw_validate_full_topic_name+0xb4>
 800e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	460d      	mov	r5, r1
 800e012:	2900      	cmp	r1, #0
 800e014:	d054      	beq.n	800e0c0 <rmw_validate_full_topic_name+0xb8>
 800e016:	4616      	mov	r6, r2
 800e018:	4604      	mov	r4, r0
 800e01a:	f7f2 f8eb 	bl	80001f4 <strlen>
 800e01e:	b148      	cbz	r0, 800e034 <rmw_validate_full_topic_name+0x2c>
 800e020:	7823      	ldrb	r3, [r4, #0]
 800e022:	2b2f      	cmp	r3, #47	@ 0x2f
 800e024:	d00d      	beq.n	800e042 <rmw_validate_full_topic_name+0x3a>
 800e026:	2302      	movs	r3, #2
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	b13e      	cbz	r6, 800e03c <rmw_validate_full_topic_name+0x34>
 800e02c:	2000      	movs	r0, #0
 800e02e:	6030      	str	r0, [r6, #0]
 800e030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e034:	2301      	movs	r3, #1
 800e036:	602b      	str	r3, [r5, #0]
 800e038:	2e00      	cmp	r6, #0
 800e03a:	d1f7      	bne.n	800e02c <rmw_validate_full_topic_name+0x24>
 800e03c:	2000      	movs	r0, #0
 800e03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e042:	1e43      	subs	r3, r0, #1
 800e044:	5ce2      	ldrb	r2, [r4, r3]
 800e046:	2a2f      	cmp	r2, #47	@ 0x2f
 800e048:	d03c      	beq.n	800e0c4 <rmw_validate_full_topic_name+0xbc>
 800e04a:	1e63      	subs	r3, r4, #1
 800e04c:	eb03 0800 	add.w	r8, r3, r0
 800e050:	f1c4 0e01 	rsb	lr, r4, #1
 800e054:	eb0e 0703 	add.w	r7, lr, r3
 800e058:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e05c:	f021 0220 	bic.w	r2, r1, #32
 800e060:	3a41      	subs	r2, #65	@ 0x41
 800e062:	2a19      	cmp	r2, #25
 800e064:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e068:	d90b      	bls.n	800e082 <rmw_validate_full_topic_name+0x7a>
 800e06a:	295f      	cmp	r1, #95	@ 0x5f
 800e06c:	d009      	beq.n	800e082 <rmw_validate_full_topic_name+0x7a>
 800e06e:	f1bc 0f0a 	cmp.w	ip, #10
 800e072:	d906      	bls.n	800e082 <rmw_validate_full_topic_name+0x7a>
 800e074:	2304      	movs	r3, #4
 800e076:	602b      	str	r3, [r5, #0]
 800e078:	2e00      	cmp	r6, #0
 800e07a:	d0df      	beq.n	800e03c <rmw_validate_full_topic_name+0x34>
 800e07c:	6037      	str	r7, [r6, #0]
 800e07e:	2000      	movs	r0, #0
 800e080:	e7d6      	b.n	800e030 <rmw_validate_full_topic_name+0x28>
 800e082:	4543      	cmp	r3, r8
 800e084:	d1e6      	bne.n	800e054 <rmw_validate_full_topic_name+0x4c>
 800e086:	4f1a      	ldr	r7, [pc, #104]	@ (800e0f0 <rmw_validate_full_topic_name+0xe8>)
 800e088:	2301      	movs	r3, #1
 800e08a:	e004      	b.n	800e096 <rmw_validate_full_topic_name+0x8e>
 800e08c:	4298      	cmp	r0, r3
 800e08e:	f104 0401 	add.w	r4, r4, #1
 800e092:	d91c      	bls.n	800e0ce <rmw_validate_full_topic_name+0xc6>
 800e094:	4613      	mov	r3, r2
 800e096:	4298      	cmp	r0, r3
 800e098:	f103 0201 	add.w	r2, r3, #1
 800e09c:	d0f6      	beq.n	800e08c <rmw_validate_full_topic_name+0x84>
 800e09e:	7821      	ldrb	r1, [r4, #0]
 800e0a0:	292f      	cmp	r1, #47	@ 0x2f
 800e0a2:	d1f3      	bne.n	800e08c <rmw_validate_full_topic_name+0x84>
 800e0a4:	7861      	ldrb	r1, [r4, #1]
 800e0a6:	292f      	cmp	r1, #47	@ 0x2f
 800e0a8:	d01c      	beq.n	800e0e4 <rmw_validate_full_topic_name+0xdc>
 800e0aa:	5dc9      	ldrb	r1, [r1, r7]
 800e0ac:	0749      	lsls	r1, r1, #29
 800e0ae:	d5ed      	bpl.n	800e08c <rmw_validate_full_topic_name+0x84>
 800e0b0:	2206      	movs	r2, #6
 800e0b2:	602a      	str	r2, [r5, #0]
 800e0b4:	2e00      	cmp	r6, #0
 800e0b6:	d0c1      	beq.n	800e03c <rmw_validate_full_topic_name+0x34>
 800e0b8:	6033      	str	r3, [r6, #0]
 800e0ba:	e7bf      	b.n	800e03c <rmw_validate_full_topic_name+0x34>
 800e0bc:	200b      	movs	r0, #11
 800e0be:	4770      	bx	lr
 800e0c0:	200b      	movs	r0, #11
 800e0c2:	e7b5      	b.n	800e030 <rmw_validate_full_topic_name+0x28>
 800e0c4:	2203      	movs	r2, #3
 800e0c6:	602a      	str	r2, [r5, #0]
 800e0c8:	2e00      	cmp	r6, #0
 800e0ca:	d1f5      	bne.n	800e0b8 <rmw_validate_full_topic_name+0xb0>
 800e0cc:	e7b6      	b.n	800e03c <rmw_validate_full_topic_name+0x34>
 800e0ce:	28f7      	cmp	r0, #247	@ 0xf7
 800e0d0:	d802      	bhi.n	800e0d8 <rmw_validate_full_topic_name+0xd0>
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	6028      	str	r0, [r5, #0]
 800e0d6:	e7ab      	b.n	800e030 <rmw_validate_full_topic_name+0x28>
 800e0d8:	2307      	movs	r3, #7
 800e0da:	602b      	str	r3, [r5, #0]
 800e0dc:	2e00      	cmp	r6, #0
 800e0de:	d0ad      	beq.n	800e03c <rmw_validate_full_topic_name+0x34>
 800e0e0:	23f6      	movs	r3, #246	@ 0xf6
 800e0e2:	e7e9      	b.n	800e0b8 <rmw_validate_full_topic_name+0xb0>
 800e0e4:	2205      	movs	r2, #5
 800e0e6:	602a      	str	r2, [r5, #0]
 800e0e8:	2e00      	cmp	r6, #0
 800e0ea:	d1e5      	bne.n	800e0b8 <rmw_validate_full_topic_name+0xb0>
 800e0ec:	e7a6      	b.n	800e03c <rmw_validate_full_topic_name+0x34>
 800e0ee:	bf00      	nop
 800e0f0:	08016bdc 	.word	0x08016bdc

0800e0f4 <rmw_validate_namespace_with_size>:
 800e0f4:	b340      	cbz	r0, 800e148 <rmw_validate_namespace_with_size+0x54>
 800e0f6:	b570      	push	{r4, r5, r6, lr}
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	b0c2      	sub	sp, #264	@ 0x108
 800e0fc:	b332      	cbz	r2, 800e14c <rmw_validate_namespace_with_size+0x58>
 800e0fe:	2901      	cmp	r1, #1
 800e100:	460d      	mov	r5, r1
 800e102:	461e      	mov	r6, r3
 800e104:	d102      	bne.n	800e10c <rmw_validate_namespace_with_size+0x18>
 800e106:	7803      	ldrb	r3, [r0, #0]
 800e108:	2b2f      	cmp	r3, #47	@ 0x2f
 800e10a:	d012      	beq.n	800e132 <rmw_validate_namespace_with_size+0x3e>
 800e10c:	aa01      	add	r2, sp, #4
 800e10e:	4669      	mov	r1, sp
 800e110:	f7ff ff7a 	bl	800e008 <rmw_validate_full_topic_name>
 800e114:	b978      	cbnz	r0, 800e136 <rmw_validate_namespace_with_size+0x42>
 800e116:	9b00      	ldr	r3, [sp, #0]
 800e118:	b14b      	cbz	r3, 800e12e <rmw_validate_namespace_with_size+0x3a>
 800e11a:	2b07      	cmp	r3, #7
 800e11c:	d007      	beq.n	800e12e <rmw_validate_namespace_with_size+0x3a>
 800e11e:	1e5a      	subs	r2, r3, #1
 800e120:	2a05      	cmp	r2, #5
 800e122:	d82b      	bhi.n	800e17c <rmw_validate_namespace_with_size+0x88>
 800e124:	e8df f002 	tbb	[pc, r2]
 800e128:	1e212427 	.word	0x1e212427
 800e12c:	141b      	.short	0x141b
 800e12e:	2df5      	cmp	r5, #245	@ 0xf5
 800e130:	d803      	bhi.n	800e13a <rmw_validate_namespace_with_size+0x46>
 800e132:	2000      	movs	r0, #0
 800e134:	6020      	str	r0, [r4, #0]
 800e136:	b042      	add	sp, #264	@ 0x108
 800e138:	bd70      	pop	{r4, r5, r6, pc}
 800e13a:	2307      	movs	r3, #7
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	2e00      	cmp	r6, #0
 800e140:	d0f9      	beq.n	800e136 <rmw_validate_namespace_with_size+0x42>
 800e142:	23f4      	movs	r3, #244	@ 0xf4
 800e144:	6033      	str	r3, [r6, #0]
 800e146:	e7f6      	b.n	800e136 <rmw_validate_namespace_with_size+0x42>
 800e148:	200b      	movs	r0, #11
 800e14a:	4770      	bx	lr
 800e14c:	200b      	movs	r0, #11
 800e14e:	e7f2      	b.n	800e136 <rmw_validate_namespace_with_size+0x42>
 800e150:	2306      	movs	r3, #6
 800e152:	6023      	str	r3, [r4, #0]
 800e154:	2e00      	cmp	r6, #0
 800e156:	d0ee      	beq.n	800e136 <rmw_validate_namespace_with_size+0x42>
 800e158:	9b01      	ldr	r3, [sp, #4]
 800e15a:	6033      	str	r3, [r6, #0]
 800e15c:	e7eb      	b.n	800e136 <rmw_validate_namespace_with_size+0x42>
 800e15e:	2305      	movs	r3, #5
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	e7f7      	b.n	800e154 <rmw_validate_namespace_with_size+0x60>
 800e164:	2304      	movs	r3, #4
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	e7f4      	b.n	800e154 <rmw_validate_namespace_with_size+0x60>
 800e16a:	2303      	movs	r3, #3
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	e7f1      	b.n	800e154 <rmw_validate_namespace_with_size+0x60>
 800e170:	2302      	movs	r3, #2
 800e172:	6023      	str	r3, [r4, #0]
 800e174:	e7ee      	b.n	800e154 <rmw_validate_namespace_with_size+0x60>
 800e176:	2301      	movs	r3, #1
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	e7eb      	b.n	800e154 <rmw_validate_namespace_with_size+0x60>
 800e17c:	4a03      	ldr	r2, [pc, #12]	@ (800e18c <rmw_validate_namespace_with_size+0x98>)
 800e17e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e182:	a802      	add	r0, sp, #8
 800e184:	f7ff fd5e 	bl	800dc44 <rcutils_snprintf>
 800e188:	2001      	movs	r0, #1
 800e18a:	e7d4      	b.n	800e136 <rmw_validate_namespace_with_size+0x42>
 800e18c:	080165c4 	.word	0x080165c4

0800e190 <rmw_validate_namespace>:
 800e190:	b168      	cbz	r0, 800e1ae <rmw_validate_namespace+0x1e>
 800e192:	b570      	push	{r4, r5, r6, lr}
 800e194:	460d      	mov	r5, r1
 800e196:	4616      	mov	r6, r2
 800e198:	4604      	mov	r4, r0
 800e19a:	f7f2 f82b 	bl	80001f4 <strlen>
 800e19e:	4633      	mov	r3, r6
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	462a      	mov	r2, r5
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1aa:	f7ff bfa3 	b.w	800e0f4 <rmw_validate_namespace_with_size>
 800e1ae:	200b      	movs	r0, #11
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop

0800e1b4 <rmw_namespace_validation_result_string>:
 800e1b4:	2807      	cmp	r0, #7
 800e1b6:	bf9a      	itte	ls
 800e1b8:	4b02      	ldrls	r3, [pc, #8]	@ (800e1c4 <rmw_namespace_validation_result_string+0x10>)
 800e1ba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e1be:	4802      	ldrhi	r0, [pc, #8]	@ (800e1c8 <rmw_namespace_validation_result_string+0x14>)
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	080167bc 	.word	0x080167bc
 800e1c8:	08016614 	.word	0x08016614

0800e1cc <rmw_validate_node_name>:
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d03b      	beq.n	800e248 <rmw_validate_node_name+0x7c>
 800e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d4:	460d      	mov	r5, r1
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	d038      	beq.n	800e24c <rmw_validate_node_name+0x80>
 800e1da:	4616      	mov	r6, r2
 800e1dc:	4604      	mov	r4, r0
 800e1de:	f7f2 f809 	bl	80001f4 <strlen>
 800e1e2:	b1e0      	cbz	r0, 800e21e <rmw_validate_node_name+0x52>
 800e1e4:	1e63      	subs	r3, r4, #1
 800e1e6:	eb03 0800 	add.w	r8, r3, r0
 800e1ea:	f1c4 0101 	rsb	r1, r4, #1
 800e1ee:	18cf      	adds	r7, r1, r3
 800e1f0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e1f4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e1f8:	f02e 0c20 	bic.w	ip, lr, #32
 800e1fc:	2a09      	cmp	r2, #9
 800e1fe:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e202:	d914      	bls.n	800e22e <rmw_validate_node_name+0x62>
 800e204:	f1bc 0f19 	cmp.w	ip, #25
 800e208:	d911      	bls.n	800e22e <rmw_validate_node_name+0x62>
 800e20a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e20e:	d00e      	beq.n	800e22e <rmw_validate_node_name+0x62>
 800e210:	2302      	movs	r3, #2
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	b106      	cbz	r6, 800e218 <rmw_validate_node_name+0x4c>
 800e216:	6037      	str	r7, [r6, #0]
 800e218:	2000      	movs	r0, #0
 800e21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e21e:	2301      	movs	r3, #1
 800e220:	602b      	str	r3, [r5, #0]
 800e222:	2e00      	cmp	r6, #0
 800e224:	d0f8      	beq.n	800e218 <rmw_validate_node_name+0x4c>
 800e226:	2000      	movs	r0, #0
 800e228:	6030      	str	r0, [r6, #0]
 800e22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e22e:	4543      	cmp	r3, r8
 800e230:	d1dd      	bne.n	800e1ee <rmw_validate_node_name+0x22>
 800e232:	7822      	ldrb	r2, [r4, #0]
 800e234:	4b0d      	ldr	r3, [pc, #52]	@ (800e26c <rmw_validate_node_name+0xa0>)
 800e236:	5cd3      	ldrb	r3, [r2, r3]
 800e238:	f013 0304 	ands.w	r3, r3, #4
 800e23c:	d110      	bne.n	800e260 <rmw_validate_node_name+0x94>
 800e23e:	28ff      	cmp	r0, #255	@ 0xff
 800e240:	d806      	bhi.n	800e250 <rmw_validate_node_name+0x84>
 800e242:	602b      	str	r3, [r5, #0]
 800e244:	4618      	mov	r0, r3
 800e246:	e7e8      	b.n	800e21a <rmw_validate_node_name+0x4e>
 800e248:	200b      	movs	r0, #11
 800e24a:	4770      	bx	lr
 800e24c:	200b      	movs	r0, #11
 800e24e:	e7e4      	b.n	800e21a <rmw_validate_node_name+0x4e>
 800e250:	2204      	movs	r2, #4
 800e252:	602a      	str	r2, [r5, #0]
 800e254:	2e00      	cmp	r6, #0
 800e256:	d0df      	beq.n	800e218 <rmw_validate_node_name+0x4c>
 800e258:	22fe      	movs	r2, #254	@ 0xfe
 800e25a:	6032      	str	r2, [r6, #0]
 800e25c:	4618      	mov	r0, r3
 800e25e:	e7dc      	b.n	800e21a <rmw_validate_node_name+0x4e>
 800e260:	2303      	movs	r3, #3
 800e262:	602b      	str	r3, [r5, #0]
 800e264:	2e00      	cmp	r6, #0
 800e266:	d1de      	bne.n	800e226 <rmw_validate_node_name+0x5a>
 800e268:	e7d6      	b.n	800e218 <rmw_validate_node_name+0x4c>
 800e26a:	bf00      	nop
 800e26c:	08016bdc 	.word	0x08016bdc

0800e270 <rmw_node_name_validation_result_string>:
 800e270:	2804      	cmp	r0, #4
 800e272:	bf9a      	itte	ls
 800e274:	4b02      	ldrls	r3, [pc, #8]	@ (800e280 <rmw_node_name_validation_result_string+0x10>)
 800e276:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e27a:	4802      	ldrhi	r0, [pc, #8]	@ (800e284 <rmw_node_name_validation_result_string+0x14>)
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	080168c8 	.word	0x080168c8
 800e284:	080167dc 	.word	0x080167dc

0800e288 <rmw_destroy_client>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	b128      	cbz	r0, 800e298 <rmw_destroy_client+0x10>
 800e28c:	4604      	mov	r4, r0
 800e28e:	6800      	ldr	r0, [r0, #0]
 800e290:	460d      	mov	r5, r1
 800e292:	f001 fc73 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800e296:	b910      	cbnz	r0, 800e29e <rmw_destroy_client+0x16>
 800e298:	2401      	movs	r4, #1
 800e29a:	4620      	mov	r0, r4
 800e29c:	bd70      	pop	{r4, r5, r6, pc}
 800e29e:	6863      	ldr	r3, [r4, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d0f9      	beq.n	800e298 <rmw_destroy_client+0x10>
 800e2a4:	2d00      	cmp	r5, #0
 800e2a6:	d0f7      	beq.n	800e298 <rmw_destroy_client+0x10>
 800e2a8:	6828      	ldr	r0, [r5, #0]
 800e2aa:	f001 fc67 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d0f2      	beq.n	800e298 <rmw_destroy_client+0x10>
 800e2b2:	686e      	ldr	r6, [r5, #4]
 800e2b4:	2e00      	cmp	r6, #0
 800e2b6:	d0ef      	beq.n	800e298 <rmw_destroy_client+0x10>
 800e2b8:	6864      	ldr	r4, [r4, #4]
 800e2ba:	6932      	ldr	r2, [r6, #16]
 800e2bc:	6920      	ldr	r0, [r4, #16]
 800e2be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e2c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2c6:	6819      	ldr	r1, [r3, #0]
 800e2c8:	f001 ff2e 	bl	8010128 <uxr_buffer_cancel_data>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	6920      	ldr	r0, [r4, #16]
 800e2d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e2d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e2d8:	f001 fbd0 	bl	800fa7c <run_xrce_session>
 800e2dc:	6920      	ldr	r0, [r4, #16]
 800e2de:	6932      	ldr	r2, [r6, #16]
 800e2e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e2e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2e8:	6819      	ldr	r1, [r3, #0]
 800e2ea:	f001 fc95 	bl	800fc18 <uxr_buffer_delete_entity>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	6920      	ldr	r0, [r4, #16]
 800e2f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e2f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e2fa:	f001 fbbf 	bl	800fa7c <run_xrce_session>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	4628      	mov	r0, r5
 800e302:	bf14      	ite	ne
 800e304:	2400      	movne	r4, #0
 800e306:	2402      	moveq	r4, #2
 800e308:	f001 faa2 	bl	800f850 <rmw_uxrce_fini_client_memory>
 800e30c:	e7c5      	b.n	800e29a <rmw_destroy_client+0x12>
 800e30e:	bf00      	nop

0800e310 <rmw_get_implementation_identifier>:
 800e310:	4b01      	ldr	r3, [pc, #4]	@ (800e318 <rmw_get_implementation_identifier+0x8>)
 800e312:	6818      	ldr	r0, [r3, #0]
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	08016b68 	.word	0x08016b68

0800e31c <rmw_init_options_init>:
 800e31c:	b084      	sub	sp, #16
 800e31e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e320:	b083      	sub	sp, #12
 800e322:	ad09      	add	r5, sp, #36	@ 0x24
 800e324:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e328:	b130      	cbz	r0, 800e338 <rmw_init_options_init+0x1c>
 800e32a:	4604      	mov	r4, r0
 800e32c:	4628      	mov	r0, r5
 800e32e:	f7fb fb51 	bl	80099d4 <rcutils_allocator_is_valid>
 800e332:	b108      	cbz	r0, 800e338 <rmw_init_options_init+0x1c>
 800e334:	68a6      	ldr	r6, [r4, #8]
 800e336:	b12e      	cbz	r6, 800e344 <rmw_init_options_init+0x28>
 800e338:	200b      	movs	r0, #11
 800e33a:	b003      	add	sp, #12
 800e33c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e340:	b004      	add	sp, #16
 800e342:	4770      	bx	lr
 800e344:	2200      	movs	r2, #0
 800e346:	2300      	movs	r3, #0
 800e348:	e9c4 2300 	strd	r2, r3, [r4]
 800e34c:	4b20      	ldr	r3, [pc, #128]	@ (800e3d0 <rmw_init_options_init+0xb4>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	60a3      	str	r3, [r4, #8]
 800e352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e354:	f104 0c20 	add.w	ip, r4, #32
 800e358:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e35c:	466f      	mov	r7, sp
 800e35e:	682b      	ldr	r3, [r5, #0]
 800e360:	f8cc 3000 	str.w	r3, [ip]
 800e364:	4638      	mov	r0, r7
 800e366:	61e6      	str	r6, [r4, #28]
 800e368:	60e6      	str	r6, [r4, #12]
 800e36a:	f7ff fe21 	bl	800dfb0 <rmw_get_default_security_options>
 800e36e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e372:	f104 0310 	add.w	r3, r4, #16
 800e376:	e883 0003 	stmia.w	r3, {r0, r1}
 800e37a:	2203      	movs	r2, #3
 800e37c:	4815      	ldr	r0, [pc, #84]	@ (800e3d4 <rmw_init_options_init+0xb8>)
 800e37e:	4916      	ldr	r1, [pc, #88]	@ (800e3d8 <rmw_init_options_init+0xbc>)
 800e380:	7626      	strb	r6, [r4, #24]
 800e382:	f001 f9a5 	bl	800f6d0 <rmw_uxrce_init_init_options_impl_memory>
 800e386:	4813      	ldr	r0, [pc, #76]	@ (800e3d4 <rmw_init_options_init+0xb8>)
 800e388:	f005 fb5e 	bl	8013a48 <get_memory>
 800e38c:	b1f0      	cbz	r0, 800e3cc <rmw_init_options_init+0xb0>
 800e38e:	4a13      	ldr	r2, [pc, #76]	@ (800e3dc <rmw_init_options_init+0xc0>)
 800e390:	6883      	ldr	r3, [r0, #8]
 800e392:	6851      	ldr	r1, [r2, #4]
 800e394:	7810      	ldrb	r0, [r2, #0]
 800e396:	6363      	str	r3, [r4, #52]	@ 0x34
 800e398:	7418      	strb	r0, [r3, #16]
 800e39a:	6159      	str	r1, [r3, #20]
 800e39c:	68d1      	ldr	r1, [r2, #12]
 800e39e:	61d9      	str	r1, [r3, #28]
 800e3a0:	6911      	ldr	r1, [r2, #16]
 800e3a2:	6219      	str	r1, [r3, #32]
 800e3a4:	6951      	ldr	r1, [r2, #20]
 800e3a6:	6892      	ldr	r2, [r2, #8]
 800e3a8:	619a      	str	r2, [r3, #24]
 800e3aa:	6259      	str	r1, [r3, #36]	@ 0x24
 800e3ac:	f003 fe6e 	bl	801208c <uxr_nanos>
 800e3b0:	f006 fc1c 	bl	8014bec <srand>
 800e3b4:	f006 fc48 	bl	8014c48 <rand>
 800e3b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e3ba:	6298      	str	r0, [r3, #40]	@ 0x28
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d0f9      	beq.n	800e3b4 <rmw_init_options_init+0x98>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	b003      	add	sp, #12
 800e3c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3c8:	b004      	add	sp, #16
 800e3ca:	4770      	bx	lr
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	e7b4      	b.n	800e33a <rmw_init_options_init+0x1e>
 800e3d0:	08016b68 	.word	0x08016b68
 800e3d4:	2000dd0c 	.word	0x2000dd0c
 800e3d8:	200095a8 	.word	0x200095a8
 800e3dc:	20009364 	.word	0x20009364

0800e3e0 <rmw_init_options_copy>:
 800e3e0:	b570      	push	{r4, r5, r6, lr}
 800e3e2:	b088      	sub	sp, #32
 800e3e4:	b160      	cbz	r0, 800e400 <rmw_init_options_copy+0x20>
 800e3e6:	460d      	mov	r5, r1
 800e3e8:	b151      	cbz	r1, 800e400 <rmw_init_options_copy+0x20>
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	6880      	ldr	r0, [r0, #8]
 800e3ee:	b128      	cbz	r0, 800e3fc <rmw_init_options_copy+0x1c>
 800e3f0:	4b33      	ldr	r3, [pc, #204]	@ (800e4c0 <rmw_init_options_copy+0xe0>)
 800e3f2:	6819      	ldr	r1, [r3, #0]
 800e3f4:	f7f1 fef4 	bl	80001e0 <strcmp>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d154      	bne.n	800e4a6 <rmw_init_options_copy+0xc6>
 800e3fc:	68ab      	ldr	r3, [r5, #8]
 800e3fe:	b11b      	cbz	r3, 800e408 <rmw_init_options_copy+0x28>
 800e400:	240b      	movs	r4, #11
 800e402:	4620      	mov	r0, r4
 800e404:	b008      	add	sp, #32
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	4623      	mov	r3, r4
 800e40a:	462a      	mov	r2, r5
 800e40c:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e410:	f8d3 c000 	ldr.w	ip, [r3]
 800e414:	6858      	ldr	r0, [r3, #4]
 800e416:	6899      	ldr	r1, [r3, #8]
 800e418:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e41c:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e420:	3310      	adds	r3, #16
 800e422:	42b3      	cmp	r3, r6
 800e424:	f8c2 c000 	str.w	ip, [r2]
 800e428:	6050      	str	r0, [r2, #4]
 800e42a:	6091      	str	r1, [r2, #8]
 800e42c:	f102 0210 	add.w	r2, r2, #16
 800e430:	d1ee      	bne.n	800e410 <rmw_init_options_copy+0x30>
 800e432:	6819      	ldr	r1, [r3, #0]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	6053      	str	r3, [r2, #4]
 800e438:	6011      	str	r1, [r2, #0]
 800e43a:	f104 0e20 	add.w	lr, r4, #32
 800e43e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e442:	f10d 0c0c 	add.w	ip, sp, #12
 800e446:	4666      	mov	r6, ip
 800e448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e44c:	f8de 3000 	ldr.w	r3, [lr]
 800e450:	f8cc 3000 	str.w	r3, [ip]
 800e454:	4630      	mov	r0, r6
 800e456:	f7fb fabd 	bl	80099d4 <rcutils_allocator_is_valid>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d0d0      	beq.n	800e400 <rmw_init_options_copy+0x20>
 800e45e:	ab08      	add	r3, sp, #32
 800e460:	e913 0003 	ldmdb	r3, {r0, r1}
 800e464:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e468:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e46c:	69e0      	ldr	r0, [r4, #28]
 800e46e:	f7ff fc15 	bl	800dc9c <rcutils_strdup>
 800e472:	61e8      	str	r0, [r5, #28]
 800e474:	69e3      	ldr	r3, [r4, #28]
 800e476:	b103      	cbz	r3, 800e47a <rmw_init_options_copy+0x9a>
 800e478:	b1f8      	cbz	r0, 800e4ba <rmw_init_options_copy+0xda>
 800e47a:	4812      	ldr	r0, [pc, #72]	@ (800e4c4 <rmw_init_options_copy+0xe4>)
 800e47c:	f005 fae4 	bl	8013a48 <get_memory>
 800e480:	b1a8      	cbz	r0, 800e4ae <rmw_init_options_copy+0xce>
 800e482:	6883      	ldr	r3, [r0, #8]
 800e484:	636b      	str	r3, [r5, #52]	@ 0x34
 800e486:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e488:	f102 0c10 	add.w	ip, r2, #16
 800e48c:	f103 0510 	add.w	r5, r3, #16
 800e490:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e496:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e49a:	2400      	movs	r4, #0
 800e49c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	b008      	add	sp, #32
 800e4a4:	bd70      	pop	{r4, r5, r6, pc}
 800e4a6:	240c      	movs	r4, #12
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	b008      	add	sp, #32
 800e4ac:	bd70      	pop	{r4, r5, r6, pc}
 800e4ae:	9b04      	ldr	r3, [sp, #16]
 800e4b0:	9907      	ldr	r1, [sp, #28]
 800e4b2:	69e8      	ldr	r0, [r5, #28]
 800e4b4:	4798      	blx	r3
 800e4b6:	2401      	movs	r4, #1
 800e4b8:	e7a3      	b.n	800e402 <rmw_init_options_copy+0x22>
 800e4ba:	240a      	movs	r4, #10
 800e4bc:	e7a1      	b.n	800e402 <rmw_init_options_copy+0x22>
 800e4be:	bf00      	nop
 800e4c0:	08016b68 	.word	0x08016b68
 800e4c4:	2000dd0c 	.word	0x2000dd0c

0800e4c8 <rmw_init_options_fini>:
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	d041      	beq.n	800e550 <rmw_init_options_fini+0x88>
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	b08e      	sub	sp, #56	@ 0x38
 800e4d2:	3020      	adds	r0, #32
 800e4d4:	f7fb fa7e 	bl	80099d4 <rcutils_allocator_is_valid>
 800e4d8:	b380      	cbz	r0, 800e53c <rmw_init_options_fini+0x74>
 800e4da:	68a0      	ldr	r0, [r4, #8]
 800e4dc:	b120      	cbz	r0, 800e4e8 <rmw_init_options_fini+0x20>
 800e4de:	4b1e      	ldr	r3, [pc, #120]	@ (800e558 <rmw_init_options_fini+0x90>)
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	f7f1 fe7d 	bl	80001e0 <strcmp>
 800e4e6:	bb88      	cbnz	r0, 800e54c <rmw_init_options_fini+0x84>
 800e4e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e55c <rmw_init_options_fini+0x94>)
 800e4ea:	6819      	ldr	r1, [r3, #0]
 800e4ec:	b351      	cbz	r1, 800e544 <rmw_init_options_fini+0x7c>
 800e4ee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e4f0:	e001      	b.n	800e4f6 <rmw_init_options_fini+0x2e>
 800e4f2:	6849      	ldr	r1, [r1, #4]
 800e4f4:	b331      	cbz	r1, 800e544 <rmw_init_options_fini+0x7c>
 800e4f6:	688b      	ldr	r3, [r1, #8]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d1fa      	bne.n	800e4f2 <rmw_init_options_fini+0x2a>
 800e4fc:	4817      	ldr	r0, [pc, #92]	@ (800e55c <rmw_init_options_fini+0x94>)
 800e4fe:	f005 fab3 	bl	8013a68 <put_memory>
 800e502:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e504:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e506:	69e0      	ldr	r0, [r4, #28]
 800e508:	4798      	blx	r3
 800e50a:	4668      	mov	r0, sp
 800e50c:	f7ff fd40 	bl	800df90 <rmw_get_zero_initialized_init_options>
 800e510:	46ee      	mov	lr, sp
 800e512:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e516:	46a4      	mov	ip, r4
 800e518:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e51c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e524:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e52c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e530:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e534:	2300      	movs	r3, #0
 800e536:	4618      	mov	r0, r3
 800e538:	b00e      	add	sp, #56	@ 0x38
 800e53a:	bd10      	pop	{r4, pc}
 800e53c:	230b      	movs	r3, #11
 800e53e:	4618      	mov	r0, r3
 800e540:	b00e      	add	sp, #56	@ 0x38
 800e542:	bd10      	pop	{r4, pc}
 800e544:	2301      	movs	r3, #1
 800e546:	4618      	mov	r0, r3
 800e548:	b00e      	add	sp, #56	@ 0x38
 800e54a:	bd10      	pop	{r4, pc}
 800e54c:	230c      	movs	r3, #12
 800e54e:	e7f2      	b.n	800e536 <rmw_init_options_fini+0x6e>
 800e550:	230b      	movs	r3, #11
 800e552:	4618      	mov	r0, r3
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	08016b68 	.word	0x08016b68
 800e55c:	2000dd0c 	.word	0x2000dd0c

0800e560 <rmw_init>:
 800e560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e564:	b083      	sub	sp, #12
 800e566:	2800      	cmp	r0, #0
 800e568:	f000 80d3 	beq.w	800e712 <rmw_init+0x1b2>
 800e56c:	460e      	mov	r6, r1
 800e56e:	2900      	cmp	r1, #0
 800e570:	f000 80cf 	beq.w	800e712 <rmw_init+0x1b2>
 800e574:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e576:	4605      	mov	r5, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 80ca 	beq.w	800e712 <rmw_init+0x1b2>
 800e57e:	4b78      	ldr	r3, [pc, #480]	@ (800e760 <rmw_init+0x200>)
 800e580:	6880      	ldr	r0, [r0, #8]
 800e582:	681f      	ldr	r7, [r3, #0]
 800e584:	b128      	cbz	r0, 800e592 <rmw_init+0x32>
 800e586:	4639      	mov	r1, r7
 800e588:	f7f1 fe2a 	bl	80001e0 <strcmp>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	f040 80ca 	bne.w	800e726 <rmw_init+0x1c6>
 800e592:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e596:	4c73      	ldr	r4, [pc, #460]	@ (800e764 <rmw_init+0x204>)
 800e598:	4973      	ldr	r1, [pc, #460]	@ (800e768 <rmw_init+0x208>)
 800e59a:	4874      	ldr	r0, [pc, #464]	@ (800e76c <rmw_init+0x20c>)
 800e59c:	60b7      	str	r7, [r6, #8]
 800e59e:	e9c6 2300 	strd	r2, r3, [r6]
 800e5a2:	68eb      	ldr	r3, [r5, #12]
 800e5a4:	64b3      	str	r3, [r6, #72]	@ 0x48
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f001 f832 	bl	800f610 <rmw_uxrce_init_session_memory>
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	4970      	ldr	r1, [pc, #448]	@ (800e770 <rmw_init+0x210>)
 800e5b0:	2204      	movs	r2, #4
 800e5b2:	f001 f86d 	bl	800f690 <rmw_uxrce_init_static_input_buffer_memory>
 800e5b6:	f04f 0800 	mov.w	r8, #0
 800e5ba:	486c      	ldr	r0, [pc, #432]	@ (800e76c <rmw_init+0x20c>)
 800e5bc:	f884 800d 	strb.w	r8, [r4, #13]
 800e5c0:	f005 fa42 	bl	8013a48 <get_memory>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	f000 80a9 	beq.w	800e71c <rmw_init+0x1bc>
 800e5ca:	6884      	ldr	r4, [r0, #8]
 800e5cc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800e5ce:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e5d0:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e5d4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e5d8:	9101      	str	r1, [sp, #4]
 800e5da:	6a00      	ldr	r0, [r0, #32]
 800e5dc:	9000      	str	r0, [sp, #0]
 800e5de:	f104 0910 	add.w	r9, r4, #16
 800e5e2:	4661      	mov	r1, ip
 800e5e4:	4648      	mov	r0, r9
 800e5e6:	f001 fcef 	bl	800ffc8 <uxr_set_custom_transport_callbacks>
 800e5ea:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e5ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e5f2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e5f6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e5fa:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e5fe:	495d      	ldr	r1, [pc, #372]	@ (800e774 <rmw_init+0x214>)
 800e600:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e604:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e608:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e60c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e610:	4859      	ldr	r0, [pc, #356]	@ (800e778 <rmw_init+0x218>)
 800e612:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e616:	2201      	movs	r2, #1
 800e618:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e61a:	f000 ffd9 	bl	800f5d0 <rmw_uxrce_init_node_memory>
 800e61e:	4957      	ldr	r1, [pc, #348]	@ (800e77c <rmw_init+0x21c>)
 800e620:	4857      	ldr	r0, [pc, #348]	@ (800e780 <rmw_init+0x220>)
 800e622:	2205      	movs	r2, #5
 800e624:	f000 ffb4 	bl	800f590 <rmw_uxrce_init_subscription_memory>
 800e628:	4956      	ldr	r1, [pc, #344]	@ (800e784 <rmw_init+0x224>)
 800e62a:	4857      	ldr	r0, [pc, #348]	@ (800e788 <rmw_init+0x228>)
 800e62c:	220a      	movs	r2, #10
 800e62e:	f000 ff8f 	bl	800f550 <rmw_uxrce_init_publisher_memory>
 800e632:	4956      	ldr	r1, [pc, #344]	@ (800e78c <rmw_init+0x22c>)
 800e634:	4856      	ldr	r0, [pc, #344]	@ (800e790 <rmw_init+0x230>)
 800e636:	2201      	movs	r2, #1
 800e638:	f000 ff4a 	bl	800f4d0 <rmw_uxrce_init_service_memory>
 800e63c:	4955      	ldr	r1, [pc, #340]	@ (800e794 <rmw_init+0x234>)
 800e63e:	4856      	ldr	r0, [pc, #344]	@ (800e798 <rmw_init+0x238>)
 800e640:	2201      	movs	r2, #1
 800e642:	f000 ff65 	bl	800f510 <rmw_uxrce_init_client_memory>
 800e646:	4955      	ldr	r1, [pc, #340]	@ (800e79c <rmw_init+0x23c>)
 800e648:	4855      	ldr	r0, [pc, #340]	@ (800e7a0 <rmw_init+0x240>)
 800e64a:	220f      	movs	r2, #15
 800e64c:	f001 f800 	bl	800f650 <rmw_uxrce_init_topic_memory>
 800e650:	4954      	ldr	r1, [pc, #336]	@ (800e7a4 <rmw_init+0x244>)
 800e652:	4855      	ldr	r0, [pc, #340]	@ (800e7a8 <rmw_init+0x248>)
 800e654:	2203      	movs	r2, #3
 800e656:	f001 f83b 	bl	800f6d0 <rmw_uxrce_init_init_options_impl_memory>
 800e65a:	4954      	ldr	r1, [pc, #336]	@ (800e7ac <rmw_init+0x24c>)
 800e65c:	4854      	ldr	r0, [pc, #336]	@ (800e7b0 <rmw_init+0x250>)
 800e65e:	2204      	movs	r2, #4
 800e660:	f001 f856 	bl	800f710 <rmw_uxrce_init_wait_set_memory>
 800e664:	4953      	ldr	r1, [pc, #332]	@ (800e7b4 <rmw_init+0x254>)
 800e666:	4854      	ldr	r0, [pc, #336]	@ (800e7b8 <rmw_init+0x258>)
 800e668:	2204      	movs	r2, #4
 800e66a:	f001 f871 	bl	800f750 <rmw_uxrce_init_guard_condition_memory>
 800e66e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e670:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e672:	4642      	mov	r2, r8
 800e674:	f000 fd7e 	bl	800f174 <rmw_uxrce_transport_init>
 800e678:	4607      	mov	r7, r0
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d158      	bne.n	800e730 <rmw_init+0x1d0>
 800e67e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e680:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e686:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e68a:	4628      	mov	r0, r5
 800e68c:	f001 fed0 	bl	8010430 <uxr_init_session>
 800e690:	494a      	ldr	r1, [pc, #296]	@ (800e7bc <rmw_init+0x25c>)
 800e692:	4622      	mov	r2, r4
 800e694:	4628      	mov	r0, r5
 800e696:	f001 feef 	bl	8010478 <uxr_set_topic_callback>
 800e69a:	4949      	ldr	r1, [pc, #292]	@ (800e7c0 <rmw_init+0x260>)
 800e69c:	463a      	mov	r2, r7
 800e69e:	4628      	mov	r0, r5
 800e6a0:	f001 fee6 	bl	8010470 <uxr_set_status_callback>
 800e6a4:	4947      	ldr	r1, [pc, #284]	@ (800e7c4 <rmw_init+0x264>)
 800e6a6:	463a      	mov	r2, r7
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f001 fee9 	bl	8010480 <uxr_set_request_callback>
 800e6ae:	4946      	ldr	r1, [pc, #280]	@ (800e7c8 <rmw_init+0x268>)
 800e6b0:	463a      	mov	r2, r7
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f001 fee8 	bl	8010488 <uxr_set_reply_callback>
 800e6b8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e6bc:	2304      	movs	r3, #4
 800e6be:	0092      	lsls	r2, r2, #2
 800e6c0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f001 ff1d 	bl	8010504 <uxr_create_input_reliable_stream>
 800e6ca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e6ce:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e6d2:	0092      	lsls	r2, r2, #2
 800e6d4:	2304      	movs	r3, #4
 800e6d6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e6da:	4628      	mov	r0, r5
 800e6dc:	f001 feea 	bl	80104b4 <uxr_create_output_reliable_stream>
 800e6e0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f001 ff07 	bl	80104f8 <uxr_create_input_best_effort_stream>
 800e6ea:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e6ee:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e6f2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e6f6:	3114      	adds	r1, #20
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f001 fec9 	bl	8010490 <uxr_create_output_best_effort_stream>
 800e6fe:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e702:	4628      	mov	r0, r5
 800e704:	f002 fc54 	bl	8010fb0 <uxr_create_session>
 800e708:	b1f8      	cbz	r0, 800e74a <rmw_init+0x1ea>
 800e70a:	4638      	mov	r0, r7
 800e70c:	b003      	add	sp, #12
 800e70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e712:	270b      	movs	r7, #11
 800e714:	4638      	mov	r0, r7
 800e716:	b003      	add	sp, #12
 800e718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e71c:	2701      	movs	r7, #1
 800e71e:	4638      	mov	r0, r7
 800e720:	b003      	add	sp, #12
 800e722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e726:	270c      	movs	r7, #12
 800e728:	4638      	mov	r0, r7
 800e72a:	b003      	add	sp, #12
 800e72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e730:	4648      	mov	r0, r9
 800e732:	f001 fc8b 	bl	801004c <uxr_close_custom_transport>
 800e736:	480d      	ldr	r0, [pc, #52]	@ (800e76c <rmw_init+0x20c>)
 800e738:	4621      	mov	r1, r4
 800e73a:	f005 f995 	bl	8013a68 <put_memory>
 800e73e:	4638      	mov	r0, r7
 800e740:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e744:	b003      	add	sp, #12
 800e746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e74a:	4648      	mov	r0, r9
 800e74c:	f001 fc7e 	bl	801004c <uxr_close_custom_transport>
 800e750:	4806      	ldr	r0, [pc, #24]	@ (800e76c <rmw_init+0x20c>)
 800e752:	4621      	mov	r1, r4
 800e754:	f005 f988 	bl	8013a68 <put_memory>
 800e758:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e75a:	2701      	movs	r7, #1
 800e75c:	e7d5      	b.n	800e70a <rmw_init+0x1aa>
 800e75e:	bf00      	nop
 800e760:	08016b68 	.word	0x08016b68
 800e764:	2000dd5c 	.word	0x2000dd5c
 800e768:	2000a008 	.word	0x2000a008
 800e76c:	2000dd4c 	.word	0x2000dd4c
 800e770:	2000b5b0 	.word	0x2000b5b0
 800e774:	2000962c 	.word	0x2000962c
 800e778:	2000dd1c 	.word	0x2000dd1c
 800e77c:	2000d6b0 	.word	0x2000d6b0
 800e780:	2000dd6c 	.word	0x2000dd6c
 800e784:	200096d0 	.word	0x200096d0
 800e788:	2000dd2c 	.word	0x2000dd2c
 800e78c:	20009f40 	.word	0x20009f40
 800e790:	2000dd3c 	.word	0x2000dd3c
 800e794:	20009460 	.word	0x20009460
 800e798:	20009450 	.word	0x20009450
 800e79c:	2000dae8 	.word	0x2000dae8
 800e7a0:	2000dd7c 	.word	0x2000dd7c
 800e7a4:	200095a8 	.word	0x200095a8
 800e7a8:	2000dd0c 	.word	0x2000dd0c
 800e7ac:	2000dc8c 	.word	0x2000dc8c
 800e7b0:	2000dd8c 	.word	0x2000dd8c
 800e7b4:	20009528 	.word	0x20009528
 800e7b8:	2000dcfc 	.word	0x2000dcfc
 800e7bc:	08013881 	.word	0x08013881
 800e7c0:	08013879 	.word	0x08013879
 800e7c4:	08013919 	.word	0x08013919
 800e7c8:	080139b5 	.word	0x080139b5

0800e7cc <rmw_context_fini>:
 800e7cc:	4b17      	ldr	r3, [pc, #92]	@ (800e82c <rmw_context_fini+0x60>)
 800e7ce:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	681c      	ldr	r4, [r3, #0]
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	b334      	cbz	r4, 800e826 <rmw_context_fini+0x5a>
 800e7d8:	2600      	movs	r6, #0
 800e7da:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e7de:	6902      	ldr	r2, [r0, #16]
 800e7e0:	428a      	cmp	r2, r1
 800e7e2:	d018      	beq.n	800e816 <rmw_context_fini+0x4a>
 800e7e4:	2c00      	cmp	r4, #0
 800e7e6:	d1f8      	bne.n	800e7da <rmw_context_fini+0xe>
 800e7e8:	b189      	cbz	r1, 800e80e <rmw_context_fini+0x42>
 800e7ea:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e7ee:	789b      	ldrb	r3, [r3, #2]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e7f6:	bf14      	ite	ne
 800e7f8:	210a      	movne	r1, #10
 800e7fa:	2100      	moveq	r1, #0
 800e7fc:	f002 fbb0 	bl	8010f60 <uxr_delete_session_retries>
 800e800:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e802:	f000 ffc5 	bl	800f790 <rmw_uxrce_fini_session_memory>
 800e806:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e808:	3010      	adds	r0, #16
 800e80a:	f001 fc1f 	bl	801004c <uxr_close_custom_transport>
 800e80e:	2300      	movs	r3, #0
 800e810:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e812:	4630      	mov	r0, r6
 800e814:	bd70      	pop	{r4, r5, r6, pc}
 800e816:	3018      	adds	r0, #24
 800e818:	f000 f89c 	bl	800e954 <rmw_destroy_node>
 800e81c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e81e:	4606      	mov	r6, r0
 800e820:	2c00      	cmp	r4, #0
 800e822:	d1da      	bne.n	800e7da <rmw_context_fini+0xe>
 800e824:	e7e0      	b.n	800e7e8 <rmw_context_fini+0x1c>
 800e826:	4626      	mov	r6, r4
 800e828:	e7de      	b.n	800e7e8 <rmw_context_fini+0x1c>
 800e82a:	bf00      	nop
 800e82c:	2000dd1c 	.word	0x2000dd1c

0800e830 <create_node>:
 800e830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e834:	b083      	sub	sp, #12
 800e836:	2b00      	cmp	r3, #0
 800e838:	d05f      	beq.n	800e8fa <create_node+0xca>
 800e83a:	4606      	mov	r6, r0
 800e83c:	4835      	ldr	r0, [pc, #212]	@ (800e914 <create_node+0xe4>)
 800e83e:	460f      	mov	r7, r1
 800e840:	4690      	mov	r8, r2
 800e842:	461d      	mov	r5, r3
 800e844:	f005 f900 	bl	8013a48 <get_memory>
 800e848:	2800      	cmp	r0, #0
 800e84a:	d056      	beq.n	800e8fa <create_node+0xca>
 800e84c:	6884      	ldr	r4, [r0, #8]
 800e84e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e850:	6123      	str	r3, [r4, #16]
 800e852:	f7ff fd5d 	bl	800e310 <rmw_get_implementation_identifier>
 800e856:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e85a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e85e:	f8c4 9020 	str.w	r9, [r4, #32]
 800e862:	4630      	mov	r0, r6
 800e864:	f7f1 fcc6 	bl	80001f4 <strlen>
 800e868:	1c42      	adds	r2, r0, #1
 800e86a:	2a3c      	cmp	r2, #60	@ 0x3c
 800e86c:	f104 0518 	add.w	r5, r4, #24
 800e870:	d840      	bhi.n	800e8f4 <create_node+0xc4>
 800e872:	4648      	mov	r0, r9
 800e874:	4631      	mov	r1, r6
 800e876:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e87a:	f006 fd36 	bl	80152ea <memcpy>
 800e87e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e882:	4638      	mov	r0, r7
 800e884:	f7f1 fcb6 	bl	80001f4 <strlen>
 800e888:	1c42      	adds	r2, r0, #1
 800e88a:	2a3c      	cmp	r2, #60	@ 0x3c
 800e88c:	d832      	bhi.n	800e8f4 <create_node+0xc4>
 800e88e:	4639      	mov	r1, r7
 800e890:	4648      	mov	r0, r9
 800e892:	f006 fd2a 	bl	80152ea <memcpy>
 800e896:	6923      	ldr	r3, [r4, #16]
 800e898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e89c:	2101      	movs	r1, #1
 800e89e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e8a2:	1842      	adds	r2, r0, r1
 800e8a4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e8a8:	f001 fbd4 	bl	8010054 <uxr_object_id>
 800e8ac:	6160      	str	r0, [r4, #20]
 800e8ae:	783b      	ldrb	r3, [r7, #0]
 800e8b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800e8b2:	d127      	bne.n	800e904 <create_node+0xd4>
 800e8b4:	787b      	ldrb	r3, [r7, #1]
 800e8b6:	bb2b      	cbnz	r3, 800e904 <create_node+0xd4>
 800e8b8:	4a17      	ldr	r2, [pc, #92]	@ (800e918 <create_node+0xe8>)
 800e8ba:	4818      	ldr	r0, [pc, #96]	@ (800e91c <create_node+0xec>)
 800e8bc:	4633      	mov	r3, r6
 800e8be:	213c      	movs	r1, #60	@ 0x3c
 800e8c0:	f006 fb70 	bl	8014fa4 <sniprintf>
 800e8c4:	6920      	ldr	r0, [r4, #16]
 800e8c6:	4915      	ldr	r1, [pc, #84]	@ (800e91c <create_node+0xec>)
 800e8c8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e8cc:	9100      	str	r1, [sp, #0]
 800e8ce:	2106      	movs	r1, #6
 800e8d0:	9101      	str	r1, [sp, #4]
 800e8d2:	6811      	ldr	r1, [r2, #0]
 800e8d4:	6962      	ldr	r2, [r4, #20]
 800e8d6:	fa1f f388 	uxth.w	r3, r8
 800e8da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8de:	f001 f9e7 	bl	800fcb0 <uxr_buffer_create_participant_bin>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	6920      	ldr	r0, [r4, #16]
 800e8e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e8ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e8ee:	f001 f8c5 	bl	800fa7c <run_xrce_session>
 800e8f2:	b918      	cbnz	r0, 800e8fc <create_node+0xcc>
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f000 ff51 	bl	800f79c <rmw_uxrce_fini_node_memory>
 800e8fa:	2500      	movs	r5, #0
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	b003      	add	sp, #12
 800e900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e904:	4a06      	ldr	r2, [pc, #24]	@ (800e920 <create_node+0xf0>)
 800e906:	9600      	str	r6, [sp, #0]
 800e908:	463b      	mov	r3, r7
 800e90a:	213c      	movs	r1, #60	@ 0x3c
 800e90c:	4803      	ldr	r0, [pc, #12]	@ (800e91c <create_node+0xec>)
 800e90e:	f006 fb49 	bl	8014fa4 <sniprintf>
 800e912:	e7d7      	b.n	800e8c4 <create_node+0x94>
 800e914:	2000dd1c 	.word	0x2000dd1c
 800e918:	080168ec 	.word	0x080168ec
 800e91c:	20009414 	.word	0x20009414
 800e920:	08016440 	.word	0x08016440

0800e924 <rmw_create_node>:
 800e924:	b199      	cbz	r1, 800e94e <rmw_create_node+0x2a>
 800e926:	780b      	ldrb	r3, [r1, #0]
 800e928:	468c      	mov	ip, r1
 800e92a:	b183      	cbz	r3, 800e94e <rmw_create_node+0x2a>
 800e92c:	b410      	push	{r4}
 800e92e:	4614      	mov	r4, r2
 800e930:	b14a      	cbz	r2, 800e946 <rmw_create_node+0x22>
 800e932:	7813      	ldrb	r3, [r2, #0]
 800e934:	b13b      	cbz	r3, 800e946 <rmw_create_node+0x22>
 800e936:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e938:	4603      	mov	r3, r0
 800e93a:	4621      	mov	r1, r4
 800e93c:	4660      	mov	r0, ip
 800e93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e942:	f7ff bf75 	b.w	800e830 <create_node>
 800e946:	2000      	movs	r0, #0
 800e948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	2000      	movs	r0, #0
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop

0800e954 <rmw_destroy_node>:
 800e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e956:	b328      	cbz	r0, 800e9a4 <rmw_destroy_node+0x50>
 800e958:	4607      	mov	r7, r0
 800e95a:	6800      	ldr	r0, [r0, #0]
 800e95c:	b120      	cbz	r0, 800e968 <rmw_destroy_node+0x14>
 800e95e:	4b36      	ldr	r3, [pc, #216]	@ (800ea38 <rmw_destroy_node+0xe4>)
 800e960:	6819      	ldr	r1, [r3, #0]
 800e962:	f7f1 fc3d 	bl	80001e0 <strcmp>
 800e966:	b9e8      	cbnz	r0, 800e9a4 <rmw_destroy_node+0x50>
 800e968:	687d      	ldr	r5, [r7, #4]
 800e96a:	b1dd      	cbz	r5, 800e9a4 <rmw_destroy_node+0x50>
 800e96c:	4b33      	ldr	r3, [pc, #204]	@ (800ea3c <rmw_destroy_node+0xe8>)
 800e96e:	681c      	ldr	r4, [r3, #0]
 800e970:	2c00      	cmp	r4, #0
 800e972:	d05f      	beq.n	800ea34 <rmw_destroy_node+0xe0>
 800e974:	2600      	movs	r6, #0
 800e976:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e97a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e97e:	429d      	cmp	r5, r3
 800e980:	d013      	beq.n	800e9aa <rmw_destroy_node+0x56>
 800e982:	2c00      	cmp	r4, #0
 800e984:	d1f7      	bne.n	800e976 <rmw_destroy_node+0x22>
 800e986:	4b2e      	ldr	r3, [pc, #184]	@ (800ea40 <rmw_destroy_node+0xec>)
 800e988:	681c      	ldr	r4, [r3, #0]
 800e98a:	b1c4      	cbz	r4, 800e9be <rmw_destroy_node+0x6a>
 800e98c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e990:	6a0b      	ldr	r3, [r1, #32]
 800e992:	429d      	cmp	r5, r3
 800e994:	d1f9      	bne.n	800e98a <rmw_destroy_node+0x36>
 800e996:	317c      	adds	r1, #124	@ 0x7c
 800e998:	4638      	mov	r0, r7
 800e99a:	f000 fb37 	bl	800f00c <rmw_destroy_subscription>
 800e99e:	2801      	cmp	r0, #1
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	d1f2      	bne.n	800e98a <rmw_destroy_node+0x36>
 800e9a4:	2601      	movs	r6, #1
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9aa:	3184      	adds	r1, #132	@ 0x84
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	f000 f853 	bl	800ea58 <rmw_destroy_publisher>
 800e9b2:	2801      	cmp	r0, #1
 800e9b4:	4606      	mov	r6, r0
 800e9b6:	d0f5      	beq.n	800e9a4 <rmw_destroy_node+0x50>
 800e9b8:	2c00      	cmp	r4, #0
 800e9ba:	d1dc      	bne.n	800e976 <rmw_destroy_node+0x22>
 800e9bc:	e7e3      	b.n	800e986 <rmw_destroy_node+0x32>
 800e9be:	4b21      	ldr	r3, [pc, #132]	@ (800ea44 <rmw_destroy_node+0xf0>)
 800e9c0:	681c      	ldr	r4, [r3, #0]
 800e9c2:	b16c      	cbz	r4, 800e9e0 <rmw_destroy_node+0x8c>
 800e9c4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e9c8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	d1f9      	bne.n	800e9c2 <rmw_destroy_node+0x6e>
 800e9ce:	317c      	adds	r1, #124	@ 0x7c
 800e9d0:	4638      	mov	r0, r7
 800e9d2:	f000 f9e5 	bl	800eda0 <rmw_destroy_service>
 800e9d6:	2801      	cmp	r0, #1
 800e9d8:	4606      	mov	r6, r0
 800e9da:	d0e3      	beq.n	800e9a4 <rmw_destroy_node+0x50>
 800e9dc:	2c00      	cmp	r4, #0
 800e9de:	d1f1      	bne.n	800e9c4 <rmw_destroy_node+0x70>
 800e9e0:	4b19      	ldr	r3, [pc, #100]	@ (800ea48 <rmw_destroy_node+0xf4>)
 800e9e2:	681c      	ldr	r4, [r3, #0]
 800e9e4:	b16c      	cbz	r4, 800ea02 <rmw_destroy_node+0xae>
 800e9e6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e9ea:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e9ec:	429d      	cmp	r5, r3
 800e9ee:	d1f9      	bne.n	800e9e4 <rmw_destroy_node+0x90>
 800e9f0:	317c      	adds	r1, #124	@ 0x7c
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	f7ff fc48 	bl	800e288 <rmw_destroy_client>
 800e9f8:	2801      	cmp	r0, #1
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	d0d2      	beq.n	800e9a4 <rmw_destroy_node+0x50>
 800e9fe:	2c00      	cmp	r4, #0
 800ea00:	d1f1      	bne.n	800e9e6 <rmw_destroy_node+0x92>
 800ea02:	6928      	ldr	r0, [r5, #16]
 800ea04:	696a      	ldr	r2, [r5, #20]
 800ea06:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea0a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea0e:	6819      	ldr	r1, [r3, #0]
 800ea10:	f001 f902 	bl	800fc18 <uxr_buffer_delete_entity>
 800ea14:	4602      	mov	r2, r0
 800ea16:	6928      	ldr	r0, [r5, #16]
 800ea18:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ea1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ea20:	f001 f82c 	bl	800fa7c <run_xrce_session>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	bf08      	it	eq
 800ea28:	2602      	moveq	r6, #2
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	f000 feb6 	bl	800f79c <rmw_uxrce_fini_node_memory>
 800ea30:	4630      	mov	r0, r6
 800ea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea34:	4626      	mov	r6, r4
 800ea36:	e7a6      	b.n	800e986 <rmw_destroy_node+0x32>
 800ea38:	08016b68 	.word	0x08016b68
 800ea3c:	2000dd2c 	.word	0x2000dd2c
 800ea40:	2000dd6c 	.word	0x2000dd6c
 800ea44:	2000dd3c 	.word	0x2000dd3c
 800ea48:	20009450 	.word	0x20009450

0800ea4c <rmw_node_get_graph_guard_condition>:
 800ea4c:	6843      	ldr	r3, [r0, #4]
 800ea4e:	6918      	ldr	r0, [r3, #16]
 800ea50:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop

0800ea58 <rmw_destroy_publisher>:
 800ea58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea5a:	b128      	cbz	r0, 800ea68 <rmw_destroy_publisher+0x10>
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	6800      	ldr	r0, [r0, #0]
 800ea60:	460d      	mov	r5, r1
 800ea62:	f001 f88b 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800ea66:	b910      	cbnz	r0, 800ea6e <rmw_destroy_publisher+0x16>
 800ea68:	2401      	movs	r4, #1
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6e:	6863      	ldr	r3, [r4, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0f9      	beq.n	800ea68 <rmw_destroy_publisher+0x10>
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	d0f7      	beq.n	800ea68 <rmw_destroy_publisher+0x10>
 800ea78:	6828      	ldr	r0, [r5, #0]
 800ea7a:	f001 f87f 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d0f2      	beq.n	800ea68 <rmw_destroy_publisher+0x10>
 800ea82:	686c      	ldr	r4, [r5, #4]
 800ea84:	2c00      	cmp	r4, #0
 800ea86:	d0ef      	beq.n	800ea68 <rmw_destroy_publisher+0x10>
 800ea88:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ea8a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ea8e:	f005 f877 	bl	8013b80 <destroy_topic>
 800ea92:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ea96:	6962      	ldr	r2, [r4, #20]
 800ea98:	6918      	ldr	r0, [r3, #16]
 800ea9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	f001 f8b8 	bl	800fc18 <uxr_buffer_delete_entity>
 800eaa8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eaac:	6922      	ldr	r2, [r4, #16]
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800eab4:	4604      	mov	r4, r0
 800eab6:	6809      	ldr	r1, [r1, #0]
 800eab8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eabc:	f001 f8ac 	bl	800fc18 <uxr_buffer_delete_entity>
 800eac0:	693e      	ldr	r6, [r7, #16]
 800eac2:	4622      	mov	r2, r4
 800eac4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800eac8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800eacc:	4604      	mov	r4, r0
 800eace:	4630      	mov	r0, r6
 800ead0:	f000 ffd4 	bl	800fa7c <run_xrce_session>
 800ead4:	693e      	ldr	r6, [r7, #16]
 800ead6:	4622      	mov	r2, r4
 800ead8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800eadc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800eae0:	4604      	mov	r4, r0
 800eae2:	4630      	mov	r0, r6
 800eae4:	f000 ffca 	bl	800fa7c <run_xrce_session>
 800eae8:	b12c      	cbz	r4, 800eaf6 <rmw_destroy_publisher+0x9e>
 800eaea:	b120      	cbz	r0, 800eaf6 <rmw_destroy_publisher+0x9e>
 800eaec:	2400      	movs	r4, #0
 800eaee:	4628      	mov	r0, r5
 800eaf0:	f000 fe6c 	bl	800f7cc <rmw_uxrce_fini_publisher_memory>
 800eaf4:	e7b9      	b.n	800ea6a <rmw_destroy_publisher+0x12>
 800eaf6:	2402      	movs	r4, #2
 800eaf8:	e7f9      	b.n	800eaee <rmw_destroy_publisher+0x96>
 800eafa:	bf00      	nop

0800eafc <rmw_send_request>:
 800eafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb00:	4604      	mov	r4, r0
 800eb02:	6800      	ldr	r0, [r0, #0]
 800eb04:	b08b      	sub	sp, #44	@ 0x2c
 800eb06:	460e      	mov	r6, r1
 800eb08:	4615      	mov	r5, r2
 800eb0a:	b128      	cbz	r0, 800eb18 <rmw_send_request+0x1c>
 800eb0c:	4b21      	ldr	r3, [pc, #132]	@ (800eb94 <rmw_send_request+0x98>)
 800eb0e:	6819      	ldr	r1, [r3, #0]
 800eb10:	f7f1 fb66 	bl	80001e0 <strcmp>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d139      	bne.n	800eb8c <rmw_send_request+0x90>
 800eb18:	6864      	ldr	r4, [r4, #4]
 800eb1a:	6963      	ldr	r3, [r4, #20]
 800eb1c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	4798      	blx	r3
 800eb24:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800eb28:	4630      	mov	r0, r6
 800eb2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb2e:	4798      	blx	r3
 800eb30:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eb34:	9000      	str	r0, [sp, #0]
 800eb36:	6922      	ldr	r2, [r4, #16]
 800eb38:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800eb3a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eb3e:	ab02      	add	r3, sp, #8
 800eb40:	f003 faba 	bl	80120b8 <uxr_prepare_output_stream>
 800eb44:	2700      	movs	r7, #0
 800eb46:	6028      	str	r0, [r5, #0]
 800eb48:	606f      	str	r7, [r5, #4]
 800eb4a:	b198      	cbz	r0, 800eb74 <rmw_send_request+0x78>
 800eb4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800eb50:	a902      	add	r1, sp, #8
 800eb52:	4630      	mov	r0, r6
 800eb54:	4798      	blx	r3
 800eb56:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800eb5a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d00c      	beq.n	800eb7c <rmw_send_request+0x80>
 800eb62:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800eb64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb68:	f002 f8b2 	bl	8010cd0 <uxr_run_session_until_confirm_delivery>
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	b00b      	add	sp, #44	@ 0x2c
 800eb70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb74:	2001      	movs	r0, #1
 800eb76:	b00b      	add	sp, #44	@ 0x2c
 800eb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb80:	f001 fce6 	bl	8010550 <uxr_flash_output_streams>
 800eb84:	4638      	mov	r0, r7
 800eb86:	b00b      	add	sp, #44	@ 0x2c
 800eb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb8c:	200c      	movs	r0, #12
 800eb8e:	b00b      	add	sp, #44	@ 0x2c
 800eb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb94:	08016b68 	.word	0x08016b68

0800eb98 <rmw_take_request>:
 800eb98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb9c:	4605      	mov	r5, r0
 800eb9e:	6800      	ldr	r0, [r0, #0]
 800eba0:	b089      	sub	sp, #36	@ 0x24
 800eba2:	460c      	mov	r4, r1
 800eba4:	4690      	mov	r8, r2
 800eba6:	461e      	mov	r6, r3
 800eba8:	b128      	cbz	r0, 800ebb6 <rmw_take_request+0x1e>
 800ebaa:	4b28      	ldr	r3, [pc, #160]	@ (800ec4c <rmw_take_request+0xb4>)
 800ebac:	6819      	ldr	r1, [r3, #0]
 800ebae:	f7f1 fb17 	bl	80001e0 <strcmp>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d146      	bne.n	800ec44 <rmw_take_request+0xac>
 800ebb6:	b10e      	cbz	r6, 800ebbc <rmw_take_request+0x24>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	7033      	strb	r3, [r6, #0]
 800ebbc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800ebc0:	f000 fede 	bl	800f980 <rmw_uxrce_clean_expired_static_input_buffer>
 800ebc4:	4648      	mov	r0, r9
 800ebc6:	f000 feb5 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ebca:	4607      	mov	r7, r0
 800ebcc:	b3b0      	cbz	r0, 800ec3c <rmw_take_request+0xa4>
 800ebce:	6885      	ldr	r5, [r0, #8]
 800ebd0:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800ebd4:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800ebd8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ebdc:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800ebe0:	7423      	strb	r3, [r4, #16]
 800ebe2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800ebe6:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800ebea:	74e2      	strb	r2, [r4, #19]
 800ebec:	f8a4 3011 	strh.w	r3, [r4, #17]
 800ebf0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800ebf4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800ebf8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800ebfc:	61e1      	str	r1, [r4, #28]
 800ebfe:	6162      	str	r2, [r4, #20]
 800ec00:	61a3      	str	r3, [r4, #24]
 800ec02:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	4798      	blx	r3
 800ec0a:	6844      	ldr	r4, [r0, #4]
 800ec0c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800ec10:	f105 0110 	add.w	r1, r5, #16
 800ec14:	4668      	mov	r0, sp
 800ec16:	f7fc f9fd 	bl	800b014 <ucdr_init_buffer>
 800ec1a:	68e3      	ldr	r3, [r4, #12]
 800ec1c:	4641      	mov	r1, r8
 800ec1e:	4668      	mov	r0, sp
 800ec20:	4798      	blx	r3
 800ec22:	4639      	mov	r1, r7
 800ec24:	4604      	mov	r4, r0
 800ec26:	480a      	ldr	r0, [pc, #40]	@ (800ec50 <rmw_take_request+0xb8>)
 800ec28:	f004 ff1e 	bl	8013a68 <put_memory>
 800ec2c:	b106      	cbz	r6, 800ec30 <rmw_take_request+0x98>
 800ec2e:	7034      	strb	r4, [r6, #0]
 800ec30:	f084 0001 	eor.w	r0, r4, #1
 800ec34:	b2c0      	uxtb	r0, r0
 800ec36:	b009      	add	sp, #36	@ 0x24
 800ec38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec3c:	2001      	movs	r0, #1
 800ec3e:	b009      	add	sp, #36	@ 0x24
 800ec40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec44:	200c      	movs	r0, #12
 800ec46:	b009      	add	sp, #36	@ 0x24
 800ec48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec4c:	08016b68 	.word	0x08016b68
 800ec50:	2000dd5c 	.word	0x2000dd5c

0800ec54 <rmw_send_response>:
 800ec54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec56:	4605      	mov	r5, r0
 800ec58:	6800      	ldr	r0, [r0, #0]
 800ec5a:	b091      	sub	sp, #68	@ 0x44
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	4616      	mov	r6, r2
 800ec60:	b128      	cbz	r0, 800ec6e <rmw_send_response+0x1a>
 800ec62:	4b29      	ldr	r3, [pc, #164]	@ (800ed08 <rmw_send_response+0xb4>)
 800ec64:	6819      	ldr	r1, [r3, #0]
 800ec66:	f7f1 fabb 	bl	80001e0 <strcmp>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d141      	bne.n	800ecf2 <rmw_send_response+0x9e>
 800ec6e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ec72:	9306      	str	r3, [sp, #24]
 800ec74:	4623      	mov	r3, r4
 800ec76:	9207      	str	r2, [sp, #28]
 800ec78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec7c:	686d      	ldr	r5, [r5, #4]
 800ec7e:	789b      	ldrb	r3, [r3, #2]
 800ec80:	68a1      	ldr	r1, [r4, #8]
 800ec82:	f88d 2017 	strb.w	r2, [sp, #23]
 800ec86:	f88d 3016 	strb.w	r3, [sp, #22]
 800ec8a:	68e2      	ldr	r2, [r4, #12]
 800ec8c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800ec90:	6860      	ldr	r0, [r4, #4]
 800ec92:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec96:	ab02      	add	r3, sp, #8
 800ec98:	c307      	stmia	r3!, {r0, r1, r2}
 800ec9a:	696b      	ldr	r3, [r5, #20]
 800ec9c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	4798      	blx	r3
 800eca2:	6844      	ldr	r4, [r0, #4]
 800eca4:	4630      	mov	r0, r6
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	4798      	blx	r3
 800ecaa:	f100 0318 	add.w	r3, r0, #24
 800ecae:	6938      	ldr	r0, [r7, #16]
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	692a      	ldr	r2, [r5, #16]
 800ecb4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800ecb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecba:	ab08      	add	r3, sp, #32
 800ecbc:	f003 f9fc 	bl	80120b8 <uxr_prepare_output_stream>
 800ecc0:	b910      	cbnz	r0, 800ecc8 <rmw_send_response+0x74>
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	b011      	add	sp, #68	@ 0x44
 800ecc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc8:	a902      	add	r1, sp, #8
 800ecca:	a808      	add	r0, sp, #32
 800eccc:	f004 f986 	bl	8012fdc <uxr_serialize_SampleIdentity>
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	a908      	add	r1, sp, #32
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	4798      	blx	r3
 800ecd8:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800ecdc:	6938      	ldr	r0, [r7, #16]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d00a      	beq.n	800ecf8 <rmw_send_response+0xa4>
 800ece2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ece4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ece8:	f001 fff2 	bl	8010cd0 <uxr_run_session_until_confirm_delivery>
 800ecec:	2000      	movs	r0, #0
 800ecee:	b011      	add	sp, #68	@ 0x44
 800ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf2:	200c      	movs	r0, #12
 800ecf4:	b011      	add	sp, #68	@ 0x44
 800ecf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecfc:	f001 fc28 	bl	8010550 <uxr_flash_output_streams>
 800ed00:	2000      	movs	r0, #0
 800ed02:	b011      	add	sp, #68	@ 0x44
 800ed04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed06:	bf00      	nop
 800ed08:	08016b68 	.word	0x08016b68

0800ed0c <rmw_take_response>:
 800ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed10:	4604      	mov	r4, r0
 800ed12:	6800      	ldr	r0, [r0, #0]
 800ed14:	b088      	sub	sp, #32
 800ed16:	4688      	mov	r8, r1
 800ed18:	4617      	mov	r7, r2
 800ed1a:	461d      	mov	r5, r3
 800ed1c:	b120      	cbz	r0, 800ed28 <rmw_take_response+0x1c>
 800ed1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ed98 <rmw_take_response+0x8c>)
 800ed20:	6819      	ldr	r1, [r3, #0]
 800ed22:	f7f1 fa5d 	bl	80001e0 <strcmp>
 800ed26:	bb78      	cbnz	r0, 800ed88 <rmw_take_response+0x7c>
 800ed28:	b10d      	cbz	r5, 800ed2e <rmw_take_response+0x22>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	702b      	strb	r3, [r5, #0]
 800ed2e:	6864      	ldr	r4, [r4, #4]
 800ed30:	f000 fe26 	bl	800f980 <rmw_uxrce_clean_expired_static_input_buffer>
 800ed34:	4620      	mov	r0, r4
 800ed36:	f000 fdfd 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ed3a:	4606      	mov	r6, r0
 800ed3c:	b340      	cbz	r0, 800ed90 <rmw_take_response+0x84>
 800ed3e:	6963      	ldr	r3, [r4, #20]
 800ed40:	6884      	ldr	r4, [r0, #8]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800ed48:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800ed4c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800ed50:	4798      	blx	r3
 800ed52:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ed56:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800ed5a:	f104 0110 	add.w	r1, r4, #16
 800ed5e:	4668      	mov	r0, sp
 800ed60:	f7fc f958 	bl	800b014 <ucdr_init_buffer>
 800ed64:	4639      	mov	r1, r7
 800ed66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed6a:	4668      	mov	r0, sp
 800ed6c:	4798      	blx	r3
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4604      	mov	r4, r0
 800ed72:	480a      	ldr	r0, [pc, #40]	@ (800ed9c <rmw_take_response+0x90>)
 800ed74:	f004 fe78 	bl	8013a68 <put_memory>
 800ed78:	b105      	cbz	r5, 800ed7c <rmw_take_response+0x70>
 800ed7a:	702c      	strb	r4, [r5, #0]
 800ed7c:	f084 0001 	eor.w	r0, r4, #1
 800ed80:	b2c0      	uxtb	r0, r0
 800ed82:	b008      	add	sp, #32
 800ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed88:	200c      	movs	r0, #12
 800ed8a:	b008      	add	sp, #32
 800ed8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed90:	2001      	movs	r0, #1
 800ed92:	b008      	add	sp, #32
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	08016b68 	.word	0x08016b68
 800ed9c:	2000dd5c 	.word	0x2000dd5c

0800eda0 <rmw_destroy_service>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	b128      	cbz	r0, 800edb0 <rmw_destroy_service+0x10>
 800eda4:	4604      	mov	r4, r0
 800eda6:	6800      	ldr	r0, [r0, #0]
 800eda8:	460d      	mov	r5, r1
 800edaa:	f000 fee7 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800edae:	b910      	cbnz	r0, 800edb6 <rmw_destroy_service+0x16>
 800edb0:	2401      	movs	r4, #1
 800edb2:	4620      	mov	r0, r4
 800edb4:	bd70      	pop	{r4, r5, r6, pc}
 800edb6:	6863      	ldr	r3, [r4, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d0f9      	beq.n	800edb0 <rmw_destroy_service+0x10>
 800edbc:	2d00      	cmp	r5, #0
 800edbe:	d0f7      	beq.n	800edb0 <rmw_destroy_service+0x10>
 800edc0:	6828      	ldr	r0, [r5, #0]
 800edc2:	f000 fedb 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0f2      	beq.n	800edb0 <rmw_destroy_service+0x10>
 800edca:	686e      	ldr	r6, [r5, #4]
 800edcc:	2e00      	cmp	r6, #0
 800edce:	d0ef      	beq.n	800edb0 <rmw_destroy_service+0x10>
 800edd0:	6864      	ldr	r4, [r4, #4]
 800edd2:	6932      	ldr	r2, [r6, #16]
 800edd4:	6920      	ldr	r0, [r4, #16]
 800edd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800edda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800edde:	6819      	ldr	r1, [r3, #0]
 800ede0:	f001 f9a2 	bl	8010128 <uxr_buffer_cancel_data>
 800ede4:	4602      	mov	r2, r0
 800ede6:	6920      	ldr	r0, [r4, #16]
 800ede8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800edec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800edf0:	f000 fe44 	bl	800fa7c <run_xrce_session>
 800edf4:	6920      	ldr	r0, [r4, #16]
 800edf6:	6932      	ldr	r2, [r6, #16]
 800edf8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800edfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee00:	6819      	ldr	r1, [r3, #0]
 800ee02:	f000 ff09 	bl	800fc18 <uxr_buffer_delete_entity>
 800ee06:	4602      	mov	r2, r0
 800ee08:	6920      	ldr	r0, [r4, #16]
 800ee0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ee0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ee12:	f000 fe33 	bl	800fa7c <run_xrce_session>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	4628      	mov	r0, r5
 800ee1a:	bf14      	ite	ne
 800ee1c:	2400      	movne	r4, #0
 800ee1e:	2402      	moveq	r4, #2
 800ee20:	f000 fd00 	bl	800f824 <rmw_uxrce_fini_service_memory>
 800ee24:	e7c5      	b.n	800edb2 <rmw_destroy_service+0x12>
 800ee26:	bf00      	nop

0800ee28 <rmw_create_subscription>:
 800ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee2c:	b08d      	sub	sp, #52	@ 0x34
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	f000 80d1 	beq.w	800efd6 <rmw_create_subscription+0x1ae>
 800ee34:	460e      	mov	r6, r1
 800ee36:	2900      	cmp	r1, #0
 800ee38:	f000 80cd 	beq.w	800efd6 <rmw_create_subscription+0x1ae>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	6800      	ldr	r0, [r0, #0]
 800ee40:	4615      	mov	r5, r2
 800ee42:	4698      	mov	r8, r3
 800ee44:	f000 fe9a 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	f000 80c4 	beq.w	800efd6 <rmw_create_subscription+0x1ae>
 800ee4e:	2d00      	cmp	r5, #0
 800ee50:	f000 80c1 	beq.w	800efd6 <rmw_create_subscription+0x1ae>
 800ee54:	782b      	ldrb	r3, [r5, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f000 80bd 	beq.w	800efd6 <rmw_create_subscription+0x1ae>
 800ee5c:	f1b8 0f00 	cmp.w	r8, #0
 800ee60:	f000 80b9 	beq.w	800efd6 <rmw_create_subscription+0x1ae>
 800ee64:	485e      	ldr	r0, [pc, #376]	@ (800efe0 <rmw_create_subscription+0x1b8>)
 800ee66:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ee6a:	f004 fded 	bl	8013a48 <get_memory>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f000 80b1 	beq.w	800efd8 <rmw_create_subscription+0x1b0>
 800ee76:	6887      	ldr	r7, [r0, #8]
 800ee78:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800ee7c:	f7ff fa48 	bl	800e310 <rmw_get_implementation_identifier>
 800ee80:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800ee84:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ee86:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	f7f1 f9b2 	bl	80001f4 <strlen>
 800ee90:	3001      	adds	r0, #1
 800ee92:	283c      	cmp	r0, #60	@ 0x3c
 800ee94:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800ee98:	f200 8096 	bhi.w	800efc8 <rmw_create_subscription+0x1a0>
 800ee9c:	4a51      	ldr	r2, [pc, #324]	@ (800efe4 <rmw_create_subscription+0x1bc>)
 800ee9e:	462b      	mov	r3, r5
 800eea0:	213c      	movs	r1, #60	@ 0x3c
 800eea2:	4650      	mov	r0, sl
 800eea4:	f006 f87e 	bl	8014fa4 <sniprintf>
 800eea8:	4641      	mov	r1, r8
 800eeaa:	f8c7 9020 	str.w	r9, [r7, #32]
 800eeae:	2250      	movs	r2, #80	@ 0x50
 800eeb0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800eeb4:	f006 fa19 	bl	80152ea <memcpy>
 800eeb8:	494b      	ldr	r1, [pc, #300]	@ (800efe8 <rmw_create_subscription+0x1c0>)
 800eeba:	4630      	mov	r0, r6
 800eebc:	f000 fe6c 	bl	800fb98 <get_message_typesupport_handle>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	f000 8081 	beq.w	800efc8 <rmw_create_subscription+0x1a0>
 800eec6:	6842      	ldr	r2, [r0, #4]
 800eec8:	61ba      	str	r2, [r7, #24]
 800eeca:	2a00      	cmp	r2, #0
 800eecc:	d07c      	beq.n	800efc8 <rmw_create_subscription+0x1a0>
 800eece:	4629      	mov	r1, r5
 800eed0:	4643      	mov	r3, r8
 800eed2:	4648      	mov	r0, r9
 800eed4:	f004 fe04 	bl	8013ae0 <create_topic>
 800eed8:	61f8      	str	r0, [r7, #28]
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d078      	beq.n	800efd0 <rmw_create_subscription+0x1a8>
 800eede:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eee6:	2104      	movs	r1, #4
 800eee8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800eeec:	1c42      	adds	r2, r0, #1
 800eeee:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800eef2:	f001 f8af 	bl	8010054 <uxr_object_id>
 800eef6:	6138      	str	r0, [r7, #16]
 800eef8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eefc:	2506      	movs	r5, #6
 800eefe:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800ef02:	9500      	str	r5, [sp, #0]
 800ef04:	6819      	ldr	r1, [r3, #0]
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ef0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ef10:	f000 ff36 	bl	800fd80 <uxr_buffer_create_subscriber_bin>
 800ef14:	4602      	mov	r2, r0
 800ef16:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ef1a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ef1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ef22:	f000 fdab 	bl	800fa7c <run_xrce_session>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d04e      	beq.n	800efc8 <rmw_create_subscription+0x1a0>
 800ef2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef32:	4629      	mov	r1, r5
 800ef34:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800ef38:	1c42      	adds	r2, r0, #1
 800ef3a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800ef3e:	f001 f889 	bl	8010054 <uxr_object_id>
 800ef42:	ae08      	add	r6, sp, #32
 800ef44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	6178      	str	r0, [r7, #20]
 800ef4c:	4641      	mov	r1, r8
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800ef54:	9305      	str	r3, [sp, #20]
 800ef56:	f000 fdad 	bl	800fab4 <convert_qos_profile>
 800ef5a:	9503      	str	r5, [sp, #12]
 800ef5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ef60:	9b05      	ldr	r3, [sp, #20]
 800ef62:	9001      	str	r0, [sp, #4]
 800ef64:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ef70:	f8db 1000 	ldr.w	r1, [fp]
 800ef74:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800ef78:	f000 ff32 	bl	800fde0 <uxr_buffer_create_datareader_bin>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ef82:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ef86:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ef8a:	f000 fd77 	bl	800fa7c <run_xrce_session>
 800ef8e:	b1d8      	cbz	r0, 800efc8 <rmw_create_subscription+0x1a0>
 800ef90:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ef94:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	bf0c      	ite	eq
 800ef9c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800efa0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800efa4:	9307      	str	r3, [sp, #28]
 800efa6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800efaa:	2200      	movs	r2, #0
 800efac:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800efb0:	ab0a      	add	r3, sp, #40	@ 0x28
 800efb2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	697a      	ldr	r2, [r7, #20]
 800efba:	9b07      	ldr	r3, [sp, #28]
 800efbc:	6809      	ldr	r1, [r1, #0]
 800efbe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efc2:	f001 f877 	bl	80100b4 <uxr_buffer_request_data>
 800efc6:	e007      	b.n	800efd8 <rmw_create_subscription+0x1b0>
 800efc8:	69f8      	ldr	r0, [r7, #28]
 800efca:	b108      	cbz	r0, 800efd0 <rmw_create_subscription+0x1a8>
 800efcc:	f000 fc56 	bl	800f87c <rmw_uxrce_fini_topic_memory>
 800efd0:	4620      	mov	r0, r4
 800efd2:	f000 fc11 	bl	800f7f8 <rmw_uxrce_fini_subscription_memory>
 800efd6:	2400      	movs	r4, #0
 800efd8:	4620      	mov	r0, r4
 800efda:	b00d      	add	sp, #52	@ 0x34
 800efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe0:	2000dd6c 	.word	0x2000dd6c
 800efe4:	080168ec 	.word	0x080168ec
 800efe8:	08016338 	.word	0x08016338

0800efec <rmw_subscription_get_actual_qos>:
 800efec:	b150      	cbz	r0, 800f004 <rmw_subscription_get_actual_qos+0x18>
 800efee:	b508      	push	{r3, lr}
 800eff0:	460b      	mov	r3, r1
 800eff2:	b149      	cbz	r1, 800f008 <rmw_subscription_get_actual_qos+0x1c>
 800eff4:	6841      	ldr	r1, [r0, #4]
 800eff6:	2250      	movs	r2, #80	@ 0x50
 800eff8:	3128      	adds	r1, #40	@ 0x28
 800effa:	4618      	mov	r0, r3
 800effc:	f006 f975 	bl	80152ea <memcpy>
 800f000:	2000      	movs	r0, #0
 800f002:	bd08      	pop	{r3, pc}
 800f004:	200b      	movs	r0, #11
 800f006:	4770      	bx	lr
 800f008:	200b      	movs	r0, #11
 800f00a:	bd08      	pop	{r3, pc}

0800f00c <rmw_destroy_subscription>:
 800f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00e:	b128      	cbz	r0, 800f01c <rmw_destroy_subscription+0x10>
 800f010:	4604      	mov	r4, r0
 800f012:	6800      	ldr	r0, [r0, #0]
 800f014:	460d      	mov	r5, r1
 800f016:	f000 fdb1 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800f01a:	b910      	cbnz	r0, 800f022 <rmw_destroy_subscription+0x16>
 800f01c:	2401      	movs	r4, #1
 800f01e:	4620      	mov	r0, r4
 800f020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f022:	6863      	ldr	r3, [r4, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d0f9      	beq.n	800f01c <rmw_destroy_subscription+0x10>
 800f028:	2d00      	cmp	r5, #0
 800f02a:	d0f7      	beq.n	800f01c <rmw_destroy_subscription+0x10>
 800f02c:	6828      	ldr	r0, [r5, #0]
 800f02e:	f000 fda5 	bl	800fb7c <is_uxrce_rmw_identifier_valid>
 800f032:	2800      	cmp	r0, #0
 800f034:	d0f2      	beq.n	800f01c <rmw_destroy_subscription+0x10>
 800f036:	686c      	ldr	r4, [r5, #4]
 800f038:	2c00      	cmp	r4, #0
 800f03a:	d0ef      	beq.n	800f01c <rmw_destroy_subscription+0x10>
 800f03c:	6a26      	ldr	r6, [r4, #32]
 800f03e:	6962      	ldr	r2, [r4, #20]
 800f040:	6930      	ldr	r0, [r6, #16]
 800f042:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f046:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f04a:	6819      	ldr	r1, [r3, #0]
 800f04c:	f001 f86c 	bl	8010128 <uxr_buffer_cancel_data>
 800f050:	4602      	mov	r2, r0
 800f052:	6930      	ldr	r0, [r6, #16]
 800f054:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f058:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f05c:	f000 fd0e 	bl	800fa7c <run_xrce_session>
 800f060:	69e0      	ldr	r0, [r4, #28]
 800f062:	f004 fd8d 	bl	8013b80 <destroy_topic>
 800f066:	6a23      	ldr	r3, [r4, #32]
 800f068:	6962      	ldr	r2, [r4, #20]
 800f06a:	6918      	ldr	r0, [r3, #16]
 800f06c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f070:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f074:	6819      	ldr	r1, [r3, #0]
 800f076:	f000 fdcf 	bl	800fc18 <uxr_buffer_delete_entity>
 800f07a:	6a23      	ldr	r3, [r4, #32]
 800f07c:	6922      	ldr	r2, [r4, #16]
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f084:	4604      	mov	r4, r0
 800f086:	6809      	ldr	r1, [r1, #0]
 800f088:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f08c:	f000 fdc4 	bl	800fc18 <uxr_buffer_delete_entity>
 800f090:	6937      	ldr	r7, [r6, #16]
 800f092:	4622      	mov	r2, r4
 800f094:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f098:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f09c:	4604      	mov	r4, r0
 800f09e:	4638      	mov	r0, r7
 800f0a0:	f000 fcec 	bl	800fa7c <run_xrce_session>
 800f0a4:	6936      	ldr	r6, [r6, #16]
 800f0a6:	4622      	mov	r2, r4
 800f0a8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f0ac:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f000 fce2 	bl	800fa7c <run_xrce_session>
 800f0b8:	b12c      	cbz	r4, 800f0c6 <rmw_destroy_subscription+0xba>
 800f0ba:	b120      	cbz	r0, 800f0c6 <rmw_destroy_subscription+0xba>
 800f0bc:	2400      	movs	r4, #0
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f000 fb9a 	bl	800f7f8 <rmw_uxrce_fini_subscription_memory>
 800f0c4:	e7ab      	b.n	800f01e <rmw_destroy_subscription+0x12>
 800f0c6:	2402      	movs	r4, #2
 800f0c8:	e7f9      	b.n	800f0be <rmw_destroy_subscription+0xb2>
 800f0ca:	bf00      	nop

0800f0cc <rmw_take_with_info>:
 800f0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	6800      	ldr	r0, [r0, #0]
 800f0d2:	b089      	sub	sp, #36	@ 0x24
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	4615      	mov	r5, r2
 800f0d8:	b128      	cbz	r0, 800f0e6 <rmw_take_with_info+0x1a>
 800f0da:	4b24      	ldr	r3, [pc, #144]	@ (800f16c <rmw_take_with_info+0xa0>)
 800f0dc:	6819      	ldr	r1, [r3, #0]
 800f0de:	f7f1 f87f 	bl	80001e0 <strcmp>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	d13e      	bne.n	800f164 <rmw_take_with_info+0x98>
 800f0e6:	b305      	cbz	r5, 800f12a <rmw_take_with_info+0x5e>
 800f0e8:	6864      	ldr	r4, [r4, #4]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	702b      	strb	r3, [r5, #0]
 800f0ee:	f000 fc47 	bl	800f980 <rmw_uxrce_clean_expired_static_input_buffer>
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 fc1e 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	b1f0      	cbz	r0, 800f13a <rmw_take_with_info+0x6e>
 800f0fc:	6881      	ldr	r1, [r0, #8]
 800f0fe:	4668      	mov	r0, sp
 800f100:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f104:	3110      	adds	r1, #16
 800f106:	f7fb ff85 	bl	800b014 <ucdr_init_buffer>
 800f10a:	69a3      	ldr	r3, [r4, #24]
 800f10c:	4639      	mov	r1, r7
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	4668      	mov	r0, sp
 800f112:	4798      	blx	r3
 800f114:	4631      	mov	r1, r6
 800f116:	4604      	mov	r4, r0
 800f118:	4815      	ldr	r0, [pc, #84]	@ (800f170 <rmw_take_with_info+0xa4>)
 800f11a:	f004 fca5 	bl	8013a68 <put_memory>
 800f11e:	702c      	strb	r4, [r5, #0]
 800f120:	f084 0001 	eor.w	r0, r4, #1
 800f124:	b2c0      	uxtb	r0, r0
 800f126:	b009      	add	sp, #36	@ 0x24
 800f128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f12a:	6864      	ldr	r4, [r4, #4]
 800f12c:	f000 fc28 	bl	800f980 <rmw_uxrce_clean_expired_static_input_buffer>
 800f130:	4620      	mov	r0, r4
 800f132:	f000 fbff 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f136:	4605      	mov	r5, r0
 800f138:	b910      	cbnz	r0, 800f140 <rmw_take_with_info+0x74>
 800f13a:	2001      	movs	r0, #1
 800f13c:	b009      	add	sp, #36	@ 0x24
 800f13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f140:	68a9      	ldr	r1, [r5, #8]
 800f142:	4668      	mov	r0, sp
 800f144:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800f148:	3110      	adds	r1, #16
 800f14a:	f7fb ff63 	bl	800b014 <ucdr_init_buffer>
 800f14e:	69a3      	ldr	r3, [r4, #24]
 800f150:	4639      	mov	r1, r7
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	4668      	mov	r0, sp
 800f156:	4798      	blx	r3
 800f158:	4629      	mov	r1, r5
 800f15a:	4604      	mov	r4, r0
 800f15c:	4804      	ldr	r0, [pc, #16]	@ (800f170 <rmw_take_with_info+0xa4>)
 800f15e:	f004 fc83 	bl	8013a68 <put_memory>
 800f162:	e7dd      	b.n	800f120 <rmw_take_with_info+0x54>
 800f164:	200c      	movs	r0, #12
 800f166:	b009      	add	sp, #36	@ 0x24
 800f168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f16a:	bf00      	nop
 800f16c:	08016b68 	.word	0x08016b68
 800f170:	2000dd5c 	.word	0x2000dd5c

0800f174 <rmw_uxrce_transport_init>:
 800f174:	b508      	push	{r3, lr}
 800f176:	b108      	cbz	r0, 800f17c <rmw_uxrce_transport_init+0x8>
 800f178:	f100 0210 	add.w	r2, r0, #16
 800f17c:	b139      	cbz	r1, 800f18e <rmw_uxrce_transport_init+0x1a>
 800f17e:	6949      	ldr	r1, [r1, #20]
 800f180:	4610      	mov	r0, r2
 800f182:	f000 ff2f 	bl	800ffe4 <uxr_init_custom_transport>
 800f186:	f080 0001 	eor.w	r0, r0, #1
 800f18a:	b2c0      	uxtb	r0, r0
 800f18c:	bd08      	pop	{r3, pc}
 800f18e:	4b04      	ldr	r3, [pc, #16]	@ (800f1a0 <rmw_uxrce_transport_init+0x2c>)
 800f190:	4610      	mov	r0, r2
 800f192:	6859      	ldr	r1, [r3, #4]
 800f194:	f000 ff26 	bl	800ffe4 <uxr_init_custom_transport>
 800f198:	f080 0001 	eor.w	r0, r0, #1
 800f19c:	b2c0      	uxtb	r0, r0
 800f19e:	bd08      	pop	{r3, pc}
 800f1a0:	20009364 	.word	0x20009364

0800f1a4 <rmw_wait>:
 800f1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1a8:	b089      	sub	sp, #36	@ 0x24
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800f1ae:	460e      	mov	r6, r1
 800f1b0:	4698      	mov	r8, r3
 800f1b2:	4691      	mov	r9, r2
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	f000 810a 	beq.w	800f3ce <rmw_wait+0x22a>
 800f1ba:	b16c      	cbz	r4, 800f1d8 <rmw_wait+0x34>
 800f1bc:	4bae      	ldr	r3, [pc, #696]	@ (800f478 <rmw_wait+0x2d4>)
 800f1be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1c0:	af04      	add	r7, sp, #16
 800f1c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800f1c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f1ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f1ce:	f004 facf 	bl	8013770 <rmw_time_equal>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	f000 8127 	beq.w	800f426 <rmw_wait+0x282>
 800f1d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f1dc:	f000 fbd0 	bl	800f980 <rmw_uxrce_clean_expired_static_input_buffer>
 800f1e0:	4ba6      	ldr	r3, [pc, #664]	@ (800f47c <rmw_wait+0x2d8>)
 800f1e2:	681c      	ldr	r4, [r3, #0]
 800f1e4:	b14c      	cbz	r4, 800f1fa <rmw_wait+0x56>
 800f1e6:	4623      	mov	r3, r4
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800f1ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f1f2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1f7      	bne.n	800f1ea <rmw_wait+0x46>
 800f1fa:	f1b9 0f00 	cmp.w	r9, #0
 800f1fe:	d011      	beq.n	800f224 <rmw_wait+0x80>
 800f200:	f8d9 1000 	ldr.w	r1, [r9]
 800f204:	b171      	cbz	r1, 800f224 <rmw_wait+0x80>
 800f206:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800f20a:	2300      	movs	r3, #0
 800f20c:	2001      	movs	r0, #1
 800f20e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f212:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800f214:	6912      	ldr	r2, [r2, #16]
 800f216:	3301      	adds	r3, #1
 800f218:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f21c:	4299      	cmp	r1, r3
 800f21e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800f222:	d1f4      	bne.n	800f20e <rmw_wait+0x6a>
 800f224:	f1b8 0f00 	cmp.w	r8, #0
 800f228:	d011      	beq.n	800f24e <rmw_wait+0xaa>
 800f22a:	f8d8 1000 	ldr.w	r1, [r8]
 800f22e:	b171      	cbz	r1, 800f24e <rmw_wait+0xaa>
 800f230:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800f234:	2300      	movs	r3, #0
 800f236:	2001      	movs	r0, #1
 800f238:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f23c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800f23e:	6912      	ldr	r2, [r2, #16]
 800f240:	3301      	adds	r3, #1
 800f242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f246:	4299      	cmp	r1, r3
 800f248:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800f24c:	d1f4      	bne.n	800f238 <rmw_wait+0x94>
 800f24e:	b185      	cbz	r5, 800f272 <rmw_wait+0xce>
 800f250:	6829      	ldr	r1, [r5, #0]
 800f252:	b171      	cbz	r1, 800f272 <rmw_wait+0xce>
 800f254:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800f258:	2300      	movs	r3, #0
 800f25a:	2001      	movs	r0, #1
 800f25c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f260:	6a12      	ldr	r2, [r2, #32]
 800f262:	6912      	ldr	r2, [r2, #16]
 800f264:	3301      	adds	r3, #1
 800f266:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800f26a:	4299      	cmp	r1, r3
 800f26c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 800f270:	d1f4      	bne.n	800f25c <rmw_wait+0xb8>
 800f272:	b34c      	cbz	r4, 800f2c8 <rmw_wait+0x124>
 800f274:	4622      	mov	r2, r4
 800f276:	2300      	movs	r3, #0
 800f278:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800f27c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800f280:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 800f284:	440b      	add	r3, r1
 800f286:	b2db      	uxtb	r3, r3
 800f288:	2a00      	cmp	r2, #0
 800f28a:	d1f5      	bne.n	800f278 <rmw_wait+0xd4>
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f000 8084 	beq.w	800f39a <rmw_wait+0x1f6>
 800f292:	1c7a      	adds	r2, r7, #1
 800f294:	d00d      	beq.n	800f2b2 <rmw_wait+0x10e>
 800f296:	ee07 7a90 	vmov	s15, r7
 800f29a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f29e:	ee07 3a90 	vmov	s15, r3
 800f2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2aa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800f2ae:	ee17 7a90 	vmov	r7, s15
 800f2b2:	68a0      	ldr	r0, [r4, #8]
 800f2b4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800f2b8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 8090 	bne.w	800f3e2 <rmw_wait+0x23e>
 800f2c2:	6864      	ldr	r4, [r4, #4]
 800f2c4:	2c00      	cmp	r4, #0
 800f2c6:	d1f4      	bne.n	800f2b2 <rmw_wait+0x10e>
 800f2c8:	f1b9 0f00 	cmp.w	r9, #0
 800f2cc:	f000 80bc 	beq.w	800f448 <rmw_wait+0x2a4>
 800f2d0:	f8d9 7000 	ldr.w	r7, [r9]
 800f2d4:	2f00      	cmp	r7, #0
 800f2d6:	f000 808e 	beq.w	800f3f6 <rmw_wait+0x252>
 800f2da:	2400      	movs	r4, #0
 800f2dc:	4627      	mov	r7, r4
 800f2de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f2e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f2e6:	f000 fb25 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d05f      	beq.n	800f3ae <rmw_wait+0x20a>
 800f2ee:	f8d9 3000 	ldr.w	r3, [r9]
 800f2f2:	3401      	adds	r4, #1
 800f2f4:	42a3      	cmp	r3, r4
 800f2f6:	f04f 0701 	mov.w	r7, #1
 800f2fa:	d8f0      	bhi.n	800f2de <rmw_wait+0x13a>
 800f2fc:	f1b8 0f00 	cmp.w	r8, #0
 800f300:	d012      	beq.n	800f328 <rmw_wait+0x184>
 800f302:	f8d8 3000 	ldr.w	r3, [r8]
 800f306:	b17b      	cbz	r3, 800f328 <rmw_wait+0x184>
 800f308:	2400      	movs	r4, #0
 800f30a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f30e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f312:	f000 fb0f 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f316:	2800      	cmp	r0, #0
 800f318:	d051      	beq.n	800f3be <rmw_wait+0x21a>
 800f31a:	f8d8 3000 	ldr.w	r3, [r8]
 800f31e:	3401      	adds	r4, #1
 800f320:	42a3      	cmp	r3, r4
 800f322:	f04f 0701 	mov.w	r7, #1
 800f326:	d8f0      	bhi.n	800f30a <rmw_wait+0x166>
 800f328:	b1dd      	cbz	r5, 800f362 <rmw_wait+0x1be>
 800f32a:	682b      	ldr	r3, [r5, #0]
 800f32c:	b1cb      	cbz	r3, 800f362 <rmw_wait+0x1be>
 800f32e:	2400      	movs	r4, #0
 800f330:	686b      	ldr	r3, [r5, #4]
 800f332:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f336:	f000 fafd 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f33a:	b158      	cbz	r0, 800f354 <rmw_wait+0x1b0>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	3401      	adds	r4, #1
 800f340:	42a3      	cmp	r3, r4
 800f342:	d969      	bls.n	800f418 <rmw_wait+0x274>
 800f344:	686b      	ldr	r3, [r5, #4]
 800f346:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f34a:	2701      	movs	r7, #1
 800f34c:	f000 faf2 	bl	800f934 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f350:	2800      	cmp	r0, #0
 800f352:	d1f3      	bne.n	800f33c <rmw_wait+0x198>
 800f354:	e9d5 3200 	ldrd	r3, r2, [r5]
 800f358:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800f35c:	3401      	adds	r4, #1
 800f35e:	42a3      	cmp	r3, r4
 800f360:	d8e6      	bhi.n	800f330 <rmw_wait+0x18c>
 800f362:	b1a6      	cbz	r6, 800f38e <rmw_wait+0x1ea>
 800f364:	6834      	ldr	r4, [r6, #0]
 800f366:	b194      	cbz	r4, 800f38e <rmw_wait+0x1ea>
 800f368:	2300      	movs	r3, #0
 800f36a:	461d      	mov	r5, r3
 800f36c:	e004      	b.n	800f378 <rmw_wait+0x1d4>
 800f36e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800f372:	3301      	adds	r3, #1
 800f374:	42a3      	cmp	r3, r4
 800f376:	d00a      	beq.n	800f38e <rmw_wait+0x1ea>
 800f378:	6870      	ldr	r0, [r6, #4]
 800f37a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800f37e:	7c0a      	ldrb	r2, [r1, #16]
 800f380:	2a00      	cmp	r2, #0
 800f382:	d0f4      	beq.n	800f36e <rmw_wait+0x1ca>
 800f384:	3301      	adds	r3, #1
 800f386:	42a3      	cmp	r3, r4
 800f388:	740d      	strb	r5, [r1, #16]
 800f38a:	4617      	mov	r7, r2
 800f38c:	d1f4      	bne.n	800f378 <rmw_wait+0x1d4>
 800f38e:	2f00      	cmp	r7, #0
 800f390:	d03e      	beq.n	800f410 <rmw_wait+0x26c>
 800f392:	2000      	movs	r0, #0
 800f394:	b009      	add	sp, #36	@ 0x24
 800f396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f39a:	68a0      	ldr	r0, [r4, #8]
 800f39c:	2100      	movs	r1, #0
 800f39e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3a2:	f001 fc5b 	bl	8010c5c <uxr_run_session_timeout>
 800f3a6:	6864      	ldr	r4, [r4, #4]
 800f3a8:	2c00      	cmp	r4, #0
 800f3aa:	d1f6      	bne.n	800f39a <rmw_wait+0x1f6>
 800f3ac:	e78c      	b.n	800f2c8 <rmw_wait+0x124>
 800f3ae:	e9d9 3200 	ldrd	r3, r2, [r9]
 800f3b2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800f3b6:	3401      	adds	r4, #1
 800f3b8:	42a3      	cmp	r3, r4
 800f3ba:	d890      	bhi.n	800f2de <rmw_wait+0x13a>
 800f3bc:	e79e      	b.n	800f2fc <rmw_wait+0x158>
 800f3be:	e9d8 3200 	ldrd	r3, r2, [r8]
 800f3c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800f3c6:	3401      	adds	r4, #1
 800f3c8:	429c      	cmp	r4, r3
 800f3ca:	d39e      	bcc.n	800f30a <rmw_wait+0x166>
 800f3cc:	e7ac      	b.n	800f328 <rmw_wait+0x184>
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f47f aef3 	bne.w	800f1ba <rmw_wait+0x16>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	f47f aef0 	bne.w	800f1ba <rmw_wait+0x16>
 800f3da:	2900      	cmp	r1, #0
 800f3dc:	f47f aeed 	bne.w	800f1ba <rmw_wait+0x16>
 800f3e0:	e7d7      	b.n	800f392 <rmw_wait+0x1ee>
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3e8:	f001 fc52 	bl	8010c90 <uxr_run_session_until_data>
 800f3ec:	6864      	ldr	r4, [r4, #4]
 800f3ee:	2c00      	cmp	r4, #0
 800f3f0:	f47f af5f 	bne.w	800f2b2 <rmw_wait+0x10e>
 800f3f4:	e768      	b.n	800f2c8 <rmw_wait+0x124>
 800f3f6:	f1b8 0f00 	cmp.w	r8, #0
 800f3fa:	d032      	beq.n	800f462 <rmw_wait+0x2be>
 800f3fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d181      	bne.n	800f308 <rmw_wait+0x164>
 800f404:	461f      	mov	r7, r3
 800f406:	2d00      	cmp	r5, #0
 800f408:	d18f      	bne.n	800f32a <rmw_wait+0x186>
 800f40a:	462f      	mov	r7, r5
 800f40c:	2e00      	cmp	r6, #0
 800f40e:	d1a9      	bne.n	800f364 <rmw_wait+0x1c0>
 800f410:	2002      	movs	r0, #2
 800f412:	b009      	add	sp, #36	@ 0x24
 800f414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f418:	2e00      	cmp	r6, #0
 800f41a:	d0ba      	beq.n	800f392 <rmw_wait+0x1ee>
 800f41c:	6834      	ldr	r4, [r6, #0]
 800f41e:	2701      	movs	r7, #1
 800f420:	2c00      	cmp	r4, #0
 800f422:	d1a1      	bne.n	800f368 <rmw_wait+0x1c4>
 800f424:	e7b5      	b.n	800f392 <rmw_wait+0x1ee>
 800f426:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f42a:	f004 f9f5 	bl	8013818 <rmw_time_total_nsec>
 800f42e:	2300      	movs	r3, #0
 800f430:	4a13      	ldr	r2, [pc, #76]	@ (800f480 <rmw_wait+0x2dc>)
 800f432:	f7f1 f969 	bl	8000708 <__aeabi_uldivmod>
 800f436:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800f43a:	f171 0300 	sbcs.w	r3, r1, #0
 800f43e:	4607      	mov	r7, r0
 800f440:	bfa8      	it	ge
 800f442:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 800f446:	e6c9      	b.n	800f1dc <rmw_wait+0x38>
 800f448:	f1b8 0f00 	cmp.w	r8, #0
 800f44c:	d009      	beq.n	800f462 <rmw_wait+0x2be>
 800f44e:	f8d8 3000 	ldr.w	r3, [r8]
 800f452:	464f      	mov	r7, r9
 800f454:	2b00      	cmp	r3, #0
 800f456:	f47f af57 	bne.w	800f308 <rmw_wait+0x164>
 800f45a:	2d00      	cmp	r5, #0
 800f45c:	f47f af65 	bne.w	800f32a <rmw_wait+0x186>
 800f460:	e7d3      	b.n	800f40a <rmw_wait+0x266>
 800f462:	b17d      	cbz	r5, 800f484 <rmw_wait+0x2e0>
 800f464:	682b      	ldr	r3, [r5, #0]
 800f466:	4647      	mov	r7, r8
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f47f af60 	bne.w	800f32e <rmw_wait+0x18a>
 800f46e:	2e00      	cmp	r6, #0
 800f470:	f47f af78 	bne.w	800f364 <rmw_wait+0x1c0>
 800f474:	e7cc      	b.n	800f410 <rmw_wait+0x26c>
 800f476:	bf00      	nop
 800f478:	080160f0 	.word	0x080160f0
 800f47c:	2000dd4c 	.word	0x2000dd4c
 800f480:	000f4240 	.word	0x000f4240
 800f484:	2e00      	cmp	r6, #0
 800f486:	d0c3      	beq.n	800f410 <rmw_wait+0x26c>
 800f488:	6834      	ldr	r4, [r6, #0]
 800f48a:	462f      	mov	r7, r5
 800f48c:	2c00      	cmp	r4, #0
 800f48e:	f47f af6b 	bne.w	800f368 <rmw_wait+0x1c4>
 800f492:	e7bd      	b.n	800f410 <rmw_wait+0x26c>

0800f494 <rmw_create_wait_set>:
 800f494:	b508      	push	{r3, lr}
 800f496:	4803      	ldr	r0, [pc, #12]	@ (800f4a4 <rmw_create_wait_set+0x10>)
 800f498:	f004 fad6 	bl	8013a48 <get_memory>
 800f49c:	b108      	cbz	r0, 800f4a2 <rmw_create_wait_set+0xe>
 800f49e:	6880      	ldr	r0, [r0, #8]
 800f4a0:	3010      	adds	r0, #16
 800f4a2:	bd08      	pop	{r3, pc}
 800f4a4:	2000dd8c 	.word	0x2000dd8c

0800f4a8 <rmw_destroy_wait_set>:
 800f4a8:	b508      	push	{r3, lr}
 800f4aa:	4b08      	ldr	r3, [pc, #32]	@ (800f4cc <rmw_destroy_wait_set+0x24>)
 800f4ac:	6819      	ldr	r1, [r3, #0]
 800f4ae:	b911      	cbnz	r1, 800f4b6 <rmw_destroy_wait_set+0xe>
 800f4b0:	e00a      	b.n	800f4c8 <rmw_destroy_wait_set+0x20>
 800f4b2:	6849      	ldr	r1, [r1, #4]
 800f4b4:	b141      	cbz	r1, 800f4c8 <rmw_destroy_wait_set+0x20>
 800f4b6:	688b      	ldr	r3, [r1, #8]
 800f4b8:	3310      	adds	r3, #16
 800f4ba:	4298      	cmp	r0, r3
 800f4bc:	d1f9      	bne.n	800f4b2 <rmw_destroy_wait_set+0xa>
 800f4be:	4803      	ldr	r0, [pc, #12]	@ (800f4cc <rmw_destroy_wait_set+0x24>)
 800f4c0:	f004 fad2 	bl	8013a68 <put_memory>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	bd08      	pop	{r3, pc}
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	bd08      	pop	{r3, pc}
 800f4cc:	2000dd8c 	.word	0x2000dd8c

0800f4d0 <rmw_uxrce_init_service_memory>:
 800f4d0:	b1e2      	cbz	r2, 800f50c <rmw_uxrce_init_service_memory+0x3c>
 800f4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d6:	7b05      	ldrb	r5, [r0, #12]
 800f4d8:	4606      	mov	r6, r0
 800f4da:	b9ad      	cbnz	r5, 800f508 <rmw_uxrce_init_service_memory+0x38>
 800f4dc:	23c8      	movs	r3, #200	@ 0xc8
 800f4de:	e9c0 5500 	strd	r5, r5, [r0]
 800f4e2:	6083      	str	r3, [r0, #8]
 800f4e4:	f240 1301 	movw	r3, #257	@ 0x101
 800f4e8:	4617      	mov	r7, r2
 800f4ea:	8183      	strh	r3, [r0, #12]
 800f4ec:	460c      	mov	r4, r1
 800f4ee:	46a8      	mov	r8, r5
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	f004 fab7 	bl	8013a68 <put_memory>
 800f4fa:	42af      	cmp	r7, r5
 800f4fc:	60a4      	str	r4, [r4, #8]
 800f4fe:	f884 800c 	strb.w	r8, [r4, #12]
 800f502:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f506:	d1f3      	bne.n	800f4f0 <rmw_uxrce_init_service_memory+0x20>
 800f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop

0800f510 <rmw_uxrce_init_client_memory>:
 800f510:	b1e2      	cbz	r2, 800f54c <rmw_uxrce_init_client_memory+0x3c>
 800f512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f516:	7b05      	ldrb	r5, [r0, #12]
 800f518:	4606      	mov	r6, r0
 800f51a:	b9ad      	cbnz	r5, 800f548 <rmw_uxrce_init_client_memory+0x38>
 800f51c:	23c8      	movs	r3, #200	@ 0xc8
 800f51e:	e9c0 5500 	strd	r5, r5, [r0]
 800f522:	6083      	str	r3, [r0, #8]
 800f524:	f240 1301 	movw	r3, #257	@ 0x101
 800f528:	4617      	mov	r7, r2
 800f52a:	8183      	strh	r3, [r0, #12]
 800f52c:	460c      	mov	r4, r1
 800f52e:	46a8      	mov	r8, r5
 800f530:	4621      	mov	r1, r4
 800f532:	4630      	mov	r0, r6
 800f534:	3501      	adds	r5, #1
 800f536:	f004 fa97 	bl	8013a68 <put_memory>
 800f53a:	42af      	cmp	r7, r5
 800f53c:	60a4      	str	r4, [r4, #8]
 800f53e:	f884 800c 	strb.w	r8, [r4, #12]
 800f542:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f546:	d1f3      	bne.n	800f530 <rmw_uxrce_init_client_memory+0x20>
 800f548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop

0800f550 <rmw_uxrce_init_publisher_memory>:
 800f550:	b1e2      	cbz	r2, 800f58c <rmw_uxrce_init_publisher_memory+0x3c>
 800f552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f556:	7b05      	ldrb	r5, [r0, #12]
 800f558:	4606      	mov	r6, r0
 800f55a:	b9ad      	cbnz	r5, 800f588 <rmw_uxrce_init_publisher_memory+0x38>
 800f55c:	23d8      	movs	r3, #216	@ 0xd8
 800f55e:	e9c0 5500 	strd	r5, r5, [r0]
 800f562:	6083      	str	r3, [r0, #8]
 800f564:	f240 1301 	movw	r3, #257	@ 0x101
 800f568:	4617      	mov	r7, r2
 800f56a:	8183      	strh	r3, [r0, #12]
 800f56c:	460c      	mov	r4, r1
 800f56e:	46a8      	mov	r8, r5
 800f570:	4621      	mov	r1, r4
 800f572:	4630      	mov	r0, r6
 800f574:	3501      	adds	r5, #1
 800f576:	f004 fa77 	bl	8013a68 <put_memory>
 800f57a:	42af      	cmp	r7, r5
 800f57c:	60a4      	str	r4, [r4, #8]
 800f57e:	f884 800c 	strb.w	r8, [r4, #12]
 800f582:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f586:	d1f3      	bne.n	800f570 <rmw_uxrce_init_publisher_memory+0x20>
 800f588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop

0800f590 <rmw_uxrce_init_subscription_memory>:
 800f590:	b1e2      	cbz	r2, 800f5cc <rmw_uxrce_init_subscription_memory+0x3c>
 800f592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f596:	7b05      	ldrb	r5, [r0, #12]
 800f598:	4606      	mov	r6, r0
 800f59a:	b9ad      	cbnz	r5, 800f5c8 <rmw_uxrce_init_subscription_memory+0x38>
 800f59c:	23d8      	movs	r3, #216	@ 0xd8
 800f59e:	e9c0 5500 	strd	r5, r5, [r0]
 800f5a2:	6083      	str	r3, [r0, #8]
 800f5a4:	f240 1301 	movw	r3, #257	@ 0x101
 800f5a8:	4617      	mov	r7, r2
 800f5aa:	8183      	strh	r3, [r0, #12]
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	46a8      	mov	r8, r5
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	3501      	adds	r5, #1
 800f5b6:	f004 fa57 	bl	8013a68 <put_memory>
 800f5ba:	42af      	cmp	r7, r5
 800f5bc:	60a4      	str	r4, [r4, #8]
 800f5be:	f884 800c 	strb.w	r8, [r4, #12]
 800f5c2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f5c6:	d1f3      	bne.n	800f5b0 <rmw_uxrce_init_subscription_memory+0x20>
 800f5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop

0800f5d0 <rmw_uxrce_init_node_memory>:
 800f5d0:	b1e2      	cbz	r2, 800f60c <rmw_uxrce_init_node_memory+0x3c>
 800f5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d6:	7b05      	ldrb	r5, [r0, #12]
 800f5d8:	4606      	mov	r6, r0
 800f5da:	b9ad      	cbnz	r5, 800f608 <rmw_uxrce_init_node_memory+0x38>
 800f5dc:	23a4      	movs	r3, #164	@ 0xa4
 800f5de:	e9c0 5500 	strd	r5, r5, [r0]
 800f5e2:	6083      	str	r3, [r0, #8]
 800f5e4:	f240 1301 	movw	r3, #257	@ 0x101
 800f5e8:	4617      	mov	r7, r2
 800f5ea:	8183      	strh	r3, [r0, #12]
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	46a8      	mov	r8, r5
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	3501      	adds	r5, #1
 800f5f6:	f004 fa37 	bl	8013a68 <put_memory>
 800f5fa:	42af      	cmp	r7, r5
 800f5fc:	60a4      	str	r4, [r4, #8]
 800f5fe:	f884 800c 	strb.w	r8, [r4, #12]
 800f602:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800f606:	d1f3      	bne.n	800f5f0 <rmw_uxrce_init_node_memory+0x20>
 800f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop

0800f610 <rmw_uxrce_init_session_memory>:
 800f610:	b1ea      	cbz	r2, 800f64e <rmw_uxrce_init_session_memory+0x3e>
 800f612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f616:	7b05      	ldrb	r5, [r0, #12]
 800f618:	4606      	mov	r6, r0
 800f61a:	b9b5      	cbnz	r5, 800f64a <rmw_uxrce_init_session_memory+0x3a>
 800f61c:	e9c0 5500 	strd	r5, r5, [r0]
 800f620:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800f624:	f240 1301 	movw	r3, #257	@ 0x101
 800f628:	4617      	mov	r7, r2
 800f62a:	f8c0 8008 	str.w	r8, [r0, #8]
 800f62e:	460c      	mov	r4, r1
 800f630:	8183      	strh	r3, [r0, #12]
 800f632:	46a9      	mov	r9, r5
 800f634:	4621      	mov	r1, r4
 800f636:	4630      	mov	r0, r6
 800f638:	3501      	adds	r5, #1
 800f63a:	f004 fa15 	bl	8013a68 <put_memory>
 800f63e:	42af      	cmp	r7, r5
 800f640:	60a4      	str	r4, [r4, #8]
 800f642:	f884 900c 	strb.w	r9, [r4, #12]
 800f646:	4444      	add	r4, r8
 800f648:	d1f4      	bne.n	800f634 <rmw_uxrce_init_session_memory+0x24>
 800f64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f64e:	4770      	bx	lr

0800f650 <rmw_uxrce_init_topic_memory>:
 800f650:	b1e2      	cbz	r2, 800f68c <rmw_uxrce_init_topic_memory+0x3c>
 800f652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f656:	7b05      	ldrb	r5, [r0, #12]
 800f658:	4606      	mov	r6, r0
 800f65a:	b9ad      	cbnz	r5, 800f688 <rmw_uxrce_init_topic_memory+0x38>
 800f65c:	231c      	movs	r3, #28
 800f65e:	e9c0 5500 	strd	r5, r5, [r0]
 800f662:	6083      	str	r3, [r0, #8]
 800f664:	f240 1301 	movw	r3, #257	@ 0x101
 800f668:	4617      	mov	r7, r2
 800f66a:	8183      	strh	r3, [r0, #12]
 800f66c:	460c      	mov	r4, r1
 800f66e:	46a8      	mov	r8, r5
 800f670:	4621      	mov	r1, r4
 800f672:	4630      	mov	r0, r6
 800f674:	3501      	adds	r5, #1
 800f676:	f004 f9f7 	bl	8013a68 <put_memory>
 800f67a:	42af      	cmp	r7, r5
 800f67c:	60a4      	str	r4, [r4, #8]
 800f67e:	f884 800c 	strb.w	r8, [r4, #12]
 800f682:	f104 041c 	add.w	r4, r4, #28
 800f686:	d1f3      	bne.n	800f670 <rmw_uxrce_init_topic_memory+0x20>
 800f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop

0800f690 <rmw_uxrce_init_static_input_buffer_memory>:
 800f690:	b1ea      	cbz	r2, 800f6ce <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f696:	7b05      	ldrb	r5, [r0, #12]
 800f698:	4606      	mov	r6, r0
 800f69a:	b9b5      	cbnz	r5, 800f6ca <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f69c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f6a0:	e9c0 5500 	strd	r5, r5, [r0]
 800f6a4:	6083      	str	r3, [r0, #8]
 800f6a6:	f240 1301 	movw	r3, #257	@ 0x101
 800f6aa:	4617      	mov	r7, r2
 800f6ac:	8183      	strh	r3, [r0, #12]
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	46a8      	mov	r8, r5
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	3501      	adds	r5, #1
 800f6b8:	f004 f9d6 	bl	8013a68 <put_memory>
 800f6bc:	42af      	cmp	r7, r5
 800f6be:	60a4      	str	r4, [r4, #8]
 800f6c0:	f884 800c 	strb.w	r8, [r4, #12]
 800f6c4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f6c8:	d1f3      	bne.n	800f6b2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ce:	4770      	bx	lr

0800f6d0 <rmw_uxrce_init_init_options_impl_memory>:
 800f6d0:	b1e2      	cbz	r2, 800f70c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d6:	7b05      	ldrb	r5, [r0, #12]
 800f6d8:	4606      	mov	r6, r0
 800f6da:	b9ad      	cbnz	r5, 800f708 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f6dc:	232c      	movs	r3, #44	@ 0x2c
 800f6de:	e9c0 5500 	strd	r5, r5, [r0]
 800f6e2:	6083      	str	r3, [r0, #8]
 800f6e4:	f240 1301 	movw	r3, #257	@ 0x101
 800f6e8:	4617      	mov	r7, r2
 800f6ea:	8183      	strh	r3, [r0, #12]
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	46a8      	mov	r8, r5
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	3501      	adds	r5, #1
 800f6f6:	f004 f9b7 	bl	8013a68 <put_memory>
 800f6fa:	42af      	cmp	r7, r5
 800f6fc:	60a4      	str	r4, [r4, #8]
 800f6fe:	f884 800c 	strb.w	r8, [r4, #12]
 800f702:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800f706:	d1f3      	bne.n	800f6f0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop

0800f710 <rmw_uxrce_init_wait_set_memory>:
 800f710:	b1e2      	cbz	r2, 800f74c <rmw_uxrce_init_wait_set_memory+0x3c>
 800f712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f716:	7b05      	ldrb	r5, [r0, #12]
 800f718:	4606      	mov	r6, r0
 800f71a:	b9ad      	cbnz	r5, 800f748 <rmw_uxrce_init_wait_set_memory+0x38>
 800f71c:	231c      	movs	r3, #28
 800f71e:	e9c0 5500 	strd	r5, r5, [r0]
 800f722:	6083      	str	r3, [r0, #8]
 800f724:	f240 1301 	movw	r3, #257	@ 0x101
 800f728:	4617      	mov	r7, r2
 800f72a:	8183      	strh	r3, [r0, #12]
 800f72c:	460c      	mov	r4, r1
 800f72e:	46a8      	mov	r8, r5
 800f730:	4621      	mov	r1, r4
 800f732:	4630      	mov	r0, r6
 800f734:	3501      	adds	r5, #1
 800f736:	f004 f997 	bl	8013a68 <put_memory>
 800f73a:	42af      	cmp	r7, r5
 800f73c:	60a4      	str	r4, [r4, #8]
 800f73e:	f884 800c 	strb.w	r8, [r4, #12]
 800f742:	f104 041c 	add.w	r4, r4, #28
 800f746:	d1f3      	bne.n	800f730 <rmw_uxrce_init_wait_set_memory+0x20>
 800f748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop

0800f750 <rmw_uxrce_init_guard_condition_memory>:
 800f750:	b1e2      	cbz	r2, 800f78c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f756:	7b05      	ldrb	r5, [r0, #12]
 800f758:	4606      	mov	r6, r0
 800f75a:	b9ad      	cbnz	r5, 800f788 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f75c:	2320      	movs	r3, #32
 800f75e:	e9c0 5500 	strd	r5, r5, [r0]
 800f762:	6083      	str	r3, [r0, #8]
 800f764:	f240 1301 	movw	r3, #257	@ 0x101
 800f768:	4617      	mov	r7, r2
 800f76a:	8183      	strh	r3, [r0, #12]
 800f76c:	460c      	mov	r4, r1
 800f76e:	46a8      	mov	r8, r5
 800f770:	4621      	mov	r1, r4
 800f772:	4630      	mov	r0, r6
 800f774:	3501      	adds	r5, #1
 800f776:	f004 f977 	bl	8013a68 <put_memory>
 800f77a:	42af      	cmp	r7, r5
 800f77c:	60a4      	str	r4, [r4, #8]
 800f77e:	f884 800c 	strb.w	r8, [r4, #12]
 800f782:	f104 0420 	add.w	r4, r4, #32
 800f786:	d1f3      	bne.n	800f770 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop

0800f790 <rmw_uxrce_fini_session_memory>:
 800f790:	4601      	mov	r1, r0
 800f792:	4801      	ldr	r0, [pc, #4]	@ (800f798 <rmw_uxrce_fini_session_memory+0x8>)
 800f794:	f004 b968 	b.w	8013a68 <put_memory>
 800f798:	2000dd4c 	.word	0x2000dd4c

0800f79c <rmw_uxrce_fini_node_memory>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4604      	mov	r4, r0
 800f7a0:	6800      	ldr	r0, [r0, #0]
 800f7a2:	b128      	cbz	r0, 800f7b0 <rmw_uxrce_fini_node_memory+0x14>
 800f7a4:	4b07      	ldr	r3, [pc, #28]	@ (800f7c4 <rmw_uxrce_fini_node_memory+0x28>)
 800f7a6:	6819      	ldr	r1, [r3, #0]
 800f7a8:	f7f0 fd1a 	bl	80001e0 <strcmp>
 800f7ac:	b940      	cbnz	r0, 800f7c0 <rmw_uxrce_fini_node_memory+0x24>
 800f7ae:	6020      	str	r0, [r4, #0]
 800f7b0:	6861      	ldr	r1, [r4, #4]
 800f7b2:	b129      	cbz	r1, 800f7c0 <rmw_uxrce_fini_node_memory+0x24>
 800f7b4:	2500      	movs	r5, #0
 800f7b6:	4804      	ldr	r0, [pc, #16]	@ (800f7c8 <rmw_uxrce_fini_node_memory+0x2c>)
 800f7b8:	610d      	str	r5, [r1, #16]
 800f7ba:	f004 f955 	bl	8013a68 <put_memory>
 800f7be:	6065      	str	r5, [r4, #4]
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	bf00      	nop
 800f7c4:	08016b68 	.word	0x08016b68
 800f7c8:	2000dd1c 	.word	0x2000dd1c

0800f7cc <rmw_uxrce_fini_publisher_memory>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	6800      	ldr	r0, [r0, #0]
 800f7d2:	b128      	cbz	r0, 800f7e0 <rmw_uxrce_fini_publisher_memory+0x14>
 800f7d4:	4b06      	ldr	r3, [pc, #24]	@ (800f7f0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f7d6:	6819      	ldr	r1, [r3, #0]
 800f7d8:	f7f0 fd02 	bl	80001e0 <strcmp>
 800f7dc:	b938      	cbnz	r0, 800f7ee <rmw_uxrce_fini_publisher_memory+0x22>
 800f7de:	6020      	str	r0, [r4, #0]
 800f7e0:	6861      	ldr	r1, [r4, #4]
 800f7e2:	b121      	cbz	r1, 800f7ee <rmw_uxrce_fini_publisher_memory+0x22>
 800f7e4:	4803      	ldr	r0, [pc, #12]	@ (800f7f4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f7e6:	f004 f93f 	bl	8013a68 <put_memory>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	6063      	str	r3, [r4, #4]
 800f7ee:	bd10      	pop	{r4, pc}
 800f7f0:	08016b68 	.word	0x08016b68
 800f7f4:	2000dd2c 	.word	0x2000dd2c

0800f7f8 <rmw_uxrce_fini_subscription_memory>:
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	6800      	ldr	r0, [r0, #0]
 800f7fe:	b128      	cbz	r0, 800f80c <rmw_uxrce_fini_subscription_memory+0x14>
 800f800:	4b06      	ldr	r3, [pc, #24]	@ (800f81c <rmw_uxrce_fini_subscription_memory+0x24>)
 800f802:	6819      	ldr	r1, [r3, #0]
 800f804:	f7f0 fcec 	bl	80001e0 <strcmp>
 800f808:	b938      	cbnz	r0, 800f81a <rmw_uxrce_fini_subscription_memory+0x22>
 800f80a:	6020      	str	r0, [r4, #0]
 800f80c:	6861      	ldr	r1, [r4, #4]
 800f80e:	b121      	cbz	r1, 800f81a <rmw_uxrce_fini_subscription_memory+0x22>
 800f810:	4803      	ldr	r0, [pc, #12]	@ (800f820 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f812:	f004 f929 	bl	8013a68 <put_memory>
 800f816:	2300      	movs	r3, #0
 800f818:	6063      	str	r3, [r4, #4]
 800f81a:	bd10      	pop	{r4, pc}
 800f81c:	08016b68 	.word	0x08016b68
 800f820:	2000dd6c 	.word	0x2000dd6c

0800f824 <rmw_uxrce_fini_service_memory>:
 800f824:	b510      	push	{r4, lr}
 800f826:	4604      	mov	r4, r0
 800f828:	6800      	ldr	r0, [r0, #0]
 800f82a:	b128      	cbz	r0, 800f838 <rmw_uxrce_fini_service_memory+0x14>
 800f82c:	4b06      	ldr	r3, [pc, #24]	@ (800f848 <rmw_uxrce_fini_service_memory+0x24>)
 800f82e:	6819      	ldr	r1, [r3, #0]
 800f830:	f7f0 fcd6 	bl	80001e0 <strcmp>
 800f834:	b938      	cbnz	r0, 800f846 <rmw_uxrce_fini_service_memory+0x22>
 800f836:	6020      	str	r0, [r4, #0]
 800f838:	6861      	ldr	r1, [r4, #4]
 800f83a:	b121      	cbz	r1, 800f846 <rmw_uxrce_fini_service_memory+0x22>
 800f83c:	4803      	ldr	r0, [pc, #12]	@ (800f84c <rmw_uxrce_fini_service_memory+0x28>)
 800f83e:	f004 f913 	bl	8013a68 <put_memory>
 800f842:	2300      	movs	r3, #0
 800f844:	6063      	str	r3, [r4, #4]
 800f846:	bd10      	pop	{r4, pc}
 800f848:	08016b68 	.word	0x08016b68
 800f84c:	2000dd3c 	.word	0x2000dd3c

0800f850 <rmw_uxrce_fini_client_memory>:
 800f850:	b510      	push	{r4, lr}
 800f852:	4604      	mov	r4, r0
 800f854:	6800      	ldr	r0, [r0, #0]
 800f856:	b128      	cbz	r0, 800f864 <rmw_uxrce_fini_client_memory+0x14>
 800f858:	4b06      	ldr	r3, [pc, #24]	@ (800f874 <rmw_uxrce_fini_client_memory+0x24>)
 800f85a:	6819      	ldr	r1, [r3, #0]
 800f85c:	f7f0 fcc0 	bl	80001e0 <strcmp>
 800f860:	b938      	cbnz	r0, 800f872 <rmw_uxrce_fini_client_memory+0x22>
 800f862:	6020      	str	r0, [r4, #0]
 800f864:	6861      	ldr	r1, [r4, #4]
 800f866:	b121      	cbz	r1, 800f872 <rmw_uxrce_fini_client_memory+0x22>
 800f868:	4803      	ldr	r0, [pc, #12]	@ (800f878 <rmw_uxrce_fini_client_memory+0x28>)
 800f86a:	f004 f8fd 	bl	8013a68 <put_memory>
 800f86e:	2300      	movs	r3, #0
 800f870:	6063      	str	r3, [r4, #4]
 800f872:	bd10      	pop	{r4, pc}
 800f874:	08016b68 	.word	0x08016b68
 800f878:	20009450 	.word	0x20009450

0800f87c <rmw_uxrce_fini_topic_memory>:
 800f87c:	b510      	push	{r4, lr}
 800f87e:	4604      	mov	r4, r0
 800f880:	4621      	mov	r1, r4
 800f882:	4803      	ldr	r0, [pc, #12]	@ (800f890 <rmw_uxrce_fini_topic_memory+0x14>)
 800f884:	f004 f8f0 	bl	8013a68 <put_memory>
 800f888:	2300      	movs	r3, #0
 800f88a:	61a3      	str	r3, [r4, #24]
 800f88c:	bd10      	pop	{r4, pc}
 800f88e:	bf00      	nop
 800f890:	2000dd7c 	.word	0x2000dd7c

0800f894 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f894:	b082      	sub	sp, #8
 800f896:	b530      	push	{r4, r5, lr}
 800f898:	4925      	ldr	r1, [pc, #148]	@ (800f930 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f89a:	680d      	ldr	r5, [r1, #0]
 800f89c:	ac03      	add	r4, sp, #12
 800f89e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f8a2:	461c      	mov	r4, r3
 800f8a4:	2d00      	cmp	r5, #0
 800f8a6:	d041      	beq.n	800f92c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f8a8:	462b      	mov	r3, r5
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	689a      	ldr	r2, [r3, #8]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f8b4:	4290      	cmp	r0, r2
 800f8b6:	bf08      	it	eq
 800f8b8:	3101      	addeq	r1, #1
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1f6      	bne.n	800f8ac <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f8be:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f8c2:	2b02      	cmp	r3, #2
 800f8c4:	d029      	beq.n	800f91a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f8c6:	d907      	bls.n	800f8d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f8c8:	2b03      	cmp	r3, #3
 800f8ca:	d005      	beq.n	800f8d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8d2:	4608      	mov	r0, r1
 800f8d4:	b002      	add	sp, #8
 800f8d6:	4770      	bx	lr
 800f8d8:	b314      	cbz	r4, 800f920 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f8da:	428c      	cmp	r4, r1
 800f8dc:	d820      	bhi.n	800f920 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f8de:	2d00      	cmp	r5, #0
 800f8e0:	d0f4      	beq.n	800f8cc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f8e8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f8ec:	e002      	b.n	800f8f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f8ee:	686d      	ldr	r5, [r5, #4]
 800f8f0:	2d00      	cmp	r5, #0
 800f8f2:	d0ec      	beq.n	800f8ce <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f8f4:	68ab      	ldr	r3, [r5, #8]
 800f8f6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f8fa:	4290      	cmp	r0, r2
 800f8fc:	d1f7      	bne.n	800f8ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f8fe:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800f902:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f906:	4562      	cmp	r2, ip
 800f908:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f90c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f910:	daed      	bge.n	800f8ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f912:	4694      	mov	ip, r2
 800f914:	461c      	mov	r4, r3
 800f916:	4629      	mov	r1, r5
 800f918:	e7e9      	b.n	800f8ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f91a:	b10c      	cbz	r4, 800f920 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f91c:	428c      	cmp	r4, r1
 800f91e:	d9d5      	bls.n	800f8cc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f924:	4802      	ldr	r0, [pc, #8]	@ (800f930 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f926:	b002      	add	sp, #8
 800f928:	f004 b88e 	b.w	8013a48 <get_memory>
 800f92c:	4629      	mov	r1, r5
 800f92e:	e7c6      	b.n	800f8be <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f930:	2000dd5c 	.word	0x2000dd5c

0800f934 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f934:	4b11      	ldr	r3, [pc, #68]	@ (800f97c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	b530      	push	{r4, r5, lr}
 800f93a:	b1e3      	cbz	r3, 800f976 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f93c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f940:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f944:	2400      	movs	r4, #0
 800f946:	e001      	b.n	800f94c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	b193      	cbz	r3, 800f972 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f94c:	689a      	ldr	r2, [r3, #8]
 800f94e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f952:	4288      	cmp	r0, r1
 800f954:	d1f8      	bne.n	800f948 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f956:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f95a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f95e:	4571      	cmp	r1, lr
 800f960:	eb72 050c 	sbcs.w	r5, r2, ip
 800f964:	daf0      	bge.n	800f948 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f966:	461c      	mov	r4, r3
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	468e      	mov	lr, r1
 800f96c:	4694      	mov	ip, r2
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1ec      	bne.n	800f94c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f972:	4620      	mov	r0, r4
 800f974:	bd30      	pop	{r4, r5, pc}
 800f976:	461c      	mov	r4, r3
 800f978:	4620      	mov	r0, r4
 800f97a:	bd30      	pop	{r4, r5, pc}
 800f97c:	2000dd5c 	.word	0x2000dd5c

0800f980 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	4b3c      	ldr	r3, [pc, #240]	@ (800fa78 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f986:	ed2d 8b06 	vpush	{d8-d10}
 800f98a:	681f      	ldr	r7, [r3, #0]
 800f98c:	b08d      	sub	sp, #52	@ 0x34
 800f98e:	f004 f919 	bl	8013bc4 <rmw_uros_epoch_nanos>
 800f992:	2f00      	cmp	r7, #0
 800f994:	d05d      	beq.n	800fa52 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f996:	46b8      	mov	r8, r7
 800f998:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800fa60 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f99c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f9a0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f9a4:	2b04      	cmp	r3, #4
 800f9a6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800fa68 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f9aa:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800fa70 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f9ae:	4681      	mov	r9, r0
 800f9b0:	468a      	mov	sl, r1
 800f9b2:	ac04      	add	r4, sp, #16
 800f9b4:	d03f      	beq.n	800fa36 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f9b6:	2b05      	cmp	r3, #5
 800f9b8:	d044      	beq.n	800fa44 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f9ba:	2b03      	cmp	r3, #3
 800f9bc:	d03b      	beq.n	800fa36 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f9be:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f9c2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f9c6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f9ca:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f9ce:	ab08      	add	r3, sp, #32
 800f9d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f9d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f9da:	f003 fec9 	bl	8013770 <rmw_time_equal>
 800f9de:	b118      	cbz	r0, 800f9e8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f9e0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f9e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f9e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f9ec:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f9f0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f9f4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f9f8:	f003 ff0e 	bl	8013818 <rmw_time_total_nsec>
 800f9fc:	1830      	adds	r0, r6, r0
 800f9fe:	eb47 0101 	adc.w	r1, r7, r1
 800fa02:	4548      	cmp	r0, r9
 800fa04:	eb71 030a 	sbcs.w	r3, r1, sl
 800fa08:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800fa0c:	db05      	blt.n	800fa1a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800fa0e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800fa12:	4591      	cmp	r9, r2
 800fa14:	eb7a 0303 	sbcs.w	r3, sl, r3
 800fa18:	da03      	bge.n	800fa22 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800fa1a:	4817      	ldr	r0, [pc, #92]	@ (800fa78 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800fa1c:	4641      	mov	r1, r8
 800fa1e:	f004 f823 	bl	8013a68 <put_memory>
 800fa22:	f1bb 0f00 	cmp.w	fp, #0
 800fa26:	d014      	beq.n	800fa52 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fa28:	46d8      	mov	r8, fp
 800fa2a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fa2e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fa32:	2b04      	cmp	r3, #4
 800fa34:	d1bf      	bne.n	800f9b6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800fa36:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fa3a:	3340      	adds	r3, #64	@ 0x40
 800fa3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fa42:	e7c0      	b.n	800f9c6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fa44:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fa48:	3348      	adds	r3, #72	@ 0x48
 800fa4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fa50:	e7b9      	b.n	800f9c6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fa52:	b00d      	add	sp, #52	@ 0x34
 800fa54:	ecbd 8b06 	vpop	{d8-d10}
 800fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5c:	f3af 8000 	nop.w
	...
 800fa68:	00000001 	.word	0x00000001
 800fa6c:	00000000 	.word	0x00000000
 800fa70:	0000001e 	.word	0x0000001e
 800fa74:	00000000 	.word	0x00000000
 800fa78:	2000dd5c 	.word	0x2000dd5c

0800fa7c <run_xrce_session>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	788c      	ldrb	r4, [r1, #2]
 800fa80:	b086      	sub	sp, #24
 800fa82:	2c01      	cmp	r4, #1
 800fa84:	f8ad 200e 	strh.w	r2, [sp, #14]
 800fa88:	d00c      	beq.n	800faa4 <run_xrce_session+0x28>
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	f10d 020e 	add.w	r2, sp, #14
 800fa94:	f10d 0317 	add.w	r3, sp, #23
 800fa98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa9c:	f001 f93e 	bl	8010d1c <uxr_run_session_until_all_status>
 800faa0:	b006      	add	sp, #24
 800faa2:	bd10      	pop	{r4, pc}
 800faa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800faa8:	f000 fd52 	bl	8010550 <uxr_flash_output_streams>
 800faac:	4620      	mov	r0, r4
 800faae:	b006      	add	sp, #24
 800fab0:	bd10      	pop	{r4, pc}
 800fab2:	bf00      	nop

0800fab4 <convert_qos_profile>:
 800fab4:	7a4a      	ldrb	r2, [r1, #9]
 800fab6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800faba:	2a02      	cmp	r2, #2
 800fabc:	bf18      	it	ne
 800fabe:	2200      	movne	r2, #0
 800fac0:	7002      	strb	r2, [r0, #0]
 800fac2:	780a      	ldrb	r2, [r1, #0]
 800fac4:	8889      	ldrh	r1, [r1, #4]
 800fac6:	8081      	strh	r1, [r0, #4]
 800fac8:	f1ac 0c02 	sub.w	ip, ip, #2
 800facc:	f1a2 0202 	sub.w	r2, r2, #2
 800fad0:	fabc fc8c 	clz	ip, ip
 800fad4:	fab2 f282 	clz	r2, r2
 800fad8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800fadc:	0952      	lsrs	r2, r2, #5
 800fade:	f880 c001 	strb.w	ip, [r0, #1]
 800fae2:	7082      	strb	r2, [r0, #2]
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop

0800fae8 <generate_type_name>:
 800fae8:	b530      	push	{r4, r5, lr}
 800faea:	2300      	movs	r3, #0
 800faec:	700b      	strb	r3, [r1, #0]
 800faee:	6803      	ldr	r3, [r0, #0]
 800faf0:	b087      	sub	sp, #28
 800faf2:	4614      	mov	r4, r2
 800faf4:	b1d3      	cbz	r3, 800fb2c <generate_type_name+0x44>
 800faf6:	4a0f      	ldr	r2, [pc, #60]	@ (800fb34 <generate_type_name+0x4c>)
 800faf8:	4615      	mov	r5, r2
 800fafa:	9203      	str	r2, [sp, #12]
 800fafc:	9500      	str	r5, [sp, #0]
 800fafe:	6842      	ldr	r2, [r0, #4]
 800fb00:	480d      	ldr	r0, [pc, #52]	@ (800fb38 <generate_type_name+0x50>)
 800fb02:	9001      	str	r0, [sp, #4]
 800fb04:	4608      	mov	r0, r1
 800fb06:	490d      	ldr	r1, [pc, #52]	@ (800fb3c <generate_type_name+0x54>)
 800fb08:	9204      	str	r2, [sp, #16]
 800fb0a:	9105      	str	r1, [sp, #20]
 800fb0c:	9102      	str	r1, [sp, #8]
 800fb0e:	4a0c      	ldr	r2, [pc, #48]	@ (800fb40 <generate_type_name+0x58>)
 800fb10:	4621      	mov	r1, r4
 800fb12:	f005 fa47 	bl	8014fa4 <sniprintf>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	db05      	blt.n	800fb26 <generate_type_name+0x3e>
 800fb1a:	4284      	cmp	r4, r0
 800fb1c:	bfd4      	ite	le
 800fb1e:	2000      	movle	r0, #0
 800fb20:	2001      	movgt	r0, #1
 800fb22:	b007      	add	sp, #28
 800fb24:	bd30      	pop	{r4, r5, pc}
 800fb26:	2000      	movs	r0, #0
 800fb28:	b007      	add	sp, #28
 800fb2a:	bd30      	pop	{r4, r5, pc}
 800fb2c:	4b05      	ldr	r3, [pc, #20]	@ (800fb44 <generate_type_name+0x5c>)
 800fb2e:	4a01      	ldr	r2, [pc, #4]	@ (800fb34 <generate_type_name+0x4c>)
 800fb30:	461d      	mov	r5, r3
 800fb32:	e7e2      	b.n	800fafa <generate_type_name+0x12>
 800fb34:	080168dc 	.word	0x080168dc
 800fb38:	080168f4 	.word	0x080168f4
 800fb3c:	080168f0 	.word	0x080168f0
 800fb40:	080168e0 	.word	0x080168e0
 800fb44:	080166cc 	.word	0x080166cc

0800fb48 <generate_topic_name>:
 800fb48:	b510      	push	{r4, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	4614      	mov	r4, r2
 800fb4e:	9000      	str	r0, [sp, #0]
 800fb50:	4b08      	ldr	r3, [pc, #32]	@ (800fb74 <generate_topic_name+0x2c>)
 800fb52:	4a09      	ldr	r2, [pc, #36]	@ (800fb78 <generate_topic_name+0x30>)
 800fb54:	4608      	mov	r0, r1
 800fb56:	4621      	mov	r1, r4
 800fb58:	f005 fa24 	bl	8014fa4 <sniprintf>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	db05      	blt.n	800fb6c <generate_topic_name+0x24>
 800fb60:	4284      	cmp	r4, r0
 800fb62:	bfd4      	ite	le
 800fb64:	2000      	movle	r0, #0
 800fb66:	2001      	movgt	r0, #1
 800fb68:	b002      	add	sp, #8
 800fb6a:	bd10      	pop	{r4, pc}
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	b002      	add	sp, #8
 800fb70:	bd10      	pop	{r4, pc}
 800fb72:	bf00      	nop
 800fb74:	080168f8 	.word	0x080168f8
 800fb78:	08016438 	.word	0x08016438

0800fb7c <is_uxrce_rmw_identifier_valid>:
 800fb7c:	b510      	push	{r4, lr}
 800fb7e:	4604      	mov	r4, r0
 800fb80:	b140      	cbz	r0, 800fb94 <is_uxrce_rmw_identifier_valid+0x18>
 800fb82:	f7fe fbc5 	bl	800e310 <rmw_get_implementation_identifier>
 800fb86:	4601      	mov	r1, r0
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f7f0 fb29 	bl	80001e0 <strcmp>
 800fb8e:	fab0 f080 	clz	r0, r0
 800fb92:	0940      	lsrs	r0, r0, #5
 800fb94:	bd10      	pop	{r4, pc}
 800fb96:	bf00      	nop

0800fb98 <get_message_typesupport_handle>:
 800fb98:	6883      	ldr	r3, [r0, #8]
 800fb9a:	4718      	bx	r3

0800fb9c <get_message_typesupport_handle_function>:
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	4604      	mov	r4, r0
 800fba0:	6800      	ldr	r0, [r0, #0]
 800fba2:	f7f0 fb1d 	bl	80001e0 <strcmp>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	bf0c      	ite	eq
 800fbaa:	4620      	moveq	r0, r4
 800fbac:	2000      	movne	r0, #0
 800fbae:	bd10      	pop	{r4, pc}

0800fbb0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800fbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb4:	6805      	ldr	r5, [r0, #0]
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	4628      	mov	r0, r5
 800fbba:	460e      	mov	r6, r1
 800fbbc:	f7f0 fb10 	bl	80001e0 <strcmp>
 800fbc0:	b1c8      	cbz	r0, 800fbf6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800fbc2:	4b11      	ldr	r3, [pc, #68]	@ (800fc08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	429d      	cmp	r5, r3
 800fbc8:	d112      	bne.n	800fbf0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fbca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fbce:	f8d8 4000 	ldr.w	r4, [r8]
 800fbd2:	b16c      	cbz	r4, 800fbf0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800fbd4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fbd8:	2700      	movs	r7, #0
 800fbda:	3d04      	subs	r5, #4
 800fbdc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	f7f0 fafd 	bl	80001e0 <strcmp>
 800fbe6:	00bb      	lsls	r3, r7, #2
 800fbe8:	b140      	cbz	r0, 800fbfc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800fbea:	3701      	adds	r7, #1
 800fbec:	42bc      	cmp	r4, r7
 800fbee:	d1f5      	bne.n	800fbdc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc04:	58d3      	ldr	r3, [r2, r3]
 800fc06:	4718      	bx	r3
 800fc08:	2000033c 	.word	0x2000033c

0800fc0c <rover_msgs__msg__ControllerMsg__init>:
 800fc0c:	3800      	subs	r0, #0
 800fc0e:	bf18      	it	ne
 800fc10:	2001      	movne	r0, #1
 800fc12:	4770      	bx	lr

0800fc14 <rover_msgs__msg__ControllerMsg__fini>:
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop

0800fc18 <uxr_buffer_delete_entity>:
 800fc18:	b510      	push	{r4, lr}
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	b08e      	sub	sp, #56	@ 0x38
 800fc1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fc22:	2303      	movs	r3, #3
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	2204      	movs	r2, #4
 800fc28:	ab06      	add	r3, sp, #24
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	9103      	str	r1, [sp, #12]
 800fc2e:	f001 fa9d 	bl	801116c <uxr_prepare_stream_to_write_submessage>
 800fc32:	b918      	cbnz	r0, 800fc3c <uxr_buffer_delete_entity+0x24>
 800fc34:	4604      	mov	r4, r0
 800fc36:	4620      	mov	r0, r4
 800fc38:	b00e      	add	sp, #56	@ 0x38
 800fc3a:	bd10      	pop	{r4, pc}
 800fc3c:	9902      	ldr	r1, [sp, #8]
 800fc3e:	aa05      	add	r2, sp, #20
 800fc40:	4620      	mov	r0, r4
 800fc42:	f001 fbc9 	bl	80113d8 <uxr_init_base_object_request>
 800fc46:	a905      	add	r1, sp, #20
 800fc48:	4604      	mov	r4, r0
 800fc4a:	a806      	add	r0, sp, #24
 800fc4c:	f003 f87c 	bl	8012d48 <uxr_serialize_DELETE_Payload>
 800fc50:	4620      	mov	r0, r4
 800fc52:	b00e      	add	sp, #56	@ 0x38
 800fc54:	bd10      	pop	{r4, pc}
 800fc56:	bf00      	nop

0800fc58 <uxr_common_create_entity>:
 800fc58:	b510      	push	{r4, lr}
 800fc5a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fc5e:	b08c      	sub	sp, #48	@ 0x30
 800fc60:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fc64:	f1bc 0f01 	cmp.w	ip, #1
 800fc68:	bf0c      	ite	eq
 800fc6a:	f003 0201 	andeq.w	r2, r3, #1
 800fc6e:	2200      	movne	r2, #0
 800fc70:	330e      	adds	r3, #14
 800fc72:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fc76:	9101      	str	r1, [sp, #4]
 800fc78:	441a      	add	r2, r3
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	9903      	ldr	r1, [sp, #12]
 800fc80:	ab04      	add	r3, sp, #16
 800fc82:	b292      	uxth	r2, r2
 800fc84:	4604      	mov	r4, r0
 800fc86:	f001 fa71 	bl	801116c <uxr_prepare_stream_to_write_submessage>
 800fc8a:	b918      	cbnz	r0, 800fc94 <uxr_common_create_entity+0x3c>
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	4620      	mov	r0, r4
 800fc90:	b00c      	add	sp, #48	@ 0x30
 800fc92:	bd10      	pop	{r4, pc}
 800fc94:	9902      	ldr	r1, [sp, #8]
 800fc96:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f001 fb9d 	bl	80113d8 <uxr_init_base_object_request>
 800fc9e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fca0:	4604      	mov	r4, r0
 800fca2:	a804      	add	r0, sp, #16
 800fca4:	f002 ffac 	bl	8012c00 <uxr_serialize_CREATE_Payload>
 800fca8:	4620      	mov	r0, r4
 800fcaa:	b00c      	add	sp, #48	@ 0x30
 800fcac:	bd10      	pop	{r4, pc}
 800fcae:	bf00      	nop

0800fcb0 <uxr_buffer_create_participant_bin>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fcb6:	ac11      	add	r4, sp, #68	@ 0x44
 800fcb8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fcc2:	7223      	strb	r3, [r4, #8]
 800fcc4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fcc6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fcca:	2201      	movs	r2, #1
 800fccc:	2100      	movs	r1, #0
 800fcce:	4605      	mov	r5, r0
 800fcd0:	7122      	strb	r2, [r4, #4]
 800fcd2:	f88d 1014 	strb.w	r1, [sp, #20]
 800fcd6:	b1cb      	cbz	r3, 800fd0c <uxr_buffer_create_participant_bin+0x5c>
 800fcd8:	f88d 201c 	strb.w	r2, [sp, #28]
 800fcdc:	9308      	str	r3, [sp, #32]
 800fcde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fce2:	a915      	add	r1, sp, #84	@ 0x54
 800fce4:	a809      	add	r0, sp, #36	@ 0x24
 800fce6:	f7fb f995 	bl	800b014 <ucdr_init_buffer>
 800fcea:	a905      	add	r1, sp, #20
 800fcec:	a809      	add	r0, sp, #36	@ 0x24
 800fcee:	f002 fc45 	bl	801257c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fcf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcf4:	9600      	str	r6, [sp, #0]
 800fcf6:	9401      	str	r4, [sp, #4]
 800fcf8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fcfc:	60e3      	str	r3, [r4, #12]
 800fcfe:	4628      	mov	r0, r5
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	f7ff ffa9 	bl	800fc58 <uxr_common_create_entity>
 800fd06:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fd0a:	bd70      	pop	{r4, r5, r6, pc}
 800fd0c:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd10:	e7e5      	b.n	800fcde <uxr_buffer_create_participant_bin+0x2e>
 800fd12:	bf00      	nop

0800fd14 <uxr_buffer_create_topic_bin>:
 800fd14:	b570      	push	{r4, r5, r6, lr}
 800fd16:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fd1a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd1e:	9105      	str	r1, [sp, #20]
 800fd20:	4605      	mov	r5, r0
 800fd22:	a997      	add	r1, sp, #604	@ 0x25c
 800fd24:	4618      	mov	r0, r3
 800fd26:	2302      	movs	r3, #2
 800fd28:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fd2c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fd30:	f000 f9b2 	bl	8010098 <uxr_object_id_to_raw>
 800fd34:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fd36:	9306      	str	r3, [sp, #24]
 800fd38:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fd3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fd42:	2301      	movs	r3, #1
 800fd44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd48:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fd4c:	a917      	add	r1, sp, #92	@ 0x5c
 800fd4e:	2300      	movs	r3, #0
 800fd50:	a80b      	add	r0, sp, #44	@ 0x2c
 800fd52:	f88d 301c 	strb.w	r3, [sp, #28]
 800fd56:	f7fb f95d 	bl	800b014 <ucdr_init_buffer>
 800fd5a:	a906      	add	r1, sp, #24
 800fd5c:	a80b      	add	r0, sp, #44	@ 0x2c
 800fd5e:	f002 fc2f 	bl	80125c0 <uxr_serialize_OBJK_Topic_Binary>
 800fd62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd64:	9316      	str	r3, [sp, #88]	@ 0x58
 800fd66:	ac13      	add	r4, sp, #76	@ 0x4c
 800fd68:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd6c:	9600      	str	r6, [sp, #0]
 800fd6e:	9401      	str	r4, [sp, #4]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	4628      	mov	r0, r5
 800fd74:	f7ff ff70 	bl	800fc58 <uxr_common_create_entity>
 800fd78:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
 800fd7e:	bf00      	nop

0800fd80 <uxr_buffer_create_subscriber_bin>:
 800fd80:	b570      	push	{r4, r5, r6, lr}
 800fd82:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fd86:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd8a:	9105      	str	r1, [sp, #20]
 800fd8c:	4605      	mov	r5, r0
 800fd8e:	a992      	add	r1, sp, #584	@ 0x248
 800fd90:	4618      	mov	r0, r3
 800fd92:	2304      	movs	r3, #4
 800fd94:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fd98:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fd9c:	f000 f97c 	bl	8010098 <uxr_object_id_to_raw>
 800fda0:	2300      	movs	r3, #0
 800fda2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fda6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fdaa:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fdae:	a912      	add	r1, sp, #72	@ 0x48
 800fdb0:	2303      	movs	r3, #3
 800fdb2:	a806      	add	r0, sp, #24
 800fdb4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800fdb8:	f7fb f92c 	bl	800b014 <ucdr_init_buffer>
 800fdbc:	a993      	add	r1, sp, #588	@ 0x24c
 800fdbe:	a806      	add	r0, sp, #24
 800fdc0:	f002 fcb2 	bl	8012728 <uxr_serialize_OBJK_Subscriber_Binary>
 800fdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdc6:	9311      	str	r3, [sp, #68]	@ 0x44
 800fdc8:	ac0e      	add	r4, sp, #56	@ 0x38
 800fdca:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fdce:	9600      	str	r6, [sp, #0]
 800fdd0:	9401      	str	r4, [sp, #4]
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	f7ff ff3f 	bl	800fc58 <uxr_common_create_entity>
 800fdda:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fdde:	bd70      	pop	{r4, r5, r6, pc}

0800fde0 <uxr_buffer_create_datareader_bin>:
 800fde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fde8:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fdea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fdee:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800fdf2:	9105      	str	r1, [sp, #20]
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	a9a3      	add	r1, sp, #652	@ 0x28c
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	2306      	movs	r3, #6
 800fdfc:	7123      	strb	r3, [r4, #4]
 800fdfe:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800fe02:	2703      	movs	r7, #3
 800fe04:	f000 f948 	bl	8010098 <uxr_object_id_to_raw>
 800fe08:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800fe0a:	7227      	strb	r7, [r4, #8]
 800fe0c:	a90e      	add	r1, sp, #56	@ 0x38
 800fe0e:	f000 f943 	bl	8010098 <uxr_object_id_to_raw>
 800fe12:	2300      	movs	r3, #0
 800fe14:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fe18:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800fe1c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800fe20:	3d00      	subs	r5, #0
 800fe22:	bf18      	it	ne
 800fe24:	2501      	movne	r5, #1
 800fe26:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fe2a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fe2e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fe32:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fe36:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fe40:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fe44:	bb8a      	cbnz	r2, 800feaa <uxr_buffer_create_datareader_bin+0xca>
 800fe46:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fe4a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fe4e:	f04f 0c13 	mov.w	ip, #19
 800fe52:	250b      	movs	r5, #11
 800fe54:	2221      	movs	r2, #33	@ 0x21
 800fe56:	2111      	movs	r1, #17
 800fe58:	2009      	movs	r0, #9
 800fe5a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800fe5e:	b923      	cbnz	r3, 800fe6a <uxr_buffer_create_datareader_bin+0x8a>
 800fe60:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fe64:	4672      	mov	r2, lr
 800fe66:	4661      	mov	r1, ip
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d025      	beq.n	800febe <uxr_buffer_create_datareader_bin+0xde>
 800fe72:	2b03      	cmp	r3, #3
 800fe74:	d029      	beq.n	800feca <uxr_buffer_create_datareader_bin+0xea>
 800fe76:	b32b      	cbz	r3, 800fec4 <uxr_buffer_create_datareader_bin+0xe4>
 800fe78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe7c:	a923      	add	r1, sp, #140	@ 0x8c
 800fe7e:	a806      	add	r0, sp, #24
 800fe80:	f7fb f8c8 	bl	800b014 <ucdr_init_buffer>
 800fe84:	a90e      	add	r1, sp, #56	@ 0x38
 800fe86:	a806      	add	r0, sp, #24
 800fe88:	f002 fcc4 	bl	8012814 <uxr_serialize_OBJK_DataReader_Binary>
 800fe8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe8e:	f8cd 8000 	str.w	r8, [sp]
 800fe92:	9401      	str	r4, [sp, #4]
 800fe94:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe98:	60e3      	str	r3, [r4, #12]
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	f7ff fedb 	bl	800fc58 <uxr_common_create_entity>
 800fea2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feaa:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800feae:	f04f 0c12 	mov.w	ip, #18
 800feb2:	250a      	movs	r5, #10
 800feb4:	2220      	movs	r2, #32
 800feb6:	2110      	movs	r1, #16
 800feb8:	2008      	movs	r0, #8
 800feba:	2702      	movs	r7, #2
 800febc:	e7cd      	b.n	800fe5a <uxr_buffer_create_datareader_bin+0x7a>
 800febe:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fec2:	e7d9      	b.n	800fe78 <uxr_buffer_create_datareader_bin+0x98>
 800fec4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fec8:	e7d6      	b.n	800fe78 <uxr_buffer_create_datareader_bin+0x98>
 800feca:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fece:	e7d3      	b.n	800fe78 <uxr_buffer_create_datareader_bin+0x98>

0800fed0 <get_custom_error>:
 800fed0:	4b01      	ldr	r3, [pc, #4]	@ (800fed8 <get_custom_error+0x8>)
 800fed2:	7818      	ldrb	r0, [r3, #0]
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	2000dd9c 	.word	0x2000dd9c

0800fedc <recv_custom_msg>:
 800fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee0:	4693      	mov	fp, r2
 800fee2:	b089      	sub	sp, #36	@ 0x24
 800fee4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fee8:	9305      	str	r3, [sp, #20]
 800feea:	468a      	mov	sl, r1
 800feec:	2100      	movs	r1, #0
 800feee:	4604      	mov	r4, r0
 800fef0:	f88d 101e 	strb.w	r1, [sp, #30]
 800fef4:	b322      	cbz	r2, 800ff40 <recv_custom_msg+0x64>
 800fef6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fefa:	f10d 081f 	add.w	r8, sp, #31
 800fefe:	af05      	add	r7, sp, #20
 800ff00:	f10d 061e 	add.w	r6, sp, #30
 800ff04:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ff08:	e002      	b.n	800ff10 <recv_custom_msg+0x34>
 800ff0a:	9b05      	ldr	r3, [sp, #20]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	dd0f      	ble.n	800ff30 <recv_custom_msg+0x54>
 800ff10:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ff14:	4623      	mov	r3, r4
 800ff16:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ff1a:	e9cd 5600 	strd	r5, r6, [sp]
 800ff1e:	4622      	mov	r2, r4
 800ff20:	4648      	mov	r0, r9
 800ff22:	f001 fc87 	bl	8011834 <uxr_read_framed_msg>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	d0ef      	beq.n	800ff0a <recv_custom_msg+0x2e>
 800ff2a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ff2e:	b1b3      	cbz	r3, 800ff5e <recv_custom_msg+0x82>
 800ff30:	4b0f      	ldr	r3, [pc, #60]	@ (800ff70 <recv_custom_msg+0x94>)
 800ff32:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ff36:	701a      	strb	r2, [r3, #0]
 800ff38:	2000      	movs	r0, #0
 800ff3a:	b009      	add	sp, #36	@ 0x24
 800ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff40:	f10d 021f 	add.w	r2, sp, #31
 800ff44:	9200      	str	r2, [sp, #0]
 800ff46:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ff4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff4e:	4601      	mov	r1, r0
 800ff50:	47a8      	blx	r5
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d0ec      	beq.n	800ff30 <recv_custom_msg+0x54>
 800ff56:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d1e8      	bne.n	800ff30 <recv_custom_msg+0x54>
 800ff5e:	f8cb 0000 	str.w	r0, [fp]
 800ff62:	2001      	movs	r0, #1
 800ff64:	f8ca 4000 	str.w	r4, [sl]
 800ff68:	b009      	add	sp, #36	@ 0x24
 800ff6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6e:	bf00      	nop
 800ff70:	2000dd9c 	.word	0x2000dd9c

0800ff74 <send_custom_msg>:
 800ff74:	b530      	push	{r4, r5, lr}
 800ff76:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800ff7a:	b087      	sub	sp, #28
 800ff7c:	4615      	mov	r5, r2
 800ff7e:	b974      	cbnz	r4, 800ff9e <send_custom_msg+0x2a>
 800ff80:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800ff84:	f10d 0317 	add.w	r3, sp, #23
 800ff88:	47a0      	blx	r4
 800ff8a:	b108      	cbz	r0, 800ff90 <send_custom_msg+0x1c>
 800ff8c:	42a8      	cmp	r0, r5
 800ff8e:	d015      	beq.n	800ffbc <send_custom_msg+0x48>
 800ff90:	4b0c      	ldr	r3, [pc, #48]	@ (800ffc4 <send_custom_msg+0x50>)
 800ff92:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ff96:	701a      	strb	r2, [r3, #0]
 800ff98:	2000      	movs	r0, #0
 800ff9a:	b007      	add	sp, #28
 800ff9c:	bd30      	pop	{r4, r5, pc}
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f10d 0117 	add.w	r1, sp, #23
 800ffa6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ffaa:	4602      	mov	r2, r0
 800ffac:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800ffb0:	9500      	str	r5, [sp, #0]
 800ffb2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800ffb6:	f001 fa45 	bl	8011444 <uxr_write_framed_msg>
 800ffba:	e7e6      	b.n	800ff8a <send_custom_msg+0x16>
 800ffbc:	2001      	movs	r0, #1
 800ffbe:	b007      	add	sp, #28
 800ffc0:	bd30      	pop	{r4, r5, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2000dd9c 	.word	0x2000dd9c

0800ffc8 <uxr_set_custom_transport_callbacks>:
 800ffc8:	b410      	push	{r4}
 800ffca:	9c01      	ldr	r4, [sp, #4]
 800ffcc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800ffd0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800ffd4:	9b02      	ldr	r3, [sp, #8]
 800ffd6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800ffda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffde:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800ffe2:	4770      	bx	lr

0800ffe4 <uxr_init_custom_transport>:
 800ffe4:	b538      	push	{r3, r4, r5, lr}
 800ffe6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800ffea:	b303      	cbz	r3, 801002e <uxr_init_custom_transport+0x4a>
 800ffec:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fff0:	4604      	mov	r4, r0
 800fff2:	b1e2      	cbz	r2, 801002e <uxr_init_custom_transport+0x4a>
 800fff4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fff8:	b1ca      	cbz	r2, 801002e <uxr_init_custom_transport+0x4a>
 800fffa:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fffe:	b1b2      	cbz	r2, 801002e <uxr_init_custom_transport+0x4a>
 8010000:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010004:	4798      	blx	r3
 8010006:	4605      	mov	r5, r0
 8010008:	b188      	cbz	r0, 801002e <uxr_init_custom_transport+0x4a>
 801000a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801000e:	b98b      	cbnz	r3, 8010034 <uxr_init_custom_transport+0x50>
 8010010:	490b      	ldr	r1, [pc, #44]	@ (8010040 <uxr_init_custom_transport+0x5c>)
 8010012:	4b0c      	ldr	r3, [pc, #48]	@ (8010044 <uxr_init_custom_transport+0x60>)
 8010014:	4a0c      	ldr	r2, [pc, #48]	@ (8010048 <uxr_init_custom_transport+0x64>)
 8010016:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801001a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801001e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010022:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010026:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801002a:	4628      	mov	r0, r5
 801002c:	bd38      	pop	{r3, r4, r5, pc}
 801002e:	2500      	movs	r5, #0
 8010030:	4628      	mov	r0, r5
 8010032:	bd38      	pop	{r3, r4, r5, pc}
 8010034:	2100      	movs	r1, #0
 8010036:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801003a:	f001 f9fd 	bl	8011438 <uxr_init_framing_io>
 801003e:	e7e7      	b.n	8010010 <uxr_init_custom_transport+0x2c>
 8010040:	0800ff75 	.word	0x0800ff75
 8010044:	0800fedd 	.word	0x0800fedd
 8010048:	0800fed1 	.word	0x0800fed1

0801004c <uxr_close_custom_transport>:
 801004c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010050:	4718      	bx	r3
 8010052:	bf00      	nop

08010054 <uxr_object_id>:
 8010054:	b082      	sub	sp, #8
 8010056:	2300      	movs	r3, #0
 8010058:	f88d 1006 	strb.w	r1, [sp, #6]
 801005c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010060:	f360 030f 	bfi	r3, r0, #0, #16
 8010064:	f362 431f 	bfi	r3, r2, #16, #16
 8010068:	4618      	mov	r0, r3
 801006a:	b002      	add	sp, #8
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop

08010070 <uxr_object_id_from_raw>:
 8010070:	7843      	ldrb	r3, [r0, #1]
 8010072:	7801      	ldrb	r1, [r0, #0]
 8010074:	b082      	sub	sp, #8
 8010076:	f003 020f 	and.w	r2, r3, #15
 801007a:	f88d 2006 	strb.w	r2, [sp, #6]
 801007e:	091b      	lsrs	r3, r3, #4
 8010080:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010084:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010088:	2000      	movs	r0, #0
 801008a:	f363 000f 	bfi	r0, r3, #0, #16
 801008e:	f362 401f 	bfi	r0, r2, #16, #16
 8010092:	b002      	add	sp, #8
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop

08010098 <uxr_object_id_to_raw>:
 8010098:	4602      	mov	r2, r0
 801009a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801009e:	b082      	sub	sp, #8
 80100a0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80100a4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80100a8:	f881 c000 	strb.w	ip, [r1]
 80100ac:	7048      	strb	r0, [r1, #1]
 80100ae:	b002      	add	sp, #8
 80100b0:	4770      	bx	lr
 80100b2:	bf00      	nop

080100b4 <uxr_buffer_request_data>:
 80100b4:	b530      	push	{r4, r5, lr}
 80100b6:	b095      	sub	sp, #84	@ 0x54
 80100b8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80100bc:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80100be:	9303      	str	r3, [sp, #12]
 80100c0:	2200      	movs	r2, #0
 80100c2:	2d00      	cmp	r5, #0
 80100c4:	bf14      	ite	ne
 80100c6:	2101      	movne	r1, #1
 80100c8:	4611      	moveq	r1, r2
 80100ca:	4604      	mov	r4, r0
 80100cc:	f88d 301c 	strb.w	r3, [sp, #28]
 80100d0:	f88d 201d 	strb.w	r2, [sp, #29]
 80100d4:	f88d 201e 	strb.w	r2, [sp, #30]
 80100d8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80100dc:	d021      	beq.n	8010122 <uxr_buffer_request_data+0x6e>
 80100de:	682a      	ldr	r2, [r5, #0]
 80100e0:	686b      	ldr	r3, [r5, #4]
 80100e2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80100e6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80100ea:	2210      	movs	r2, #16
 80100ec:	2308      	movs	r3, #8
 80100ee:	2100      	movs	r1, #0
 80100f0:	e9cd 3100 	strd	r3, r1, [sp]
 80100f4:	4620      	mov	r0, r4
 80100f6:	9905      	ldr	r1, [sp, #20]
 80100f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80100fa:	f001 f837 	bl	801116c <uxr_prepare_stream_to_write_submessage>
 80100fe:	b918      	cbnz	r0, 8010108 <uxr_buffer_request_data+0x54>
 8010100:	4604      	mov	r4, r0
 8010102:	4620      	mov	r0, r4
 8010104:	b015      	add	sp, #84	@ 0x54
 8010106:	bd30      	pop	{r4, r5, pc}
 8010108:	9904      	ldr	r1, [sp, #16]
 801010a:	aa06      	add	r2, sp, #24
 801010c:	4620      	mov	r0, r4
 801010e:	f001 f963 	bl	80113d8 <uxr_init_base_object_request>
 8010112:	a906      	add	r1, sp, #24
 8010114:	4604      	mov	r4, r0
 8010116:	a80c      	add	r0, sp, #48	@ 0x30
 8010118:	f002 fec0 	bl	8012e9c <uxr_serialize_READ_DATA_Payload>
 801011c:	4620      	mov	r0, r4
 801011e:	b015      	add	sp, #84	@ 0x54
 8010120:	bd30      	pop	{r4, r5, pc}
 8010122:	2208      	movs	r2, #8
 8010124:	e7e2      	b.n	80100ec <uxr_buffer_request_data+0x38>
 8010126:	bf00      	nop

08010128 <uxr_buffer_cancel_data>:
 8010128:	b510      	push	{r4, lr}
 801012a:	b094      	sub	sp, #80	@ 0x50
 801012c:	2300      	movs	r3, #0
 801012e:	9202      	str	r2, [sp, #8]
 8010130:	9205      	str	r2, [sp, #20]
 8010132:	9301      	str	r3, [sp, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f8ad 301c 	strh.w	r3, [sp, #28]
 801013a:	f88d 301e 	strb.w	r3, [sp, #30]
 801013e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010142:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010146:	2308      	movs	r3, #8
 8010148:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	2210      	movs	r2, #16
 8010150:	ab0c      	add	r3, sp, #48	@ 0x30
 8010152:	4604      	mov	r4, r0
 8010154:	9103      	str	r1, [sp, #12]
 8010156:	f001 f809 	bl	801116c <uxr_prepare_stream_to_write_submessage>
 801015a:	b918      	cbnz	r0, 8010164 <uxr_buffer_cancel_data+0x3c>
 801015c:	4604      	mov	r4, r0
 801015e:	4620      	mov	r0, r4
 8010160:	b014      	add	sp, #80	@ 0x50
 8010162:	bd10      	pop	{r4, pc}
 8010164:	9905      	ldr	r1, [sp, #20]
 8010166:	aa06      	add	r2, sp, #24
 8010168:	4620      	mov	r0, r4
 801016a:	f001 f935 	bl	80113d8 <uxr_init_base_object_request>
 801016e:	a906      	add	r1, sp, #24
 8010170:	4604      	mov	r4, r0
 8010172:	a80c      	add	r0, sp, #48	@ 0x30
 8010174:	f002 fe92 	bl	8012e9c <uxr_serialize_READ_DATA_Payload>
 8010178:	4620      	mov	r0, r4
 801017a:	b014      	add	sp, #80	@ 0x50
 801017c:	bd10      	pop	{r4, pc}
 801017e:	bf00      	nop

08010180 <read_submessage_format>:
 8010180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010184:	b095      	sub	sp, #84	@ 0x54
 8010186:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801018a:	b113      	cbz	r3, 8010192 <read_submessage_format+0x12>
 801018c:	b015      	add	sp, #84	@ 0x54
 801018e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010192:	460c      	mov	r4, r1
 8010194:	4615      	mov	r5, r2
 8010196:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801019a:	4607      	mov	r7, r0
 801019c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801019e:	9004      	str	r0, [sp, #16]
 80101a0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80101a2:	9005      	str	r0, [sp, #20]
 80101a4:	1a52      	subs	r2, r2, r1
 80101a6:	a80c      	add	r0, sp, #48	@ 0x30
 80101a8:	4699      	mov	r9, r3
 80101aa:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80101ae:	f7fa ff31 	bl	800b014 <ucdr_init_buffer>
 80101b2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80101b6:	a80c      	add	r0, sp, #48	@ 0x30
 80101b8:	f7fa ff00 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 80101bc:	69e2      	ldr	r2, [r4, #28]
 80101be:	b19a      	cbz	r2, 80101e8 <read_submessage_format+0x68>
 80101c0:	f1b8 0f07 	cmp.w	r8, #7
 80101c4:	f882 9014 	strb.w	r9, [r2, #20]
 80101c8:	d040      	beq.n	801024c <read_submessage_format+0xcc>
 80101ca:	f1b8 0f08 	cmp.w	r8, #8
 80101ce:	d02e      	beq.n	801022e <read_submessage_format+0xae>
 80101d0:	f1b8 0f06 	cmp.w	r8, #6
 80101d4:	d011      	beq.n	80101fa <read_submessage_format+0x7a>
 80101d6:	2301      	movs	r3, #1
 80101d8:	7513      	strb	r3, [r2, #20]
 80101da:	4629      	mov	r1, r5
 80101dc:	4620      	mov	r0, r4
 80101de:	f7fa ff69 	bl	800b0b4 <ucdr_advance_buffer>
 80101e2:	b015      	add	sp, #84	@ 0x54
 80101e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101e8:	f1b8 0f07 	cmp.w	r8, #7
 80101ec:	d02e      	beq.n	801024c <read_submessage_format+0xcc>
 80101ee:	f1b8 0f08 	cmp.w	r8, #8
 80101f2:	d01c      	beq.n	801022e <read_submessage_format+0xae>
 80101f4:	f1b8 0f06 	cmp.w	r8, #6
 80101f8:	d1ef      	bne.n	80101da <read_submessage_format+0x5a>
 80101fa:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80101fe:	f1b8 0f00 	cmp.w	r8, #0
 8010202:	d011      	beq.n	8010228 <read_submessage_format+0xa8>
 8010204:	ab0c      	add	r3, sp, #48	@ 0x30
 8010206:	e9cd 3500 	strd	r3, r5, [sp]
 801020a:	2306      	movs	r3, #6
 801020c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010214:	9302      	str	r3, [sp, #8]
 8010216:	4632      	mov	r2, r6
 8010218:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801021c:	4638      	mov	r0, r7
 801021e:	47c0      	blx	r8
 8010220:	2301      	movs	r3, #1
 8010222:	69e2      	ldr	r2, [r4, #28]
 8010224:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010228:	2a00      	cmp	r2, #0
 801022a:	d1d4      	bne.n	80101d6 <read_submessage_format+0x56>
 801022c:	e7d5      	b.n	80101da <read_submessage_format+0x5a>
 801022e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010232:	2b00      	cmp	r3, #0
 8010234:	d0f8      	beq.n	8010228 <read_submessage_format+0xa8>
 8010236:	a906      	add	r1, sp, #24
 8010238:	a80c      	add	r0, sp, #48	@ 0x30
 801023a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801023e:	f002 fef3 	bl	8013028 <uxr_deserialize_SampleIdentity>
 8010242:	b9a0      	cbnz	r0, 801026e <read_submessage_format+0xee>
 8010244:	69e2      	ldr	r2, [r4, #28]
 8010246:	2a00      	cmp	r2, #0
 8010248:	d1c5      	bne.n	80101d6 <read_submessage_format+0x56>
 801024a:	e7c6      	b.n	80101da <read_submessage_format+0x5a>
 801024c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010250:	b13b      	cbz	r3, 8010262 <read_submessage_format+0xe2>
 8010252:	a906      	add	r1, sp, #24
 8010254:	a80c      	add	r0, sp, #48	@ 0x30
 8010256:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801025a:	f002 fbb9 	bl	80129d0 <uxr_deserialize_BaseObjectRequest>
 801025e:	bb60      	cbnz	r0, 80102ba <read_submessage_format+0x13a>
 8010260:	69e2      	ldr	r2, [r4, #28]
 8010262:	68a3      	ldr	r3, [r4, #8]
 8010264:	442b      	add	r3, r5
 8010266:	60a3      	str	r3, [r4, #8]
 8010268:	2a00      	cmp	r2, #0
 801026a:	d1b4      	bne.n	80101d6 <read_submessage_format+0x56>
 801026c:	e7b5      	b.n	80101da <read_submessage_format+0x5a>
 801026e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010272:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010274:	1a52      	subs	r2, r2, r1
 8010276:	eba8 0803 	sub.w	r8, r8, r3
 801027a:	a80c      	add	r0, sp, #48	@ 0x30
 801027c:	f7fa feca 	bl	800b014 <ucdr_init_buffer>
 8010280:	44a8      	add	r8, r5
 8010282:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010286:	a80c      	add	r0, sp, #48	@ 0x30
 8010288:	f7fa fe98 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 801028c:	fa1f f888 	uxth.w	r8, r8
 8010290:	ab0c      	add	r3, sp, #48	@ 0x30
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	f8cd 8004 	str.w	r8, [sp, #4]
 8010298:	2108      	movs	r1, #8
 801029a:	f88d 1016 	strb.w	r1, [sp, #22]
 801029e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80102a2:	9102      	str	r1, [sp, #8]
 80102a4:	ab06      	add	r3, sp, #24
 80102a6:	4632      	mov	r2, r6
 80102a8:	9905      	ldr	r1, [sp, #20]
 80102aa:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80102ae:	4638      	mov	r0, r7
 80102b0:	47b0      	blx	r6
 80102b2:	2301      	movs	r3, #1
 80102b4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80102b8:	e7c4      	b.n	8010244 <read_submessage_format+0xc4>
 80102ba:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80102be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102c0:	1a52      	subs	r2, r2, r1
 80102c2:	a80c      	add	r0, sp, #48	@ 0x30
 80102c4:	eba8 0803 	sub.w	r8, r8, r3
 80102c8:	f7fa fea4 	bl	800b014 <ucdr_init_buffer>
 80102cc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80102d0:	a80c      	add	r0, sp, #48	@ 0x30
 80102d2:	f7fa fe73 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 80102d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80102de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80102e2:	44a8      	add	r8, r5
 80102e4:	fa1f f888 	uxth.w	r8, r8
 80102e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80102ec:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80102f0:	2107      	movs	r1, #7
 80102f2:	f88d 1016 	strb.w	r1, [sp, #22]
 80102f6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80102fa:	9102      	str	r1, [sp, #8]
 80102fc:	4632      	mov	r2, r6
 80102fe:	b29b      	uxth	r3, r3
 8010300:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010304:	9905      	ldr	r1, [sp, #20]
 8010306:	4638      	mov	r0, r7
 8010308:	47b0      	blx	r6
 801030a:	2301      	movs	r3, #1
 801030c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010310:	e7a6      	b.n	8010260 <read_submessage_format+0xe0>
 8010312:	bf00      	nop

08010314 <on_get_fragmentation_info>:
 8010314:	b500      	push	{lr}
 8010316:	b08b      	sub	sp, #44	@ 0x2c
 8010318:	4601      	mov	r1, r0
 801031a:	2204      	movs	r2, #4
 801031c:	a802      	add	r0, sp, #8
 801031e:	f7fa fe79 	bl	800b014 <ucdr_init_buffer>
 8010322:	f10d 0305 	add.w	r3, sp, #5
 8010326:	f10d 0206 	add.w	r2, sp, #6
 801032a:	a901      	add	r1, sp, #4
 801032c:	a802      	add	r0, sp, #8
 801032e:	f001 fe67 	bl	8012000 <uxr_read_submessage_header>
 8010332:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010336:	2b0d      	cmp	r3, #13
 8010338:	d003      	beq.n	8010342 <on_get_fragmentation_info+0x2e>
 801033a:	2000      	movs	r0, #0
 801033c:	b00b      	add	sp, #44	@ 0x2c
 801033e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010342:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010346:	f013 0f02 	tst.w	r3, #2
 801034a:	bf14      	ite	ne
 801034c:	2002      	movne	r0, #2
 801034e:	2001      	moveq	r0, #1
 8010350:	b00b      	add	sp, #44	@ 0x2c
 8010352:	f85d fb04 	ldr.w	pc, [sp], #4
 8010356:	bf00      	nop

08010358 <read_submessage_get_info>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	2500      	movs	r5, #0
 801035c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010360:	4604      	mov	r4, r0
 8010362:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010366:	460e      	mov	r6, r1
 8010368:	a810      	add	r0, sp, #64	@ 0x40
 801036a:	4629      	mov	r1, r5
 801036c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010370:	f004 fef2 	bl	8015158 <memset>
 8010374:	a903      	add	r1, sp, #12
 8010376:	4630      	mov	r0, r6
 8010378:	f002 fcd2 	bl	8012d20 <uxr_deserialize_GET_INFO_Payload>
 801037c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010380:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010384:	4620      	mov	r0, r4
 8010386:	f001 f81f 	bl	80113c8 <uxr_session_header_offset>
 801038a:	462b      	mov	r3, r5
 801038c:	9000      	str	r0, [sp, #0]
 801038e:	220c      	movs	r2, #12
 8010390:	a905      	add	r1, sp, #20
 8010392:	a808      	add	r0, sp, #32
 8010394:	f7fa fe2c 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8010398:	a910      	add	r1, sp, #64	@ 0x40
 801039a:	a808      	add	r0, sp, #32
 801039c:	f002 fd32 	bl	8012e04 <uxr_serialize_INFO_Payload>
 80103a0:	9b08      	ldr	r3, [sp, #32]
 80103a2:	462a      	mov	r2, r5
 80103a4:	4629      	mov	r1, r5
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 ffb8 	bl	801131c <uxr_stamp_session_header>
 80103ac:	a808      	add	r0, sp, #32
 80103ae:	f7fa fe5d 	bl	800b06c <ucdr_buffer_length>
 80103b2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80103b4:	4602      	mov	r2, r0
 80103b6:	a905      	add	r1, sp, #20
 80103b8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80103bc:	47a0      	blx	r4
 80103be:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80103c2:	bd70      	pop	{r4, r5, r6, pc}

080103c4 <write_submessage_acknack.isra.0>:
 80103c4:	b570      	push	{r4, r5, r6, lr}
 80103c6:	b092      	sub	sp, #72	@ 0x48
 80103c8:	4605      	mov	r5, r0
 80103ca:	460e      	mov	r6, r1
 80103cc:	4614      	mov	r4, r2
 80103ce:	f000 fffb 	bl	80113c8 <uxr_session_header_offset>
 80103d2:	a905      	add	r1, sp, #20
 80103d4:	9000      	str	r0, [sp, #0]
 80103d6:	2300      	movs	r3, #0
 80103d8:	a80a      	add	r0, sp, #40	@ 0x28
 80103da:	2211      	movs	r2, #17
 80103dc:	f7fa fe08 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 80103e0:	2218      	movs	r2, #24
 80103e2:	fb02 5404 	mla	r4, r2, r4, r5
 80103e6:	2300      	movs	r3, #0
 80103e8:	2205      	movs	r2, #5
 80103ea:	3450      	adds	r4, #80	@ 0x50
 80103ec:	210a      	movs	r1, #10
 80103ee:	a80a      	add	r0, sp, #40	@ 0x28
 80103f0:	f001 fdec 	bl	8011fcc <uxr_buffer_submessage_header>
 80103f4:	a903      	add	r1, sp, #12
 80103f6:	4620      	mov	r0, r4
 80103f8:	f003 ff30 	bl	801425c <uxr_compute_acknack>
 80103fc:	ba40      	rev16	r0, r0
 80103fe:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010402:	a903      	add	r1, sp, #12
 8010404:	a80a      	add	r0, sp, #40	@ 0x28
 8010406:	f88d 6010 	strb.w	r6, [sp, #16]
 801040a:	f002 fd6b 	bl	8012ee4 <uxr_serialize_ACKNACK_Payload>
 801040e:	2200      	movs	r2, #0
 8010410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010412:	4611      	mov	r1, r2
 8010414:	4628      	mov	r0, r5
 8010416:	f000 ff81 	bl	801131c <uxr_stamp_session_header>
 801041a:	a80a      	add	r0, sp, #40	@ 0x28
 801041c:	f7fa fe26 	bl	800b06c <ucdr_buffer_length>
 8010420:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010422:	4602      	mov	r2, r0
 8010424:	a905      	add	r1, sp, #20
 8010426:	e9d3 0400 	ldrd	r0, r4, [r3]
 801042a:	47a0      	blx	r4
 801042c:	b012      	add	sp, #72	@ 0x48
 801042e:	bd70      	pop	{r4, r5, r6, pc}

08010430 <uxr_init_session>:
 8010430:	b510      	push	{r4, lr}
 8010432:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010468 <uxr_init_session+0x38>
 8010436:	2300      	movs	r3, #0
 8010438:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801043c:	4604      	mov	r4, r0
 801043e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010442:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010446:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801044a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801044e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010452:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010456:	2181      	movs	r1, #129	@ 0x81
 8010458:	f000 fecc 	bl	80111f4 <uxr_init_session_info>
 801045c:	f104 0008 	add.w	r0, r4, #8
 8010460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010464:	f001 bcce 	b.w	8011e04 <uxr_init_stream_storage>
	...

08010470 <uxr_set_status_callback>:
 8010470:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop

08010478 <uxr_set_topic_callback>:
 8010478:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop

08010480 <uxr_set_request_callback>:
 8010480:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop

08010488 <uxr_set_reply_callback>:
 8010488:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop

08010490 <uxr_create_output_best_effort_stream>:
 8010490:	b510      	push	{r4, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	e9cd 2100 	strd	r2, r1, [sp]
 8010498:	4604      	mov	r4, r0
 801049a:	f000 ff95 	bl	80113c8 <uxr_session_header_offset>
 801049e:	e9dd 2100 	ldrd	r2, r1, [sp]
 80104a2:	4603      	mov	r3, r0
 80104a4:	f104 0008 	add.w	r0, r4, #8
 80104a8:	b004      	add	sp, #16
 80104aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ae:	f001 bcf3 	b.w	8011e98 <uxr_add_output_best_effort_buffer>
 80104b2:	bf00      	nop

080104b4 <uxr_create_output_reliable_stream>:
 80104b4:	b510      	push	{r4, lr}
 80104b6:	b088      	sub	sp, #32
 80104b8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80104bc:	4604      	mov	r4, r0
 80104be:	9303      	str	r3, [sp, #12]
 80104c0:	f000 ff82 	bl	80113c8 <uxr_session_header_offset>
 80104c4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80104c8:	9000      	str	r0, [sp, #0]
 80104ca:	9905      	ldr	r1, [sp, #20]
 80104cc:	f104 0008 	add.w	r0, r4, #8
 80104d0:	f001 fcf6 	bl	8011ec0 <uxr_add_output_reliable_buffer>
 80104d4:	2200      	movs	r2, #0
 80104d6:	b2c3      	uxtb	r3, r0
 80104d8:	f363 0207 	bfi	r2, r3, #0, #8
 80104dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80104e0:	f363 220f 	bfi	r2, r3, #8, #8
 80104e4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80104e8:	f363 4217 	bfi	r2, r3, #16, #8
 80104ec:	0e03      	lsrs	r3, r0, #24
 80104ee:	f363 621f 	bfi	r2, r3, #24, #8
 80104f2:	4610      	mov	r0, r2
 80104f4:	b008      	add	sp, #32
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <uxr_create_input_best_effort_stream>:
 80104f8:	b082      	sub	sp, #8
 80104fa:	3008      	adds	r0, #8
 80104fc:	b002      	add	sp, #8
 80104fe:	f001 bcf9 	b.w	8011ef4 <uxr_add_input_best_effort_buffer>
 8010502:	bf00      	nop

08010504 <uxr_create_input_reliable_stream>:
 8010504:	b510      	push	{r4, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	4c0b      	ldr	r4, [pc, #44]	@ (8010538 <uxr_create_input_reliable_stream+0x34>)
 801050a:	9400      	str	r4, [sp, #0]
 801050c:	3008      	adds	r0, #8
 801050e:	f001 fd07 	bl	8011f20 <uxr_add_input_reliable_buffer>
 8010512:	2200      	movs	r2, #0
 8010514:	b2c3      	uxtb	r3, r0
 8010516:	f363 0207 	bfi	r2, r3, #0, #8
 801051a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801051e:	f363 220f 	bfi	r2, r3, #8, #8
 8010522:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010526:	f363 4217 	bfi	r2, r3, #16, #8
 801052a:	0e03      	lsrs	r3, r0, #24
 801052c:	f363 621f 	bfi	r2, r3, #24, #8
 8010530:	4610      	mov	r0, r2
 8010532:	b004      	add	sp, #16
 8010534:	bd10      	pop	{r4, pc}
 8010536:	bf00      	nop
 8010538:	08010315 	.word	0x08010315

0801053c <uxr_epoch_nanos>:
 801053c:	b510      	push	{r4, lr}
 801053e:	4604      	mov	r4, r0
 8010540:	f001 fda4 	bl	801208c <uxr_nanos>
 8010544:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010548:	1ac0      	subs	r0, r0, r3
 801054a:	eb61 0102 	sbc.w	r1, r1, r2
 801054e:	bd10      	pop	{r4, pc}

08010550 <uxr_flash_output_streams>:
 8010550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010554:	7e03      	ldrb	r3, [r0, #24]
 8010556:	b084      	sub	sp, #16
 8010558:	4604      	mov	r4, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d035      	beq.n	80105ca <uxr_flash_output_streams+0x7a>
 801055e:	f04f 0900 	mov.w	r9, #0
 8010562:	4648      	mov	r0, r9
 8010564:	f10d 0802 	add.w	r8, sp, #2
 8010568:	af03      	add	r7, sp, #12
 801056a:	ae02      	add	r6, sp, #8
 801056c:	e006      	b.n	801057c <uxr_flash_output_streams+0x2c>
 801056e:	7e23      	ldrb	r3, [r4, #24]
 8010570:	f109 0901 	add.w	r9, r9, #1
 8010574:	fa5f f089 	uxtb.w	r0, r9
 8010578:	4283      	cmp	r3, r0
 801057a:	d926      	bls.n	80105ca <uxr_flash_output_streams+0x7a>
 801057c:	2201      	movs	r2, #1
 801057e:	4611      	mov	r1, r2
 8010580:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010584:	f001 fbea 	bl	8011d5c <uxr_stream_id>
 8010588:	3508      	adds	r5, #8
 801058a:	4684      	mov	ip, r0
 801058c:	4643      	mov	r3, r8
 801058e:	463a      	mov	r2, r7
 8010590:	4631      	mov	r1, r6
 8010592:	4628      	mov	r0, r5
 8010594:	f8cd c004 	str.w	ip, [sp, #4]
 8010598:	f003 fee6 	bl	8014368 <uxr_prepare_best_effort_buffer_to_send>
 801059c:	2800      	cmp	r0, #0
 801059e:	d0e6      	beq.n	801056e <uxr_flash_output_streams+0x1e>
 80105a0:	9b02      	ldr	r3, [sp, #8]
 80105a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80105a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 feb6 	bl	801131c <uxr_stamp_session_header>
 80105b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80105b2:	9a03      	ldr	r2, [sp, #12]
 80105b4:	685d      	ldr	r5, [r3, #4]
 80105b6:	6818      	ldr	r0, [r3, #0]
 80105b8:	9902      	ldr	r1, [sp, #8]
 80105ba:	47a8      	blx	r5
 80105bc:	f109 0901 	add.w	r9, r9, #1
 80105c0:	7e23      	ldrb	r3, [r4, #24]
 80105c2:	fa5f f089 	uxtb.w	r0, r9
 80105c6:	4283      	cmp	r3, r0
 80105c8:	d8d8      	bhi.n	801057c <uxr_flash_output_streams+0x2c>
 80105ca:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80105ce:	b38b      	cbz	r3, 8010634 <uxr_flash_output_streams+0xe4>
 80105d0:	f04f 0900 	mov.w	r9, #0
 80105d4:	f10d 0802 	add.w	r8, sp, #2
 80105d8:	af03      	add	r7, sp, #12
 80105da:	ae02      	add	r6, sp, #8
 80105dc:	4648      	mov	r0, r9
 80105de:	2201      	movs	r2, #1
 80105e0:	2102      	movs	r1, #2
 80105e2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80105e6:	f001 fbb9 	bl	8011d5c <uxr_stream_id>
 80105ea:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80105ee:	3520      	adds	r5, #32
 80105f0:	9001      	str	r0, [sp, #4]
 80105f2:	e00d      	b.n	8010610 <uxr_flash_output_streams+0xc0>
 80105f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80105f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80105fc:	9b02      	ldr	r3, [sp, #8]
 80105fe:	f000 fe8d 	bl	801131c <uxr_stamp_session_header>
 8010602:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010604:	9a03      	ldr	r2, [sp, #12]
 8010606:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801060a:	9902      	ldr	r1, [sp, #8]
 801060c:	6818      	ldr	r0, [r3, #0]
 801060e:	47d0      	blx	sl
 8010610:	4643      	mov	r3, r8
 8010612:	463a      	mov	r2, r7
 8010614:	4631      	mov	r1, r6
 8010616:	4628      	mov	r0, r5
 8010618:	f004 f8c4 	bl	80147a4 <uxr_prepare_next_reliable_buffer_to_send>
 801061c:	4603      	mov	r3, r0
 801061e:	4620      	mov	r0, r4
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e7      	bne.n	80105f4 <uxr_flash_output_streams+0xa4>
 8010624:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010628:	f109 0901 	add.w	r9, r9, #1
 801062c:	fa5f f089 	uxtb.w	r0, r9
 8010630:	4283      	cmp	r3, r0
 8010632:	d8d4      	bhi.n	80105de <uxr_flash_output_streams+0x8e>
 8010634:	b004      	add	sp, #16
 8010636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063a:	bf00      	nop

0801063c <read_submessage_info>:
 801063c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010640:	460d      	mov	r5, r1
 8010642:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010646:	4669      	mov	r1, sp
 8010648:	4607      	mov	r7, r0
 801064a:	4628      	mov	r0, r5
 801064c:	f002 fa76 	bl	8012b3c <uxr_deserialize_BaseObjectReply>
 8010650:	a902      	add	r1, sp, #8
 8010652:	4604      	mov	r4, r0
 8010654:	4628      	mov	r0, r5
 8010656:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801065a:	f7f9 fbc3 	bl	8009de4 <ucdr_deserialize_bool>
 801065e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010662:	4004      	ands	r4, r0
 8010664:	b2e4      	uxtb	r4, r4
 8010666:	b95b      	cbnz	r3, 8010680 <read_submessage_info+0x44>
 8010668:	a987      	add	r1, sp, #540	@ 0x21c
 801066a:	4628      	mov	r0, r5
 801066c:	f7f9 fbba 	bl	8009de4 <ucdr_deserialize_bool>
 8010670:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010674:	4606      	mov	r6, r0
 8010676:	b94b      	cbnz	r3, 801068c <read_submessage_info+0x50>
 8010678:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010680:	a903      	add	r1, sp, #12
 8010682:	4628      	mov	r0, r5
 8010684:	f002 f902 	bl	801288c <uxr_deserialize_ObjectVariant>
 8010688:	4004      	ands	r4, r0
 801068a:	e7ed      	b.n	8010668 <read_submessage_info+0x2c>
 801068c:	a988      	add	r1, sp, #544	@ 0x220
 801068e:	4628      	mov	r0, r5
 8010690:	f7f9 fbd6 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8010694:	4234      	tst	r4, r6
 8010696:	d0ef      	beq.n	8010678 <read_submessage_info+0x3c>
 8010698:	2800      	cmp	r0, #0
 801069a:	d0ed      	beq.n	8010678 <read_submessage_info+0x3c>
 801069c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80106a0:	2b0d      	cmp	r3, #13
 80106a2:	d1e9      	bne.n	8010678 <read_submessage_info+0x3c>
 80106a4:	a98a      	add	r1, sp, #552	@ 0x228
 80106a6:	4628      	mov	r0, r5
 80106a8:	f7fa f99c 	bl	800a9e4 <ucdr_deserialize_int16_t>
 80106ac:	b140      	cbz	r0, 80106c0 <read_submessage_info+0x84>
 80106ae:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	dd07      	ble.n	80106c6 <read_submessage_info+0x8a>
 80106b6:	f1b8 0f00 	cmp.w	r8, #0
 80106ba:	bf14      	ite	ne
 80106bc:	2001      	movne	r0, #1
 80106be:	2002      	moveq	r0, #2
 80106c0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80106c4:	e7d8      	b.n	8010678 <read_submessage_info+0x3c>
 80106c6:	2000      	movs	r0, #0
 80106c8:	e7fa      	b.n	80106c0 <read_submessage_info+0x84>
 80106ca:	bf00      	nop

080106cc <read_submessage_list>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	b097      	sub	sp, #92	@ 0x5c
 80106d2:	4ec1      	ldr	r6, [pc, #772]	@ (80109d8 <read_submessage_list+0x30c>)
 80106d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80106d6:	4604      	mov	r4, r0
 80106d8:	460d      	mov	r5, r1
 80106da:	f04f 0801 	mov.w	r8, #1
 80106de:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80106e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80106e4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80106e8:	4628      	mov	r0, r5
 80106ea:	f001 fc89 	bl	8012000 <uxr_read_submessage_header>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	f000 813e 	beq.w	8010970 <read_submessage_list+0x2a4>
 80106f4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80106f8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80106fc:	3b02      	subs	r3, #2
 80106fe:	2b0d      	cmp	r3, #13
 8010700:	d8ed      	bhi.n	80106de <read_submessage_list+0x12>
 8010702:	a101      	add	r1, pc, #4	@ (adr r1, 8010708 <read_submessage_list+0x3c>)
 8010704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010708:	08010967 	.word	0x08010967
 801070c:	080106df 	.word	0x080106df
 8010710:	08010957 	.word	0x08010957
 8010714:	080108f5 	.word	0x080108f5
 8010718:	080108eb 	.word	0x080108eb
 801071c:	080106df 	.word	0x080106df
 8010720:	080106df 	.word	0x080106df
 8010724:	0801084b 	.word	0x0801084b
 8010728:	080107db 	.word	0x080107db
 801072c:	0801079b 	.word	0x0801079b
 8010730:	080106df 	.word	0x080106df
 8010734:	080106df 	.word	0x080106df
 8010738:	080106df 	.word	0x080106df
 801073c:	08010741 	.word	0x08010741
 8010740:	a910      	add	r1, sp, #64	@ 0x40
 8010742:	4628      	mov	r0, r5
 8010744:	f002 fc1e 	bl	8012f84 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010748:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 801074c:	f1b9 0f00 	cmp.w	r9, #0
 8010750:	f000 8116 	beq.w	8010980 <read_submessage_list+0x2b4>
 8010754:	f001 fc9a 	bl	801208c <uxr_nanos>
 8010758:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801075a:	4602      	mov	r2, r0
 801075c:	460b      	mov	r3, r1
 801075e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010760:	2100      	movs	r1, #0
 8010762:	468c      	mov	ip, r1
 8010764:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010768:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801076c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801076e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010770:	468c      	mov	ip, r1
 8010772:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010776:	46e2      	mov	sl, ip
 8010778:	46bc      	mov	ip, r7
 801077a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801077e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010782:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010786:	e9cd 7100 	strd	r7, r1, [sp]
 801078a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801078e:	9106      	str	r1, [sp, #24]
 8010790:	4620      	mov	r0, r4
 8010792:	47c8      	blx	r9
 8010794:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010798:	e7a1      	b.n	80106de <read_submessage_list+0x12>
 801079a:	a910      	add	r1, sp, #64	@ 0x40
 801079c:	4628      	mov	r0, r5
 801079e:	f002 fbdf 	bl	8012f60 <uxr_deserialize_HEARTBEAT_Payload>
 80107a2:	2100      	movs	r1, #0
 80107a4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80107a8:	f001 fb02 	bl	8011db0 <uxr_stream_id_from_raw>
 80107ac:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80107b0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80107b2:	4639      	mov	r1, r7
 80107b4:	f104 0008 	add.w	r0, r4, #8
 80107b8:	f001 fbe8 	bl	8011f8c <uxr_get_input_reliable_stream>
 80107bc:	2800      	cmp	r0, #0
 80107be:	d08e      	beq.n	80106de <read_submessage_list+0x12>
 80107c0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80107c4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80107c8:	f003 fd3c 	bl	8014244 <uxr_process_heartbeat>
 80107cc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80107d0:	463a      	mov	r2, r7
 80107d2:	4620      	mov	r0, r4
 80107d4:	f7ff fdf6 	bl	80103c4 <write_submessage_acknack.isra.0>
 80107d8:	e781      	b.n	80106de <read_submessage_list+0x12>
 80107da:	a910      	add	r1, sp, #64	@ 0x40
 80107dc:	4628      	mov	r0, r5
 80107de:	f002 fb97 	bl	8012f10 <uxr_deserialize_ACKNACK_Payload>
 80107e2:	2100      	movs	r1, #0
 80107e4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80107e8:	f001 fae2 	bl	8011db0 <uxr_stream_id_from_raw>
 80107ec:	900d      	str	r0, [sp, #52]	@ 0x34
 80107ee:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80107f2:	f104 0008 	add.w	r0, r4, #8
 80107f6:	f001 fbb5 	bl	8011f64 <uxr_get_output_reliable_stream>
 80107fa:	4607      	mov	r7, r0
 80107fc:	2800      	cmp	r0, #0
 80107fe:	f43f af6e 	beq.w	80106de <read_submessage_list+0x12>
 8010802:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010806:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801080a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801080e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010812:	b289      	uxth	r1, r1
 8010814:	f004 f870 	bl	80148f8 <uxr_process_acknack>
 8010818:	4638      	mov	r0, r7
 801081a:	f004 f82d 	bl	8014878 <uxr_begin_output_nack_buffer_it>
 801081e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010822:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010826:	e006      	b.n	8010836 <read_submessage_list+0x16a>
 8010828:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801082a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801082c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010830:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010832:	6818      	ldr	r0, [r3, #0]
 8010834:	47c8      	blx	r9
 8010836:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801083a:	aa0f      	add	r2, sp, #60	@ 0x3c
 801083c:	4651      	mov	r1, sl
 801083e:	4638      	mov	r0, r7
 8010840:	f004 f81c 	bl	801487c <uxr_next_reliable_nack_buffer_to_send>
 8010844:	2800      	cmp	r0, #0
 8010846:	d1ef      	bne.n	8010828 <read_submessage_list+0x15c>
 8010848:	e749      	b.n	80106de <read_submessage_list+0x12>
 801084a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801084e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010852:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010856:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801085a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801085e:	4651      	mov	r1, sl
 8010860:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010864:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8010868:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801086c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010870:	4628      	mov	r0, r5
 8010872:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010876:	f002 f8ab 	bl	80129d0 <uxr_deserialize_BaseObjectRequest>
 801087a:	4650      	mov	r0, sl
 801087c:	a90f      	add	r1, sp, #60	@ 0x3c
 801087e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010882:	f000 fdc7 	bl	8011414 <uxr_parse_base_object_request>
 8010886:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801088a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801088c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010890:	9110      	str	r1, [sp, #64]	@ 0x40
 8010892:	3f04      	subs	r7, #4
 8010894:	f009 090e 	and.w	r9, r9, #14
 8010898:	b2bf      	uxth	r7, r7
 801089a:	f1bb 0f00 	cmp.w	fp, #0
 801089e:	d006      	beq.n	80108ae <read_submessage_list+0x1e2>
 80108a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	4652      	mov	r2, sl
 80108a8:	2300      	movs	r3, #0
 80108aa:	4620      	mov	r0, r4
 80108ac:	47d8      	blx	fp
 80108ae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80108b0:	b16a      	cbz	r2, 80108ce <read_submessage_list+0x202>
 80108b2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80108b4:	2100      	movs	r1, #0
 80108b6:	3802      	subs	r0, #2
 80108b8:	e002      	b.n	80108c0 <read_submessage_list+0x1f4>
 80108ba:	3101      	adds	r1, #1
 80108bc:	4291      	cmp	r1, r2
 80108be:	d006      	beq.n	80108ce <read_submessage_list+0x202>
 80108c0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80108c4:	4553      	cmp	r3, sl
 80108c6:	d1f8      	bne.n	80108ba <read_submessage_list+0x1ee>
 80108c8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80108ca:	2200      	movs	r2, #0
 80108cc:	545a      	strb	r2, [r3, r1]
 80108ce:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80108d2:	9102      	str	r1, [sp, #8]
 80108d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80108d6:	9101      	str	r1, [sp, #4]
 80108d8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80108da:	9100      	str	r1, [sp, #0]
 80108dc:	464b      	mov	r3, r9
 80108de:	463a      	mov	r2, r7
 80108e0:	4629      	mov	r1, r5
 80108e2:	4620      	mov	r0, r4
 80108e4:	f7ff fc4c 	bl	8010180 <read_submessage_format>
 80108e8:	e6f9      	b.n	80106de <read_submessage_list+0x12>
 80108ea:	4629      	mov	r1, r5
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7ff fea5 	bl	801063c <read_submessage_info>
 80108f2:	e6f4      	b.n	80106de <read_submessage_list+0x12>
 80108f4:	2a00      	cmp	r2, #0
 80108f6:	d03e      	beq.n	8010976 <read_submessage_list+0x2aa>
 80108f8:	a910      	add	r1, sp, #64	@ 0x40
 80108fa:	4628      	mov	r0, r5
 80108fc:	f002 fa64 	bl	8012dc8 <uxr_deserialize_STATUS_Payload>
 8010900:	a90e      	add	r1, sp, #56	@ 0x38
 8010902:	aa0d      	add	r2, sp, #52	@ 0x34
 8010904:	a810      	add	r0, sp, #64	@ 0x40
 8010906:	f000 fd85 	bl	8011414 <uxr_parse_base_object_request>
 801090a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801090e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010910:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010914:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010918:	910f      	str	r1, [sp, #60]	@ 0x3c
 801091a:	f1ba 0f00 	cmp.w	sl, #0
 801091e:	d006      	beq.n	801092e <read_submessage_list+0x262>
 8010920:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	463a      	mov	r2, r7
 8010928:	464b      	mov	r3, r9
 801092a:	4620      	mov	r0, r4
 801092c:	47d0      	blx	sl
 801092e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010930:	2a00      	cmp	r2, #0
 8010932:	f43f aed4 	beq.w	80106de <read_submessage_list+0x12>
 8010936:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010938:	2100      	movs	r1, #0
 801093a:	3802      	subs	r0, #2
 801093c:	e003      	b.n	8010946 <read_submessage_list+0x27a>
 801093e:	3101      	adds	r1, #1
 8010940:	4291      	cmp	r1, r2
 8010942:	f43f aecc 	beq.w	80106de <read_submessage_list+0x12>
 8010946:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801094a:	42bb      	cmp	r3, r7
 801094c:	d1f7      	bne.n	801093e <read_submessage_list+0x272>
 801094e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010950:	f803 9001 	strb.w	r9, [r3, r1]
 8010954:	e6c3      	b.n	80106de <read_submessage_list+0x12>
 8010956:	2a00      	cmp	r2, #0
 8010958:	f47f aec1 	bne.w	80106de <read_submessage_list+0x12>
 801095c:	4629      	mov	r1, r5
 801095e:	4620      	mov	r0, r4
 8010960:	f000 fc9e 	bl	80112a0 <uxr_read_create_session_status>
 8010964:	e6bb      	b.n	80106de <read_submessage_list+0x12>
 8010966:	4629      	mov	r1, r5
 8010968:	4620      	mov	r0, r4
 801096a:	f7ff fcf5 	bl	8010358 <read_submessage_get_info>
 801096e:	e6b6      	b.n	80106de <read_submessage_list+0x12>
 8010970:	b017      	add	sp, #92	@ 0x5c
 8010972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010976:	4629      	mov	r1, r5
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fc9d 	bl	80112b8 <uxr_read_delete_session_status>
 801097e:	e6ae      	b.n	80106de <read_submessage_list+0x12>
 8010980:	f001 fb84 	bl	801208c <uxr_nanos>
 8010984:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010986:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010988:	464f      	mov	r7, r9
 801098a:	fbc3 2706 	smlal	r2, r7, r3, r6
 801098e:	1812      	adds	r2, r2, r0
 8010990:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010992:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010994:	eb47 0101 	adc.w	r1, r7, r1
 8010998:	464f      	mov	r7, r9
 801099a:	fbc3 0706 	smlal	r0, r7, r3, r6
 801099e:	463b      	mov	r3, r7
 80109a0:	4684      	mov	ip, r0
 80109a2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80109a6:	fbc7 0906 	smlal	r0, r9, r7, r6
 80109aa:	eb1c 0c00 	adds.w	ip, ip, r0
 80109ae:	464f      	mov	r7, r9
 80109b0:	eb43 0307 	adc.w	r3, r3, r7
 80109b4:	ebb2 0c0c 	subs.w	ip, r2, ip
 80109b8:	eb61 0303 	sbc.w	r3, r1, r3
 80109bc:	0fda      	lsrs	r2, r3, #31
 80109be:	eb12 020c 	adds.w	r2, r2, ip
 80109c2:	f143 0300 	adc.w	r3, r3, #0
 80109c6:	0852      	lsrs	r2, r2, #1
 80109c8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80109cc:	105b      	asrs	r3, r3, #1
 80109ce:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80109d2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80109d6:	e6dd      	b.n	8010794 <read_submessage_list+0xc8>
 80109d8:	3b9aca00 	.word	0x3b9aca00

080109dc <listen_message_reliably>:
 80109dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e0:	1e0b      	subs	r3, r1, #0
 80109e2:	b09d      	sub	sp, #116	@ 0x74
 80109e4:	bfb8      	it	lt
 80109e6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80109ea:	4680      	mov	r8, r0
 80109ec:	9305      	str	r3, [sp, #20]
 80109ee:	f001 fb33 	bl	8012058 <uxr_millis>
 80109f2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80109f6:	4681      	mov	r9, r0
 80109f8:	2a00      	cmp	r2, #0
 80109fa:	f000 80a1 	beq.w	8010b40 <listen_message_reliably+0x164>
 80109fe:	2600      	movs	r6, #0
 8010a00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010a04:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010a08:	9303      	str	r3, [sp, #12]
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	460f      	mov	r7, r1
 8010a0e:	e00f      	b.n	8010a30 <listen_message_reliably+0x54>
 8010a10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010a14:	9903      	ldr	r1, [sp, #12]
 8010a16:	455a      	cmp	r2, fp
 8010a18:	f106 0601 	add.w	r6, r6, #1
 8010a1c:	eb73 0101 	sbcs.w	r1, r3, r1
 8010a20:	b2f0      	uxtb	r0, r6
 8010a22:	da01      	bge.n	8010a28 <listen_message_reliably+0x4c>
 8010a24:	4693      	mov	fp, r2
 8010a26:	9303      	str	r3, [sp, #12]
 8010a28:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010a2c:	4283      	cmp	r3, r0
 8010a2e:	d960      	bls.n	8010af2 <listen_message_reliably+0x116>
 8010a30:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010a34:	2102      	movs	r1, #2
 8010a36:	2201      	movs	r2, #1
 8010a38:	f001 f990 	bl	8011d5c <uxr_stream_id>
 8010a3c:	00e4      	lsls	r4, r4, #3
 8010a3e:	f104 0520 	add.w	r5, r4, #32
 8010a42:	4445      	add	r5, r8
 8010a44:	4601      	mov	r1, r0
 8010a46:	463b      	mov	r3, r7
 8010a48:	464a      	mov	r2, r9
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a4e:	f003 fee9 	bl	8014824 <uxr_update_output_stream_heartbeat_timestamp>
 8010a52:	eb08 0304 	add.w	r3, r8, r4
 8010a56:	2800      	cmp	r0, #0
 8010a58:	d0da      	beq.n	8010a10 <listen_message_reliably+0x34>
 8010a5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010a5e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010a62:	9304      	str	r3, [sp, #16]
 8010a64:	4640      	mov	r0, r8
 8010a66:	f000 fcaf 	bl	80113c8 <uxr_session_header_offset>
 8010a6a:	3501      	adds	r5, #1
 8010a6c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010a70:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010a74:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010a78:	2300      	movs	r3, #0
 8010a7a:	2211      	movs	r2, #17
 8010a7c:	9000      	str	r0, [sp, #0]
 8010a7e:	a90c      	add	r1, sp, #48	@ 0x30
 8010a80:	4650      	mov	r0, sl
 8010a82:	f7fa fab5 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8010a86:	2300      	movs	r3, #0
 8010a88:	2205      	movs	r2, #5
 8010a8a:	210b      	movs	r1, #11
 8010a8c:	4650      	mov	r0, sl
 8010a8e:	f001 fa9d 	bl	8011fcc <uxr_buffer_submessage_header>
 8010a92:	8968      	ldrh	r0, [r5, #10]
 8010a94:	2101      	movs	r1, #1
 8010a96:	f003 ff67 	bl	8014968 <uxr_seq_num_add>
 8010a9a:	892b      	ldrh	r3, [r5, #8]
 8010a9c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	9b04      	ldr	r3, [sp, #16]
 8010aa4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010aa8:	a90a      	add	r1, sp, #40	@ 0x28
 8010aaa:	4650      	mov	r0, sl
 8010aac:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010ab0:	f002 fa42 	bl	8012f38 <uxr_serialize_HEARTBEAT_Payload>
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010aba:	4640      	mov	r0, r8
 8010abc:	f000 fc2e 	bl	801131c <uxr_stamp_session_header>
 8010ac0:	4650      	mov	r0, sl
 8010ac2:	f7fa fad3 	bl	800b06c <ucdr_buffer_length>
 8010ac6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010aca:	4602      	mov	r2, r0
 8010acc:	a90c      	add	r1, sp, #48	@ 0x30
 8010ace:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010ad2:	4444      	add	r4, r8
 8010ad4:	47a8      	blx	r5
 8010ad6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010ada:	9903      	ldr	r1, [sp, #12]
 8010adc:	455a      	cmp	r2, fp
 8010ade:	f106 0601 	add.w	r6, r6, #1
 8010ae2:	eb73 0101 	sbcs.w	r1, r3, r1
 8010ae6:	b2f0      	uxtb	r0, r6
 8010ae8:	db9c      	blt.n	8010a24 <listen_message_reliably+0x48>
 8010aea:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010aee:	4283      	cmp	r3, r0
 8010af0:	d89e      	bhi.n	8010a30 <listen_message_reliably+0x54>
 8010af2:	9a03      	ldr	r2, [sp, #12]
 8010af4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010af8:	429a      	cmp	r2, r3
 8010afa:	bf08      	it	eq
 8010afc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010b00:	d01e      	beq.n	8010b40 <listen_message_reliably+0x164>
 8010b02:	ebab 0309 	sub.w	r3, fp, r9
 8010b06:	9905      	ldr	r1, [sp, #20]
 8010b08:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	bf08      	it	eq
 8010b10:	2301      	moveq	r3, #1
 8010b12:	4299      	cmp	r1, r3
 8010b14:	bfa8      	it	ge
 8010b16:	4619      	movge	r1, r3
 8010b18:	6894      	ldr	r4, [r2, #8]
 8010b1a:	6810      	ldr	r0, [r2, #0]
 8010b1c:	4689      	mov	r9, r1
 8010b1e:	460b      	mov	r3, r1
 8010b20:	aa08      	add	r2, sp, #32
 8010b22:	a907      	add	r1, sp, #28
 8010b24:	47a0      	blx	r4
 8010b26:	b968      	cbnz	r0, 8010b44 <listen_message_reliably+0x168>
 8010b28:	9b05      	ldr	r3, [sp, #20]
 8010b2a:	eba3 0309 	sub.w	r3, r3, r9
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	9305      	str	r3, [sp, #20]
 8010b32:	f73f af5c 	bgt.w	80109ee <listen_message_reliably+0x12>
 8010b36:	4604      	mov	r4, r0
 8010b38:	4620      	mov	r0, r4
 8010b3a:	b01d      	add	sp, #116	@ 0x74
 8010b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b40:	9b05      	ldr	r3, [sp, #20]
 8010b42:	e7e0      	b.n	8010b06 <listen_message_reliably+0x12a>
 8010b44:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010b48:	4604      	mov	r4, r0
 8010b4a:	a80c      	add	r0, sp, #48	@ 0x30
 8010b4c:	f7fa fa62 	bl	800b014 <ucdr_init_buffer>
 8010b50:	2500      	movs	r5, #0
 8010b52:	f10d 031a 	add.w	r3, sp, #26
 8010b56:	aa06      	add	r2, sp, #24
 8010b58:	a90c      	add	r1, sp, #48	@ 0x30
 8010b5a:	4640      	mov	r0, r8
 8010b5c:	f88d 5018 	strb.w	r5, [sp, #24]
 8010b60:	f000 fbf0 	bl	8011344 <uxr_read_session_header>
 8010b64:	b918      	cbnz	r0, 8010b6e <listen_message_reliably+0x192>
 8010b66:	4620      	mov	r0, r4
 8010b68:	b01d      	add	sp, #116	@ 0x74
 8010b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b6e:	4629      	mov	r1, r5
 8010b70:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010b74:	f001 f91c 	bl	8011db0 <uxr_stream_id_from_raw>
 8010b78:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010b7c:	2d01      	cmp	r5, #1
 8010b7e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010b82:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010b86:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010b8a:	d04b      	beq.n	8010c24 <listen_message_reliably+0x248>
 8010b8c:	2d02      	cmp	r5, #2
 8010b8e:	d00f      	beq.n	8010bb0 <listen_message_reliably+0x1d4>
 8010b90:	2d00      	cmp	r5, #0
 8010b92:	d1e8      	bne.n	8010b66 <listen_message_reliably+0x18a>
 8010b94:	4629      	mov	r1, r5
 8010b96:	4628      	mov	r0, r5
 8010b98:	f001 f90a 	bl	8011db0 <uxr_stream_id_from_raw>
 8010b9c:	a90c      	add	r1, sp, #48	@ 0x30
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	4640      	mov	r0, r8
 8010ba2:	920a      	str	r2, [sp, #40]	@ 0x28
 8010ba4:	f7ff fd92 	bl	80106cc <read_submessage_list>
 8010ba8:	4620      	mov	r0, r4
 8010baa:	b01d      	add	sp, #116	@ 0x74
 8010bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	f108 0008 	add.w	r0, r8, #8
 8010bb6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010bba:	f001 f9e7 	bl	8011f8c <uxr_get_input_reliable_stream>
 8010bbe:	4607      	mov	r7, r0
 8010bc0:	b338      	cbz	r0, 8010c12 <listen_message_reliably+0x236>
 8010bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bc4:	9203      	str	r2, [sp, #12]
 8010bc6:	a80c      	add	r0, sp, #48	@ 0x30
 8010bc8:	f7fa fa54 	bl	800b074 <ucdr_buffer_remaining>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	f10d 0019 	add.w	r0, sp, #25
 8010bd2:	9000      	str	r0, [sp, #0]
 8010bd4:	9a03      	ldr	r2, [sp, #12]
 8010bd6:	4651      	mov	r1, sl
 8010bd8:	4638      	mov	r0, r7
 8010bda:	f003 fa39 	bl	8014050 <uxr_receive_reliable_message>
 8010bde:	b1c0      	cbz	r0, 8010c12 <listen_message_reliably+0x236>
 8010be0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010be4:	b393      	cbz	r3, 8010c4c <listen_message_reliably+0x270>
 8010be6:	ad14      	add	r5, sp, #80	@ 0x50
 8010be8:	f04f 0a02 	mov.w	sl, #2
 8010bec:	e00a      	b.n	8010c04 <listen_message_reliably+0x228>
 8010bee:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010bf2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010bf6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	4640      	mov	r0, r8
 8010c00:	f7ff fd64 	bl	80106cc <read_submessage_list>
 8010c04:	2204      	movs	r2, #4
 8010c06:	4629      	mov	r1, r5
 8010c08:	4638      	mov	r0, r7
 8010c0a:	f003 faa1 	bl	8014150 <uxr_next_input_reliable_buffer_available>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d1ed      	bne.n	8010bee <listen_message_reliably+0x212>
 8010c12:	4640      	mov	r0, r8
 8010c14:	4632      	mov	r2, r6
 8010c16:	4649      	mov	r1, r9
 8010c18:	f7ff fbd4 	bl	80103c4 <write_submessage_acknack.isra.0>
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	b01d      	add	sp, #116	@ 0x74
 8010c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c24:	4631      	mov	r1, r6
 8010c26:	f108 0008 	add.w	r0, r8, #8
 8010c2a:	f001 f9a5 	bl	8011f78 <uxr_get_input_best_effort_stream>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d099      	beq.n	8010b66 <listen_message_reliably+0x18a>
 8010c32:	4651      	mov	r1, sl
 8010c34:	f003 f978 	bl	8013f28 <uxr_receive_best_effort_message>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d094      	beq.n	8010b66 <listen_message_reliably+0x18a>
 8010c3c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010c40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010c42:	a90c      	add	r1, sp, #48	@ 0x30
 8010c44:	4640      	mov	r0, r8
 8010c46:	f7ff fd41 	bl	80106cc <read_submessage_list>
 8010c4a:	e78c      	b.n	8010b66 <listen_message_reliably+0x18a>
 8010c4c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010c50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010c52:	a90c      	add	r1, sp, #48	@ 0x30
 8010c54:	4640      	mov	r0, r8
 8010c56:	f7ff fd39 	bl	80106cc <read_submessage_list>
 8010c5a:	e7c4      	b.n	8010be6 <listen_message_reliably+0x20a>

08010c5c <uxr_run_session_timeout>:
 8010c5c:	b570      	push	{r4, r5, r6, lr}
 8010c5e:	4604      	mov	r4, r0
 8010c60:	460d      	mov	r5, r1
 8010c62:	f001 f9f9 	bl	8012058 <uxr_millis>
 8010c66:	4606      	mov	r6, r0
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f7ff fc71 	bl	8010550 <uxr_flash_output_streams>
 8010c6e:	4629      	mov	r1, r5
 8010c70:	4620      	mov	r0, r4
 8010c72:	f7ff feb3 	bl	80109dc <listen_message_reliably>
 8010c76:	f001 f9ef 	bl	8012058 <uxr_millis>
 8010c7a:	1b83      	subs	r3, r0, r6
 8010c7c:	1ae9      	subs	r1, r5, r3
 8010c7e:	2900      	cmp	r1, #0
 8010c80:	dcf6      	bgt.n	8010c70 <uxr_run_session_timeout+0x14>
 8010c82:	f104 0008 	add.w	r0, r4, #8
 8010c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c8a:	f001 b989 	b.w	8011fa0 <uxr_output_streams_confirmed>
 8010c8e:	bf00      	nop

08010c90 <uxr_run_session_until_data>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	4604      	mov	r4, r0
 8010c94:	460d      	mov	r5, r1
 8010c96:	f001 f9df 	bl	8012058 <uxr_millis>
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f7ff fc57 	bl	8010550 <uxr_flash_output_streams>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010ca8:	4629      	mov	r1, r5
 8010caa:	e005      	b.n	8010cb8 <uxr_run_session_until_data+0x28>
 8010cac:	f001 f9d4 	bl	8012058 <uxr_millis>
 8010cb0:	1b83      	subs	r3, r0, r6
 8010cb2:	1ae9      	subs	r1, r5, r3
 8010cb4:	2900      	cmp	r1, #0
 8010cb6:	dd07      	ble.n	8010cc8 <uxr_run_session_until_data+0x38>
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f7ff fe8f 	bl	80109dc <listen_message_reliably>
 8010cbe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d0f2      	beq.n	8010cac <uxr_run_session_until_data+0x1c>
 8010cc6:	bd70      	pop	{r4, r5, r6, pc}
 8010cc8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010ccc:	bd70      	pop	{r4, r5, r6, pc}
 8010cce:	bf00      	nop

08010cd0 <uxr_run_session_until_confirm_delivery>:
 8010cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd4:	4606      	mov	r6, r0
 8010cd6:	460d      	mov	r5, r1
 8010cd8:	f001 f9be 	bl	8012058 <uxr_millis>
 8010cdc:	4607      	mov	r7, r0
 8010cde:	4630      	mov	r0, r6
 8010ce0:	f7ff fc36 	bl	8010550 <uxr_flash_output_streams>
 8010ce4:	2d00      	cmp	r5, #0
 8010ce6:	f106 0808 	add.w	r8, r6, #8
 8010cea:	bfa8      	it	ge
 8010cec:	462c      	movge	r4, r5
 8010cee:	da07      	bge.n	8010d00 <uxr_run_session_until_confirm_delivery+0x30>
 8010cf0:	e00e      	b.n	8010d10 <uxr_run_session_until_confirm_delivery+0x40>
 8010cf2:	f7ff fe73 	bl	80109dc <listen_message_reliably>
 8010cf6:	f001 f9af 	bl	8012058 <uxr_millis>
 8010cfa:	1bc3      	subs	r3, r0, r7
 8010cfc:	1aec      	subs	r4, r5, r3
 8010cfe:	d407      	bmi.n	8010d10 <uxr_run_session_until_confirm_delivery+0x40>
 8010d00:	4640      	mov	r0, r8
 8010d02:	f001 f94d 	bl	8011fa0 <uxr_output_streams_confirmed>
 8010d06:	4603      	mov	r3, r0
 8010d08:	4621      	mov	r1, r4
 8010d0a:	4630      	mov	r0, r6
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d0f0      	beq.n	8010cf2 <uxr_run_session_until_confirm_delivery+0x22>
 8010d10:	4640      	mov	r0, r8
 8010d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d16:	f001 b943 	b.w	8011fa0 <uxr_output_streams_confirmed>
 8010d1a:	bf00      	nop

08010d1c <uxr_run_session_until_all_status>:
 8010d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d20:	9c08      	ldr	r4, [sp, #32]
 8010d22:	4606      	mov	r6, r0
 8010d24:	460f      	mov	r7, r1
 8010d26:	4691      	mov	r9, r2
 8010d28:	461d      	mov	r5, r3
 8010d2a:	f7ff fc11 	bl	8010550 <uxr_flash_output_streams>
 8010d2e:	b124      	cbz	r4, 8010d3a <uxr_run_session_until_all_status+0x1e>
 8010d30:	4622      	mov	r2, r4
 8010d32:	21ff      	movs	r1, #255	@ 0xff
 8010d34:	4628      	mov	r0, r5
 8010d36:	f004 fa0f 	bl	8015158 <memset>
 8010d3a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010d3e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010d40:	f001 f98a 	bl	8012058 <uxr_millis>
 8010d44:	3d01      	subs	r5, #1
 8010d46:	f1a9 0902 	sub.w	r9, r9, #2
 8010d4a:	4680      	mov	r8, r0
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f7ff fe44 	bl	80109dc <listen_message_reliably>
 8010d54:	f001 f980 	bl	8012058 <uxr_millis>
 8010d58:	eba0 0008 	sub.w	r0, r0, r8
 8010d5c:	1a39      	subs	r1, r7, r0
 8010d5e:	b344      	cbz	r4, 8010db2 <uxr_run_session_until_all_status+0x96>
 8010d60:	4628      	mov	r0, r5
 8010d62:	46ac      	mov	ip, r5
 8010d64:	2301      	movs	r3, #1
 8010d66:	e002      	b.n	8010d6e <uxr_run_session_until_all_status+0x52>
 8010d68:	42a3      	cmp	r3, r4
 8010d6a:	d20d      	bcs.n	8010d88 <uxr_run_session_until_all_status+0x6c>
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010d72:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010d76:	d1f7      	bne.n	8010d68 <uxr_run_session_until_all_status+0x4c>
 8010d78:	42a3      	cmp	r3, r4
 8010d7a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010d7e:	d213      	bcs.n	8010da8 <uxr_run_session_until_all_status+0x8c>
 8010d80:	2a00      	cmp	r2, #0
 8010d82:	d0f3      	beq.n	8010d6c <uxr_run_session_until_all_status+0x50>
 8010d84:	2900      	cmp	r1, #0
 8010d86:	dce2      	bgt.n	8010d4e <uxr_run_session_until_all_status+0x32>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010d8c:	442c      	add	r4, r5
 8010d8e:	e001      	b.n	8010d94 <uxr_run_session_until_all_status+0x78>
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d812      	bhi.n	8010dba <uxr_run_session_until_all_status+0x9e>
 8010d94:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010d98:	4284      	cmp	r4, r0
 8010d9a:	d1f9      	bne.n	8010d90 <uxr_run_session_until_all_status+0x74>
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	bf8c      	ite	hi
 8010da0:	2000      	movhi	r0, #0
 8010da2:	2001      	movls	r0, #1
 8010da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010da8:	2900      	cmp	r1, #0
 8010daa:	dded      	ble.n	8010d88 <uxr_run_session_until_all_status+0x6c>
 8010dac:	2a00      	cmp	r2, #0
 8010dae:	d1ce      	bne.n	8010d4e <uxr_run_session_until_all_status+0x32>
 8010db0:	e7ea      	b.n	8010d88 <uxr_run_session_until_all_status+0x6c>
 8010db2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010db4:	2001      	movs	r0, #1
 8010db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dba:	2000      	movs	r0, #0
 8010dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010dc0 <wait_session_status>:
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	b09d      	sub	sp, #116	@ 0x74
 8010dc8:	20ff      	movs	r0, #255	@ 0xff
 8010dca:	7160      	strb	r0, [r4, #5]
 8010dcc:	9303      	str	r3, [sp, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f000 80b6 	beq.w	8010f40 <wait_session_status+0x180>
 8010dd4:	468a      	mov	sl, r1
 8010dd6:	4691      	mov	r9, r2
 8010dd8:	f04f 0b00 	mov.w	fp, #0
 8010ddc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010dde:	464a      	mov	r2, r9
 8010de0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010de4:	4651      	mov	r1, sl
 8010de6:	47a8      	blx	r5
 8010de8:	f001 f936 	bl	8012058 <uxr_millis>
 8010dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010df0:	4605      	mov	r5, r0
 8010df2:	e009      	b.n	8010e08 <wait_session_status+0x48>
 8010df4:	f001 f930 	bl	8012058 <uxr_millis>
 8010df8:	1b40      	subs	r0, r0, r5
 8010dfa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	dd40      	ble.n	8010e84 <wait_session_status+0xc4>
 8010e02:	7960      	ldrb	r0, [r4, #5]
 8010e04:	28ff      	cmp	r0, #255	@ 0xff
 8010e06:	d145      	bne.n	8010e94 <wait_session_status+0xd4>
 8010e08:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010e0a:	a908      	add	r1, sp, #32
 8010e0c:	6896      	ldr	r6, [r2, #8]
 8010e0e:	6810      	ldr	r0, [r2, #0]
 8010e10:	aa09      	add	r2, sp, #36	@ 0x24
 8010e12:	47b0      	blx	r6
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d0ed      	beq.n	8010df4 <wait_session_status+0x34>
 8010e18:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010e1c:	a80c      	add	r0, sp, #48	@ 0x30
 8010e1e:	f7fa f8f9 	bl	800b014 <ucdr_init_buffer>
 8010e22:	2600      	movs	r6, #0
 8010e24:	f10d 031e 	add.w	r3, sp, #30
 8010e28:	aa07      	add	r2, sp, #28
 8010e2a:	a90c      	add	r1, sp, #48	@ 0x30
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f88d 601c 	strb.w	r6, [sp, #28]
 8010e32:	f000 fa87 	bl	8011344 <uxr_read_session_header>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d0dc      	beq.n	8010df4 <wait_session_status+0x34>
 8010e3a:	4631      	mov	r1, r6
 8010e3c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010e40:	f000 ffb6 	bl	8011db0 <uxr_stream_id_from_raw>
 8010e44:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010e48:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010e4c:	9302      	str	r3, [sp, #8]
 8010e4e:	2f01      	cmp	r7, #1
 8010e50:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010e54:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010e58:	d05c      	beq.n	8010f14 <wait_session_status+0x154>
 8010e5a:	2f02      	cmp	r7, #2
 8010e5c:	d020      	beq.n	8010ea0 <wait_session_status+0xe0>
 8010e5e:	2f00      	cmp	r7, #0
 8010e60:	d1c8      	bne.n	8010df4 <wait_session_status+0x34>
 8010e62:	4639      	mov	r1, r7
 8010e64:	4638      	mov	r0, r7
 8010e66:	f000 ffa3 	bl	8011db0 <uxr_stream_id_from_raw>
 8010e6a:	a90c      	add	r1, sp, #48	@ 0x30
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ff fc2b 	bl	80106cc <read_submessage_list>
 8010e76:	f001 f8ef 	bl	8012058 <uxr_millis>
 8010e7a:	1b40      	subs	r0, r0, r5
 8010e7c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	dcbe      	bgt.n	8010e02 <wait_session_status+0x42>
 8010e84:	9b03      	ldr	r3, [sp, #12]
 8010e86:	7960      	ldrb	r0, [r4, #5]
 8010e88:	f10b 0b01 	add.w	fp, fp, #1
 8010e8c:	455b      	cmp	r3, fp
 8010e8e:	d001      	beq.n	8010e94 <wait_session_status+0xd4>
 8010e90:	28ff      	cmp	r0, #255	@ 0xff
 8010e92:	d0a3      	beq.n	8010ddc <wait_session_status+0x1c>
 8010e94:	38ff      	subs	r0, #255	@ 0xff
 8010e96:	bf18      	it	ne
 8010e98:	2001      	movne	r0, #1
 8010e9a:	b01d      	add	sp, #116	@ 0x74
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010ea4:	9304      	str	r3, [sp, #16]
 8010ea6:	4631      	mov	r1, r6
 8010ea8:	f104 0008 	add.w	r0, r4, #8
 8010eac:	f001 f86e 	bl	8011f8c <uxr_get_input_reliable_stream>
 8010eb0:	4680      	mov	r8, r0
 8010eb2:	b348      	cbz	r0, 8010f08 <wait_session_status+0x148>
 8010eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010eb6:	9205      	str	r2, [sp, #20]
 8010eb8:	a80c      	add	r0, sp, #48	@ 0x30
 8010eba:	f7fa f8db 	bl	800b074 <ucdr_buffer_remaining>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	f10d 001d 	add.w	r0, sp, #29
 8010ec4:	9000      	str	r0, [sp, #0]
 8010ec6:	9a05      	ldr	r2, [sp, #20]
 8010ec8:	9902      	ldr	r1, [sp, #8]
 8010eca:	4640      	mov	r0, r8
 8010ecc:	f003 f8c0 	bl	8014050 <uxr_receive_reliable_message>
 8010ed0:	b1d0      	cbz	r0, 8010f08 <wait_session_status+0x148>
 8010ed2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d03a      	beq.n	8010f50 <wait_session_status+0x190>
 8010eda:	9f04      	ldr	r7, [sp, #16]
 8010edc:	e00a      	b.n	8010ef4 <wait_session_status+0x134>
 8010ede:	f04f 0302 	mov.w	r3, #2
 8010ee2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010ee6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010eea:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ef0:	f7ff fbec 	bl	80106cc <read_submessage_list>
 8010ef4:	a914      	add	r1, sp, #80	@ 0x50
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	4640      	mov	r0, r8
 8010efa:	f003 f929 	bl	8014150 <uxr_next_input_reliable_buffer_available>
 8010efe:	4603      	mov	r3, r0
 8010f00:	a914      	add	r1, sp, #80	@ 0x50
 8010f02:	4620      	mov	r0, r4
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1ea      	bne.n	8010ede <wait_session_status+0x11e>
 8010f08:	9904      	ldr	r1, [sp, #16]
 8010f0a:	4632      	mov	r2, r6
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f7ff fa59 	bl	80103c4 <write_submessage_acknack.isra.0>
 8010f12:	e76f      	b.n	8010df4 <wait_session_status+0x34>
 8010f14:	4631      	mov	r1, r6
 8010f16:	f104 0008 	add.w	r0, r4, #8
 8010f1a:	f001 f82d 	bl	8011f78 <uxr_get_input_best_effort_stream>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	f43f af68 	beq.w	8010df4 <wait_session_status+0x34>
 8010f24:	9902      	ldr	r1, [sp, #8]
 8010f26:	f002 ffff 	bl	8013f28 <uxr_receive_best_effort_message>
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	f43f af62 	beq.w	8010df4 <wait_session_status+0x34>
 8010f30:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010f34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f36:	a90c      	add	r1, sp, #48	@ 0x30
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f7ff fbc7 	bl	80106cc <read_submessage_list>
 8010f3e:	e759      	b.n	8010df4 <wait_session_status+0x34>
 8010f40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f42:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010f46:	47a0      	blx	r4
 8010f48:	2001      	movs	r0, #1
 8010f4a:	b01d      	add	sp, #116	@ 0x74
 8010f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f50:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010f54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f56:	a90c      	add	r1, sp, #48	@ 0x30
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f7ff fbb7 	bl	80106cc <read_submessage_list>
 8010f5e:	e7bc      	b.n	8010eda <wait_session_status+0x11a>

08010f60 <uxr_delete_session_retries>:
 8010f60:	b530      	push	{r4, r5, lr}
 8010f62:	b08f      	sub	sp, #60	@ 0x3c
 8010f64:	4604      	mov	r4, r0
 8010f66:	460d      	mov	r5, r1
 8010f68:	f000 fa2e 	bl	80113c8 <uxr_session_header_offset>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	2210      	movs	r2, #16
 8010f70:	9000      	str	r0, [sp, #0]
 8010f72:	a902      	add	r1, sp, #8
 8010f74:	a806      	add	r0, sp, #24
 8010f76:	f7fa f83b 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8010f7a:	a906      	add	r1, sp, #24
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 f973 	bl	8011268 <uxr_buffer_delete_session>
 8010f82:	2200      	movs	r2, #0
 8010f84:	4611      	mov	r1, r2
 8010f86:	9b06      	ldr	r3, [sp, #24]
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f000 f9c7 	bl	801131c <uxr_stamp_session_header>
 8010f8e:	a806      	add	r0, sp, #24
 8010f90:	f7fa f86c 	bl	800b06c <ucdr_buffer_length>
 8010f94:	462b      	mov	r3, r5
 8010f96:	4602      	mov	r2, r0
 8010f98:	a902      	add	r1, sp, #8
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7ff ff10 	bl	8010dc0 <wait_session_status>
 8010fa0:	b118      	cbz	r0, 8010faa <uxr_delete_session_retries+0x4a>
 8010fa2:	7960      	ldrb	r0, [r4, #5]
 8010fa4:	fab0 f080 	clz	r0, r0
 8010fa8:	0940      	lsrs	r0, r0, #5
 8010faa:	b00f      	add	sp, #60	@ 0x3c
 8010fac:	bd30      	pop	{r4, r5, pc}
 8010fae:	bf00      	nop

08010fb0 <uxr_create_session>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	f100 0b08 	add.w	fp, r0, #8
 8010fb8:	b0ab      	sub	sp, #172	@ 0xac
 8010fba:	4604      	mov	r4, r0
 8010fbc:	4658      	mov	r0, fp
 8010fbe:	f000 ff2b 	bl	8011e18 <uxr_reset_stream_storage>
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 fa00 	bl	80113c8 <uxr_session_header_offset>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	9000      	str	r0, [sp, #0]
 8010fcc:	221c      	movs	r2, #28
 8010fce:	a90b      	add	r1, sp, #44	@ 0x2c
 8010fd0:	a812      	add	r0, sp, #72	@ 0x48
 8010fd2:	f7fa f80d 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8010fd6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010fd8:	8a1a      	ldrh	r2, [r3, #16]
 8010fda:	3a04      	subs	r2, #4
 8010fdc:	b292      	uxth	r2, r2
 8010fde:	a912      	add	r1, sp, #72	@ 0x48
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f000 f917 	bl	8011214 <uxr_buffer_create_session>
 8010fe6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f000 f983 	bl	80112f4 <uxr_stamp_create_session_header>
 8010fee:	a812      	add	r0, sp, #72	@ 0x48
 8010ff0:	f7fa f83c 	bl	800b06c <ucdr_buffer_length>
 8010ff4:	23ff      	movs	r3, #255	@ 0xff
 8010ff6:	7163      	strb	r3, [r4, #5]
 8010ff8:	230a      	movs	r3, #10
 8010ffa:	46da      	mov	sl, fp
 8010ffc:	9303      	str	r3, [sp, #12]
 8010ffe:	4683      	mov	fp, r0
 8011000:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011002:	465a      	mov	r2, fp
 8011004:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011008:	a90b      	add	r1, sp, #44	@ 0x2c
 801100a:	47a8      	blx	r5
 801100c:	f001 f824 	bl	8012058 <uxr_millis>
 8011010:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011014:	4605      	mov	r5, r0
 8011016:	e009      	b.n	801102c <uxr_create_session+0x7c>
 8011018:	f001 f81e 	bl	8012058 <uxr_millis>
 801101c:	1b40      	subs	r0, r0, r5
 801101e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011022:	2b00      	cmp	r3, #0
 8011024:	7962      	ldrb	r2, [r4, #5]
 8011026:	dd38      	ble.n	801109a <uxr_create_session+0xea>
 8011028:	2aff      	cmp	r2, #255	@ 0xff
 801102a:	d13c      	bne.n	80110a6 <uxr_create_session+0xf6>
 801102c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801102e:	a907      	add	r1, sp, #28
 8011030:	6896      	ldr	r6, [r2, #8]
 8011032:	6810      	ldr	r0, [r2, #0]
 8011034:	aa08      	add	r2, sp, #32
 8011036:	47b0      	blx	r6
 8011038:	2800      	cmp	r0, #0
 801103a:	d0ed      	beq.n	8011018 <uxr_create_session+0x68>
 801103c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011040:	a81a      	add	r0, sp, #104	@ 0x68
 8011042:	f7f9 ffe7 	bl	800b014 <ucdr_init_buffer>
 8011046:	2600      	movs	r6, #0
 8011048:	f10d 031a 	add.w	r3, sp, #26
 801104c:	aa06      	add	r2, sp, #24
 801104e:	a91a      	add	r1, sp, #104	@ 0x68
 8011050:	4620      	mov	r0, r4
 8011052:	f88d 6018 	strb.w	r6, [sp, #24]
 8011056:	f000 f975 	bl	8011344 <uxr_read_session_header>
 801105a:	2800      	cmp	r0, #0
 801105c:	d0dc      	beq.n	8011018 <uxr_create_session+0x68>
 801105e:	4631      	mov	r1, r6
 8011060:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011064:	f000 fea4 	bl	8011db0 <uxr_stream_id_from_raw>
 8011068:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801106c:	2e01      	cmp	r6, #1
 801106e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011072:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011076:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801107a:	d053      	beq.n	8011124 <uxr_create_session+0x174>
 801107c:	2e02      	cmp	r6, #2
 801107e:	d018      	beq.n	80110b2 <uxr_create_session+0x102>
 8011080:	2e00      	cmp	r6, #0
 8011082:	d1c9      	bne.n	8011018 <uxr_create_session+0x68>
 8011084:	4631      	mov	r1, r6
 8011086:	4630      	mov	r0, r6
 8011088:	f000 fe92 	bl	8011db0 <uxr_stream_id_from_raw>
 801108c:	a91a      	add	r1, sp, #104	@ 0x68
 801108e:	4602      	mov	r2, r0
 8011090:	900a      	str	r0, [sp, #40]	@ 0x28
 8011092:	4620      	mov	r0, r4
 8011094:	f7ff fb1a 	bl	80106cc <read_submessage_list>
 8011098:	e7be      	b.n	8011018 <uxr_create_session+0x68>
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	3b01      	subs	r3, #1
 801109e:	9303      	str	r3, [sp, #12]
 80110a0:	d001      	beq.n	80110a6 <uxr_create_session+0xf6>
 80110a2:	2aff      	cmp	r2, #255	@ 0xff
 80110a4:	d0ac      	beq.n	8011000 <uxr_create_session+0x50>
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	d051      	beq.n	801114e <uxr_create_session+0x19e>
 80110aa:	2000      	movs	r0, #0
 80110ac:	b02b      	add	sp, #172	@ 0xac
 80110ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80110b6:	9304      	str	r3, [sp, #16]
 80110b8:	4639      	mov	r1, r7
 80110ba:	4650      	mov	r0, sl
 80110bc:	f000 ff66 	bl	8011f8c <uxr_get_input_reliable_stream>
 80110c0:	4680      	mov	r8, r0
 80110c2:	b348      	cbz	r0, 8011118 <uxr_create_session+0x168>
 80110c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80110c6:	9205      	str	r2, [sp, #20]
 80110c8:	a81a      	add	r0, sp, #104	@ 0x68
 80110ca:	f7f9 ffd3 	bl	800b074 <ucdr_buffer_remaining>
 80110ce:	4603      	mov	r3, r0
 80110d0:	f10d 0019 	add.w	r0, sp, #25
 80110d4:	9000      	str	r0, [sp, #0]
 80110d6:	9a05      	ldr	r2, [sp, #20]
 80110d8:	4649      	mov	r1, r9
 80110da:	4640      	mov	r0, r8
 80110dc:	f002 ffb8 	bl	8014050 <uxr_receive_reliable_message>
 80110e0:	b1d0      	cbz	r0, 8011118 <uxr_create_session+0x168>
 80110e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d038      	beq.n	801115c <uxr_create_session+0x1ac>
 80110ea:	9e04      	ldr	r6, [sp, #16]
 80110ec:	e00a      	b.n	8011104 <uxr_create_session+0x154>
 80110ee:	f04f 0302 	mov.w	r3, #2
 80110f2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80110f6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80110fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011100:	f7ff fae4 	bl	80106cc <read_submessage_list>
 8011104:	a922      	add	r1, sp, #136	@ 0x88
 8011106:	2204      	movs	r2, #4
 8011108:	4640      	mov	r0, r8
 801110a:	f003 f821 	bl	8014150 <uxr_next_input_reliable_buffer_available>
 801110e:	4603      	mov	r3, r0
 8011110:	a922      	add	r1, sp, #136	@ 0x88
 8011112:	4620      	mov	r0, r4
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1ea      	bne.n	80110ee <uxr_create_session+0x13e>
 8011118:	9904      	ldr	r1, [sp, #16]
 801111a:	463a      	mov	r2, r7
 801111c:	4620      	mov	r0, r4
 801111e:	f7ff f951 	bl	80103c4 <write_submessage_acknack.isra.0>
 8011122:	e779      	b.n	8011018 <uxr_create_session+0x68>
 8011124:	4639      	mov	r1, r7
 8011126:	4650      	mov	r0, sl
 8011128:	f000 ff26 	bl	8011f78 <uxr_get_input_best_effort_stream>
 801112c:	2800      	cmp	r0, #0
 801112e:	f43f af73 	beq.w	8011018 <uxr_create_session+0x68>
 8011132:	4649      	mov	r1, r9
 8011134:	f002 fef8 	bl	8013f28 <uxr_receive_best_effort_message>
 8011138:	2800      	cmp	r0, #0
 801113a:	f43f af6d 	beq.w	8011018 <uxr_create_session+0x68>
 801113e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011142:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011144:	a91a      	add	r1, sp, #104	@ 0x68
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fac0 	bl	80106cc <read_submessage_list>
 801114c:	e764      	b.n	8011018 <uxr_create_session+0x68>
 801114e:	4650      	mov	r0, sl
 8011150:	f000 fe62 	bl	8011e18 <uxr_reset_stream_storage>
 8011154:	2001      	movs	r0, #1
 8011156:	b02b      	add	sp, #172	@ 0xac
 8011158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011160:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011162:	a91a      	add	r1, sp, #104	@ 0x68
 8011164:	4620      	mov	r0, r4
 8011166:	f7ff fab1 	bl	80106cc <read_submessage_list>
 801116a:	e7be      	b.n	80110ea <uxr_create_session+0x13a>

0801116c <uxr_prepare_stream_to_write_submessage>:
 801116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011170:	b082      	sub	sp, #8
 8011172:	4682      	mov	sl, r0
 8011174:	4610      	mov	r0, r2
 8011176:	4615      	mov	r5, r2
 8011178:	461e      	mov	r6, r3
 801117a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801117e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011182:	9101      	str	r1, [sp, #4]
 8011184:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011188:	f000 ff60 	bl	801204c <uxr_submessage_padding>
 801118c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011190:	f105 0904 	add.w	r9, r5, #4
 8011194:	2b01      	cmp	r3, #1
 8011196:	4481      	add	r9, r0
 8011198:	d01d      	beq.n	80111d6 <uxr_prepare_stream_to_write_submessage+0x6a>
 801119a:	2b02      	cmp	r3, #2
 801119c:	d116      	bne.n	80111cc <uxr_prepare_stream_to_write_submessage+0x60>
 801119e:	4621      	mov	r1, r4
 80111a0:	f10a 0008 	add.w	r0, sl, #8
 80111a4:	f000 fede 	bl	8011f64 <uxr_get_output_reliable_stream>
 80111a8:	4604      	mov	r4, r0
 80111aa:	b158      	cbz	r0, 80111c4 <uxr_prepare_stream_to_write_submessage+0x58>
 80111ac:	4649      	mov	r1, r9
 80111ae:	4632      	mov	r2, r6
 80111b0:	f003 f98a 	bl	80144c8 <uxr_prepare_reliable_buffer_to_write>
 80111b4:	4604      	mov	r4, r0
 80111b6:	b12c      	cbz	r4, 80111c4 <uxr_prepare_stream_to_write_submessage+0x58>
 80111b8:	4643      	mov	r3, r8
 80111ba:	b2aa      	uxth	r2, r5
 80111bc:	4639      	mov	r1, r7
 80111be:	4630      	mov	r0, r6
 80111c0:	f000 ff04 	bl	8011fcc <uxr_buffer_submessage_header>
 80111c4:	4620      	mov	r0, r4
 80111c6:	b002      	add	sp, #8
 80111c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111cc:	2400      	movs	r4, #0
 80111ce:	4620      	mov	r0, r4
 80111d0:	b002      	add	sp, #8
 80111d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d6:	4621      	mov	r1, r4
 80111d8:	f10a 0008 	add.w	r0, sl, #8
 80111dc:	f000 feba 	bl	8011f54 <uxr_get_output_best_effort_stream>
 80111e0:	4604      	mov	r4, r0
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d0ee      	beq.n	80111c4 <uxr_prepare_stream_to_write_submessage+0x58>
 80111e6:	4649      	mov	r1, r9
 80111e8:	4632      	mov	r2, r6
 80111ea:	f003 f89d 	bl	8014328 <uxr_prepare_best_effort_buffer_to_write>
 80111ee:	4604      	mov	r4, r0
 80111f0:	e7e1      	b.n	80111b6 <uxr_prepare_stream_to_write_submessage+0x4a>
 80111f2:	bf00      	nop

080111f4 <uxr_init_session_info>:
 80111f4:	0e13      	lsrs	r3, r2, #24
 80111f6:	7043      	strb	r3, [r0, #1]
 80111f8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80111fc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011200:	7001      	strb	r1, [r0, #0]
 8011202:	70c3      	strb	r3, [r0, #3]
 8011204:	2109      	movs	r1, #9
 8011206:	23ff      	movs	r3, #255	@ 0xff
 8011208:	f880 c002 	strb.w	ip, [r0, #2]
 801120c:	7102      	strb	r2, [r0, #4]
 801120e:	80c1      	strh	r1, [r0, #6]
 8011210:	7143      	strb	r3, [r0, #5]
 8011212:	4770      	bx	lr

08011214 <uxr_buffer_create_session>:
 8011214:	b530      	push	{r4, r5, lr}
 8011216:	b089      	sub	sp, #36	@ 0x24
 8011218:	2300      	movs	r3, #0
 801121a:	4d12      	ldr	r5, [pc, #72]	@ (8011264 <uxr_buffer_create_session+0x50>)
 801121c:	9307      	str	r3, [sp, #28]
 801121e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011222:	2201      	movs	r2, #1
 8011224:	9301      	str	r3, [sp, #4]
 8011226:	80c2      	strh	r2, [r0, #6]
 8011228:	f88d 2004 	strb.w	r2, [sp, #4]
 801122c:	682a      	ldr	r2, [r5, #0]
 801122e:	9200      	str	r2, [sp, #0]
 8011230:	88aa      	ldrh	r2, [r5, #4]
 8011232:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011236:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801123a:	9202      	str	r2, [sp, #8]
 801123c:	460c      	mov	r4, r1
 801123e:	7802      	ldrb	r2, [r0, #0]
 8011240:	9303      	str	r3, [sp, #12]
 8011242:	4619      	mov	r1, r3
 8011244:	f88d 200c 	strb.w	r2, [sp, #12]
 8011248:	4620      	mov	r0, r4
 801124a:	2210      	movs	r2, #16
 801124c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011250:	9306      	str	r3, [sp, #24]
 8011252:	f000 febb 	bl	8011fcc <uxr_buffer_submessage_header>
 8011256:	4669      	mov	r1, sp
 8011258:	4620      	mov	r0, r4
 801125a:	f001 fccf 	bl	8012bfc <uxr_serialize_CREATE_CLIENT_Payload>
 801125e:	b009      	add	sp, #36	@ 0x24
 8011260:	bd30      	pop	{r4, r5, pc}
 8011262:	bf00      	nop
 8011264:	08016100 	.word	0x08016100

08011268 <uxr_buffer_delete_session>:
 8011268:	b510      	push	{r4, lr}
 801126a:	4b0c      	ldr	r3, [pc, #48]	@ (801129c <uxr_buffer_delete_session+0x34>)
 801126c:	b082      	sub	sp, #8
 801126e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011272:	f8ad c006 	strh.w	ip, [sp, #6]
 8011276:	460c      	mov	r4, r1
 8011278:	2202      	movs	r2, #2
 801127a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801127e:	80c2      	strh	r2, [r0, #6]
 8011280:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011284:	2204      	movs	r2, #4
 8011286:	2300      	movs	r3, #0
 8011288:	2103      	movs	r1, #3
 801128a:	4620      	mov	r0, r4
 801128c:	f000 fe9e 	bl	8011fcc <uxr_buffer_submessage_header>
 8011290:	a901      	add	r1, sp, #4
 8011292:	4620      	mov	r0, r4
 8011294:	f001 fd58 	bl	8012d48 <uxr_serialize_DELETE_Payload>
 8011298:	b002      	add	sp, #8
 801129a:	bd10      	pop	{r4, pc}
 801129c:	08016100 	.word	0x08016100

080112a0 <uxr_read_create_session_status>:
 80112a0:	b510      	push	{r4, lr}
 80112a2:	b088      	sub	sp, #32
 80112a4:	4604      	mov	r4, r0
 80112a6:	4608      	mov	r0, r1
 80112a8:	a901      	add	r1, sp, #4
 80112aa:	f001 fd5d 	bl	8012d68 <uxr_deserialize_STATUS_AGENT_Payload>
 80112ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112b2:	7163      	strb	r3, [r4, #5]
 80112b4:	b008      	add	sp, #32
 80112b6:	bd10      	pop	{r4, pc}

080112b8 <uxr_read_delete_session_status>:
 80112b8:	b510      	push	{r4, lr}
 80112ba:	4604      	mov	r4, r0
 80112bc:	b084      	sub	sp, #16
 80112be:	4608      	mov	r0, r1
 80112c0:	a902      	add	r1, sp, #8
 80112c2:	f001 fd81 	bl	8012dc8 <uxr_deserialize_STATUS_Payload>
 80112c6:	88e3      	ldrh	r3, [r4, #6]
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d001      	beq.n	80112d0 <uxr_read_delete_session_status+0x18>
 80112cc:	b004      	add	sp, #16
 80112ce:	bd10      	pop	{r4, pc}
 80112d0:	f10d 000a 	add.w	r0, sp, #10
 80112d4:	f7fe fecc 	bl	8010070 <uxr_object_id_from_raw>
 80112d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80112dc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80112e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	bf04      	itt	eq
 80112ea:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80112ee:	7163      	strbeq	r3, [r4, #5]
 80112f0:	b004      	add	sp, #16
 80112f2:	bd10      	pop	{r4, pc}

080112f4 <uxr_stamp_create_session_header>:
 80112f4:	b510      	push	{r4, lr}
 80112f6:	2208      	movs	r2, #8
 80112f8:	b08a      	sub	sp, #40	@ 0x28
 80112fa:	4604      	mov	r4, r0
 80112fc:	eb0d 0002 	add.w	r0, sp, r2
 8011300:	f7f9 fe88 	bl	800b014 <ucdr_init_buffer>
 8011304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011308:	9400      	str	r4, [sp, #0]
 801130a:	2300      	movs	r3, #0
 801130c:	461a      	mov	r2, r3
 801130e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011312:	a802      	add	r0, sp, #8
 8011314:	f000 ff00 	bl	8012118 <uxr_serialize_message_header>
 8011318:	b00a      	add	sp, #40	@ 0x28
 801131a:	bd10      	pop	{r4, pc}

0801131c <uxr_stamp_session_header>:
 801131c:	b530      	push	{r4, r5, lr}
 801131e:	b08d      	sub	sp, #52	@ 0x34
 8011320:	4604      	mov	r4, r0
 8011322:	460d      	mov	r5, r1
 8011324:	9203      	str	r2, [sp, #12]
 8011326:	4619      	mov	r1, r3
 8011328:	a804      	add	r0, sp, #16
 801132a:	2208      	movs	r2, #8
 801132c:	f7f9 fe72 	bl	800b014 <ucdr_init_buffer>
 8011330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011334:	9b03      	ldr	r3, [sp, #12]
 8011336:	9400      	str	r4, [sp, #0]
 8011338:	462a      	mov	r2, r5
 801133a:	a804      	add	r0, sp, #16
 801133c:	f000 feec 	bl	8012118 <uxr_serialize_message_header>
 8011340:	b00d      	add	sp, #52	@ 0x34
 8011342:	bd30      	pop	{r4, r5, pc}

08011344 <uxr_read_session_header>:
 8011344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011348:	4607      	mov	r7, r0
 801134a:	b084      	sub	sp, #16
 801134c:	4608      	mov	r0, r1
 801134e:	460c      	mov	r4, r1
 8011350:	4615      	mov	r5, r2
 8011352:	461e      	mov	r6, r3
 8011354:	f7f9 fe8e 	bl	800b074 <ucdr_buffer_remaining>
 8011358:	2808      	cmp	r0, #8
 801135a:	d803      	bhi.n	8011364 <uxr_read_session_header+0x20>
 801135c:	2000      	movs	r0, #0
 801135e:	b004      	add	sp, #16
 8011360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011364:	f10d 080c 	add.w	r8, sp, #12
 8011368:	4633      	mov	r3, r6
 801136a:	462a      	mov	r2, r5
 801136c:	f8cd 8000 	str.w	r8, [sp]
 8011370:	4620      	mov	r0, r4
 8011372:	f10d 010b 	add.w	r1, sp, #11
 8011376:	f000 feed 	bl	8012154 <uxr_deserialize_message_header>
 801137a:	783a      	ldrb	r2, [r7, #0]
 801137c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011380:	4293      	cmp	r3, r2
 8011382:	d1eb      	bne.n	801135c <uxr_read_session_header+0x18>
 8011384:	061b      	lsls	r3, r3, #24
 8011386:	d41c      	bmi.n	80113c2 <uxr_read_session_header+0x7e>
 8011388:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801138c:	787b      	ldrb	r3, [r7, #1]
 801138e:	429a      	cmp	r2, r3
 8011390:	d003      	beq.n	801139a <uxr_read_session_header+0x56>
 8011392:	2001      	movs	r0, #1
 8011394:	f080 0001 	eor.w	r0, r0, #1
 8011398:	e7e1      	b.n	801135e <uxr_read_session_header+0x1a>
 801139a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801139e:	78bb      	ldrb	r3, [r7, #2]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	f107 0102 	add.w	r1, r7, #2
 80113a6:	d1f4      	bne.n	8011392 <uxr_read_session_header+0x4e>
 80113a8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80113ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d1ee      	bne.n	8011392 <uxr_read_session_header+0x4e>
 80113b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80113b8:	784b      	ldrb	r3, [r1, #1]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d1e9      	bne.n	8011392 <uxr_read_session_header+0x4e>
 80113be:	2000      	movs	r0, #0
 80113c0:	e7e8      	b.n	8011394 <uxr_read_session_header+0x50>
 80113c2:	2001      	movs	r0, #1
 80113c4:	e7cb      	b.n	801135e <uxr_read_session_header+0x1a>
 80113c6:	bf00      	nop

080113c8 <uxr_session_header_offset>:
 80113c8:	f990 3000 	ldrsb.w	r3, [r0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	bfac      	ite	ge
 80113d0:	2008      	movge	r0, #8
 80113d2:	2004      	movlt	r0, #4
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop

080113d8 <uxr_init_base_object_request>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	88c3      	ldrh	r3, [r0, #6]
 80113dc:	b082      	sub	sp, #8
 80113de:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80113e2:	9101      	str	r1, [sp, #4]
 80113e4:	f1a3 010a 	sub.w	r1, r3, #10
 80113e8:	b289      	uxth	r1, r1
 80113ea:	42a1      	cmp	r1, r4
 80113ec:	d80e      	bhi.n	801140c <uxr_init_base_object_request+0x34>
 80113ee:	3301      	adds	r3, #1
 80113f0:	b29c      	uxth	r4, r3
 80113f2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	80c4      	strh	r4, [r0, #6]
 80113fa:	9801      	ldr	r0, [sp, #4]
 80113fc:	7011      	strb	r1, [r2, #0]
 80113fe:	7053      	strb	r3, [r2, #1]
 8011400:	1c91      	adds	r1, r2, #2
 8011402:	f7fe fe49 	bl	8010098 <uxr_object_id_to_raw>
 8011406:	4620      	mov	r0, r4
 8011408:	b002      	add	sp, #8
 801140a:	bd10      	pop	{r4, pc}
 801140c:	230a      	movs	r3, #10
 801140e:	2100      	movs	r1, #0
 8011410:	461c      	mov	r4, r3
 8011412:	e7f1      	b.n	80113f8 <uxr_init_base_object_request+0x20>

08011414 <uxr_parse_base_object_request>:
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	4604      	mov	r4, r0
 8011418:	3002      	adds	r0, #2
 801141a:	460d      	mov	r5, r1
 801141c:	4616      	mov	r6, r2
 801141e:	f7fe fe27 	bl	8010070 <uxr_object_id_from_raw>
 8011422:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011426:	8028      	strh	r0, [r5, #0]
 8011428:	806b      	strh	r3, [r5, #2]
 801142a:	7822      	ldrb	r2, [r4, #0]
 801142c:	7863      	ldrb	r3, [r4, #1]
 801142e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011432:	8033      	strh	r3, [r6, #0]
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	bf00      	nop

08011438 <uxr_init_framing_io>:
 8011438:	2300      	movs	r3, #0
 801143a:	7041      	strb	r1, [r0, #1]
 801143c:	7003      	strb	r3, [r0, #0]
 801143e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop

08011444 <uxr_write_framed_msg>:
 8011444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011448:	4617      	mov	r7, r2
 801144a:	7842      	ldrb	r2, [r0, #1]
 801144c:	b083      	sub	sp, #12
 801144e:	460e      	mov	r6, r1
 8011450:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011454:	469a      	mov	sl, r3
 8011456:	2901      	cmp	r1, #1
 8011458:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801145c:	4604      	mov	r4, r0
 801145e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011462:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011466:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801146a:	f240 8137 	bls.w	80116dc <uxr_write_framed_msg+0x298>
 801146e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011472:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011476:	2901      	cmp	r1, #1
 8011478:	f04f 0202 	mov.w	r2, #2
 801147c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011480:	f240 808f 	bls.w	80115a2 <uxr_write_framed_msg+0x15e>
 8011484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011486:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801148a:	b2dd      	uxtb	r5, r3
 801148c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011490:	2203      	movs	r2, #3
 8011492:	2901      	cmp	r1, #1
 8011494:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011498:	f240 809a 	bls.w	80115d0 <uxr_write_framed_msg+0x18c>
 801149c:	18a1      	adds	r1, r4, r2
 801149e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114a0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80114a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80114a8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80114ac:	3201      	adds	r2, #1
 80114ae:	2801      	cmp	r0, #1
 80114b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114b4:	f240 80a0 	bls.w	80115f8 <uxr_write_framed_msg+0x1b4>
 80114b8:	18a0      	adds	r0, r4, r2
 80114ba:	3201      	adds	r2, #1
 80114bc:	b2d2      	uxtb	r2, r2
 80114be:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80114c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f000 80a9 	beq.w	801161e <uxr_write_framed_msg+0x1da>
 80114cc:	f04f 0900 	mov.w	r9, #0
 80114d0:	46c8      	mov	r8, r9
 80114d2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80114d6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80114da:	2901      	cmp	r1, #1
 80114dc:	f240 80c3 	bls.w	8011666 <uxr_write_framed_msg+0x222>
 80114e0:	2a29      	cmp	r2, #41	@ 0x29
 80114e2:	f200 809f 	bhi.w	8011624 <uxr_write_framed_msg+0x1e0>
 80114e6:	18a1      	adds	r1, r4, r2
 80114e8:	3201      	adds	r2, #1
 80114ea:	b2d2      	uxtb	r2, r2
 80114ec:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80114f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114f4:	ea89 0303 	eor.w	r3, r9, r3
 80114f8:	498c      	ldr	r1, [pc, #560]	@ (801172c <uxr_write_framed_msg+0x2e8>)
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	f108 0801 	add.w	r8, r8, #1
 8011500:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011504:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801150a:	4543      	cmp	r3, r8
 801150c:	d8e1      	bhi.n	80114d2 <uxr_write_framed_msg+0x8e>
 801150e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011512:	fa5f f889 	uxtb.w	r8, r9
 8011516:	9301      	str	r3, [sp, #4]
 8011518:	f04f 0900 	mov.w	r9, #0
 801151c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011520:	fa5f f18a 	uxtb.w	r1, sl
 8011524:	2901      	cmp	r1, #1
 8011526:	d921      	bls.n	801156c <uxr_write_framed_msg+0x128>
 8011528:	2a29      	cmp	r2, #41	@ 0x29
 801152a:	f240 80af 	bls.w	801168c <uxr_write_framed_msg+0x248>
 801152e:	2500      	movs	r5, #0
 8011530:	e000      	b.n	8011534 <uxr_write_framed_msg+0xf0>
 8011532:	b160      	cbz	r0, 801154e <uxr_write_framed_msg+0x10a>
 8011534:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011538:	1b52      	subs	r2, r2, r5
 801153a:	465b      	mov	r3, fp
 801153c:	4421      	add	r1, r4
 801153e:	4638      	mov	r0, r7
 8011540:	47b0      	blx	r6
 8011542:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011546:	4405      	add	r5, r0
 8011548:	4295      	cmp	r5, r2
 801154a:	d3f2      	bcc.n	8011532 <uxr_write_framed_msg+0xee>
 801154c:	d003      	beq.n	8011556 <uxr_write_framed_msg+0x112>
 801154e:	2000      	movs	r0, #0
 8011550:	b003      	add	sp, #12
 8011552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011556:	fa5f f18a 	uxtb.w	r1, sl
 801155a:	f04f 0300 	mov.w	r3, #0
 801155e:	2901      	cmp	r1, #1
 8011560:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011564:	f04f 0200 	mov.w	r2, #0
 8011568:	f200 8090 	bhi.w	801168c <uxr_write_framed_msg+0x248>
 801156c:	1c51      	adds	r1, r2, #1
 801156e:	b2c9      	uxtb	r1, r1
 8011570:	2929      	cmp	r1, #41	@ 0x29
 8011572:	d8dc      	bhi.n	801152e <uxr_write_framed_msg+0xea>
 8011574:	18a5      	adds	r5, r4, r2
 8011576:	4421      	add	r1, r4
 8011578:	3202      	adds	r2, #2
 801157a:	f088 0820 	eor.w	r8, r8, #32
 801157e:	4648      	mov	r0, r9
 8011580:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011584:	b2d2      	uxtb	r2, r2
 8011586:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801158a:	f04f 0901 	mov.w	r9, #1
 801158e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011592:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011596:	2800      	cmp	r0, #0
 8011598:	f040 8085 	bne.w	80116a6 <uxr_write_framed_msg+0x262>
 801159c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80115a0:	e7bc      	b.n	801151c <uxr_write_framed_msg+0xd8>
 80115a2:	4611      	mov	r1, r2
 80115a4:	f04f 0c03 	mov.w	ip, #3
 80115a8:	2204      	movs	r2, #4
 80115aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115ac:	4421      	add	r1, r4
 80115ae:	b2dd      	uxtb	r5, r3
 80115b0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80115b4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80115b8:	44a4      	add	ip, r4
 80115ba:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80115be:	f080 0020 	eor.w	r0, r0, #32
 80115c2:	2901      	cmp	r1, #1
 80115c4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80115c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115cc:	f63f af66 	bhi.w	801149c <uxr_write_framed_msg+0x58>
 80115d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115d2:	18a0      	adds	r0, r4, r2
 80115d4:	f085 0520 	eor.w	r5, r5, #32
 80115d8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80115dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80115e0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80115e4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80115e8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80115ec:	3202      	adds	r2, #2
 80115ee:	2801      	cmp	r0, #1
 80115f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115f4:	f63f af60 	bhi.w	80114b8 <uxr_write_framed_msg+0x74>
 80115f8:	1c50      	adds	r0, r2, #1
 80115fa:	18a5      	adds	r5, r4, r2
 80115fc:	fa54 f080 	uxtab	r0, r4, r0
 8011600:	3202      	adds	r2, #2
 8011602:	f081 0120 	eor.w	r1, r1, #32
 8011606:	b2d2      	uxtb	r2, r2
 8011608:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801160c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011610:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011614:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011618:	2b00      	cmp	r3, #0
 801161a:	f47f af57 	bne.w	80114cc <uxr_write_framed_msg+0x88>
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	4698      	mov	r8, r3
 8011622:	e779      	b.n	8011518 <uxr_write_framed_msg+0xd4>
 8011624:	2500      	movs	r5, #0
 8011626:	e001      	b.n	801162c <uxr_write_framed_msg+0x1e8>
 8011628:	2800      	cmp	r0, #0
 801162a:	d090      	beq.n	801154e <uxr_write_framed_msg+0x10a>
 801162c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011630:	1b52      	subs	r2, r2, r5
 8011632:	465b      	mov	r3, fp
 8011634:	4421      	add	r1, r4
 8011636:	4638      	mov	r0, r7
 8011638:	47b0      	blx	r6
 801163a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801163e:	4405      	add	r5, r0
 8011640:	4295      	cmp	r5, r2
 8011642:	d3f1      	bcc.n	8011628 <uxr_write_framed_msg+0x1e4>
 8011644:	d183      	bne.n	801154e <uxr_write_framed_msg+0x10a>
 8011646:	f04f 0300 	mov.w	r3, #0
 801164a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801164e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011650:	4543      	cmp	r3, r8
 8011652:	d964      	bls.n	801171e <uxr_write_framed_msg+0x2da>
 8011654:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011658:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801165c:	2901      	cmp	r1, #1
 801165e:	f04f 0200 	mov.w	r2, #0
 8011662:	f63f af3d 	bhi.w	80114e0 <uxr_write_framed_msg+0x9c>
 8011666:	1c51      	adds	r1, r2, #1
 8011668:	b2c9      	uxtb	r1, r1
 801166a:	2929      	cmp	r1, #41	@ 0x29
 801166c:	d8da      	bhi.n	8011624 <uxr_write_framed_msg+0x1e0>
 801166e:	18a0      	adds	r0, r4, r2
 8011670:	4421      	add	r1, r4
 8011672:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011676:	3202      	adds	r2, #2
 8011678:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801167c:	b2d2      	uxtb	r2, r2
 801167e:	f083 0020 	eor.w	r0, r3, #32
 8011682:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011686:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801168a:	e733      	b.n	80114f4 <uxr_write_framed_msg+0xb0>
 801168c:	18a1      	adds	r1, r4, r2
 801168e:	3201      	adds	r2, #1
 8011690:	4648      	mov	r0, r9
 8011692:	b2d2      	uxtb	r2, r2
 8011694:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011698:	f04f 0901 	mov.w	r9, #1
 801169c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116a0:	2800      	cmp	r0, #0
 80116a2:	f43f af7b 	beq.w	801159c <uxr_write_framed_msg+0x158>
 80116a6:	2500      	movs	r5, #0
 80116a8:	e002      	b.n	80116b0 <uxr_write_framed_msg+0x26c>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f43f af4f 	beq.w	801154e <uxr_write_framed_msg+0x10a>
 80116b0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80116b4:	1b52      	subs	r2, r2, r5
 80116b6:	465b      	mov	r3, fp
 80116b8:	4421      	add	r1, r4
 80116ba:	4638      	mov	r0, r7
 80116bc:	47b0      	blx	r6
 80116be:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80116c2:	4405      	add	r5, r0
 80116c4:	4295      	cmp	r5, r2
 80116c6:	d3f0      	bcc.n	80116aa <uxr_write_framed_msg+0x266>
 80116c8:	f47f af41 	bne.w	801154e <uxr_write_framed_msg+0x10a>
 80116cc:	2300      	movs	r3, #0
 80116ce:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80116d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116d4:	b298      	uxth	r0, r3
 80116d6:	b003      	add	sp, #12
 80116d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116dc:	217d      	movs	r1, #125	@ 0x7d
 80116de:	f082 0220 	eor.w	r2, r2, #32
 80116e2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80116e6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80116ea:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80116ee:	2901      	cmp	r1, #1
 80116f0:	f04f 0203 	mov.w	r2, #3
 80116f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116f8:	d804      	bhi.n	8011704 <uxr_write_framed_msg+0x2c0>
 80116fa:	4611      	mov	r1, r2
 80116fc:	f04f 0c04 	mov.w	ip, #4
 8011700:	2205      	movs	r2, #5
 8011702:	e752      	b.n	80115aa <uxr_write_framed_msg+0x166>
 8011704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011706:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801170a:	b2dd      	uxtb	r5, r3
 801170c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011710:	2204      	movs	r2, #4
 8011712:	2901      	cmp	r1, #1
 8011714:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011718:	f63f aec0 	bhi.w	801149c <uxr_write_framed_msg+0x58>
 801171c:	e758      	b.n	80115d0 <uxr_write_framed_msg+0x18c>
 801171e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011722:	fa5f f889 	uxtb.w	r8, r9
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	e6f5      	b.n	8011518 <uxr_write_framed_msg+0xd4>
 801172c:	08016914 	.word	0x08016914

08011730 <uxr_framing_read_transport>:
 8011730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011734:	4604      	mov	r4, r0
 8011736:	b083      	sub	sp, #12
 8011738:	461f      	mov	r7, r3
 801173a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801173e:	4689      	mov	r9, r1
 8011740:	4692      	mov	sl, r2
 8011742:	f000 fc89 	bl	8012058 <uxr_millis>
 8011746:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801174a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801174e:	42b3      	cmp	r3, r6
 8011750:	4680      	mov	r8, r0
 8011752:	d061      	beq.n	8011818 <uxr_framing_read_transport+0xe8>
 8011754:	d81c      	bhi.n	8011790 <uxr_framing_read_transport+0x60>
 8011756:	1e75      	subs	r5, r6, #1
 8011758:	1aed      	subs	r5, r5, r3
 801175a:	b2ed      	uxtb	r5, r5
 801175c:	2600      	movs	r6, #0
 801175e:	455d      	cmp	r5, fp
 8011760:	d81f      	bhi.n	80117a2 <uxr_framing_read_transport+0x72>
 8011762:	19ab      	adds	r3, r5, r6
 8011764:	455b      	cmp	r3, fp
 8011766:	bf84      	itt	hi
 8011768:	ebab 0605 	subhi.w	r6, fp, r5
 801176c:	b2f6      	uxtbhi	r6, r6
 801176e:	b9ed      	cbnz	r5, 80117ac <uxr_framing_read_transport+0x7c>
 8011770:	f04f 0b00 	mov.w	fp, #0
 8011774:	f000 fc70 	bl	8012058 <uxr_millis>
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	eba0 0808 	sub.w	r8, r0, r8
 801177e:	eba3 0308 	sub.w	r3, r3, r8
 8011782:	4658      	mov	r0, fp
 8011784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011788:	603b      	str	r3, [r7, #0]
 801178a:	b003      	add	sp, #12
 801178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011790:	2e00      	cmp	r6, #0
 8011792:	d049      	beq.n	8011828 <uxr_framing_read_transport+0xf8>
 8011794:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011798:	b2ed      	uxtb	r5, r5
 801179a:	3e01      	subs	r6, #1
 801179c:	455d      	cmp	r5, fp
 801179e:	b2f6      	uxtb	r6, r6
 80117a0:	d9df      	bls.n	8011762 <uxr_framing_read_transport+0x32>
 80117a2:	fa5f f58b 	uxtb.w	r5, fp
 80117a6:	2600      	movs	r6, #0
 80117a8:	2d00      	cmp	r5, #0
 80117aa:	d0e1      	beq.n	8011770 <uxr_framing_read_transport+0x40>
 80117ac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80117b0:	3102      	adds	r1, #2
 80117b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	4421      	add	r1, r4
 80117ba:	462a      	mov	r2, r5
 80117bc:	4650      	mov	r0, sl
 80117be:	47c8      	blx	r9
 80117c0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80117c4:	4a1a      	ldr	r2, [pc, #104]	@ (8011830 <uxr_framing_read_transport+0x100>)
 80117c6:	4403      	add	r3, r0
 80117c8:	0859      	lsrs	r1, r3, #1
 80117ca:	fba2 2101 	umull	r2, r1, r2, r1
 80117ce:	0889      	lsrs	r1, r1, #2
 80117d0:	222a      	movs	r2, #42	@ 0x2a
 80117d2:	fb02 3111 	mls	r1, r2, r1, r3
 80117d6:	4683      	mov	fp, r0
 80117d8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80117dc:	2800      	cmp	r0, #0
 80117de:	d0c7      	beq.n	8011770 <uxr_framing_read_transport+0x40>
 80117e0:	42a8      	cmp	r0, r5
 80117e2:	d1c7      	bne.n	8011774 <uxr_framing_read_transport+0x44>
 80117e4:	2e00      	cmp	r6, #0
 80117e6:	d0c5      	beq.n	8011774 <uxr_framing_read_transport+0x44>
 80117e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	3102      	adds	r1, #2
 80117ee:	4632      	mov	r2, r6
 80117f0:	4421      	add	r1, r4
 80117f2:	2300      	movs	r3, #0
 80117f4:	4650      	mov	r0, sl
 80117f6:	47c8      	blx	r9
 80117f8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80117fc:	4a0c      	ldr	r2, [pc, #48]	@ (8011830 <uxr_framing_read_transport+0x100>)
 80117fe:	180b      	adds	r3, r1, r0
 8011800:	0859      	lsrs	r1, r3, #1
 8011802:	fba2 1201 	umull	r1, r2, r2, r1
 8011806:	0892      	lsrs	r2, r2, #2
 8011808:	212a      	movs	r1, #42	@ 0x2a
 801180a:	fb01 3312 	mls	r3, r1, r2, r3
 801180e:	eb00 0b05 	add.w	fp, r0, r5
 8011812:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011816:	e7ad      	b.n	8011774 <uxr_framing_read_transport+0x44>
 8011818:	2600      	movs	r6, #0
 801181a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801181e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011820:	d9bf      	bls.n	80117a2 <uxr_framing_read_transport+0x72>
 8011822:	2102      	movs	r1, #2
 8011824:	2529      	movs	r5, #41	@ 0x29
 8011826:	e7c4      	b.n	80117b2 <uxr_framing_read_transport+0x82>
 8011828:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801182c:	b2ed      	uxtb	r5, r5
 801182e:	e796      	b.n	801175e <uxr_framing_read_transport+0x2e>
 8011830:	30c30c31 	.word	0x30c30c31

08011834 <uxr_read_framed_msg>:
 8011834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011838:	461e      	mov	r6, r3
 801183a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801183e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011842:	429d      	cmp	r5, r3
 8011844:	b083      	sub	sp, #12
 8011846:	4604      	mov	r4, r0
 8011848:	4688      	mov	r8, r1
 801184a:	4691      	mov	r9, r2
 801184c:	f000 8188 	beq.w	8011b60 <uxr_read_framed_msg+0x32c>
 8011850:	7823      	ldrb	r3, [r4, #0]
 8011852:	4dc1      	ldr	r5, [pc, #772]	@ (8011b58 <uxr_read_framed_msg+0x324>)
 8011854:	4fc1      	ldr	r7, [pc, #772]	@ (8011b5c <uxr_read_framed_msg+0x328>)
 8011856:	2b07      	cmp	r3, #7
 8011858:	d8fd      	bhi.n	8011856 <uxr_read_framed_msg+0x22>
 801185a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801185e:	0115      	.short	0x0115
 8011860:	00d600f6 	.word	0x00d600f6
 8011864:	009000b9 	.word	0x009000b9
 8011868:	0030004d 	.word	0x0030004d
 801186c:	0008      	.short	0x0008
 801186e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011872:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011876:	4299      	cmp	r1, r3
 8011878:	f000 814a 	beq.w	8011b10 <uxr_read_framed_msg+0x2dc>
 801187c:	18e2      	adds	r2, r4, r3
 801187e:	7892      	ldrb	r2, [r2, #2]
 8011880:	2a7d      	cmp	r2, #125	@ 0x7d
 8011882:	f000 8199 	beq.w	8011bb8 <uxr_read_framed_msg+0x384>
 8011886:	3301      	adds	r3, #1
 8011888:	0858      	lsrs	r0, r3, #1
 801188a:	fba5 1000 	umull	r1, r0, r5, r0
 801188e:	0880      	lsrs	r0, r0, #2
 8011890:	212a      	movs	r1, #42	@ 0x2a
 8011892:	fb01 3310 	mls	r3, r1, r0, r3
 8011896:	2a7e      	cmp	r2, #126	@ 0x7e
 8011898:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801189c:	f000 8252 	beq.w	8011d44 <uxr_read_framed_msg+0x510>
 80118a0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80118a2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80118a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	2200      	movs	r2, #0
 80118ac:	4299      	cmp	r1, r3
 80118ae:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80118b0:	7022      	strb	r2, [r4, #0]
 80118b2:	f000 8179 	beq.w	8011ba8 <uxr_read_framed_msg+0x374>
 80118b6:	2000      	movs	r0, #0
 80118b8:	b003      	add	sp, #12
 80118ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118be:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80118c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80118c6:	4299      	cmp	r1, r3
 80118c8:	f000 8131 	beq.w	8011b2e <uxr_read_framed_msg+0x2fa>
 80118cc:	18e2      	adds	r2, r4, r3
 80118ce:	7890      	ldrb	r0, [r2, #2]
 80118d0:	287d      	cmp	r0, #125	@ 0x7d
 80118d2:	f000 8190 	beq.w	8011bf6 <uxr_read_framed_msg+0x3c2>
 80118d6:	3301      	adds	r3, #1
 80118d8:	085a      	lsrs	r2, r3, #1
 80118da:	fba5 1202 	umull	r1, r2, r5, r2
 80118de:	0892      	lsrs	r2, r2, #2
 80118e0:	212a      	movs	r1, #42	@ 0x2a
 80118e2:	fb01 3312 	mls	r3, r1, r2, r3
 80118e6:	287e      	cmp	r0, #126	@ 0x7e
 80118e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80118ec:	f000 821a 	beq.w	8011d24 <uxr_read_framed_msg+0x4f0>
 80118f0:	2307      	movs	r3, #7
 80118f2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80118f4:	7023      	strb	r3, [r4, #0]
 80118f6:	e7ae      	b.n	8011856 <uxr_read_framed_msg+0x22>
 80118f8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80118fa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80118fe:	459e      	cmp	lr, r3
 8011900:	d938      	bls.n	8011974 <uxr_read_framed_msg+0x140>
 8011902:	ee07 8a90 	vmov	s15, r8
 8011906:	212a      	movs	r1, #42	@ 0x2a
 8011908:	e020      	b.n	801194c <uxr_read_framed_msg+0x118>
 801190a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801190e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8011912:	f000 80d4 	beq.w	8011abe <uxr_read_framed_msg+0x28a>
 8011916:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801191a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801191e:	f000 8219 	beq.w	8011d54 <uxr_read_framed_msg+0x520>
 8011922:	f806 c003 	strb.w	ip, [r6, r3]
 8011926:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801192a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801192c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011930:	ea8a 000c 	eor.w	r0, sl, ip
 8011934:	b2c0      	uxtb	r0, r0
 8011936:	3301      	adds	r3, #1
 8011938:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801193c:	b29b      	uxth	r3, r3
 801193e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011942:	4573      	cmp	r3, lr
 8011944:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011946:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011948:	f080 8120 	bcs.w	8011b8c <uxr_read_framed_msg+0x358>
 801194c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011950:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011954:	f100 0c01 	add.w	ip, r0, #1
 8011958:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801195c:	fba5 8202 	umull	r8, r2, r5, r2
 8011960:	0892      	lsrs	r2, r2, #2
 8011962:	4582      	cmp	sl, r0
 8011964:	eb04 0b00 	add.w	fp, r4, r0
 8011968:	fb01 c212 	mls	r2, r1, r2, ip
 801196c:	d1cd      	bne.n	801190a <uxr_read_framed_msg+0xd6>
 801196e:	ee17 8a90 	vmov	r8, s15
 8011972:	459e      	cmp	lr, r3
 8011974:	f040 8111 	bne.w	8011b9a <uxr_read_framed_msg+0x366>
 8011978:	2306      	movs	r3, #6
 801197a:	7023      	strb	r3, [r4, #0]
 801197c:	e76b      	b.n	8011856 <uxr_read_framed_msg+0x22>
 801197e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011982:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011986:	4298      	cmp	r0, r3
 8011988:	f000 80c2 	beq.w	8011b10 <uxr_read_framed_msg+0x2dc>
 801198c:	18e2      	adds	r2, r4, r3
 801198e:	7891      	ldrb	r1, [r2, #2]
 8011990:	297d      	cmp	r1, #125	@ 0x7d
 8011992:	f000 814c 	beq.w	8011c2e <uxr_read_framed_msg+0x3fa>
 8011996:	3301      	adds	r3, #1
 8011998:	085a      	lsrs	r2, r3, #1
 801199a:	fba5 0202 	umull	r0, r2, r5, r2
 801199e:	0892      	lsrs	r2, r2, #2
 80119a0:	202a      	movs	r0, #42	@ 0x2a
 80119a2:	fb00 3312 	mls	r3, r0, r2, r3
 80119a6:	297e      	cmp	r1, #126	@ 0x7e
 80119a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80119ac:	f000 81ca 	beq.w	8011d44 <uxr_read_framed_msg+0x510>
 80119b0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80119b2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80119b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	2000      	movs	r0, #0
 80119bc:	428b      	cmp	r3, r1
 80119be:	8623      	strh	r3, [r4, #48]	@ 0x30
 80119c0:	8660      	strh	r0, [r4, #50]	@ 0x32
 80119c2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80119c4:	f240 80df 	bls.w	8011b86 <uxr_read_framed_msg+0x352>
 80119c8:	7020      	strb	r0, [r4, #0]
 80119ca:	b003      	add	sp, #12
 80119cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80119d4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80119d8:	4299      	cmp	r1, r3
 80119da:	f000 80a8 	beq.w	8011b2e <uxr_read_framed_msg+0x2fa>
 80119de:	18e2      	adds	r2, r4, r3
 80119e0:	7890      	ldrb	r0, [r2, #2]
 80119e2:	287d      	cmp	r0, #125	@ 0x7d
 80119e4:	f000 8164 	beq.w	8011cb0 <uxr_read_framed_msg+0x47c>
 80119e8:	3301      	adds	r3, #1
 80119ea:	085a      	lsrs	r2, r3, #1
 80119ec:	fba5 1202 	umull	r1, r2, r5, r2
 80119f0:	0892      	lsrs	r2, r2, #2
 80119f2:	212a      	movs	r1, #42	@ 0x2a
 80119f4:	fb01 3312 	mls	r3, r1, r2, r3
 80119f8:	287e      	cmp	r0, #126	@ 0x7e
 80119fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80119fe:	f000 8191 	beq.w	8011d24 <uxr_read_framed_msg+0x4f0>
 8011a02:	2304      	movs	r3, #4
 8011a04:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011a06:	7023      	strb	r3, [r4, #0]
 8011a08:	e725      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011a0a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011a0e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011a12:	4290      	cmp	r0, r2
 8011a14:	f000 80b3 	beq.w	8011b7e <uxr_read_framed_msg+0x34a>
 8011a18:	18a3      	adds	r3, r4, r2
 8011a1a:	7899      	ldrb	r1, [r3, #2]
 8011a1c:	297d      	cmp	r1, #125	@ 0x7d
 8011a1e:	f000 8164 	beq.w	8011cea <uxr_read_framed_msg+0x4b6>
 8011a22:	3201      	adds	r2, #1
 8011a24:	0850      	lsrs	r0, r2, #1
 8011a26:	fba5 3000 	umull	r3, r0, r5, r0
 8011a2a:	0880      	lsrs	r0, r0, #2
 8011a2c:	232a      	movs	r3, #42	@ 0x2a
 8011a2e:	fb03 2210 	mls	r2, r3, r0, r2
 8011a32:	297e      	cmp	r1, #126	@ 0x7e
 8011a34:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a38:	f000 8188 	beq.w	8011d4c <uxr_read_framed_msg+0x518>
 8011a3c:	7863      	ldrb	r3, [r4, #1]
 8011a3e:	428b      	cmp	r3, r1
 8011a40:	bf0c      	ite	eq
 8011a42:	2303      	moveq	r3, #3
 8011a44:	2300      	movne	r3, #0
 8011a46:	7023      	strb	r3, [r4, #0]
 8011a48:	e705      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011a4a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011a4e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011a52:	2200      	movs	r2, #0
 8011a54:	4299      	cmp	r1, r3
 8011a56:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011a5a:	d06c      	beq.n	8011b36 <uxr_read_framed_msg+0x302>
 8011a5c:	18e2      	adds	r2, r4, r3
 8011a5e:	7890      	ldrb	r0, [r2, #2]
 8011a60:	287d      	cmp	r0, #125	@ 0x7d
 8011a62:	f000 8101 	beq.w	8011c68 <uxr_read_framed_msg+0x434>
 8011a66:	3301      	adds	r3, #1
 8011a68:	085a      	lsrs	r2, r3, #1
 8011a6a:	fba5 1202 	umull	r1, r2, r5, r2
 8011a6e:	0892      	lsrs	r2, r2, #2
 8011a70:	212a      	movs	r1, #42	@ 0x2a
 8011a72:	fb01 3312 	mls	r3, r1, r2, r3
 8011a76:	287e      	cmp	r0, #126	@ 0x7e
 8011a78:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011a7c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011a80:	d059      	beq.n	8011b36 <uxr_read_framed_msg+0x302>
 8011a82:	2302      	movs	r3, #2
 8011a84:	7023      	strb	r3, [r4, #0]
 8011a86:	e6e6      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011a88:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011a8c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011a90:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011a94:	1c51      	adds	r1, r2, #1
 8011a96:	084b      	lsrs	r3, r1, #1
 8011a98:	fba5 c303 	umull	ip, r3, r5, r3
 8011a9c:	089b      	lsrs	r3, r3, #2
 8011a9e:	fb0e 1313 	mls	r3, lr, r3, r1
 8011aa2:	4592      	cmp	sl, r2
 8011aa4:	eb04 0002 	add.w	r0, r4, r2
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	f43f af04 	beq.w	80118b6 <uxr_read_framed_msg+0x82>
 8011aae:	7883      	ldrb	r3, [r0, #2]
 8011ab0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011ab4:	2b7e      	cmp	r3, #126	@ 0x7e
 8011ab6:	d1ed      	bne.n	8011a94 <uxr_read_framed_msg+0x260>
 8011ab8:	2301      	movs	r3, #1
 8011aba:	7023      	strb	r3, [r4, #0]
 8011abc:	e6cb      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011abe:	f100 0c01 	add.w	ip, r0, #1
 8011ac2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011ac6:	fba5 8202 	umull	r8, r2, r5, r2
 8011aca:	0892      	lsrs	r2, r2, #2
 8011acc:	fb01 c212 	mls	r2, r1, r2, ip
 8011ad0:	eb04 0c02 	add.w	ip, r4, r2
 8011ad4:	b2d2      	uxtb	r2, r2
 8011ad6:	4592      	cmp	sl, r2
 8011ad8:	f100 0002 	add.w	r0, r0, #2
 8011adc:	f43f af47 	beq.w	801196e <uxr_read_framed_msg+0x13a>
 8011ae0:	0842      	lsrs	r2, r0, #1
 8011ae2:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011ae6:	fba5 8202 	umull	r8, r2, r5, r2
 8011aea:	0892      	lsrs	r2, r2, #2
 8011aec:	fb01 0012 	mls	r0, r1, r2, r0
 8011af0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011af4:	f08a 0c20 	eor.w	ip, sl, #32
 8011af8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011afc:	f47f af11 	bne.w	8011922 <uxr_read_framed_msg+0xee>
 8011b00:	459e      	cmp	lr, r3
 8011b02:	ee17 8a90 	vmov	r8, s15
 8011b06:	f43f af37 	beq.w	8011978 <uxr_read_framed_msg+0x144>
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	7023      	strb	r3, [r4, #0]
 8011b0e:	e6a2      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	2301      	movs	r3, #1
 8011b16:	9301      	str	r3, [sp, #4]
 8011b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b1a:	464a      	mov	r2, r9
 8011b1c:	4641      	mov	r1, r8
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f7ff fe06 	bl	8011730 <uxr_framing_read_transport>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	f43f aec6 	beq.w	80118b6 <uxr_read_framed_msg+0x82>
 8011b2a:	7823      	ldrb	r3, [r4, #0]
 8011b2c:	e693      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011b2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	2302      	movs	r3, #2
 8011b34:	e7ef      	b.n	8011b16 <uxr_read_framed_msg+0x2e2>
 8011b36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	2304      	movs	r3, #4
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	464a      	mov	r2, r9
 8011b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b42:	4641      	mov	r1, r8
 8011b44:	4620      	mov	r0, r4
 8011b46:	f7ff fdf3 	bl	8011730 <uxr_framing_read_transport>
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	d1ed      	bne.n	8011b2a <uxr_read_framed_msg+0x2f6>
 8011b4e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011b52:	2b7e      	cmp	r3, #126	@ 0x7e
 8011b54:	d0e9      	beq.n	8011b2a <uxr_read_framed_msg+0x2f6>
 8011b56:	e6ae      	b.n	80118b6 <uxr_read_framed_msg+0x82>
 8011b58:	30c30c31 	.word	0x30c30c31
 8011b5c:	08016914 	.word	0x08016914
 8011b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b62:	9300      	str	r3, [sp, #0]
 8011b64:	2305      	movs	r3, #5
 8011b66:	9301      	str	r3, [sp, #4]
 8011b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b6a:	f7ff fde1 	bl	8011730 <uxr_framing_read_transport>
 8011b6e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011b72:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011b76:	429a      	cmp	r2, r3
 8011b78:	f43f ae9d 	beq.w	80118b6 <uxr_read_framed_msg+0x82>
 8011b7c:	e668      	b.n	8011850 <uxr_read_framed_msg+0x1c>
 8011b7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	2303      	movs	r3, #3
 8011b84:	e7c7      	b.n	8011b16 <uxr_read_framed_msg+0x2e2>
 8011b86:	2305      	movs	r3, #5
 8011b88:	7023      	strb	r3, [r4, #0]
 8011b8a:	e664      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011b8c:	ee17 8a90 	vmov	r8, s15
 8011b90:	f43f aef2 	beq.w	8011978 <uxr_read_framed_msg+0x144>
 8011b94:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011b98:	d08e      	beq.n	8011ab8 <uxr_read_framed_msg+0x284>
 8011b9a:	ebae 0303 	sub.w	r3, lr, r3
 8011b9e:	3302      	adds	r3, #2
 8011ba0:	9301      	str	r3, [sp, #4]
 8011ba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	e7b7      	b.n	8011b18 <uxr_read_framed_msg+0x2e4>
 8011ba8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011baa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011bae:	7013      	strb	r3, [r2, #0]
 8011bb0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011bb2:	b003      	add	sp, #12
 8011bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb8:	f103 0c01 	add.w	ip, r3, #1
 8011bbc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011bc0:	fba5 0202 	umull	r0, r2, r5, r2
 8011bc4:	0892      	lsrs	r2, r2, #2
 8011bc6:	202a      	movs	r0, #42	@ 0x2a
 8011bc8:	fb00 c212 	mls	r2, r0, r2, ip
 8011bcc:	fa5f fc82 	uxtb.w	ip, r2
 8011bd0:	4561      	cmp	r1, ip
 8011bd2:	d09d      	beq.n	8011b10 <uxr_read_framed_msg+0x2dc>
 8011bd4:	3302      	adds	r3, #2
 8011bd6:	4422      	add	r2, r4
 8011bd8:	0859      	lsrs	r1, r3, #1
 8011bda:	7892      	ldrb	r2, [r2, #2]
 8011bdc:	fba5 c101 	umull	ip, r1, r5, r1
 8011be0:	0889      	lsrs	r1, r1, #2
 8011be2:	fb00 3311 	mls	r3, r0, r1, r3
 8011be6:	2a7e      	cmp	r2, #126	@ 0x7e
 8011be8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011bec:	f000 80aa 	beq.w	8011d44 <uxr_read_framed_msg+0x510>
 8011bf0:	f082 0220 	eor.w	r2, r2, #32
 8011bf4:	e654      	b.n	80118a0 <uxr_read_framed_msg+0x6c>
 8011bf6:	1c58      	adds	r0, r3, #1
 8011bf8:	0842      	lsrs	r2, r0, #1
 8011bfa:	fba5 c202 	umull	ip, r2, r5, r2
 8011bfe:	0892      	lsrs	r2, r2, #2
 8011c00:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c04:	fb0c 0212 	mls	r2, ip, r2, r0
 8011c08:	b2d0      	uxtb	r0, r2
 8011c0a:	4281      	cmp	r1, r0
 8011c0c:	d08f      	beq.n	8011b2e <uxr_read_framed_msg+0x2fa>
 8011c0e:	4422      	add	r2, r4
 8011c10:	3302      	adds	r3, #2
 8011c12:	7890      	ldrb	r0, [r2, #2]
 8011c14:	085a      	lsrs	r2, r3, #1
 8011c16:	fba5 1202 	umull	r1, r2, r5, r2
 8011c1a:	0892      	lsrs	r2, r2, #2
 8011c1c:	fb0c 3312 	mls	r3, ip, r2, r3
 8011c20:	287e      	cmp	r0, #126	@ 0x7e
 8011c22:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c26:	d07d      	beq.n	8011d24 <uxr_read_framed_msg+0x4f0>
 8011c28:	f080 0020 	eor.w	r0, r0, #32
 8011c2c:	e660      	b.n	80118f0 <uxr_read_framed_msg+0xbc>
 8011c2e:	1c59      	adds	r1, r3, #1
 8011c30:	084a      	lsrs	r2, r1, #1
 8011c32:	fba5 c202 	umull	ip, r2, r5, r2
 8011c36:	0892      	lsrs	r2, r2, #2
 8011c38:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c3c:	fb0c 1212 	mls	r2, ip, r2, r1
 8011c40:	b2d1      	uxtb	r1, r2
 8011c42:	4288      	cmp	r0, r1
 8011c44:	f43f af64 	beq.w	8011b10 <uxr_read_framed_msg+0x2dc>
 8011c48:	4422      	add	r2, r4
 8011c4a:	3302      	adds	r3, #2
 8011c4c:	7891      	ldrb	r1, [r2, #2]
 8011c4e:	085a      	lsrs	r2, r3, #1
 8011c50:	fba5 0202 	umull	r0, r2, r5, r2
 8011c54:	0892      	lsrs	r2, r2, #2
 8011c56:	fb0c 3312 	mls	r3, ip, r2, r3
 8011c5a:	297e      	cmp	r1, #126	@ 0x7e
 8011c5c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c60:	d070      	beq.n	8011d44 <uxr_read_framed_msg+0x510>
 8011c62:	f081 0120 	eor.w	r1, r1, #32
 8011c66:	e6a3      	b.n	80119b0 <uxr_read_framed_msg+0x17c>
 8011c68:	f103 0c01 	add.w	ip, r3, #1
 8011c6c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011c70:	fba5 0202 	umull	r0, r2, r5, r2
 8011c74:	0892      	lsrs	r2, r2, #2
 8011c76:	202a      	movs	r0, #42	@ 0x2a
 8011c78:	fb00 c212 	mls	r2, r0, r2, ip
 8011c7c:	fa5f fc82 	uxtb.w	ip, r2
 8011c80:	4561      	cmp	r1, ip
 8011c82:	f43f af58 	beq.w	8011b36 <uxr_read_framed_msg+0x302>
 8011c86:	4422      	add	r2, r4
 8011c88:	3302      	adds	r3, #2
 8011c8a:	7891      	ldrb	r1, [r2, #2]
 8011c8c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011c90:	085a      	lsrs	r2, r3, #1
 8011c92:	fba5 c202 	umull	ip, r2, r5, r2
 8011c96:	0892      	lsrs	r2, r2, #2
 8011c98:	fb00 3312 	mls	r3, r0, r2, r3
 8011c9c:	297e      	cmp	r1, #126	@ 0x7e
 8011c9e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ca2:	f43f af48 	beq.w	8011b36 <uxr_read_framed_msg+0x302>
 8011ca6:	f081 0120 	eor.w	r1, r1, #32
 8011caa:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011cae:	e6e8      	b.n	8011a82 <uxr_read_framed_msg+0x24e>
 8011cb0:	1c58      	adds	r0, r3, #1
 8011cb2:	0842      	lsrs	r2, r0, #1
 8011cb4:	fba5 c202 	umull	ip, r2, r5, r2
 8011cb8:	0892      	lsrs	r2, r2, #2
 8011cba:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011cbe:	fb0c 0212 	mls	r2, ip, r2, r0
 8011cc2:	b2d0      	uxtb	r0, r2
 8011cc4:	4281      	cmp	r1, r0
 8011cc6:	f43f af32 	beq.w	8011b2e <uxr_read_framed_msg+0x2fa>
 8011cca:	4422      	add	r2, r4
 8011ccc:	3302      	adds	r3, #2
 8011cce:	7890      	ldrb	r0, [r2, #2]
 8011cd0:	085a      	lsrs	r2, r3, #1
 8011cd2:	fba5 1202 	umull	r1, r2, r5, r2
 8011cd6:	0892      	lsrs	r2, r2, #2
 8011cd8:	fb0c 3312 	mls	r3, ip, r2, r3
 8011cdc:	287e      	cmp	r0, #126	@ 0x7e
 8011cde:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ce2:	d01f      	beq.n	8011d24 <uxr_read_framed_msg+0x4f0>
 8011ce4:	f080 0020 	eor.w	r0, r0, #32
 8011ce8:	e68b      	b.n	8011a02 <uxr_read_framed_msg+0x1ce>
 8011cea:	1c51      	adds	r1, r2, #1
 8011cec:	084b      	lsrs	r3, r1, #1
 8011cee:	fba5 c303 	umull	ip, r3, r5, r3
 8011cf2:	089b      	lsrs	r3, r3, #2
 8011cf4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011cf8:	fb0c 1313 	mls	r3, ip, r3, r1
 8011cfc:	b2d9      	uxtb	r1, r3
 8011cfe:	4288      	cmp	r0, r1
 8011d00:	f43f af3d 	beq.w	8011b7e <uxr_read_framed_msg+0x34a>
 8011d04:	3202      	adds	r2, #2
 8011d06:	4423      	add	r3, r4
 8011d08:	0850      	lsrs	r0, r2, #1
 8011d0a:	789b      	ldrb	r3, [r3, #2]
 8011d0c:	fba5 1000 	umull	r1, r0, r5, r0
 8011d10:	0880      	lsrs	r0, r0, #2
 8011d12:	fb0c 2210 	mls	r2, ip, r0, r2
 8011d16:	2b7e      	cmp	r3, #126	@ 0x7e
 8011d18:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011d1c:	d016      	beq.n	8011d4c <uxr_read_framed_msg+0x518>
 8011d1e:	f083 0120 	eor.w	r1, r3, #32
 8011d22:	e68b      	b.n	8011a3c <uxr_read_framed_msg+0x208>
 8011d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	2302      	movs	r3, #2
 8011d2a:	9301      	str	r3, [sp, #4]
 8011d2c:	464a      	mov	r2, r9
 8011d2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d30:	4641      	mov	r1, r8
 8011d32:	4620      	mov	r0, r4
 8011d34:	f7ff fcfc 	bl	8011730 <uxr_framing_read_transport>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	f47f aef6 	bne.w	8011b2a <uxr_read_framed_msg+0x2f6>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	7023      	strb	r3, [r4, #0]
 8011d42:	e588      	b.n	8011856 <uxr_read_framed_msg+0x22>
 8011d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	2301      	movs	r3, #1
 8011d4a:	e7ee      	b.n	8011d2a <uxr_read_framed_msg+0x4f6>
 8011d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	2303      	movs	r3, #3
 8011d52:	e7ea      	b.n	8011d2a <uxr_read_framed_msg+0x4f6>
 8011d54:	ee17 8a90 	vmov	r8, s15
 8011d58:	e6ae      	b.n	8011ab8 <uxr_read_framed_msg+0x284>
 8011d5a:	bf00      	nop

08011d5c <uxr_stream_id>:
 8011d5c:	2901      	cmp	r1, #1
 8011d5e:	b082      	sub	sp, #8
 8011d60:	d01d      	beq.n	8011d9e <uxr_stream_id+0x42>
 8011d62:	2902      	cmp	r1, #2
 8011d64:	f04f 0c00 	mov.w	ip, #0
 8011d68:	d01e      	beq.n	8011da8 <uxr_stream_id+0x4c>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	f36c 0307 	bfi	r3, ip, #0, #8
 8011d70:	f360 230f 	bfi	r3, r0, #8, #8
 8011d74:	f361 4317 	bfi	r3, r1, #16, #8
 8011d78:	f362 631f 	bfi	r3, r2, #24, #8
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	2000      	movs	r0, #0
 8011d80:	f362 0007 	bfi	r0, r2, #0, #8
 8011d84:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011d88:	f362 200f 	bfi	r0, r2, #8, #8
 8011d8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011d90:	f362 4017 	bfi	r0, r2, #16, #8
 8011d94:	0e1b      	lsrs	r3, r3, #24
 8011d96:	f363 601f 	bfi	r0, r3, #24, #8
 8011d9a:	b002      	add	sp, #8
 8011d9c:	4770      	bx	lr
 8011d9e:	f100 0c01 	add.w	ip, r0, #1
 8011da2:	fa5f fc8c 	uxtb.w	ip, ip
 8011da6:	e7e0      	b.n	8011d6a <uxr_stream_id+0xe>
 8011da8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011dac:	e7dd      	b.n	8011d6a <uxr_stream_id+0xe>
 8011dae:	bf00      	nop

08011db0 <uxr_stream_id_from_raw>:
 8011db0:	b082      	sub	sp, #8
 8011db2:	b130      	cbz	r0, 8011dc2 <uxr_stream_id_from_raw+0x12>
 8011db4:	0603      	lsls	r3, r0, #24
 8011db6:	d420      	bmi.n	8011dfa <uxr_stream_id_from_raw+0x4a>
 8011db8:	1e42      	subs	r2, r0, #1
 8011dba:	b2d2      	uxtb	r2, r2
 8011dbc:	f04f 0c01 	mov.w	ip, #1
 8011dc0:	e001      	b.n	8011dc6 <uxr_stream_id_from_raw+0x16>
 8011dc2:	4684      	mov	ip, r0
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	f360 0307 	bfi	r3, r0, #0, #8
 8011dcc:	f362 230f 	bfi	r3, r2, #8, #8
 8011dd0:	f36c 4317 	bfi	r3, ip, #16, #8
 8011dd4:	f361 631f 	bfi	r3, r1, #24, #8
 8011dd8:	b2da      	uxtb	r2, r3
 8011dda:	2000      	movs	r0, #0
 8011ddc:	f362 0007 	bfi	r0, r2, #0, #8
 8011de0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011de4:	f362 200f 	bfi	r0, r2, #8, #8
 8011de8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011dec:	f362 4017 	bfi	r0, r2, #16, #8
 8011df0:	0e1b      	lsrs	r3, r3, #24
 8011df2:	f363 601f 	bfi	r0, r3, #24, #8
 8011df6:	b002      	add	sp, #8
 8011df8:	4770      	bx	lr
 8011dfa:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011dfe:	f04f 0c02 	mov.w	ip, #2
 8011e02:	e7e0      	b.n	8011dc6 <uxr_stream_id_from_raw+0x16>

08011e04 <uxr_init_stream_storage>:
 8011e04:	2300      	movs	r3, #0
 8011e06:	7403      	strb	r3, [r0, #16]
 8011e08:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011e0c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011e10:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop

08011e18 <uxr_reset_stream_storage>:
 8011e18:	b570      	push	{r4, r5, r6, lr}
 8011e1a:	7c03      	ldrb	r3, [r0, #16]
 8011e1c:	4604      	mov	r4, r0
 8011e1e:	b153      	cbz	r3, 8011e36 <uxr_reset_stream_storage+0x1e>
 8011e20:	4606      	mov	r6, r0
 8011e22:	2500      	movs	r5, #0
 8011e24:	4630      	mov	r0, r6
 8011e26:	f002 fa79 	bl	801431c <uxr_reset_output_best_effort_stream>
 8011e2a:	7c23      	ldrb	r3, [r4, #16]
 8011e2c:	3501      	adds	r5, #1
 8011e2e:	42ab      	cmp	r3, r5
 8011e30:	f106 0610 	add.w	r6, r6, #16
 8011e34:	d8f6      	bhi.n	8011e24 <uxr_reset_stream_storage+0xc>
 8011e36:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e3a:	b163      	cbz	r3, 8011e56 <uxr_reset_stream_storage+0x3e>
 8011e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e40:	2500      	movs	r5, #0
 8011e42:	4630      	mov	r0, r6
 8011e44:	f002 f86c 	bl	8013f20 <uxr_reset_input_best_effort_stream>
 8011e48:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e4c:	3501      	adds	r5, #1
 8011e4e:	42ab      	cmp	r3, r5
 8011e50:	f106 0602 	add.w	r6, r6, #2
 8011e54:	d8f5      	bhi.n	8011e42 <uxr_reset_stream_storage+0x2a>
 8011e56:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e5a:	b163      	cbz	r3, 8011e76 <uxr_reset_stream_storage+0x5e>
 8011e5c:	f104 0618 	add.w	r6, r4, #24
 8011e60:	2500      	movs	r5, #0
 8011e62:	4630      	mov	r0, r6
 8011e64:	f002 fb06 	bl	8014474 <uxr_reset_output_reliable_stream>
 8011e68:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e6c:	3501      	adds	r5, #1
 8011e6e:	42ab      	cmp	r3, r5
 8011e70:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011e74:	d8f5      	bhi.n	8011e62 <uxr_reset_stream_storage+0x4a>
 8011e76:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011e7a:	b163      	cbz	r3, 8011e96 <uxr_reset_stream_storage+0x7e>
 8011e7c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011e80:	2500      	movs	r5, #0
 8011e82:	4630      	mov	r0, r6
 8011e84:	f002 f8c0 	bl	8014008 <uxr_reset_input_reliable_stream>
 8011e88:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011e8c:	3501      	adds	r5, #1
 8011e8e:	42ab      	cmp	r3, r5
 8011e90:	f106 0618 	add.w	r6, r6, #24
 8011e94:	d8f5      	bhi.n	8011e82 <uxr_reset_stream_storage+0x6a>
 8011e96:	bd70      	pop	{r4, r5, r6, pc}

08011e98 <uxr_add_output_best_effort_buffer>:
 8011e98:	b510      	push	{r4, lr}
 8011e9a:	7c04      	ldrb	r4, [r0, #16]
 8011e9c:	f104 0c01 	add.w	ip, r4, #1
 8011ea0:	b082      	sub	sp, #8
 8011ea2:	f880 c010 	strb.w	ip, [r0, #16]
 8011ea6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011eaa:	f002 fa2d 	bl	8014308 <uxr_init_output_best_effort_stream>
 8011eae:	2201      	movs	r2, #1
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	b002      	add	sp, #8
 8011eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011eba:	f7ff bf4f 	b.w	8011d5c <uxr_stream_id>
 8011ebe:	bf00      	nop

08011ec0 <uxr_add_output_reliable_buffer>:
 8011ec0:	b510      	push	{r4, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	4684      	mov	ip, r0
 8011ec6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011eca:	9000      	str	r0, [sp, #0]
 8011ecc:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011ed0:	2028      	movs	r0, #40	@ 0x28
 8011ed2:	fb00 c004 	mla	r0, r0, r4, ip
 8011ed6:	f104 0e01 	add.w	lr, r4, #1
 8011eda:	3018      	adds	r0, #24
 8011edc:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011ee0:	f002 fa90 	bl	8014404 <uxr_init_output_reliable_stream>
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	2102      	movs	r1, #2
 8011ee8:	4620      	mov	r0, r4
 8011eea:	b004      	add	sp, #16
 8011eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ef0:	f7ff bf34 	b.w	8011d5c <uxr_stream_id>

08011ef4 <uxr_add_input_best_effort_buffer>:
 8011ef4:	b510      	push	{r4, lr}
 8011ef6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011efa:	4603      	mov	r3, r0
 8011efc:	1c62      	adds	r2, r4, #1
 8011efe:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011f02:	b082      	sub	sp, #8
 8011f04:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f0c:	f002 f804 	bl	8013f18 <uxr_init_input_best_effort_stream>
 8011f10:	2200      	movs	r2, #0
 8011f12:	2101      	movs	r1, #1
 8011f14:	4620      	mov	r0, r4
 8011f16:	b002      	add	sp, #8
 8011f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f1c:	f7ff bf1e 	b.w	8011d5c <uxr_stream_id>

08011f20 <uxr_add_input_reliable_buffer>:
 8011f20:	b510      	push	{r4, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	4684      	mov	ip, r0
 8011f26:	9806      	ldr	r0, [sp, #24]
 8011f28:	9000      	str	r0, [sp, #0]
 8011f2a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011f2e:	2018      	movs	r0, #24
 8011f30:	fb00 c004 	mla	r0, r0, r4, ip
 8011f34:	f104 0e01 	add.w	lr, r4, #1
 8011f38:	3048      	adds	r0, #72	@ 0x48
 8011f3a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011f3e:	f002 f837 	bl	8013fb0 <uxr_init_input_reliable_stream>
 8011f42:	2200      	movs	r2, #0
 8011f44:	2102      	movs	r1, #2
 8011f46:	4620      	mov	r0, r4
 8011f48:	b004      	add	sp, #16
 8011f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f4e:	f7ff bf05 	b.w	8011d5c <uxr_stream_id>
 8011f52:	bf00      	nop

08011f54 <uxr_get_output_best_effort_stream>:
 8011f54:	7c03      	ldrb	r3, [r0, #16]
 8011f56:	428b      	cmp	r3, r1
 8011f58:	bf8c      	ite	hi
 8011f5a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011f5e:	2000      	movls	r0, #0
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop

08011f64 <uxr_get_output_reliable_stream>:
 8011f64:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011f68:	428b      	cmp	r3, r1
 8011f6a:	bf83      	ittte	hi
 8011f6c:	2328      	movhi	r3, #40	@ 0x28
 8011f6e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011f72:	3018      	addhi	r0, #24
 8011f74:	2000      	movls	r0, #0
 8011f76:	4770      	bx	lr

08011f78 <uxr_get_input_best_effort_stream>:
 8011f78:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011f7c:	428b      	cmp	r3, r1
 8011f7e:	bf86      	itte	hi
 8011f80:	3121      	addhi	r1, #33	@ 0x21
 8011f82:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011f86:	2000      	movls	r0, #0
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop

08011f8c <uxr_get_input_reliable_stream>:
 8011f8c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011f90:	428b      	cmp	r3, r1
 8011f92:	bf83      	ittte	hi
 8011f94:	2318      	movhi	r3, #24
 8011f96:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011f9a:	3048      	addhi	r0, #72	@ 0x48
 8011f9c:	2000      	movls	r0, #0
 8011f9e:	4770      	bx	lr

08011fa0 <uxr_output_streams_confirmed>:
 8011fa0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011fa4:	b183      	cbz	r3, 8011fc8 <uxr_output_streams_confirmed+0x28>
 8011fa6:	b570      	push	{r4, r5, r6, lr}
 8011fa8:	4606      	mov	r6, r0
 8011faa:	f100 0518 	add.w	r5, r0, #24
 8011fae:	2400      	movs	r4, #0
 8011fb0:	e001      	b.n	8011fb6 <uxr_output_streams_confirmed+0x16>
 8011fb2:	3528      	adds	r5, #40	@ 0x28
 8011fb4:	b138      	cbz	r0, 8011fc6 <uxr_output_streams_confirmed+0x26>
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f002 fccc 	bl	8014954 <uxr_is_output_up_to_date>
 8011fbc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011fc0:	3401      	adds	r4, #1
 8011fc2:	42a3      	cmp	r3, r4
 8011fc4:	d8f5      	bhi.n	8011fb2 <uxr_output_streams_confirmed+0x12>
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}
 8011fc8:	2001      	movs	r0, #1
 8011fca:	4770      	bx	lr

08011fcc <uxr_buffer_submessage_header>:
 8011fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460e      	mov	r6, r1
 8011fd2:	2104      	movs	r1, #4
 8011fd4:	4615      	mov	r5, r2
 8011fd6:	461f      	mov	r7, r3
 8011fd8:	f7f9 f836 	bl	800b048 <ucdr_align_to>
 8011fdc:	2301      	movs	r3, #1
 8011fde:	ea47 0203 	orr.w	r2, r7, r3
 8011fe2:	4631      	mov	r1, r6
 8011fe4:	7523      	strb	r3, [r4, #20]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	462b      	mov	r3, r5
 8011fea:	f000 f8d3 	bl	8012194 <uxr_serialize_submessage_header>
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f7f9 f840 	bl	800b074 <ucdr_buffer_remaining>
 8011ff4:	42a8      	cmp	r0, r5
 8011ff6:	bf34      	ite	cc
 8011ff8:	2000      	movcc	r0, #0
 8011ffa:	2001      	movcs	r0, #1
 8011ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ffe:	bf00      	nop

08012000 <uxr_read_submessage_header>:
 8012000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012004:	4604      	mov	r4, r0
 8012006:	460d      	mov	r5, r1
 8012008:	2104      	movs	r1, #4
 801200a:	4616      	mov	r6, r2
 801200c:	4698      	mov	r8, r3
 801200e:	f7f9 f81b 	bl	800b048 <ucdr_align_to>
 8012012:	4620      	mov	r0, r4
 8012014:	f7f9 f82e 	bl	800b074 <ucdr_buffer_remaining>
 8012018:	2803      	cmp	r0, #3
 801201a:	bf8c      	ite	hi
 801201c:	2701      	movhi	r7, #1
 801201e:	2700      	movls	r7, #0
 8012020:	d802      	bhi.n	8012028 <uxr_read_submessage_header+0x28>
 8012022:	4638      	mov	r0, r7
 8012024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012028:	4633      	mov	r3, r6
 801202a:	4642      	mov	r2, r8
 801202c:	4620      	mov	r0, r4
 801202e:	4629      	mov	r1, r5
 8012030:	f000 f8c4 	bl	80121bc <uxr_deserialize_submessage_header>
 8012034:	f898 3000 	ldrb.w	r3, [r8]
 8012038:	f003 0201 	and.w	r2, r3, #1
 801203c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012040:	f888 3000 	strb.w	r3, [r8]
 8012044:	7522      	strb	r2, [r4, #20]
 8012046:	4638      	mov	r0, r7
 8012048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801204c <uxr_submessage_padding>:
 801204c:	f010 0003 	ands.w	r0, r0, #3
 8012050:	bf18      	it	ne
 8012052:	f1c0 0004 	rsbne	r0, r0, #4
 8012056:	4770      	bx	lr

08012058 <uxr_millis>:
 8012058:	b510      	push	{r4, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	4669      	mov	r1, sp
 801205e:	2001      	movs	r0, #1
 8012060:	f7ef fe86 	bl	8001d70 <clock_gettime>
 8012064:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012068:	4906      	ldr	r1, [pc, #24]	@ (8012084 <uxr_millis+0x2c>)
 801206a:	fba0 0301 	umull	r0, r3, r0, r1
 801206e:	1900      	adds	r0, r0, r4
 8012070:	fb01 3102 	mla	r1, r1, r2, r3
 8012074:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012078:	4a03      	ldr	r2, [pc, #12]	@ (8012088 <uxr_millis+0x30>)
 801207a:	2300      	movs	r3, #0
 801207c:	f7ee faf4 	bl	8000668 <__aeabi_ldivmod>
 8012080:	b004      	add	sp, #16
 8012082:	bd10      	pop	{r4, pc}
 8012084:	3b9aca00 	.word	0x3b9aca00
 8012088:	000f4240 	.word	0x000f4240

0801208c <uxr_nanos>:
 801208c:	b510      	push	{r4, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	4669      	mov	r1, sp
 8012092:	2001      	movs	r0, #1
 8012094:	f7ef fe6c 	bl	8001d70 <clock_gettime>
 8012098:	4a06      	ldr	r2, [pc, #24]	@ (80120b4 <uxr_nanos+0x28>)
 801209a:	9800      	ldr	r0, [sp, #0]
 801209c:	9902      	ldr	r1, [sp, #8]
 801209e:	9c01      	ldr	r4, [sp, #4]
 80120a0:	fba0 0302 	umull	r0, r3, r0, r2
 80120a4:	1840      	adds	r0, r0, r1
 80120a6:	fb02 3304 	mla	r3, r2, r4, r3
 80120aa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80120ae:	b004      	add	sp, #16
 80120b0:	bd10      	pop	{r4, pc}
 80120b2:	bf00      	nop
 80120b4:	3b9aca00 	.word	0x3b9aca00

080120b8 <uxr_prepare_output_stream>:
 80120b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ba:	b087      	sub	sp, #28
 80120bc:	2707      	movs	r7, #7
 80120be:	9202      	str	r2, [sp, #8]
 80120c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120c2:	9103      	str	r1, [sp, #12]
 80120c4:	2500      	movs	r5, #0
 80120c6:	3204      	adds	r2, #4
 80120c8:	e9cd 7500 	strd	r7, r5, [sp]
 80120cc:	461c      	mov	r4, r3
 80120ce:	4606      	mov	r6, r0
 80120d0:	f7ff f84c 	bl	801116c <uxr_prepare_stream_to_write_submessage>
 80120d4:	f080 0201 	eor.w	r2, r0, #1
 80120d8:	b2d2      	uxtb	r2, r2
 80120da:	75a2      	strb	r2, [r4, #22]
 80120dc:	b112      	cbz	r2, 80120e4 <uxr_prepare_output_stream+0x2c>
 80120de:	4628      	mov	r0, r5
 80120e0:	b007      	add	sp, #28
 80120e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120e4:	aa05      	add	r2, sp, #20
 80120e6:	9902      	ldr	r1, [sp, #8]
 80120e8:	4630      	mov	r0, r6
 80120ea:	f7ff f975 	bl	80113d8 <uxr_init_base_object_request>
 80120ee:	a905      	add	r1, sp, #20
 80120f0:	4605      	mov	r5, r0
 80120f2:	4620      	mov	r0, r4
 80120f4:	f000 fee6 	bl	8012ec4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80120f8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80120fc:	69a6      	ldr	r6, [r4, #24]
 80120fe:	69e7      	ldr	r7, [r4, #28]
 8012100:	1a52      	subs	r2, r2, r1
 8012102:	4620      	mov	r0, r4
 8012104:	f7f8 ff86 	bl	800b014 <ucdr_init_buffer>
 8012108:	4620      	mov	r0, r4
 801210a:	463a      	mov	r2, r7
 801210c:	4631      	mov	r1, r6
 801210e:	f7f8 ff55 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 8012112:	4628      	mov	r0, r5
 8012114:	b007      	add	sp, #28
 8012116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012118 <uxr_serialize_message_header>:
 8012118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801211a:	b083      	sub	sp, #12
 801211c:	4616      	mov	r6, r2
 801211e:	4604      	mov	r4, r0
 8012120:	9301      	str	r3, [sp, #4]
 8012122:	460d      	mov	r5, r1
 8012124:	9f08      	ldr	r7, [sp, #32]
 8012126:	f7f7 fe75 	bl	8009e14 <ucdr_serialize_uint8_t>
 801212a:	4631      	mov	r1, r6
 801212c:	4620      	mov	r0, r4
 801212e:	f7f7 fe71 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012132:	9a01      	ldr	r2, [sp, #4]
 8012134:	2101      	movs	r1, #1
 8012136:	4620      	mov	r0, r4
 8012138:	f7f7 ff18 	bl	8009f6c <ucdr_serialize_endian_uint16_t>
 801213c:	062b      	lsls	r3, r5, #24
 801213e:	d501      	bpl.n	8012144 <uxr_serialize_message_header+0x2c>
 8012140:	b003      	add	sp, #12
 8012142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012144:	2204      	movs	r2, #4
 8012146:	4639      	mov	r1, r7
 8012148:	4620      	mov	r0, r4
 801214a:	b003      	add	sp, #12
 801214c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012150:	f001 bdaa 	b.w	8013ca8 <ucdr_serialize_array_uint8_t>

08012154 <uxr_deserialize_message_header>:
 8012154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012156:	b083      	sub	sp, #12
 8012158:	4616      	mov	r6, r2
 801215a:	4604      	mov	r4, r0
 801215c:	9301      	str	r3, [sp, #4]
 801215e:	460d      	mov	r5, r1
 8012160:	9f08      	ldr	r7, [sp, #32]
 8012162:	f7f7 fe6d 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012166:	4631      	mov	r1, r6
 8012168:	4620      	mov	r0, r4
 801216a:	f7f7 fe69 	bl	8009e40 <ucdr_deserialize_uint8_t>
 801216e:	9a01      	ldr	r2, [sp, #4]
 8012170:	2101      	movs	r1, #1
 8012172:	4620      	mov	r0, r4
 8012174:	f7f7 ffee 	bl	800a154 <ucdr_deserialize_endian_uint16_t>
 8012178:	f995 3000 	ldrsb.w	r3, [r5]
 801217c:	2b00      	cmp	r3, #0
 801217e:	da01      	bge.n	8012184 <uxr_deserialize_message_header+0x30>
 8012180:	b003      	add	sp, #12
 8012182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012184:	2204      	movs	r2, #4
 8012186:	4639      	mov	r1, r7
 8012188:	4620      	mov	r0, r4
 801218a:	b003      	add	sp, #12
 801218c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012190:	f001 bdee 	b.w	8013d70 <ucdr_deserialize_array_uint8_t>

08012194 <uxr_serialize_submessage_header>:
 8012194:	b530      	push	{r4, r5, lr}
 8012196:	b083      	sub	sp, #12
 8012198:	4615      	mov	r5, r2
 801219a:	4604      	mov	r4, r0
 801219c:	9301      	str	r3, [sp, #4]
 801219e:	f7f7 fe39 	bl	8009e14 <ucdr_serialize_uint8_t>
 80121a2:	4629      	mov	r1, r5
 80121a4:	4620      	mov	r0, r4
 80121a6:	f7f7 fe35 	bl	8009e14 <ucdr_serialize_uint8_t>
 80121aa:	9a01      	ldr	r2, [sp, #4]
 80121ac:	2101      	movs	r1, #1
 80121ae:	4620      	mov	r0, r4
 80121b0:	b003      	add	sp, #12
 80121b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121b6:	f7f7 bed9 	b.w	8009f6c <ucdr_serialize_endian_uint16_t>
 80121ba:	bf00      	nop

080121bc <uxr_deserialize_submessage_header>:
 80121bc:	b530      	push	{r4, r5, lr}
 80121be:	b083      	sub	sp, #12
 80121c0:	4615      	mov	r5, r2
 80121c2:	4604      	mov	r4, r0
 80121c4:	9301      	str	r3, [sp, #4]
 80121c6:	f7f7 fe3b 	bl	8009e40 <ucdr_deserialize_uint8_t>
 80121ca:	4629      	mov	r1, r5
 80121cc:	4620      	mov	r0, r4
 80121ce:	f7f7 fe37 	bl	8009e40 <ucdr_deserialize_uint8_t>
 80121d2:	9a01      	ldr	r2, [sp, #4]
 80121d4:	2101      	movs	r1, #1
 80121d6:	4620      	mov	r0, r4
 80121d8:	b003      	add	sp, #12
 80121da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121de:	f7f7 bfb9 	b.w	800a154 <ucdr_deserialize_endian_uint16_t>
 80121e2:	bf00      	nop

080121e4 <uxr_serialize_CLIENT_Representation>:
 80121e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121e8:	2204      	movs	r2, #4
 80121ea:	460e      	mov	r6, r1
 80121ec:	4605      	mov	r5, r0
 80121ee:	f001 fd5b 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 80121f2:	2202      	movs	r2, #2
 80121f4:	4607      	mov	r7, r0
 80121f6:	1d31      	adds	r1, r6, #4
 80121f8:	4628      	mov	r0, r5
 80121fa:	f001 fd55 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 80121fe:	4038      	ands	r0, r7
 8012200:	2202      	movs	r2, #2
 8012202:	1db1      	adds	r1, r6, #6
 8012204:	b2c7      	uxtb	r7, r0
 8012206:	4628      	mov	r0, r5
 8012208:	f001 fd4e 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 801220c:	2204      	movs	r2, #4
 801220e:	4007      	ands	r7, r0
 8012210:	f106 0108 	add.w	r1, r6, #8
 8012214:	4628      	mov	r0, r5
 8012216:	f001 fd47 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 801221a:	7b31      	ldrb	r1, [r6, #12]
 801221c:	4007      	ands	r7, r0
 801221e:	4628      	mov	r0, r5
 8012220:	f7f7 fdf8 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012224:	7b71      	ldrb	r1, [r6, #13]
 8012226:	4007      	ands	r7, r0
 8012228:	4628      	mov	r0, r5
 801222a:	f7f7 fdc5 	bl	8009db8 <ucdr_serialize_bool>
 801222e:	7b73      	ldrb	r3, [r6, #13]
 8012230:	ea07 0800 	and.w	r8, r7, r0
 8012234:	b93b      	cbnz	r3, 8012246 <uxr_serialize_CLIENT_Representation+0x62>
 8012236:	8bb1      	ldrh	r1, [r6, #28]
 8012238:	4628      	mov	r0, r5
 801223a:	f7f7 fe17 	bl	8009e6c <ucdr_serialize_uint16_t>
 801223e:	ea08 0000 	and.w	r0, r8, r0
 8012242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012246:	6931      	ldr	r1, [r6, #16]
 8012248:	4628      	mov	r0, r5
 801224a:	f7f7 fff9 	bl	800a240 <ucdr_serialize_uint32_t>
 801224e:	6933      	ldr	r3, [r6, #16]
 8012250:	b1e3      	cbz	r3, 801228c <uxr_serialize_CLIENT_Representation+0xa8>
 8012252:	b1c0      	cbz	r0, 8012286 <uxr_serialize_CLIENT_Representation+0xa2>
 8012254:	4637      	mov	r7, r6
 8012256:	f04f 0900 	mov.w	r9, #0
 801225a:	e001      	b.n	8012260 <uxr_serialize_CLIENT_Representation+0x7c>
 801225c:	3708      	adds	r7, #8
 801225e:	b194      	cbz	r4, 8012286 <uxr_serialize_CLIENT_Representation+0xa2>
 8012260:	6979      	ldr	r1, [r7, #20]
 8012262:	4628      	mov	r0, r5
 8012264:	f001 fe40 	bl	8013ee8 <ucdr_serialize_string>
 8012268:	69b9      	ldr	r1, [r7, #24]
 801226a:	4604      	mov	r4, r0
 801226c:	4628      	mov	r0, r5
 801226e:	f001 fe3b 	bl	8013ee8 <ucdr_serialize_string>
 8012272:	6933      	ldr	r3, [r6, #16]
 8012274:	f109 0901 	add.w	r9, r9, #1
 8012278:	4004      	ands	r4, r0
 801227a:	4599      	cmp	r9, r3
 801227c:	b2e4      	uxtb	r4, r4
 801227e:	d3ed      	bcc.n	801225c <uxr_serialize_CLIENT_Representation+0x78>
 8012280:	ea08 0804 	and.w	r8, r8, r4
 8012284:	e7d7      	b.n	8012236 <uxr_serialize_CLIENT_Representation+0x52>
 8012286:	f04f 0800 	mov.w	r8, #0
 801228a:	e7d4      	b.n	8012236 <uxr_serialize_CLIENT_Representation+0x52>
 801228c:	ea08 0800 	and.w	r8, r8, r0
 8012290:	e7d1      	b.n	8012236 <uxr_serialize_CLIENT_Representation+0x52>
 8012292:	bf00      	nop

08012294 <uxr_deserialize_CLIENT_Representation>:
 8012294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012298:	2204      	movs	r2, #4
 801229a:	460c      	mov	r4, r1
 801229c:	4605      	mov	r5, r0
 801229e:	f001 fd67 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80122a2:	2202      	movs	r2, #2
 80122a4:	4607      	mov	r7, r0
 80122a6:	1d21      	adds	r1, r4, #4
 80122a8:	4628      	mov	r0, r5
 80122aa:	f001 fd61 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80122ae:	4038      	ands	r0, r7
 80122b0:	2202      	movs	r2, #2
 80122b2:	1da1      	adds	r1, r4, #6
 80122b4:	b2c6      	uxtb	r6, r0
 80122b6:	4628      	mov	r0, r5
 80122b8:	f001 fd5a 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80122bc:	2204      	movs	r2, #4
 80122be:	4006      	ands	r6, r0
 80122c0:	f104 0108 	add.w	r1, r4, #8
 80122c4:	4628      	mov	r0, r5
 80122c6:	f001 fd53 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80122ca:	f104 010c 	add.w	r1, r4, #12
 80122ce:	4006      	ands	r6, r0
 80122d0:	4628      	mov	r0, r5
 80122d2:	f7f7 fdb5 	bl	8009e40 <ucdr_deserialize_uint8_t>
 80122d6:	f104 010d 	add.w	r1, r4, #13
 80122da:	ea06 0700 	and.w	r7, r6, r0
 80122de:	4628      	mov	r0, r5
 80122e0:	f7f7 fd80 	bl	8009de4 <ucdr_deserialize_bool>
 80122e4:	7b63      	ldrb	r3, [r4, #13]
 80122e6:	4007      	ands	r7, r0
 80122e8:	b93b      	cbnz	r3, 80122fa <uxr_deserialize_CLIENT_Representation+0x66>
 80122ea:	f104 011c 	add.w	r1, r4, #28
 80122ee:	4628      	mov	r0, r5
 80122f0:	f7f7 febc 	bl	800a06c <ucdr_deserialize_uint16_t>
 80122f4:	4038      	ands	r0, r7
 80122f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122fa:	f104 0110 	add.w	r1, r4, #16
 80122fe:	4628      	mov	r0, r5
 8012300:	f7f8 f8ce 	bl	800a4a0 <ucdr_deserialize_uint32_t>
 8012304:	6923      	ldr	r3, [r4, #16]
 8012306:	2b01      	cmp	r3, #1
 8012308:	d903      	bls.n	8012312 <uxr_deserialize_CLIENT_Representation+0x7e>
 801230a:	2301      	movs	r3, #1
 801230c:	75ab      	strb	r3, [r5, #22]
 801230e:	2700      	movs	r7, #0
 8012310:	e7eb      	b.n	80122ea <uxr_deserialize_CLIENT_Representation+0x56>
 8012312:	b30b      	cbz	r3, 8012358 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012314:	2800      	cmp	r0, #0
 8012316:	d0fa      	beq.n	801230e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012318:	46a0      	mov	r8, r4
 801231a:	f04f 0900 	mov.w	r9, #0
 801231e:	e001      	b.n	8012324 <uxr_deserialize_CLIENT_Representation+0x90>
 8012320:	2e00      	cmp	r6, #0
 8012322:	d0f4      	beq.n	801230e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012324:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801232c:	4628      	mov	r0, r5
 801232e:	f001 fdeb 	bl	8013f08 <ucdr_deserialize_string>
 8012332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012336:	4606      	mov	r6, r0
 8012338:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801233c:	4628      	mov	r0, r5
 801233e:	f001 fde3 	bl	8013f08 <ucdr_deserialize_string>
 8012342:	6923      	ldr	r3, [r4, #16]
 8012344:	f109 0901 	add.w	r9, r9, #1
 8012348:	4006      	ands	r6, r0
 801234a:	4599      	cmp	r9, r3
 801234c:	f108 0808 	add.w	r8, r8, #8
 8012350:	b2f6      	uxtb	r6, r6
 8012352:	d3e5      	bcc.n	8012320 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012354:	4037      	ands	r7, r6
 8012356:	e7c8      	b.n	80122ea <uxr_deserialize_CLIENT_Representation+0x56>
 8012358:	4007      	ands	r7, r0
 801235a:	e7c6      	b.n	80122ea <uxr_deserialize_CLIENT_Representation+0x56>

0801235c <uxr_serialize_AGENT_Representation>:
 801235c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012360:	2204      	movs	r2, #4
 8012362:	460f      	mov	r7, r1
 8012364:	4605      	mov	r5, r0
 8012366:	f001 fc9f 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 801236a:	2202      	movs	r2, #2
 801236c:	4604      	mov	r4, r0
 801236e:	1d39      	adds	r1, r7, #4
 8012370:	4628      	mov	r0, r5
 8012372:	f001 fc99 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012376:	4020      	ands	r0, r4
 8012378:	2202      	movs	r2, #2
 801237a:	1db9      	adds	r1, r7, #6
 801237c:	b2c4      	uxtb	r4, r0
 801237e:	4628      	mov	r0, r5
 8012380:	f001 fc92 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012384:	7a39      	ldrb	r1, [r7, #8]
 8012386:	4004      	ands	r4, r0
 8012388:	4628      	mov	r0, r5
 801238a:	f7f7 fd15 	bl	8009db8 <ucdr_serialize_bool>
 801238e:	7a3b      	ldrb	r3, [r7, #8]
 8012390:	ea00 0804 	and.w	r8, r0, r4
 8012394:	b913      	cbnz	r3, 801239c <uxr_serialize_AGENT_Representation+0x40>
 8012396:	4640      	mov	r0, r8
 8012398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801239c:	68f9      	ldr	r1, [r7, #12]
 801239e:	4628      	mov	r0, r5
 80123a0:	f7f7 ff4e 	bl	800a240 <ucdr_serialize_uint32_t>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	b303      	cbz	r3, 80123ea <uxr_serialize_AGENT_Representation+0x8e>
 80123a8:	b1d0      	cbz	r0, 80123e0 <uxr_serialize_AGENT_Representation+0x84>
 80123aa:	463e      	mov	r6, r7
 80123ac:	f04f 0900 	mov.w	r9, #0
 80123b0:	e001      	b.n	80123b6 <uxr_serialize_AGENT_Representation+0x5a>
 80123b2:	3608      	adds	r6, #8
 80123b4:	b1a4      	cbz	r4, 80123e0 <uxr_serialize_AGENT_Representation+0x84>
 80123b6:	6931      	ldr	r1, [r6, #16]
 80123b8:	4628      	mov	r0, r5
 80123ba:	f001 fd95 	bl	8013ee8 <ucdr_serialize_string>
 80123be:	6971      	ldr	r1, [r6, #20]
 80123c0:	4604      	mov	r4, r0
 80123c2:	4628      	mov	r0, r5
 80123c4:	f001 fd90 	bl	8013ee8 <ucdr_serialize_string>
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	f109 0901 	add.w	r9, r9, #1
 80123ce:	4004      	ands	r4, r0
 80123d0:	4599      	cmp	r9, r3
 80123d2:	b2e4      	uxtb	r4, r4
 80123d4:	d3ed      	bcc.n	80123b2 <uxr_serialize_AGENT_Representation+0x56>
 80123d6:	ea08 0804 	and.w	r8, r8, r4
 80123da:	4640      	mov	r0, r8
 80123dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123e0:	f04f 0800 	mov.w	r8, #0
 80123e4:	4640      	mov	r0, r8
 80123e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ea:	ea08 0800 	and.w	r8, r8, r0
 80123ee:	e7d2      	b.n	8012396 <uxr_serialize_AGENT_Representation+0x3a>

080123f0 <uxr_serialize_DATAWRITER_Representation>:
 80123f0:	b570      	push	{r4, r5, r6, lr}
 80123f2:	460d      	mov	r5, r1
 80123f4:	7809      	ldrb	r1, [r1, #0]
 80123f6:	4606      	mov	r6, r0
 80123f8:	f7f7 fd0c 	bl	8009e14 <ucdr_serialize_uint8_t>
 80123fc:	4604      	mov	r4, r0
 80123fe:	b130      	cbz	r0, 801240e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012400:	782b      	ldrb	r3, [r5, #0]
 8012402:	2b02      	cmp	r3, #2
 8012404:	d00c      	beq.n	8012420 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012406:	2b03      	cmp	r3, #3
 8012408:	d010      	beq.n	801242c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801240a:	2b01      	cmp	r3, #1
 801240c:	d008      	beq.n	8012420 <uxr_serialize_DATAWRITER_Representation+0x30>
 801240e:	2202      	movs	r2, #2
 8012410:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012414:	4630      	mov	r0, r6
 8012416:	f001 fc47 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 801241a:	4020      	ands	r0, r4
 801241c:	b2c0      	uxtb	r0, r0
 801241e:	bd70      	pop	{r4, r5, r6, pc}
 8012420:	6869      	ldr	r1, [r5, #4]
 8012422:	4630      	mov	r0, r6
 8012424:	f001 fd60 	bl	8013ee8 <ucdr_serialize_string>
 8012428:	4604      	mov	r4, r0
 801242a:	e7f0      	b.n	801240e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801242c:	4629      	mov	r1, r5
 801242e:	4630      	mov	r0, r6
 8012430:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012434:	3104      	adds	r1, #4
 8012436:	f001 fd2b 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 801243a:	4604      	mov	r4, r0
 801243c:	e7e7      	b.n	801240e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801243e:	bf00      	nop

08012440 <uxr_serialize_ObjectVariant.part.0>:
 8012440:	b570      	push	{r4, r5, r6, lr}
 8012442:	780b      	ldrb	r3, [r1, #0]
 8012444:	3b01      	subs	r3, #1
 8012446:	460c      	mov	r4, r1
 8012448:	4605      	mov	r5, r0
 801244a:	2b0d      	cmp	r3, #13
 801244c:	d854      	bhi.n	80124f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801244e:	e8df f003 	tbb	[pc, r3]
 8012452:	0730      	.short	0x0730
 8012454:	07071b1b 	.word	0x07071b1b
 8012458:	0c530707 	.word	0x0c530707
 801245c:	494e0c0c 	.word	0x494e0c0c
 8012460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012464:	3104      	adds	r1, #4
 8012466:	f7ff bfc3 	b.w	80123f0 <uxr_serialize_DATAWRITER_Representation>
 801246a:	7909      	ldrb	r1, [r1, #4]
 801246c:	f7f7 fcd2 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012470:	b1e8      	cbz	r0, 80124ae <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012472:	7923      	ldrb	r3, [r4, #4]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d001      	beq.n	801247c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012478:	2b02      	cmp	r3, #2
 801247a:	d13d      	bne.n	80124f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801247c:	68a1      	ldr	r1, [r4, #8]
 801247e:	4628      	mov	r0, r5
 8012480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012484:	f001 bd30 	b.w	8013ee8 <ucdr_serialize_string>
 8012488:	7909      	ldrb	r1, [r1, #4]
 801248a:	f7f7 fcc3 	bl	8009e14 <ucdr_serialize_uint8_t>
 801248e:	4606      	mov	r6, r0
 8012490:	b120      	cbz	r0, 801249c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012492:	7923      	ldrb	r3, [r4, #4]
 8012494:	2b02      	cmp	r3, #2
 8012496:	d039      	beq.n	801250c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012498:	2b03      	cmp	r3, #3
 801249a:	d02f      	beq.n	80124fc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801249c:	2202      	movs	r2, #2
 801249e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80124a2:	4628      	mov	r0, r5
 80124a4:	f001 fc00 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 80124a8:	4030      	ands	r0, r6
 80124aa:	b2c0      	uxtb	r0, r0
 80124ac:	bd70      	pop	{r4, r5, r6, pc}
 80124ae:	2000      	movs	r0, #0
 80124b0:	bd70      	pop	{r4, r5, r6, pc}
 80124b2:	7909      	ldrb	r1, [r1, #4]
 80124b4:	f7f7 fcae 	bl	8009e14 <ucdr_serialize_uint8_t>
 80124b8:	4606      	mov	r6, r0
 80124ba:	b158      	cbz	r0, 80124d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80124bc:	7923      	ldrb	r3, [r4, #4]
 80124be:	2b02      	cmp	r3, #2
 80124c0:	d003      	beq.n	80124ca <uxr_serialize_ObjectVariant.part.0+0x8a>
 80124c2:	2b03      	cmp	r3, #3
 80124c4:	d028      	beq.n	8012518 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d104      	bne.n	80124d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80124ca:	68a1      	ldr	r1, [r4, #8]
 80124cc:	4628      	mov	r0, r5
 80124ce:	f001 fd0b 	bl	8013ee8 <ucdr_serialize_string>
 80124d2:	4606      	mov	r6, r0
 80124d4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80124d8:	4628      	mov	r0, r5
 80124da:	f7f8 fa03 	bl	800a8e4 <ucdr_serialize_int16_t>
 80124de:	4030      	ands	r0, r6
 80124e0:	b2c0      	uxtb	r0, r0
 80124e2:	bd70      	pop	{r4, r5, r6, pc}
 80124e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124e8:	3104      	adds	r1, #4
 80124ea:	f7ff be7b 	b.w	80121e4 <uxr_serialize_CLIENT_Representation>
 80124ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124f2:	3104      	adds	r1, #4
 80124f4:	f7ff bf32 	b.w	801235c <uxr_serialize_AGENT_Representation>
 80124f8:	2001      	movs	r0, #1
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	68a2      	ldr	r2, [r4, #8]
 80124fe:	f104 010c 	add.w	r1, r4, #12
 8012502:	4628      	mov	r0, r5
 8012504:	f001 fcc4 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 8012508:	4606      	mov	r6, r0
 801250a:	e7c7      	b.n	801249c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801250c:	68a1      	ldr	r1, [r4, #8]
 801250e:	4628      	mov	r0, r5
 8012510:	f001 fcea 	bl	8013ee8 <ucdr_serialize_string>
 8012514:	4606      	mov	r6, r0
 8012516:	e7c1      	b.n	801249c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012518:	68a2      	ldr	r2, [r4, #8]
 801251a:	f104 010c 	add.w	r1, r4, #12
 801251e:	4628      	mov	r0, r5
 8012520:	f001 fcb6 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 8012524:	4606      	mov	r6, r0
 8012526:	e7d5      	b.n	80124d4 <uxr_serialize_ObjectVariant.part.0+0x94>

08012528 <uxr_deserialize_DATAWRITER_Representation>:
 8012528:	b570      	push	{r4, r5, r6, lr}
 801252a:	4606      	mov	r6, r0
 801252c:	460d      	mov	r5, r1
 801252e:	f7f7 fc87 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012532:	4604      	mov	r4, r0
 8012534:	b130      	cbz	r0, 8012544 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012536:	782b      	ldrb	r3, [r5, #0]
 8012538:	2b02      	cmp	r3, #2
 801253a:	d00c      	beq.n	8012556 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801253c:	2b03      	cmp	r3, #3
 801253e:	d012      	beq.n	8012566 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012540:	2b01      	cmp	r3, #1
 8012542:	d008      	beq.n	8012556 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012544:	2202      	movs	r2, #2
 8012546:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801254a:	4630      	mov	r0, r6
 801254c:	f001 fc10 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012550:	4020      	ands	r0, r4
 8012552:	b2c0      	uxtb	r0, r0
 8012554:	bd70      	pop	{r4, r5, r6, pc}
 8012556:	6869      	ldr	r1, [r5, #4]
 8012558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801255c:	4630      	mov	r0, r6
 801255e:	f001 fcd3 	bl	8013f08 <ucdr_deserialize_string>
 8012562:	4604      	mov	r4, r0
 8012564:	e7ee      	b.n	8012544 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012566:	1d2b      	adds	r3, r5, #4
 8012568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801256c:	f105 0108 	add.w	r1, r5, #8
 8012570:	4630      	mov	r0, r6
 8012572:	f001 fc9f 	bl	8013eb4 <ucdr_deserialize_sequence_uint8_t>
 8012576:	4604      	mov	r4, r0
 8012578:	e7e4      	b.n	8012544 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801257a:	bf00      	nop

0801257c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801257c:	b570      	push	{r4, r5, r6, lr}
 801257e:	460d      	mov	r5, r1
 8012580:	7809      	ldrb	r1, [r1, #0]
 8012582:	4606      	mov	r6, r0
 8012584:	f7f7 fc18 	bl	8009db8 <ucdr_serialize_bool>
 8012588:	782b      	ldrb	r3, [r5, #0]
 801258a:	4604      	mov	r4, r0
 801258c:	b94b      	cbnz	r3, 80125a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801258e:	7a29      	ldrb	r1, [r5, #8]
 8012590:	4630      	mov	r0, r6
 8012592:	f7f7 fc11 	bl	8009db8 <ucdr_serialize_bool>
 8012596:	7a2b      	ldrb	r3, [r5, #8]
 8012598:	4004      	ands	r4, r0
 801259a:	b2e4      	uxtb	r4, r4
 801259c:	b943      	cbnz	r3, 80125b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801259e:	4620      	mov	r0, r4
 80125a0:	bd70      	pop	{r4, r5, r6, pc}
 80125a2:	6869      	ldr	r1, [r5, #4]
 80125a4:	4630      	mov	r0, r6
 80125a6:	f001 fc9f 	bl	8013ee8 <ucdr_serialize_string>
 80125aa:	4004      	ands	r4, r0
 80125ac:	b2e4      	uxtb	r4, r4
 80125ae:	e7ee      	b.n	801258e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80125b0:	68e9      	ldr	r1, [r5, #12]
 80125b2:	4630      	mov	r0, r6
 80125b4:	f001 fc98 	bl	8013ee8 <ucdr_serialize_string>
 80125b8:	4004      	ands	r4, r0
 80125ba:	4620      	mov	r0, r4
 80125bc:	bd70      	pop	{r4, r5, r6, pc}
 80125be:	bf00      	nop

080125c0 <uxr_serialize_OBJK_Topic_Binary>:
 80125c0:	b570      	push	{r4, r5, r6, lr}
 80125c2:	460d      	mov	r5, r1
 80125c4:	6809      	ldr	r1, [r1, #0]
 80125c6:	4606      	mov	r6, r0
 80125c8:	f001 fc8e 	bl	8013ee8 <ucdr_serialize_string>
 80125cc:	7929      	ldrb	r1, [r5, #4]
 80125ce:	4604      	mov	r4, r0
 80125d0:	4630      	mov	r0, r6
 80125d2:	f7f7 fbf1 	bl	8009db8 <ucdr_serialize_bool>
 80125d6:	792b      	ldrb	r3, [r5, #4]
 80125d8:	4004      	ands	r4, r0
 80125da:	b2e4      	uxtb	r4, r4
 80125dc:	b943      	cbnz	r3, 80125f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80125de:	7b29      	ldrb	r1, [r5, #12]
 80125e0:	4630      	mov	r0, r6
 80125e2:	f7f7 fbe9 	bl	8009db8 <ucdr_serialize_bool>
 80125e6:	7b2b      	ldrb	r3, [r5, #12]
 80125e8:	4004      	ands	r4, r0
 80125ea:	b93b      	cbnz	r3, 80125fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80125ec:	4620      	mov	r0, r4
 80125ee:	bd70      	pop	{r4, r5, r6, pc}
 80125f0:	68a9      	ldr	r1, [r5, #8]
 80125f2:	4630      	mov	r0, r6
 80125f4:	f001 fc78 	bl	8013ee8 <ucdr_serialize_string>
 80125f8:	4004      	ands	r4, r0
 80125fa:	e7f0      	b.n	80125de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80125fc:	6929      	ldr	r1, [r5, #16]
 80125fe:	4630      	mov	r0, r6
 8012600:	f001 fc72 	bl	8013ee8 <ucdr_serialize_string>
 8012604:	4004      	ands	r4, r0
 8012606:	b2e4      	uxtb	r4, r4
 8012608:	4620      	mov	r0, r4
 801260a:	bd70      	pop	{r4, r5, r6, pc}

0801260c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012610:	460c      	mov	r4, r1
 8012612:	7809      	ldrb	r1, [r1, #0]
 8012614:	4606      	mov	r6, r0
 8012616:	f7f7 fbcf 	bl	8009db8 <ucdr_serialize_bool>
 801261a:	7823      	ldrb	r3, [r4, #0]
 801261c:	4605      	mov	r5, r0
 801261e:	b96b      	cbnz	r3, 801263c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012620:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012624:	4630      	mov	r0, r6
 8012626:	f7f7 fbc7 	bl	8009db8 <ucdr_serialize_bool>
 801262a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801262e:	4005      	ands	r5, r0
 8012630:	b2ed      	uxtb	r5, r5
 8012632:	2b00      	cmp	r3, #0
 8012634:	d169      	bne.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012636:	4628      	mov	r0, r5
 8012638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801263c:	6861      	ldr	r1, [r4, #4]
 801263e:	4630      	mov	r0, r6
 8012640:	f7f7 fdfe 	bl	800a240 <ucdr_serialize_uint32_t>
 8012644:	6863      	ldr	r3, [r4, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d06b      	beq.n	8012722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801264a:	2800      	cmp	r0, #0
 801264c:	d067      	beq.n	801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801264e:	68a1      	ldr	r1, [r4, #8]
 8012650:	4630      	mov	r0, r6
 8012652:	f001 fc49 	bl	8013ee8 <ucdr_serialize_string>
 8012656:	6863      	ldr	r3, [r4, #4]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d953      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801265c:	2800      	cmp	r0, #0
 801265e:	d05e      	beq.n	801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012660:	68e1      	ldr	r1, [r4, #12]
 8012662:	4630      	mov	r0, r6
 8012664:	f001 fc40 	bl	8013ee8 <ucdr_serialize_string>
 8012668:	6863      	ldr	r3, [r4, #4]
 801266a:	2b02      	cmp	r3, #2
 801266c:	d94a      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801266e:	2800      	cmp	r0, #0
 8012670:	d055      	beq.n	801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012672:	6921      	ldr	r1, [r4, #16]
 8012674:	4630      	mov	r0, r6
 8012676:	f001 fc37 	bl	8013ee8 <ucdr_serialize_string>
 801267a:	6863      	ldr	r3, [r4, #4]
 801267c:	2b03      	cmp	r3, #3
 801267e:	d941      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012680:	2800      	cmp	r0, #0
 8012682:	d04c      	beq.n	801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012684:	6961      	ldr	r1, [r4, #20]
 8012686:	4630      	mov	r0, r6
 8012688:	f001 fc2e 	bl	8013ee8 <ucdr_serialize_string>
 801268c:	6863      	ldr	r3, [r4, #4]
 801268e:	2b04      	cmp	r3, #4
 8012690:	d938      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012692:	2800      	cmp	r0, #0
 8012694:	d043      	beq.n	801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012696:	69a1      	ldr	r1, [r4, #24]
 8012698:	4630      	mov	r0, r6
 801269a:	f001 fc25 	bl	8013ee8 <ucdr_serialize_string>
 801269e:	6863      	ldr	r3, [r4, #4]
 80126a0:	2b05      	cmp	r3, #5
 80126a2:	d92f      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d03a      	beq.n	801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126a8:	69e1      	ldr	r1, [r4, #28]
 80126aa:	4630      	mov	r0, r6
 80126ac:	f001 fc1c 	bl	8013ee8 <ucdr_serialize_string>
 80126b0:	6863      	ldr	r3, [r4, #4]
 80126b2:	2b06      	cmp	r3, #6
 80126b4:	d926      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126b6:	b390      	cbz	r0, 801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126b8:	6a21      	ldr	r1, [r4, #32]
 80126ba:	4630      	mov	r0, r6
 80126bc:	f001 fc14 	bl	8013ee8 <ucdr_serialize_string>
 80126c0:	6863      	ldr	r3, [r4, #4]
 80126c2:	2b07      	cmp	r3, #7
 80126c4:	d91e      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126c6:	b350      	cbz	r0, 801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80126ca:	4630      	mov	r0, r6
 80126cc:	f001 fc0c 	bl	8013ee8 <ucdr_serialize_string>
 80126d0:	6863      	ldr	r3, [r4, #4]
 80126d2:	2b08      	cmp	r3, #8
 80126d4:	d916      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126d6:	b310      	cbz	r0, 801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80126da:	4630      	mov	r0, r6
 80126dc:	f001 fc04 	bl	8013ee8 <ucdr_serialize_string>
 80126e0:	6863      	ldr	r3, [r4, #4]
 80126e2:	2b09      	cmp	r3, #9
 80126e4:	d90e      	bls.n	8012704 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126e6:	b1d0      	cbz	r0, 801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126e8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80126ec:	2709      	movs	r7, #9
 80126ee:	e000      	b.n	80126f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80126f0:	b1a8      	cbz	r0, 801271e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80126f6:	4630      	mov	r0, r6
 80126f8:	f001 fbf6 	bl	8013ee8 <ucdr_serialize_string>
 80126fc:	6862      	ldr	r2, [r4, #4]
 80126fe:	3701      	adds	r7, #1
 8012700:	4297      	cmp	r7, r2
 8012702:	d3f5      	bcc.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012704:	4005      	ands	r5, r0
 8012706:	b2ed      	uxtb	r5, r5
 8012708:	e78a      	b.n	8012620 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801270a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801270c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012710:	4630      	mov	r0, r6
 8012712:	f001 fbbd 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 8012716:	4005      	ands	r5, r0
 8012718:	4628      	mov	r0, r5
 801271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801271e:	2500      	movs	r5, #0
 8012720:	e77e      	b.n	8012620 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012722:	4028      	ands	r0, r5
 8012724:	b2c5      	uxtb	r5, r0
 8012726:	e77b      	b.n	8012620 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012728 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	460d      	mov	r5, r1
 801272c:	7809      	ldrb	r1, [r1, #0]
 801272e:	4606      	mov	r6, r0
 8012730:	f7f7 fb42 	bl	8009db8 <ucdr_serialize_bool>
 8012734:	782b      	ldrb	r3, [r5, #0]
 8012736:	4604      	mov	r4, r0
 8012738:	b94b      	cbnz	r3, 801274e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801273a:	7a29      	ldrb	r1, [r5, #8]
 801273c:	4630      	mov	r0, r6
 801273e:	f7f7 fb3b 	bl	8009db8 <ucdr_serialize_bool>
 8012742:	7a2b      	ldrb	r3, [r5, #8]
 8012744:	4004      	ands	r4, r0
 8012746:	b2e4      	uxtb	r4, r4
 8012748:	b943      	cbnz	r3, 801275c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801274a:	4620      	mov	r0, r4
 801274c:	bd70      	pop	{r4, r5, r6, pc}
 801274e:	6869      	ldr	r1, [r5, #4]
 8012750:	4630      	mov	r0, r6
 8012752:	f001 fbc9 	bl	8013ee8 <ucdr_serialize_string>
 8012756:	4004      	ands	r4, r0
 8012758:	b2e4      	uxtb	r4, r4
 801275a:	e7ee      	b.n	801273a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801275c:	f105 010c 	add.w	r1, r5, #12
 8012760:	4630      	mov	r0, r6
 8012762:	f7ff ff53 	bl	801260c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012766:	4004      	ands	r4, r0
 8012768:	4620      	mov	r0, r4
 801276a:	bd70      	pop	{r4, r5, r6, pc}

0801276c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801276c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012770:	4688      	mov	r8, r1
 8012772:	8809      	ldrh	r1, [r1, #0]
 8012774:	4681      	mov	r9, r0
 8012776:	f7f7 fb79 	bl	8009e6c <ucdr_serialize_uint16_t>
 801277a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801277e:	4606      	mov	r6, r0
 8012780:	4648      	mov	r0, r9
 8012782:	f7f7 fb19 	bl	8009db8 <ucdr_serialize_bool>
 8012786:	f898 3002 	ldrb.w	r3, [r8, #2]
 801278a:	4006      	ands	r6, r0
 801278c:	b2f5      	uxtb	r5, r6
 801278e:	b9eb      	cbnz	r3, 80127cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012790:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012794:	4648      	mov	r0, r9
 8012796:	f7f7 fb0f 	bl	8009db8 <ucdr_serialize_bool>
 801279a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801279e:	4005      	ands	r5, r0
 80127a0:	bb7b      	cbnz	r3, 8012802 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80127a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80127a6:	4648      	mov	r0, r9
 80127a8:	f7f7 fb06 	bl	8009db8 <ucdr_serialize_bool>
 80127ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 80127b0:	4005      	ands	r5, r0
 80127b2:	b9f3      	cbnz	r3, 80127f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80127b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80127b8:	4648      	mov	r0, r9
 80127ba:	f7f7 fafd 	bl	8009db8 <ucdr_serialize_bool>
 80127be:	f898 3014 	ldrb.w	r3, [r8, #20]
 80127c2:	4005      	ands	r5, r0
 80127c4:	b94b      	cbnz	r3, 80127da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80127c6:	4628      	mov	r0, r5
 80127c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80127cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80127d0:	4648      	mov	r0, r9
 80127d2:	f7f7 fb4b 	bl	8009e6c <ucdr_serialize_uint16_t>
 80127d6:	4005      	ands	r5, r0
 80127d8:	e7da      	b.n	8012790 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80127da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80127de:	f108 011c 	add.w	r1, r8, #28
 80127e2:	4648      	mov	r0, r9
 80127e4:	f001 fb54 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 80127e8:	4028      	ands	r0, r5
 80127ea:	b2c5      	uxtb	r5, r0
 80127ec:	4628      	mov	r0, r5
 80127ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80127f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80127f6:	4648      	mov	r0, r9
 80127f8:	f7f7 fd22 	bl	800a240 <ucdr_serialize_uint32_t>
 80127fc:	4028      	ands	r0, r5
 80127fe:	b2c5      	uxtb	r5, r0
 8012800:	e7d8      	b.n	80127b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012802:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012806:	4648      	mov	r0, r9
 8012808:	f7f7 fd1a 	bl	800a240 <ucdr_serialize_uint32_t>
 801280c:	4028      	ands	r0, r5
 801280e:	b2c5      	uxtb	r5, r0
 8012810:	e7c7      	b.n	80127a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012812:	bf00      	nop

08012814 <uxr_serialize_OBJK_DataReader_Binary>:
 8012814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012816:	2202      	movs	r2, #2
 8012818:	460c      	mov	r4, r1
 801281a:	4606      	mov	r6, r0
 801281c:	f001 fa44 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012820:	78a1      	ldrb	r1, [r4, #2]
 8012822:	4605      	mov	r5, r0
 8012824:	4630      	mov	r0, r6
 8012826:	f7f7 fac7 	bl	8009db8 <ucdr_serialize_bool>
 801282a:	78a3      	ldrb	r3, [r4, #2]
 801282c:	4005      	ands	r5, r0
 801282e:	b2ed      	uxtb	r5, r5
 8012830:	b90b      	cbnz	r3, 8012836 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012832:	4628      	mov	r0, r5
 8012834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012836:	f104 0108 	add.w	r1, r4, #8
 801283a:	4630      	mov	r0, r6
 801283c:	f7ff ff96 	bl	801276c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012840:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012844:	4607      	mov	r7, r0
 8012846:	4630      	mov	r0, r6
 8012848:	f7f7 fab6 	bl	8009db8 <ucdr_serialize_bool>
 801284c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012850:	4038      	ands	r0, r7
 8012852:	b2c7      	uxtb	r7, r0
 8012854:	b95b      	cbnz	r3, 801286e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012856:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801285a:	4630      	mov	r0, r6
 801285c:	f7f7 faac 	bl	8009db8 <ucdr_serialize_bool>
 8012860:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012864:	4007      	ands	r7, r0
 8012866:	b94b      	cbnz	r3, 801287c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012868:	403d      	ands	r5, r7
 801286a:	4628      	mov	r0, r5
 801286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801286e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012872:	4630      	mov	r0, r6
 8012874:	f7f7 ff3a 	bl	800a6ec <ucdr_serialize_uint64_t>
 8012878:	4007      	ands	r7, r0
 801287a:	e7ec      	b.n	8012856 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801287c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801287e:	4630      	mov	r0, r6
 8012880:	f001 fb32 	bl	8013ee8 <ucdr_serialize_string>
 8012884:	4007      	ands	r7, r0
 8012886:	b2ff      	uxtb	r7, r7
 8012888:	e7ee      	b.n	8012868 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801288a:	bf00      	nop

0801288c <uxr_deserialize_ObjectVariant>:
 801288c:	b570      	push	{r4, r5, r6, lr}
 801288e:	4605      	mov	r5, r0
 8012890:	460e      	mov	r6, r1
 8012892:	f7f7 fad5 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012896:	b168      	cbz	r0, 80128b4 <uxr_deserialize_ObjectVariant+0x28>
 8012898:	7833      	ldrb	r3, [r6, #0]
 801289a:	3b01      	subs	r3, #1
 801289c:	4604      	mov	r4, r0
 801289e:	2b0d      	cmp	r3, #13
 80128a0:	d809      	bhi.n	80128b6 <uxr_deserialize_ObjectVariant+0x2a>
 80128a2:	e8df f003 	tbb	[pc, r3]
 80128a6:	0a41      	.short	0x0a41
 80128a8:	0a0a2323 	.word	0x0a0a2323
 80128ac:	10080a0a 	.word	0x10080a0a
 80128b0:	565c1010 	.word	0x565c1010
 80128b4:	2400      	movs	r4, #0
 80128b6:	4620      	mov	r0, r4
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	1d31      	adds	r1, r6, #4
 80128bc:	4628      	mov	r0, r5
 80128be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128c2:	f7ff be31 	b.w	8012528 <uxr_deserialize_DATAWRITER_Representation>
 80128c6:	1d31      	adds	r1, r6, #4
 80128c8:	4628      	mov	r0, r5
 80128ca:	f7f7 fab9 	bl	8009e40 <ucdr_deserialize_uint8_t>
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d0f0      	beq.n	80128b4 <uxr_deserialize_ObjectVariant+0x28>
 80128d2:	7933      	ldrb	r3, [r6, #4]
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d001      	beq.n	80128dc <uxr_deserialize_ObjectVariant+0x50>
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d1ec      	bne.n	80128b6 <uxr_deserialize_ObjectVariant+0x2a>
 80128dc:	68b1      	ldr	r1, [r6, #8]
 80128de:	4628      	mov	r0, r5
 80128e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128e8:	f001 bb0e 	b.w	8013f08 <ucdr_deserialize_string>
 80128ec:	1d31      	adds	r1, r6, #4
 80128ee:	4628      	mov	r0, r5
 80128f0:	f7f7 faa6 	bl	8009e40 <ucdr_deserialize_uint8_t>
 80128f4:	4604      	mov	r4, r0
 80128f6:	b170      	cbz	r0, 8012916 <uxr_deserialize_ObjectVariant+0x8a>
 80128f8:	7933      	ldrb	r3, [r6, #4]
 80128fa:	2b02      	cmp	r3, #2
 80128fc:	d04c      	beq.n	8012998 <uxr_deserialize_ObjectVariant+0x10c>
 80128fe:	2b03      	cmp	r3, #3
 8012900:	d109      	bne.n	8012916 <uxr_deserialize_ObjectVariant+0x8a>
 8012902:	f106 0308 	add.w	r3, r6, #8
 8012906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801290a:	f106 010c 	add.w	r1, r6, #12
 801290e:	4628      	mov	r0, r5
 8012910:	f001 fad0 	bl	8013eb4 <ucdr_deserialize_sequence_uint8_t>
 8012914:	4604      	mov	r4, r0
 8012916:	2202      	movs	r2, #2
 8012918:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801291c:	4628      	mov	r0, r5
 801291e:	f001 fa27 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012922:	4020      	ands	r0, r4
 8012924:	b2c4      	uxtb	r4, r0
 8012926:	e7c6      	b.n	80128b6 <uxr_deserialize_ObjectVariant+0x2a>
 8012928:	1d31      	adds	r1, r6, #4
 801292a:	4628      	mov	r0, r5
 801292c:	f7f7 fa88 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012930:	4604      	mov	r4, r0
 8012932:	b130      	cbz	r0, 8012942 <uxr_deserialize_ObjectVariant+0xb6>
 8012934:	7933      	ldrb	r3, [r6, #4]
 8012936:	2b02      	cmp	r3, #2
 8012938:	d036      	beq.n	80129a8 <uxr_deserialize_ObjectVariant+0x11c>
 801293a:	2b03      	cmp	r3, #3
 801293c:	d03c      	beq.n	80129b8 <uxr_deserialize_ObjectVariant+0x12c>
 801293e:	2b01      	cmp	r3, #1
 8012940:	d032      	beq.n	80129a8 <uxr_deserialize_ObjectVariant+0x11c>
 8012942:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012946:	4628      	mov	r0, r5
 8012948:	f7f8 f84c 	bl	800a9e4 <ucdr_deserialize_int16_t>
 801294c:	4020      	ands	r0, r4
 801294e:	b2c4      	uxtb	r4, r0
 8012950:	e7b1      	b.n	80128b6 <uxr_deserialize_ObjectVariant+0x2a>
 8012952:	1d31      	adds	r1, r6, #4
 8012954:	4628      	mov	r0, r5
 8012956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801295a:	f7ff bc9b 	b.w	8012294 <uxr_deserialize_CLIENT_Representation>
 801295e:	2204      	movs	r2, #4
 8012960:	18b1      	adds	r1, r6, r2
 8012962:	4628      	mov	r0, r5
 8012964:	f001 fa04 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012968:	2202      	movs	r2, #2
 801296a:	f106 0108 	add.w	r1, r6, #8
 801296e:	4604      	mov	r4, r0
 8012970:	4628      	mov	r0, r5
 8012972:	f001 f9fd 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012976:	2202      	movs	r2, #2
 8012978:	4004      	ands	r4, r0
 801297a:	f106 010a 	add.w	r1, r6, #10
 801297e:	4628      	mov	r0, r5
 8012980:	f001 f9f6 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012984:	b2e4      	uxtb	r4, r4
 8012986:	4603      	mov	r3, r0
 8012988:	f106 010c 	add.w	r1, r6, #12
 801298c:	4628      	mov	r0, r5
 801298e:	401c      	ands	r4, r3
 8012990:	f7f7 fa28 	bl	8009de4 <ucdr_deserialize_bool>
 8012994:	4004      	ands	r4, r0
 8012996:	e78e      	b.n	80128b6 <uxr_deserialize_ObjectVariant+0x2a>
 8012998:	68b1      	ldr	r1, [r6, #8]
 801299a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801299e:	4628      	mov	r0, r5
 80129a0:	f001 fab2 	bl	8013f08 <ucdr_deserialize_string>
 80129a4:	4604      	mov	r4, r0
 80129a6:	e7b6      	b.n	8012916 <uxr_deserialize_ObjectVariant+0x8a>
 80129a8:	68b1      	ldr	r1, [r6, #8]
 80129aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129ae:	4628      	mov	r0, r5
 80129b0:	f001 faaa 	bl	8013f08 <ucdr_deserialize_string>
 80129b4:	4604      	mov	r4, r0
 80129b6:	e7c4      	b.n	8012942 <uxr_deserialize_ObjectVariant+0xb6>
 80129b8:	f106 0308 	add.w	r3, r6, #8
 80129bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129c0:	f106 010c 	add.w	r1, r6, #12
 80129c4:	4628      	mov	r0, r5
 80129c6:	f001 fa75 	bl	8013eb4 <ucdr_deserialize_sequence_uint8_t>
 80129ca:	4604      	mov	r4, r0
 80129cc:	e7b9      	b.n	8012942 <uxr_deserialize_ObjectVariant+0xb6>
 80129ce:	bf00      	nop

080129d0 <uxr_deserialize_BaseObjectRequest>:
 80129d0:	b570      	push	{r4, r5, r6, lr}
 80129d2:	2202      	movs	r2, #2
 80129d4:	4605      	mov	r5, r0
 80129d6:	460e      	mov	r6, r1
 80129d8:	f001 f9ca 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80129dc:	2202      	movs	r2, #2
 80129de:	4604      	mov	r4, r0
 80129e0:	18b1      	adds	r1, r6, r2
 80129e2:	4628      	mov	r0, r5
 80129e4:	f001 f9c4 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80129e8:	4020      	ands	r0, r4
 80129ea:	b2c0      	uxtb	r0, r0
 80129ec:	bd70      	pop	{r4, r5, r6, pc}
 80129ee:	bf00      	nop

080129f0 <uxr_serialize_ActivityInfoVariant>:
 80129f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129f4:	460d      	mov	r5, r1
 80129f6:	7809      	ldrb	r1, [r1, #0]
 80129f8:	4607      	mov	r7, r0
 80129fa:	f7f7 fa0b 	bl	8009e14 <ucdr_serialize_uint8_t>
 80129fe:	4681      	mov	r9, r0
 8012a00:	b138      	cbz	r0, 8012a12 <uxr_serialize_ActivityInfoVariant+0x22>
 8012a02:	782b      	ldrb	r3, [r5, #0]
 8012a04:	2b06      	cmp	r3, #6
 8012a06:	f000 8082 	beq.w	8012b0e <uxr_serialize_ActivityInfoVariant+0x11e>
 8012a0a:	2b0d      	cmp	r3, #13
 8012a0c:	d016      	beq.n	8012a3c <uxr_serialize_ActivityInfoVariant+0x4c>
 8012a0e:	2b05      	cmp	r3, #5
 8012a10:	d002      	beq.n	8012a18 <uxr_serialize_ActivityInfoVariant+0x28>
 8012a12:	4648      	mov	r0, r9
 8012a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a18:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012a1c:	4638      	mov	r0, r7
 8012a1e:	f7f7 ff61 	bl	800a8e4 <ucdr_serialize_int16_t>
 8012a22:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012a26:	4681      	mov	r9, r0
 8012a28:	4638      	mov	r0, r7
 8012a2a:	f7f7 fe5f 	bl	800a6ec <ucdr_serialize_uint64_t>
 8012a2e:	ea09 0000 	and.w	r0, r9, r0
 8012a32:	fa5f f980 	uxtb.w	r9, r0
 8012a36:	4648      	mov	r0, r9
 8012a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a3c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012a40:	4638      	mov	r0, r7
 8012a42:	f7f7 ff4f 	bl	800a8e4 <ucdr_serialize_int16_t>
 8012a46:	68e9      	ldr	r1, [r5, #12]
 8012a48:	4681      	mov	r9, r0
 8012a4a:	4638      	mov	r0, r7
 8012a4c:	f7f7 fbf8 	bl	800a240 <ucdr_serialize_uint32_t>
 8012a50:	68eb      	ldr	r3, [r5, #12]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d0eb      	beq.n	8012a2e <uxr_serialize_ActivityInfoVariant+0x3e>
 8012a56:	b320      	cbz	r0, 8012aa2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012a58:	f105 080c 	add.w	r8, r5, #12
 8012a5c:	2600      	movs	r6, #0
 8012a5e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012a62:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012a66:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	f7f7 f9d2 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d053      	beq.n	8012b1c <uxr_serialize_ActivityInfoVariant+0x12c>
 8012a74:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012a78:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012a7c:	0074      	lsls	r4, r6, #1
 8012a7e:	00c9      	lsls	r1, r1, #3
 8012a80:	2b03      	cmp	r3, #3
 8012a82:	d854      	bhi.n	8012b2e <uxr_serialize_ActivityInfoVariant+0x13e>
 8012a84:	e8df f003 	tbb	[pc, r3]
 8012a88:	02102132 	.word	0x02102132
 8012a8c:	4441      	add	r1, r8
 8012a8e:	4638      	mov	r0, r7
 8012a90:	6889      	ldr	r1, [r1, #8]
 8012a92:	f001 fa29 	bl	8013ee8 <ucdr_serialize_string>
 8012a96:	68ea      	ldr	r2, [r5, #12]
 8012a98:	3601      	adds	r6, #1
 8012a9a:	4296      	cmp	r6, r2
 8012a9c:	d242      	bcs.n	8012b24 <uxr_serialize_ActivityInfoVariant+0x134>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	d1dd      	bne.n	8012a5e <uxr_serialize_ActivityInfoVariant+0x6e>
 8012aa2:	f04f 0900 	mov.w	r9, #0
 8012aa6:	e7b4      	b.n	8012a12 <uxr_serialize_ActivityInfoVariant+0x22>
 8012aa8:	3108      	adds	r1, #8
 8012aaa:	4441      	add	r1, r8
 8012aac:	2210      	movs	r2, #16
 8012aae:	4638      	mov	r0, r7
 8012ab0:	f001 f8fa 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012ab4:	4434      	add	r4, r6
 8012ab6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012aba:	4604      	mov	r4, r0
 8012abc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012abe:	4638      	mov	r0, r7
 8012ac0:	f7f7 fbbe 	bl	800a240 <ucdr_serialize_uint32_t>
 8012ac4:	4020      	ands	r0, r4
 8012ac6:	b2c0      	uxtb	r0, r0
 8012ac8:	e7e5      	b.n	8012a96 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012aca:	3108      	adds	r1, #8
 8012acc:	4441      	add	r1, r8
 8012ace:	2204      	movs	r2, #4
 8012ad0:	4638      	mov	r0, r7
 8012ad2:	f001 f8e9 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012ad6:	4434      	add	r4, r6
 8012ad8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012adc:	4604      	mov	r4, r0
 8012ade:	8b19      	ldrh	r1, [r3, #24]
 8012ae0:	4638      	mov	r0, r7
 8012ae2:	f7f7 f9c3 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012ae6:	4020      	ands	r0, r4
 8012ae8:	b2c0      	uxtb	r0, r0
 8012aea:	e7d4      	b.n	8012a96 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012aec:	3108      	adds	r1, #8
 8012aee:	4441      	add	r1, r8
 8012af0:	2202      	movs	r2, #2
 8012af2:	4638      	mov	r0, r7
 8012af4:	f001 f8d8 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012af8:	4434      	add	r4, r6
 8012afa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012afe:	4604      	mov	r4, r0
 8012b00:	7d99      	ldrb	r1, [r3, #22]
 8012b02:	4638      	mov	r0, r7
 8012b04:	f7f7 f986 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012b08:	4020      	ands	r0, r4
 8012b0a:	b2c0      	uxtb	r0, r0
 8012b0c:	e7c3      	b.n	8012a96 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012b0e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012b12:	4638      	mov	r0, r7
 8012b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b18:	f7f7 bee4 	b.w	800a8e4 <ucdr_serialize_int16_t>
 8012b1c:	68ea      	ldr	r2, [r5, #12]
 8012b1e:	3601      	adds	r6, #1
 8012b20:	42b2      	cmp	r2, r6
 8012b22:	d8be      	bhi.n	8012aa2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012b24:	ea09 0900 	and.w	r9, r9, r0
 8012b28:	fa5f f989 	uxtb.w	r9, r9
 8012b2c:	e771      	b.n	8012a12 <uxr_serialize_ActivityInfoVariant+0x22>
 8012b2e:	68eb      	ldr	r3, [r5, #12]
 8012b30:	3601      	adds	r6, #1
 8012b32:	429e      	cmp	r6, r3
 8012b34:	f10a 0a18 	add.w	sl, sl, #24
 8012b38:	d395      	bcc.n	8012a66 <uxr_serialize_ActivityInfoVariant+0x76>
 8012b3a:	e76a      	b.n	8012a12 <uxr_serialize_ActivityInfoVariant+0x22>

08012b3c <uxr_deserialize_BaseObjectReply>:
 8012b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b40:	2202      	movs	r2, #2
 8012b42:	4606      	mov	r6, r0
 8012b44:	460f      	mov	r7, r1
 8012b46:	f001 f913 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	18b9      	adds	r1, r7, r2
 8012b4e:	4605      	mov	r5, r0
 8012b50:	4630      	mov	r0, r6
 8012b52:	f001 f90d 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012b56:	1d39      	adds	r1, r7, #4
 8012b58:	4680      	mov	r8, r0
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	f7f7 f970 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012b60:	1d79      	adds	r1, r7, #5
 8012b62:	4604      	mov	r4, r0
 8012b64:	4630      	mov	r0, r6
 8012b66:	f7f7 f96b 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012b6a:	ea05 0508 	and.w	r5, r5, r8
 8012b6e:	402c      	ands	r4, r5
 8012b70:	4020      	ands	r0, r4
 8012b72:	b2c0      	uxtb	r0, r0
 8012b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b78 <uxr_serialize_ReadSpecification>:
 8012b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7c:	460e      	mov	r6, r1
 8012b7e:	7809      	ldrb	r1, [r1, #0]
 8012b80:	4607      	mov	r7, r0
 8012b82:	f7f7 f947 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012b86:	7871      	ldrb	r1, [r6, #1]
 8012b88:	4604      	mov	r4, r0
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	f7f7 f942 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012b90:	78b1      	ldrb	r1, [r6, #2]
 8012b92:	4004      	ands	r4, r0
 8012b94:	4638      	mov	r0, r7
 8012b96:	f7f7 f90f 	bl	8009db8 <ucdr_serialize_bool>
 8012b9a:	78b3      	ldrb	r3, [r6, #2]
 8012b9c:	b2e4      	uxtb	r4, r4
 8012b9e:	4004      	ands	r4, r0
 8012ba0:	b94b      	cbnz	r3, 8012bb6 <uxr_serialize_ReadSpecification+0x3e>
 8012ba2:	7a31      	ldrb	r1, [r6, #8]
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	f7f7 f907 	bl	8009db8 <ucdr_serialize_bool>
 8012baa:	7a33      	ldrb	r3, [r6, #8]
 8012bac:	4004      	ands	r4, r0
 8012bae:	b943      	cbnz	r3, 8012bc2 <uxr_serialize_ReadSpecification+0x4a>
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb6:	6871      	ldr	r1, [r6, #4]
 8012bb8:	4638      	mov	r0, r7
 8012bba:	f001 f995 	bl	8013ee8 <ucdr_serialize_string>
 8012bbe:	4004      	ands	r4, r0
 8012bc0:	e7ef      	b.n	8012ba2 <uxr_serialize_ReadSpecification+0x2a>
 8012bc2:	8971      	ldrh	r1, [r6, #10]
 8012bc4:	4638      	mov	r0, r7
 8012bc6:	f7f7 f951 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012bca:	89b1      	ldrh	r1, [r6, #12]
 8012bcc:	4605      	mov	r5, r0
 8012bce:	4638      	mov	r0, r7
 8012bd0:	f7f7 f94c 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012bd4:	89f1      	ldrh	r1, [r6, #14]
 8012bd6:	4005      	ands	r5, r0
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f7f7 f947 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012bde:	8a31      	ldrh	r1, [r6, #16]
 8012be0:	4680      	mov	r8, r0
 8012be2:	4638      	mov	r0, r7
 8012be4:	f7f7 f942 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012be8:	b2ed      	uxtb	r5, r5
 8012bea:	4025      	ands	r5, r4
 8012bec:	ea08 0505 	and.w	r5, r8, r5
 8012bf0:	ea00 0405 	and.w	r4, r0, r5
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfa:	bf00      	nop

08012bfc <uxr_serialize_CREATE_CLIENT_Payload>:
 8012bfc:	f7ff baf2 	b.w	80121e4 <uxr_serialize_CLIENT_Representation>

08012c00 <uxr_serialize_CREATE_Payload>:
 8012c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c02:	2202      	movs	r2, #2
 8012c04:	4607      	mov	r7, r0
 8012c06:	460e      	mov	r6, r1
 8012c08:	f001 f84e 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	18b1      	adds	r1, r6, r2
 8012c10:	4605      	mov	r5, r0
 8012c12:	4638      	mov	r0, r7
 8012c14:	f001 f848 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012c18:	7931      	ldrb	r1, [r6, #4]
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	4638      	mov	r0, r7
 8012c1e:	f7f7 f8f9 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012c22:	b170      	cbz	r0, 8012c42 <uxr_serialize_CREATE_Payload+0x42>
 8012c24:	7933      	ldrb	r3, [r6, #4]
 8012c26:	402c      	ands	r4, r5
 8012c28:	3b01      	subs	r3, #1
 8012c2a:	b2e4      	uxtb	r4, r4
 8012c2c:	2b0d      	cmp	r3, #13
 8012c2e:	d809      	bhi.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012c30:	e8df f003 	tbb	[pc, r3]
 8012c34:	23230a4c 	.word	0x23230a4c
 8012c38:	0a0a0a0a 	.word	0x0a0a0a0a
 8012c3c:	12121208 	.word	0x12121208
 8012c40:	3e45      	.short	0x3e45
 8012c42:	2400      	movs	r4, #0
 8012c44:	4620      	mov	r0, r4
 8012c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c48:	f106 0108 	add.w	r1, r6, #8
 8012c4c:	4638      	mov	r0, r7
 8012c4e:	f7ff fbcf 	bl	80123f0 <uxr_serialize_DATAWRITER_Representation>
 8012c52:	4004      	ands	r4, r0
 8012c54:	4620      	mov	r0, r4
 8012c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c58:	7a31      	ldrb	r1, [r6, #8]
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	f7f7 f8da 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	d0ee      	beq.n	8012c42 <uxr_serialize_CREATE_Payload+0x42>
 8012c64:	7a33      	ldrb	r3, [r6, #8]
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d001      	beq.n	8012c6e <uxr_serialize_CREATE_Payload+0x6e>
 8012c6a:	2b02      	cmp	r3, #2
 8012c6c:	d1ea      	bne.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012c6e:	68f1      	ldr	r1, [r6, #12]
 8012c70:	4638      	mov	r0, r7
 8012c72:	f001 f939 	bl	8013ee8 <ucdr_serialize_string>
 8012c76:	4004      	ands	r4, r0
 8012c78:	e7e4      	b.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012c7a:	7a31      	ldrb	r1, [r6, #8]
 8012c7c:	4638      	mov	r0, r7
 8012c7e:	f7f7 f8c9 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012c82:	4605      	mov	r5, r0
 8012c84:	b158      	cbz	r0, 8012c9e <uxr_serialize_CREATE_Payload+0x9e>
 8012c86:	7a33      	ldrb	r3, [r6, #8]
 8012c88:	2b02      	cmp	r3, #2
 8012c8a:	d034      	beq.n	8012cf6 <uxr_serialize_CREATE_Payload+0xf6>
 8012c8c:	2b03      	cmp	r3, #3
 8012c8e:	d106      	bne.n	8012c9e <uxr_serialize_CREATE_Payload+0x9e>
 8012c90:	68f2      	ldr	r2, [r6, #12]
 8012c92:	f106 0110 	add.w	r1, r6, #16
 8012c96:	4638      	mov	r0, r7
 8012c98:	f001 f8fa 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	2202      	movs	r2, #2
 8012ca0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012ca4:	4638      	mov	r0, r7
 8012ca6:	f000 ffff 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012caa:	4028      	ands	r0, r5
 8012cac:	4004      	ands	r4, r0
 8012cae:	e7c9      	b.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012cb0:	f106 0108 	add.w	r1, r6, #8
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	f7ff fa95 	bl	80121e4 <uxr_serialize_CLIENT_Representation>
 8012cba:	4004      	ands	r4, r0
 8012cbc:	e7c2      	b.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012cbe:	f106 0108 	add.w	r1, r6, #8
 8012cc2:	4638      	mov	r0, r7
 8012cc4:	f7ff fb4a 	bl	801235c <uxr_serialize_AGENT_Representation>
 8012cc8:	4004      	ands	r4, r0
 8012cca:	e7bb      	b.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012ccc:	7a31      	ldrb	r1, [r6, #8]
 8012cce:	4638      	mov	r0, r7
 8012cd0:	f7f7 f8a0 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012cd4:	4605      	mov	r5, r0
 8012cd6:	b130      	cbz	r0, 8012ce6 <uxr_serialize_CREATE_Payload+0xe6>
 8012cd8:	7a33      	ldrb	r3, [r6, #8]
 8012cda:	2b02      	cmp	r3, #2
 8012cdc:	d011      	beq.n	8012d02 <uxr_serialize_CREATE_Payload+0x102>
 8012cde:	2b03      	cmp	r3, #3
 8012ce0:	d015      	beq.n	8012d0e <uxr_serialize_CREATE_Payload+0x10e>
 8012ce2:	2b01      	cmp	r3, #1
 8012ce4:	d00d      	beq.n	8012d02 <uxr_serialize_CREATE_Payload+0x102>
 8012ce6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012cea:	4638      	mov	r0, r7
 8012cec:	f7f7 fdfa 	bl	800a8e4 <ucdr_serialize_int16_t>
 8012cf0:	4028      	ands	r0, r5
 8012cf2:	4004      	ands	r4, r0
 8012cf4:	e7a6      	b.n	8012c44 <uxr_serialize_CREATE_Payload+0x44>
 8012cf6:	68f1      	ldr	r1, [r6, #12]
 8012cf8:	4638      	mov	r0, r7
 8012cfa:	f001 f8f5 	bl	8013ee8 <ucdr_serialize_string>
 8012cfe:	4605      	mov	r5, r0
 8012d00:	e7cd      	b.n	8012c9e <uxr_serialize_CREATE_Payload+0x9e>
 8012d02:	68f1      	ldr	r1, [r6, #12]
 8012d04:	4638      	mov	r0, r7
 8012d06:	f001 f8ef 	bl	8013ee8 <ucdr_serialize_string>
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	e7eb      	b.n	8012ce6 <uxr_serialize_CREATE_Payload+0xe6>
 8012d0e:	68f2      	ldr	r2, [r6, #12]
 8012d10:	f106 0110 	add.w	r1, r6, #16
 8012d14:	4638      	mov	r0, r7
 8012d16:	f001 f8bb 	bl	8013e90 <ucdr_serialize_sequence_uint8_t>
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	e7e3      	b.n	8012ce6 <uxr_serialize_CREATE_Payload+0xe6>
 8012d1e:	bf00      	nop

08012d20 <uxr_deserialize_GET_INFO_Payload>:
 8012d20:	b570      	push	{r4, r5, r6, lr}
 8012d22:	2202      	movs	r2, #2
 8012d24:	4605      	mov	r5, r0
 8012d26:	460e      	mov	r6, r1
 8012d28:	f001 f822 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012d2c:	2202      	movs	r2, #2
 8012d2e:	18b1      	adds	r1, r6, r2
 8012d30:	4604      	mov	r4, r0
 8012d32:	4628      	mov	r0, r5
 8012d34:	f001 f81c 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012d38:	1d31      	adds	r1, r6, #4
 8012d3a:	4004      	ands	r4, r0
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f7f7 fbaf 	bl	800a4a0 <ucdr_deserialize_uint32_t>
 8012d42:	b2e4      	uxtb	r4, r4
 8012d44:	4020      	ands	r0, r4
 8012d46:	bd70      	pop	{r4, r5, r6, pc}

08012d48 <uxr_serialize_DELETE_Payload>:
 8012d48:	b570      	push	{r4, r5, r6, lr}
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	460e      	mov	r6, r1
 8012d50:	f000 ffaa 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012d54:	2202      	movs	r2, #2
 8012d56:	4604      	mov	r4, r0
 8012d58:	18b1      	adds	r1, r6, r2
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	f000 ffa4 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012d60:	4020      	ands	r0, r4
 8012d62:	b2c0      	uxtb	r0, r0
 8012d64:	bd70      	pop	{r4, r5, r6, pc}
 8012d66:	bf00      	nop

08012d68 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6c:	4605      	mov	r5, r0
 8012d6e:	460e      	mov	r6, r1
 8012d70:	f7f7 f866 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012d74:	1c71      	adds	r1, r6, #1
 8012d76:	4604      	mov	r4, r0
 8012d78:	4628      	mov	r0, r5
 8012d7a:	f7f7 f861 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012d7e:	2204      	movs	r2, #4
 8012d80:	18b1      	adds	r1, r6, r2
 8012d82:	4680      	mov	r8, r0
 8012d84:	4628      	mov	r0, r5
 8012d86:	f000 fff3 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012d8a:	f106 0108 	add.w	r1, r6, #8
 8012d8e:	4607      	mov	r7, r0
 8012d90:	2202      	movs	r2, #2
 8012d92:	4628      	mov	r0, r5
 8012d94:	f000 ffec 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012d98:	ea04 0308 	and.w	r3, r4, r8
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	ea03 0407 	and.w	r4, r3, r7
 8012da2:	2202      	movs	r2, #2
 8012da4:	4607      	mov	r7, r0
 8012da6:	f106 010a 	add.w	r1, r6, #10
 8012daa:	4628      	mov	r0, r5
 8012dac:	f000 ffe0 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012db0:	f106 010c 	add.w	r1, r6, #12
 8012db4:	4603      	mov	r3, r0
 8012db6:	4628      	mov	r0, r5
 8012db8:	461d      	mov	r5, r3
 8012dba:	f7f7 f813 	bl	8009de4 <ucdr_deserialize_bool>
 8012dbe:	403c      	ands	r4, r7
 8012dc0:	4025      	ands	r5, r4
 8012dc2:	4028      	ands	r0, r5
 8012dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dc8 <uxr_deserialize_STATUS_Payload>:
 8012dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dcc:	2202      	movs	r2, #2
 8012dce:	4606      	mov	r6, r0
 8012dd0:	460f      	mov	r7, r1
 8012dd2:	f000 ffcd 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012dd6:	2202      	movs	r2, #2
 8012dd8:	18b9      	adds	r1, r7, r2
 8012dda:	4605      	mov	r5, r0
 8012ddc:	4630      	mov	r0, r6
 8012dde:	f000 ffc7 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012de2:	1d39      	adds	r1, r7, #4
 8012de4:	4680      	mov	r8, r0
 8012de6:	4630      	mov	r0, r6
 8012de8:	f7f7 f82a 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012dec:	1d79      	adds	r1, r7, #5
 8012dee:	4604      	mov	r4, r0
 8012df0:	4630      	mov	r0, r6
 8012df2:	f7f7 f825 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012df6:	ea05 0508 	and.w	r5, r5, r8
 8012dfa:	402c      	ands	r4, r5
 8012dfc:	4020      	ands	r0, r4
 8012dfe:	b2c0      	uxtb	r0, r0
 8012e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e04 <uxr_serialize_INFO_Payload>:
 8012e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e08:	2202      	movs	r2, #2
 8012e0a:	460c      	mov	r4, r1
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	f000 ff4b 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012e12:	2202      	movs	r2, #2
 8012e14:	18a1      	adds	r1, r4, r2
 8012e16:	4680      	mov	r8, r0
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f000 ff45 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012e1e:	7921      	ldrb	r1, [r4, #4]
 8012e20:	4607      	mov	r7, r0
 8012e22:	4628      	mov	r0, r5
 8012e24:	f7f6 fff6 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012e28:	7961      	ldrb	r1, [r4, #5]
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	f7f6 fff1 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012e32:	ea08 0807 	and.w	r8, r8, r7
 8012e36:	ea06 0608 	and.w	r6, r6, r8
 8012e3a:	4006      	ands	r6, r0
 8012e3c:	7a21      	ldrb	r1, [r4, #8]
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f7f6 ffba 	bl	8009db8 <ucdr_serialize_bool>
 8012e44:	7a23      	ldrb	r3, [r4, #8]
 8012e46:	b2f7      	uxtb	r7, r6
 8012e48:	4606      	mov	r6, r0
 8012e4a:	b96b      	cbnz	r3, 8012e68 <uxr_serialize_INFO_Payload+0x64>
 8012e4c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012e50:	4628      	mov	r0, r5
 8012e52:	f7f6 ffb1 	bl	8009db8 <ucdr_serialize_bool>
 8012e56:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012e5a:	4030      	ands	r0, r6
 8012e5c:	b2c6      	uxtb	r6, r0
 8012e5e:	b983      	cbnz	r3, 8012e82 <uxr_serialize_INFO_Payload+0x7e>
 8012e60:	ea06 0007 	and.w	r0, r6, r7
 8012e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e68:	7b21      	ldrb	r1, [r4, #12]
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	f7f6 ffd2 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012e70:	b188      	cbz	r0, 8012e96 <uxr_serialize_INFO_Payload+0x92>
 8012e72:	f104 010c 	add.w	r1, r4, #12
 8012e76:	4628      	mov	r0, r5
 8012e78:	f7ff fae2 	bl	8012440 <uxr_serialize_ObjectVariant.part.0>
 8012e7c:	4030      	ands	r0, r6
 8012e7e:	b2c6      	uxtb	r6, r0
 8012e80:	e7e4      	b.n	8012e4c <uxr_serialize_INFO_Payload+0x48>
 8012e82:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012e86:	4628      	mov	r0, r5
 8012e88:	f7ff fdb2 	bl	80129f0 <uxr_serialize_ActivityInfoVariant>
 8012e8c:	4006      	ands	r6, r0
 8012e8e:	ea06 0007 	and.w	r0, r6, r7
 8012e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e96:	4606      	mov	r6, r0
 8012e98:	e7d8      	b.n	8012e4c <uxr_serialize_INFO_Payload+0x48>
 8012e9a:	bf00      	nop

08012e9c <uxr_serialize_READ_DATA_Payload>:
 8012e9c:	b570      	push	{r4, r5, r6, lr}
 8012e9e:	2202      	movs	r2, #2
 8012ea0:	4605      	mov	r5, r0
 8012ea2:	460e      	mov	r6, r1
 8012ea4:	f000 ff00 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012ea8:	2202      	movs	r2, #2
 8012eaa:	18b1      	adds	r1, r6, r2
 8012eac:	4604      	mov	r4, r0
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f000 fefa 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012eb4:	1d31      	adds	r1, r6, #4
 8012eb6:	4004      	ands	r4, r0
 8012eb8:	4628      	mov	r0, r5
 8012eba:	f7ff fe5d 	bl	8012b78 <uxr_serialize_ReadSpecification>
 8012ebe:	b2e4      	uxtb	r4, r4
 8012ec0:	4020      	ands	r0, r4
 8012ec2:	bd70      	pop	{r4, r5, r6, pc}

08012ec4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012ec4:	b570      	push	{r4, r5, r6, lr}
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	4605      	mov	r5, r0
 8012eca:	460e      	mov	r6, r1
 8012ecc:	f000 feec 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012ed0:	2202      	movs	r2, #2
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	18b1      	adds	r1, r6, r2
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f000 fee6 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012edc:	4020      	ands	r0, r4
 8012ede:	b2c0      	uxtb	r0, r0
 8012ee0:	bd70      	pop	{r4, r5, r6, pc}
 8012ee2:	bf00      	nop

08012ee4 <uxr_serialize_ACKNACK_Payload>:
 8012ee4:	b570      	push	{r4, r5, r6, lr}
 8012ee6:	460c      	mov	r4, r1
 8012ee8:	460e      	mov	r6, r1
 8012eea:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012eee:	4605      	mov	r5, r0
 8012ef0:	f7f6 ffbc 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012ef4:	2202      	movs	r2, #2
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	4604      	mov	r4, r0
 8012efa:	4628      	mov	r0, r5
 8012efc:	f000 fed4 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012f00:	7931      	ldrb	r1, [r6, #4]
 8012f02:	4004      	ands	r4, r0
 8012f04:	4628      	mov	r0, r5
 8012f06:	f7f6 ff85 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012f0a:	b2e4      	uxtb	r4, r4
 8012f0c:	4020      	ands	r0, r4
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}

08012f10 <uxr_deserialize_ACKNACK_Payload>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	4605      	mov	r5, r0
 8012f14:	460e      	mov	r6, r1
 8012f16:	f7f7 f8a9 	bl	800a06c <ucdr_deserialize_uint16_t>
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	18b1      	adds	r1, r6, r2
 8012f1e:	4604      	mov	r4, r0
 8012f20:	4628      	mov	r0, r5
 8012f22:	f000 ff25 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8012f26:	1d31      	adds	r1, r6, #4
 8012f28:	4004      	ands	r4, r0
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f7f6 ff88 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012f30:	b2e4      	uxtb	r4, r4
 8012f32:	4020      	ands	r0, r4
 8012f34:	bd70      	pop	{r4, r5, r6, pc}
 8012f36:	bf00      	nop

08012f38 <uxr_serialize_HEARTBEAT_Payload>:
 8012f38:	b570      	push	{r4, r5, r6, lr}
 8012f3a:	460d      	mov	r5, r1
 8012f3c:	8809      	ldrh	r1, [r1, #0]
 8012f3e:	4606      	mov	r6, r0
 8012f40:	f7f6 ff94 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012f44:	8869      	ldrh	r1, [r5, #2]
 8012f46:	4604      	mov	r4, r0
 8012f48:	4630      	mov	r0, r6
 8012f4a:	f7f6 ff8f 	bl	8009e6c <ucdr_serialize_uint16_t>
 8012f4e:	7929      	ldrb	r1, [r5, #4]
 8012f50:	4004      	ands	r4, r0
 8012f52:	4630      	mov	r0, r6
 8012f54:	f7f6 ff5e 	bl	8009e14 <ucdr_serialize_uint8_t>
 8012f58:	b2e4      	uxtb	r4, r4
 8012f5a:	4020      	ands	r0, r4
 8012f5c:	bd70      	pop	{r4, r5, r6, pc}
 8012f5e:	bf00      	nop

08012f60 <uxr_deserialize_HEARTBEAT_Payload>:
 8012f60:	b570      	push	{r4, r5, r6, lr}
 8012f62:	4605      	mov	r5, r0
 8012f64:	460e      	mov	r6, r1
 8012f66:	f7f7 f881 	bl	800a06c <ucdr_deserialize_uint16_t>
 8012f6a:	1cb1      	adds	r1, r6, #2
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7f7 f87c 	bl	800a06c <ucdr_deserialize_uint16_t>
 8012f74:	1d31      	adds	r1, r6, #4
 8012f76:	4004      	ands	r4, r0
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f7f6 ff61 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8012f7e:	b2e4      	uxtb	r4, r4
 8012f80:	4020      	ands	r0, r4
 8012f82:	bd70      	pop	{r4, r5, r6, pc}

08012f84 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f88:	4605      	mov	r5, r0
 8012f8a:	460e      	mov	r6, r1
 8012f8c:	f7f7 fe36 	bl	800abfc <ucdr_deserialize_int32_t>
 8012f90:	1d31      	adds	r1, r6, #4
 8012f92:	4607      	mov	r7, r0
 8012f94:	4628      	mov	r0, r5
 8012f96:	f7f7 fa83 	bl	800a4a0 <ucdr_deserialize_uint32_t>
 8012f9a:	f106 0108 	add.w	r1, r6, #8
 8012f9e:	4680      	mov	r8, r0
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	f7f7 fe2b 	bl	800abfc <ucdr_deserialize_int32_t>
 8012fa6:	f106 010c 	add.w	r1, r6, #12
 8012faa:	4604      	mov	r4, r0
 8012fac:	4628      	mov	r0, r5
 8012fae:	f7f7 fa77 	bl	800a4a0 <ucdr_deserialize_uint32_t>
 8012fb2:	ea07 0708 	and.w	r7, r7, r8
 8012fb6:	403c      	ands	r4, r7
 8012fb8:	f106 0110 	add.w	r1, r6, #16
 8012fbc:	4004      	ands	r4, r0
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7f7 fe1c 	bl	800abfc <ucdr_deserialize_int32_t>
 8012fc4:	f106 0114 	add.w	r1, r6, #20
 8012fc8:	4607      	mov	r7, r0
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f7f7 fa68 	bl	800a4a0 <ucdr_deserialize_uint32_t>
 8012fd0:	b2e4      	uxtb	r4, r4
 8012fd2:	403c      	ands	r4, r7
 8012fd4:	4020      	ands	r0, r4
 8012fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fda:	bf00      	nop

08012fdc <uxr_serialize_SampleIdentity>:
 8012fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe0:	220c      	movs	r2, #12
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	460d      	mov	r5, r1
 8012fe6:	f000 fe5f 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012fea:	2203      	movs	r2, #3
 8012fec:	f105 010c 	add.w	r1, r5, #12
 8012ff0:	4607      	mov	r7, r0
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f000 fe58 	bl	8013ca8 <ucdr_serialize_array_uint8_t>
 8012ff8:	7be9      	ldrb	r1, [r5, #15]
 8012ffa:	4680      	mov	r8, r0
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	f7f6 ff09 	bl	8009e14 <ucdr_serialize_uint8_t>
 8013002:	6929      	ldr	r1, [r5, #16]
 8013004:	4606      	mov	r6, r0
 8013006:	4620      	mov	r0, r4
 8013008:	f7f7 fd60 	bl	800aacc <ucdr_serialize_int32_t>
 801300c:	6969      	ldr	r1, [r5, #20]
 801300e:	4603      	mov	r3, r0
 8013010:	4620      	mov	r0, r4
 8013012:	ea07 0708 	and.w	r7, r7, r8
 8013016:	461c      	mov	r4, r3
 8013018:	f7f7 f912 	bl	800a240 <ucdr_serialize_uint32_t>
 801301c:	403e      	ands	r6, r7
 801301e:	4034      	ands	r4, r6
 8013020:	4020      	ands	r0, r4
 8013022:	b2c0      	uxtb	r0, r0
 8013024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013028 <uxr_deserialize_SampleIdentity>:
 8013028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302c:	220c      	movs	r2, #12
 801302e:	4604      	mov	r4, r0
 8013030:	460d      	mov	r5, r1
 8013032:	f000 fe9d 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8013036:	2203      	movs	r2, #3
 8013038:	f105 010c 	add.w	r1, r5, #12
 801303c:	4607      	mov	r7, r0
 801303e:	4620      	mov	r0, r4
 8013040:	f000 fe96 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8013044:	f105 010f 	add.w	r1, r5, #15
 8013048:	4680      	mov	r8, r0
 801304a:	4620      	mov	r0, r4
 801304c:	f7f6 fef8 	bl	8009e40 <ucdr_deserialize_uint8_t>
 8013050:	f105 0110 	add.w	r1, r5, #16
 8013054:	4606      	mov	r6, r0
 8013056:	4620      	mov	r0, r4
 8013058:	f7f7 fdd0 	bl	800abfc <ucdr_deserialize_int32_t>
 801305c:	f105 0114 	add.w	r1, r5, #20
 8013060:	4603      	mov	r3, r0
 8013062:	4620      	mov	r0, r4
 8013064:	ea07 0708 	and.w	r7, r7, r8
 8013068:	461c      	mov	r4, r3
 801306a:	f7f7 fa19 	bl	800a4a0 <ucdr_deserialize_uint32_t>
 801306e:	403e      	ands	r6, r7
 8013070:	4034      	ands	r4, r6
 8013072:	4020      	ands	r0, r4
 8013074:	b2c0      	uxtb	r0, r0
 8013076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307a:	bf00      	nop

0801307c <rcl_convert_rmw_ret_to_rcl_ret>:
 801307c:	280b      	cmp	r0, #11
 801307e:	dc0d      	bgt.n	801309c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013080:	2800      	cmp	r0, #0
 8013082:	db09      	blt.n	8013098 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013084:	280b      	cmp	r0, #11
 8013086:	d807      	bhi.n	8013098 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013088:	e8df f000 	tbb	[pc, r0]
 801308c:	07060607 	.word	0x07060607
 8013090:	06060606 	.word	0x06060606
 8013094:	07070606 	.word	0x07070606
 8013098:	2001      	movs	r0, #1
 801309a:	4770      	bx	lr
 801309c:	28cb      	cmp	r0, #203	@ 0xcb
 801309e:	bf18      	it	ne
 80130a0:	2001      	movne	r0, #1
 80130a2:	4770      	bx	lr

080130a4 <rcl_get_default_domain_id>:
 80130a4:	b530      	push	{r4, r5, lr}
 80130a6:	b083      	sub	sp, #12
 80130a8:	2300      	movs	r3, #0
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	b1d0      	cbz	r0, 80130e4 <rcl_get_default_domain_id+0x40>
 80130ae:	4604      	mov	r4, r0
 80130b0:	4669      	mov	r1, sp
 80130b2:	4815      	ldr	r0, [pc, #84]	@ (8013108 <rcl_get_default_domain_id+0x64>)
 80130b4:	f7fa fcc0 	bl	800da38 <rcutils_get_env>
 80130b8:	4602      	mov	r2, r0
 80130ba:	b110      	cbz	r0, 80130c2 <rcl_get_default_domain_id+0x1e>
 80130bc:	2001      	movs	r0, #1
 80130be:	b003      	add	sp, #12
 80130c0:	bd30      	pop	{r4, r5, pc}
 80130c2:	9b00      	ldr	r3, [sp, #0]
 80130c4:	b18b      	cbz	r3, 80130ea <rcl_get_default_domain_id+0x46>
 80130c6:	7818      	ldrb	r0, [r3, #0]
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d0f8      	beq.n	80130be <rcl_get_default_domain_id+0x1a>
 80130cc:	a901      	add	r1, sp, #4
 80130ce:	4618      	mov	r0, r3
 80130d0:	9201      	str	r2, [sp, #4]
 80130d2:	f001 fe9b 	bl	8014e0c <strtoul>
 80130d6:	4605      	mov	r5, r0
 80130d8:	b150      	cbz	r0, 80130f0 <rcl_get_default_domain_id+0x4c>
 80130da:	1c43      	adds	r3, r0, #1
 80130dc:	d00d      	beq.n	80130fa <rcl_get_default_domain_id+0x56>
 80130de:	6025      	str	r5, [r4, #0]
 80130e0:	2000      	movs	r0, #0
 80130e2:	e7ec      	b.n	80130be <rcl_get_default_domain_id+0x1a>
 80130e4:	200b      	movs	r0, #11
 80130e6:	b003      	add	sp, #12
 80130e8:	bd30      	pop	{r4, r5, pc}
 80130ea:	4618      	mov	r0, r3
 80130ec:	b003      	add	sp, #12
 80130ee:	bd30      	pop	{r4, r5, pc}
 80130f0:	9b01      	ldr	r3, [sp, #4]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d0f2      	beq.n	80130de <rcl_get_default_domain_id+0x3a>
 80130f8:	e7e0      	b.n	80130bc <rcl_get_default_domain_id+0x18>
 80130fa:	f002 f8c1 	bl	8015280 <__errno>
 80130fe:	6803      	ldr	r3, [r0, #0]
 8013100:	2b22      	cmp	r3, #34	@ 0x22
 8013102:	d1ec      	bne.n	80130de <rcl_get_default_domain_id+0x3a>
 8013104:	e7da      	b.n	80130bc <rcl_get_default_domain_id+0x18>
 8013106:	bf00      	nop
 8013108:	08016b14 	.word	0x08016b14

0801310c <rcl_expand_topic_name>:
 801310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	b08b      	sub	sp, #44	@ 0x2c
 8013112:	9306      	str	r3, [sp, #24]
 8013114:	2800      	cmp	r0, #0
 8013116:	f000 80ad 	beq.w	8013274 <rcl_expand_topic_name+0x168>
 801311a:	460e      	mov	r6, r1
 801311c:	2900      	cmp	r1, #0
 801311e:	f000 80a9 	beq.w	8013274 <rcl_expand_topic_name+0x168>
 8013122:	4617      	mov	r7, r2
 8013124:	2a00      	cmp	r2, #0
 8013126:	f000 80a5 	beq.w	8013274 <rcl_expand_topic_name+0x168>
 801312a:	2b00      	cmp	r3, #0
 801312c:	f000 80a2 	beq.w	8013274 <rcl_expand_topic_name+0x168>
 8013130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013132:	2b00      	cmp	r3, #0
 8013134:	f000 809e 	beq.w	8013274 <rcl_expand_topic_name+0x168>
 8013138:	2200      	movs	r2, #0
 801313a:	a909      	add	r1, sp, #36	@ 0x24
 801313c:	4680      	mov	r8, r0
 801313e:	f000 fa1d 	bl	801357c <rcl_validate_topic_name>
 8013142:	4604      	mov	r4, r0
 8013144:	2800      	cmp	r0, #0
 8013146:	f040 8096 	bne.w	8013276 <rcl_expand_topic_name+0x16a>
 801314a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801314c:	2b00      	cmp	r3, #0
 801314e:	f040 809a 	bne.w	8013286 <rcl_expand_topic_name+0x17a>
 8013152:	4602      	mov	r2, r0
 8013154:	a909      	add	r1, sp, #36	@ 0x24
 8013156:	4630      	mov	r0, r6
 8013158:	f7fb f838 	bl	800e1cc <rmw_validate_node_name>
 801315c:	2800      	cmp	r0, #0
 801315e:	f040 808e 	bne.w	801327e <rcl_expand_topic_name+0x172>
 8013162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013164:	2a00      	cmp	r2, #0
 8013166:	f040 8093 	bne.w	8013290 <rcl_expand_topic_name+0x184>
 801316a:	a909      	add	r1, sp, #36	@ 0x24
 801316c:	4638      	mov	r0, r7
 801316e:	f7fb f80f 	bl	800e190 <rmw_validate_namespace>
 8013172:	2800      	cmp	r0, #0
 8013174:	f040 8083 	bne.w	801327e <rcl_expand_topic_name+0x172>
 8013178:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801317a:	2c00      	cmp	r4, #0
 801317c:	f040 80ed 	bne.w	801335a <rcl_expand_topic_name+0x24e>
 8013180:	217b      	movs	r1, #123	@ 0x7b
 8013182:	4640      	mov	r0, r8
 8013184:	f001 fff0 	bl	8015168 <strchr>
 8013188:	f898 3000 	ldrb.w	r3, [r8]
 801318c:	2b2f      	cmp	r3, #47	@ 0x2f
 801318e:	4605      	mov	r5, r0
 8013190:	f000 809e 	beq.w	80132d0 <rcl_expand_topic_name+0x1c4>
 8013194:	2b7e      	cmp	r3, #126	@ 0x7e
 8013196:	f040 80a2 	bne.w	80132de <rcl_expand_topic_name+0x1d2>
 801319a:	4638      	mov	r0, r7
 801319c:	f7ed f82a 	bl	80001f4 <strlen>
 80131a0:	4a82      	ldr	r2, [pc, #520]	@ (80133ac <rcl_expand_topic_name+0x2a0>)
 80131a2:	4b83      	ldr	r3, [pc, #524]	@ (80133b0 <rcl_expand_topic_name+0x2a4>)
 80131a4:	2801      	cmp	r0, #1
 80131a6:	bf18      	it	ne
 80131a8:	4613      	movne	r3, r2
 80131aa:	9302      	str	r3, [sp, #8]
 80131ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80131ae:	9300      	str	r3, [sp, #0]
 80131b0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80131b4:	f108 0301 	add.w	r3, r8, #1
 80131b8:	9305      	str	r3, [sp, #20]
 80131ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131be:	9301      	str	r3, [sp, #4]
 80131c0:	ab14      	add	r3, sp, #80	@ 0x50
 80131c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80131c4:	f7fa fc50 	bl	800da68 <rcutils_format_string_limit>
 80131c8:	4682      	mov	sl, r0
 80131ca:	2800      	cmp	r0, #0
 80131cc:	f000 80c7 	beq.w	801335e <rcl_expand_topic_name+0x252>
 80131d0:	2d00      	cmp	r5, #0
 80131d2:	f000 80a2 	beq.w	801331a <rcl_expand_topic_name+0x20e>
 80131d6:	217b      	movs	r1, #123	@ 0x7b
 80131d8:	f001 ffc6 	bl	8015168 <strchr>
 80131dc:	46d1      	mov	r9, sl
 80131de:	4605      	mov	r5, r0
 80131e0:	9407      	str	r4, [sp, #28]
 80131e2:	46d3      	mov	fp, sl
 80131e4:	464c      	mov	r4, r9
 80131e6:	2d00      	cmp	r5, #0
 80131e8:	f000 80be 	beq.w	8013368 <rcl_expand_topic_name+0x25c>
 80131ec:	217d      	movs	r1, #125	@ 0x7d
 80131ee:	4620      	mov	r0, r4
 80131f0:	f001 ffba 	bl	8015168 <strchr>
 80131f4:	eba0 0905 	sub.w	r9, r0, r5
 80131f8:	f109 0a01 	add.w	sl, r9, #1
 80131fc:	486d      	ldr	r0, [pc, #436]	@ (80133b4 <rcl_expand_topic_name+0x2a8>)
 80131fe:	4652      	mov	r2, sl
 8013200:	4629      	mov	r1, r5
 8013202:	f001 ffbe 	bl	8015182 <strncmp>
 8013206:	2800      	cmp	r0, #0
 8013208:	d067      	beq.n	80132da <rcl_expand_topic_name+0x1ce>
 801320a:	486b      	ldr	r0, [pc, #428]	@ (80133b8 <rcl_expand_topic_name+0x2ac>)
 801320c:	4652      	mov	r2, sl
 801320e:	4629      	mov	r1, r5
 8013210:	f001 ffb7 	bl	8015182 <strncmp>
 8013214:	b130      	cbz	r0, 8013224 <rcl_expand_topic_name+0x118>
 8013216:	4869      	ldr	r0, [pc, #420]	@ (80133bc <rcl_expand_topic_name+0x2b0>)
 8013218:	4652      	mov	r2, sl
 801321a:	4629      	mov	r1, r5
 801321c:	f001 ffb1 	bl	8015182 <strncmp>
 8013220:	2800      	cmp	r0, #0
 8013222:	d137      	bne.n	8013294 <rcl_expand_topic_name+0x188>
 8013224:	46b9      	mov	r9, r7
 8013226:	ab16      	add	r3, sp, #88	@ 0x58
 8013228:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801322c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013230:	ab14      	add	r3, sp, #80	@ 0x50
 8013232:	4628      	mov	r0, r5
 8013234:	cb0c      	ldmia	r3, {r2, r3}
 8013236:	4651      	mov	r1, sl
 8013238:	f7fa fd52 	bl	800dce0 <rcutils_strndup>
 801323c:	4605      	mov	r5, r0
 801323e:	2800      	cmp	r0, #0
 8013240:	f000 809c 	beq.w	801337c <rcl_expand_topic_name+0x270>
 8013244:	464a      	mov	r2, r9
 8013246:	4620      	mov	r0, r4
 8013248:	ab14      	add	r3, sp, #80	@ 0x50
 801324a:	4629      	mov	r1, r5
 801324c:	f7fa fc46 	bl	800dadc <rcutils_repl_str>
 8013250:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013252:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013254:	4604      	mov	r4, r0
 8013256:	4628      	mov	r0, r5
 8013258:	4798      	blx	r3
 801325a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801325c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801325e:	4658      	mov	r0, fp
 8013260:	4798      	blx	r3
 8013262:	2c00      	cmp	r4, #0
 8013264:	d07b      	beq.n	801335e <rcl_expand_topic_name+0x252>
 8013266:	217b      	movs	r1, #123	@ 0x7b
 8013268:	4620      	mov	r0, r4
 801326a:	f001 ff7d 	bl	8015168 <strchr>
 801326e:	46a3      	mov	fp, r4
 8013270:	4605      	mov	r5, r0
 8013272:	e7b8      	b.n	80131e6 <rcl_expand_topic_name+0xda>
 8013274:	240b      	movs	r4, #11
 8013276:	4620      	mov	r0, r4
 8013278:	b00b      	add	sp, #44	@ 0x2c
 801327a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801327e:	f7ff fefd 	bl	801307c <rcl_convert_rmw_ret_to_rcl_ret>
 8013282:	4604      	mov	r4, r0
 8013284:	e7f7      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 8013286:	2467      	movs	r4, #103	@ 0x67
 8013288:	4620      	mov	r0, r4
 801328a:	b00b      	add	sp, #44	@ 0x2c
 801328c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013290:	24c9      	movs	r4, #201	@ 0xc9
 8013292:	e7f0      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 8013294:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8013298:	9806      	ldr	r0, [sp, #24]
 801329a:	1c69      	adds	r1, r5, #1
 801329c:	f7fa fe3a 	bl	800df14 <rcutils_string_map_getn>
 80132a0:	4681      	mov	r9, r0
 80132a2:	2800      	cmp	r0, #0
 80132a4:	d1bf      	bne.n	8013226 <rcl_expand_topic_name+0x11a>
 80132a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132a8:	aa16      	add	r2, sp, #88	@ 0x58
 80132aa:	6018      	str	r0, [r3, #0]
 80132ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80132ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80132b2:	ab14      	add	r3, sp, #80	@ 0x50
 80132b4:	cb0c      	ldmia	r3, {r2, r3}
 80132b6:	4651      	mov	r1, sl
 80132b8:	4628      	mov	r0, r5
 80132ba:	f7fa fd11 	bl	800dce0 <rcutils_strndup>
 80132be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80132c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80132c2:	4798      	blx	r3
 80132c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80132c6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80132c8:	4658      	mov	r0, fp
 80132ca:	2469      	movs	r4, #105	@ 0x69
 80132cc:	4798      	blx	r3
 80132ce:	e7d2      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d05b      	beq.n	801338c <rcl_expand_topic_name+0x280>
 80132d4:	46c1      	mov	r9, r8
 80132d6:	46a2      	mov	sl, r4
 80132d8:	e782      	b.n	80131e0 <rcl_expand_topic_name+0xd4>
 80132da:	46b1      	mov	r9, r6
 80132dc:	e7a3      	b.n	8013226 <rcl_expand_topic_name+0x11a>
 80132de:	2800      	cmp	r0, #0
 80132e0:	d1f8      	bne.n	80132d4 <rcl_expand_topic_name+0x1c8>
 80132e2:	4638      	mov	r0, r7
 80132e4:	f7ec ff86 	bl	80001f4 <strlen>
 80132e8:	4a35      	ldr	r2, [pc, #212]	@ (80133c0 <rcl_expand_topic_name+0x2b4>)
 80132ea:	4b36      	ldr	r3, [pc, #216]	@ (80133c4 <rcl_expand_topic_name+0x2b8>)
 80132ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80132f0:	2801      	cmp	r0, #1
 80132f2:	bf18      	it	ne
 80132f4:	4613      	movne	r3, r2
 80132f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80132fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80132fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013300:	9703      	str	r7, [sp, #12]
 8013302:	9200      	str	r2, [sp, #0]
 8013304:	ab14      	add	r3, sp, #80	@ 0x50
 8013306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013308:	f7fa fbae 	bl	800da68 <rcutils_format_string_limit>
 801330c:	4682      	mov	sl, r0
 801330e:	4653      	mov	r3, sl
 8013310:	b32b      	cbz	r3, 801335e <rcl_expand_topic_name+0x252>
 8013312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013314:	f8c3 a000 	str.w	sl, [r3]
 8013318:	e7ad      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 801331a:	f89a 3000 	ldrb.w	r3, [sl]
 801331e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013320:	d0f7      	beq.n	8013312 <rcl_expand_topic_name+0x206>
 8013322:	4638      	mov	r0, r7
 8013324:	f7ec ff66 	bl	80001f4 <strlen>
 8013328:	4a25      	ldr	r2, [pc, #148]	@ (80133c0 <rcl_expand_topic_name+0x2b4>)
 801332a:	4b26      	ldr	r3, [pc, #152]	@ (80133c4 <rcl_expand_topic_name+0x2b8>)
 801332c:	f8cd a010 	str.w	sl, [sp, #16]
 8013330:	2801      	cmp	r0, #1
 8013332:	bf18      	it	ne
 8013334:	4613      	movne	r3, r2
 8013336:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801333a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801333e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013340:	9703      	str	r7, [sp, #12]
 8013342:	9200      	str	r2, [sp, #0]
 8013344:	ab14      	add	r3, sp, #80	@ 0x50
 8013346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013348:	f7fa fb8e 	bl	800da68 <rcutils_format_string_limit>
 801334c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801334e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013350:	4605      	mov	r5, r0
 8013352:	4650      	mov	r0, sl
 8013354:	4798      	blx	r3
 8013356:	46aa      	mov	sl, r5
 8013358:	e7d9      	b.n	801330e <rcl_expand_topic_name+0x202>
 801335a:	24ca      	movs	r4, #202	@ 0xca
 801335c:	e78b      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 801335e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013360:	2300      	movs	r3, #0
 8013362:	6013      	str	r3, [r2, #0]
 8013364:	240a      	movs	r4, #10
 8013366:	e786      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 8013368:	465b      	mov	r3, fp
 801336a:	9c07      	ldr	r4, [sp, #28]
 801336c:	46da      	mov	sl, fp
 801336e:	2b00      	cmp	r3, #0
 8013370:	d1d3      	bne.n	801331a <rcl_expand_topic_name+0x20e>
 8013372:	f898 3000 	ldrb.w	r3, [r8]
 8013376:	2b2f      	cmp	r3, #47	@ 0x2f
 8013378:	d0cb      	beq.n	8013312 <rcl_expand_topic_name+0x206>
 801337a:	e7b2      	b.n	80132e2 <rcl_expand_topic_name+0x1d6>
 801337c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8013380:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013382:	6015      	str	r5, [r2, #0]
 8013384:	4658      	mov	r0, fp
 8013386:	4798      	blx	r3
 8013388:	240a      	movs	r4, #10
 801338a:	e774      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 801338c:	ab17      	add	r3, sp, #92	@ 0x5c
 801338e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013392:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013396:	ab14      	add	r3, sp, #80	@ 0x50
 8013398:	cb0e      	ldmia	r3, {r1, r2, r3}
 801339a:	4640      	mov	r0, r8
 801339c:	f7fa fc7e 	bl	800dc9c <rcutils_strdup>
 80133a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80133a2:	2800      	cmp	r0, #0
 80133a4:	6018      	str	r0, [r3, #0]
 80133a6:	bf08      	it	eq
 80133a8:	240a      	moveq	r4, #10
 80133aa:	e764      	b.n	8013276 <rcl_expand_topic_name+0x16a>
 80133ac:	08016b24 	.word	0x08016b24
 80133b0:	080168e8 	.word	0x080168e8
 80133b4:	08016b2c 	.word	0x08016b2c
 80133b8:	08016b34 	.word	0x08016b34
 80133bc:	08016b3c 	.word	0x08016b3c
 80133c0:	08016440 	.word	0x08016440
 80133c4:	08016438 	.word	0x08016438

080133c8 <rcl_get_default_topic_name_substitutions>:
 80133c8:	2800      	cmp	r0, #0
 80133ca:	bf0c      	ite	eq
 80133cc:	200b      	moveq	r0, #11
 80133ce:	2000      	movne	r0, #0
 80133d0:	4770      	bx	lr
 80133d2:	bf00      	nop

080133d4 <rcl_get_zero_initialized_guard_condition>:
 80133d4:	4a03      	ldr	r2, [pc, #12]	@ (80133e4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80133d6:	4603      	mov	r3, r0
 80133d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80133e0:	4618      	mov	r0, r3
 80133e2:	4770      	bx	lr
 80133e4:	08016b48 	.word	0x08016b48

080133e8 <rcl_guard_condition_init_from_rmw>:
 80133e8:	b082      	sub	sp, #8
 80133ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80133f4:	4604      	mov	r4, r0
 80133f6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80133fa:	460e      	mov	r6, r1
 80133fc:	4617      	mov	r7, r2
 80133fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013402:	f10d 0e04 	add.w	lr, sp, #4
 8013406:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801340a:	f8dc 3000 	ldr.w	r3, [ip]
 801340e:	f8ce 3000 	str.w	r3, [lr]
 8013412:	a801      	add	r0, sp, #4
 8013414:	f7f6 fade 	bl	80099d4 <rcutils_allocator_is_valid>
 8013418:	b350      	cbz	r0, 8013470 <rcl_guard_condition_init_from_rmw+0x88>
 801341a:	b34c      	cbz	r4, 8013470 <rcl_guard_condition_init_from_rmw+0x88>
 801341c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013420:	f1b8 0f00 	cmp.w	r8, #0
 8013424:	d11e      	bne.n	8013464 <rcl_guard_condition_init_from_rmw+0x7c>
 8013426:	b31f      	cbz	r7, 8013470 <rcl_guard_condition_init_from_rmw+0x88>
 8013428:	4638      	mov	r0, r7
 801342a:	f7f7 fefd 	bl	800b228 <rcl_context_is_valid>
 801342e:	b328      	cbz	r0, 801347c <rcl_guard_condition_init_from_rmw+0x94>
 8013430:	9b01      	ldr	r3, [sp, #4]
 8013432:	9905      	ldr	r1, [sp, #20]
 8013434:	201c      	movs	r0, #28
 8013436:	4798      	blx	r3
 8013438:	4605      	mov	r5, r0
 801343a:	6060      	str	r0, [r4, #4]
 801343c:	b358      	cbz	r0, 8013496 <rcl_guard_condition_init_from_rmw+0xae>
 801343e:	b1fe      	cbz	r6, 8013480 <rcl_guard_condition_init_from_rmw+0x98>
 8013440:	6006      	str	r6, [r0, #0]
 8013442:	f880 8004 	strb.w	r8, [r0, #4]
 8013446:	ac01      	add	r4, sp, #4
 8013448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801344a:	f105 0c08 	add.w	ip, r5, #8
 801344e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	f8cc 3000 	str.w	r3, [ip]
 8013458:	2000      	movs	r0, #0
 801345a:	b006      	add	sp, #24
 801345c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013460:	b002      	add	sp, #8
 8013462:	4770      	bx	lr
 8013464:	2064      	movs	r0, #100	@ 0x64
 8013466:	b006      	add	sp, #24
 8013468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801346c:	b002      	add	sp, #8
 801346e:	4770      	bx	lr
 8013470:	200b      	movs	r0, #11
 8013472:	b006      	add	sp, #24
 8013474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013478:	b002      	add	sp, #8
 801347a:	4770      	bx	lr
 801347c:	2065      	movs	r0, #101	@ 0x65
 801347e:	e7f2      	b.n	8013466 <rcl_guard_condition_init_from_rmw+0x7e>
 8013480:	6838      	ldr	r0, [r7, #0]
 8013482:	3028      	adds	r0, #40	@ 0x28
 8013484:	f000 fb04 	bl	8013a90 <rmw_create_guard_condition>
 8013488:	6028      	str	r0, [r5, #0]
 801348a:	6865      	ldr	r5, [r4, #4]
 801348c:	682e      	ldr	r6, [r5, #0]
 801348e:	b126      	cbz	r6, 801349a <rcl_guard_condition_init_from_rmw+0xb2>
 8013490:	2301      	movs	r3, #1
 8013492:	712b      	strb	r3, [r5, #4]
 8013494:	e7d7      	b.n	8013446 <rcl_guard_condition_init_from_rmw+0x5e>
 8013496:	200a      	movs	r0, #10
 8013498:	e7e5      	b.n	8013466 <rcl_guard_condition_init_from_rmw+0x7e>
 801349a:	4628      	mov	r0, r5
 801349c:	9b02      	ldr	r3, [sp, #8]
 801349e:	9905      	ldr	r1, [sp, #20]
 80134a0:	4798      	blx	r3
 80134a2:	6066      	str	r6, [r4, #4]
 80134a4:	2001      	movs	r0, #1
 80134a6:	e7de      	b.n	8013466 <rcl_guard_condition_init_from_rmw+0x7e>

080134a8 <rcl_guard_condition_fini>:
 80134a8:	b570      	push	{r4, r5, r6, lr}
 80134aa:	b082      	sub	sp, #8
 80134ac:	b1f0      	cbz	r0, 80134ec <rcl_guard_condition_fini+0x44>
 80134ae:	6843      	ldr	r3, [r0, #4]
 80134b0:	4604      	mov	r4, r0
 80134b2:	b163      	cbz	r3, 80134ce <rcl_guard_condition_fini+0x26>
 80134b4:	6818      	ldr	r0, [r3, #0]
 80134b6:	68de      	ldr	r6, [r3, #12]
 80134b8:	6999      	ldr	r1, [r3, #24]
 80134ba:	b160      	cbz	r0, 80134d6 <rcl_guard_condition_fini+0x2e>
 80134bc:	791d      	ldrb	r5, [r3, #4]
 80134be:	b965      	cbnz	r5, 80134da <rcl_guard_condition_fini+0x32>
 80134c0:	4618      	mov	r0, r3
 80134c2:	47b0      	blx	r6
 80134c4:	2300      	movs	r3, #0
 80134c6:	4628      	mov	r0, r5
 80134c8:	6063      	str	r3, [r4, #4]
 80134ca:	b002      	add	sp, #8
 80134cc:	bd70      	pop	{r4, r5, r6, pc}
 80134ce:	461d      	mov	r5, r3
 80134d0:	4628      	mov	r0, r5
 80134d2:	b002      	add	sp, #8
 80134d4:	bd70      	pop	{r4, r5, r6, pc}
 80134d6:	4605      	mov	r5, r0
 80134d8:	e7f2      	b.n	80134c0 <rcl_guard_condition_fini+0x18>
 80134da:	9101      	str	r1, [sp, #4]
 80134dc:	f000 faec 	bl	8013ab8 <rmw_destroy_guard_condition>
 80134e0:	1e05      	subs	r5, r0, #0
 80134e2:	6863      	ldr	r3, [r4, #4]
 80134e4:	9901      	ldr	r1, [sp, #4]
 80134e6:	bf18      	it	ne
 80134e8:	2501      	movne	r5, #1
 80134ea:	e7e9      	b.n	80134c0 <rcl_guard_condition_fini+0x18>
 80134ec:	250b      	movs	r5, #11
 80134ee:	4628      	mov	r0, r5
 80134f0:	b002      	add	sp, #8
 80134f2:	bd70      	pop	{r4, r5, r6, pc}

080134f4 <rcl_guard_condition_get_default_options>:
 80134f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134f6:	b087      	sub	sp, #28
 80134f8:	4606      	mov	r6, r0
 80134fa:	4668      	mov	r0, sp
 80134fc:	f7f6 fa5c 	bl	80099b8 <rcutils_get_default_allocator>
 8013500:	4b09      	ldr	r3, [pc, #36]	@ (8013528 <rcl_guard_condition_get_default_options+0x34>)
 8013502:	46ee      	mov	lr, sp
 8013504:	469c      	mov	ip, r3
 8013506:	461d      	mov	r5, r3
 8013508:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801350c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013512:	4634      	mov	r4, r6
 8013514:	f8de 7000 	ldr.w	r7, [lr]
 8013518:	f8cc 7000 	str.w	r7, [ip]
 801351c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801351e:	4630      	mov	r0, r6
 8013520:	6027      	str	r7, [r4, #0]
 8013522:	b007      	add	sp, #28
 8013524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013526:	bf00      	nop
 8013528:	2000dda0 	.word	0x2000dda0

0801352c <rcl_guard_condition_get_rmw_handle>:
 801352c:	b110      	cbz	r0, 8013534 <rcl_guard_condition_get_rmw_handle+0x8>
 801352e:	6840      	ldr	r0, [r0, #4]
 8013530:	b100      	cbz	r0, 8013534 <rcl_guard_condition_get_rmw_handle+0x8>
 8013532:	6800      	ldr	r0, [r0, #0]
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop

08013538 <rcl_publisher_is_valid>:
 8013538:	b1a0      	cbz	r0, 8013564 <rcl_publisher_is_valid+0x2c>
 801353a:	6803      	ldr	r3, [r0, #0]
 801353c:	b510      	push	{r4, lr}
 801353e:	4604      	mov	r4, r0
 8013540:	b173      	cbz	r3, 8013560 <rcl_publisher_is_valid+0x28>
 8013542:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8013546:	b15a      	cbz	r2, 8013560 <rcl_publisher_is_valid+0x28>
 8013548:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801354c:	f7f7 fe6c 	bl	800b228 <rcl_context_is_valid>
 8013550:	b130      	cbz	r0, 8013560 <rcl_publisher_is_valid+0x28>
 8013552:	6823      	ldr	r3, [r4, #0]
 8013554:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8013558:	3800      	subs	r0, #0
 801355a:	bf18      	it	ne
 801355c:	2001      	movne	r0, #1
 801355e:	bd10      	pop	{r4, pc}
 8013560:	2000      	movs	r0, #0
 8013562:	bd10      	pop	{r4, pc}
 8013564:	2000      	movs	r0, #0
 8013566:	4770      	bx	lr

08013568 <rcl_publisher_is_valid_except_context>:
 8013568:	b130      	cbz	r0, 8013578 <rcl_publisher_is_valid_except_context+0x10>
 801356a:	6800      	ldr	r0, [r0, #0]
 801356c:	b120      	cbz	r0, 8013578 <rcl_publisher_is_valid_except_context+0x10>
 801356e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8013572:	3800      	subs	r0, #0
 8013574:	bf18      	it	ne
 8013576:	2001      	movne	r0, #1
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop

0801357c <rcl_validate_topic_name>:
 801357c:	2800      	cmp	r0, #0
 801357e:	d07a      	beq.n	8013676 <rcl_validate_topic_name+0xfa>
 8013580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013584:	460e      	mov	r6, r1
 8013586:	2900      	cmp	r1, #0
 8013588:	d07c      	beq.n	8013684 <rcl_validate_topic_name+0x108>
 801358a:	4617      	mov	r7, r2
 801358c:	4605      	mov	r5, r0
 801358e:	f7ec fe31 	bl	80001f4 <strlen>
 8013592:	b1b0      	cbz	r0, 80135c2 <rcl_validate_topic_name+0x46>
 8013594:	f895 9000 	ldrb.w	r9, [r5]
 8013598:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801371c <rcl_validate_topic_name+0x1a0>
 801359c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80135a0:	f013 0304 	ands.w	r3, r3, #4
 80135a4:	d169      	bne.n	801367a <rcl_validate_topic_name+0xfe>
 80135a6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80135aa:	f815 2008 	ldrb.w	r2, [r5, r8]
 80135ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80135b0:	d10e      	bne.n	80135d0 <rcl_validate_topic_name+0x54>
 80135b2:	2202      	movs	r2, #2
 80135b4:	6032      	str	r2, [r6, #0]
 80135b6:	b36f      	cbz	r7, 8013614 <rcl_validate_topic_name+0x98>
 80135b8:	f8c7 8000 	str.w	r8, [r7]
 80135bc:	4618      	mov	r0, r3
 80135be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c2:	2301      	movs	r3, #1
 80135c4:	6033      	str	r3, [r6, #0]
 80135c6:	b32f      	cbz	r7, 8013614 <rcl_validate_topic_name+0x98>
 80135c8:	2000      	movs	r0, #0
 80135ca:	6038      	str	r0, [r7, #0]
 80135cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135d0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80135d4:	461c      	mov	r4, r3
 80135d6:	4619      	mov	r1, r3
 80135d8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80135dc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80135e0:	f1be 0f09 	cmp.w	lr, #9
 80135e4:	d919      	bls.n	801361a <rcl_validate_topic_name+0x9e>
 80135e6:	f022 0e20 	bic.w	lr, r2, #32
 80135ea:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80135ee:	f1be 0f19 	cmp.w	lr, #25
 80135f2:	d912      	bls.n	801361a <rcl_validate_topic_name+0x9e>
 80135f4:	2a5f      	cmp	r2, #95	@ 0x5f
 80135f6:	d019      	beq.n	801362c <rcl_validate_topic_name+0xb0>
 80135f8:	2a2f      	cmp	r2, #47	@ 0x2f
 80135fa:	d051      	beq.n	80136a0 <rcl_validate_topic_name+0x124>
 80135fc:	2a7e      	cmp	r2, #126	@ 0x7e
 80135fe:	d048      	beq.n	8013692 <rcl_validate_topic_name+0x116>
 8013600:	2a7b      	cmp	r2, #123	@ 0x7b
 8013602:	d054      	beq.n	80136ae <rcl_validate_topic_name+0x132>
 8013604:	2a7d      	cmp	r2, #125	@ 0x7d
 8013606:	d161      	bne.n	80136cc <rcl_validate_topic_name+0x150>
 8013608:	2c00      	cmp	r4, #0
 801360a:	d155      	bne.n	80136b8 <rcl_validate_topic_name+0x13c>
 801360c:	2305      	movs	r3, #5
 801360e:	6033      	str	r3, [r6, #0]
 8013610:	b107      	cbz	r7, 8013614 <rcl_validate_topic_name+0x98>
 8013612:	6039      	str	r1, [r7, #0]
 8013614:	2000      	movs	r0, #0
 8013616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801361a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801361e:	0752      	lsls	r2, r2, #29
 8013620:	d504      	bpl.n	801362c <rcl_validate_topic_name+0xb0>
 8013622:	b11c      	cbz	r4, 801362c <rcl_validate_topic_name+0xb0>
 8013624:	b111      	cbz	r1, 801362c <rcl_validate_topic_name+0xb0>
 8013626:	1e4a      	subs	r2, r1, #1
 8013628:	429a      	cmp	r2, r3
 801362a:	d02d      	beq.n	8013688 <rcl_validate_topic_name+0x10c>
 801362c:	3101      	adds	r1, #1
 801362e:	4288      	cmp	r0, r1
 8013630:	d1d2      	bne.n	80135d8 <rcl_validate_topic_name+0x5c>
 8013632:	2c00      	cmp	r4, #0
 8013634:	d145      	bne.n	80136c2 <rcl_validate_topic_name+0x146>
 8013636:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801363a:	d04f      	beq.n	80136dc <rcl_validate_topic_name+0x160>
 801363c:	4620      	mov	r0, r4
 801363e:	2301      	movs	r3, #1
 8013640:	e006      	b.n	8013650 <rcl_validate_topic_name+0xd4>
 8013642:	428b      	cmp	r3, r1
 8013644:	f105 0501 	add.w	r5, r5, #1
 8013648:	f103 0201 	add.w	r2, r3, #1
 801364c:	d236      	bcs.n	80136bc <rcl_validate_topic_name+0x140>
 801364e:	4613      	mov	r3, r2
 8013650:	4580      	cmp	r8, r0
 8013652:	f100 0001 	add.w	r0, r0, #1
 8013656:	d0f4      	beq.n	8013642 <rcl_validate_topic_name+0xc6>
 8013658:	782a      	ldrb	r2, [r5, #0]
 801365a:	2a2f      	cmp	r2, #47	@ 0x2f
 801365c:	d1f1      	bne.n	8013642 <rcl_validate_topic_name+0xc6>
 801365e:	786a      	ldrb	r2, [r5, #1]
 8013660:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013664:	0754      	lsls	r4, r2, #29
 8013666:	d5ec      	bpl.n	8013642 <rcl_validate_topic_name+0xc6>
 8013668:	2204      	movs	r2, #4
 801366a:	6032      	str	r2, [r6, #0]
 801366c:	2f00      	cmp	r7, #0
 801366e:	d0d1      	beq.n	8013614 <rcl_validate_topic_name+0x98>
 8013670:	603b      	str	r3, [r7, #0]
 8013672:	2000      	movs	r0, #0
 8013674:	e7aa      	b.n	80135cc <rcl_validate_topic_name+0x50>
 8013676:	200b      	movs	r0, #11
 8013678:	4770      	bx	lr
 801367a:	2304      	movs	r3, #4
 801367c:	6033      	str	r3, [r6, #0]
 801367e:	2f00      	cmp	r7, #0
 8013680:	d1a2      	bne.n	80135c8 <rcl_validate_topic_name+0x4c>
 8013682:	e7c7      	b.n	8013614 <rcl_validate_topic_name+0x98>
 8013684:	200b      	movs	r0, #11
 8013686:	e7a1      	b.n	80135cc <rcl_validate_topic_name+0x50>
 8013688:	2309      	movs	r3, #9
 801368a:	6033      	str	r3, [r6, #0]
 801368c:	2f00      	cmp	r7, #0
 801368e:	d1c0      	bne.n	8013612 <rcl_validate_topic_name+0x96>
 8013690:	e7c0      	b.n	8013614 <rcl_validate_topic_name+0x98>
 8013692:	2900      	cmp	r1, #0
 8013694:	d0ca      	beq.n	801362c <rcl_validate_topic_name+0xb0>
 8013696:	2306      	movs	r3, #6
 8013698:	6033      	str	r3, [r6, #0]
 801369a:	2f00      	cmp	r7, #0
 801369c:	d1b9      	bne.n	8013612 <rcl_validate_topic_name+0x96>
 801369e:	e7b9      	b.n	8013614 <rcl_validate_topic_name+0x98>
 80136a0:	2c00      	cmp	r4, #0
 80136a2:	d0c3      	beq.n	801362c <rcl_validate_topic_name+0xb0>
 80136a4:	2308      	movs	r3, #8
 80136a6:	6033      	str	r3, [r6, #0]
 80136a8:	2f00      	cmp	r7, #0
 80136aa:	d1b2      	bne.n	8013612 <rcl_validate_topic_name+0x96>
 80136ac:	e7b2      	b.n	8013614 <rcl_validate_topic_name+0x98>
 80136ae:	2c00      	cmp	r4, #0
 80136b0:	d1f8      	bne.n	80136a4 <rcl_validate_topic_name+0x128>
 80136b2:	460b      	mov	r3, r1
 80136b4:	2401      	movs	r4, #1
 80136b6:	e7b9      	b.n	801362c <rcl_validate_topic_name+0xb0>
 80136b8:	2400      	movs	r4, #0
 80136ba:	e7b7      	b.n	801362c <rcl_validate_topic_name+0xb0>
 80136bc:	2000      	movs	r0, #0
 80136be:	6030      	str	r0, [r6, #0]
 80136c0:	e784      	b.n	80135cc <rcl_validate_topic_name+0x50>
 80136c2:	2205      	movs	r2, #5
 80136c4:	6032      	str	r2, [r6, #0]
 80136c6:	2f00      	cmp	r7, #0
 80136c8:	d1d2      	bne.n	8013670 <rcl_validate_topic_name+0xf4>
 80136ca:	e7a3      	b.n	8013614 <rcl_validate_topic_name+0x98>
 80136cc:	2c00      	cmp	r4, #0
 80136ce:	bf14      	ite	ne
 80136d0:	2308      	movne	r3, #8
 80136d2:	2303      	moveq	r3, #3
 80136d4:	6033      	str	r3, [r6, #0]
 80136d6:	2f00      	cmp	r7, #0
 80136d8:	d19b      	bne.n	8013612 <rcl_validate_topic_name+0x96>
 80136da:	e79b      	b.n	8013614 <rcl_validate_topic_name+0x98>
 80136dc:	2301      	movs	r3, #1
 80136de:	e00a      	b.n	80136f6 <rcl_validate_topic_name+0x17a>
 80136e0:	2c01      	cmp	r4, #1
 80136e2:	d013      	beq.n	801370c <rcl_validate_topic_name+0x190>
 80136e4:	4299      	cmp	r1, r3
 80136e6:	f104 0401 	add.w	r4, r4, #1
 80136ea:	f105 0501 	add.w	r5, r5, #1
 80136ee:	f103 0201 	add.w	r2, r3, #1
 80136f2:	d9e3      	bls.n	80136bc <rcl_validate_topic_name+0x140>
 80136f4:	4613      	mov	r3, r2
 80136f6:	45a0      	cmp	r8, r4
 80136f8:	d0f4      	beq.n	80136e4 <rcl_validate_topic_name+0x168>
 80136fa:	782a      	ldrb	r2, [r5, #0]
 80136fc:	2a2f      	cmp	r2, #47	@ 0x2f
 80136fe:	d1ef      	bne.n	80136e0 <rcl_validate_topic_name+0x164>
 8013700:	786a      	ldrb	r2, [r5, #1]
 8013702:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013706:	0752      	lsls	r2, r2, #29
 8013708:	d5ec      	bpl.n	80136e4 <rcl_validate_topic_name+0x168>
 801370a:	e7ad      	b.n	8013668 <rcl_validate_topic_name+0xec>
 801370c:	2307      	movs	r3, #7
 801370e:	6033      	str	r3, [r6, #0]
 8013710:	2f00      	cmp	r7, #0
 8013712:	f43f af7f 	beq.w	8013614 <rcl_validate_topic_name+0x98>
 8013716:	603c      	str	r4, [r7, #0]
 8013718:	2000      	movs	r0, #0
 801371a:	e757      	b.n	80135cc <rcl_validate_topic_name+0x50>
 801371c:	08016bdc 	.word	0x08016bdc

08013720 <rcutils_string_array_fini>:
 8013720:	b320      	cbz	r0, 801376c <rcutils_string_array_fini+0x4c>
 8013722:	b570      	push	{r4, r5, r6, lr}
 8013724:	4604      	mov	r4, r0
 8013726:	6840      	ldr	r0, [r0, #4]
 8013728:	b1d8      	cbz	r0, 8013762 <rcutils_string_array_fini+0x42>
 801372a:	f104 0008 	add.w	r0, r4, #8
 801372e:	f7f6 f951 	bl	80099d4 <rcutils_allocator_is_valid>
 8013732:	b1b8      	cbz	r0, 8013764 <rcutils_string_array_fini+0x44>
 8013734:	6823      	ldr	r3, [r4, #0]
 8013736:	b1bb      	cbz	r3, 8013768 <rcutils_string_array_fini+0x48>
 8013738:	2500      	movs	r5, #0
 801373a:	6860      	ldr	r0, [r4, #4]
 801373c:	462e      	mov	r6, r5
 801373e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8013742:	68e3      	ldr	r3, [r4, #12]
 8013744:	69a1      	ldr	r1, [r4, #24]
 8013746:	4798      	blx	r3
 8013748:	e9d4 3000 	ldrd	r3, r0, [r4]
 801374c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8013750:	3501      	adds	r5, #1
 8013752:	429d      	cmp	r5, r3
 8013754:	d3f3      	bcc.n	801373e <rcutils_string_array_fini+0x1e>
 8013756:	68e3      	ldr	r3, [r4, #12]
 8013758:	69a1      	ldr	r1, [r4, #24]
 801375a:	4798      	blx	r3
 801375c:	2000      	movs	r0, #0
 801375e:	e9c4 0000 	strd	r0, r0, [r4]
 8013762:	bd70      	pop	{r4, r5, r6, pc}
 8013764:	200b      	movs	r0, #11
 8013766:	bd70      	pop	{r4, r5, r6, pc}
 8013768:	6860      	ldr	r0, [r4, #4]
 801376a:	e7f4      	b.n	8013756 <rcutils_string_array_fini+0x36>
 801376c:	200b      	movs	r0, #11
 801376e:	4770      	bx	lr

08013770 <rmw_time_equal>:
 8013770:	b4f0      	push	{r4, r5, r6, r7}
 8013772:	b084      	sub	sp, #16
 8013774:	ac04      	add	r4, sp, #16
 8013776:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801377a:	4603      	mov	r3, r0
 801377c:	4924      	ldr	r1, [pc, #144]	@ (8013810 <rmw_time_equal+0xa0>)
 801377e:	9e03      	ldr	r6, [sp, #12]
 8013780:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013784:	2202      	movs	r2, #2
 8013786:	4299      	cmp	r1, r3
 8013788:	41aa      	sbcs	r2, r5
 801378a:	d330      	bcc.n	80137ee <rmw_time_equal+0x7e>
 801378c:	4c21      	ldr	r4, [pc, #132]	@ (8013814 <rmw_time_equal+0xa4>)
 801378e:	fba3 3204 	umull	r3, r2, r3, r4
 8013792:	fb04 2205 	mla	r2, r4, r5, r2
 8013796:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801379a:	43dd      	mvns	r5, r3
 801379c:	1a8c      	subs	r4, r1, r2
 801379e:	4285      	cmp	r5, r0
 80137a0:	41b4      	sbcs	r4, r6
 80137a2:	d332      	bcc.n	801380a <rmw_time_equal+0x9a>
 80137a4:	eb10 0c03 	adds.w	ip, r0, r3
 80137a8:	eb42 0106 	adc.w	r1, r2, r6
 80137ac:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80137b0:	4817      	ldr	r0, [pc, #92]	@ (8013810 <rmw_time_equal+0xa0>)
 80137b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80137b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80137b6:	2202      	movs	r2, #2
 80137b8:	4298      	cmp	r0, r3
 80137ba:	41b2      	sbcs	r2, r6
 80137bc:	d31c      	bcc.n	80137f8 <rmw_time_equal+0x88>
 80137be:	4c15      	ldr	r4, [pc, #84]	@ (8013814 <rmw_time_equal+0xa4>)
 80137c0:	fba3 3204 	umull	r3, r2, r3, r4
 80137c4:	fb04 2206 	mla	r2, r4, r6, r2
 80137c8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80137cc:	43de      	mvns	r6, r3
 80137ce:	1a84      	subs	r4, r0, r2
 80137d0:	42ae      	cmp	r6, r5
 80137d2:	41bc      	sbcs	r4, r7
 80137d4:	d315      	bcc.n	8013802 <rmw_time_equal+0x92>
 80137d6:	195b      	adds	r3, r3, r5
 80137d8:	eb42 0207 	adc.w	r2, r2, r7
 80137dc:	428a      	cmp	r2, r1
 80137de:	bf08      	it	eq
 80137e0:	4563      	cmpeq	r3, ip
 80137e2:	bf0c      	ite	eq
 80137e4:	2001      	moveq	r0, #1
 80137e6:	2000      	movne	r0, #0
 80137e8:	b004      	add	sp, #16
 80137ea:	bcf0      	pop	{r4, r5, r6, r7}
 80137ec:	4770      	bx	lr
 80137ee:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80137f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80137f6:	e7d9      	b.n	80137ac <rmw_time_equal+0x3c>
 80137f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80137fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8013800:	e7ec      	b.n	80137dc <rmw_time_equal+0x6c>
 8013802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013806:	4602      	mov	r2, r0
 8013808:	e7e8      	b.n	80137dc <rmw_time_equal+0x6c>
 801380a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801380e:	e7cd      	b.n	80137ac <rmw_time_equal+0x3c>
 8013810:	25c17d04 	.word	0x25c17d04
 8013814:	3b9aca00 	.word	0x3b9aca00

08013818 <rmw_time_total_nsec>:
 8013818:	b470      	push	{r4, r5, r6}
 801381a:	b085      	sub	sp, #20
 801381c:	ac04      	add	r4, sp, #16
 801381e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013822:	4603      	mov	r3, r0
 8013824:	4912      	ldr	r1, [pc, #72]	@ (8013870 <rmw_time_total_nsec+0x58>)
 8013826:	9e03      	ldr	r6, [sp, #12]
 8013828:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801382c:	2202      	movs	r2, #2
 801382e:	4299      	cmp	r1, r3
 8013830:	41aa      	sbcs	r2, r5
 8013832:	d311      	bcc.n	8013858 <rmw_time_total_nsec+0x40>
 8013834:	4c0f      	ldr	r4, [pc, #60]	@ (8013874 <rmw_time_total_nsec+0x5c>)
 8013836:	fba3 3204 	umull	r3, r2, r3, r4
 801383a:	fb04 2205 	mla	r2, r4, r5, r2
 801383e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013842:	43dd      	mvns	r5, r3
 8013844:	1a8c      	subs	r4, r1, r2
 8013846:	4285      	cmp	r5, r0
 8013848:	41b4      	sbcs	r4, r6
 801384a:	d30c      	bcc.n	8013866 <rmw_time_total_nsec+0x4e>
 801384c:	1818      	adds	r0, r3, r0
 801384e:	eb42 0106 	adc.w	r1, r2, r6
 8013852:	b005      	add	sp, #20
 8013854:	bc70      	pop	{r4, r5, r6}
 8013856:	4770      	bx	lr
 8013858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801385c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013860:	b005      	add	sp, #20
 8013862:	bc70      	pop	{r4, r5, r6}
 8013864:	4770      	bx	lr
 8013866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801386a:	b005      	add	sp, #20
 801386c:	bc70      	pop	{r4, r5, r6}
 801386e:	4770      	bx	lr
 8013870:	25c17d04 	.word	0x25c17d04
 8013874:	3b9aca00 	.word	0x3b9aca00

08013878 <on_status>:
 8013878:	b082      	sub	sp, #8
 801387a:	b002      	add	sp, #8
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop

08013880 <on_topic>:
 8013880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013884:	4a22      	ldr	r2, [pc, #136]	@ (8013910 <on_topic+0x90>)
 8013886:	b094      	sub	sp, #80	@ 0x50
 8013888:	6812      	ldr	r2, [r2, #0]
 801388a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801388c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013890:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8013894:	b3c2      	cbz	r2, 8013908 <on_topic+0x88>
 8013896:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801389a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801389e:	e001      	b.n	80138a4 <on_topic+0x24>
 80138a0:	6852      	ldr	r2, [r2, #4]
 80138a2:	b38a      	cbz	r2, 8013908 <on_topic+0x88>
 80138a4:	6894      	ldr	r4, [r2, #8]
 80138a6:	8aa3      	ldrh	r3, [r4, #20]
 80138a8:	428b      	cmp	r3, r1
 80138aa:	d1f9      	bne.n	80138a0 <on_topic+0x20>
 80138ac:	7da3      	ldrb	r3, [r4, #22]
 80138ae:	4283      	cmp	r3, r0
 80138b0:	d1f6      	bne.n	80138a0 <on_topic+0x20>
 80138b2:	2248      	movs	r2, #72	@ 0x48
 80138b4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80138b8:	4668      	mov	r0, sp
 80138ba:	f001 fd16 	bl	80152ea <memcpy>
 80138be:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80138c2:	cb0c      	ldmia	r3, {r2, r3}
 80138c4:	4620      	mov	r0, r4
 80138c6:	f7fb ffe5 	bl	800f894 <rmw_uxrce_get_static_input_buffer_for_entity>
 80138ca:	4607      	mov	r7, r0
 80138cc:	b1e0      	cbz	r0, 8013908 <on_topic+0x88>
 80138ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80138d2:	4632      	mov	r2, r6
 80138d4:	4628      	mov	r0, r5
 80138d6:	f108 0110 	add.w	r1, r8, #16
 80138da:	f000 fa49 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 80138de:	b930      	cbnz	r0, 80138ee <on_topic+0x6e>
 80138e0:	480c      	ldr	r0, [pc, #48]	@ (8013914 <on_topic+0x94>)
 80138e2:	4639      	mov	r1, r7
 80138e4:	b014      	add	sp, #80	@ 0x50
 80138e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138ea:	f000 b8bd 	b.w	8013a68 <put_memory>
 80138ee:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80138f2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80138f6:	f000 f965 	bl	8013bc4 <rmw_uros_epoch_nanos>
 80138fa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80138fe:	2305      	movs	r3, #5
 8013900:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013904:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8013908:	b014      	add	sp, #80	@ 0x50
 801390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801390e:	bf00      	nop
 8013910:	2000dd6c 	.word	0x2000dd6c
 8013914:	2000dd5c 	.word	0x2000dd5c

08013918 <on_request>:
 8013918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801391c:	4823      	ldr	r0, [pc, #140]	@ (80139ac <on_request+0x94>)
 801391e:	b094      	sub	sp, #80	@ 0x50
 8013920:	6800      	ldr	r0, [r0, #0]
 8013922:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013924:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013928:	9113      	str	r1, [sp, #76]	@ 0x4c
 801392a:	2800      	cmp	r0, #0
 801392c:	d03b      	beq.n	80139a6 <on_request+0x8e>
 801392e:	461d      	mov	r5, r3
 8013930:	e001      	b.n	8013936 <on_request+0x1e>
 8013932:	6840      	ldr	r0, [r0, #4]
 8013934:	b3b8      	cbz	r0, 80139a6 <on_request+0x8e>
 8013936:	6884      	ldr	r4, [r0, #8]
 8013938:	8b21      	ldrh	r1, [r4, #24]
 801393a:	4291      	cmp	r1, r2
 801393c:	d1f9      	bne.n	8013932 <on_request+0x1a>
 801393e:	2248      	movs	r2, #72	@ 0x48
 8013940:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013944:	4668      	mov	r0, sp
 8013946:	f001 fcd0 	bl	80152ea <memcpy>
 801394a:	f104 0320 	add.w	r3, r4, #32
 801394e:	cb0c      	ldmia	r3, {r2, r3}
 8013950:	4620      	mov	r0, r4
 8013952:	f7fb ff9f 	bl	800f894 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013956:	4680      	mov	r8, r0
 8013958:	b328      	cbz	r0, 80139a6 <on_request+0x8e>
 801395a:	4638      	mov	r0, r7
 801395c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013960:	4632      	mov	r2, r6
 8013962:	f107 0110 	add.w	r1, r7, #16
 8013966:	f000 fa03 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 801396a:	b930      	cbnz	r0, 801397a <on_request+0x62>
 801396c:	4810      	ldr	r0, [pc, #64]	@ (80139b0 <on_request+0x98>)
 801396e:	4641      	mov	r1, r8
 8013970:	b014      	add	sp, #80	@ 0x50
 8013972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013976:	f000 b877 	b.w	8013a68 <put_memory>
 801397a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801397c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013980:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013984:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013988:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801398c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013990:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013994:	f000 f916 	bl	8013bc4 <rmw_uros_epoch_nanos>
 8013998:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801399c:	2303      	movs	r3, #3
 801399e:	e942 0102 	strd	r0, r1, [r2, #-8]
 80139a2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80139a6:	b014      	add	sp, #80	@ 0x50
 80139a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ac:	2000dd3c 	.word	0x2000dd3c
 80139b0:	2000dd5c 	.word	0x2000dd5c

080139b4 <on_reply>:
 80139b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b8:	4821      	ldr	r0, [pc, #132]	@ (8013a40 <on_reply+0x8c>)
 80139ba:	b094      	sub	sp, #80	@ 0x50
 80139bc:	6800      	ldr	r0, [r0, #0]
 80139be:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80139c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80139c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80139c6:	b3b8      	cbz	r0, 8013a38 <on_reply+0x84>
 80139c8:	461d      	mov	r5, r3
 80139ca:	e001      	b.n	80139d0 <on_reply+0x1c>
 80139cc:	6840      	ldr	r0, [r0, #4]
 80139ce:	b398      	cbz	r0, 8013a38 <on_reply+0x84>
 80139d0:	6884      	ldr	r4, [r0, #8]
 80139d2:	8b21      	ldrh	r1, [r4, #24]
 80139d4:	4291      	cmp	r1, r2
 80139d6:	d1f9      	bne.n	80139cc <on_reply+0x18>
 80139d8:	2248      	movs	r2, #72	@ 0x48
 80139da:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80139de:	4668      	mov	r0, sp
 80139e0:	f001 fc83 	bl	80152ea <memcpy>
 80139e4:	f104 0320 	add.w	r3, r4, #32
 80139e8:	cb0c      	ldmia	r3, {r2, r3}
 80139ea:	4620      	mov	r0, r4
 80139ec:	f7fb ff52 	bl	800f894 <rmw_uxrce_get_static_input_buffer_for_entity>
 80139f0:	4680      	mov	r8, r0
 80139f2:	b308      	cbz	r0, 8013a38 <on_reply+0x84>
 80139f4:	4638      	mov	r0, r7
 80139f6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80139fa:	4632      	mov	r2, r6
 80139fc:	f107 0110 	add.w	r1, r7, #16
 8013a00:	f000 f9b6 	bl	8013d70 <ucdr_deserialize_array_uint8_t>
 8013a04:	b930      	cbnz	r0, 8013a14 <on_reply+0x60>
 8013a06:	480f      	ldr	r0, [pc, #60]	@ (8013a44 <on_reply+0x90>)
 8013a08:	4641      	mov	r1, r8
 8013a0a:	b014      	add	sp, #80	@ 0x50
 8013a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a10:	f000 b82a 	b.w	8013a68 <put_memory>
 8013a14:	2200      	movs	r2, #0
 8013a16:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8013a1a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013a1e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013a22:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8013a26:	f000 f8cd 	bl	8013bc4 <rmw_uros_epoch_nanos>
 8013a2a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8013a2e:	2304      	movs	r3, #4
 8013a30:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013a34:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013a38:	b014      	add	sp, #80	@ 0x50
 8013a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a3e:	bf00      	nop
 8013a40:	20009450 	.word	0x20009450
 8013a44:	2000dd5c 	.word	0x2000dd5c

08013a48 <get_memory>:
 8013a48:	4603      	mov	r3, r0
 8013a4a:	6840      	ldr	r0, [r0, #4]
 8013a4c:	b158      	cbz	r0, 8013a66 <get_memory+0x1e>
 8013a4e:	6842      	ldr	r2, [r0, #4]
 8013a50:	605a      	str	r2, [r3, #4]
 8013a52:	b10a      	cbz	r2, 8013a58 <get_memory+0x10>
 8013a54:	2100      	movs	r1, #0
 8013a56:	6011      	str	r1, [r2, #0]
 8013a58:	681a      	ldr	r2, [r3, #0]
 8013a5a:	6042      	str	r2, [r0, #4]
 8013a5c:	b102      	cbz	r2, 8013a60 <get_memory+0x18>
 8013a5e:	6010      	str	r0, [r2, #0]
 8013a60:	2200      	movs	r2, #0
 8013a62:	6002      	str	r2, [r0, #0]
 8013a64:	6018      	str	r0, [r3, #0]
 8013a66:	4770      	bx	lr

08013a68 <put_memory>:
 8013a68:	680b      	ldr	r3, [r1, #0]
 8013a6a:	b10b      	cbz	r3, 8013a70 <put_memory+0x8>
 8013a6c:	684a      	ldr	r2, [r1, #4]
 8013a6e:	605a      	str	r2, [r3, #4]
 8013a70:	684a      	ldr	r2, [r1, #4]
 8013a72:	b102      	cbz	r2, 8013a76 <put_memory+0xe>
 8013a74:	6013      	str	r3, [r2, #0]
 8013a76:	6803      	ldr	r3, [r0, #0]
 8013a78:	428b      	cmp	r3, r1
 8013a7a:	6843      	ldr	r3, [r0, #4]
 8013a7c:	bf08      	it	eq
 8013a7e:	6002      	streq	r2, [r0, #0]
 8013a80:	604b      	str	r3, [r1, #4]
 8013a82:	b103      	cbz	r3, 8013a86 <put_memory+0x1e>
 8013a84:	6019      	str	r1, [r3, #0]
 8013a86:	2300      	movs	r3, #0
 8013a88:	600b      	str	r3, [r1, #0]
 8013a8a:	6041      	str	r1, [r0, #4]
 8013a8c:	4770      	bx	lr
 8013a8e:	bf00      	nop

08013a90 <rmw_create_guard_condition>:
 8013a90:	b538      	push	{r3, r4, r5, lr}
 8013a92:	4605      	mov	r5, r0
 8013a94:	4807      	ldr	r0, [pc, #28]	@ (8013ab4 <rmw_create_guard_condition+0x24>)
 8013a96:	f7ff ffd7 	bl	8013a48 <get_memory>
 8013a9a:	b148      	cbz	r0, 8013ab0 <rmw_create_guard_condition+0x20>
 8013a9c:	6884      	ldr	r4, [r0, #8]
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	7423      	strb	r3, [r4, #16]
 8013aa2:	61e5      	str	r5, [r4, #28]
 8013aa4:	f7fa fc34 	bl	800e310 <rmw_get_implementation_identifier>
 8013aa8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013aac:	f104 0014 	add.w	r0, r4, #20
 8013ab0:	bd38      	pop	{r3, r4, r5, pc}
 8013ab2:	bf00      	nop
 8013ab4:	2000dcfc 	.word	0x2000dcfc

08013ab8 <rmw_destroy_guard_condition>:
 8013ab8:	b508      	push	{r3, lr}
 8013aba:	4b08      	ldr	r3, [pc, #32]	@ (8013adc <rmw_destroy_guard_condition+0x24>)
 8013abc:	6819      	ldr	r1, [r3, #0]
 8013abe:	b911      	cbnz	r1, 8013ac6 <rmw_destroy_guard_condition+0xe>
 8013ac0:	e00a      	b.n	8013ad8 <rmw_destroy_guard_condition+0x20>
 8013ac2:	6849      	ldr	r1, [r1, #4]
 8013ac4:	b141      	cbz	r1, 8013ad8 <rmw_destroy_guard_condition+0x20>
 8013ac6:	688b      	ldr	r3, [r1, #8]
 8013ac8:	3314      	adds	r3, #20
 8013aca:	4298      	cmp	r0, r3
 8013acc:	d1f9      	bne.n	8013ac2 <rmw_destroy_guard_condition+0xa>
 8013ace:	4803      	ldr	r0, [pc, #12]	@ (8013adc <rmw_destroy_guard_condition+0x24>)
 8013ad0:	f7ff ffca 	bl	8013a68 <put_memory>
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	bd08      	pop	{r3, pc}
 8013ad8:	2001      	movs	r0, #1
 8013ada:	bd08      	pop	{r3, pc}
 8013adc:	2000dcfc 	.word	0x2000dcfc

08013ae0 <create_topic>:
 8013ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	4822      	ldr	r0, [pc, #136]	@ (8013b74 <create_topic+0x94>)
 8013aea:	460f      	mov	r7, r1
 8013aec:	4616      	mov	r6, r2
 8013aee:	f7ff ffab 	bl	8013a48 <get_memory>
 8013af2:	4604      	mov	r4, r0
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d039      	beq.n	8013b6c <create_topic+0x8c>
 8013af8:	692b      	ldr	r3, [r5, #16]
 8013afa:	6884      	ldr	r4, [r0, #8]
 8013afc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013b7c <create_topic+0x9c>
 8013b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013b04:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013b08:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013b0c:	1c42      	adds	r2, r0, #1
 8013b0e:	2102      	movs	r1, #2
 8013b10:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013b14:	f7fc fa9e 	bl	8010054 <uxr_object_id>
 8013b18:	223c      	movs	r2, #60	@ 0x3c
 8013b1a:	6120      	str	r0, [r4, #16]
 8013b1c:	4641      	mov	r1, r8
 8013b1e:	4638      	mov	r0, r7
 8013b20:	f7fc f812 	bl	800fb48 <generate_topic_name>
 8013b24:	b1f0      	cbz	r0, 8013b64 <create_topic+0x84>
 8013b26:	4f14      	ldr	r7, [pc, #80]	@ (8013b78 <create_topic+0x98>)
 8013b28:	4630      	mov	r0, r6
 8013b2a:	2264      	movs	r2, #100	@ 0x64
 8013b2c:	4639      	mov	r1, r7
 8013b2e:	f7fb ffdb 	bl	800fae8 <generate_type_name>
 8013b32:	b1b8      	cbz	r0, 8013b64 <create_topic+0x84>
 8013b34:	6928      	ldr	r0, [r5, #16]
 8013b36:	2306      	movs	r3, #6
 8013b38:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013b3c:	f8cd 8000 	str.w	r8, [sp]
 8013b40:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013b44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b48:	6811      	ldr	r1, [r2, #0]
 8013b4a:	696b      	ldr	r3, [r5, #20]
 8013b4c:	6922      	ldr	r2, [r4, #16]
 8013b4e:	f7fc f8e1 	bl	800fd14 <uxr_buffer_create_topic_bin>
 8013b52:	4602      	mov	r2, r0
 8013b54:	6928      	ldr	r0, [r5, #16]
 8013b56:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013b5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013b5e:	f7fb ff8d 	bl	800fa7c <run_xrce_session>
 8013b62:	b918      	cbnz	r0, 8013b6c <create_topic+0x8c>
 8013b64:	4620      	mov	r0, r4
 8013b66:	f7fb fe89 	bl	800f87c <rmw_uxrce_fini_topic_memory>
 8013b6a:	2400      	movs	r4, #0
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	b004      	add	sp, #16
 8013b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b74:	2000dd7c 	.word	0x2000dd7c
 8013b78:	2000ddf0 	.word	0x2000ddf0
 8013b7c:	2000ddb4 	.word	0x2000ddb4

08013b80 <destroy_topic>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	6985      	ldr	r5, [r0, #24]
 8013b84:	b1d5      	cbz	r5, 8013bbc <destroy_topic+0x3c>
 8013b86:	4604      	mov	r4, r0
 8013b88:	6928      	ldr	r0, [r5, #16]
 8013b8a:	6922      	ldr	r2, [r4, #16]
 8013b8c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b94:	6819      	ldr	r1, [r3, #0]
 8013b96:	f7fc f83f 	bl	800fc18 <uxr_buffer_delete_entity>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	6928      	ldr	r0, [r5, #16]
 8013b9e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013ba2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013ba6:	f7fb ff69 	bl	800fa7c <run_xrce_session>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	4620      	mov	r0, r4
 8013bae:	bf14      	ite	ne
 8013bb0:	2400      	movne	r4, #0
 8013bb2:	2402      	moveq	r4, #2
 8013bb4:	f7fb fe62 	bl	800f87c <rmw_uxrce_fini_topic_memory>
 8013bb8:	4620      	mov	r0, r4
 8013bba:	bd38      	pop	{r3, r4, r5, pc}
 8013bbc:	2401      	movs	r4, #1
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	bd38      	pop	{r3, r4, r5, pc}
 8013bc2:	bf00      	nop

08013bc4 <rmw_uros_epoch_nanos>:
 8013bc4:	4b05      	ldr	r3, [pc, #20]	@ (8013bdc <rmw_uros_epoch_nanos+0x18>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	b123      	cbz	r3, 8013bd4 <rmw_uros_epoch_nanos+0x10>
 8013bca:	6898      	ldr	r0, [r3, #8]
 8013bcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013bd0:	f7fc bcb4 	b.w	801053c <uxr_epoch_nanos>
 8013bd4:	2000      	movs	r0, #0
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	4770      	bx	lr
 8013bda:	bf00      	nop
 8013bdc:	2000dd4c 	.word	0x2000dd4c

08013be0 <ucdr_serialize_endian_array_char>:
 8013be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be4:	4619      	mov	r1, r3
 8013be6:	461f      	mov	r7, r3
 8013be8:	4605      	mov	r5, r0
 8013bea:	4690      	mov	r8, r2
 8013bec:	f7f7 f9be 	bl	800af6c <ucdr_check_buffer_available_for>
 8013bf0:	b9e0      	cbnz	r0, 8013c2c <ucdr_serialize_endian_array_char+0x4c>
 8013bf2:	463e      	mov	r6, r7
 8013bf4:	e009      	b.n	8013c0a <ucdr_serialize_endian_array_char+0x2a>
 8013bf6:	68a8      	ldr	r0, [r5, #8]
 8013bf8:	f001 fb77 	bl	80152ea <memcpy>
 8013bfc:	68ab      	ldr	r3, [r5, #8]
 8013bfe:	6928      	ldr	r0, [r5, #16]
 8013c00:	4423      	add	r3, r4
 8013c02:	4420      	add	r0, r4
 8013c04:	1b36      	subs	r6, r6, r4
 8013c06:	60ab      	str	r3, [r5, #8]
 8013c08:	6128      	str	r0, [r5, #16]
 8013c0a:	4631      	mov	r1, r6
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f7f7 fa34 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 8013c14:	1bb9      	subs	r1, r7, r6
 8013c16:	4441      	add	r1, r8
 8013c18:	4604      	mov	r4, r0
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d1ea      	bne.n	8013bf6 <ucdr_serialize_endian_array_char+0x16>
 8013c20:	2301      	movs	r3, #1
 8013c22:	7da8      	ldrb	r0, [r5, #22]
 8013c24:	756b      	strb	r3, [r5, #21]
 8013c26:	4058      	eors	r0, r3
 8013c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c2c:	463a      	mov	r2, r7
 8013c2e:	68a8      	ldr	r0, [r5, #8]
 8013c30:	4641      	mov	r1, r8
 8013c32:	f001 fb5a 	bl	80152ea <memcpy>
 8013c36:	68aa      	ldr	r2, [r5, #8]
 8013c38:	692b      	ldr	r3, [r5, #16]
 8013c3a:	443a      	add	r2, r7
 8013c3c:	443b      	add	r3, r7
 8013c3e:	60aa      	str	r2, [r5, #8]
 8013c40:	612b      	str	r3, [r5, #16]
 8013c42:	e7ed      	b.n	8013c20 <ucdr_serialize_endian_array_char+0x40>

08013c44 <ucdr_deserialize_endian_array_char>:
 8013c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c48:	4619      	mov	r1, r3
 8013c4a:	461f      	mov	r7, r3
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	4690      	mov	r8, r2
 8013c50:	f7f7 f98c 	bl	800af6c <ucdr_check_buffer_available_for>
 8013c54:	b9e0      	cbnz	r0, 8013c90 <ucdr_deserialize_endian_array_char+0x4c>
 8013c56:	463e      	mov	r6, r7
 8013c58:	e009      	b.n	8013c6e <ucdr_deserialize_endian_array_char+0x2a>
 8013c5a:	68a9      	ldr	r1, [r5, #8]
 8013c5c:	f001 fb45 	bl	80152ea <memcpy>
 8013c60:	68ab      	ldr	r3, [r5, #8]
 8013c62:	6928      	ldr	r0, [r5, #16]
 8013c64:	4423      	add	r3, r4
 8013c66:	4420      	add	r0, r4
 8013c68:	1b36      	subs	r6, r6, r4
 8013c6a:	60ab      	str	r3, [r5, #8]
 8013c6c:	6128      	str	r0, [r5, #16]
 8013c6e:	2201      	movs	r2, #1
 8013c70:	4631      	mov	r1, r6
 8013c72:	4628      	mov	r0, r5
 8013c74:	f7f7 fa02 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	1bb8      	subs	r0, r7, r6
 8013c7c:	4440      	add	r0, r8
 8013c7e:	4622      	mov	r2, r4
 8013c80:	2c00      	cmp	r4, #0
 8013c82:	d1ea      	bne.n	8013c5a <ucdr_deserialize_endian_array_char+0x16>
 8013c84:	2301      	movs	r3, #1
 8013c86:	7da8      	ldrb	r0, [r5, #22]
 8013c88:	756b      	strb	r3, [r5, #21]
 8013c8a:	4058      	eors	r0, r3
 8013c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c90:	463a      	mov	r2, r7
 8013c92:	68a9      	ldr	r1, [r5, #8]
 8013c94:	4640      	mov	r0, r8
 8013c96:	f001 fb28 	bl	80152ea <memcpy>
 8013c9a:	68aa      	ldr	r2, [r5, #8]
 8013c9c:	692b      	ldr	r3, [r5, #16]
 8013c9e:	443a      	add	r2, r7
 8013ca0:	443b      	add	r3, r7
 8013ca2:	60aa      	str	r2, [r5, #8]
 8013ca4:	612b      	str	r3, [r5, #16]
 8013ca6:	e7ed      	b.n	8013c84 <ucdr_deserialize_endian_array_char+0x40>

08013ca8 <ucdr_serialize_array_uint8_t>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	4688      	mov	r8, r1
 8013cae:	4611      	mov	r1, r2
 8013cb0:	4617      	mov	r7, r2
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	f7f7 f95a 	bl	800af6c <ucdr_check_buffer_available_for>
 8013cb8:	b9e0      	cbnz	r0, 8013cf4 <ucdr_serialize_array_uint8_t+0x4c>
 8013cba:	463e      	mov	r6, r7
 8013cbc:	e009      	b.n	8013cd2 <ucdr_serialize_array_uint8_t+0x2a>
 8013cbe:	68a8      	ldr	r0, [r5, #8]
 8013cc0:	f001 fb13 	bl	80152ea <memcpy>
 8013cc4:	68aa      	ldr	r2, [r5, #8]
 8013cc6:	692b      	ldr	r3, [r5, #16]
 8013cc8:	4422      	add	r2, r4
 8013cca:	4423      	add	r3, r4
 8013ccc:	1b36      	subs	r6, r6, r4
 8013cce:	60aa      	str	r2, [r5, #8]
 8013cd0:	612b      	str	r3, [r5, #16]
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f7f7 f9d0 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 8013cdc:	1bb9      	subs	r1, r7, r6
 8013cde:	4441      	add	r1, r8
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	4602      	mov	r2, r0
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d1ea      	bne.n	8013cbe <ucdr_serialize_array_uint8_t+0x16>
 8013ce8:	2301      	movs	r3, #1
 8013cea:	7da8      	ldrb	r0, [r5, #22]
 8013cec:	756b      	strb	r3, [r5, #21]
 8013cee:	4058      	eors	r0, r3
 8013cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf4:	463a      	mov	r2, r7
 8013cf6:	68a8      	ldr	r0, [r5, #8]
 8013cf8:	4641      	mov	r1, r8
 8013cfa:	f001 faf6 	bl	80152ea <memcpy>
 8013cfe:	68aa      	ldr	r2, [r5, #8]
 8013d00:	692b      	ldr	r3, [r5, #16]
 8013d02:	443a      	add	r2, r7
 8013d04:	443b      	add	r3, r7
 8013d06:	60aa      	str	r2, [r5, #8]
 8013d08:	612b      	str	r3, [r5, #16]
 8013d0a:	e7ed      	b.n	8013ce8 <ucdr_serialize_array_uint8_t+0x40>

08013d0c <ucdr_serialize_endian_array_uint8_t>:
 8013d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d10:	4619      	mov	r1, r3
 8013d12:	461f      	mov	r7, r3
 8013d14:	4605      	mov	r5, r0
 8013d16:	4690      	mov	r8, r2
 8013d18:	f7f7 f928 	bl	800af6c <ucdr_check_buffer_available_for>
 8013d1c:	b9e0      	cbnz	r0, 8013d58 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013d1e:	463e      	mov	r6, r7
 8013d20:	e009      	b.n	8013d36 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013d22:	68a8      	ldr	r0, [r5, #8]
 8013d24:	f001 fae1 	bl	80152ea <memcpy>
 8013d28:	68ab      	ldr	r3, [r5, #8]
 8013d2a:	6928      	ldr	r0, [r5, #16]
 8013d2c:	4423      	add	r3, r4
 8013d2e:	4420      	add	r0, r4
 8013d30:	1b36      	subs	r6, r6, r4
 8013d32:	60ab      	str	r3, [r5, #8]
 8013d34:	6128      	str	r0, [r5, #16]
 8013d36:	4631      	mov	r1, r6
 8013d38:	2201      	movs	r2, #1
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	f7f7 f99e 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 8013d40:	1bb9      	subs	r1, r7, r6
 8013d42:	4441      	add	r1, r8
 8013d44:	4604      	mov	r4, r0
 8013d46:	4602      	mov	r2, r0
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d1ea      	bne.n	8013d22 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	7da8      	ldrb	r0, [r5, #22]
 8013d50:	756b      	strb	r3, [r5, #21]
 8013d52:	4058      	eors	r0, r3
 8013d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d58:	463a      	mov	r2, r7
 8013d5a:	68a8      	ldr	r0, [r5, #8]
 8013d5c:	4641      	mov	r1, r8
 8013d5e:	f001 fac4 	bl	80152ea <memcpy>
 8013d62:	68aa      	ldr	r2, [r5, #8]
 8013d64:	692b      	ldr	r3, [r5, #16]
 8013d66:	443a      	add	r2, r7
 8013d68:	443b      	add	r3, r7
 8013d6a:	60aa      	str	r2, [r5, #8]
 8013d6c:	612b      	str	r3, [r5, #16]
 8013d6e:	e7ed      	b.n	8013d4c <ucdr_serialize_endian_array_uint8_t+0x40>

08013d70 <ucdr_deserialize_array_uint8_t>:
 8013d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d74:	4688      	mov	r8, r1
 8013d76:	4611      	mov	r1, r2
 8013d78:	4617      	mov	r7, r2
 8013d7a:	4605      	mov	r5, r0
 8013d7c:	f7f7 f8f6 	bl	800af6c <ucdr_check_buffer_available_for>
 8013d80:	b9e0      	cbnz	r0, 8013dbc <ucdr_deserialize_array_uint8_t+0x4c>
 8013d82:	463e      	mov	r6, r7
 8013d84:	e009      	b.n	8013d9a <ucdr_deserialize_array_uint8_t+0x2a>
 8013d86:	68a9      	ldr	r1, [r5, #8]
 8013d88:	f001 faaf 	bl	80152ea <memcpy>
 8013d8c:	68aa      	ldr	r2, [r5, #8]
 8013d8e:	692b      	ldr	r3, [r5, #16]
 8013d90:	4422      	add	r2, r4
 8013d92:	4423      	add	r3, r4
 8013d94:	1b36      	subs	r6, r6, r4
 8013d96:	60aa      	str	r2, [r5, #8]
 8013d98:	612b      	str	r3, [r5, #16]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	4631      	mov	r1, r6
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f7f7 f96c 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 8013da4:	4604      	mov	r4, r0
 8013da6:	1bb8      	subs	r0, r7, r6
 8013da8:	4440      	add	r0, r8
 8013daa:	4622      	mov	r2, r4
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	d1ea      	bne.n	8013d86 <ucdr_deserialize_array_uint8_t+0x16>
 8013db0:	2301      	movs	r3, #1
 8013db2:	7da8      	ldrb	r0, [r5, #22]
 8013db4:	756b      	strb	r3, [r5, #21]
 8013db6:	4058      	eors	r0, r3
 8013db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dbc:	463a      	mov	r2, r7
 8013dbe:	68a9      	ldr	r1, [r5, #8]
 8013dc0:	4640      	mov	r0, r8
 8013dc2:	f001 fa92 	bl	80152ea <memcpy>
 8013dc6:	68aa      	ldr	r2, [r5, #8]
 8013dc8:	692b      	ldr	r3, [r5, #16]
 8013dca:	443a      	add	r2, r7
 8013dcc:	443b      	add	r3, r7
 8013dce:	60aa      	str	r2, [r5, #8]
 8013dd0:	612b      	str	r3, [r5, #16]
 8013dd2:	e7ed      	b.n	8013db0 <ucdr_deserialize_array_uint8_t+0x40>

08013dd4 <ucdr_deserialize_endian_array_uint8_t>:
 8013dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd8:	4619      	mov	r1, r3
 8013dda:	461f      	mov	r7, r3
 8013ddc:	4605      	mov	r5, r0
 8013dde:	4690      	mov	r8, r2
 8013de0:	f7f7 f8c4 	bl	800af6c <ucdr_check_buffer_available_for>
 8013de4:	b9e0      	cbnz	r0, 8013e20 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013de6:	463e      	mov	r6, r7
 8013de8:	e009      	b.n	8013dfe <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013dea:	68a9      	ldr	r1, [r5, #8]
 8013dec:	f001 fa7d 	bl	80152ea <memcpy>
 8013df0:	68ab      	ldr	r3, [r5, #8]
 8013df2:	6928      	ldr	r0, [r5, #16]
 8013df4:	4423      	add	r3, r4
 8013df6:	4420      	add	r0, r4
 8013df8:	1b36      	subs	r6, r6, r4
 8013dfa:	60ab      	str	r3, [r5, #8]
 8013dfc:	6128      	str	r0, [r5, #16]
 8013dfe:	2201      	movs	r2, #1
 8013e00:	4631      	mov	r1, r6
 8013e02:	4628      	mov	r0, r5
 8013e04:	f7f7 f93a 	bl	800b07c <ucdr_check_final_buffer_behavior_array>
 8013e08:	4604      	mov	r4, r0
 8013e0a:	1bb8      	subs	r0, r7, r6
 8013e0c:	4440      	add	r0, r8
 8013e0e:	4622      	mov	r2, r4
 8013e10:	2c00      	cmp	r4, #0
 8013e12:	d1ea      	bne.n	8013dea <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013e14:	2301      	movs	r3, #1
 8013e16:	7da8      	ldrb	r0, [r5, #22]
 8013e18:	756b      	strb	r3, [r5, #21]
 8013e1a:	4058      	eors	r0, r3
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	463a      	mov	r2, r7
 8013e22:	68a9      	ldr	r1, [r5, #8]
 8013e24:	4640      	mov	r0, r8
 8013e26:	f001 fa60 	bl	80152ea <memcpy>
 8013e2a:	68aa      	ldr	r2, [r5, #8]
 8013e2c:	692b      	ldr	r3, [r5, #16]
 8013e2e:	443a      	add	r2, r7
 8013e30:	443b      	add	r3, r7
 8013e32:	60aa      	str	r2, [r5, #8]
 8013e34:	612b      	str	r3, [r5, #16]
 8013e36:	e7ed      	b.n	8013e14 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013e38 <ucdr_serialize_sequence_char>:
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	4615      	mov	r5, r2
 8013e3c:	460e      	mov	r6, r1
 8013e3e:	7d01      	ldrb	r1, [r0, #20]
 8013e40:	4604      	mov	r4, r0
 8013e42:	f7f6 fa95 	bl	800a370 <ucdr_serialize_endian_uint32_t>
 8013e46:	b90d      	cbnz	r5, 8013e4c <ucdr_serialize_sequence_char+0x14>
 8013e48:	2001      	movs	r0, #1
 8013e4a:	bd70      	pop	{r4, r5, r6, pc}
 8013e4c:	7d21      	ldrb	r1, [r4, #20]
 8013e4e:	462b      	mov	r3, r5
 8013e50:	4632      	mov	r2, r6
 8013e52:	4620      	mov	r0, r4
 8013e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e58:	f7ff bec2 	b.w	8013be0 <ucdr_serialize_endian_array_char>

08013e5c <ucdr_deserialize_sequence_char>:
 8013e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e60:	461d      	mov	r5, r3
 8013e62:	4616      	mov	r6, r2
 8013e64:	460f      	mov	r7, r1
 8013e66:	461a      	mov	r2, r3
 8013e68:	7d01      	ldrb	r1, [r0, #20]
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	f7f6 fba8 	bl	800a5c0 <ucdr_deserialize_endian_uint32_t>
 8013e70:	682b      	ldr	r3, [r5, #0]
 8013e72:	429e      	cmp	r6, r3
 8013e74:	bf3c      	itt	cc
 8013e76:	2201      	movcc	r2, #1
 8013e78:	75a2      	strbcc	r2, [r4, #22]
 8013e7a:	b913      	cbnz	r3, 8013e82 <ucdr_deserialize_sequence_char+0x26>
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e82:	7d21      	ldrb	r1, [r4, #20]
 8013e84:	463a      	mov	r2, r7
 8013e86:	4620      	mov	r0, r4
 8013e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8c:	f7ff beda 	b.w	8013c44 <ucdr_deserialize_endian_array_char>

08013e90 <ucdr_serialize_sequence_uint8_t>:
 8013e90:	b570      	push	{r4, r5, r6, lr}
 8013e92:	4615      	mov	r5, r2
 8013e94:	460e      	mov	r6, r1
 8013e96:	7d01      	ldrb	r1, [r0, #20]
 8013e98:	4604      	mov	r4, r0
 8013e9a:	f7f6 fa69 	bl	800a370 <ucdr_serialize_endian_uint32_t>
 8013e9e:	b90d      	cbnz	r5, 8013ea4 <ucdr_serialize_sequence_uint8_t+0x14>
 8013ea0:	2001      	movs	r0, #1
 8013ea2:	bd70      	pop	{r4, r5, r6, pc}
 8013ea4:	7d21      	ldrb	r1, [r4, #20]
 8013ea6:	462b      	mov	r3, r5
 8013ea8:	4632      	mov	r2, r6
 8013eaa:	4620      	mov	r0, r4
 8013eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013eb0:	f7ff bf2c 	b.w	8013d0c <ucdr_serialize_endian_array_uint8_t>

08013eb4 <ucdr_deserialize_sequence_uint8_t>:
 8013eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb8:	461d      	mov	r5, r3
 8013eba:	4616      	mov	r6, r2
 8013ebc:	460f      	mov	r7, r1
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	7d01      	ldrb	r1, [r0, #20]
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	f7f6 fb7c 	bl	800a5c0 <ucdr_deserialize_endian_uint32_t>
 8013ec8:	682b      	ldr	r3, [r5, #0]
 8013eca:	429e      	cmp	r6, r3
 8013ecc:	bf3c      	itt	cc
 8013ece:	2201      	movcc	r2, #1
 8013ed0:	75a2      	strbcc	r2, [r4, #22]
 8013ed2:	b913      	cbnz	r3, 8013eda <ucdr_deserialize_sequence_uint8_t+0x26>
 8013ed4:	2001      	movs	r0, #1
 8013ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eda:	7d21      	ldrb	r1, [r4, #20]
 8013edc:	463a      	mov	r2, r7
 8013ede:	4620      	mov	r0, r4
 8013ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee4:	f7ff bf76 	b.w	8013dd4 <ucdr_deserialize_endian_array_uint8_t>

08013ee8 <ucdr_serialize_string>:
 8013ee8:	b510      	push	{r4, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	4604      	mov	r4, r0
 8013eee:	4608      	mov	r0, r1
 8013ef0:	9101      	str	r1, [sp, #4]
 8013ef2:	f7ec f97f 	bl	80001f4 <strlen>
 8013ef6:	9901      	ldr	r1, [sp, #4]
 8013ef8:	1c42      	adds	r2, r0, #1
 8013efa:	4620      	mov	r0, r4
 8013efc:	b002      	add	sp, #8
 8013efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f02:	f7ff bf99 	b.w	8013e38 <ucdr_serialize_sequence_char>
 8013f06:	bf00      	nop

08013f08 <ucdr_deserialize_string>:
 8013f08:	b500      	push	{lr}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	ab01      	add	r3, sp, #4
 8013f0e:	f7ff ffa5 	bl	8013e5c <ucdr_deserialize_sequence_char>
 8013f12:	b003      	add	sp, #12
 8013f14:	f85d fb04 	ldr.w	pc, [sp], #4

08013f18 <uxr_init_input_best_effort_stream>:
 8013f18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f1c:	8003      	strh	r3, [r0, #0]
 8013f1e:	4770      	bx	lr

08013f20 <uxr_reset_input_best_effort_stream>:
 8013f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f24:	8003      	strh	r3, [r0, #0]
 8013f26:	4770      	bx	lr

08013f28 <uxr_receive_best_effort_message>:
 8013f28:	b538      	push	{r3, r4, r5, lr}
 8013f2a:	4604      	mov	r4, r0
 8013f2c:	8800      	ldrh	r0, [r0, #0]
 8013f2e:	460d      	mov	r5, r1
 8013f30:	f000 fd22 	bl	8014978 <uxr_seq_num_cmp>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013f3c:	bfb8      	it	lt
 8013f3e:	8025      	strhlt	r5, [r4, #0]
 8013f40:	bd38      	pop	{r3, r4, r5, pc}
 8013f42:	bf00      	nop

08013f44 <on_full_input_buffer>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	4605      	mov	r5, r0
 8013f48:	460c      	mov	r4, r1
 8013f4a:	682b      	ldr	r3, [r5, #0]
 8013f4c:	6809      	ldr	r1, [r1, #0]
 8013f4e:	8920      	ldrh	r0, [r4, #8]
 8013f50:	6862      	ldr	r2, [r4, #4]
 8013f52:	fbb2 f2f0 	udiv	r2, r2, r0
 8013f56:	eba3 0c01 	sub.w	ip, r3, r1
 8013f5a:	fbbc fcf2 	udiv	ip, ip, r2
 8013f5e:	f10c 0c01 	add.w	ip, ip, #1
 8013f62:	fa1f f38c 	uxth.w	r3, ip
 8013f66:	fbb3 f6f0 	udiv	r6, r3, r0
 8013f6a:	fb00 3316 	mls	r3, r0, r6, r3
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	fb02 f303 	mul.w	r3, r2, r3
 8013f74:	1d18      	adds	r0, r3, #4
 8013f76:	4408      	add	r0, r1
 8013f78:	7d26      	ldrb	r6, [r4, #20]
 8013f7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013f7e:	b116      	cbz	r6, 8013f86 <on_full_input_buffer+0x42>
 8013f80:	2600      	movs	r6, #0
 8013f82:	f840 6c04 	str.w	r6, [r0, #-4]
 8013f86:	2a03      	cmp	r2, #3
 8013f88:	d801      	bhi.n	8013f8e <on_full_input_buffer+0x4a>
 8013f8a:	2001      	movs	r0, #1
 8013f8c:	bd70      	pop	{r4, r5, r6, pc}
 8013f8e:	3308      	adds	r3, #8
 8013f90:	4419      	add	r1, r3
 8013f92:	4628      	mov	r0, r5
 8013f94:	692b      	ldr	r3, [r5, #16]
 8013f96:	3a04      	subs	r2, #4
 8013f98:	f7f7 f834 	bl	800b004 <ucdr_init_buffer_origin>
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	4903      	ldr	r1, [pc, #12]	@ (8013fac <on_full_input_buffer+0x68>)
 8013fa0:	4622      	mov	r2, r4
 8013fa2:	f7f7 f80b 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 8013fa6:	2000      	movs	r0, #0
 8013fa8:	bd70      	pop	{r4, r5, r6, pc}
 8013faa:	bf00      	nop
 8013fac:	08013f45 	.word	0x08013f45

08013fb0 <uxr_init_input_reliable_stream>:
 8013fb0:	b500      	push	{lr}
 8013fb2:	e9c0 1200 	strd	r1, r2, [r0]
 8013fb6:	f04f 0e00 	mov.w	lr, #0
 8013fba:	9a01      	ldr	r2, [sp, #4]
 8013fbc:	8103      	strh	r3, [r0, #8]
 8013fbe:	6102      	str	r2, [r0, #16]
 8013fc0:	f880 e014 	strb.w	lr, [r0, #20]
 8013fc4:	b1d3      	cbz	r3, 8013ffc <uxr_init_input_reliable_stream+0x4c>
 8013fc6:	f8c1 e000 	str.w	lr, [r1]
 8013fca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013fce:	f1bc 0f01 	cmp.w	ip, #1
 8013fd2:	d913      	bls.n	8013ffc <uxr_init_input_reliable_stream+0x4c>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	fbb3 f1fc 	udiv	r1, r3, ip
 8013fda:	fb0c 3111 	mls	r1, ip, r1, r3
 8013fde:	b289      	uxth	r1, r1
 8013fe0:	6842      	ldr	r2, [r0, #4]
 8013fe2:	fbb2 f2fc 	udiv	r2, r2, ip
 8013fe6:	fb01 f202 	mul.w	r2, r1, r2
 8013fea:	6801      	ldr	r1, [r0, #0]
 8013fec:	f841 e002 	str.w	lr, [r1, r2]
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	459c      	cmp	ip, r3
 8013ffa:	d8ec      	bhi.n	8013fd6 <uxr_init_input_reliable_stream+0x26>
 8013ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014000:	60c3      	str	r3, [r0, #12]
 8014002:	f85d fb04 	ldr.w	pc, [sp], #4
 8014006:	bf00      	nop

08014008 <uxr_reset_input_reliable_stream>:
 8014008:	8901      	ldrh	r1, [r0, #8]
 801400a:	b1e9      	cbz	r1, 8014048 <uxr_reset_input_reliable_stream+0x40>
 801400c:	f04f 0c00 	mov.w	ip, #0
 8014010:	b500      	push	{lr}
 8014012:	4663      	mov	r3, ip
 8014014:	46e6      	mov	lr, ip
 8014016:	fbb3 f2f1 	udiv	r2, r3, r1
 801401a:	fb01 3312 	mls	r3, r1, r2, r3
 801401e:	b29b      	uxth	r3, r3
 8014020:	6842      	ldr	r2, [r0, #4]
 8014022:	fbb2 f2f1 	udiv	r2, r2, r1
 8014026:	fb02 f303 	mul.w	r3, r2, r3
 801402a:	6802      	ldr	r2, [r0, #0]
 801402c:	f842 e003 	str.w	lr, [r2, r3]
 8014030:	f10c 0c01 	add.w	ip, ip, #1
 8014034:	8901      	ldrh	r1, [r0, #8]
 8014036:	fa1f f38c 	uxth.w	r3, ip
 801403a:	4299      	cmp	r1, r3
 801403c:	d8eb      	bhi.n	8014016 <uxr_reset_input_reliable_stream+0xe>
 801403e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014042:	60c3      	str	r3, [r0, #12]
 8014044:	f85d fb04 	ldr.w	pc, [sp], #4
 8014048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801404c:	60c3      	str	r3, [r0, #12]
 801404e:	4770      	bx	lr

08014050 <uxr_receive_reliable_message>:
 8014050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014054:	4604      	mov	r4, r0
 8014056:	460d      	mov	r5, r1
 8014058:	8901      	ldrh	r1, [r0, #8]
 801405a:	8980      	ldrh	r0, [r0, #12]
 801405c:	4690      	mov	r8, r2
 801405e:	461f      	mov	r7, r3
 8014060:	f000 fc82 	bl	8014968 <uxr_seq_num_add>
 8014064:	4629      	mov	r1, r5
 8014066:	4606      	mov	r6, r0
 8014068:	89a0      	ldrh	r0, [r4, #12]
 801406a:	f000 fc85 	bl	8014978 <uxr_seq_num_cmp>
 801406e:	2800      	cmp	r0, #0
 8014070:	db0a      	blt.n	8014088 <uxr_receive_reliable_message+0x38>
 8014072:	2600      	movs	r6, #0
 8014074:	89e0      	ldrh	r0, [r4, #14]
 8014076:	4629      	mov	r1, r5
 8014078:	f000 fc7e 	bl	8014978 <uxr_seq_num_cmp>
 801407c:	2800      	cmp	r0, #0
 801407e:	da00      	bge.n	8014082 <uxr_receive_reliable_message+0x32>
 8014080:	81e5      	strh	r5, [r4, #14]
 8014082:	4630      	mov	r0, r6
 8014084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014088:	4630      	mov	r0, r6
 801408a:	4629      	mov	r1, r5
 801408c:	f000 fc74 	bl	8014978 <uxr_seq_num_cmp>
 8014090:	2800      	cmp	r0, #0
 8014092:	dbee      	blt.n	8014072 <uxr_receive_reliable_message+0x22>
 8014094:	6923      	ldr	r3, [r4, #16]
 8014096:	4640      	mov	r0, r8
 8014098:	4798      	blx	r3
 801409a:	2101      	movs	r1, #1
 801409c:	4681      	mov	r9, r0
 801409e:	89a0      	ldrh	r0, [r4, #12]
 80140a0:	f000 fc62 	bl	8014968 <uxr_seq_num_add>
 80140a4:	f1b9 0f00 	cmp.w	r9, #0
 80140a8:	d101      	bne.n	80140ae <uxr_receive_reliable_message+0x5e>
 80140aa:	4285      	cmp	r5, r0
 80140ac:	d047      	beq.n	801413e <uxr_receive_reliable_message+0xee>
 80140ae:	8922      	ldrh	r2, [r4, #8]
 80140b0:	fbb5 f0f2 	udiv	r0, r5, r2
 80140b4:	fb02 5010 	mls	r0, r2, r0, r5
 80140b8:	b280      	uxth	r0, r0
 80140ba:	6863      	ldr	r3, [r4, #4]
 80140bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80140c0:	fb00 f303 	mul.w	r3, r0, r3
 80140c4:	6820      	ldr	r0, [r4, #0]
 80140c6:	3304      	adds	r3, #4
 80140c8:	4418      	add	r0, r3
 80140ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d1cf      	bne.n	8014072 <uxr_receive_reliable_message+0x22>
 80140d2:	4641      	mov	r1, r8
 80140d4:	463a      	mov	r2, r7
 80140d6:	f001 f908 	bl	80152ea <memcpy>
 80140da:	8921      	ldrh	r1, [r4, #8]
 80140dc:	fbb5 f2f1 	udiv	r2, r5, r1
 80140e0:	fb01 5212 	mls	r2, r1, r2, r5
 80140e4:	b292      	uxth	r2, r2
 80140e6:	6863      	ldr	r3, [r4, #4]
 80140e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80140ec:	fb02 f303 	mul.w	r3, r2, r3
 80140f0:	6822      	ldr	r2, [r4, #0]
 80140f2:	50d7      	str	r7, [r2, r3]
 80140f4:	9a08      	ldr	r2, [sp, #32]
 80140f6:	2301      	movs	r3, #1
 80140f8:	7013      	strb	r3, [r2, #0]
 80140fa:	f1b9 0f00 	cmp.w	r9, #0
 80140fe:	d0b8      	beq.n	8014072 <uxr_receive_reliable_message+0x22>
 8014100:	89a6      	ldrh	r6, [r4, #12]
 8014102:	4630      	mov	r0, r6
 8014104:	2101      	movs	r1, #1
 8014106:	f000 fc2f 	bl	8014968 <uxr_seq_num_add>
 801410a:	8922      	ldrh	r2, [r4, #8]
 801410c:	6863      	ldr	r3, [r4, #4]
 801410e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014112:	4606      	mov	r6, r0
 8014114:	fbb0 f0f2 	udiv	r0, r0, r2
 8014118:	fb02 6010 	mls	r0, r2, r0, r6
 801411c:	b280      	uxth	r0, r0
 801411e:	fb00 f303 	mul.w	r3, r0, r3
 8014122:	6820      	ldr	r0, [r4, #0]
 8014124:	3304      	adds	r3, #4
 8014126:	4418      	add	r0, r3
 8014128:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d0a0      	beq.n	8014072 <uxr_receive_reliable_message+0x22>
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	4798      	blx	r3
 8014134:	2802      	cmp	r0, #2
 8014136:	d008      	beq.n	801414a <uxr_receive_reliable_message+0xfa>
 8014138:	2801      	cmp	r0, #1
 801413a:	d0e2      	beq.n	8014102 <uxr_receive_reliable_message+0xb2>
 801413c:	e799      	b.n	8014072 <uxr_receive_reliable_message+0x22>
 801413e:	9b08      	ldr	r3, [sp, #32]
 8014140:	81a5      	strh	r5, [r4, #12]
 8014142:	2601      	movs	r6, #1
 8014144:	f883 9000 	strb.w	r9, [r3]
 8014148:	e794      	b.n	8014074 <uxr_receive_reliable_message+0x24>
 801414a:	2601      	movs	r6, #1
 801414c:	e792      	b.n	8014074 <uxr_receive_reliable_message+0x24>
 801414e:	bf00      	nop

08014150 <uxr_next_input_reliable_buffer_available>:
 8014150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014154:	4604      	mov	r4, r0
 8014156:	460f      	mov	r7, r1
 8014158:	8980      	ldrh	r0, [r0, #12]
 801415a:	2101      	movs	r1, #1
 801415c:	4690      	mov	r8, r2
 801415e:	f000 fc03 	bl	8014968 <uxr_seq_num_add>
 8014162:	8922      	ldrh	r2, [r4, #8]
 8014164:	fbb0 f6f2 	udiv	r6, r0, r2
 8014168:	fb02 0616 	mls	r6, r2, r6, r0
 801416c:	b2b6      	uxth	r6, r6
 801416e:	6863      	ldr	r3, [r4, #4]
 8014170:	fbb3 f3f2 	udiv	r3, r3, r2
 8014174:	fb06 f303 	mul.w	r3, r6, r3
 8014178:	6826      	ldr	r6, [r4, #0]
 801417a:	3304      	adds	r3, #4
 801417c:	441e      	add	r6, r3
 801417e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014182:	f1b9 0f00 	cmp.w	r9, #0
 8014186:	d023      	beq.n	80141d0 <uxr_next_input_reliable_buffer_available+0x80>
 8014188:	6923      	ldr	r3, [r4, #16]
 801418a:	4605      	mov	r5, r0
 801418c:	4630      	mov	r0, r6
 801418e:	4798      	blx	r3
 8014190:	4682      	mov	sl, r0
 8014192:	b300      	cbz	r0, 80141d6 <uxr_next_input_reliable_buffer_available+0x86>
 8014194:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014198:	2101      	movs	r1, #1
 801419a:	4650      	mov	r0, sl
 801419c:	f000 fbe4 	bl	8014968 <uxr_seq_num_add>
 80141a0:	8921      	ldrh	r1, [r4, #8]
 80141a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80141a6:	4682      	mov	sl, r0
 80141a8:	fb01 0212 	mls	r2, r1, r2, r0
 80141ac:	e9d4 0300 	ldrd	r0, r3, [r4]
 80141b0:	b292      	uxth	r2, r2
 80141b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80141b6:	fb02 f303 	mul.w	r3, r2, r3
 80141ba:	3304      	adds	r3, #4
 80141bc:	4418      	add	r0, r3
 80141be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80141c2:	b12b      	cbz	r3, 80141d0 <uxr_next_input_reliable_buffer_available+0x80>
 80141c4:	6923      	ldr	r3, [r4, #16]
 80141c6:	4798      	blx	r3
 80141c8:	2802      	cmp	r0, #2
 80141ca:	d01b      	beq.n	8014204 <uxr_next_input_reliable_buffer_available+0xb4>
 80141cc:	2801      	cmp	r0, #1
 80141ce:	d0e3      	beq.n	8014198 <uxr_next_input_reliable_buffer_available+0x48>
 80141d0:	2000      	movs	r0, #0
 80141d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141d6:	464a      	mov	r2, r9
 80141d8:	4631      	mov	r1, r6
 80141da:	4638      	mov	r0, r7
 80141dc:	f7f6 ff1a 	bl	800b014 <ucdr_init_buffer>
 80141e0:	8921      	ldrh	r1, [r4, #8]
 80141e2:	fbb5 f2f1 	udiv	r2, r5, r1
 80141e6:	fb01 5212 	mls	r2, r1, r2, r5
 80141ea:	b292      	uxth	r2, r2
 80141ec:	6863      	ldr	r3, [r4, #4]
 80141ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80141f2:	fb02 f303 	mul.w	r3, r2, r3
 80141f6:	6822      	ldr	r2, [r4, #0]
 80141f8:	f842 a003 	str.w	sl, [r2, r3]
 80141fc:	2001      	movs	r0, #1
 80141fe:	81a5      	strh	r5, [r4, #12]
 8014200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014204:	8920      	ldrh	r0, [r4, #8]
 8014206:	fbb5 f3f0 	udiv	r3, r5, r0
 801420a:	fb00 5513 	mls	r5, r0, r3, r5
 801420e:	b2ad      	uxth	r5, r5
 8014210:	6863      	ldr	r3, [r4, #4]
 8014212:	fbb3 f3f0 	udiv	r3, r3, r0
 8014216:	fb03 f505 	mul.w	r5, r3, r5
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	2000      	movs	r0, #0
 801421e:	5158      	str	r0, [r3, r5]
 8014220:	eb06 0108 	add.w	r1, r6, r8
 8014224:	eba9 0208 	sub.w	r2, r9, r8
 8014228:	4638      	mov	r0, r7
 801422a:	f7f6 fef3 	bl	800b014 <ucdr_init_buffer>
 801422e:	4638      	mov	r0, r7
 8014230:	4903      	ldr	r1, [pc, #12]	@ (8014240 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014232:	4622      	mov	r2, r4
 8014234:	f7f6 fec2 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 8014238:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801423c:	2001      	movs	r0, #1
 801423e:	e7c8      	b.n	80141d2 <uxr_next_input_reliable_buffer_available+0x82>
 8014240:	08013f45 	.word	0x08013f45

08014244 <uxr_process_heartbeat>:
 8014244:	b538      	push	{r3, r4, r5, lr}
 8014246:	4611      	mov	r1, r2
 8014248:	4604      	mov	r4, r0
 801424a:	89c0      	ldrh	r0, [r0, #14]
 801424c:	4615      	mov	r5, r2
 801424e:	f000 fb93 	bl	8014978 <uxr_seq_num_cmp>
 8014252:	2800      	cmp	r0, #0
 8014254:	bfb8      	it	lt
 8014256:	81e5      	strhlt	r5, [r4, #14]
 8014258:	bd38      	pop	{r3, r4, r5, pc}
 801425a:	bf00      	nop

0801425c <uxr_compute_acknack>:
 801425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014260:	8903      	ldrh	r3, [r0, #8]
 8014262:	8985      	ldrh	r5, [r0, #12]
 8014264:	4604      	mov	r4, r0
 8014266:	460e      	mov	r6, r1
 8014268:	b1d3      	cbz	r3, 80142a0 <uxr_compute_acknack+0x44>
 801426a:	4628      	mov	r0, r5
 801426c:	2701      	movs	r7, #1
 801426e:	e003      	b.n	8014278 <uxr_compute_acknack+0x1c>
 8014270:	4567      	cmp	r7, ip
 8014272:	d215      	bcs.n	80142a0 <uxr_compute_acknack+0x44>
 8014274:	89a0      	ldrh	r0, [r4, #12]
 8014276:	3701      	adds	r7, #1
 8014278:	b2b9      	uxth	r1, r7
 801427a:	f000 fb75 	bl	8014968 <uxr_seq_num_add>
 801427e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014282:	fbb0 f3fc 	udiv	r3, r0, ip
 8014286:	fb0c 0313 	mls	r3, ip, r3, r0
 801428a:	b29a      	uxth	r2, r3
 801428c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014290:	fbb3 f3fc 	udiv	r3, r3, ip
 8014294:	fb02 f303 	mul.w	r3, r2, r3
 8014298:	58cb      	ldr	r3, [r1, r3]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d1e8      	bne.n	8014270 <uxr_compute_acknack+0x14>
 801429e:	4605      	mov	r5, r0
 80142a0:	8035      	strh	r5, [r6, #0]
 80142a2:	2101      	movs	r1, #1
 80142a4:	4628      	mov	r0, r5
 80142a6:	89e7      	ldrh	r7, [r4, #14]
 80142a8:	f000 fb62 	bl	8014970 <uxr_seq_num_sub>
 80142ac:	4601      	mov	r1, r0
 80142ae:	4638      	mov	r0, r7
 80142b0:	f000 fb5e 	bl	8014970 <uxr_seq_num_sub>
 80142b4:	4605      	mov	r5, r0
 80142b6:	b318      	cbz	r0, 8014300 <uxr_compute_acknack+0xa4>
 80142b8:	f04f 0900 	mov.w	r9, #0
 80142bc:	464f      	mov	r7, r9
 80142be:	f04f 0801 	mov.w	r8, #1
 80142c2:	fa1f f189 	uxth.w	r1, r9
 80142c6:	8830      	ldrh	r0, [r6, #0]
 80142c8:	f000 fb4e 	bl	8014968 <uxr_seq_num_add>
 80142cc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142d0:	fbb0 f3fc 	udiv	r3, r0, ip
 80142d4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80142d8:	fb03 001c 	mls	r0, r3, ip, r0
 80142dc:	b283      	uxth	r3, r0
 80142de:	fbb2 f2fc 	udiv	r2, r2, ip
 80142e2:	fb02 f303 	mul.w	r3, r2, r3
 80142e6:	fa08 f209 	lsl.w	r2, r8, r9
 80142ea:	58cb      	ldr	r3, [r1, r3]
 80142ec:	f109 0901 	add.w	r9, r9, #1
 80142f0:	b90b      	cbnz	r3, 80142f6 <uxr_compute_acknack+0x9a>
 80142f2:	4317      	orrs	r7, r2
 80142f4:	b2bf      	uxth	r7, r7
 80142f6:	454d      	cmp	r5, r9
 80142f8:	d1e3      	bne.n	80142c2 <uxr_compute_acknack+0x66>
 80142fa:	4638      	mov	r0, r7
 80142fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014300:	4607      	mov	r7, r0
 8014302:	4638      	mov	r0, r7
 8014304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014308 <uxr_init_output_best_effort_stream>:
 8014308:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801430c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014310:	6001      	str	r1, [r0, #0]
 8014312:	7303      	strb	r3, [r0, #12]
 8014314:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014318:	4770      	bx	lr
 801431a:	bf00      	nop

0801431c <uxr_reset_output_best_effort_stream>:
 801431c:	7b02      	ldrb	r2, [r0, #12]
 801431e:	6042      	str	r2, [r0, #4]
 8014320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014324:	81c3      	strh	r3, [r0, #14]
 8014326:	4770      	bx	lr

08014328 <uxr_prepare_best_effort_buffer_to_write>:
 8014328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	b083      	sub	sp, #12
 801432e:	6840      	ldr	r0, [r0, #4]
 8014330:	460d      	mov	r5, r1
 8014332:	4616      	mov	r6, r2
 8014334:	f7fd fe8a 	bl	801204c <uxr_submessage_padding>
 8014338:	6863      	ldr	r3, [r4, #4]
 801433a:	4418      	add	r0, r3
 801433c:	68a3      	ldr	r3, [r4, #8]
 801433e:	1942      	adds	r2, r0, r5
 8014340:	4293      	cmp	r3, r2
 8014342:	bf2c      	ite	cs
 8014344:	2701      	movcs	r7, #1
 8014346:	2700      	movcc	r7, #0
 8014348:	d202      	bcs.n	8014350 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801434a:	4638      	mov	r0, r7
 801434c:	b003      	add	sp, #12
 801434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014350:	9000      	str	r0, [sp, #0]
 8014352:	6821      	ldr	r1, [r4, #0]
 8014354:	4630      	mov	r0, r6
 8014356:	2300      	movs	r3, #0
 8014358:	f7f6 fe4a 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 801435c:	6861      	ldr	r1, [r4, #4]
 801435e:	4638      	mov	r0, r7
 8014360:	4429      	add	r1, r5
 8014362:	6061      	str	r1, [r4, #4]
 8014364:	b003      	add	sp, #12
 8014366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014368 <uxr_prepare_best_effort_buffer_to_send>:
 8014368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801436c:	4604      	mov	r4, r0
 801436e:	461d      	mov	r5, r3
 8014370:	6840      	ldr	r0, [r0, #4]
 8014372:	7b23      	ldrb	r3, [r4, #12]
 8014374:	4298      	cmp	r0, r3
 8014376:	bf8c      	ite	hi
 8014378:	2601      	movhi	r6, #1
 801437a:	2600      	movls	r6, #0
 801437c:	d802      	bhi.n	8014384 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801437e:	4630      	mov	r0, r6
 8014380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014384:	4688      	mov	r8, r1
 8014386:	89e0      	ldrh	r0, [r4, #14]
 8014388:	2101      	movs	r1, #1
 801438a:	4617      	mov	r7, r2
 801438c:	f000 faec 	bl	8014968 <uxr_seq_num_add>
 8014390:	6823      	ldr	r3, [r4, #0]
 8014392:	81e0      	strh	r0, [r4, #14]
 8014394:	8028      	strh	r0, [r5, #0]
 8014396:	f8c8 3000 	str.w	r3, [r8]
 801439a:	6863      	ldr	r3, [r4, #4]
 801439c:	603b      	str	r3, [r7, #0]
 801439e:	7b23      	ldrb	r3, [r4, #12]
 80143a0:	6063      	str	r3, [r4, #4]
 80143a2:	4630      	mov	r0, r6
 80143a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143a8 <on_full_output_buffer>:
 80143a8:	b538      	push	{r3, r4, r5, lr}
 80143aa:	6802      	ldr	r2, [r0, #0]
 80143ac:	460c      	mov	r4, r1
 80143ae:	6809      	ldr	r1, [r1, #0]
 80143b0:	8923      	ldrh	r3, [r4, #8]
 80143b2:	eba2 0c01 	sub.w	ip, r2, r1
 80143b6:	6862      	ldr	r2, [r4, #4]
 80143b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80143bc:	fbbc fcf2 	udiv	ip, ip, r2
 80143c0:	f10c 0c01 	add.w	ip, ip, #1
 80143c4:	fa1f fc8c 	uxth.w	ip, ip
 80143c8:	fbbc fef3 	udiv	lr, ip, r3
 80143cc:	fb03 c31e 	mls	r3, r3, lr, ip
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	fb02 f303 	mul.w	r3, r2, r3
 80143d6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80143da:	58ca      	ldr	r2, [r1, r3]
 80143dc:	4463      	add	r3, ip
 80143de:	eba2 020c 	sub.w	r2, r2, ip
 80143e2:	3308      	adds	r3, #8
 80143e4:	4605      	mov	r5, r0
 80143e6:	4419      	add	r1, r3
 80143e8:	3a04      	subs	r2, #4
 80143ea:	6903      	ldr	r3, [r0, #16]
 80143ec:	f7f6 fe0a 	bl	800b004 <ucdr_init_buffer_origin>
 80143f0:	4628      	mov	r0, r5
 80143f2:	4903      	ldr	r1, [pc, #12]	@ (8014400 <on_full_output_buffer+0x58>)
 80143f4:	4622      	mov	r2, r4
 80143f6:	f7f6 fde1 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 80143fa:	2000      	movs	r0, #0
 80143fc:	bd38      	pop	{r3, r4, r5, pc}
 80143fe:	bf00      	nop
 8014400:	080143a9 	.word	0x080143a9

08014404 <uxr_init_output_reliable_stream>:
 8014404:	b410      	push	{r4}
 8014406:	f89d c004 	ldrb.w	ip, [sp, #4]
 801440a:	8103      	strh	r3, [r0, #8]
 801440c:	e9c0 1200 	strd	r1, r2, [r0]
 8014410:	f880 c00c 	strb.w	ip, [r0, #12]
 8014414:	b1d3      	cbz	r3, 801444c <uxr_init_output_reliable_stream+0x48>
 8014416:	f8c1 c000 	str.w	ip, [r1]
 801441a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801441e:	f1bc 0f01 	cmp.w	ip, #1
 8014422:	d913      	bls.n	801444c <uxr_init_output_reliable_stream+0x48>
 8014424:	2301      	movs	r3, #1
 8014426:	fbb3 f1fc 	udiv	r1, r3, ip
 801442a:	fb0c 3111 	mls	r1, ip, r1, r3
 801442e:	b289      	uxth	r1, r1
 8014430:	6842      	ldr	r2, [r0, #4]
 8014432:	6804      	ldr	r4, [r0, #0]
 8014434:	fbb2 f2fc 	udiv	r2, r2, ip
 8014438:	fb01 f202 	mul.w	r2, r1, r2
 801443c:	7b01      	ldrb	r1, [r0, #12]
 801443e:	50a1      	str	r1, [r4, r2]
 8014440:	3301      	adds	r3, #1
 8014442:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014446:	b29b      	uxth	r3, r3
 8014448:	459c      	cmp	ip, r3
 801444a:	d8ec      	bhi.n	8014426 <uxr_init_output_reliable_stream+0x22>
 801444c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014450:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014454:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014458:	4905      	ldr	r1, [pc, #20]	@ (8014470 <uxr_init_output_reliable_stream+0x6c>)
 801445a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801445e:	f8c0 100e 	str.w	r1, [r0, #14]
 8014462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014466:	2300      	movs	r3, #0
 8014468:	8242      	strh	r2, [r0, #18]
 801446a:	8403      	strh	r3, [r0, #32]
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	ffff0000 	.word	0xffff0000

08014474 <uxr_reset_output_reliable_stream>:
 8014474:	8901      	ldrh	r1, [r0, #8]
 8014476:	b1b1      	cbz	r1, 80144a6 <uxr_reset_output_reliable_stream+0x32>
 8014478:	f04f 0c00 	mov.w	ip, #0
 801447c:	4663      	mov	r3, ip
 801447e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014482:	fb01 3312 	mls	r3, r1, r2, r3
 8014486:	b29b      	uxth	r3, r3
 8014488:	6842      	ldr	r2, [r0, #4]
 801448a:	fbb2 f2f1 	udiv	r2, r2, r1
 801448e:	6801      	ldr	r1, [r0, #0]
 8014490:	fb02 f303 	mul.w	r3, r2, r3
 8014494:	7b02      	ldrb	r2, [r0, #12]
 8014496:	50ca      	str	r2, [r1, r3]
 8014498:	f10c 0c01 	add.w	ip, ip, #1
 801449c:	8901      	ldrh	r1, [r0, #8]
 801449e:	fa1f f38c 	uxth.w	r3, ip
 80144a2:	4299      	cmp	r1, r3
 80144a4:	d8eb      	bhi.n	801447e <uxr_reset_output_reliable_stream+0xa>
 80144a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144aa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144ae:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80144b2:	4904      	ldr	r1, [pc, #16]	@ (80144c4 <uxr_reset_output_reliable_stream+0x50>)
 80144b4:	f8c0 100e 	str.w	r1, [r0, #14]
 80144b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144bc:	2300      	movs	r3, #0
 80144be:	8242      	strh	r2, [r0, #18]
 80144c0:	8403      	strh	r3, [r0, #32]
 80144c2:	4770      	bx	lr
 80144c4:	ffff0000 	.word	0xffff0000

080144c8 <uxr_prepare_reliable_buffer_to_write>:
 80144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144cc:	4604      	mov	r4, r0
 80144ce:	b091      	sub	sp, #68	@ 0x44
 80144d0:	8900      	ldrh	r0, [r0, #8]
 80144d2:	89e6      	ldrh	r6, [r4, #14]
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	9204      	str	r2, [sp, #16]
 80144d8:	fbb6 f2f0 	udiv	r2, r6, r0
 80144dc:	fb00 6212 	mls	r2, r0, r2, r6
 80144e0:	b292      	uxth	r2, r2
 80144e2:	6865      	ldr	r5, [r4, #4]
 80144e4:	fbb5 f5f0 	udiv	r5, r5, r0
 80144e8:	fb05 3202 	mla	r2, r5, r2, r3
 80144ec:	3204      	adds	r2, #4
 80144ee:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80144f2:	f894 900c 	ldrb.w	r9, [r4, #12]
 80144f6:	9203      	str	r2, [sp, #12]
 80144f8:	468b      	mov	fp, r1
 80144fa:	1f2f      	subs	r7, r5, #4
 80144fc:	2800      	cmp	r0, #0
 80144fe:	f000 814c 	beq.w	801479a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014502:	f04f 0c00 	mov.w	ip, #0
 8014506:	46e2      	mov	sl, ip
 8014508:	4661      	mov	r1, ip
 801450a:	fbb1 f2f0 	udiv	r2, r1, r0
 801450e:	fb00 1212 	mls	r2, r0, r2, r1
 8014512:	b292      	uxth	r2, r2
 8014514:	fb05 f202 	mul.w	r2, r5, r2
 8014518:	f10c 0c01 	add.w	ip, ip, #1
 801451c:	589a      	ldr	r2, [r3, r2]
 801451e:	454a      	cmp	r2, r9
 8014520:	bf08      	it	eq
 8014522:	f10a 0a01 	addeq.w	sl, sl, #1
 8014526:	fa1f f18c 	uxth.w	r1, ip
 801452a:	bf08      	it	eq
 801452c:	fa1f fa8a 	uxtheq.w	sl, sl
 8014530:	4281      	cmp	r1, r0
 8014532:	d3ea      	bcc.n	801450a <uxr_prepare_reliable_buffer_to_write+0x42>
 8014534:	4640      	mov	r0, r8
 8014536:	2104      	movs	r1, #4
 8014538:	f8cd a014 	str.w	sl, [sp, #20]
 801453c:	f7f6 fd6e 	bl	800b01c <ucdr_alignment>
 8014540:	4480      	add	r8, r0
 8014542:	eb08 020b 	add.w	r2, r8, fp
 8014546:	42ba      	cmp	r2, r7
 8014548:	f240 80cd 	bls.w	80146e6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801454c:	7b22      	ldrb	r2, [r4, #12]
 801454e:	445a      	add	r2, fp
 8014550:	42ba      	cmp	r2, r7
 8014552:	f240 80b5 	bls.w	80146c0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014556:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801455a:	33fc      	adds	r3, #252	@ 0xfc
 801455c:	b2ba      	uxth	r2, r7
 801455e:	4413      	add	r3, r2
 8014560:	b29b      	uxth	r3, r3
 8014562:	fb0a f903 	mul.w	r9, sl, r3
 8014566:	45d9      	cmp	r9, fp
 8014568:	9305      	str	r3, [sp, #20]
 801456a:	9306      	str	r3, [sp, #24]
 801456c:	f0c0 80b7 	bcc.w	80146de <uxr_prepare_reliable_buffer_to_write+0x216>
 8014570:	f108 0304 	add.w	r3, r8, #4
 8014574:	42bb      	cmp	r3, r7
 8014576:	f080 80db 	bcs.w	8014730 <uxr_prepare_reliable_buffer_to_write+0x268>
 801457a:	f1a2 0904 	sub.w	r9, r2, #4
 801457e:	eba9 0908 	sub.w	r9, r9, r8
 8014582:	9b05      	ldr	r3, [sp, #20]
 8014584:	fa1f f989 	uxth.w	r9, r9
 8014588:	ebab 0b09 	sub.w	fp, fp, r9
 801458c:	fbbb f2f3 	udiv	r2, fp, r3
 8014590:	fb03 b312 	mls	r3, r3, r2, fp
 8014594:	2b00      	cmp	r3, #0
 8014596:	f000 80c8 	beq.w	801472a <uxr_prepare_reliable_buffer_to_write+0x262>
 801459a:	3201      	adds	r2, #1
 801459c:	b292      	uxth	r2, r2
 801459e:	9306      	str	r3, [sp, #24]
 80145a0:	4552      	cmp	r2, sl
 80145a2:	f200 809c 	bhi.w	80146de <uxr_prepare_reliable_buffer_to_write+0x216>
 80145a6:	f10d 0b20 	add.w	fp, sp, #32
 80145aa:	2a00      	cmp	r2, #0
 80145ac:	d042      	beq.n	8014634 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80145ae:	f8cd 801c 	str.w	r8, [sp, #28]
 80145b2:	f04f 0a00 	mov.w	sl, #0
 80145b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80145ba:	9505      	str	r5, [sp, #20]
 80145bc:	f10d 0b20 	add.w	fp, sp, #32
 80145c0:	4615      	mov	r5, r2
 80145c2:	e000      	b.n	80145c6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80145c4:	46c1      	mov	r9, r8
 80145c6:	8920      	ldrh	r0, [r4, #8]
 80145c8:	fbb6 f2f0 	udiv	r2, r6, r0
 80145cc:	fb00 6112 	mls	r1, r0, r2, r6
 80145d0:	b28a      	uxth	r2, r1
 80145d2:	6863      	ldr	r3, [r4, #4]
 80145d4:	fbb3 f1f0 	udiv	r1, r3, r0
 80145d8:	6823      	ldr	r3, [r4, #0]
 80145da:	fb02 f101 	mul.w	r1, r2, r1
 80145de:	3104      	adds	r1, #4
 80145e0:	4419      	add	r1, r3
 80145e2:	4658      	mov	r0, fp
 80145e4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80145e8:	9200      	str	r2, [sp, #0]
 80145ea:	2300      	movs	r3, #0
 80145ec:	463a      	mov	r2, r7
 80145ee:	f7f6 fcff 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 80145f2:	464a      	mov	r2, r9
 80145f4:	2300      	movs	r3, #0
 80145f6:	210d      	movs	r1, #13
 80145f8:	4658      	mov	r0, fp
 80145fa:	f7fd fce7 	bl	8011fcc <uxr_buffer_submessage_header>
 80145fe:	8921      	ldrh	r1, [r4, #8]
 8014600:	fbb6 f2f1 	udiv	r2, r6, r1
 8014604:	fb01 6212 	mls	r2, r1, r2, r6
 8014608:	b292      	uxth	r2, r2
 801460a:	6863      	ldr	r3, [r4, #4]
 801460c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014610:	fb02 f303 	mul.w	r3, r2, r3
 8014614:	6822      	ldr	r2, [r4, #0]
 8014616:	4630      	mov	r0, r6
 8014618:	50d7      	str	r7, [r2, r3]
 801461a:	2101      	movs	r1, #1
 801461c:	f000 f9a4 	bl	8014968 <uxr_seq_num_add>
 8014620:	f10a 0a01 	add.w	sl, sl, #1
 8014624:	fa1f f38a 	uxth.w	r3, sl
 8014628:	429d      	cmp	r5, r3
 801462a:	4606      	mov	r6, r0
 801462c:	d8ca      	bhi.n	80145c4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801462e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014632:	9d05      	ldr	r5, [sp, #20]
 8014634:	8920      	ldrh	r0, [r4, #8]
 8014636:	fbb6 f3f0 	udiv	r3, r6, r0
 801463a:	fb00 6313 	mls	r3, r0, r3, r6
 801463e:	b299      	uxth	r1, r3
 8014640:	6863      	ldr	r3, [r4, #4]
 8014642:	fbb3 f3f0 	udiv	r3, r3, r0
 8014646:	fb01 f303 	mul.w	r3, r1, r3
 801464a:	6821      	ldr	r1, [r4, #0]
 801464c:	3304      	adds	r3, #4
 801464e:	4419      	add	r1, r3
 8014650:	463a      	mov	r2, r7
 8014652:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014656:	9000      	str	r0, [sp, #0]
 8014658:	2300      	movs	r3, #0
 801465a:	4658      	mov	r0, fp
 801465c:	f7f6 fcc8 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8014660:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014664:	4658      	mov	r0, fp
 8014666:	fa1f f289 	uxth.w	r2, r9
 801466a:	2302      	movs	r3, #2
 801466c:	210d      	movs	r1, #13
 801466e:	f7fd fcad 	bl	8011fcc <uxr_buffer_submessage_header>
 8014672:	9b03      	ldr	r3, [sp, #12]
 8014674:	8927      	ldrh	r7, [r4, #8]
 8014676:	7b20      	ldrb	r0, [r4, #12]
 8014678:	f108 0104 	add.w	r1, r8, #4
 801467c:	440b      	add	r3, r1
 801467e:	4619      	mov	r1, r3
 8014680:	fbb6 f3f7 	udiv	r3, r6, r7
 8014684:	fb07 6313 	mls	r3, r7, r3, r6
 8014688:	f1a5 0208 	sub.w	r2, r5, #8
 801468c:	b29d      	uxth	r5, r3
 801468e:	3004      	adds	r0, #4
 8014690:	6863      	ldr	r3, [r4, #4]
 8014692:	fbb3 f3f7 	udiv	r3, r3, r7
 8014696:	fb05 f303 	mul.w	r3, r5, r3
 801469a:	6825      	ldr	r5, [r4, #0]
 801469c:	4448      	add	r0, r9
 801469e:	50e8      	str	r0, [r5, r3]
 80146a0:	9d04      	ldr	r5, [sp, #16]
 80146a2:	eba2 0208 	sub.w	r2, r2, r8
 80146a6:	4628      	mov	r0, r5
 80146a8:	f7f6 fcb4 	bl	800b014 <ucdr_init_buffer>
 80146ac:	4628      	mov	r0, r5
 80146ae:	493c      	ldr	r1, [pc, #240]	@ (80147a0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80146b0:	4622      	mov	r2, r4
 80146b2:	f7f6 fc83 	bl	800afbc <ucdr_set_on_full_buffer_callback>
 80146b6:	2001      	movs	r0, #1
 80146b8:	81e6      	strh	r6, [r4, #14]
 80146ba:	b011      	add	sp, #68	@ 0x44
 80146bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146c0:	2101      	movs	r1, #1
 80146c2:	89e0      	ldrh	r0, [r4, #14]
 80146c4:	f000 f950 	bl	8014968 <uxr_seq_num_add>
 80146c8:	8921      	ldrh	r1, [r4, #8]
 80146ca:	4605      	mov	r5, r0
 80146cc:	8a60      	ldrh	r0, [r4, #18]
 80146ce:	f000 f94b 	bl	8014968 <uxr_seq_num_add>
 80146d2:	4601      	mov	r1, r0
 80146d4:	4628      	mov	r0, r5
 80146d6:	f000 f94f 	bl	8014978 <uxr_seq_num_cmp>
 80146da:	2800      	cmp	r0, #0
 80146dc:	dd42      	ble.n	8014764 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80146de:	2000      	movs	r0, #0
 80146e0:	b011      	add	sp, #68	@ 0x44
 80146e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e6:	8921      	ldrh	r1, [r4, #8]
 80146e8:	8a60      	ldrh	r0, [r4, #18]
 80146ea:	9205      	str	r2, [sp, #20]
 80146ec:	f000 f93c 	bl	8014968 <uxr_seq_num_add>
 80146f0:	4601      	mov	r1, r0
 80146f2:	4630      	mov	r0, r6
 80146f4:	f000 f940 	bl	8014978 <uxr_seq_num_cmp>
 80146f8:	2800      	cmp	r0, #0
 80146fa:	9a05      	ldr	r2, [sp, #20]
 80146fc:	dcef      	bgt.n	80146de <uxr_prepare_reliable_buffer_to_write+0x216>
 80146fe:	8927      	ldrh	r7, [r4, #8]
 8014700:	fbb6 f3f7 	udiv	r3, r6, r7
 8014704:	fb07 6313 	mls	r3, r7, r3, r6
 8014708:	b29d      	uxth	r5, r3
 801470a:	6863      	ldr	r3, [r4, #4]
 801470c:	6824      	ldr	r4, [r4, #0]
 801470e:	fbb3 f3f7 	udiv	r3, r3, r7
 8014712:	fb05 f303 	mul.w	r3, r5, r3
 8014716:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801471a:	50e2      	str	r2, [r4, r3]
 801471c:	2300      	movs	r3, #0
 801471e:	f8cd 8000 	str.w	r8, [sp]
 8014722:	f7f6 fc65 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8014726:	2001      	movs	r0, #1
 8014728:	e7da      	b.n	80146e0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801472a:	b293      	uxth	r3, r2
 801472c:	461a      	mov	r2, r3
 801472e:	e737      	b.n	80145a0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014730:	4630      	mov	r0, r6
 8014732:	2101      	movs	r1, #1
 8014734:	9207      	str	r2, [sp, #28]
 8014736:	f000 f917 	bl	8014968 <uxr_seq_num_add>
 801473a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801473e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014742:	fb0c 0111 	mls	r1, ip, r1, r0
 8014746:	4606      	mov	r6, r0
 8014748:	b288      	uxth	r0, r1
 801474a:	6863      	ldr	r3, [r4, #4]
 801474c:	fbb3 f1fc 	udiv	r1, r3, ip
 8014750:	6823      	ldr	r3, [r4, #0]
 8014752:	9a07      	ldr	r2, [sp, #28]
 8014754:	fb00 f101 	mul.w	r1, r0, r1
 8014758:	3104      	adds	r1, #4
 801475a:	440b      	add	r3, r1
 801475c:	9303      	str	r3, [sp, #12]
 801475e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014762:	e70a      	b.n	801457a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014764:	8921      	ldrh	r1, [r4, #8]
 8014766:	fbb5 f3f1 	udiv	r3, r5, r1
 801476a:	fb01 5313 	mls	r3, r1, r3, r5
 801476e:	b29a      	uxth	r2, r3
 8014770:	6863      	ldr	r3, [r4, #4]
 8014772:	fbb3 f3f1 	udiv	r3, r3, r1
 8014776:	6821      	ldr	r1, [r4, #0]
 8014778:	9804      	ldr	r0, [sp, #16]
 801477a:	fb02 f303 	mul.w	r3, r2, r3
 801477e:	3304      	adds	r3, #4
 8014780:	7b22      	ldrb	r2, [r4, #12]
 8014782:	4419      	add	r1, r3
 8014784:	445a      	add	r2, fp
 8014786:	f841 2c04 	str.w	r2, [r1, #-4]
 801478a:	7b23      	ldrb	r3, [r4, #12]
 801478c:	9300      	str	r3, [sp, #0]
 801478e:	2300      	movs	r3, #0
 8014790:	f7f6 fc2e 	bl	800aff0 <ucdr_init_buffer_origin_offset>
 8014794:	81e5      	strh	r5, [r4, #14]
 8014796:	2001      	movs	r0, #1
 8014798:	e7a2      	b.n	80146e0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801479a:	4682      	mov	sl, r0
 801479c:	e6ca      	b.n	8014534 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801479e:	bf00      	nop
 80147a0:	080143a9 	.word	0x080143a9

080147a4 <uxr_prepare_next_reliable_buffer_to_send>:
 80147a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a6:	4604      	mov	r4, r0
 80147a8:	460f      	mov	r7, r1
 80147aa:	8a00      	ldrh	r0, [r0, #16]
 80147ac:	2101      	movs	r1, #1
 80147ae:	4616      	mov	r6, r2
 80147b0:	461d      	mov	r5, r3
 80147b2:	f000 f8d9 	bl	8014968 <uxr_seq_num_add>
 80147b6:	8028      	strh	r0, [r5, #0]
 80147b8:	8922      	ldrh	r2, [r4, #8]
 80147ba:	fbb0 f3f2 	udiv	r3, r0, r2
 80147be:	fb02 0c13 	mls	ip, r2, r3, r0
 80147c2:	fa1f fc8c 	uxth.w	ip, ip
 80147c6:	6863      	ldr	r3, [r4, #4]
 80147c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80147cc:	fb0c fc03 	mul.w	ip, ip, r3
 80147d0:	6823      	ldr	r3, [r4, #0]
 80147d2:	89e1      	ldrh	r1, [r4, #14]
 80147d4:	f10c 0c04 	add.w	ip, ip, #4
 80147d8:	4463      	add	r3, ip
 80147da:	603b      	str	r3, [r7, #0]
 80147dc:	6823      	ldr	r3, [r4, #0]
 80147de:	449c      	add	ip, r3
 80147e0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80147e4:	6033      	str	r3, [r6, #0]
 80147e6:	f000 f8c7 	bl	8014978 <uxr_seq_num_cmp>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	dd01      	ble.n	80147f2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80147ee:	2000      	movs	r0, #0
 80147f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f2:	7b23      	ldrb	r3, [r4, #12]
 80147f4:	6832      	ldr	r2, [r6, #0]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d9f9      	bls.n	80147ee <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80147fa:	8a61      	ldrh	r1, [r4, #18]
 80147fc:	8a20      	ldrh	r0, [r4, #16]
 80147fe:	f000 f8b7 	bl	8014970 <uxr_seq_num_sub>
 8014802:	8923      	ldrh	r3, [r4, #8]
 8014804:	4283      	cmp	r3, r0
 8014806:	d0f2      	beq.n	80147ee <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014808:	8828      	ldrh	r0, [r5, #0]
 801480a:	89e3      	ldrh	r3, [r4, #14]
 801480c:	8220      	strh	r0, [r4, #16]
 801480e:	4298      	cmp	r0, r3
 8014810:	d001      	beq.n	8014816 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014812:	2001      	movs	r0, #1
 8014814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014816:	2101      	movs	r1, #1
 8014818:	f000 f8a6 	bl	8014968 <uxr_seq_num_add>
 801481c:	81e0      	strh	r0, [r4, #14]
 801481e:	2001      	movs	r0, #1
 8014820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014822:	bf00      	nop

08014824 <uxr_update_output_stream_heartbeat_timestamp>:
 8014824:	b570      	push	{r4, r5, r6, lr}
 8014826:	8a01      	ldrh	r1, [r0, #16]
 8014828:	4604      	mov	r4, r0
 801482a:	8a40      	ldrh	r0, [r0, #18]
 801482c:	4615      	mov	r5, r2
 801482e:	461e      	mov	r6, r3
 8014830:	f000 f8a2 	bl	8014978 <uxr_seq_num_cmp>
 8014834:	2800      	cmp	r0, #0
 8014836:	db07      	blt.n	8014848 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801483c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014840:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014844:	2000      	movs	r0, #0
 8014846:	bd70      	pop	{r4, r5, r6, pc}
 8014848:	f894 0020 	ldrb.w	r0, [r4, #32]
 801484c:	b940      	cbnz	r0, 8014860 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801484e:	2301      	movs	r3, #1
 8014850:	f884 3020 	strb.w	r3, [r4, #32]
 8014854:	3564      	adds	r5, #100	@ 0x64
 8014856:	f146 0600 	adc.w	r6, r6, #0
 801485a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014864:	4295      	cmp	r5, r2
 8014866:	eb76 0303 	sbcs.w	r3, r6, r3
 801486a:	bfa5      	ittet	ge
 801486c:	3001      	addge	r0, #1
 801486e:	f884 0020 	strbge.w	r0, [r4, #32]
 8014872:	2000      	movlt	r0, #0
 8014874:	2001      	movge	r0, #1
 8014876:	e7ed      	b.n	8014854 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014878 <uxr_begin_output_nack_buffer_it>:
 8014878:	8a40      	ldrh	r0, [r0, #18]
 801487a:	4770      	bx	lr

0801487c <uxr_next_reliable_nack_buffer_to_send>:
 801487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014880:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014884:	b082      	sub	sp, #8
 8014886:	f1b8 0f00 	cmp.w	r8, #0
 801488a:	d011      	beq.n	80148b0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801488c:	4604      	mov	r4, r0
 801488e:	8818      	ldrh	r0, [r3, #0]
 8014890:	460e      	mov	r6, r1
 8014892:	4617      	mov	r7, r2
 8014894:	461d      	mov	r5, r3
 8014896:	2101      	movs	r1, #1
 8014898:	f000 f866 	bl	8014968 <uxr_seq_num_add>
 801489c:	8028      	strh	r0, [r5, #0]
 801489e:	8a21      	ldrh	r1, [r4, #16]
 80148a0:	f000 f86a 	bl	8014978 <uxr_seq_num_cmp>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	dd07      	ble.n	80148b8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80148a8:	f04f 0800 	mov.w	r8, #0
 80148ac:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80148b0:	4640      	mov	r0, r8
 80148b2:	b002      	add	sp, #8
 80148b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148b8:	8921      	ldrh	r1, [r4, #8]
 80148ba:	8828      	ldrh	r0, [r5, #0]
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	fbb0 f2f1 	udiv	r2, r0, r1
 80148c2:	fb01 0c12 	mls	ip, r1, r2, r0
 80148c6:	fa1f f28c 	uxth.w	r2, ip
 80148ca:	9301      	str	r3, [sp, #4]
 80148cc:	6863      	ldr	r3, [r4, #4]
 80148ce:	fbb3 fcf1 	udiv	ip, r3, r1
 80148d2:	9b01      	ldr	r3, [sp, #4]
 80148d4:	fb02 fc0c 	mul.w	ip, r2, ip
 80148d8:	f10c 0c04 	add.w	ip, ip, #4
 80148dc:	4463      	add	r3, ip
 80148de:	6033      	str	r3, [r6, #0]
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	4463      	add	r3, ip
 80148e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80148e8:	603b      	str	r3, [r7, #0]
 80148ea:	7b22      	ldrb	r2, [r4, #12]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d0d2      	beq.n	8014896 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80148f0:	4640      	mov	r0, r8
 80148f2:	b002      	add	sp, #8
 80148f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148f8 <uxr_process_acknack>:
 80148f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148fa:	4604      	mov	r4, r0
 80148fc:	460e      	mov	r6, r1
 80148fe:	4610      	mov	r0, r2
 8014900:	2101      	movs	r1, #1
 8014902:	f000 f835 	bl	8014970 <uxr_seq_num_sub>
 8014906:	8a61      	ldrh	r1, [r4, #18]
 8014908:	f000 f832 	bl	8014970 <uxr_seq_num_sub>
 801490c:	b1c0      	cbz	r0, 8014940 <uxr_process_acknack+0x48>
 801490e:	4605      	mov	r5, r0
 8014910:	2700      	movs	r7, #0
 8014912:	2101      	movs	r1, #1
 8014914:	8a60      	ldrh	r0, [r4, #18]
 8014916:	f000 f827 	bl	8014968 <uxr_seq_num_add>
 801491a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801491e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014922:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014926:	fb0c 0111 	mls	r1, ip, r1, r0
 801492a:	b289      	uxth	r1, r1
 801492c:	3701      	adds	r7, #1
 801492e:	fbb3 f3fc 	udiv	r3, r3, ip
 8014932:	fb01 f303 	mul.w	r3, r1, r3
 8014936:	42bd      	cmp	r5, r7
 8014938:	7b21      	ldrb	r1, [r4, #12]
 801493a:	8260      	strh	r0, [r4, #18]
 801493c:	50d1      	str	r1, [r2, r3]
 801493e:	d1e8      	bne.n	8014912 <uxr_process_acknack+0x1a>
 8014940:	3e00      	subs	r6, #0
 8014942:	f04f 0300 	mov.w	r3, #0
 8014946:	bf18      	it	ne
 8014948:	2601      	movne	r6, #1
 801494a:	f884 3020 	strb.w	r3, [r4, #32]
 801494e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8014952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014954 <uxr_is_output_up_to_date>:
 8014954:	8a01      	ldrh	r1, [r0, #16]
 8014956:	8a40      	ldrh	r0, [r0, #18]
 8014958:	b508      	push	{r3, lr}
 801495a:	f000 f80d 	bl	8014978 <uxr_seq_num_cmp>
 801495e:	fab0 f080 	clz	r0, r0
 8014962:	0940      	lsrs	r0, r0, #5
 8014964:	bd08      	pop	{r3, pc}
 8014966:	bf00      	nop

08014968 <uxr_seq_num_add>:
 8014968:	4408      	add	r0, r1
 801496a:	b280      	uxth	r0, r0
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop

08014970 <uxr_seq_num_sub>:
 8014970:	1a40      	subs	r0, r0, r1
 8014972:	b280      	uxth	r0, r0
 8014974:	4770      	bx	lr
 8014976:	bf00      	nop

08014978 <uxr_seq_num_cmp>:
 8014978:	4288      	cmp	r0, r1
 801497a:	d011      	beq.n	80149a0 <uxr_seq_num_cmp+0x28>
 801497c:	d309      	bcc.n	8014992 <uxr_seq_num_cmp+0x1a>
 801497e:	4288      	cmp	r0, r1
 8014980:	d910      	bls.n	80149a4 <uxr_seq_num_cmp+0x2c>
 8014982:	1a40      	subs	r0, r0, r1
 8014984:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014988:	bfd4      	ite	le
 801498a:	2001      	movle	r0, #1
 801498c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014990:	4770      	bx	lr
 8014992:	1a0b      	subs	r3, r1, r0
 8014994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014998:	daf1      	bge.n	801497e <uxr_seq_num_cmp+0x6>
 801499a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801499e:	4770      	bx	lr
 80149a0:	2000      	movs	r0, #0
 80149a2:	4770      	bx	lr
 80149a4:	2001      	movs	r0, #1
 80149a6:	4770      	bx	lr

080149a8 <calloc>:
 80149a8:	4b02      	ldr	r3, [pc, #8]	@ (80149b4 <calloc+0xc>)
 80149aa:	460a      	mov	r2, r1
 80149ac:	4601      	mov	r1, r0
 80149ae:	6818      	ldr	r0, [r3, #0]
 80149b0:	f000 b802 	b.w	80149b8 <_calloc_r>
 80149b4:	20000350 	.word	0x20000350

080149b8 <_calloc_r>:
 80149b8:	b570      	push	{r4, r5, r6, lr}
 80149ba:	fba1 5402 	umull	r5, r4, r1, r2
 80149be:	b93c      	cbnz	r4, 80149d0 <_calloc_r+0x18>
 80149c0:	4629      	mov	r1, r5
 80149c2:	f000 f887 	bl	8014ad4 <_malloc_r>
 80149c6:	4606      	mov	r6, r0
 80149c8:	b928      	cbnz	r0, 80149d6 <_calloc_r+0x1e>
 80149ca:	2600      	movs	r6, #0
 80149cc:	4630      	mov	r0, r6
 80149ce:	bd70      	pop	{r4, r5, r6, pc}
 80149d0:	220c      	movs	r2, #12
 80149d2:	6002      	str	r2, [r0, #0]
 80149d4:	e7f9      	b.n	80149ca <_calloc_r+0x12>
 80149d6:	462a      	mov	r2, r5
 80149d8:	4621      	mov	r1, r4
 80149da:	f000 fbbd 	bl	8015158 <memset>
 80149de:	e7f5      	b.n	80149cc <_calloc_r+0x14>

080149e0 <getenv>:
 80149e0:	b507      	push	{r0, r1, r2, lr}
 80149e2:	4b04      	ldr	r3, [pc, #16]	@ (80149f4 <getenv+0x14>)
 80149e4:	4601      	mov	r1, r0
 80149e6:	aa01      	add	r2, sp, #4
 80149e8:	6818      	ldr	r0, [r3, #0]
 80149ea:	f000 f805 	bl	80149f8 <_findenv_r>
 80149ee:	b003      	add	sp, #12
 80149f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80149f4:	20000350 	.word	0x20000350

080149f8 <_findenv_r>:
 80149f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8014a6c <_findenv_r+0x74>
 8014a00:	4606      	mov	r6, r0
 8014a02:	4689      	mov	r9, r1
 8014a04:	4617      	mov	r7, r2
 8014a06:	f000 fc9d 	bl	8015344 <__env_lock>
 8014a0a:	f8da 4000 	ldr.w	r4, [sl]
 8014a0e:	b134      	cbz	r4, 8014a1e <_findenv_r+0x26>
 8014a10:	464b      	mov	r3, r9
 8014a12:	4698      	mov	r8, r3
 8014a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a18:	b13a      	cbz	r2, 8014a2a <_findenv_r+0x32>
 8014a1a:	2a3d      	cmp	r2, #61	@ 0x3d
 8014a1c:	d1f9      	bne.n	8014a12 <_findenv_r+0x1a>
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f000 fc96 	bl	8015350 <__env_unlock>
 8014a24:	2000      	movs	r0, #0
 8014a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2a:	eba8 0809 	sub.w	r8, r8, r9
 8014a2e:	46a3      	mov	fp, r4
 8014a30:	f854 0b04 	ldr.w	r0, [r4], #4
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d0f2      	beq.n	8014a1e <_findenv_r+0x26>
 8014a38:	4642      	mov	r2, r8
 8014a3a:	4649      	mov	r1, r9
 8014a3c:	f000 fba1 	bl	8015182 <strncmp>
 8014a40:	2800      	cmp	r0, #0
 8014a42:	d1f4      	bne.n	8014a2e <_findenv_r+0x36>
 8014a44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014a48:	eb03 0508 	add.w	r5, r3, r8
 8014a4c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014a50:	2b3d      	cmp	r3, #61	@ 0x3d
 8014a52:	d1ec      	bne.n	8014a2e <_findenv_r+0x36>
 8014a54:	f8da 3000 	ldr.w	r3, [sl]
 8014a58:	ebab 0303 	sub.w	r3, fp, r3
 8014a5c:	109b      	asrs	r3, r3, #2
 8014a5e:	4630      	mov	r0, r6
 8014a60:	603b      	str	r3, [r7, #0]
 8014a62:	f000 fc75 	bl	8015350 <__env_unlock>
 8014a66:	1c68      	adds	r0, r5, #1
 8014a68:	e7dd      	b.n	8014a26 <_findenv_r+0x2e>
 8014a6a:	bf00      	nop
 8014a6c:	20000038 	.word	0x20000038

08014a70 <malloc>:
 8014a70:	4b02      	ldr	r3, [pc, #8]	@ (8014a7c <malloc+0xc>)
 8014a72:	4601      	mov	r1, r0
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	f000 b82d 	b.w	8014ad4 <_malloc_r>
 8014a7a:	bf00      	nop
 8014a7c:	20000350 	.word	0x20000350

08014a80 <free>:
 8014a80:	4b02      	ldr	r3, [pc, #8]	@ (8014a8c <free+0xc>)
 8014a82:	4601      	mov	r1, r0
 8014a84:	6818      	ldr	r0, [r3, #0]
 8014a86:	f000 bc69 	b.w	801535c <_free_r>
 8014a8a:	bf00      	nop
 8014a8c:	20000350 	.word	0x20000350

08014a90 <sbrk_aligned>:
 8014a90:	b570      	push	{r4, r5, r6, lr}
 8014a92:	4e0f      	ldr	r6, [pc, #60]	@ (8014ad0 <sbrk_aligned+0x40>)
 8014a94:	460c      	mov	r4, r1
 8014a96:	6831      	ldr	r1, [r6, #0]
 8014a98:	4605      	mov	r5, r0
 8014a9a:	b911      	cbnz	r1, 8014aa2 <sbrk_aligned+0x12>
 8014a9c:	f000 fbce 	bl	801523c <_sbrk_r>
 8014aa0:	6030      	str	r0, [r6, #0]
 8014aa2:	4621      	mov	r1, r4
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	f000 fbc9 	bl	801523c <_sbrk_r>
 8014aaa:	1c43      	adds	r3, r0, #1
 8014aac:	d103      	bne.n	8014ab6 <sbrk_aligned+0x26>
 8014aae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	bd70      	pop	{r4, r5, r6, pc}
 8014ab6:	1cc4      	adds	r4, r0, #3
 8014ab8:	f024 0403 	bic.w	r4, r4, #3
 8014abc:	42a0      	cmp	r0, r4
 8014abe:	d0f8      	beq.n	8014ab2 <sbrk_aligned+0x22>
 8014ac0:	1a21      	subs	r1, r4, r0
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f000 fbba 	bl	801523c <_sbrk_r>
 8014ac8:	3001      	adds	r0, #1
 8014aca:	d1f2      	bne.n	8014ab2 <sbrk_aligned+0x22>
 8014acc:	e7ef      	b.n	8014aae <sbrk_aligned+0x1e>
 8014ace:	bf00      	nop
 8014ad0:	2000de54 	.word	0x2000de54

08014ad4 <_malloc_r>:
 8014ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ad8:	1ccd      	adds	r5, r1, #3
 8014ada:	f025 0503 	bic.w	r5, r5, #3
 8014ade:	3508      	adds	r5, #8
 8014ae0:	2d0c      	cmp	r5, #12
 8014ae2:	bf38      	it	cc
 8014ae4:	250c      	movcc	r5, #12
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	4606      	mov	r6, r0
 8014aea:	db01      	blt.n	8014af0 <_malloc_r+0x1c>
 8014aec:	42a9      	cmp	r1, r5
 8014aee:	d904      	bls.n	8014afa <_malloc_r+0x26>
 8014af0:	230c      	movs	r3, #12
 8014af2:	6033      	str	r3, [r6, #0]
 8014af4:	2000      	movs	r0, #0
 8014af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014bd0 <_malloc_r+0xfc>
 8014afe:	f000 f869 	bl	8014bd4 <__malloc_lock>
 8014b02:	f8d8 3000 	ldr.w	r3, [r8]
 8014b06:	461c      	mov	r4, r3
 8014b08:	bb44      	cbnz	r4, 8014b5c <_malloc_r+0x88>
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f7ff ffbf 	bl	8014a90 <sbrk_aligned>
 8014b12:	1c43      	adds	r3, r0, #1
 8014b14:	4604      	mov	r4, r0
 8014b16:	d158      	bne.n	8014bca <_malloc_r+0xf6>
 8014b18:	f8d8 4000 	ldr.w	r4, [r8]
 8014b1c:	4627      	mov	r7, r4
 8014b1e:	2f00      	cmp	r7, #0
 8014b20:	d143      	bne.n	8014baa <_malloc_r+0xd6>
 8014b22:	2c00      	cmp	r4, #0
 8014b24:	d04b      	beq.n	8014bbe <_malloc_r+0xea>
 8014b26:	6823      	ldr	r3, [r4, #0]
 8014b28:	4639      	mov	r1, r7
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	eb04 0903 	add.w	r9, r4, r3
 8014b30:	f000 fb84 	bl	801523c <_sbrk_r>
 8014b34:	4581      	cmp	r9, r0
 8014b36:	d142      	bne.n	8014bbe <_malloc_r+0xea>
 8014b38:	6821      	ldr	r1, [r4, #0]
 8014b3a:	1a6d      	subs	r5, r5, r1
 8014b3c:	4629      	mov	r1, r5
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f7ff ffa6 	bl	8014a90 <sbrk_aligned>
 8014b44:	3001      	adds	r0, #1
 8014b46:	d03a      	beq.n	8014bbe <_malloc_r+0xea>
 8014b48:	6823      	ldr	r3, [r4, #0]
 8014b4a:	442b      	add	r3, r5
 8014b4c:	6023      	str	r3, [r4, #0]
 8014b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8014b52:	685a      	ldr	r2, [r3, #4]
 8014b54:	bb62      	cbnz	r2, 8014bb0 <_malloc_r+0xdc>
 8014b56:	f8c8 7000 	str.w	r7, [r8]
 8014b5a:	e00f      	b.n	8014b7c <_malloc_r+0xa8>
 8014b5c:	6822      	ldr	r2, [r4, #0]
 8014b5e:	1b52      	subs	r2, r2, r5
 8014b60:	d420      	bmi.n	8014ba4 <_malloc_r+0xd0>
 8014b62:	2a0b      	cmp	r2, #11
 8014b64:	d917      	bls.n	8014b96 <_malloc_r+0xc2>
 8014b66:	1961      	adds	r1, r4, r5
 8014b68:	42a3      	cmp	r3, r4
 8014b6a:	6025      	str	r5, [r4, #0]
 8014b6c:	bf18      	it	ne
 8014b6e:	6059      	strne	r1, [r3, #4]
 8014b70:	6863      	ldr	r3, [r4, #4]
 8014b72:	bf08      	it	eq
 8014b74:	f8c8 1000 	streq.w	r1, [r8]
 8014b78:	5162      	str	r2, [r4, r5]
 8014b7a:	604b      	str	r3, [r1, #4]
 8014b7c:	4630      	mov	r0, r6
 8014b7e:	f000 f82f 	bl	8014be0 <__malloc_unlock>
 8014b82:	f104 000b 	add.w	r0, r4, #11
 8014b86:	1d23      	adds	r3, r4, #4
 8014b88:	f020 0007 	bic.w	r0, r0, #7
 8014b8c:	1ac2      	subs	r2, r0, r3
 8014b8e:	bf1c      	itt	ne
 8014b90:	1a1b      	subne	r3, r3, r0
 8014b92:	50a3      	strne	r3, [r4, r2]
 8014b94:	e7af      	b.n	8014af6 <_malloc_r+0x22>
 8014b96:	6862      	ldr	r2, [r4, #4]
 8014b98:	42a3      	cmp	r3, r4
 8014b9a:	bf0c      	ite	eq
 8014b9c:	f8c8 2000 	streq.w	r2, [r8]
 8014ba0:	605a      	strne	r2, [r3, #4]
 8014ba2:	e7eb      	b.n	8014b7c <_malloc_r+0xa8>
 8014ba4:	4623      	mov	r3, r4
 8014ba6:	6864      	ldr	r4, [r4, #4]
 8014ba8:	e7ae      	b.n	8014b08 <_malloc_r+0x34>
 8014baa:	463c      	mov	r4, r7
 8014bac:	687f      	ldr	r7, [r7, #4]
 8014bae:	e7b6      	b.n	8014b1e <_malloc_r+0x4a>
 8014bb0:	461a      	mov	r2, r3
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	42a3      	cmp	r3, r4
 8014bb6:	d1fb      	bne.n	8014bb0 <_malloc_r+0xdc>
 8014bb8:	2300      	movs	r3, #0
 8014bba:	6053      	str	r3, [r2, #4]
 8014bbc:	e7de      	b.n	8014b7c <_malloc_r+0xa8>
 8014bbe:	230c      	movs	r3, #12
 8014bc0:	6033      	str	r3, [r6, #0]
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	f000 f80c 	bl	8014be0 <__malloc_unlock>
 8014bc8:	e794      	b.n	8014af4 <_malloc_r+0x20>
 8014bca:	6005      	str	r5, [r0, #0]
 8014bcc:	e7d6      	b.n	8014b7c <_malloc_r+0xa8>
 8014bce:	bf00      	nop
 8014bd0:	2000de58 	.word	0x2000de58

08014bd4 <__malloc_lock>:
 8014bd4:	4801      	ldr	r0, [pc, #4]	@ (8014bdc <__malloc_lock+0x8>)
 8014bd6:	f000 bb7e 	b.w	80152d6 <__retarget_lock_acquire_recursive>
 8014bda:	bf00      	nop
 8014bdc:	2000df9d 	.word	0x2000df9d

08014be0 <__malloc_unlock>:
 8014be0:	4801      	ldr	r0, [pc, #4]	@ (8014be8 <__malloc_unlock+0x8>)
 8014be2:	f000 bb79 	b.w	80152d8 <__retarget_lock_release_recursive>
 8014be6:	bf00      	nop
 8014be8:	2000df9d 	.word	0x2000df9d

08014bec <srand>:
 8014bec:	b538      	push	{r3, r4, r5, lr}
 8014bee:	4b10      	ldr	r3, [pc, #64]	@ (8014c30 <srand+0x44>)
 8014bf0:	681d      	ldr	r5, [r3, #0]
 8014bf2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014bf4:	4604      	mov	r4, r0
 8014bf6:	b9b3      	cbnz	r3, 8014c26 <srand+0x3a>
 8014bf8:	2018      	movs	r0, #24
 8014bfa:	f7ff ff39 	bl	8014a70 <malloc>
 8014bfe:	4602      	mov	r2, r0
 8014c00:	6328      	str	r0, [r5, #48]	@ 0x30
 8014c02:	b920      	cbnz	r0, 8014c0e <srand+0x22>
 8014c04:	4b0b      	ldr	r3, [pc, #44]	@ (8014c34 <srand+0x48>)
 8014c06:	480c      	ldr	r0, [pc, #48]	@ (8014c38 <srand+0x4c>)
 8014c08:	2146      	movs	r1, #70	@ 0x46
 8014c0a:	f000 fb7d 	bl	8015308 <__assert_func>
 8014c0e:	490b      	ldr	r1, [pc, #44]	@ (8014c3c <srand+0x50>)
 8014c10:	4b0b      	ldr	r3, [pc, #44]	@ (8014c40 <srand+0x54>)
 8014c12:	e9c0 1300 	strd	r1, r3, [r0]
 8014c16:	4b0b      	ldr	r3, [pc, #44]	@ (8014c44 <srand+0x58>)
 8014c18:	6083      	str	r3, [r0, #8]
 8014c1a:	230b      	movs	r3, #11
 8014c1c:	8183      	strh	r3, [r0, #12]
 8014c1e:	2100      	movs	r1, #0
 8014c20:	2001      	movs	r0, #1
 8014c22:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014c26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c28:	2200      	movs	r2, #0
 8014c2a:	611c      	str	r4, [r3, #16]
 8014c2c:	615a      	str	r2, [r3, #20]
 8014c2e:	bd38      	pop	{r3, r4, r5, pc}
 8014c30:	20000350 	.word	0x20000350
 8014c34:	08016b6c 	.word	0x08016b6c
 8014c38:	08016b83 	.word	0x08016b83
 8014c3c:	abcd330e 	.word	0xabcd330e
 8014c40:	e66d1234 	.word	0xe66d1234
 8014c44:	0005deec 	.word	0x0005deec

08014c48 <rand>:
 8014c48:	4b16      	ldr	r3, [pc, #88]	@ (8014ca4 <rand+0x5c>)
 8014c4a:	b510      	push	{r4, lr}
 8014c4c:	681c      	ldr	r4, [r3, #0]
 8014c4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c50:	b9b3      	cbnz	r3, 8014c80 <rand+0x38>
 8014c52:	2018      	movs	r0, #24
 8014c54:	f7ff ff0c 	bl	8014a70 <malloc>
 8014c58:	4602      	mov	r2, r0
 8014c5a:	6320      	str	r0, [r4, #48]	@ 0x30
 8014c5c:	b920      	cbnz	r0, 8014c68 <rand+0x20>
 8014c5e:	4b12      	ldr	r3, [pc, #72]	@ (8014ca8 <rand+0x60>)
 8014c60:	4812      	ldr	r0, [pc, #72]	@ (8014cac <rand+0x64>)
 8014c62:	2152      	movs	r1, #82	@ 0x52
 8014c64:	f000 fb50 	bl	8015308 <__assert_func>
 8014c68:	4911      	ldr	r1, [pc, #68]	@ (8014cb0 <rand+0x68>)
 8014c6a:	4b12      	ldr	r3, [pc, #72]	@ (8014cb4 <rand+0x6c>)
 8014c6c:	e9c0 1300 	strd	r1, r3, [r0]
 8014c70:	4b11      	ldr	r3, [pc, #68]	@ (8014cb8 <rand+0x70>)
 8014c72:	6083      	str	r3, [r0, #8]
 8014c74:	230b      	movs	r3, #11
 8014c76:	8183      	strh	r3, [r0, #12]
 8014c78:	2100      	movs	r1, #0
 8014c7a:	2001      	movs	r0, #1
 8014c7c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014c80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014c82:	480e      	ldr	r0, [pc, #56]	@ (8014cbc <rand+0x74>)
 8014c84:	690b      	ldr	r3, [r1, #16]
 8014c86:	694c      	ldr	r4, [r1, #20]
 8014c88:	4a0d      	ldr	r2, [pc, #52]	@ (8014cc0 <rand+0x78>)
 8014c8a:	4358      	muls	r0, r3
 8014c8c:	fb02 0004 	mla	r0, r2, r4, r0
 8014c90:	fba3 3202 	umull	r3, r2, r3, r2
 8014c94:	3301      	adds	r3, #1
 8014c96:	eb40 0002 	adc.w	r0, r0, r2
 8014c9a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014c9e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014ca2:	bd10      	pop	{r4, pc}
 8014ca4:	20000350 	.word	0x20000350
 8014ca8:	08016b6c 	.word	0x08016b6c
 8014cac:	08016b83 	.word	0x08016b83
 8014cb0:	abcd330e 	.word	0xabcd330e
 8014cb4:	e66d1234 	.word	0xe66d1234
 8014cb8:	0005deec 	.word	0x0005deec
 8014cbc:	5851f42d 	.word	0x5851f42d
 8014cc0:	4c957f2d 	.word	0x4c957f2d

08014cc4 <realloc>:
 8014cc4:	4b02      	ldr	r3, [pc, #8]	@ (8014cd0 <realloc+0xc>)
 8014cc6:	460a      	mov	r2, r1
 8014cc8:	4601      	mov	r1, r0
 8014cca:	6818      	ldr	r0, [r3, #0]
 8014ccc:	f000 b802 	b.w	8014cd4 <_realloc_r>
 8014cd0:	20000350 	.word	0x20000350

08014cd4 <_realloc_r>:
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd8:	4680      	mov	r8, r0
 8014cda:	4615      	mov	r5, r2
 8014cdc:	460c      	mov	r4, r1
 8014cde:	b921      	cbnz	r1, 8014cea <_realloc_r+0x16>
 8014ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce4:	4611      	mov	r1, r2
 8014ce6:	f7ff bef5 	b.w	8014ad4 <_malloc_r>
 8014cea:	b92a      	cbnz	r2, 8014cf8 <_realloc_r+0x24>
 8014cec:	f000 fb36 	bl	801535c <_free_r>
 8014cf0:	2400      	movs	r4, #0
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf8:	f000 fb7a 	bl	80153f0 <_malloc_usable_size_r>
 8014cfc:	4285      	cmp	r5, r0
 8014cfe:	4606      	mov	r6, r0
 8014d00:	d802      	bhi.n	8014d08 <_realloc_r+0x34>
 8014d02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014d06:	d8f4      	bhi.n	8014cf2 <_realloc_r+0x1e>
 8014d08:	4629      	mov	r1, r5
 8014d0a:	4640      	mov	r0, r8
 8014d0c:	f7ff fee2 	bl	8014ad4 <_malloc_r>
 8014d10:	4607      	mov	r7, r0
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d0ec      	beq.n	8014cf0 <_realloc_r+0x1c>
 8014d16:	42b5      	cmp	r5, r6
 8014d18:	462a      	mov	r2, r5
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	bf28      	it	cs
 8014d1e:	4632      	movcs	r2, r6
 8014d20:	f000 fae3 	bl	80152ea <memcpy>
 8014d24:	4621      	mov	r1, r4
 8014d26:	4640      	mov	r0, r8
 8014d28:	f000 fb18 	bl	801535c <_free_r>
 8014d2c:	463c      	mov	r4, r7
 8014d2e:	e7e0      	b.n	8014cf2 <_realloc_r+0x1e>

08014d30 <_strtoul_l.constprop.0>:
 8014d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d34:	4e34      	ldr	r6, [pc, #208]	@ (8014e08 <_strtoul_l.constprop.0+0xd8>)
 8014d36:	4686      	mov	lr, r0
 8014d38:	460d      	mov	r5, r1
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d40:	5d37      	ldrb	r7, [r6, r4]
 8014d42:	f017 0708 	ands.w	r7, r7, #8
 8014d46:	d1f8      	bne.n	8014d3a <_strtoul_l.constprop.0+0xa>
 8014d48:	2c2d      	cmp	r4, #45	@ 0x2d
 8014d4a:	d12f      	bne.n	8014dac <_strtoul_l.constprop.0+0x7c>
 8014d4c:	782c      	ldrb	r4, [r5, #0]
 8014d4e:	2701      	movs	r7, #1
 8014d50:	1c85      	adds	r5, r0, #2
 8014d52:	f033 0010 	bics.w	r0, r3, #16
 8014d56:	d109      	bne.n	8014d6c <_strtoul_l.constprop.0+0x3c>
 8014d58:	2c30      	cmp	r4, #48	@ 0x30
 8014d5a:	d12c      	bne.n	8014db6 <_strtoul_l.constprop.0+0x86>
 8014d5c:	7828      	ldrb	r0, [r5, #0]
 8014d5e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014d62:	2858      	cmp	r0, #88	@ 0x58
 8014d64:	d127      	bne.n	8014db6 <_strtoul_l.constprop.0+0x86>
 8014d66:	786c      	ldrb	r4, [r5, #1]
 8014d68:	2310      	movs	r3, #16
 8014d6a:	3502      	adds	r5, #2
 8014d6c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014d70:	2600      	movs	r6, #0
 8014d72:	fbb8 f8f3 	udiv	r8, r8, r3
 8014d76:	fb03 f908 	mul.w	r9, r3, r8
 8014d7a:	ea6f 0909 	mvn.w	r9, r9
 8014d7e:	4630      	mov	r0, r6
 8014d80:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014d84:	f1bc 0f09 	cmp.w	ip, #9
 8014d88:	d81c      	bhi.n	8014dc4 <_strtoul_l.constprop.0+0x94>
 8014d8a:	4664      	mov	r4, ip
 8014d8c:	42a3      	cmp	r3, r4
 8014d8e:	dd2a      	ble.n	8014de6 <_strtoul_l.constprop.0+0xb6>
 8014d90:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8014d94:	d007      	beq.n	8014da6 <_strtoul_l.constprop.0+0x76>
 8014d96:	4580      	cmp	r8, r0
 8014d98:	d322      	bcc.n	8014de0 <_strtoul_l.constprop.0+0xb0>
 8014d9a:	d101      	bne.n	8014da0 <_strtoul_l.constprop.0+0x70>
 8014d9c:	45a1      	cmp	r9, r4
 8014d9e:	db1f      	blt.n	8014de0 <_strtoul_l.constprop.0+0xb0>
 8014da0:	fb00 4003 	mla	r0, r0, r3, r4
 8014da4:	2601      	movs	r6, #1
 8014da6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014daa:	e7e9      	b.n	8014d80 <_strtoul_l.constprop.0+0x50>
 8014dac:	2c2b      	cmp	r4, #43	@ 0x2b
 8014dae:	bf04      	itt	eq
 8014db0:	782c      	ldrbeq	r4, [r5, #0]
 8014db2:	1c85      	addeq	r5, r0, #2
 8014db4:	e7cd      	b.n	8014d52 <_strtoul_l.constprop.0+0x22>
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d1d8      	bne.n	8014d6c <_strtoul_l.constprop.0+0x3c>
 8014dba:	2c30      	cmp	r4, #48	@ 0x30
 8014dbc:	bf0c      	ite	eq
 8014dbe:	2308      	moveq	r3, #8
 8014dc0:	230a      	movne	r3, #10
 8014dc2:	e7d3      	b.n	8014d6c <_strtoul_l.constprop.0+0x3c>
 8014dc4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014dc8:	f1bc 0f19 	cmp.w	ip, #25
 8014dcc:	d801      	bhi.n	8014dd2 <_strtoul_l.constprop.0+0xa2>
 8014dce:	3c37      	subs	r4, #55	@ 0x37
 8014dd0:	e7dc      	b.n	8014d8c <_strtoul_l.constprop.0+0x5c>
 8014dd2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014dd6:	f1bc 0f19 	cmp.w	ip, #25
 8014dda:	d804      	bhi.n	8014de6 <_strtoul_l.constprop.0+0xb6>
 8014ddc:	3c57      	subs	r4, #87	@ 0x57
 8014dde:	e7d5      	b.n	8014d8c <_strtoul_l.constprop.0+0x5c>
 8014de0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8014de4:	e7df      	b.n	8014da6 <_strtoul_l.constprop.0+0x76>
 8014de6:	1c73      	adds	r3, r6, #1
 8014de8:	d106      	bne.n	8014df8 <_strtoul_l.constprop.0+0xc8>
 8014dea:	2322      	movs	r3, #34	@ 0x22
 8014dec:	f8ce 3000 	str.w	r3, [lr]
 8014df0:	4630      	mov	r0, r6
 8014df2:	b932      	cbnz	r2, 8014e02 <_strtoul_l.constprop.0+0xd2>
 8014df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014df8:	b107      	cbz	r7, 8014dfc <_strtoul_l.constprop.0+0xcc>
 8014dfa:	4240      	negs	r0, r0
 8014dfc:	2a00      	cmp	r2, #0
 8014dfe:	d0f9      	beq.n	8014df4 <_strtoul_l.constprop.0+0xc4>
 8014e00:	b106      	cbz	r6, 8014e04 <_strtoul_l.constprop.0+0xd4>
 8014e02:	1e69      	subs	r1, r5, #1
 8014e04:	6011      	str	r1, [r2, #0]
 8014e06:	e7f5      	b.n	8014df4 <_strtoul_l.constprop.0+0xc4>
 8014e08:	08016bdc 	.word	0x08016bdc

08014e0c <strtoul>:
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	460a      	mov	r2, r1
 8014e10:	4601      	mov	r1, r0
 8014e12:	4802      	ldr	r0, [pc, #8]	@ (8014e1c <strtoul+0x10>)
 8014e14:	6800      	ldr	r0, [r0, #0]
 8014e16:	f7ff bf8b 	b.w	8014d30 <_strtoul_l.constprop.0>
 8014e1a:	bf00      	nop
 8014e1c:	20000350 	.word	0x20000350

08014e20 <std>:
 8014e20:	2300      	movs	r3, #0
 8014e22:	b510      	push	{r4, lr}
 8014e24:	4604      	mov	r4, r0
 8014e26:	e9c0 3300 	strd	r3, r3, [r0]
 8014e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e2e:	6083      	str	r3, [r0, #8]
 8014e30:	8181      	strh	r1, [r0, #12]
 8014e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e34:	81c2      	strh	r2, [r0, #14]
 8014e36:	6183      	str	r3, [r0, #24]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	2208      	movs	r2, #8
 8014e3c:	305c      	adds	r0, #92	@ 0x5c
 8014e3e:	f000 f98b 	bl	8015158 <memset>
 8014e42:	4b0d      	ldr	r3, [pc, #52]	@ (8014e78 <std+0x58>)
 8014e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8014e46:	4b0d      	ldr	r3, [pc, #52]	@ (8014e7c <std+0x5c>)
 8014e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8014e80 <std+0x60>)
 8014e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8014e84 <std+0x64>)
 8014e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8014e52:	4b0d      	ldr	r3, [pc, #52]	@ (8014e88 <std+0x68>)
 8014e54:	6224      	str	r4, [r4, #32]
 8014e56:	429c      	cmp	r4, r3
 8014e58:	d006      	beq.n	8014e68 <std+0x48>
 8014e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014e5e:	4294      	cmp	r4, r2
 8014e60:	d002      	beq.n	8014e68 <std+0x48>
 8014e62:	33d0      	adds	r3, #208	@ 0xd0
 8014e64:	429c      	cmp	r4, r3
 8014e66:	d105      	bne.n	8014e74 <std+0x54>
 8014e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e70:	f000 ba30 	b.w	80152d4 <__retarget_lock_init_recursive>
 8014e74:	bd10      	pop	{r4, pc}
 8014e76:	bf00      	nop
 8014e78:	0801500d 	.word	0x0801500d
 8014e7c:	0801502f 	.word	0x0801502f
 8014e80:	08015067 	.word	0x08015067
 8014e84:	0801508b 	.word	0x0801508b
 8014e88:	2000de5c 	.word	0x2000de5c

08014e8c <stdio_exit_handler>:
 8014e8c:	4a02      	ldr	r2, [pc, #8]	@ (8014e98 <stdio_exit_handler+0xc>)
 8014e8e:	4903      	ldr	r1, [pc, #12]	@ (8014e9c <stdio_exit_handler+0x10>)
 8014e90:	4803      	ldr	r0, [pc, #12]	@ (8014ea0 <stdio_exit_handler+0x14>)
 8014e92:	f000 b869 	b.w	8014f68 <_fwalk_sglue>
 8014e96:	bf00      	nop
 8014e98:	20000344 	.word	0x20000344
 8014e9c:	08015ad5 	.word	0x08015ad5
 8014ea0:	20000354 	.word	0x20000354

08014ea4 <cleanup_stdio>:
 8014ea4:	6841      	ldr	r1, [r0, #4]
 8014ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8014ed8 <cleanup_stdio+0x34>)
 8014ea8:	4299      	cmp	r1, r3
 8014eaa:	b510      	push	{r4, lr}
 8014eac:	4604      	mov	r4, r0
 8014eae:	d001      	beq.n	8014eb4 <cleanup_stdio+0x10>
 8014eb0:	f000 fe10 	bl	8015ad4 <_fflush_r>
 8014eb4:	68a1      	ldr	r1, [r4, #8]
 8014eb6:	4b09      	ldr	r3, [pc, #36]	@ (8014edc <cleanup_stdio+0x38>)
 8014eb8:	4299      	cmp	r1, r3
 8014eba:	d002      	beq.n	8014ec2 <cleanup_stdio+0x1e>
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	f000 fe09 	bl	8015ad4 <_fflush_r>
 8014ec2:	68e1      	ldr	r1, [r4, #12]
 8014ec4:	4b06      	ldr	r3, [pc, #24]	@ (8014ee0 <cleanup_stdio+0x3c>)
 8014ec6:	4299      	cmp	r1, r3
 8014ec8:	d004      	beq.n	8014ed4 <cleanup_stdio+0x30>
 8014eca:	4620      	mov	r0, r4
 8014ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed0:	f000 be00 	b.w	8015ad4 <_fflush_r>
 8014ed4:	bd10      	pop	{r4, pc}
 8014ed6:	bf00      	nop
 8014ed8:	2000de5c 	.word	0x2000de5c
 8014edc:	2000dec4 	.word	0x2000dec4
 8014ee0:	2000df2c 	.word	0x2000df2c

08014ee4 <global_stdio_init.part.0>:
 8014ee4:	b510      	push	{r4, lr}
 8014ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8014f14 <global_stdio_init.part.0+0x30>)
 8014ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8014f18 <global_stdio_init.part.0+0x34>)
 8014eea:	4a0c      	ldr	r2, [pc, #48]	@ (8014f1c <global_stdio_init.part.0+0x38>)
 8014eec:	601a      	str	r2, [r3, #0]
 8014eee:	4620      	mov	r0, r4
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	2104      	movs	r1, #4
 8014ef4:	f7ff ff94 	bl	8014e20 <std>
 8014ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014efc:	2201      	movs	r2, #1
 8014efe:	2109      	movs	r1, #9
 8014f00:	f7ff ff8e 	bl	8014e20 <std>
 8014f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f08:	2202      	movs	r2, #2
 8014f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f0e:	2112      	movs	r1, #18
 8014f10:	f7ff bf86 	b.w	8014e20 <std>
 8014f14:	2000df94 	.word	0x2000df94
 8014f18:	2000de5c 	.word	0x2000de5c
 8014f1c:	08014e8d 	.word	0x08014e8d

08014f20 <__sfp_lock_acquire>:
 8014f20:	4801      	ldr	r0, [pc, #4]	@ (8014f28 <__sfp_lock_acquire+0x8>)
 8014f22:	f000 b9d8 	b.w	80152d6 <__retarget_lock_acquire_recursive>
 8014f26:	bf00      	nop
 8014f28:	2000df9e 	.word	0x2000df9e

08014f2c <__sfp_lock_release>:
 8014f2c:	4801      	ldr	r0, [pc, #4]	@ (8014f34 <__sfp_lock_release+0x8>)
 8014f2e:	f000 b9d3 	b.w	80152d8 <__retarget_lock_release_recursive>
 8014f32:	bf00      	nop
 8014f34:	2000df9e 	.word	0x2000df9e

08014f38 <__sinit>:
 8014f38:	b510      	push	{r4, lr}
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	f7ff fff0 	bl	8014f20 <__sfp_lock_acquire>
 8014f40:	6a23      	ldr	r3, [r4, #32]
 8014f42:	b11b      	cbz	r3, 8014f4c <__sinit+0x14>
 8014f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f48:	f7ff bff0 	b.w	8014f2c <__sfp_lock_release>
 8014f4c:	4b04      	ldr	r3, [pc, #16]	@ (8014f60 <__sinit+0x28>)
 8014f4e:	6223      	str	r3, [r4, #32]
 8014f50:	4b04      	ldr	r3, [pc, #16]	@ (8014f64 <__sinit+0x2c>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d1f5      	bne.n	8014f44 <__sinit+0xc>
 8014f58:	f7ff ffc4 	bl	8014ee4 <global_stdio_init.part.0>
 8014f5c:	e7f2      	b.n	8014f44 <__sinit+0xc>
 8014f5e:	bf00      	nop
 8014f60:	08014ea5 	.word	0x08014ea5
 8014f64:	2000df94 	.word	0x2000df94

08014f68 <_fwalk_sglue>:
 8014f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f6c:	4607      	mov	r7, r0
 8014f6e:	4688      	mov	r8, r1
 8014f70:	4614      	mov	r4, r2
 8014f72:	2600      	movs	r6, #0
 8014f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f78:	f1b9 0901 	subs.w	r9, r9, #1
 8014f7c:	d505      	bpl.n	8014f8a <_fwalk_sglue+0x22>
 8014f7e:	6824      	ldr	r4, [r4, #0]
 8014f80:	2c00      	cmp	r4, #0
 8014f82:	d1f7      	bne.n	8014f74 <_fwalk_sglue+0xc>
 8014f84:	4630      	mov	r0, r6
 8014f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f8a:	89ab      	ldrh	r3, [r5, #12]
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d907      	bls.n	8014fa0 <_fwalk_sglue+0x38>
 8014f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f94:	3301      	adds	r3, #1
 8014f96:	d003      	beq.n	8014fa0 <_fwalk_sglue+0x38>
 8014f98:	4629      	mov	r1, r5
 8014f9a:	4638      	mov	r0, r7
 8014f9c:	47c0      	blx	r8
 8014f9e:	4306      	orrs	r6, r0
 8014fa0:	3568      	adds	r5, #104	@ 0x68
 8014fa2:	e7e9      	b.n	8014f78 <_fwalk_sglue+0x10>

08014fa4 <sniprintf>:
 8014fa4:	b40c      	push	{r2, r3}
 8014fa6:	b530      	push	{r4, r5, lr}
 8014fa8:	4b17      	ldr	r3, [pc, #92]	@ (8015008 <sniprintf+0x64>)
 8014faa:	1e0c      	subs	r4, r1, #0
 8014fac:	681d      	ldr	r5, [r3, #0]
 8014fae:	b09d      	sub	sp, #116	@ 0x74
 8014fb0:	da08      	bge.n	8014fc4 <sniprintf+0x20>
 8014fb2:	238b      	movs	r3, #139	@ 0x8b
 8014fb4:	602b      	str	r3, [r5, #0]
 8014fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fba:	b01d      	add	sp, #116	@ 0x74
 8014fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fc0:	b002      	add	sp, #8
 8014fc2:	4770      	bx	lr
 8014fc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014fcc:	bf14      	ite	ne
 8014fce:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014fd2:	4623      	moveq	r3, r4
 8014fd4:	9304      	str	r3, [sp, #16]
 8014fd6:	9307      	str	r3, [sp, #28]
 8014fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fdc:	9002      	str	r0, [sp, #8]
 8014fde:	9006      	str	r0, [sp, #24]
 8014fe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014fe4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014fe6:	ab21      	add	r3, sp, #132	@ 0x84
 8014fe8:	a902      	add	r1, sp, #8
 8014fea:	4628      	mov	r0, r5
 8014fec:	9301      	str	r3, [sp, #4]
 8014fee:	f000 fa63 	bl	80154b8 <_svfiprintf_r>
 8014ff2:	1c43      	adds	r3, r0, #1
 8014ff4:	bfbc      	itt	lt
 8014ff6:	238b      	movlt	r3, #139	@ 0x8b
 8014ff8:	602b      	strlt	r3, [r5, #0]
 8014ffa:	2c00      	cmp	r4, #0
 8014ffc:	d0dd      	beq.n	8014fba <sniprintf+0x16>
 8014ffe:	9b02      	ldr	r3, [sp, #8]
 8015000:	2200      	movs	r2, #0
 8015002:	701a      	strb	r2, [r3, #0]
 8015004:	e7d9      	b.n	8014fba <sniprintf+0x16>
 8015006:	bf00      	nop
 8015008:	20000350 	.word	0x20000350

0801500c <__sread>:
 801500c:	b510      	push	{r4, lr}
 801500e:	460c      	mov	r4, r1
 8015010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015014:	f000 f900 	bl	8015218 <_read_r>
 8015018:	2800      	cmp	r0, #0
 801501a:	bfab      	itete	ge
 801501c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801501e:	89a3      	ldrhlt	r3, [r4, #12]
 8015020:	181b      	addge	r3, r3, r0
 8015022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015026:	bfac      	ite	ge
 8015028:	6563      	strge	r3, [r4, #84]	@ 0x54
 801502a:	81a3      	strhlt	r3, [r4, #12]
 801502c:	bd10      	pop	{r4, pc}

0801502e <__swrite>:
 801502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015032:	461f      	mov	r7, r3
 8015034:	898b      	ldrh	r3, [r1, #12]
 8015036:	05db      	lsls	r3, r3, #23
 8015038:	4605      	mov	r5, r0
 801503a:	460c      	mov	r4, r1
 801503c:	4616      	mov	r6, r2
 801503e:	d505      	bpl.n	801504c <__swrite+0x1e>
 8015040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015044:	2302      	movs	r3, #2
 8015046:	2200      	movs	r2, #0
 8015048:	f000 f8d4 	bl	80151f4 <_lseek_r>
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015056:	81a3      	strh	r3, [r4, #12]
 8015058:	4632      	mov	r2, r6
 801505a:	463b      	mov	r3, r7
 801505c:	4628      	mov	r0, r5
 801505e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015062:	f000 b8fb 	b.w	801525c <_write_r>

08015066 <__sseek>:
 8015066:	b510      	push	{r4, lr}
 8015068:	460c      	mov	r4, r1
 801506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801506e:	f000 f8c1 	bl	80151f4 <_lseek_r>
 8015072:	1c43      	adds	r3, r0, #1
 8015074:	89a3      	ldrh	r3, [r4, #12]
 8015076:	bf15      	itete	ne
 8015078:	6560      	strne	r0, [r4, #84]	@ 0x54
 801507a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801507e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015082:	81a3      	strheq	r3, [r4, #12]
 8015084:	bf18      	it	ne
 8015086:	81a3      	strhne	r3, [r4, #12]
 8015088:	bd10      	pop	{r4, pc}

0801508a <__sclose>:
 801508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801508e:	f000 b8a1 	b.w	80151d4 <_close_r>

08015092 <_vsniprintf_r>:
 8015092:	b530      	push	{r4, r5, lr}
 8015094:	4614      	mov	r4, r2
 8015096:	2c00      	cmp	r4, #0
 8015098:	b09b      	sub	sp, #108	@ 0x6c
 801509a:	4605      	mov	r5, r0
 801509c:	461a      	mov	r2, r3
 801509e:	da05      	bge.n	80150ac <_vsniprintf_r+0x1a>
 80150a0:	238b      	movs	r3, #139	@ 0x8b
 80150a2:	6003      	str	r3, [r0, #0]
 80150a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150a8:	b01b      	add	sp, #108	@ 0x6c
 80150aa:	bd30      	pop	{r4, r5, pc}
 80150ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80150b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80150b4:	bf14      	ite	ne
 80150b6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80150ba:	4623      	moveq	r3, r4
 80150bc:	9302      	str	r3, [sp, #8]
 80150be:	9305      	str	r3, [sp, #20]
 80150c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80150c4:	9100      	str	r1, [sp, #0]
 80150c6:	9104      	str	r1, [sp, #16]
 80150c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80150cc:	4669      	mov	r1, sp
 80150ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80150d0:	f000 f9f2 	bl	80154b8 <_svfiprintf_r>
 80150d4:	1c43      	adds	r3, r0, #1
 80150d6:	bfbc      	itt	lt
 80150d8:	238b      	movlt	r3, #139	@ 0x8b
 80150da:	602b      	strlt	r3, [r5, #0]
 80150dc:	2c00      	cmp	r4, #0
 80150de:	d0e3      	beq.n	80150a8 <_vsniprintf_r+0x16>
 80150e0:	9b00      	ldr	r3, [sp, #0]
 80150e2:	2200      	movs	r2, #0
 80150e4:	701a      	strb	r2, [r3, #0]
 80150e6:	e7df      	b.n	80150a8 <_vsniprintf_r+0x16>

080150e8 <vsniprintf>:
 80150e8:	b507      	push	{r0, r1, r2, lr}
 80150ea:	9300      	str	r3, [sp, #0]
 80150ec:	4613      	mov	r3, r2
 80150ee:	460a      	mov	r2, r1
 80150f0:	4601      	mov	r1, r0
 80150f2:	4803      	ldr	r0, [pc, #12]	@ (8015100 <vsniprintf+0x18>)
 80150f4:	6800      	ldr	r0, [r0, #0]
 80150f6:	f7ff ffcc 	bl	8015092 <_vsniprintf_r>
 80150fa:	b003      	add	sp, #12
 80150fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8015100:	20000350 	.word	0x20000350

08015104 <memcmp>:
 8015104:	b510      	push	{r4, lr}
 8015106:	3901      	subs	r1, #1
 8015108:	4402      	add	r2, r0
 801510a:	4290      	cmp	r0, r2
 801510c:	d101      	bne.n	8015112 <memcmp+0xe>
 801510e:	2000      	movs	r0, #0
 8015110:	e005      	b.n	801511e <memcmp+0x1a>
 8015112:	7803      	ldrb	r3, [r0, #0]
 8015114:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015118:	42a3      	cmp	r3, r4
 801511a:	d001      	beq.n	8015120 <memcmp+0x1c>
 801511c:	1b18      	subs	r0, r3, r4
 801511e:	bd10      	pop	{r4, pc}
 8015120:	3001      	adds	r0, #1
 8015122:	e7f2      	b.n	801510a <memcmp+0x6>

08015124 <memmove>:
 8015124:	4288      	cmp	r0, r1
 8015126:	b510      	push	{r4, lr}
 8015128:	eb01 0402 	add.w	r4, r1, r2
 801512c:	d902      	bls.n	8015134 <memmove+0x10>
 801512e:	4284      	cmp	r4, r0
 8015130:	4623      	mov	r3, r4
 8015132:	d807      	bhi.n	8015144 <memmove+0x20>
 8015134:	1e43      	subs	r3, r0, #1
 8015136:	42a1      	cmp	r1, r4
 8015138:	d008      	beq.n	801514c <memmove+0x28>
 801513a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801513e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015142:	e7f8      	b.n	8015136 <memmove+0x12>
 8015144:	4402      	add	r2, r0
 8015146:	4601      	mov	r1, r0
 8015148:	428a      	cmp	r2, r1
 801514a:	d100      	bne.n	801514e <memmove+0x2a>
 801514c:	bd10      	pop	{r4, pc}
 801514e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015156:	e7f7      	b.n	8015148 <memmove+0x24>

08015158 <memset>:
 8015158:	4402      	add	r2, r0
 801515a:	4603      	mov	r3, r0
 801515c:	4293      	cmp	r3, r2
 801515e:	d100      	bne.n	8015162 <memset+0xa>
 8015160:	4770      	bx	lr
 8015162:	f803 1b01 	strb.w	r1, [r3], #1
 8015166:	e7f9      	b.n	801515c <memset+0x4>

08015168 <strchr>:
 8015168:	b2c9      	uxtb	r1, r1
 801516a:	4603      	mov	r3, r0
 801516c:	4618      	mov	r0, r3
 801516e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015172:	b112      	cbz	r2, 801517a <strchr+0x12>
 8015174:	428a      	cmp	r2, r1
 8015176:	d1f9      	bne.n	801516c <strchr+0x4>
 8015178:	4770      	bx	lr
 801517a:	2900      	cmp	r1, #0
 801517c:	bf18      	it	ne
 801517e:	2000      	movne	r0, #0
 8015180:	4770      	bx	lr

08015182 <strncmp>:
 8015182:	b510      	push	{r4, lr}
 8015184:	b16a      	cbz	r2, 80151a2 <strncmp+0x20>
 8015186:	3901      	subs	r1, #1
 8015188:	1884      	adds	r4, r0, r2
 801518a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801518e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015192:	429a      	cmp	r2, r3
 8015194:	d103      	bne.n	801519e <strncmp+0x1c>
 8015196:	42a0      	cmp	r0, r4
 8015198:	d001      	beq.n	801519e <strncmp+0x1c>
 801519a:	2a00      	cmp	r2, #0
 801519c:	d1f5      	bne.n	801518a <strncmp+0x8>
 801519e:	1ad0      	subs	r0, r2, r3
 80151a0:	bd10      	pop	{r4, pc}
 80151a2:	4610      	mov	r0, r2
 80151a4:	e7fc      	b.n	80151a0 <strncmp+0x1e>

080151a6 <strstr>:
 80151a6:	780a      	ldrb	r2, [r1, #0]
 80151a8:	b570      	push	{r4, r5, r6, lr}
 80151aa:	b96a      	cbnz	r2, 80151c8 <strstr+0x22>
 80151ac:	bd70      	pop	{r4, r5, r6, pc}
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d109      	bne.n	80151c6 <strstr+0x20>
 80151b2:	460c      	mov	r4, r1
 80151b4:	4605      	mov	r5, r0
 80151b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d0f6      	beq.n	80151ac <strstr+0x6>
 80151be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80151c2:	429e      	cmp	r6, r3
 80151c4:	d0f7      	beq.n	80151b6 <strstr+0x10>
 80151c6:	3001      	adds	r0, #1
 80151c8:	7803      	ldrb	r3, [r0, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d1ef      	bne.n	80151ae <strstr+0x8>
 80151ce:	4618      	mov	r0, r3
 80151d0:	e7ec      	b.n	80151ac <strstr+0x6>
	...

080151d4 <_close_r>:
 80151d4:	b538      	push	{r3, r4, r5, lr}
 80151d6:	4d06      	ldr	r5, [pc, #24]	@ (80151f0 <_close_r+0x1c>)
 80151d8:	2300      	movs	r3, #0
 80151da:	4604      	mov	r4, r0
 80151dc:	4608      	mov	r0, r1
 80151de:	602b      	str	r3, [r5, #0]
 80151e0:	f7ed f89e 	bl	8002320 <_close>
 80151e4:	1c43      	adds	r3, r0, #1
 80151e6:	d102      	bne.n	80151ee <_close_r+0x1a>
 80151e8:	682b      	ldr	r3, [r5, #0]
 80151ea:	b103      	cbz	r3, 80151ee <_close_r+0x1a>
 80151ec:	6023      	str	r3, [r4, #0]
 80151ee:	bd38      	pop	{r3, r4, r5, pc}
 80151f0:	2000df98 	.word	0x2000df98

080151f4 <_lseek_r>:
 80151f4:	b538      	push	{r3, r4, r5, lr}
 80151f6:	4d07      	ldr	r5, [pc, #28]	@ (8015214 <_lseek_r+0x20>)
 80151f8:	4604      	mov	r4, r0
 80151fa:	4608      	mov	r0, r1
 80151fc:	4611      	mov	r1, r2
 80151fe:	2200      	movs	r2, #0
 8015200:	602a      	str	r2, [r5, #0]
 8015202:	461a      	mov	r2, r3
 8015204:	f7ed f8b3 	bl	800236e <_lseek>
 8015208:	1c43      	adds	r3, r0, #1
 801520a:	d102      	bne.n	8015212 <_lseek_r+0x1e>
 801520c:	682b      	ldr	r3, [r5, #0]
 801520e:	b103      	cbz	r3, 8015212 <_lseek_r+0x1e>
 8015210:	6023      	str	r3, [r4, #0]
 8015212:	bd38      	pop	{r3, r4, r5, pc}
 8015214:	2000df98 	.word	0x2000df98

08015218 <_read_r>:
 8015218:	b538      	push	{r3, r4, r5, lr}
 801521a:	4d07      	ldr	r5, [pc, #28]	@ (8015238 <_read_r+0x20>)
 801521c:	4604      	mov	r4, r0
 801521e:	4608      	mov	r0, r1
 8015220:	4611      	mov	r1, r2
 8015222:	2200      	movs	r2, #0
 8015224:	602a      	str	r2, [r5, #0]
 8015226:	461a      	mov	r2, r3
 8015228:	f7ed f841 	bl	80022ae <_read>
 801522c:	1c43      	adds	r3, r0, #1
 801522e:	d102      	bne.n	8015236 <_read_r+0x1e>
 8015230:	682b      	ldr	r3, [r5, #0]
 8015232:	b103      	cbz	r3, 8015236 <_read_r+0x1e>
 8015234:	6023      	str	r3, [r4, #0]
 8015236:	bd38      	pop	{r3, r4, r5, pc}
 8015238:	2000df98 	.word	0x2000df98

0801523c <_sbrk_r>:
 801523c:	b538      	push	{r3, r4, r5, lr}
 801523e:	4d06      	ldr	r5, [pc, #24]	@ (8015258 <_sbrk_r+0x1c>)
 8015240:	2300      	movs	r3, #0
 8015242:	4604      	mov	r4, r0
 8015244:	4608      	mov	r0, r1
 8015246:	602b      	str	r3, [r5, #0]
 8015248:	f7ed f89e 	bl	8002388 <_sbrk>
 801524c:	1c43      	adds	r3, r0, #1
 801524e:	d102      	bne.n	8015256 <_sbrk_r+0x1a>
 8015250:	682b      	ldr	r3, [r5, #0]
 8015252:	b103      	cbz	r3, 8015256 <_sbrk_r+0x1a>
 8015254:	6023      	str	r3, [r4, #0]
 8015256:	bd38      	pop	{r3, r4, r5, pc}
 8015258:	2000df98 	.word	0x2000df98

0801525c <_write_r>:
 801525c:	b538      	push	{r3, r4, r5, lr}
 801525e:	4d07      	ldr	r5, [pc, #28]	@ (801527c <_write_r+0x20>)
 8015260:	4604      	mov	r4, r0
 8015262:	4608      	mov	r0, r1
 8015264:	4611      	mov	r1, r2
 8015266:	2200      	movs	r2, #0
 8015268:	602a      	str	r2, [r5, #0]
 801526a:	461a      	mov	r2, r3
 801526c:	f7ed f83c 	bl	80022e8 <_write>
 8015270:	1c43      	adds	r3, r0, #1
 8015272:	d102      	bne.n	801527a <_write_r+0x1e>
 8015274:	682b      	ldr	r3, [r5, #0]
 8015276:	b103      	cbz	r3, 801527a <_write_r+0x1e>
 8015278:	6023      	str	r3, [r4, #0]
 801527a:	bd38      	pop	{r3, r4, r5, pc}
 801527c:	2000df98 	.word	0x2000df98

08015280 <__errno>:
 8015280:	4b01      	ldr	r3, [pc, #4]	@ (8015288 <__errno+0x8>)
 8015282:	6818      	ldr	r0, [r3, #0]
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	20000350 	.word	0x20000350

0801528c <__libc_init_array>:
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	4d0d      	ldr	r5, [pc, #52]	@ (80152c4 <__libc_init_array+0x38>)
 8015290:	4c0d      	ldr	r4, [pc, #52]	@ (80152c8 <__libc_init_array+0x3c>)
 8015292:	1b64      	subs	r4, r4, r5
 8015294:	10a4      	asrs	r4, r4, #2
 8015296:	2600      	movs	r6, #0
 8015298:	42a6      	cmp	r6, r4
 801529a:	d109      	bne.n	80152b0 <__libc_init_array+0x24>
 801529c:	4d0b      	ldr	r5, [pc, #44]	@ (80152cc <__libc_init_array+0x40>)
 801529e:	4c0c      	ldr	r4, [pc, #48]	@ (80152d0 <__libc_init_array+0x44>)
 80152a0:	f000 fef6 	bl	8016090 <_init>
 80152a4:	1b64      	subs	r4, r4, r5
 80152a6:	10a4      	asrs	r4, r4, #2
 80152a8:	2600      	movs	r6, #0
 80152aa:	42a6      	cmp	r6, r4
 80152ac:	d105      	bne.n	80152ba <__libc_init_array+0x2e>
 80152ae:	bd70      	pop	{r4, r5, r6, pc}
 80152b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80152b4:	4798      	blx	r3
 80152b6:	3601      	adds	r6, #1
 80152b8:	e7ee      	b.n	8015298 <__libc_init_array+0xc>
 80152ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80152be:	4798      	blx	r3
 80152c0:	3601      	adds	r6, #1
 80152c2:	e7f2      	b.n	80152aa <__libc_init_array+0x1e>
 80152c4:	08016d54 	.word	0x08016d54
 80152c8:	08016d54 	.word	0x08016d54
 80152cc:	08016d54 	.word	0x08016d54
 80152d0:	08016d5c 	.word	0x08016d5c

080152d4 <__retarget_lock_init_recursive>:
 80152d4:	4770      	bx	lr

080152d6 <__retarget_lock_acquire_recursive>:
 80152d6:	4770      	bx	lr

080152d8 <__retarget_lock_release_recursive>:
 80152d8:	4770      	bx	lr

080152da <strcpy>:
 80152da:	4603      	mov	r3, r0
 80152dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80152e0:	f803 2b01 	strb.w	r2, [r3], #1
 80152e4:	2a00      	cmp	r2, #0
 80152e6:	d1f9      	bne.n	80152dc <strcpy+0x2>
 80152e8:	4770      	bx	lr

080152ea <memcpy>:
 80152ea:	440a      	add	r2, r1
 80152ec:	4291      	cmp	r1, r2
 80152ee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80152f2:	d100      	bne.n	80152f6 <memcpy+0xc>
 80152f4:	4770      	bx	lr
 80152f6:	b510      	push	{r4, lr}
 80152f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015300:	4291      	cmp	r1, r2
 8015302:	d1f9      	bne.n	80152f8 <memcpy+0xe>
 8015304:	bd10      	pop	{r4, pc}
	...

08015308 <__assert_func>:
 8015308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801530a:	4614      	mov	r4, r2
 801530c:	461a      	mov	r2, r3
 801530e:	4b09      	ldr	r3, [pc, #36]	@ (8015334 <__assert_func+0x2c>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4605      	mov	r5, r0
 8015314:	68d8      	ldr	r0, [r3, #12]
 8015316:	b954      	cbnz	r4, 801532e <__assert_func+0x26>
 8015318:	4b07      	ldr	r3, [pc, #28]	@ (8015338 <__assert_func+0x30>)
 801531a:	461c      	mov	r4, r3
 801531c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015320:	9100      	str	r1, [sp, #0]
 8015322:	462b      	mov	r3, r5
 8015324:	4905      	ldr	r1, [pc, #20]	@ (801533c <__assert_func+0x34>)
 8015326:	f000 fbfd 	bl	8015b24 <fiprintf>
 801532a:	f000 fc0d 	bl	8015b48 <abort>
 801532e:	4b04      	ldr	r3, [pc, #16]	@ (8015340 <__assert_func+0x38>)
 8015330:	e7f4      	b.n	801531c <__assert_func+0x14>
 8015332:	bf00      	nop
 8015334:	20000350 	.word	0x20000350
 8015338:	08016d17 	.word	0x08016d17
 801533c:	08016ce9 	.word	0x08016ce9
 8015340:	08016cdc 	.word	0x08016cdc

08015344 <__env_lock>:
 8015344:	4801      	ldr	r0, [pc, #4]	@ (801534c <__env_lock+0x8>)
 8015346:	f7ff bfc6 	b.w	80152d6 <__retarget_lock_acquire_recursive>
 801534a:	bf00      	nop
 801534c:	2000df9c 	.word	0x2000df9c

08015350 <__env_unlock>:
 8015350:	4801      	ldr	r0, [pc, #4]	@ (8015358 <__env_unlock+0x8>)
 8015352:	f7ff bfc1 	b.w	80152d8 <__retarget_lock_release_recursive>
 8015356:	bf00      	nop
 8015358:	2000df9c 	.word	0x2000df9c

0801535c <_free_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	4605      	mov	r5, r0
 8015360:	2900      	cmp	r1, #0
 8015362:	d041      	beq.n	80153e8 <_free_r+0x8c>
 8015364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015368:	1f0c      	subs	r4, r1, #4
 801536a:	2b00      	cmp	r3, #0
 801536c:	bfb8      	it	lt
 801536e:	18e4      	addlt	r4, r4, r3
 8015370:	f7ff fc30 	bl	8014bd4 <__malloc_lock>
 8015374:	4a1d      	ldr	r2, [pc, #116]	@ (80153ec <_free_r+0x90>)
 8015376:	6813      	ldr	r3, [r2, #0]
 8015378:	b933      	cbnz	r3, 8015388 <_free_r+0x2c>
 801537a:	6063      	str	r3, [r4, #4]
 801537c:	6014      	str	r4, [r2, #0]
 801537e:	4628      	mov	r0, r5
 8015380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015384:	f7ff bc2c 	b.w	8014be0 <__malloc_unlock>
 8015388:	42a3      	cmp	r3, r4
 801538a:	d908      	bls.n	801539e <_free_r+0x42>
 801538c:	6820      	ldr	r0, [r4, #0]
 801538e:	1821      	adds	r1, r4, r0
 8015390:	428b      	cmp	r3, r1
 8015392:	bf01      	itttt	eq
 8015394:	6819      	ldreq	r1, [r3, #0]
 8015396:	685b      	ldreq	r3, [r3, #4]
 8015398:	1809      	addeq	r1, r1, r0
 801539a:	6021      	streq	r1, [r4, #0]
 801539c:	e7ed      	b.n	801537a <_free_r+0x1e>
 801539e:	461a      	mov	r2, r3
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	b10b      	cbz	r3, 80153a8 <_free_r+0x4c>
 80153a4:	42a3      	cmp	r3, r4
 80153a6:	d9fa      	bls.n	801539e <_free_r+0x42>
 80153a8:	6811      	ldr	r1, [r2, #0]
 80153aa:	1850      	adds	r0, r2, r1
 80153ac:	42a0      	cmp	r0, r4
 80153ae:	d10b      	bne.n	80153c8 <_free_r+0x6c>
 80153b0:	6820      	ldr	r0, [r4, #0]
 80153b2:	4401      	add	r1, r0
 80153b4:	1850      	adds	r0, r2, r1
 80153b6:	4283      	cmp	r3, r0
 80153b8:	6011      	str	r1, [r2, #0]
 80153ba:	d1e0      	bne.n	801537e <_free_r+0x22>
 80153bc:	6818      	ldr	r0, [r3, #0]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	6053      	str	r3, [r2, #4]
 80153c2:	4408      	add	r0, r1
 80153c4:	6010      	str	r0, [r2, #0]
 80153c6:	e7da      	b.n	801537e <_free_r+0x22>
 80153c8:	d902      	bls.n	80153d0 <_free_r+0x74>
 80153ca:	230c      	movs	r3, #12
 80153cc:	602b      	str	r3, [r5, #0]
 80153ce:	e7d6      	b.n	801537e <_free_r+0x22>
 80153d0:	6820      	ldr	r0, [r4, #0]
 80153d2:	1821      	adds	r1, r4, r0
 80153d4:	428b      	cmp	r3, r1
 80153d6:	bf04      	itt	eq
 80153d8:	6819      	ldreq	r1, [r3, #0]
 80153da:	685b      	ldreq	r3, [r3, #4]
 80153dc:	6063      	str	r3, [r4, #4]
 80153de:	bf04      	itt	eq
 80153e0:	1809      	addeq	r1, r1, r0
 80153e2:	6021      	streq	r1, [r4, #0]
 80153e4:	6054      	str	r4, [r2, #4]
 80153e6:	e7ca      	b.n	801537e <_free_r+0x22>
 80153e8:	bd38      	pop	{r3, r4, r5, pc}
 80153ea:	bf00      	nop
 80153ec:	2000de58 	.word	0x2000de58

080153f0 <_malloc_usable_size_r>:
 80153f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153f4:	1f18      	subs	r0, r3, #4
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	bfbc      	itt	lt
 80153fa:	580b      	ldrlt	r3, [r1, r0]
 80153fc:	18c0      	addlt	r0, r0, r3
 80153fe:	4770      	bx	lr

08015400 <__ssputs_r>:
 8015400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015404:	688e      	ldr	r6, [r1, #8]
 8015406:	461f      	mov	r7, r3
 8015408:	42be      	cmp	r6, r7
 801540a:	680b      	ldr	r3, [r1, #0]
 801540c:	4682      	mov	sl, r0
 801540e:	460c      	mov	r4, r1
 8015410:	4690      	mov	r8, r2
 8015412:	d82d      	bhi.n	8015470 <__ssputs_r+0x70>
 8015414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015418:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801541c:	d026      	beq.n	801546c <__ssputs_r+0x6c>
 801541e:	6965      	ldr	r5, [r4, #20]
 8015420:	6909      	ldr	r1, [r1, #16]
 8015422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015426:	eba3 0901 	sub.w	r9, r3, r1
 801542a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801542e:	1c7b      	adds	r3, r7, #1
 8015430:	444b      	add	r3, r9
 8015432:	106d      	asrs	r5, r5, #1
 8015434:	429d      	cmp	r5, r3
 8015436:	bf38      	it	cc
 8015438:	461d      	movcc	r5, r3
 801543a:	0553      	lsls	r3, r2, #21
 801543c:	d527      	bpl.n	801548e <__ssputs_r+0x8e>
 801543e:	4629      	mov	r1, r5
 8015440:	f7ff fb48 	bl	8014ad4 <_malloc_r>
 8015444:	4606      	mov	r6, r0
 8015446:	b360      	cbz	r0, 80154a2 <__ssputs_r+0xa2>
 8015448:	6921      	ldr	r1, [r4, #16]
 801544a:	464a      	mov	r2, r9
 801544c:	f7ff ff4d 	bl	80152ea <memcpy>
 8015450:	89a3      	ldrh	r3, [r4, #12]
 8015452:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801545a:	81a3      	strh	r3, [r4, #12]
 801545c:	6126      	str	r6, [r4, #16]
 801545e:	6165      	str	r5, [r4, #20]
 8015460:	444e      	add	r6, r9
 8015462:	eba5 0509 	sub.w	r5, r5, r9
 8015466:	6026      	str	r6, [r4, #0]
 8015468:	60a5      	str	r5, [r4, #8]
 801546a:	463e      	mov	r6, r7
 801546c:	42be      	cmp	r6, r7
 801546e:	d900      	bls.n	8015472 <__ssputs_r+0x72>
 8015470:	463e      	mov	r6, r7
 8015472:	6820      	ldr	r0, [r4, #0]
 8015474:	4632      	mov	r2, r6
 8015476:	4641      	mov	r1, r8
 8015478:	f7ff fe54 	bl	8015124 <memmove>
 801547c:	68a3      	ldr	r3, [r4, #8]
 801547e:	1b9b      	subs	r3, r3, r6
 8015480:	60a3      	str	r3, [r4, #8]
 8015482:	6823      	ldr	r3, [r4, #0]
 8015484:	4433      	add	r3, r6
 8015486:	6023      	str	r3, [r4, #0]
 8015488:	2000      	movs	r0, #0
 801548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801548e:	462a      	mov	r2, r5
 8015490:	f7ff fc20 	bl	8014cd4 <_realloc_r>
 8015494:	4606      	mov	r6, r0
 8015496:	2800      	cmp	r0, #0
 8015498:	d1e0      	bne.n	801545c <__ssputs_r+0x5c>
 801549a:	6921      	ldr	r1, [r4, #16]
 801549c:	4650      	mov	r0, sl
 801549e:	f7ff ff5d 	bl	801535c <_free_r>
 80154a2:	230c      	movs	r3, #12
 80154a4:	f8ca 3000 	str.w	r3, [sl]
 80154a8:	89a3      	ldrh	r3, [r4, #12]
 80154aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ae:	81a3      	strh	r3, [r4, #12]
 80154b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154b4:	e7e9      	b.n	801548a <__ssputs_r+0x8a>
	...

080154b8 <_svfiprintf_r>:
 80154b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154bc:	4698      	mov	r8, r3
 80154be:	898b      	ldrh	r3, [r1, #12]
 80154c0:	061b      	lsls	r3, r3, #24
 80154c2:	b09d      	sub	sp, #116	@ 0x74
 80154c4:	4607      	mov	r7, r0
 80154c6:	460d      	mov	r5, r1
 80154c8:	4614      	mov	r4, r2
 80154ca:	d510      	bpl.n	80154ee <_svfiprintf_r+0x36>
 80154cc:	690b      	ldr	r3, [r1, #16]
 80154ce:	b973      	cbnz	r3, 80154ee <_svfiprintf_r+0x36>
 80154d0:	2140      	movs	r1, #64	@ 0x40
 80154d2:	f7ff faff 	bl	8014ad4 <_malloc_r>
 80154d6:	6028      	str	r0, [r5, #0]
 80154d8:	6128      	str	r0, [r5, #16]
 80154da:	b930      	cbnz	r0, 80154ea <_svfiprintf_r+0x32>
 80154dc:	230c      	movs	r3, #12
 80154de:	603b      	str	r3, [r7, #0]
 80154e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154e4:	b01d      	add	sp, #116	@ 0x74
 80154e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ea:	2340      	movs	r3, #64	@ 0x40
 80154ec:	616b      	str	r3, [r5, #20]
 80154ee:	2300      	movs	r3, #0
 80154f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80154f2:	2320      	movs	r3, #32
 80154f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80154fc:	2330      	movs	r3, #48	@ 0x30
 80154fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801569c <_svfiprintf_r+0x1e4>
 8015502:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015506:	f04f 0901 	mov.w	r9, #1
 801550a:	4623      	mov	r3, r4
 801550c:	469a      	mov	sl, r3
 801550e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015512:	b10a      	cbz	r2, 8015518 <_svfiprintf_r+0x60>
 8015514:	2a25      	cmp	r2, #37	@ 0x25
 8015516:	d1f9      	bne.n	801550c <_svfiprintf_r+0x54>
 8015518:	ebba 0b04 	subs.w	fp, sl, r4
 801551c:	d00b      	beq.n	8015536 <_svfiprintf_r+0x7e>
 801551e:	465b      	mov	r3, fp
 8015520:	4622      	mov	r2, r4
 8015522:	4629      	mov	r1, r5
 8015524:	4638      	mov	r0, r7
 8015526:	f7ff ff6b 	bl	8015400 <__ssputs_r>
 801552a:	3001      	adds	r0, #1
 801552c:	f000 80a7 	beq.w	801567e <_svfiprintf_r+0x1c6>
 8015530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015532:	445a      	add	r2, fp
 8015534:	9209      	str	r2, [sp, #36]	@ 0x24
 8015536:	f89a 3000 	ldrb.w	r3, [sl]
 801553a:	2b00      	cmp	r3, #0
 801553c:	f000 809f 	beq.w	801567e <_svfiprintf_r+0x1c6>
 8015540:	2300      	movs	r3, #0
 8015542:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801554a:	f10a 0a01 	add.w	sl, sl, #1
 801554e:	9304      	str	r3, [sp, #16]
 8015550:	9307      	str	r3, [sp, #28]
 8015552:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015556:	931a      	str	r3, [sp, #104]	@ 0x68
 8015558:	4654      	mov	r4, sl
 801555a:	2205      	movs	r2, #5
 801555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015560:	484e      	ldr	r0, [pc, #312]	@ (801569c <_svfiprintf_r+0x1e4>)
 8015562:	f7ea fe55 	bl	8000210 <memchr>
 8015566:	9a04      	ldr	r2, [sp, #16]
 8015568:	b9d8      	cbnz	r0, 80155a2 <_svfiprintf_r+0xea>
 801556a:	06d0      	lsls	r0, r2, #27
 801556c:	bf44      	itt	mi
 801556e:	2320      	movmi	r3, #32
 8015570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015574:	0711      	lsls	r1, r2, #28
 8015576:	bf44      	itt	mi
 8015578:	232b      	movmi	r3, #43	@ 0x2b
 801557a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801557e:	f89a 3000 	ldrb.w	r3, [sl]
 8015582:	2b2a      	cmp	r3, #42	@ 0x2a
 8015584:	d015      	beq.n	80155b2 <_svfiprintf_r+0xfa>
 8015586:	9a07      	ldr	r2, [sp, #28]
 8015588:	4654      	mov	r4, sl
 801558a:	2000      	movs	r0, #0
 801558c:	f04f 0c0a 	mov.w	ip, #10
 8015590:	4621      	mov	r1, r4
 8015592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015596:	3b30      	subs	r3, #48	@ 0x30
 8015598:	2b09      	cmp	r3, #9
 801559a:	d94b      	bls.n	8015634 <_svfiprintf_r+0x17c>
 801559c:	b1b0      	cbz	r0, 80155cc <_svfiprintf_r+0x114>
 801559e:	9207      	str	r2, [sp, #28]
 80155a0:	e014      	b.n	80155cc <_svfiprintf_r+0x114>
 80155a2:	eba0 0308 	sub.w	r3, r0, r8
 80155a6:	fa09 f303 	lsl.w	r3, r9, r3
 80155aa:	4313      	orrs	r3, r2
 80155ac:	9304      	str	r3, [sp, #16]
 80155ae:	46a2      	mov	sl, r4
 80155b0:	e7d2      	b.n	8015558 <_svfiprintf_r+0xa0>
 80155b2:	9b03      	ldr	r3, [sp, #12]
 80155b4:	1d19      	adds	r1, r3, #4
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	9103      	str	r1, [sp, #12]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	bfbb      	ittet	lt
 80155be:	425b      	neglt	r3, r3
 80155c0:	f042 0202 	orrlt.w	r2, r2, #2
 80155c4:	9307      	strge	r3, [sp, #28]
 80155c6:	9307      	strlt	r3, [sp, #28]
 80155c8:	bfb8      	it	lt
 80155ca:	9204      	strlt	r2, [sp, #16]
 80155cc:	7823      	ldrb	r3, [r4, #0]
 80155ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80155d0:	d10a      	bne.n	80155e8 <_svfiprintf_r+0x130>
 80155d2:	7863      	ldrb	r3, [r4, #1]
 80155d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80155d6:	d132      	bne.n	801563e <_svfiprintf_r+0x186>
 80155d8:	9b03      	ldr	r3, [sp, #12]
 80155da:	1d1a      	adds	r2, r3, #4
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	9203      	str	r2, [sp, #12]
 80155e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155e4:	3402      	adds	r4, #2
 80155e6:	9305      	str	r3, [sp, #20]
 80155e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80156ac <_svfiprintf_r+0x1f4>
 80155ec:	7821      	ldrb	r1, [r4, #0]
 80155ee:	2203      	movs	r2, #3
 80155f0:	4650      	mov	r0, sl
 80155f2:	f7ea fe0d 	bl	8000210 <memchr>
 80155f6:	b138      	cbz	r0, 8015608 <_svfiprintf_r+0x150>
 80155f8:	9b04      	ldr	r3, [sp, #16]
 80155fa:	eba0 000a 	sub.w	r0, r0, sl
 80155fe:	2240      	movs	r2, #64	@ 0x40
 8015600:	4082      	lsls	r2, r0
 8015602:	4313      	orrs	r3, r2
 8015604:	3401      	adds	r4, #1
 8015606:	9304      	str	r3, [sp, #16]
 8015608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801560c:	4824      	ldr	r0, [pc, #144]	@ (80156a0 <_svfiprintf_r+0x1e8>)
 801560e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015612:	2206      	movs	r2, #6
 8015614:	f7ea fdfc 	bl	8000210 <memchr>
 8015618:	2800      	cmp	r0, #0
 801561a:	d036      	beq.n	801568a <_svfiprintf_r+0x1d2>
 801561c:	4b21      	ldr	r3, [pc, #132]	@ (80156a4 <_svfiprintf_r+0x1ec>)
 801561e:	bb1b      	cbnz	r3, 8015668 <_svfiprintf_r+0x1b0>
 8015620:	9b03      	ldr	r3, [sp, #12]
 8015622:	3307      	adds	r3, #7
 8015624:	f023 0307 	bic.w	r3, r3, #7
 8015628:	3308      	adds	r3, #8
 801562a:	9303      	str	r3, [sp, #12]
 801562c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801562e:	4433      	add	r3, r6
 8015630:	9309      	str	r3, [sp, #36]	@ 0x24
 8015632:	e76a      	b.n	801550a <_svfiprintf_r+0x52>
 8015634:	fb0c 3202 	mla	r2, ip, r2, r3
 8015638:	460c      	mov	r4, r1
 801563a:	2001      	movs	r0, #1
 801563c:	e7a8      	b.n	8015590 <_svfiprintf_r+0xd8>
 801563e:	2300      	movs	r3, #0
 8015640:	3401      	adds	r4, #1
 8015642:	9305      	str	r3, [sp, #20]
 8015644:	4619      	mov	r1, r3
 8015646:	f04f 0c0a 	mov.w	ip, #10
 801564a:	4620      	mov	r0, r4
 801564c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015650:	3a30      	subs	r2, #48	@ 0x30
 8015652:	2a09      	cmp	r2, #9
 8015654:	d903      	bls.n	801565e <_svfiprintf_r+0x1a6>
 8015656:	2b00      	cmp	r3, #0
 8015658:	d0c6      	beq.n	80155e8 <_svfiprintf_r+0x130>
 801565a:	9105      	str	r1, [sp, #20]
 801565c:	e7c4      	b.n	80155e8 <_svfiprintf_r+0x130>
 801565e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015662:	4604      	mov	r4, r0
 8015664:	2301      	movs	r3, #1
 8015666:	e7f0      	b.n	801564a <_svfiprintf_r+0x192>
 8015668:	ab03      	add	r3, sp, #12
 801566a:	9300      	str	r3, [sp, #0]
 801566c:	462a      	mov	r2, r5
 801566e:	4b0e      	ldr	r3, [pc, #56]	@ (80156a8 <_svfiprintf_r+0x1f0>)
 8015670:	a904      	add	r1, sp, #16
 8015672:	4638      	mov	r0, r7
 8015674:	f3af 8000 	nop.w
 8015678:	1c42      	adds	r2, r0, #1
 801567a:	4606      	mov	r6, r0
 801567c:	d1d6      	bne.n	801562c <_svfiprintf_r+0x174>
 801567e:	89ab      	ldrh	r3, [r5, #12]
 8015680:	065b      	lsls	r3, r3, #25
 8015682:	f53f af2d 	bmi.w	80154e0 <_svfiprintf_r+0x28>
 8015686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015688:	e72c      	b.n	80154e4 <_svfiprintf_r+0x2c>
 801568a:	ab03      	add	r3, sp, #12
 801568c:	9300      	str	r3, [sp, #0]
 801568e:	462a      	mov	r2, r5
 8015690:	4b05      	ldr	r3, [pc, #20]	@ (80156a8 <_svfiprintf_r+0x1f0>)
 8015692:	a904      	add	r1, sp, #16
 8015694:	4638      	mov	r0, r7
 8015696:	f000 f879 	bl	801578c <_printf_i>
 801569a:	e7ed      	b.n	8015678 <_svfiprintf_r+0x1c0>
 801569c:	08016d18 	.word	0x08016d18
 80156a0:	08016d22 	.word	0x08016d22
 80156a4:	00000000 	.word	0x00000000
 80156a8:	08015401 	.word	0x08015401
 80156ac:	08016d1e 	.word	0x08016d1e

080156b0 <_printf_common>:
 80156b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156b4:	4616      	mov	r6, r2
 80156b6:	4698      	mov	r8, r3
 80156b8:	688a      	ldr	r2, [r1, #8]
 80156ba:	690b      	ldr	r3, [r1, #16]
 80156bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156c0:	4293      	cmp	r3, r2
 80156c2:	bfb8      	it	lt
 80156c4:	4613      	movlt	r3, r2
 80156c6:	6033      	str	r3, [r6, #0]
 80156c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80156cc:	4607      	mov	r7, r0
 80156ce:	460c      	mov	r4, r1
 80156d0:	b10a      	cbz	r2, 80156d6 <_printf_common+0x26>
 80156d2:	3301      	adds	r3, #1
 80156d4:	6033      	str	r3, [r6, #0]
 80156d6:	6823      	ldr	r3, [r4, #0]
 80156d8:	0699      	lsls	r1, r3, #26
 80156da:	bf42      	ittt	mi
 80156dc:	6833      	ldrmi	r3, [r6, #0]
 80156de:	3302      	addmi	r3, #2
 80156e0:	6033      	strmi	r3, [r6, #0]
 80156e2:	6825      	ldr	r5, [r4, #0]
 80156e4:	f015 0506 	ands.w	r5, r5, #6
 80156e8:	d106      	bne.n	80156f8 <_printf_common+0x48>
 80156ea:	f104 0a19 	add.w	sl, r4, #25
 80156ee:	68e3      	ldr	r3, [r4, #12]
 80156f0:	6832      	ldr	r2, [r6, #0]
 80156f2:	1a9b      	subs	r3, r3, r2
 80156f4:	42ab      	cmp	r3, r5
 80156f6:	dc26      	bgt.n	8015746 <_printf_common+0x96>
 80156f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80156fc:	6822      	ldr	r2, [r4, #0]
 80156fe:	3b00      	subs	r3, #0
 8015700:	bf18      	it	ne
 8015702:	2301      	movne	r3, #1
 8015704:	0692      	lsls	r2, r2, #26
 8015706:	d42b      	bmi.n	8015760 <_printf_common+0xb0>
 8015708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801570c:	4641      	mov	r1, r8
 801570e:	4638      	mov	r0, r7
 8015710:	47c8      	blx	r9
 8015712:	3001      	adds	r0, #1
 8015714:	d01e      	beq.n	8015754 <_printf_common+0xa4>
 8015716:	6823      	ldr	r3, [r4, #0]
 8015718:	6922      	ldr	r2, [r4, #16]
 801571a:	f003 0306 	and.w	r3, r3, #6
 801571e:	2b04      	cmp	r3, #4
 8015720:	bf02      	ittt	eq
 8015722:	68e5      	ldreq	r5, [r4, #12]
 8015724:	6833      	ldreq	r3, [r6, #0]
 8015726:	1aed      	subeq	r5, r5, r3
 8015728:	68a3      	ldr	r3, [r4, #8]
 801572a:	bf0c      	ite	eq
 801572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015730:	2500      	movne	r5, #0
 8015732:	4293      	cmp	r3, r2
 8015734:	bfc4      	itt	gt
 8015736:	1a9b      	subgt	r3, r3, r2
 8015738:	18ed      	addgt	r5, r5, r3
 801573a:	2600      	movs	r6, #0
 801573c:	341a      	adds	r4, #26
 801573e:	42b5      	cmp	r5, r6
 8015740:	d11a      	bne.n	8015778 <_printf_common+0xc8>
 8015742:	2000      	movs	r0, #0
 8015744:	e008      	b.n	8015758 <_printf_common+0xa8>
 8015746:	2301      	movs	r3, #1
 8015748:	4652      	mov	r2, sl
 801574a:	4641      	mov	r1, r8
 801574c:	4638      	mov	r0, r7
 801574e:	47c8      	blx	r9
 8015750:	3001      	adds	r0, #1
 8015752:	d103      	bne.n	801575c <_printf_common+0xac>
 8015754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801575c:	3501      	adds	r5, #1
 801575e:	e7c6      	b.n	80156ee <_printf_common+0x3e>
 8015760:	18e1      	adds	r1, r4, r3
 8015762:	1c5a      	adds	r2, r3, #1
 8015764:	2030      	movs	r0, #48	@ 0x30
 8015766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801576a:	4422      	add	r2, r4
 801576c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015774:	3302      	adds	r3, #2
 8015776:	e7c7      	b.n	8015708 <_printf_common+0x58>
 8015778:	2301      	movs	r3, #1
 801577a:	4622      	mov	r2, r4
 801577c:	4641      	mov	r1, r8
 801577e:	4638      	mov	r0, r7
 8015780:	47c8      	blx	r9
 8015782:	3001      	adds	r0, #1
 8015784:	d0e6      	beq.n	8015754 <_printf_common+0xa4>
 8015786:	3601      	adds	r6, #1
 8015788:	e7d9      	b.n	801573e <_printf_common+0x8e>
	...

0801578c <_printf_i>:
 801578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015790:	7e0f      	ldrb	r7, [r1, #24]
 8015792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015794:	2f78      	cmp	r7, #120	@ 0x78
 8015796:	4691      	mov	r9, r2
 8015798:	4680      	mov	r8, r0
 801579a:	460c      	mov	r4, r1
 801579c:	469a      	mov	sl, r3
 801579e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80157a2:	d807      	bhi.n	80157b4 <_printf_i+0x28>
 80157a4:	2f62      	cmp	r7, #98	@ 0x62
 80157a6:	d80a      	bhi.n	80157be <_printf_i+0x32>
 80157a8:	2f00      	cmp	r7, #0
 80157aa:	f000 80d2 	beq.w	8015952 <_printf_i+0x1c6>
 80157ae:	2f58      	cmp	r7, #88	@ 0x58
 80157b0:	f000 80b9 	beq.w	8015926 <_printf_i+0x19a>
 80157b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157bc:	e03a      	b.n	8015834 <_printf_i+0xa8>
 80157be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157c2:	2b15      	cmp	r3, #21
 80157c4:	d8f6      	bhi.n	80157b4 <_printf_i+0x28>
 80157c6:	a101      	add	r1, pc, #4	@ (adr r1, 80157cc <_printf_i+0x40>)
 80157c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157cc:	08015825 	.word	0x08015825
 80157d0:	08015839 	.word	0x08015839
 80157d4:	080157b5 	.word	0x080157b5
 80157d8:	080157b5 	.word	0x080157b5
 80157dc:	080157b5 	.word	0x080157b5
 80157e0:	080157b5 	.word	0x080157b5
 80157e4:	08015839 	.word	0x08015839
 80157e8:	080157b5 	.word	0x080157b5
 80157ec:	080157b5 	.word	0x080157b5
 80157f0:	080157b5 	.word	0x080157b5
 80157f4:	080157b5 	.word	0x080157b5
 80157f8:	08015939 	.word	0x08015939
 80157fc:	08015863 	.word	0x08015863
 8015800:	080158f3 	.word	0x080158f3
 8015804:	080157b5 	.word	0x080157b5
 8015808:	080157b5 	.word	0x080157b5
 801580c:	0801595b 	.word	0x0801595b
 8015810:	080157b5 	.word	0x080157b5
 8015814:	08015863 	.word	0x08015863
 8015818:	080157b5 	.word	0x080157b5
 801581c:	080157b5 	.word	0x080157b5
 8015820:	080158fb 	.word	0x080158fb
 8015824:	6833      	ldr	r3, [r6, #0]
 8015826:	1d1a      	adds	r2, r3, #4
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	6032      	str	r2, [r6, #0]
 801582c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015834:	2301      	movs	r3, #1
 8015836:	e09d      	b.n	8015974 <_printf_i+0x1e8>
 8015838:	6833      	ldr	r3, [r6, #0]
 801583a:	6820      	ldr	r0, [r4, #0]
 801583c:	1d19      	adds	r1, r3, #4
 801583e:	6031      	str	r1, [r6, #0]
 8015840:	0606      	lsls	r6, r0, #24
 8015842:	d501      	bpl.n	8015848 <_printf_i+0xbc>
 8015844:	681d      	ldr	r5, [r3, #0]
 8015846:	e003      	b.n	8015850 <_printf_i+0xc4>
 8015848:	0645      	lsls	r5, r0, #25
 801584a:	d5fb      	bpl.n	8015844 <_printf_i+0xb8>
 801584c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015850:	2d00      	cmp	r5, #0
 8015852:	da03      	bge.n	801585c <_printf_i+0xd0>
 8015854:	232d      	movs	r3, #45	@ 0x2d
 8015856:	426d      	negs	r5, r5
 8015858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801585c:	4859      	ldr	r0, [pc, #356]	@ (80159c4 <_printf_i+0x238>)
 801585e:	230a      	movs	r3, #10
 8015860:	e011      	b.n	8015886 <_printf_i+0xfa>
 8015862:	6821      	ldr	r1, [r4, #0]
 8015864:	6833      	ldr	r3, [r6, #0]
 8015866:	0608      	lsls	r0, r1, #24
 8015868:	f853 5b04 	ldr.w	r5, [r3], #4
 801586c:	d402      	bmi.n	8015874 <_printf_i+0xe8>
 801586e:	0649      	lsls	r1, r1, #25
 8015870:	bf48      	it	mi
 8015872:	b2ad      	uxthmi	r5, r5
 8015874:	2f6f      	cmp	r7, #111	@ 0x6f
 8015876:	4853      	ldr	r0, [pc, #332]	@ (80159c4 <_printf_i+0x238>)
 8015878:	6033      	str	r3, [r6, #0]
 801587a:	bf14      	ite	ne
 801587c:	230a      	movne	r3, #10
 801587e:	2308      	moveq	r3, #8
 8015880:	2100      	movs	r1, #0
 8015882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015886:	6866      	ldr	r6, [r4, #4]
 8015888:	60a6      	str	r6, [r4, #8]
 801588a:	2e00      	cmp	r6, #0
 801588c:	bfa2      	ittt	ge
 801588e:	6821      	ldrge	r1, [r4, #0]
 8015890:	f021 0104 	bicge.w	r1, r1, #4
 8015894:	6021      	strge	r1, [r4, #0]
 8015896:	b90d      	cbnz	r5, 801589c <_printf_i+0x110>
 8015898:	2e00      	cmp	r6, #0
 801589a:	d04b      	beq.n	8015934 <_printf_i+0x1a8>
 801589c:	4616      	mov	r6, r2
 801589e:	fbb5 f1f3 	udiv	r1, r5, r3
 80158a2:	fb03 5711 	mls	r7, r3, r1, r5
 80158a6:	5dc7      	ldrb	r7, [r0, r7]
 80158a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158ac:	462f      	mov	r7, r5
 80158ae:	42bb      	cmp	r3, r7
 80158b0:	460d      	mov	r5, r1
 80158b2:	d9f4      	bls.n	801589e <_printf_i+0x112>
 80158b4:	2b08      	cmp	r3, #8
 80158b6:	d10b      	bne.n	80158d0 <_printf_i+0x144>
 80158b8:	6823      	ldr	r3, [r4, #0]
 80158ba:	07df      	lsls	r7, r3, #31
 80158bc:	d508      	bpl.n	80158d0 <_printf_i+0x144>
 80158be:	6923      	ldr	r3, [r4, #16]
 80158c0:	6861      	ldr	r1, [r4, #4]
 80158c2:	4299      	cmp	r1, r3
 80158c4:	bfde      	ittt	le
 80158c6:	2330      	movle	r3, #48	@ 0x30
 80158c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158cc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80158d0:	1b92      	subs	r2, r2, r6
 80158d2:	6122      	str	r2, [r4, #16]
 80158d4:	f8cd a000 	str.w	sl, [sp]
 80158d8:	464b      	mov	r3, r9
 80158da:	aa03      	add	r2, sp, #12
 80158dc:	4621      	mov	r1, r4
 80158de:	4640      	mov	r0, r8
 80158e0:	f7ff fee6 	bl	80156b0 <_printf_common>
 80158e4:	3001      	adds	r0, #1
 80158e6:	d14a      	bne.n	801597e <_printf_i+0x1f2>
 80158e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158ec:	b004      	add	sp, #16
 80158ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f2:	6823      	ldr	r3, [r4, #0]
 80158f4:	f043 0320 	orr.w	r3, r3, #32
 80158f8:	6023      	str	r3, [r4, #0]
 80158fa:	4833      	ldr	r0, [pc, #204]	@ (80159c8 <_printf_i+0x23c>)
 80158fc:	2778      	movs	r7, #120	@ 0x78
 80158fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	6831      	ldr	r1, [r6, #0]
 8015906:	061f      	lsls	r7, r3, #24
 8015908:	f851 5b04 	ldr.w	r5, [r1], #4
 801590c:	d402      	bmi.n	8015914 <_printf_i+0x188>
 801590e:	065f      	lsls	r7, r3, #25
 8015910:	bf48      	it	mi
 8015912:	b2ad      	uxthmi	r5, r5
 8015914:	6031      	str	r1, [r6, #0]
 8015916:	07d9      	lsls	r1, r3, #31
 8015918:	bf44      	itt	mi
 801591a:	f043 0320 	orrmi.w	r3, r3, #32
 801591e:	6023      	strmi	r3, [r4, #0]
 8015920:	b11d      	cbz	r5, 801592a <_printf_i+0x19e>
 8015922:	2310      	movs	r3, #16
 8015924:	e7ac      	b.n	8015880 <_printf_i+0xf4>
 8015926:	4827      	ldr	r0, [pc, #156]	@ (80159c4 <_printf_i+0x238>)
 8015928:	e7e9      	b.n	80158fe <_printf_i+0x172>
 801592a:	6823      	ldr	r3, [r4, #0]
 801592c:	f023 0320 	bic.w	r3, r3, #32
 8015930:	6023      	str	r3, [r4, #0]
 8015932:	e7f6      	b.n	8015922 <_printf_i+0x196>
 8015934:	4616      	mov	r6, r2
 8015936:	e7bd      	b.n	80158b4 <_printf_i+0x128>
 8015938:	6833      	ldr	r3, [r6, #0]
 801593a:	6825      	ldr	r5, [r4, #0]
 801593c:	6961      	ldr	r1, [r4, #20]
 801593e:	1d18      	adds	r0, r3, #4
 8015940:	6030      	str	r0, [r6, #0]
 8015942:	062e      	lsls	r6, r5, #24
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	d501      	bpl.n	801594c <_printf_i+0x1c0>
 8015948:	6019      	str	r1, [r3, #0]
 801594a:	e002      	b.n	8015952 <_printf_i+0x1c6>
 801594c:	0668      	lsls	r0, r5, #25
 801594e:	d5fb      	bpl.n	8015948 <_printf_i+0x1bc>
 8015950:	8019      	strh	r1, [r3, #0]
 8015952:	2300      	movs	r3, #0
 8015954:	6123      	str	r3, [r4, #16]
 8015956:	4616      	mov	r6, r2
 8015958:	e7bc      	b.n	80158d4 <_printf_i+0x148>
 801595a:	6833      	ldr	r3, [r6, #0]
 801595c:	1d1a      	adds	r2, r3, #4
 801595e:	6032      	str	r2, [r6, #0]
 8015960:	681e      	ldr	r6, [r3, #0]
 8015962:	6862      	ldr	r2, [r4, #4]
 8015964:	2100      	movs	r1, #0
 8015966:	4630      	mov	r0, r6
 8015968:	f7ea fc52 	bl	8000210 <memchr>
 801596c:	b108      	cbz	r0, 8015972 <_printf_i+0x1e6>
 801596e:	1b80      	subs	r0, r0, r6
 8015970:	6060      	str	r0, [r4, #4]
 8015972:	6863      	ldr	r3, [r4, #4]
 8015974:	6123      	str	r3, [r4, #16]
 8015976:	2300      	movs	r3, #0
 8015978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801597c:	e7aa      	b.n	80158d4 <_printf_i+0x148>
 801597e:	6923      	ldr	r3, [r4, #16]
 8015980:	4632      	mov	r2, r6
 8015982:	4649      	mov	r1, r9
 8015984:	4640      	mov	r0, r8
 8015986:	47d0      	blx	sl
 8015988:	3001      	adds	r0, #1
 801598a:	d0ad      	beq.n	80158e8 <_printf_i+0x15c>
 801598c:	6823      	ldr	r3, [r4, #0]
 801598e:	079b      	lsls	r3, r3, #30
 8015990:	d413      	bmi.n	80159ba <_printf_i+0x22e>
 8015992:	68e0      	ldr	r0, [r4, #12]
 8015994:	9b03      	ldr	r3, [sp, #12]
 8015996:	4298      	cmp	r0, r3
 8015998:	bfb8      	it	lt
 801599a:	4618      	movlt	r0, r3
 801599c:	e7a6      	b.n	80158ec <_printf_i+0x160>
 801599e:	2301      	movs	r3, #1
 80159a0:	4632      	mov	r2, r6
 80159a2:	4649      	mov	r1, r9
 80159a4:	4640      	mov	r0, r8
 80159a6:	47d0      	blx	sl
 80159a8:	3001      	adds	r0, #1
 80159aa:	d09d      	beq.n	80158e8 <_printf_i+0x15c>
 80159ac:	3501      	adds	r5, #1
 80159ae:	68e3      	ldr	r3, [r4, #12]
 80159b0:	9903      	ldr	r1, [sp, #12]
 80159b2:	1a5b      	subs	r3, r3, r1
 80159b4:	42ab      	cmp	r3, r5
 80159b6:	dcf2      	bgt.n	801599e <_printf_i+0x212>
 80159b8:	e7eb      	b.n	8015992 <_printf_i+0x206>
 80159ba:	2500      	movs	r5, #0
 80159bc:	f104 0619 	add.w	r6, r4, #25
 80159c0:	e7f5      	b.n	80159ae <_printf_i+0x222>
 80159c2:	bf00      	nop
 80159c4:	08016d29 	.word	0x08016d29
 80159c8:	08016d3a 	.word	0x08016d3a

080159cc <__sflush_r>:
 80159cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80159d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d4:	0716      	lsls	r6, r2, #28
 80159d6:	4605      	mov	r5, r0
 80159d8:	460c      	mov	r4, r1
 80159da:	d454      	bmi.n	8015a86 <__sflush_r+0xba>
 80159dc:	684b      	ldr	r3, [r1, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	dc02      	bgt.n	80159e8 <__sflush_r+0x1c>
 80159e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	dd48      	ble.n	8015a7a <__sflush_r+0xae>
 80159e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80159ea:	2e00      	cmp	r6, #0
 80159ec:	d045      	beq.n	8015a7a <__sflush_r+0xae>
 80159ee:	2300      	movs	r3, #0
 80159f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80159f4:	682f      	ldr	r7, [r5, #0]
 80159f6:	6a21      	ldr	r1, [r4, #32]
 80159f8:	602b      	str	r3, [r5, #0]
 80159fa:	d030      	beq.n	8015a5e <__sflush_r+0x92>
 80159fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80159fe:	89a3      	ldrh	r3, [r4, #12]
 8015a00:	0759      	lsls	r1, r3, #29
 8015a02:	d505      	bpl.n	8015a10 <__sflush_r+0x44>
 8015a04:	6863      	ldr	r3, [r4, #4]
 8015a06:	1ad2      	subs	r2, r2, r3
 8015a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015a0a:	b10b      	cbz	r3, 8015a10 <__sflush_r+0x44>
 8015a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015a0e:	1ad2      	subs	r2, r2, r3
 8015a10:	2300      	movs	r3, #0
 8015a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a14:	6a21      	ldr	r1, [r4, #32]
 8015a16:	4628      	mov	r0, r5
 8015a18:	47b0      	blx	r6
 8015a1a:	1c43      	adds	r3, r0, #1
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	d106      	bne.n	8015a2e <__sflush_r+0x62>
 8015a20:	6829      	ldr	r1, [r5, #0]
 8015a22:	291d      	cmp	r1, #29
 8015a24:	d82b      	bhi.n	8015a7e <__sflush_r+0xb2>
 8015a26:	4a2a      	ldr	r2, [pc, #168]	@ (8015ad0 <__sflush_r+0x104>)
 8015a28:	410a      	asrs	r2, r1
 8015a2a:	07d6      	lsls	r6, r2, #31
 8015a2c:	d427      	bmi.n	8015a7e <__sflush_r+0xb2>
 8015a2e:	2200      	movs	r2, #0
 8015a30:	6062      	str	r2, [r4, #4]
 8015a32:	04d9      	lsls	r1, r3, #19
 8015a34:	6922      	ldr	r2, [r4, #16]
 8015a36:	6022      	str	r2, [r4, #0]
 8015a38:	d504      	bpl.n	8015a44 <__sflush_r+0x78>
 8015a3a:	1c42      	adds	r2, r0, #1
 8015a3c:	d101      	bne.n	8015a42 <__sflush_r+0x76>
 8015a3e:	682b      	ldr	r3, [r5, #0]
 8015a40:	b903      	cbnz	r3, 8015a44 <__sflush_r+0x78>
 8015a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8015a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a46:	602f      	str	r7, [r5, #0]
 8015a48:	b1b9      	cbz	r1, 8015a7a <__sflush_r+0xae>
 8015a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a4e:	4299      	cmp	r1, r3
 8015a50:	d002      	beq.n	8015a58 <__sflush_r+0x8c>
 8015a52:	4628      	mov	r0, r5
 8015a54:	f7ff fc82 	bl	801535c <_free_r>
 8015a58:	2300      	movs	r3, #0
 8015a5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a5c:	e00d      	b.n	8015a7a <__sflush_r+0xae>
 8015a5e:	2301      	movs	r3, #1
 8015a60:	4628      	mov	r0, r5
 8015a62:	47b0      	blx	r6
 8015a64:	4602      	mov	r2, r0
 8015a66:	1c50      	adds	r0, r2, #1
 8015a68:	d1c9      	bne.n	80159fe <__sflush_r+0x32>
 8015a6a:	682b      	ldr	r3, [r5, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d0c6      	beq.n	80159fe <__sflush_r+0x32>
 8015a70:	2b1d      	cmp	r3, #29
 8015a72:	d001      	beq.n	8015a78 <__sflush_r+0xac>
 8015a74:	2b16      	cmp	r3, #22
 8015a76:	d11e      	bne.n	8015ab6 <__sflush_r+0xea>
 8015a78:	602f      	str	r7, [r5, #0]
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	e022      	b.n	8015ac4 <__sflush_r+0xf8>
 8015a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a82:	b21b      	sxth	r3, r3
 8015a84:	e01b      	b.n	8015abe <__sflush_r+0xf2>
 8015a86:	690f      	ldr	r7, [r1, #16]
 8015a88:	2f00      	cmp	r7, #0
 8015a8a:	d0f6      	beq.n	8015a7a <__sflush_r+0xae>
 8015a8c:	0793      	lsls	r3, r2, #30
 8015a8e:	680e      	ldr	r6, [r1, #0]
 8015a90:	bf08      	it	eq
 8015a92:	694b      	ldreq	r3, [r1, #20]
 8015a94:	600f      	str	r7, [r1, #0]
 8015a96:	bf18      	it	ne
 8015a98:	2300      	movne	r3, #0
 8015a9a:	eba6 0807 	sub.w	r8, r6, r7
 8015a9e:	608b      	str	r3, [r1, #8]
 8015aa0:	f1b8 0f00 	cmp.w	r8, #0
 8015aa4:	dde9      	ble.n	8015a7a <__sflush_r+0xae>
 8015aa6:	6a21      	ldr	r1, [r4, #32]
 8015aa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015aaa:	4643      	mov	r3, r8
 8015aac:	463a      	mov	r2, r7
 8015aae:	4628      	mov	r0, r5
 8015ab0:	47b0      	blx	r6
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	dc08      	bgt.n	8015ac8 <__sflush_r+0xfc>
 8015ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015abe:	81a3      	strh	r3, [r4, #12]
 8015ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac8:	4407      	add	r7, r0
 8015aca:	eba8 0800 	sub.w	r8, r8, r0
 8015ace:	e7e7      	b.n	8015aa0 <__sflush_r+0xd4>
 8015ad0:	dfbffffe 	.word	0xdfbffffe

08015ad4 <_fflush_r>:
 8015ad4:	b538      	push	{r3, r4, r5, lr}
 8015ad6:	690b      	ldr	r3, [r1, #16]
 8015ad8:	4605      	mov	r5, r0
 8015ada:	460c      	mov	r4, r1
 8015adc:	b913      	cbnz	r3, 8015ae4 <_fflush_r+0x10>
 8015ade:	2500      	movs	r5, #0
 8015ae0:	4628      	mov	r0, r5
 8015ae2:	bd38      	pop	{r3, r4, r5, pc}
 8015ae4:	b118      	cbz	r0, 8015aee <_fflush_r+0x1a>
 8015ae6:	6a03      	ldr	r3, [r0, #32]
 8015ae8:	b90b      	cbnz	r3, 8015aee <_fflush_r+0x1a>
 8015aea:	f7ff fa25 	bl	8014f38 <__sinit>
 8015aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d0f3      	beq.n	8015ade <_fflush_r+0xa>
 8015af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015af8:	07d0      	lsls	r0, r2, #31
 8015afa:	d404      	bmi.n	8015b06 <_fflush_r+0x32>
 8015afc:	0599      	lsls	r1, r3, #22
 8015afe:	d402      	bmi.n	8015b06 <_fflush_r+0x32>
 8015b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b02:	f7ff fbe8 	bl	80152d6 <__retarget_lock_acquire_recursive>
 8015b06:	4628      	mov	r0, r5
 8015b08:	4621      	mov	r1, r4
 8015b0a:	f7ff ff5f 	bl	80159cc <__sflush_r>
 8015b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b10:	07da      	lsls	r2, r3, #31
 8015b12:	4605      	mov	r5, r0
 8015b14:	d4e4      	bmi.n	8015ae0 <_fflush_r+0xc>
 8015b16:	89a3      	ldrh	r3, [r4, #12]
 8015b18:	059b      	lsls	r3, r3, #22
 8015b1a:	d4e1      	bmi.n	8015ae0 <_fflush_r+0xc>
 8015b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b1e:	f7ff fbdb 	bl	80152d8 <__retarget_lock_release_recursive>
 8015b22:	e7dd      	b.n	8015ae0 <_fflush_r+0xc>

08015b24 <fiprintf>:
 8015b24:	b40e      	push	{r1, r2, r3}
 8015b26:	b503      	push	{r0, r1, lr}
 8015b28:	4601      	mov	r1, r0
 8015b2a:	ab03      	add	r3, sp, #12
 8015b2c:	4805      	ldr	r0, [pc, #20]	@ (8015b44 <fiprintf+0x20>)
 8015b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b32:	6800      	ldr	r0, [r0, #0]
 8015b34:	9301      	str	r3, [sp, #4]
 8015b36:	f000 f837 	bl	8015ba8 <_vfiprintf_r>
 8015b3a:	b002      	add	sp, #8
 8015b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b40:	b003      	add	sp, #12
 8015b42:	4770      	bx	lr
 8015b44:	20000350 	.word	0x20000350

08015b48 <abort>:
 8015b48:	b508      	push	{r3, lr}
 8015b4a:	2006      	movs	r0, #6
 8015b4c:	f000 fa00 	bl	8015f50 <raise>
 8015b50:	2001      	movs	r0, #1
 8015b52:	f7ec fba1 	bl	8002298 <_exit>

08015b56 <__sfputc_r>:
 8015b56:	6893      	ldr	r3, [r2, #8]
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	b410      	push	{r4}
 8015b5e:	6093      	str	r3, [r2, #8]
 8015b60:	da08      	bge.n	8015b74 <__sfputc_r+0x1e>
 8015b62:	6994      	ldr	r4, [r2, #24]
 8015b64:	42a3      	cmp	r3, r4
 8015b66:	db01      	blt.n	8015b6c <__sfputc_r+0x16>
 8015b68:	290a      	cmp	r1, #10
 8015b6a:	d103      	bne.n	8015b74 <__sfputc_r+0x1e>
 8015b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b70:	f000 b932 	b.w	8015dd8 <__swbuf_r>
 8015b74:	6813      	ldr	r3, [r2, #0]
 8015b76:	1c58      	adds	r0, r3, #1
 8015b78:	6010      	str	r0, [r2, #0]
 8015b7a:	7019      	strb	r1, [r3, #0]
 8015b7c:	4608      	mov	r0, r1
 8015b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b82:	4770      	bx	lr

08015b84 <__sfputs_r>:
 8015b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b86:	4606      	mov	r6, r0
 8015b88:	460f      	mov	r7, r1
 8015b8a:	4614      	mov	r4, r2
 8015b8c:	18d5      	adds	r5, r2, r3
 8015b8e:	42ac      	cmp	r4, r5
 8015b90:	d101      	bne.n	8015b96 <__sfputs_r+0x12>
 8015b92:	2000      	movs	r0, #0
 8015b94:	e007      	b.n	8015ba6 <__sfputs_r+0x22>
 8015b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b9a:	463a      	mov	r2, r7
 8015b9c:	4630      	mov	r0, r6
 8015b9e:	f7ff ffda 	bl	8015b56 <__sfputc_r>
 8015ba2:	1c43      	adds	r3, r0, #1
 8015ba4:	d1f3      	bne.n	8015b8e <__sfputs_r+0xa>
 8015ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ba8 <_vfiprintf_r>:
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	460d      	mov	r5, r1
 8015bae:	b09d      	sub	sp, #116	@ 0x74
 8015bb0:	4614      	mov	r4, r2
 8015bb2:	4698      	mov	r8, r3
 8015bb4:	4606      	mov	r6, r0
 8015bb6:	b118      	cbz	r0, 8015bc0 <_vfiprintf_r+0x18>
 8015bb8:	6a03      	ldr	r3, [r0, #32]
 8015bba:	b90b      	cbnz	r3, 8015bc0 <_vfiprintf_r+0x18>
 8015bbc:	f7ff f9bc 	bl	8014f38 <__sinit>
 8015bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015bc2:	07d9      	lsls	r1, r3, #31
 8015bc4:	d405      	bmi.n	8015bd2 <_vfiprintf_r+0x2a>
 8015bc6:	89ab      	ldrh	r3, [r5, #12]
 8015bc8:	059a      	lsls	r2, r3, #22
 8015bca:	d402      	bmi.n	8015bd2 <_vfiprintf_r+0x2a>
 8015bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bce:	f7ff fb82 	bl	80152d6 <__retarget_lock_acquire_recursive>
 8015bd2:	89ab      	ldrh	r3, [r5, #12]
 8015bd4:	071b      	lsls	r3, r3, #28
 8015bd6:	d501      	bpl.n	8015bdc <_vfiprintf_r+0x34>
 8015bd8:	692b      	ldr	r3, [r5, #16]
 8015bda:	b99b      	cbnz	r3, 8015c04 <_vfiprintf_r+0x5c>
 8015bdc:	4629      	mov	r1, r5
 8015bde:	4630      	mov	r0, r6
 8015be0:	f000 f938 	bl	8015e54 <__swsetup_r>
 8015be4:	b170      	cbz	r0, 8015c04 <_vfiprintf_r+0x5c>
 8015be6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015be8:	07dc      	lsls	r4, r3, #31
 8015bea:	d504      	bpl.n	8015bf6 <_vfiprintf_r+0x4e>
 8015bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bf0:	b01d      	add	sp, #116	@ 0x74
 8015bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf6:	89ab      	ldrh	r3, [r5, #12]
 8015bf8:	0598      	lsls	r0, r3, #22
 8015bfa:	d4f7      	bmi.n	8015bec <_vfiprintf_r+0x44>
 8015bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bfe:	f7ff fb6b 	bl	80152d8 <__retarget_lock_release_recursive>
 8015c02:	e7f3      	b.n	8015bec <_vfiprintf_r+0x44>
 8015c04:	2300      	movs	r3, #0
 8015c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c08:	2320      	movs	r3, #32
 8015c0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c12:	2330      	movs	r3, #48	@ 0x30
 8015c14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015dc4 <_vfiprintf_r+0x21c>
 8015c18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c1c:	f04f 0901 	mov.w	r9, #1
 8015c20:	4623      	mov	r3, r4
 8015c22:	469a      	mov	sl, r3
 8015c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c28:	b10a      	cbz	r2, 8015c2e <_vfiprintf_r+0x86>
 8015c2a:	2a25      	cmp	r2, #37	@ 0x25
 8015c2c:	d1f9      	bne.n	8015c22 <_vfiprintf_r+0x7a>
 8015c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8015c32:	d00b      	beq.n	8015c4c <_vfiprintf_r+0xa4>
 8015c34:	465b      	mov	r3, fp
 8015c36:	4622      	mov	r2, r4
 8015c38:	4629      	mov	r1, r5
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f7ff ffa2 	bl	8015b84 <__sfputs_r>
 8015c40:	3001      	adds	r0, #1
 8015c42:	f000 80a7 	beq.w	8015d94 <_vfiprintf_r+0x1ec>
 8015c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c48:	445a      	add	r2, fp
 8015c4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f000 809f 	beq.w	8015d94 <_vfiprintf_r+0x1ec>
 8015c56:	2300      	movs	r3, #0
 8015c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c60:	f10a 0a01 	add.w	sl, sl, #1
 8015c64:	9304      	str	r3, [sp, #16]
 8015c66:	9307      	str	r3, [sp, #28]
 8015c68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c6e:	4654      	mov	r4, sl
 8015c70:	2205      	movs	r2, #5
 8015c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c76:	4853      	ldr	r0, [pc, #332]	@ (8015dc4 <_vfiprintf_r+0x21c>)
 8015c78:	f7ea faca 	bl	8000210 <memchr>
 8015c7c:	9a04      	ldr	r2, [sp, #16]
 8015c7e:	b9d8      	cbnz	r0, 8015cb8 <_vfiprintf_r+0x110>
 8015c80:	06d1      	lsls	r1, r2, #27
 8015c82:	bf44      	itt	mi
 8015c84:	2320      	movmi	r3, #32
 8015c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c8a:	0713      	lsls	r3, r2, #28
 8015c8c:	bf44      	itt	mi
 8015c8e:	232b      	movmi	r3, #43	@ 0x2b
 8015c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c94:	f89a 3000 	ldrb.w	r3, [sl]
 8015c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c9a:	d015      	beq.n	8015cc8 <_vfiprintf_r+0x120>
 8015c9c:	9a07      	ldr	r2, [sp, #28]
 8015c9e:	4654      	mov	r4, sl
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	f04f 0c0a 	mov.w	ip, #10
 8015ca6:	4621      	mov	r1, r4
 8015ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cac:	3b30      	subs	r3, #48	@ 0x30
 8015cae:	2b09      	cmp	r3, #9
 8015cb0:	d94b      	bls.n	8015d4a <_vfiprintf_r+0x1a2>
 8015cb2:	b1b0      	cbz	r0, 8015ce2 <_vfiprintf_r+0x13a>
 8015cb4:	9207      	str	r2, [sp, #28]
 8015cb6:	e014      	b.n	8015ce2 <_vfiprintf_r+0x13a>
 8015cb8:	eba0 0308 	sub.w	r3, r0, r8
 8015cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8015cc0:	4313      	orrs	r3, r2
 8015cc2:	9304      	str	r3, [sp, #16]
 8015cc4:	46a2      	mov	sl, r4
 8015cc6:	e7d2      	b.n	8015c6e <_vfiprintf_r+0xc6>
 8015cc8:	9b03      	ldr	r3, [sp, #12]
 8015cca:	1d19      	adds	r1, r3, #4
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	9103      	str	r1, [sp, #12]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	bfbb      	ittet	lt
 8015cd4:	425b      	neglt	r3, r3
 8015cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8015cda:	9307      	strge	r3, [sp, #28]
 8015cdc:	9307      	strlt	r3, [sp, #28]
 8015cde:	bfb8      	it	lt
 8015ce0:	9204      	strlt	r2, [sp, #16]
 8015ce2:	7823      	ldrb	r3, [r4, #0]
 8015ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ce6:	d10a      	bne.n	8015cfe <_vfiprintf_r+0x156>
 8015ce8:	7863      	ldrb	r3, [r4, #1]
 8015cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cec:	d132      	bne.n	8015d54 <_vfiprintf_r+0x1ac>
 8015cee:	9b03      	ldr	r3, [sp, #12]
 8015cf0:	1d1a      	adds	r2, r3, #4
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	9203      	str	r2, [sp, #12]
 8015cf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015cfa:	3402      	adds	r4, #2
 8015cfc:	9305      	str	r3, [sp, #20]
 8015cfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015dd4 <_vfiprintf_r+0x22c>
 8015d02:	7821      	ldrb	r1, [r4, #0]
 8015d04:	2203      	movs	r2, #3
 8015d06:	4650      	mov	r0, sl
 8015d08:	f7ea fa82 	bl	8000210 <memchr>
 8015d0c:	b138      	cbz	r0, 8015d1e <_vfiprintf_r+0x176>
 8015d0e:	9b04      	ldr	r3, [sp, #16]
 8015d10:	eba0 000a 	sub.w	r0, r0, sl
 8015d14:	2240      	movs	r2, #64	@ 0x40
 8015d16:	4082      	lsls	r2, r0
 8015d18:	4313      	orrs	r3, r2
 8015d1a:	3401      	adds	r4, #1
 8015d1c:	9304      	str	r3, [sp, #16]
 8015d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d22:	4829      	ldr	r0, [pc, #164]	@ (8015dc8 <_vfiprintf_r+0x220>)
 8015d24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d28:	2206      	movs	r2, #6
 8015d2a:	f7ea fa71 	bl	8000210 <memchr>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	d03f      	beq.n	8015db2 <_vfiprintf_r+0x20a>
 8015d32:	4b26      	ldr	r3, [pc, #152]	@ (8015dcc <_vfiprintf_r+0x224>)
 8015d34:	bb1b      	cbnz	r3, 8015d7e <_vfiprintf_r+0x1d6>
 8015d36:	9b03      	ldr	r3, [sp, #12]
 8015d38:	3307      	adds	r3, #7
 8015d3a:	f023 0307 	bic.w	r3, r3, #7
 8015d3e:	3308      	adds	r3, #8
 8015d40:	9303      	str	r3, [sp, #12]
 8015d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d44:	443b      	add	r3, r7
 8015d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d48:	e76a      	b.n	8015c20 <_vfiprintf_r+0x78>
 8015d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d4e:	460c      	mov	r4, r1
 8015d50:	2001      	movs	r0, #1
 8015d52:	e7a8      	b.n	8015ca6 <_vfiprintf_r+0xfe>
 8015d54:	2300      	movs	r3, #0
 8015d56:	3401      	adds	r4, #1
 8015d58:	9305      	str	r3, [sp, #20]
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	f04f 0c0a 	mov.w	ip, #10
 8015d60:	4620      	mov	r0, r4
 8015d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d66:	3a30      	subs	r2, #48	@ 0x30
 8015d68:	2a09      	cmp	r2, #9
 8015d6a:	d903      	bls.n	8015d74 <_vfiprintf_r+0x1cc>
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d0c6      	beq.n	8015cfe <_vfiprintf_r+0x156>
 8015d70:	9105      	str	r1, [sp, #20]
 8015d72:	e7c4      	b.n	8015cfe <_vfiprintf_r+0x156>
 8015d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d78:	4604      	mov	r4, r0
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e7f0      	b.n	8015d60 <_vfiprintf_r+0x1b8>
 8015d7e:	ab03      	add	r3, sp, #12
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	462a      	mov	r2, r5
 8015d84:	4b12      	ldr	r3, [pc, #72]	@ (8015dd0 <_vfiprintf_r+0x228>)
 8015d86:	a904      	add	r1, sp, #16
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f3af 8000 	nop.w
 8015d8e:	4607      	mov	r7, r0
 8015d90:	1c78      	adds	r0, r7, #1
 8015d92:	d1d6      	bne.n	8015d42 <_vfiprintf_r+0x19a>
 8015d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d96:	07d9      	lsls	r1, r3, #31
 8015d98:	d405      	bmi.n	8015da6 <_vfiprintf_r+0x1fe>
 8015d9a:	89ab      	ldrh	r3, [r5, #12]
 8015d9c:	059a      	lsls	r2, r3, #22
 8015d9e:	d402      	bmi.n	8015da6 <_vfiprintf_r+0x1fe>
 8015da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015da2:	f7ff fa99 	bl	80152d8 <__retarget_lock_release_recursive>
 8015da6:	89ab      	ldrh	r3, [r5, #12]
 8015da8:	065b      	lsls	r3, r3, #25
 8015daa:	f53f af1f 	bmi.w	8015bec <_vfiprintf_r+0x44>
 8015dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015db0:	e71e      	b.n	8015bf0 <_vfiprintf_r+0x48>
 8015db2:	ab03      	add	r3, sp, #12
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	462a      	mov	r2, r5
 8015db8:	4b05      	ldr	r3, [pc, #20]	@ (8015dd0 <_vfiprintf_r+0x228>)
 8015dba:	a904      	add	r1, sp, #16
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	f7ff fce5 	bl	801578c <_printf_i>
 8015dc2:	e7e4      	b.n	8015d8e <_vfiprintf_r+0x1e6>
 8015dc4:	08016d18 	.word	0x08016d18
 8015dc8:	08016d22 	.word	0x08016d22
 8015dcc:	00000000 	.word	0x00000000
 8015dd0:	08015b85 	.word	0x08015b85
 8015dd4:	08016d1e 	.word	0x08016d1e

08015dd8 <__swbuf_r>:
 8015dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dda:	460e      	mov	r6, r1
 8015ddc:	4614      	mov	r4, r2
 8015dde:	4605      	mov	r5, r0
 8015de0:	b118      	cbz	r0, 8015dea <__swbuf_r+0x12>
 8015de2:	6a03      	ldr	r3, [r0, #32]
 8015de4:	b90b      	cbnz	r3, 8015dea <__swbuf_r+0x12>
 8015de6:	f7ff f8a7 	bl	8014f38 <__sinit>
 8015dea:	69a3      	ldr	r3, [r4, #24]
 8015dec:	60a3      	str	r3, [r4, #8]
 8015dee:	89a3      	ldrh	r3, [r4, #12]
 8015df0:	071a      	lsls	r2, r3, #28
 8015df2:	d501      	bpl.n	8015df8 <__swbuf_r+0x20>
 8015df4:	6923      	ldr	r3, [r4, #16]
 8015df6:	b943      	cbnz	r3, 8015e0a <__swbuf_r+0x32>
 8015df8:	4621      	mov	r1, r4
 8015dfa:	4628      	mov	r0, r5
 8015dfc:	f000 f82a 	bl	8015e54 <__swsetup_r>
 8015e00:	b118      	cbz	r0, 8015e0a <__swbuf_r+0x32>
 8015e02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015e06:	4638      	mov	r0, r7
 8015e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e0a:	6823      	ldr	r3, [r4, #0]
 8015e0c:	6922      	ldr	r2, [r4, #16]
 8015e0e:	1a98      	subs	r0, r3, r2
 8015e10:	6963      	ldr	r3, [r4, #20]
 8015e12:	b2f6      	uxtb	r6, r6
 8015e14:	4283      	cmp	r3, r0
 8015e16:	4637      	mov	r7, r6
 8015e18:	dc05      	bgt.n	8015e26 <__swbuf_r+0x4e>
 8015e1a:	4621      	mov	r1, r4
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	f7ff fe59 	bl	8015ad4 <_fflush_r>
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d1ed      	bne.n	8015e02 <__swbuf_r+0x2a>
 8015e26:	68a3      	ldr	r3, [r4, #8]
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	60a3      	str	r3, [r4, #8]
 8015e2c:	6823      	ldr	r3, [r4, #0]
 8015e2e:	1c5a      	adds	r2, r3, #1
 8015e30:	6022      	str	r2, [r4, #0]
 8015e32:	701e      	strb	r6, [r3, #0]
 8015e34:	6962      	ldr	r2, [r4, #20]
 8015e36:	1c43      	adds	r3, r0, #1
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d004      	beq.n	8015e46 <__swbuf_r+0x6e>
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	07db      	lsls	r3, r3, #31
 8015e40:	d5e1      	bpl.n	8015e06 <__swbuf_r+0x2e>
 8015e42:	2e0a      	cmp	r6, #10
 8015e44:	d1df      	bne.n	8015e06 <__swbuf_r+0x2e>
 8015e46:	4621      	mov	r1, r4
 8015e48:	4628      	mov	r0, r5
 8015e4a:	f7ff fe43 	bl	8015ad4 <_fflush_r>
 8015e4e:	2800      	cmp	r0, #0
 8015e50:	d0d9      	beq.n	8015e06 <__swbuf_r+0x2e>
 8015e52:	e7d6      	b.n	8015e02 <__swbuf_r+0x2a>

08015e54 <__swsetup_r>:
 8015e54:	b538      	push	{r3, r4, r5, lr}
 8015e56:	4b29      	ldr	r3, [pc, #164]	@ (8015efc <__swsetup_r+0xa8>)
 8015e58:	4605      	mov	r5, r0
 8015e5a:	6818      	ldr	r0, [r3, #0]
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	b118      	cbz	r0, 8015e68 <__swsetup_r+0x14>
 8015e60:	6a03      	ldr	r3, [r0, #32]
 8015e62:	b90b      	cbnz	r3, 8015e68 <__swsetup_r+0x14>
 8015e64:	f7ff f868 	bl	8014f38 <__sinit>
 8015e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e6c:	0719      	lsls	r1, r3, #28
 8015e6e:	d422      	bmi.n	8015eb6 <__swsetup_r+0x62>
 8015e70:	06da      	lsls	r2, r3, #27
 8015e72:	d407      	bmi.n	8015e84 <__swsetup_r+0x30>
 8015e74:	2209      	movs	r2, #9
 8015e76:	602a      	str	r2, [r5, #0]
 8015e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e7c:	81a3      	strh	r3, [r4, #12]
 8015e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e82:	e033      	b.n	8015eec <__swsetup_r+0x98>
 8015e84:	0758      	lsls	r0, r3, #29
 8015e86:	d512      	bpl.n	8015eae <__swsetup_r+0x5a>
 8015e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015e8a:	b141      	cbz	r1, 8015e9e <__swsetup_r+0x4a>
 8015e8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015e90:	4299      	cmp	r1, r3
 8015e92:	d002      	beq.n	8015e9a <__swsetup_r+0x46>
 8015e94:	4628      	mov	r0, r5
 8015e96:	f7ff fa61 	bl	801535c <_free_r>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015e9e:	89a3      	ldrh	r3, [r4, #12]
 8015ea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015ea4:	81a3      	strh	r3, [r4, #12]
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	6063      	str	r3, [r4, #4]
 8015eaa:	6923      	ldr	r3, [r4, #16]
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	89a3      	ldrh	r3, [r4, #12]
 8015eb0:	f043 0308 	orr.w	r3, r3, #8
 8015eb4:	81a3      	strh	r3, [r4, #12]
 8015eb6:	6923      	ldr	r3, [r4, #16]
 8015eb8:	b94b      	cbnz	r3, 8015ece <__swsetup_r+0x7a>
 8015eba:	89a3      	ldrh	r3, [r4, #12]
 8015ebc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ec4:	d003      	beq.n	8015ece <__swsetup_r+0x7a>
 8015ec6:	4621      	mov	r1, r4
 8015ec8:	4628      	mov	r0, r5
 8015eca:	f000 f883 	bl	8015fd4 <__smakebuf_r>
 8015ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ed2:	f013 0201 	ands.w	r2, r3, #1
 8015ed6:	d00a      	beq.n	8015eee <__swsetup_r+0x9a>
 8015ed8:	2200      	movs	r2, #0
 8015eda:	60a2      	str	r2, [r4, #8]
 8015edc:	6962      	ldr	r2, [r4, #20]
 8015ede:	4252      	negs	r2, r2
 8015ee0:	61a2      	str	r2, [r4, #24]
 8015ee2:	6922      	ldr	r2, [r4, #16]
 8015ee4:	b942      	cbnz	r2, 8015ef8 <__swsetup_r+0xa4>
 8015ee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015eea:	d1c5      	bne.n	8015e78 <__swsetup_r+0x24>
 8015eec:	bd38      	pop	{r3, r4, r5, pc}
 8015eee:	0799      	lsls	r1, r3, #30
 8015ef0:	bf58      	it	pl
 8015ef2:	6962      	ldrpl	r2, [r4, #20]
 8015ef4:	60a2      	str	r2, [r4, #8]
 8015ef6:	e7f4      	b.n	8015ee2 <__swsetup_r+0x8e>
 8015ef8:	2000      	movs	r0, #0
 8015efa:	e7f7      	b.n	8015eec <__swsetup_r+0x98>
 8015efc:	20000350 	.word	0x20000350

08015f00 <_raise_r>:
 8015f00:	291f      	cmp	r1, #31
 8015f02:	b538      	push	{r3, r4, r5, lr}
 8015f04:	4605      	mov	r5, r0
 8015f06:	460c      	mov	r4, r1
 8015f08:	d904      	bls.n	8015f14 <_raise_r+0x14>
 8015f0a:	2316      	movs	r3, #22
 8015f0c:	6003      	str	r3, [r0, #0]
 8015f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f12:	bd38      	pop	{r3, r4, r5, pc}
 8015f14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015f16:	b112      	cbz	r2, 8015f1e <_raise_r+0x1e>
 8015f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f1c:	b94b      	cbnz	r3, 8015f32 <_raise_r+0x32>
 8015f1e:	4628      	mov	r0, r5
 8015f20:	f000 f830 	bl	8015f84 <_getpid_r>
 8015f24:	4622      	mov	r2, r4
 8015f26:	4601      	mov	r1, r0
 8015f28:	4628      	mov	r0, r5
 8015f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f2e:	f000 b817 	b.w	8015f60 <_kill_r>
 8015f32:	2b01      	cmp	r3, #1
 8015f34:	d00a      	beq.n	8015f4c <_raise_r+0x4c>
 8015f36:	1c59      	adds	r1, r3, #1
 8015f38:	d103      	bne.n	8015f42 <_raise_r+0x42>
 8015f3a:	2316      	movs	r3, #22
 8015f3c:	6003      	str	r3, [r0, #0]
 8015f3e:	2001      	movs	r0, #1
 8015f40:	e7e7      	b.n	8015f12 <_raise_r+0x12>
 8015f42:	2100      	movs	r1, #0
 8015f44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015f48:	4620      	mov	r0, r4
 8015f4a:	4798      	blx	r3
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	e7e0      	b.n	8015f12 <_raise_r+0x12>

08015f50 <raise>:
 8015f50:	4b02      	ldr	r3, [pc, #8]	@ (8015f5c <raise+0xc>)
 8015f52:	4601      	mov	r1, r0
 8015f54:	6818      	ldr	r0, [r3, #0]
 8015f56:	f7ff bfd3 	b.w	8015f00 <_raise_r>
 8015f5a:	bf00      	nop
 8015f5c:	20000350 	.word	0x20000350

08015f60 <_kill_r>:
 8015f60:	b538      	push	{r3, r4, r5, lr}
 8015f62:	4d07      	ldr	r5, [pc, #28]	@ (8015f80 <_kill_r+0x20>)
 8015f64:	2300      	movs	r3, #0
 8015f66:	4604      	mov	r4, r0
 8015f68:	4608      	mov	r0, r1
 8015f6a:	4611      	mov	r1, r2
 8015f6c:	602b      	str	r3, [r5, #0]
 8015f6e:	f7ec f983 	bl	8002278 <_kill>
 8015f72:	1c43      	adds	r3, r0, #1
 8015f74:	d102      	bne.n	8015f7c <_kill_r+0x1c>
 8015f76:	682b      	ldr	r3, [r5, #0]
 8015f78:	b103      	cbz	r3, 8015f7c <_kill_r+0x1c>
 8015f7a:	6023      	str	r3, [r4, #0]
 8015f7c:	bd38      	pop	{r3, r4, r5, pc}
 8015f7e:	bf00      	nop
 8015f80:	2000df98 	.word	0x2000df98

08015f84 <_getpid_r>:
 8015f84:	f7ec b970 	b.w	8002268 <_getpid>

08015f88 <__swhatbuf_r>:
 8015f88:	b570      	push	{r4, r5, r6, lr}
 8015f8a:	460c      	mov	r4, r1
 8015f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f90:	2900      	cmp	r1, #0
 8015f92:	b096      	sub	sp, #88	@ 0x58
 8015f94:	4615      	mov	r5, r2
 8015f96:	461e      	mov	r6, r3
 8015f98:	da0d      	bge.n	8015fb6 <__swhatbuf_r+0x2e>
 8015f9a:	89a3      	ldrh	r3, [r4, #12]
 8015f9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015fa0:	f04f 0100 	mov.w	r1, #0
 8015fa4:	bf14      	ite	ne
 8015fa6:	2340      	movne	r3, #64	@ 0x40
 8015fa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015fac:	2000      	movs	r0, #0
 8015fae:	6031      	str	r1, [r6, #0]
 8015fb0:	602b      	str	r3, [r5, #0]
 8015fb2:	b016      	add	sp, #88	@ 0x58
 8015fb4:	bd70      	pop	{r4, r5, r6, pc}
 8015fb6:	466a      	mov	r2, sp
 8015fb8:	f000 f848 	bl	801604c <_fstat_r>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	dbec      	blt.n	8015f9a <__swhatbuf_r+0x12>
 8015fc0:	9901      	ldr	r1, [sp, #4]
 8015fc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015fc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015fca:	4259      	negs	r1, r3
 8015fcc:	4159      	adcs	r1, r3
 8015fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015fd2:	e7eb      	b.n	8015fac <__swhatbuf_r+0x24>

08015fd4 <__smakebuf_r>:
 8015fd4:	898b      	ldrh	r3, [r1, #12]
 8015fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fd8:	079d      	lsls	r5, r3, #30
 8015fda:	4606      	mov	r6, r0
 8015fdc:	460c      	mov	r4, r1
 8015fde:	d507      	bpl.n	8015ff0 <__smakebuf_r+0x1c>
 8015fe0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015fe4:	6023      	str	r3, [r4, #0]
 8015fe6:	6123      	str	r3, [r4, #16]
 8015fe8:	2301      	movs	r3, #1
 8015fea:	6163      	str	r3, [r4, #20]
 8015fec:	b003      	add	sp, #12
 8015fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ff0:	ab01      	add	r3, sp, #4
 8015ff2:	466a      	mov	r2, sp
 8015ff4:	f7ff ffc8 	bl	8015f88 <__swhatbuf_r>
 8015ff8:	9f00      	ldr	r7, [sp, #0]
 8015ffa:	4605      	mov	r5, r0
 8015ffc:	4639      	mov	r1, r7
 8015ffe:	4630      	mov	r0, r6
 8016000:	f7fe fd68 	bl	8014ad4 <_malloc_r>
 8016004:	b948      	cbnz	r0, 801601a <__smakebuf_r+0x46>
 8016006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801600a:	059a      	lsls	r2, r3, #22
 801600c:	d4ee      	bmi.n	8015fec <__smakebuf_r+0x18>
 801600e:	f023 0303 	bic.w	r3, r3, #3
 8016012:	f043 0302 	orr.w	r3, r3, #2
 8016016:	81a3      	strh	r3, [r4, #12]
 8016018:	e7e2      	b.n	8015fe0 <__smakebuf_r+0xc>
 801601a:	89a3      	ldrh	r3, [r4, #12]
 801601c:	6020      	str	r0, [r4, #0]
 801601e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016022:	81a3      	strh	r3, [r4, #12]
 8016024:	9b01      	ldr	r3, [sp, #4]
 8016026:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801602a:	b15b      	cbz	r3, 8016044 <__smakebuf_r+0x70>
 801602c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016030:	4630      	mov	r0, r6
 8016032:	f000 f81d 	bl	8016070 <_isatty_r>
 8016036:	b128      	cbz	r0, 8016044 <__smakebuf_r+0x70>
 8016038:	89a3      	ldrh	r3, [r4, #12]
 801603a:	f023 0303 	bic.w	r3, r3, #3
 801603e:	f043 0301 	orr.w	r3, r3, #1
 8016042:	81a3      	strh	r3, [r4, #12]
 8016044:	89a3      	ldrh	r3, [r4, #12]
 8016046:	431d      	orrs	r5, r3
 8016048:	81a5      	strh	r5, [r4, #12]
 801604a:	e7cf      	b.n	8015fec <__smakebuf_r+0x18>

0801604c <_fstat_r>:
 801604c:	b538      	push	{r3, r4, r5, lr}
 801604e:	4d07      	ldr	r5, [pc, #28]	@ (801606c <_fstat_r+0x20>)
 8016050:	2300      	movs	r3, #0
 8016052:	4604      	mov	r4, r0
 8016054:	4608      	mov	r0, r1
 8016056:	4611      	mov	r1, r2
 8016058:	602b      	str	r3, [r5, #0]
 801605a:	f7ec f96d 	bl	8002338 <_fstat>
 801605e:	1c43      	adds	r3, r0, #1
 8016060:	d102      	bne.n	8016068 <_fstat_r+0x1c>
 8016062:	682b      	ldr	r3, [r5, #0]
 8016064:	b103      	cbz	r3, 8016068 <_fstat_r+0x1c>
 8016066:	6023      	str	r3, [r4, #0]
 8016068:	bd38      	pop	{r3, r4, r5, pc}
 801606a:	bf00      	nop
 801606c:	2000df98 	.word	0x2000df98

08016070 <_isatty_r>:
 8016070:	b538      	push	{r3, r4, r5, lr}
 8016072:	4d06      	ldr	r5, [pc, #24]	@ (801608c <_isatty_r+0x1c>)
 8016074:	2300      	movs	r3, #0
 8016076:	4604      	mov	r4, r0
 8016078:	4608      	mov	r0, r1
 801607a:	602b      	str	r3, [r5, #0]
 801607c:	f7ec f96c 	bl	8002358 <_isatty>
 8016080:	1c43      	adds	r3, r0, #1
 8016082:	d102      	bne.n	801608a <_isatty_r+0x1a>
 8016084:	682b      	ldr	r3, [r5, #0]
 8016086:	b103      	cbz	r3, 801608a <_isatty_r+0x1a>
 8016088:	6023      	str	r3, [r4, #0]
 801608a:	bd38      	pop	{r3, r4, r5, pc}
 801608c:	2000df98 	.word	0x2000df98

08016090 <_init>:
 8016090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016092:	bf00      	nop
 8016094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016096:	bc08      	pop	{r3}
 8016098:	469e      	mov	lr, r3
 801609a:	4770      	bx	lr

0801609c <_fini>:
 801609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801609e:	bf00      	nop
 80160a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160a2:	bc08      	pop	{r3}
 80160a4:	469e      	mov	lr, r3
 80160a6:	4770      	bx	lr
