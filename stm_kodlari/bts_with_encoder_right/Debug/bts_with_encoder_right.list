
bts_with_encoder_right.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e4c  08017540  08017540  00018540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801838c  0801838c  0001a304  2**0
                  CONTENTS
  4 .ARM          00000008  0801838c  0801838c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018394  08018394  0001a304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018394  08018394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080183a0  080183a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  080183a4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dcd4  20000308  080186a8  0001a308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dfdc  080186a8  0001afdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a304  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8de  00000000  00000000  0001a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc7  00000000  00000000  00034c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115b  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008984  00000000  00000000  0003afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d53  00000000  00000000  00043927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4207  00000000  00000000  0005d67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00101881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  001018f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001085d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000308 	.word	0x20000308
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017528 	.word	0x08017528

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000030c 	.word	0x2000030c
 80001dc:	08017528 	.word	0x08017528

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_d2f>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008c4:	bf24      	itt	cs
 80008c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ce:	d90d      	bls.n	80008ec <__aeabi_d2f+0x30>
 80008d0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008e4:	bf08      	it	eq
 80008e6:	f020 0001 	biceq.w	r0, r0, #1
 80008ea:	4770      	bx	lr
 80008ec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008f0:	d121      	bne.n	8000936 <__aeabi_d2f+0x7a>
 80008f2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008f6:	bfbc      	itt	lt
 80008f8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008fc:	4770      	bxlt	lr
 80008fe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000902:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000906:	f1c2 0218 	rsb	r2, r2, #24
 800090a:	f1c2 0c20 	rsb	ip, r2, #32
 800090e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000912:	fa20 f002 	lsr.w	r0, r0, r2
 8000916:	bf18      	it	ne
 8000918:	f040 0001 	orrne.w	r0, r0, #1
 800091c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000920:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000924:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000928:	ea40 000c 	orr.w	r0, r0, ip
 800092c:	fa23 f302 	lsr.w	r3, r3, r2
 8000930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000934:	e7cc      	b.n	80008d0 <__aeabi_d2f+0x14>
 8000936:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800093a:	d107      	bne.n	800094c <__aeabi_d2f+0x90>
 800093c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000940:	bf1e      	ittt	ne
 8000942:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000946:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800094a:	4770      	bxne	lr
 800094c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000950:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000954:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_ldivmod>:
 800095c:	b97b      	cbnz	r3, 800097e <__aeabi_ldivmod+0x22>
 800095e:	b972      	cbnz	r2, 800097e <__aeabi_ldivmod+0x22>
 8000960:	2900      	cmp	r1, #0
 8000962:	bfbe      	ittt	lt
 8000964:	2000      	movlt	r0, #0
 8000966:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800096a:	e006      	blt.n	800097a <__aeabi_ldivmod+0x1e>
 800096c:	bf08      	it	eq
 800096e:	2800      	cmpeq	r0, #0
 8000970:	bf1c      	itt	ne
 8000972:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000976:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800097a:	f000 b9b5 	b.w	8000ce8 <__aeabi_idiv0>
 800097e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000982:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000986:	2900      	cmp	r1, #0
 8000988:	db09      	blt.n	800099e <__aeabi_ldivmod+0x42>
 800098a:	2b00      	cmp	r3, #0
 800098c:	db1a      	blt.n	80009c4 <__aeabi_ldivmod+0x68>
 800098e:	f000 f84d 	bl	8000a2c <__udivmoddi4>
 8000992:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800099a:	b004      	add	sp, #16
 800099c:	4770      	bx	lr
 800099e:	4240      	negs	r0, r0
 80009a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db1b      	blt.n	80009e0 <__aeabi_ldivmod+0x84>
 80009a8:	f000 f840 	bl	8000a2c <__udivmoddi4>
 80009ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b4:	b004      	add	sp, #16
 80009b6:	4240      	negs	r0, r0
 80009b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009bc:	4252      	negs	r2, r2
 80009be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009c2:	4770      	bx	lr
 80009c4:	4252      	negs	r2, r2
 80009c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ca:	f000 f82f 	bl	8000a2c <__udivmoddi4>
 80009ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d6:	b004      	add	sp, #16
 80009d8:	4240      	negs	r0, r0
 80009da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009de:	4770      	bx	lr
 80009e0:	4252      	negs	r2, r2
 80009e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e6:	f000 f821 	bl	8000a2c <__udivmoddi4>
 80009ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f2:	b004      	add	sp, #16
 80009f4:	4252      	negs	r2, r2
 80009f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009fa:	4770      	bx	lr

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a10:	f000 b96a 	b.w	8000ce8 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	460c      	mov	r4, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d14e      	bne.n	8000ad6 <__udivmoddi4+0xaa>
 8000a38:	4694      	mov	ip, r2
 8000a3a:	458c      	cmp	ip, r1
 8000a3c:	4686      	mov	lr, r0
 8000a3e:	fab2 f282 	clz	r2, r2
 8000a42:	d962      	bls.n	8000b0a <__udivmoddi4+0xde>
 8000a44:	b14a      	cbz	r2, 8000a5a <__udivmoddi4+0x2e>
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	4319      	orrs	r1, r3
 8000a56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5e:	fa1f f68c 	uxth.w	r6, ip
 8000a62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb04 f106 	mul.w	r1, r4, r6
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x64>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a82:	f080 8112 	bcs.w	8000caa <__udivmoddi4+0x27e>
 8000a86:	4299      	cmp	r1, r3
 8000a88:	f240 810f 	bls.w	8000caa <__udivmoddi4+0x27e>
 8000a8c:	3c02      	subs	r4, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a59      	subs	r1, r3, r1
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa2:	fb00 f606 	mul.w	r6, r0, r6
 8000aa6:	429e      	cmp	r6, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x94>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ab2:	f080 80fc 	bcs.w	8000cae <__udivmoddi4+0x282>
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	f240 80f9 	bls.w	8000cae <__udivmoddi4+0x282>
 8000abc:	4463      	add	r3, ip
 8000abe:	3802      	subs	r0, #2
 8000ac0:	1b9b      	subs	r3, r3, r6
 8000ac2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	b11d      	cbz	r5, 8000ad2 <__udivmoddi4+0xa6>
 8000aca:	40d3      	lsrs	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d905      	bls.n	8000ae6 <__udivmoddi4+0xba>
 8000ada:	b10d      	cbz	r5, 8000ae0 <__udivmoddi4+0xb4>
 8000adc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e7f5      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000ae6:	fab3 f183 	clz	r1, r3
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d146      	bne.n	8000b7c <__udivmoddi4+0x150>
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xcc>
 8000af2:	4290      	cmp	r0, r2
 8000af4:	f0c0 80f0 	bcc.w	8000cd8 <__udivmoddi4+0x2ac>
 8000af8:	1a86      	subs	r6, r0, r2
 8000afa:	eb64 0303 	sbc.w	r3, r4, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d0e6      	beq.n	8000ad2 <__udivmoddi4+0xa6>
 8000b04:	e9c5 6300 	strd	r6, r3, [r5]
 8000b08:	e7e3      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	f040 8090 	bne.w	8000c30 <__udivmoddi4+0x204>
 8000b10:	eba1 040c 	sub.w	r4, r1, ip
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa1f f78c 	uxth.w	r7, ip
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b26:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b2e:	fb07 f006 	mul.w	r0, r7, r6
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x11c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x11a>
 8000b40:	4298      	cmp	r0, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2b4>
 8000b46:	4626      	mov	r6, r4
 8000b48:	1a1c      	subs	r4, r3, r0
 8000b4a:	fa1f f38e 	uxth.w	r3, lr
 8000b4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b52:	fb08 4410 	mls	r4, r8, r0, r4
 8000b56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5a:	fb00 f707 	mul.w	r7, r0, r7
 8000b5e:	429f      	cmp	r7, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x148>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b6a:	d202      	bcs.n	8000b72 <__udivmoddi4+0x146>
 8000b6c:	429f      	cmp	r7, r3
 8000b6e:	f200 80b0 	bhi.w	8000cd2 <__udivmoddi4+0x2a6>
 8000b72:	4620      	mov	r0, r4
 8000b74:	1bdb      	subs	r3, r3, r7
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	e7a5      	b.n	8000ac8 <__udivmoddi4+0x9c>
 8000b7c:	f1c1 0620 	rsb	r6, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 f706 	lsr.w	r7, r2, r6
 8000b86:	431f      	orrs	r7, r3
 8000b88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b90:	ea43 030c 	orr.w	r3, r3, ip
 8000b94:	40f4      	lsrs	r4, r6
 8000b96:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9a:	0c38      	lsrs	r0, r7, #16
 8000b9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ba4:	fa1f fc87 	uxth.w	ip, r7
 8000ba8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bb4:	45a1      	cmp	r9, r4
 8000bb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x1a6>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bc2:	f080 8084 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000bc6:	45a1      	cmp	r9, r4
 8000bc8:	f240 8081 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000bcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd0:	443c      	add	r4, r7
 8000bd2:	eba4 0409 	sub.w	r4, r4, r9
 8000bd6:	fa1f f983 	uxth.w	r9, r3
 8000bda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bde:	fb00 4413 	mls	r4, r0, r3, r4
 8000be2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d907      	bls.n	8000bfe <__udivmoddi4+0x1d2>
 8000bee:	193c      	adds	r4, r7, r4
 8000bf0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bf4:	d267      	bcs.n	8000cc6 <__udivmoddi4+0x29a>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0x29a>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	443c      	add	r4, r7
 8000bfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c02:	fba0 9302 	umull	r9, r3, r0, r2
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	46ce      	mov	lr, r9
 8000c0e:	469c      	mov	ip, r3
 8000c10:	d351      	bcc.n	8000cb6 <__udivmoddi4+0x28a>
 8000c12:	d04e      	beq.n	8000cb2 <__udivmoddi4+0x286>
 8000c14:	b155      	cbz	r5, 8000c2c <__udivmoddi4+0x200>
 8000c16:	ebb8 030e 	subs.w	r3, r8, lr
 8000c1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c22:	40cb      	lsrs	r3, r1
 8000c24:	431e      	orrs	r6, r3
 8000c26:	40cc      	lsrs	r4, r1
 8000c28:	e9c5 6400 	strd	r6, r4, [r5]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e750      	b.n	8000ad2 <__udivmoddi4+0xa6>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f103 	lsr.w	r1, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c40:	4094      	lsls	r4, r2
 8000c42:	430c      	orrs	r4, r1
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4c:	fa1f f78c 	uxth.w	r7, ip
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3110 	mls	r1, r8, r0, r3
 8000c58:	0c23      	lsrs	r3, r4, #16
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f107 	mul.w	r1, r0, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x24c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c6e:	d22c      	bcs.n	8000cca <__udivmoddi4+0x29e>
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d92a      	bls.n	8000cca <__udivmoddi4+0x29e>
 8000c74:	3802      	subs	r0, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c80:	fb08 3311 	mls	r3, r8, r1, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb01 f307 	mul.w	r3, r1, r7
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x276>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c98:	d213      	bcs.n	8000cc2 <__udivmoddi4+0x296>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d911      	bls.n	8000cc2 <__udivmoddi4+0x296>
 8000c9e:	3902      	subs	r1, #2
 8000ca0:	4464      	add	r4, ip
 8000ca2:	1ae4      	subs	r4, r4, r3
 8000ca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca8:	e739      	b.n	8000b1e <__udivmoddi4+0xf2>
 8000caa:	4604      	mov	r4, r0
 8000cac:	e6f0      	b.n	8000a90 <__udivmoddi4+0x64>
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e706      	b.n	8000ac0 <__udivmoddi4+0x94>
 8000cb2:	45c8      	cmp	r8, r9
 8000cb4:	d2ae      	bcs.n	8000c14 <__udivmoddi4+0x1e8>
 8000cb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cbe:	3801      	subs	r0, #1
 8000cc0:	e7a8      	b.n	8000c14 <__udivmoddi4+0x1e8>
 8000cc2:	4631      	mov	r1, r6
 8000cc4:	e7ed      	b.n	8000ca2 <__udivmoddi4+0x276>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	e799      	b.n	8000bfe <__udivmoddi4+0x1d2>
 8000cca:	4630      	mov	r0, r6
 8000ccc:	e7d4      	b.n	8000c78 <__udivmoddi4+0x24c>
 8000cce:	46d6      	mov	lr, sl
 8000cd0:	e77f      	b.n	8000bd2 <__udivmoddi4+0x1a6>
 8000cd2:	4463      	add	r3, ip
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	e74d      	b.n	8000b74 <__udivmoddi4+0x148>
 8000cd8:	4606      	mov	r6, r0
 8000cda:	4623      	mov	r3, r4
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e70f      	b.n	8000b00 <__udivmoddi4+0xd4>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	e730      	b.n	8000b48 <__udivmoddi4+0x11c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cf8:	f006 ffee 	bl	8007cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e68 <pvPortMallocMicroROS+0x17c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d04:	f000 f986 	bl	8001014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d08:	4b58      	ldr	r3, [pc, #352]	@ (8000e6c <pvPortMallocMicroROS+0x180>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 8090 	bne.w	8000e36 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01e      	beq.n	8000d5a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d015      	beq.n	8000d5a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f023 0307 	bic.w	r3, r3, #7
 8000d34:	3308      	adds	r3, #8
 8000d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d46:	f383 8811 	msr	BASEPRI, r3
 8000d4a:	f3bf 8f6f 	isb	sy
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	e7fd      	b.n	8000d56 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d06a      	beq.n	8000e36 <pvPortMallocMicroROS+0x14a>
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d865      	bhi.n	8000e36 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d6a:	4b42      	ldr	r3, [pc, #264]	@ (8000e74 <pvPortMallocMicroROS+0x188>)
 8000d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d6e:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <pvPortMallocMicroROS+0x188>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	e004      	b.n	8000d80 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d903      	bls.n	8000d92 <pvPortMallocMicroROS+0xa6>
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f1      	bne.n	8000d76 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <pvPortMallocMicroROS+0x17c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d04c      	beq.n	8000e36 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2208      	movs	r2, #8
 8000da2:	4413      	add	r3, r2
 8000da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1ad2      	subs	r2, r2, r3
 8000db6:	2308      	movs	r3, #8
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d920      	bls.n	8000e00 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dd4:	f383 8811 	msr	BASEPRI, r3
 8000dd8:	f3bf 8f6f 	isb	sy
 8000ddc:	f3bf 8f4f 	dsb	sy
 8000de0:	613b      	str	r3, [r7, #16]
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1ad2      	subs	r2, r2, r3
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dfa:	69b8      	ldr	r0, [r7, #24]
 8000dfc:	f000 f96c 	bl	80010d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <pvPortMallocMicroROS+0x18c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d203      	bcs.n	8000e22 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <pvPortMallocMicroROS+0x184>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <pvPortMallocMicroROS+0x18c>)
 8000e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <pvPortMallocMicroROS+0x180>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e36:	f006 ff5d 	bl	8007cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00b      	beq.n	8000e5c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	60fb      	str	r3, [r7, #12]
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20003f2c 	.word	0x20003f2c
 8000e6c:	20003f38 	.word	0x20003f38
 8000e70:	20003f30 	.word	0x20003f30
 8000e74:	20003f24 	.word	0x20003f24
 8000e78:	20003f34 	.word	0x20003f34

08000e7c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d04a      	beq.n	8000f24 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	425b      	negs	r3, r3
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	4413      	add	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <vPortFreeMicroROS+0xb0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10b      	bne.n	8000ec2 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	60fb      	str	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	e7fd      	b.n	8000ebe <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ece:	f383 8811 	msr	BASEPRI, r3
 8000ed2:	f3bf 8f6f 	isb	sy
 8000ed6:	f3bf 8f4f 	dsb	sy
 8000eda:	60bb      	str	r3, [r7, #8]
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	e7fd      	b.n	8000ede <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <vPortFreeMicroROS+0xb0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d019      	beq.n	8000f24 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d115      	bne.n	8000f24 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <vPortFreeMicroROS+0xb0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f08:	f006 fee6 	bl	8007cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <vPortFreeMicroROS+0xb4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <vPortFreeMicroROS+0xb4>)
 8000f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f1a:	6938      	ldr	r0, [r7, #16]
 8000f1c:	f000 f8dc 	bl	80010d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f20:	f006 fee8 	bl	8007cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20003f38 	.word	0x20003f38
 8000f30:	20003f30 	.word	0x20003f30

08000f34 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f40:	2308      	movs	r3, #8
 8000f42:	425b      	negs	r3, r3
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <getBlockSize+0x38>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

	return count;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20003f38 	.word	0x20003f38

08000f70 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f7a:	f006 fead 	bl	8007cd8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f7ff feb4 	bl	8000cec <pvPortMallocMicroROS>
 8000f84:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d017      	beq.n	8000fbc <pvPortReallocMicroROS+0x4c>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d014      	beq.n	8000fbc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffce 	bl	8000f34 <getBlockSize>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d201      	bcs.n	8000fac <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f015 fbe6 	bl	8016782 <memcpy>

		vPortFreeMicroROS(pv);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff60 	bl	8000e7c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000fbc:	f006 fe9a 	bl	8007cf4 <xTaskResumeAll>

	return newmem;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fd4:	f006 fe80 	bl	8007cd8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff fe82 	bl	8000cec <pvPortMallocMicroROS>
 8000fe8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fee:	e004      	b.n	8000ffa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	613a      	str	r2, [r7, #16]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	1e5a      	subs	r2, r3, #1
 8000ffe:	617a      	str	r2, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f5      	bne.n	8000ff0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001004:	f006 fe76 	bl	8007cf4 <xTaskResumeAll>
  	return mem;
 8001008:	68fb      	ldr	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800101a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800101e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001020:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <prvHeapInit+0xac>)
 8001022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3307      	adds	r3, #7
 8001032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f023 0307 	bic.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <prvHeapInit+0xac>)
 8001044:	4413      	add	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800104c:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <prvHeapInit+0xb0>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <prvHeapInit+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001060:	2208      	movs	r2, #8
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <prvHeapInit+0xb4>)
 8001074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <prvHeapInit+0xb4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <prvHeapInit+0xb4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <prvHeapInit+0xb4>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <prvHeapInit+0xb8>)
 80010a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <prvHeapInit+0xbc>)
 80010aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <prvHeapInit+0xc0>)
 80010ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000324 	.word	0x20000324
 80010c4:	20003f24 	.word	0x20003f24
 80010c8:	20003f2c 	.word	0x20003f2c
 80010cc:	20003f34 	.word	0x20003f34
 80010d0:	20003f30 	.word	0x20003f30
 80010d4:	20003f38 	.word	0x20003f38

080010d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <prvInsertBlockIntoFreeList+0xac>)
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e002      	b.n	80010ec <prvInsertBlockIntoFreeList+0x14>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8f7      	bhi.n	80010e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	d108      	bne.n	800111a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	441a      	add	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	441a      	add	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d118      	bne.n	8001160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <prvInsertBlockIntoFreeList+0xb0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d00d      	beq.n	8001156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	441a      	add	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e008      	b.n	8001168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <prvInsertBlockIntoFreeList+0xb0>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e003      	b.n	8001168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d002      	beq.n	8001176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20003f24 	.word	0x20003f24
 8001188:	20003f2c 	.word	0x20003f2c

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f001 fcf4 	bl	8002b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f83a 	bl	800120c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 fac8 	bl	800172c <MX_GPIO_Init>
  MX_DMA_Init();
 800119c:	f000 fa9e 	bl	80016dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011a0:	f000 fa72 	bl	8001688 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011a4:	f000 f89e 	bl	80012e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011a8:	f000 f970 	bl	800148c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ac:	f000 f9c6 	bl	800153c <MX_TIM4_Init>
  MX_TIM5_Init();
 80011b0:	f000 fa1c 	bl	80015ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011b4:	2100      	movs	r1, #0
 80011b6:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <main+0x6c>)
 80011b8:	f003 f9a8 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011bc:	2104      	movs	r1, #4
 80011be:	480e      	ldr	r0, [pc, #56]	@ (80011f8 <main+0x6c>)
 80011c0:	f003 f9a4 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011c4:	2108      	movs	r1, #8
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <main+0x6c>)
 80011c8:	f003 f9a0 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011cc:	210c      	movs	r1, #12
 80011ce:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <main+0x6c>)
 80011d0:	f003 f99c 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80011d4:	4809      	ldr	r0, [pc, #36]	@ (80011fc <main+0x70>)
 80011d6:	f003 f8dd 	bl	8004394 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011da:	f005 fc5f 	bl	8006a9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <main+0x74>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	4808      	ldr	r0, [pc, #32]	@ (8001204 <main+0x78>)
 80011e4:	f005 fca4 	bl	8006b30 <osThreadNew>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <main+0x7c>)
 80011ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011ee:	f005 fc79 	bl	8006ae4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <main+0x66>
 80011f6:	bf00      	nop
 80011f8:	20003f3c 	.word	0x20003f3c
 80011fc:	20004014 	.word	0x20004014
 8001200:	080175a8 	.word	0x080175a8
 8001204:	08001f41 	.word	0x08001f41
 8001208:	20004164 	.word	0x20004164

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2230      	movs	r2, #48	@ 0x30
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f015 f9e8 	bl	80165f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <SystemClock_Config+0xd0>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <SystemClock_Config+0xd0>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <SystemClock_Config+0xd0>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <SystemClock_Config+0xd4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001258:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <SystemClock_Config+0xd4>)
 800125a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <SystemClock_Config+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001280:	2310      	movs	r3, #16
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001284:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800128a:	2304      	movs	r3, #4
 800128c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800128e:	2307      	movs	r3, #7
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fb94 	bl	80039c4 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012a2:	f000 ff29 	bl	80020f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fdf6 	bl	8003eb4 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ce:	f000 ff13 	bl	80020f8 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	@ 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b096      	sub	sp, #88	@ 0x58
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f015 f967 	bl	80165f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001324:	4a58      	ldr	r2, [pc, #352]	@ (8001488 <MX_TIM1_Init+0x1a4>)
 8001326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001328:	4b56      	ldr	r3, [pc, #344]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800132a:	2206      	movs	r2, #6
 800132c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b55      	ldr	r3, [pc, #340]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001336:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800133a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001342:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800134e:	484d      	ldr	r0, [pc, #308]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001350:	f002 ffd0 	bl	80042f4 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800135a:	f000 fecd 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001368:	4619      	mov	r1, r3
 800136a:	4846      	ldr	r0, [pc, #280]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800136c:	f003 fc64 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001376:	f000 febf 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800137a:	4842      	ldr	r0, [pc, #264]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800137c:	f003 f86c 	bl	8004458 <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001386:	f000 feb7 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001392:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001396:	4619      	mov	r1, r3
 8001398:	483a      	ldr	r0, [pc, #232]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800139a:	f004 f815 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013a4:	f000 fea8 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	@ 0x60
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	482d      	ldr	r0, [pc, #180]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 80013ce:	f003 fb71 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013d8:	f000 fe8e 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4827      	ldr	r0, [pc, #156]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 80013e6:	f003 fb65 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80013f0:	f000 fe82 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	2208      	movs	r2, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	4821      	ldr	r0, [pc, #132]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 80013fe:	f003 fb59 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001408:	f000 fe76 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	481b      	ldr	r0, [pc, #108]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001416:	f003 fb4d 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001420:	f000 fe6a 	bl	80020f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	480f      	ldr	r0, [pc, #60]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001448:	f004 f82c 	bl	80054a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001452:	f000 fe51 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001456:	2100      	movs	r1, #0
 8001458:	480a      	ldr	r0, [pc, #40]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800145a:	f003 f857 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800145e:	2104      	movs	r1, #4
 8001460:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001462:	f003 f853 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001466:	2108      	movs	r1, #8
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 800146a:	f003 f84f 	bl	800450c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800146e:	210c      	movs	r1, #12
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001472:	f003 f84b 	bl	800450c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001476:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM1_Init+0x1a0>)
 8001478:	f001 f88e 	bl	8002598 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3758      	adds	r7, #88	@ 0x58
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20003f3c 	.word	0x20003f3c
 8001488:	40010000 	.word	0x40010000

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	@ 0x30
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2224      	movs	r2, #36	@ 0x24
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f015 f8a8 	bl	80165f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <MX_TIM3_Init+0xac>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_TIM3_Init+0xa8>)
 80014fa:	f003 f8b7 	bl	800466c <HAL_TIM_Encoder_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 fdf8 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4807      	ldr	r0, [pc, #28]	@ (8001534 <MX_TIM3_Init+0xa8>)
 8001516:	f003 ff57 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001520:	f000 fdea 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001524:	213c      	movs	r1, #60	@ 0x3c
 8001526:	4803      	ldr	r0, [pc, #12]	@ (8001534 <MX_TIM3_Init+0xa8>)
 8001528:	f003 f946 	bl	80047b8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3730      	adds	r7, #48	@ 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20003f84 	.word	0x20003f84
 8001538:	40000400 	.word	0x40000400

0800153c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f015 f850 	bl	80165f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800155a:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <MX_TIM4_Init+0xac>)
 800155c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800156c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 80015aa:	f003 f85f 	bl	800466c <HAL_TIM_Encoder_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f000 fda0 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 80015c6:	f003 feff 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015d0:	f000 fd92 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80015d4:	213c      	movs	r1, #60	@ 0x3c
 80015d6:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <MX_TIM4_Init+0xa8>)
 80015d8:	f003 f8ee 	bl	80047b8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3730      	adds	r7, #48	@ 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20003fcc 	.word	0x20003fcc
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_TIM5_Init+0x94>)
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <MX_TIM5_Init+0x98>)
 800160c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001610:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001614:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200;
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_TIM5_Init+0x94>)
 800161e:	22c8      	movs	r2, #200	@ 0xc8
 8001620:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_TIM5_Init+0x94>)
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800162e:	4814      	ldr	r0, [pc, #80]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001630:	f002 fe60 	bl	80042f4 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800163a:	f000 fd5d 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4619      	mov	r1, r3
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_TIM5_Init+0x94>)
 800164c:	f003 faf4 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001656:	f000 fd4f 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165a:	2320      	movs	r3, #32
 800165c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	@ (8001680 <MX_TIM5_Init+0x94>)
 8001668:	f003 feae 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001672:	f000 fd41 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20004014 	.word	0x20004014
 8001684:	40000c00 	.word	0x40000c00

08001688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_USART2_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f003 ff56 	bl	8005570 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f000 fd15 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000405c 	.word	0x2000405c
 80016d8:	40004400 	.word	0x40004400

080016dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_DMA_Init+0x4c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001728 <MX_DMA_Init+0x4c>)
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <MX_DMA_Init+0x4c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2105      	movs	r1, #5
 8001702:	2010      	movs	r0, #16
 8001704:	f001 fb87 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f001 fba0 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2011      	movs	r0, #17
 8001714:	f001 fb7f 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f001 fb98 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a2c      	ldr	r2, [pc, #176]	@ (80017fc <MX_GPIO_Init+0xd0>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <MX_GPIO_Init+0xd0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4812      	ldr	r0, [pc, #72]	@ (8001800 <MX_GPIO_Init+0xd4>)
 80017b8:	f002 f8ea 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480c      	ldr	r0, [pc, #48]	@ (8001804 <MX_GPIO_Init+0xd8>)
 80017d4:	f001 ff58 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d8:	2320      	movs	r3, #32
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MX_GPIO_Init+0xd4>)
 80017f0:	f001 ff4a 	bl	8003688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	@ 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020800 	.word	0x40020800

08001808 <read_encoder_angular_velocity>:
rcl_subscription_t subscriber;

encoder_data front;
encoder_data rear;

void read_encoder_angular_velocity(encoder_data *motor,TIM_HandleTypeDef *htim,int delay){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	motor->timer_counter = __HAL_TIM_GET_COUNTER(htim);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]

				 int change = motor->last_counter_value - motor->timer_counter;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]


			  	  if(change > 60000){
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001832:	4293      	cmp	r3, r2
 8001834:	dd0b      	ble.n	800184e <read_encoder_angular_velocity+0x46>
			  		motor->angular_velocity = -change + max_bits;// tekerlekteki açısal hızı veriyor olması lazım
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800183c:	33ff      	adds	r3, #255	@ 0xff
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	edc3 7a00 	vstr	s15, [r3]
 800184c:	e01a      	b.n	8001884 <read_encoder_angular_velocity+0x7c>
			  	  }
			  	  else if (change < -60000){
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <read_encoder_angular_velocity+0x140>)
 8001852:	4293      	cmp	r3, r2
 8001854:	da0a      	bge.n	800186c <read_encoder_angular_velocity+0x64>
			  		motor->angular_velocity = -change - max_bits;
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <read_encoder_angular_velocity+0x144>)
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	edc3 7a00 	vstr	s15, [r3]
 800186a:	e00b      	b.n	8001884 <read_encoder_angular_velocity+0x7c>
			  	  }
			  	  else{
			  		motor->angular_velocity = (motor->timer_counter - motor->last_counter_value);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	edc3 7a00 	vstr	s15, [r3]
			  	  }


	motor->angular_velocity *= 1000/delay;// geçen süreye bölmece
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	fb92 f3f3 	sdiv	r3, r2, r3
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	edc3 7a00 	vstr	s15, [r3]
	if(htim->Instance == TIM2 && change > 0){
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ae:	d10d      	bne.n	80018cc <read_encoder_angular_velocity+0xc4>
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	dd0a      	ble.n	80018cc <read_encoder_angular_velocity+0xc4>
		motor->angular_velocity /=3500;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001950 <read_encoder_angular_velocity+0x148>
 80018c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edc3 7a00 	vstr	s15, [r3]
 80018ca:	e009      	b.n	80018e0 <read_encoder_angular_velocity+0xd8>
	}
	else{
		motor->angular_velocity /=6000;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001954 <read_encoder_angular_velocity+0x14c>
 80018d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edc3 7a00 	vstr	s15, [r3]
	}
	motor->angular_velocity *= 16; motor->angular_velocity /= 100;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80018ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	edc3 7a00 	vstr	s15, [r3]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001958 <read_encoder_angular_velocity+0x150>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edc3 7a00 	vstr	s15, [r3]
	motor ->angular_velocity*= 2 * M_PI;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe ff5d 	bl	80007cc <__aeabi_f2d>
 8001912:	a30b      	add	r3, pc, #44	@ (adr r3, 8001940 <read_encoder_angular_velocity+0x138>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fcca 	bl	80002b0 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7fe ffca 	bl	80008bc <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]
	motor->last_counter_value = motor->timer_counter;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	609a      	str	r2, [r3, #8]
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	54442d18 	.word	0x54442d18
 8001944:	401921fb 	.word	0x401921fb
 8001948:	ffff15a0 	.word	0xffff15a0
 800194c:	ffff0001 	.word	0xffff0001
 8001950:	455ac000 	.word	0x455ac000
 8001954:	45bb8000 	.word	0x45bb8000
 8001958:	42c80000 	.word	0x42c80000

0800195c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10d      	bne.n	800198a <HAL_TIM_PeriodElapsedCallback+0x2e>

		read_encoder_angular_velocity(&front,&htim3, delay);//on motor
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4909      	ldr	r1, [pc, #36]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001976:	480a      	ldr	r0, [pc, #40]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001978:	f7ff ff46 	bl	8001808 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&rear, &htim4, delay);//arka motor
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001984:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001986:	f7ff ff3f 	bl	8001808 <read_encoder_angular_velocity>


	}


}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40000c00 	.word	0x40000c00
 8001998:	20000040 	.word	0x20000040
 800199c:	20003f84 	.word	0x20003f84
 80019a0:	20004188 	.word	0x20004188
 80019a4:	20003fcc 	.word	0x20003fcc
 80019a8:	20004194 	.word	0x20004194

080019ac <setPWM>:
int16_t speedToPWM(int16_t speed, int16_t max_speed) {
    return speed;
}

/* --- PWM Ayarı --- */
void setPWM(uint32_t channel1, uint32_t channel2, int16_t pwmvalue) {
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	b08f      	sub	sp, #60	@ 0x3c
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80019b6:	6339      	str	r1, [r7, #48]	@ 0x30
 80019b8:	4613      	mov	r3, r2
 80019ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e



	if (pwmvalue >= 0 && pwmvalue <= 1000) {
 80019bc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db79      	blt.n	8001ab8 <setPWM+0x10c>
 80019c4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019cc:	dc74      	bgt.n	8001ab8 <setPWM+0x10c>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, fabs(pwmvalue));
 80019ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d113      	bne.n	80019fc <setPWM+0x50>
 80019d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fee5 	bl	80007a8 <__aeabi_i2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	623a      	str	r2, [r7, #32]
 80019e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ea:	4b9c      	ldr	r3, [pc, #624]	@ (8001c5c <setPWM+0x2b0>)
 80019ec:	681c      	ldr	r4, [r3, #0]
 80019ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019f2:	f7fe ff43 	bl	800087c <__aeabi_d2uiz>
 80019f6:	4603      	mov	r3, r0
 80019f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80019fa:	e040      	b.n	8001a7e <setPWM+0xd2>
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d113      	bne.n	8001a2a <setPWM+0x7e>
 8001a02:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fece 	bl	80007a8 <__aeabi_i2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	61ba      	str	r2, [r7, #24]
 8001a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	4b90      	ldr	r3, [pc, #576]	@ (8001c5c <setPWM+0x2b0>)
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a20:	f7fe ff2c 	bl	800087c <__aeabi_d2uiz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001a28:	e029      	b.n	8001a7e <setPWM+0xd2>
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d113      	bne.n	8001a58 <setPWM+0xac>
 8001a30:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe feb7 	bl	80007a8 <__aeabi_i2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	613a      	str	r2, [r7, #16]
 8001a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b85      	ldr	r3, [pc, #532]	@ (8001c5c <setPWM+0x2b0>)
 8001a48:	681c      	ldr	r4, [r3, #0]
 8001a4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a4e:	f7fe ff15 	bl	800087c <__aeabi_d2uiz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001a56:	e012      	b.n	8001a7e <setPWM+0xd2>
 8001a58:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fea3 	bl	80007a8 <__aeabi_i2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c5c <setPWM+0x2b0>)
 8001a70:	681c      	ldr	r4, [r3, #0]
 8001a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a76:	f7fe ff01 	bl	800087c <__aeabi_d2uiz>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2,0);
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <setPWM+0xe2>
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <setPWM+0x2b0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8c:	e115      	b.n	8001cba <setPWM+0x30e>
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d104      	bne.n	8001a9e <setPWM+0xf2>
 8001a94:	4b71      	ldr	r3, [pc, #452]	@ (8001c5c <setPWM+0x2b0>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a9c:	e10d      	b.n	8001cba <setPWM+0x30e>
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d104      	bne.n	8001aae <setPWM+0x102>
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	@ (8001c5c <setPWM+0x2b0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001aac:	e105      	b.n	8001cba <setPWM+0x30e>
 8001aae:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <setPWM+0x2b0>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	e100      	b.n	8001cba <setPWM+0x30e>
    }

    else if(pwmvalue >= -1000 && pwmvalue < 0 ) {
 8001ab8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001abc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001ac0:	db75      	blt.n	8001bae <setPWM+0x202>
 8001ac2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da71      	bge.n	8001bae <setPWM+0x202>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 0);
 8001aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <setPWM+0x12e>
 8001ad0:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <setPWM+0x2b0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad8:	e013      	b.n	8001b02 <setPWM+0x156>
 8001ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d104      	bne.n	8001aea <setPWM+0x13e>
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <setPWM+0x2b0>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ae8:	e00b      	b.n	8001b02 <setPWM+0x156>
 8001aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d104      	bne.n	8001afa <setPWM+0x14e>
 8001af0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <setPWM+0x2b0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001af8:	e003      	b.n	8001b02 <setPWM+0x156>
 8001afa:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <setPWM+0x2b0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, fabs(pwmvalue));
 8001b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d113      	bne.n	8001b30 <setPWM+0x184>
 8001b08:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fe4b 	bl	80007a8 <__aeabi_i2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	603a      	str	r2, [r7, #0]
 8001b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <setPWM+0x2b0>)
 8001b20:	681c      	ldr	r4, [r3, #0]
 8001b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b26:	f7fe fea9 	bl	800087c <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b2e:	e0c4      	b.n	8001cba <setPWM+0x30e>
 8001b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d112      	bne.n	8001b5c <setPWM+0x1b0>
 8001b36:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fe34 	bl	80007a8 <__aeabi_i2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4615      	mov	r5, r2
 8001b46:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001b4a:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <setPWM+0x2b0>)
 8001b4c:	681c      	ldr	r4, [r3, #0]
 8001b4e:	4628      	mov	r0, r5
 8001b50:	4631      	mov	r1, r6
 8001b52:	f7fe fe93 	bl	800087c <__aeabi_d2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001b5a:	e0ae      	b.n	8001cba <setPWM+0x30e>
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d112      	bne.n	8001b88 <setPWM+0x1dc>
 8001b62:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fe1e 	bl	80007a8 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4692      	mov	sl, r2
 8001b72:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001b76:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <setPWM+0x2b0>)
 8001b78:	681c      	ldr	r4, [r3, #0]
 8001b7a:	4650      	mov	r0, sl
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	f7fe fe7d 	bl	800087c <__aeabi_d2uiz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001b86:	e098      	b.n	8001cba <setPWM+0x30e>
 8001b88:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fe0b 	bl	80007a8 <__aeabi_i2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4690      	mov	r8, r2
 8001b98:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <setPWM+0x2b0>)
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	f7fe fe6a 	bl	800087c <__aeabi_d2uiz>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	6423      	str	r3, [r4, #64]	@ 0x40
 8001bac:	e085      	b.n	8001cba <setPWM+0x30e>
    }

    else if(pwmvalue > 1000 ) {
 8001bae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bb6:	dd3c      	ble.n	8001c32 <setPWM+0x286>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 1000);
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <setPWM+0x21e>
 8001bbe:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <setPWM+0x2b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc8:	e016      	b.n	8001bf8 <setPWM+0x24c>
 8001bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d105      	bne.n	8001bdc <setPWM+0x230>
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <setPWM+0x2b0>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bda:	e00d      	b.n	8001bf8 <setPWM+0x24c>
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d105      	bne.n	8001bee <setPWM+0x242>
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <setPWM+0x2b0>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bec:	e004      	b.n	8001bf8 <setPWM+0x24c>
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <setPWM+0x2b0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 0);
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d104      	bne.n	8001c08 <setPWM+0x25c>
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <setPWM+0x2b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    else {

    }
}
 8001c06:	e058      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 0);
 8001c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d104      	bne.n	8001c18 <setPWM+0x26c>
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <setPWM+0x2b0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c16:	e050      	b.n	8001cba <setPWM+0x30e>
 8001c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d104      	bne.n	8001c28 <setPWM+0x27c>
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <setPWM+0x2b0>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c26:	e048      	b.n	8001cba <setPWM+0x30e>
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <setPWM+0x2b0>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c30:	e043      	b.n	8001cba <setPWM+0x30e>
    else if(pwmvalue < -1000 ) {
 8001c32:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001c36:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c3a:	da3e      	bge.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel1, 0);
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <setPWM+0x2a0>
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <setPWM+0x2b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c4a:	e015      	b.n	8001c78 <setPWM+0x2cc>
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d106      	bne.n	8001c60 <setPWM+0x2b4>
 8001c52:	4b02      	ldr	r3, [pc, #8]	@ (8001c5c <setPWM+0x2b0>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c5a:	e00d      	b.n	8001c78 <setPWM+0x2cc>
 8001c5c:	20003f3c 	.word	0x20003f3c
 8001c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d104      	bne.n	8001c70 <setPWM+0x2c4>
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <setPWM+0x318>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c6e:	e003      	b.n	8001c78 <setPWM+0x2cc>
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <setPWM+0x318>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <setPWM+0x2de>
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <setPWM+0x318>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c86:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c88:	e017      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d105      	bne.n	8001c9c <setPWM+0x2f0>
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <setPWM+0x318>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c98:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c9a:	e00e      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d105      	bne.n	8001cae <setPWM+0x302>
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <setPWM+0x318>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001caa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001cac:	e005      	b.n	8001cba <setPWM+0x30e>
        __HAL_TIM_SET_COMPARE(&htim1, channel2, 1000);
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <setPWM+0x318>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001cb8:	e7ff      	b.n	8001cba <setPWM+0x30e>
 8001cba:	bf00      	nop
 8001cbc:	373c      	adds	r7, #60	@ 0x3c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc4:	20003f3c 	.word	0x20003f3c

08001cc8 <calculatePID>:

/* --- PID Hesaplama --- */
float calculatePID(Wheel *wheel, int max_pwm, int min_pwm, int dt) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]


	float error = wheel->targetSpeed-wheel->currentSpeed;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	edc7 7a06 	vstr	s15, [r7, #24]
    wheel->integralSpeed += error / dt;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d00:	ed97 6a06 	vldr	s12, [r7, #24]
 8001d04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d10:	ee17 2a90 	vmov	r2, s15
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	60da      	str	r2, [r3, #12]
    if (wheel->integralSpeed > wheel->integralLimit) wheel->integralSpeed = max_pwm / wheel->KP;  // Anti-windup
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	dd0f      	ble.n	8001d54 <calculatePID+0x8c>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4c:	ee17 2a90 	vmov	r2, s15
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	60da      	str	r2, [r3, #12]
    if (wheel->integralSpeed < -wheel->integralLimit) wheel->integralSpeed = min_pwm / wheel->KP;  // Anti-windup
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d66:	eef1 7a67 	vneg.f32	s15, s15
 8001d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d50f      	bpl.n	8001d94 <calculatePID+0xcc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8c:	ee17 2a90 	vmov	r2, s15
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	60da      	str	r2, [r3, #12]

    float derivative = (error - wheel->previousErrorSpeed) * dt;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel->previousErrorSpeed = error;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	609a      	str	r2, [r3, #8]

    float output = wheel->KP * error + wheel->KI * wheel->integralSpeed + wheel->KD * derivative;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 6a05 	vldr	s13, [r3, #20]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	edc7 7a07 	vstr	s15, [r7, #28]

    if (output > max_pwm) output = max_pwm;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	dd06      	ble.n	8001e1e <calculatePID+0x156>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (output < min_pwm) output = min_pwm;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d506      	bpl.n	8001e44 <calculatePID+0x17c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e40:	edc7 7a07 	vstr	s15, [r7, #28]

    return output;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	ee07 3a90 	vmov	s15, r3
}
 8001e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4e:	3724      	adds	r7, #36	@ 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <controlWheel>:

uint64_t now;
/* --- Tekerlek Kontrolü --- */
void controlWheel(uint32_t channel1, uint32_t channel2, Wheel *wheel) {
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]

	now = HAL_GetTick();
 8001e64:	f000 fef0 	bl	8002c48 <HAL_GetTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	461c      	mov	r4, r3
 8001e6e:	4615      	mov	r5, r2
 8001e70:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <controlWheel+0x70>)
 8001e72:	e9c3 4500 	strd	r4, r5, [r3]
	dt = now - last_heartbeat_time;
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <controlWheel+0x70>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <controlWheel+0x74>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <controlWheel+0x78>)
 8001e86:	601a      	str	r2, [r3, #0]
	int16_t pwmValue = calculatePID(wheel, MAX_SPEED_PWM, MIN_SPEED_PWM, dt);
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <controlWheel+0x78>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <controlWheel+0x7c>)
 8001e8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff18 	bl	8001cc8 <calculatePID>
 8001e98:	eef0 7a40 	vmov.f32	s15, s0
 8001e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea0:	ee17 3a90 	vmov	r3, s15
 8001ea4:	82fb      	strh	r3, [r7, #22]
	last_heartbeat_time = HAL_GetTick();
 8001ea6:	f000 fecf 	bl	8002c48 <HAL_GetTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <controlWheel+0x74>)
 8001eae:	6013      	str	r3, [r2, #0]
	setPWM(channel1, channel2, pwmValue);
 8001eb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fd77 	bl	80019ac <setPWM>

}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200041a0 	.word	0x200041a0
 8001ecc:	20004178 	.word	0x20004178
 8001ed0:	20004174 	.word	0x20004174
 8001ed4:	fffffc18 	.word	0xfffffc18

08001ed8 <subscription_callback_controller>:




void subscription_callback_controller(const void * msgin){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]


	// Cast received message to used type
	const rover_msgs__msg__ControllerMsg * incoming_msg = (const rover_msgs__msg__ControllerMsg *)msgin;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <subscription_callback_controller+0x58>)
 8001eea:	f001 fd51 	bl	8003990 <HAL_GPIO_WritePin>
    //en son alinan mesajin kacinci saniyede alindigini tut
	last_message_time = HAL_GetTick();
 8001eee:	f000 feab 	bl	8002c48 <HAL_GetTick>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <subscription_callback_controller+0x5c>)
 8001ef6:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2120      	movs	r1, #32
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <subscription_callback_controller+0x58>)
 8001efe:	f001 fd47 	bl	8003990 <HAL_GPIO_WritePin>
    FrontWheel.targetSpeed  = incoming_msg->saghiz;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <subscription_callback_controller+0x60>)
 8001f08:	6013      	str	r3, [r2, #0]
    BackWheel.targetSpeed   = incoming_msg->saghiz;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f3c <subscription_callback_controller+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

    // Rover'ı kontrol et
    controlWheel(TIM_CHANNEL_1, TIM_CHANNEL_2, &FrontWheel);
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <subscription_callback_controller+0x60>)
 8001f14:	2104      	movs	r1, #4
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff ff9e 	bl	8001e58 <controlWheel>
    controlWheel(TIM_CHANNEL_3, TIM_CHANNEL_4, &BackWheel);
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <subscription_callback_controller+0x64>)
 8001f1e:	210c      	movs	r1, #12
 8001f20:	2008      	movs	r0, #8
 8001f22:	f7ff ff99 	bl	8001e58 <controlWheel>

}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40020000 	.word	0x40020000
 8001f34:	20004180 	.word	0x20004180
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000020 	.word	0x20000020

08001f40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b0cc      	sub	sp, #304	@ 0x130
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001f4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f4e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8001f50:	4b52      	ldr	r3, [pc, #328]	@ (800209c <StartDefaultTask+0x15c>)
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <StartDefaultTask+0x160>)
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	4b52      	ldr	r3, [pc, #328]	@ (80020a4 <StartDefaultTask+0x164>)
 8001f5a:	4a53      	ldr	r2, [pc, #332]	@ (80020a8 <StartDefaultTask+0x168>)
 8001f5c:	4953      	ldr	r1, [pc, #332]	@ (80020ac <StartDefaultTask+0x16c>)
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f008 fc0a 	bl	800a778 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001f64:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 fb53 	bl	800a614 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001f6e:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <StartDefaultTask+0x170>)
 8001f70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001f74:	4b4f      	ldr	r3, [pc, #316]	@ (80020b4 <StartDefaultTask+0x174>)
 8001f76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <StartDefaultTask+0x178>)
 8001f7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001f80:	4b4e      	ldr	r3, [pc, #312]	@ (80020bc <StartDefaultTask+0x17c>)
 8001f82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	  	      rclc_executor_t executor;
	  	      rcl_allocator_t allocator;
	  	      rcl_publisher_t publisher;


	  	      allocator = rcl_get_default_allocator();
 8001f86:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001f8a:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4618      	mov	r0, r3
 8001f92:	f008 fb4d 	bl	800a630 <rcutils_get_default_allocator>
 8001f96:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001f9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	6023      	str	r3, [r4, #0]

	  	      	    // create init_options
	  	      rclc_support_init(&support, 0, NULL, &allocator);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fac:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f008 fa38 	bl	800a428 <rclc_support_init>


	  	      	    // create node
	  	      rclc_node_init_default(&nodesub, "sub_node", "", &support);
 8001fb8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001fbc:	4a40      	ldr	r2, [pc, #256]	@ (80020c0 <StartDefaultTask+0x180>)
 8001fbe:	4941      	ldr	r1, [pc, #260]	@ (80020c4 <StartDefaultTask+0x184>)
 8001fc0:	4841      	ldr	r0, [pc, #260]	@ (80020c8 <StartDefaultTask+0x188>)
 8001fc2:	f008 fa7b 	bl	800a4bc <rclc_node_init_default>
	  	      rclc_subscription_init_default(
 8001fc6:	f009 f903 	bl	800b1d0 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80020cc <StartDefaultTask+0x18c>)
 8001fce:	493e      	ldr	r1, [pc, #248]	@ (80020c8 <StartDefaultTask+0x188>)
 8001fd0:	483f      	ldr	r0, [pc, #252]	@ (80020d0 <StartDefaultTask+0x190>)
 8001fd2:	f008 fae3 	bl	800a59c <rclc_subscription_init_default>
	  	      	        &subscriber,
	  	      	        &nodesub,
	  	      	        ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, ControllerMsg),
	  	      	        "joystick_cmd");

	  	      rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fda:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001fde:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f007 ff58 	bl	8009e98 <rclc_executor_init>
	  	      	    // create subscription




	  	      rclc_executor_add_subscription(
 8001fe8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001fec:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4b37      	ldr	r3, [pc, #220]	@ (80020d4 <StartDefaultTask+0x194>)
 8001ff6:	4936      	ldr	r1, [pc, #216]	@ (80020d0 <StartDefaultTask+0x190>)
 8001ff8:	f007 ffbe 	bl	8009f78 <rclc_executor_add_subscription>
	  	      	      &executor, &subscriber, &submsg,
	  	      	      &subscription_callback_controller, ON_NEW_DATA);

	  	      rclc_publisher_init_default(
 8001ffc:	f009 f900 	bl	800b200 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8002000:	4602      	mov	r2, r0
 8002002:	f107 0020 	add.w	r0, r7, #32
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <StartDefaultTask+0x198>)
 8002008:	492f      	ldr	r1, [pc, #188]	@ (80020c8 <StartDefaultTask+0x188>)
 800200a:	f008 fa93 	bl	800a534 <rclc_publisher_init_default>


	  while(1)
	  {
		  //mesaj gelip gelmedigini kontrol et
		  rclc_executor_spin_some(&executor,100);
 800200e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002012:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	4608      	mov	r0, r1
 800201c:	f008 f9cc 	bl	800a3b8 <rclc_executor_spin_some>
		  encodermsg.l_front = front.angular_velocity;
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <StartDefaultTask+0x19c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		  encodermsg.l_back =  rear.angular_velocity;
 8002028:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <StartDefaultTask+0x1a0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		  rcl_publish(&publisher, &encodermsg, NULL);
 8002030:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8002034:	f107 0320 	add.w	r3, r7, #32
 8002038:	2200      	movs	r2, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f007 fb9e 	bl	800977c <rcl_publish>

		  //programin calisma zamani
		  heartbeat_time = HAL_GetTick();
 8002040:	f000 fe02 	bl	8002c48 <HAL_GetTick>
 8002044:	4603      	mov	r3, r0
 8002046:	4a27      	ldr	r2, [pc, #156]	@ (80020e4 <StartDefaultTask+0x1a4>)
 8002048:	6013      	str	r3, [r2, #0]

		  //250 milisaniye boyunca mesaj alinmamissa motorlari durdur.
		  if (HAL_GetTick() - last_message_time > 250) {
 800204a:	f000 fdfd 	bl	8002c48 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <StartDefaultTask+0x1a8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2bfa      	cmp	r3, #250	@ 0xfa
 8002058:	d903      	bls.n	8002062 <StartDefaultTask+0x122>
		      connection_lost = true;
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <StartDefaultTask+0x1ac>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e002      	b.n	8002068 <StartDefaultTask+0x128>
		  }
		  else {
		      connection_lost = false;
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <StartDefaultTask+0x1ac>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		  }

		  if(connection_lost == true){
 8002068:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <StartDefaultTask+0x1ac>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ce      	beq.n	800200e <StartDefaultTask+0xce>
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <StartDefaultTask+0x1b0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <StartDefaultTask+0x1b0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <StartDefaultTask+0x1b0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <StartDefaultTask+0x1b0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2120      	movs	r1, #32
 8002094:	4817      	ldr	r0, [pc, #92]	@ (80020f4 <StartDefaultTask+0x1b4>)
 8002096:	f001 fc7b 	bl	8003990 <HAL_GPIO_WritePin>
		  rclc_executor_spin_some(&executor,100);
 800209a:	e7b8      	b.n	800200e <StartDefaultTask+0xce>
 800209c:	08002a81 	.word	0x08002a81
 80020a0:	08002a19 	.word	0x08002a19
 80020a4:	080029f9 	.word	0x080029f9
 80020a8:	080029cd 	.word	0x080029cd
 80020ac:	2000405c 	.word	0x2000405c
 80020b0:	08002101 	.word	0x08002101
 80020b4:	08002145 	.word	0x08002145
 80020b8:	0800217d 	.word	0x0800217d
 80020bc:	080021e9 	.word	0x080021e9
 80020c0:	0801754c 	.word	0x0801754c
 80020c4:	08017550 	.word	0x08017550
 80020c8:	20004168 	.word	0x20004168
 80020cc:	0801755c 	.word	0x0801755c
 80020d0:	20004170 	.word	0x20004170
 80020d4:	08001ed9 	.word	0x08001ed9
 80020d8:	0801756c 	.word	0x0801756c
 80020dc:	20004188 	.word	0x20004188
 80020e0:	20004194 	.word	0x20004194
 80020e4:	2000417c 	.word	0x2000417c
 80020e8:	20004180 	.word	0x20004180
 80020ec:	20004184 	.word	0x20004184
 80020f0:	20003f3c 	.word	0x20003f3c
 80020f4:	40020000 	.word	0x40020000

080020f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <Error_Handler+0x4>

08002100 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <microros_allocate+0x3c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <microros_allocate+0x3c>)
 8002118:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <microros_allocate+0x40>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <microros_allocate+0x40>)
 8002128:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fdde 	bl	8000cec <pvPortMallocMicroROS>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200041a8 	.word	0x200041a8
 8002140:	200041ac 	.word	0x200041ac

08002144 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe feed 	bl	8000f34 <getBlockSize>
 800215a:	4603      	mov	r3, r0
 800215c:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <microros_deallocate+0x34>)
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	461a      	mov	r2, r3
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <microros_deallocate+0x34>)
 8002166:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe fe87 	bl	8000e7c <vPortFreeMicroROS>
  }
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200041ac 	.word	0x200041ac

0800217c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <microros_reallocate+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4413      	add	r3, r2
 8002192:	461a      	mov	r2, r3
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <microros_reallocate+0x64>)
 8002196:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <microros_reallocate+0x68>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <microros_reallocate+0x68>)
 80021a6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80021ae:	68b8      	ldr	r0, [r7, #8]
 80021b0:	f7fe fd9c 	bl	8000cec <pvPortMallocMicroROS>
 80021b4:	4603      	mov	r3, r0
 80021b6:	e00e      	b.n	80021d6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7fe febb 	bl	8000f34 <getBlockSize>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <microros_reallocate+0x68>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <microros_reallocate+0x68>)
 80021ca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7fe fece 	bl	8000f70 <pvPortReallocMicroROS>
 80021d4:	4603      	mov	r3, r0
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200041a8 	.word	0x200041a8
 80021e4:	200041ac 	.word	0x200041ac

080021e8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <microros_zero_allocate+0x48>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <microros_zero_allocate+0x48>)
 8002206:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <microros_zero_allocate+0x4c>)
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <microros_zero_allocate+0x4c>)
 800221a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7fe fed3 	bl	8000fca <pvPortCallocMicroROS>
 8002224:	4603      	mov	r3, r0
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200041a8 	.word	0x200041a8
 8002234:	200041ac 	.word	0x200041ac

08002238 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800224a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800224e:	a320      	add	r3, pc, #128	@ (adr r3, 80022d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe fb82 	bl	800095c <__aeabi_ldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002266:	a31a      	add	r3, pc, #104	@ (adr r3, 80022d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe fb76 	bl	800095c <__aeabi_ldivmod>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	da20      	bge.n	80022be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <UTILS_NanosecondsToTimespec+0x90>)
 8002282:	fb82 1203 	smull	r1, r2, r2, r3
 8002286:	1712      	asrs	r2, r2, #28
 8002288:	17db      	asrs	r3, r3, #31
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	6979      	ldr	r1, [r7, #20]
 8002298:	17c8      	asrs	r0, r1, #31
 800229a:	460c      	mov	r4, r1
 800229c:	4605      	mov	r5, r0
 800229e:	ebb2 0804 	subs.w	r8, r2, r4
 80022a2:	eb63 0905 	sbc.w	r9, r3, r5
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4906      	ldr	r1, [pc, #24]	@ (80022cc <UTILS_NanosecondsToTimespec+0x94>)
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	441a      	add	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]
    }
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c8:	44b82fa1 	.word	0x44b82fa1
 80022cc:	3b9aca00 	.word	0x3b9aca00
 80022d0:	3b9aca00 	.word	0x3b9aca00
 80022d4:	00000000 	.word	0x00000000

080022d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b08e      	sub	sp, #56	@ 0x38
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80022e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022e8:	2300      	movs	r3, #0
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 ff74 	bl	80081ec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002306:	17da      	asrs	r2, r3, #31
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	61fa      	str	r2, [r7, #28]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	69b9      	ldr	r1, [r7, #24]
 8002316:	000b      	movs	r3, r1
 8002318:	2200      	movs	r2, #0
 800231a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	2200      	movs	r2, #0
 8002322:	461c      	mov	r4, r3
 8002324:	4615      	mov	r5, r2
 8002326:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800232a:	1911      	adds	r1, r2, r4
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	416b      	adcs	r3, r5
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002336:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800233a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	f04f 0400 	mov.w	r4, #0
 8002346:	f04f 0500 	mov.w	r5, #0
 800234a:	015d      	lsls	r5, r3, #5
 800234c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002350:	0154      	lsls	r4, r2, #5
 8002352:	4622      	mov	r2, r4
 8002354:	462b      	mov	r3, r5
 8002356:	ebb2 0800 	subs.w	r8, r2, r0
 800235a:	eb63 0901 	sbc.w	r9, r3, r1
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800236a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800236e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002372:	4690      	mov	r8, r2
 8002374:	4699      	mov	r9, r3
 8002376:	eb18 0a00 	adds.w	sl, r8, r0
 800237a:	eb49 0b01 	adc.w	fp, r9, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800238a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800238e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002392:	ebb2 040a 	subs.w	r4, r2, sl
 8002396:	603c      	str	r4, [r7, #0]
 8002398:	eb63 030b 	sbc.w	r3, r3, fp
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a2:	4623      	mov	r3, r4
 80023a4:	181b      	adds	r3, r3, r0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	462b      	mov	r3, r5
 80023aa:	eb41 0303 	adc.w	r3, r1, r3
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b6:	f7ff ff3f 	bl	8002238 <UTILS_NanosecondsToTimespec>

    return 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	3738      	adds	r7, #56	@ 0x38
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_MspInit+0x54>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a11      	ldr	r2, [pc, #68]	@ (800241c <HAL_MspInit+0x54>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_MspInit+0x54>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_MspInit+0x54>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_MspInit+0x54>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_MspInit+0x54>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	210f      	movs	r1, #15
 800240a:	f06f 0001 	mvn.w	r0, #1
 800240e:	f000 fd02 	bl	8002e16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a18      	ldr	r2, [pc, #96]	@ (8002490 <HAL_TIM_Base_MspInit+0x70>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_TIM_Base_MspInit+0x74>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_TIM_Base_MspInit+0x74>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_TIM_Base_MspInit+0x74>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800244e:	e01a      	b.n	8002486 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a10      	ldr	r2, [pc, #64]	@ (8002498 <HAL_TIM_Base_MspInit+0x78>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d115      	bne.n	8002486 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <HAL_TIM_Base_MspInit+0x74>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <HAL_TIM_Base_MspInit+0x74>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6413      	str	r3, [r2, #64]	@ 0x40
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_TIM_Base_MspInit+0x74>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2105      	movs	r1, #5
 800247a:	2032      	movs	r0, #50	@ 0x32
 800247c:	f000 fccb 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002480:	2032      	movs	r0, #50	@ 0x32
 8002482:	f000 fce4 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	40023800 	.word	0x40023800
 8002498:	40000c00 	.word	0x40000c00

0800249c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	@ 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a32      	ldr	r2, [pc, #200]	@ (8002584 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12c      	bne.n	8002518 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a29      	ldr	r2, [pc, #164]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024f6:	23c0      	movs	r3, #192	@ 0xc0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002506:	2302      	movs	r3, #2
 8002508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	481e      	ldr	r0, [pc, #120]	@ (800258c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002512:	f001 f8b9 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002516:	e030      	b.n	800257a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <HAL_TIM_Encoder_MspInit+0xf4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12b      	bne.n	800257a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <HAL_TIM_Encoder_MspInit+0xec>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800255a:	23c0      	movs	r3, #192	@ 0xc0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800256a:	2302      	movs	r3, #2
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	4807      	ldr	r0, [pc, #28]	@ (8002594 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002576:	f001 f887 	bl	8003688 <HAL_GPIO_Init>
}
 800257a:	bf00      	nop
 800257c:	3730      	adds	r7, #48	@ 0x30
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40000400 	.word	0x40000400
 8002588:	40023800 	.word	0x40023800
 800258c:	40020000 	.word	0x40020000
 8002590:	40000800 	.word	0x40000800
 8002594:	40020400 	.word	0x40020400

08002598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <HAL_TIM_MspPostInit+0x68>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d11e      	bne.n	80025f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_TIM_MspPostInit+0x6c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	@ (8002604 <HAL_TIM_MspPostInit+0x6c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <HAL_TIM_MspPostInit+0x6c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80025d6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80025da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	@ (8002608 <HAL_TIM_MspPostInit+0x70>)
 80025f4:	f001 f848 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010000 	.word	0x40010000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4d      	ldr	r2, [pc, #308]	@ (8002760 <HAL_UART_MspInit+0x154>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f040 8093 	bne.w	8002756 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <HAL_UART_MspInit+0x158>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_UART_MspInit+0x158>)
 800263a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002640:	4b48      	ldr	r3, [pc, #288]	@ (8002764 <HAL_UART_MspInit+0x158>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	4b44      	ldr	r3, [pc, #272]	@ (8002764 <HAL_UART_MspInit+0x158>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	4a43      	ldr	r2, [pc, #268]	@ (8002764 <HAL_UART_MspInit+0x158>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6313      	str	r3, [r2, #48]	@ 0x30
 800265c:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <HAL_UART_MspInit+0x158>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002668:	230c      	movs	r3, #12
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002678:	2307      	movs	r3, #7
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	4839      	ldr	r0, [pc, #228]	@ (8002768 <HAL_UART_MspInit+0x15c>)
 8002684:	f001 f800 	bl	8003688 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002688:	4b38      	ldr	r3, [pc, #224]	@ (800276c <HAL_UART_MspInit+0x160>)
 800268a:	4a39      	ldr	r2, [pc, #228]	@ (8002770 <HAL_UART_MspInit+0x164>)
 800268c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800268e:	4b37      	ldr	r3, [pc, #220]	@ (800276c <HAL_UART_MspInit+0x160>)
 8002690:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002694:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	4b35      	ldr	r3, [pc, #212]	@ (800276c <HAL_UART_MspInit+0x160>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269c:	4b33      	ldr	r3, [pc, #204]	@ (800276c <HAL_UART_MspInit+0x160>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a2:	4b32      	ldr	r3, [pc, #200]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026aa:	4b30      	ldr	r3, [pc, #192]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b0:	4b2e      	ldr	r3, [pc, #184]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026b6:	4b2d      	ldr	r3, [pc, #180]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026be:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c6:	4b29      	ldr	r3, [pc, #164]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026cc:	4827      	ldr	r0, [pc, #156]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026ce:	f000 fbd9 	bl	8002e84 <HAL_DMA_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80026d8:	f7ff fd0e 	bl	80020f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a23      	ldr	r2, [pc, #140]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026e2:	4a22      	ldr	r2, [pc, #136]	@ (800276c <HAL_UART_MspInit+0x160>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026ea:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <HAL_UART_MspInit+0x16c>)
 80026ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026ee:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <HAL_UART_MspInit+0x168>)
 8002704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002708:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_UART_MspInit+0x168>)
 800270c:	2200      	movs	r2, #0
 800270e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002710:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <HAL_UART_MspInit+0x168>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_UART_MspInit+0x168>)
 8002718:	2200      	movs	r2, #0
 800271a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_UART_MspInit+0x168>)
 800271e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002722:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002724:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <HAL_UART_MspInit+0x168>)
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800272a:	4812      	ldr	r0, [pc, #72]	@ (8002774 <HAL_UART_MspInit+0x168>)
 800272c:	f000 fbaa 	bl	8002e84 <HAL_DMA_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002736:	f7ff fcdf 	bl	80020f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <HAL_UART_MspInit+0x168>)
 800273e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002740:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <HAL_UART_MspInit+0x168>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2105      	movs	r1, #5
 800274a:	2026      	movs	r0, #38	@ 0x26
 800274c:	f000 fb63 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002750:	2026      	movs	r0, #38	@ 0x26
 8002752:	f000 fb7c 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	@ 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40004400 	.word	0x40004400
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000
 800276c:	200040a4 	.word	0x200040a4
 8002770:	40026088 	.word	0x40026088
 8002774:	20004104 	.word	0x20004104
 8002778:	400260a0 	.word	0x400260a0

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <MemManage_Handler+0x4>

08002794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b6:	f000 fa33 	bl	8002c20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027ba:	f005 fe9b 	bl	80084f4 <xTaskGetSchedulerState>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d001      	beq.n	80027c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027c4:	f006 fc90 	bl	80090e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}

080027cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <DMA1_Stream5_IRQHandler+0x10>)
 80027d2:	f000 fcef 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200040a4 	.word	0x200040a4

080027e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <DMA1_Stream6_IRQHandler+0x10>)
 80027e6:	f000 fce5 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20004104 	.word	0x20004104

080027f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <USART2_IRQHandler+0x10>)
 80027fa:	f003 f81d 	bl	8005838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000405c 	.word	0x2000405c

08002808 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <TIM5_IRQHandler+0x10>)
 800280e:	f002 f861 	bl	80048d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20004014 	.word	0x20004014

0800281c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return 1;
 8002820:	2301      	movs	r3, #1
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_kill>:

int _kill(int pid, int sig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002836:	f013 ff6f 	bl	8016718 <__errno>
 800283a:	4603      	mov	r3, r0
 800283c:	2216      	movs	r2, #22
 800283e:	601a      	str	r2, [r3, #0]
  return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_exit>:

void _exit (int status)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002854:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ffe7 	bl	800282c <_kill>
  while (1) {}    /* Make sure we hang here */
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <_exit+0x12>

08002862 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e00a      	b.n	800288a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002874:	f3af 8000 	nop.w
 8002878:	4601      	mov	r1, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	60ba      	str	r2, [r7, #8]
 8002880:	b2ca      	uxtb	r2, r1
 8002882:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	dbf0      	blt.n	8002874 <_read+0x12>
  }

  return len;
 8002892:	687b      	ldr	r3, [r7, #4]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e009      	b.n	80028c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	60ba      	str	r2, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	dbf1      	blt.n	80028ae <_write+0x12>
  }
  return len;
 80028ca:	687b      	ldr	r3, [r7, #4]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_close>:

int _close(int file)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028fc:	605a      	str	r2, [r3, #4]
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_isatty>:

int _isatty(int file)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002914:	2301      	movs	r3, #1
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800296c:	f013 fed4 	bl	8016718 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20018000 	.word	0x20018000
 800299c:	00000400 	.word	0x00000400
 80029a0:	200041b4 	.word	0x200041b4
 80029a4:	2000dfe0 	.word	0x2000dfe0

080029a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <SystemInit+0x20>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	4a05      	ldr	r2, [pc, #20]	@ (80029c8 <SystemInit+0x20>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80029da:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80029dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029e0:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <cubemx_transport_open+0x28>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f002 fe84 	bl	80056f0 <HAL_UART_Receive_DMA>
    return true;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200041b8 	.word	0x200041b8

080029f8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a06:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f002 fe96 	bl	800573a <HAL_UART_DMAStop>
    return true;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a2c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d11c      	bne.n	8002a74 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f002 fde4 	bl	8005610 <HAL_UART_Transmit_DMA>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002a4c:	e002      	b.n	8002a54 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f004 f900 	bl	8006c54 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <cubemx_transport_write+0x4e>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d1f3      	bne.n	8002a4e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <cubemx_transport_write+0x58>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	e002      	b.n	8002a76 <cubemx_transport_write+0x5e>
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002a74:	2300      	movs	r3, #0
    }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a94:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9a:	b672      	cpsid	i
}
 8002a9c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <cubemx_transport_read+0x9c>)
 8002aac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aae:	b662      	cpsie	i
}
 8002ab0:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f004 f8cb 	bl	8006c54 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <cubemx_transport_read+0xa0>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <cubemx_transport_read+0x9c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d103      	bne.n	8002ad2 <cubemx_transport_read+0x52>
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	dbe3      	blt.n	8002a9a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002ad6:	e011      	b.n	8002afc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <cubemx_transport_read+0xa0>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	4910      	ldr	r1, [pc, #64]	@ (8002b24 <cubemx_transport_read+0xa4>)
 8002ae4:	5c8a      	ldrb	r2, [r1, r2]
 8002ae6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <cubemx_transport_read+0xa0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b20 <cubemx_transport_read+0xa0>)
 8002af4:	6013      	str	r3, [r2, #0]
        wrote++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002afc:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <cubemx_transport_read+0xa0>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <cubemx_transport_read+0x9c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d003      	beq.n	8002b10 <cubemx_transport_read+0x90>
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3e3      	bcc.n	8002ad8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002b10:	69bb      	ldr	r3, [r7, #24]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200049bc 	.word	0x200049bc
 8002b20:	200049b8 	.word	0x200049b8
 8002b24:	200041b8 	.word	0x200041b8

08002b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b2c:	f7ff ff3c 	bl	80029a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b30:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b32:	490d      	ldr	r1, [pc, #52]	@ (8002b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b48:	4c0a      	ldr	r4, [pc, #40]	@ (8002b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002b56:	f013 fde5 	bl	8016724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5a:	f7fe fb17 	bl	800118c <main>
  bx  lr    
 8002b5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8002b6c:	080183a4 	.word	0x080183a4
  ldr r2, =_sbss
 8002b70:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8002b74:	2000dfdc 	.word	0x2000dfdc

08002b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC_IRQHandler>
	...

08002b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <HAL_Init+0x40>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <HAL_Init+0x40>)
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <HAL_Init+0x40>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f000 f92b 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002baa:	200f      	movs	r0, #15
 8002bac:	f000 f808 	bl	8002bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb0:	f7ff fc0a 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_InitTick+0x54>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_InitTick+0x58>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f943 	bl	8002e6a <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00e      	b.n	8002c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d80a      	bhi.n	8002c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bfc:	f000 f90b 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c00:	4a06      	ldr	r2, [pc, #24]	@ (8002c1c <HAL_InitTick+0x5c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000048 	.word	0x20000048
 8002c18:	20000050 	.word	0x20000050
 8002c1c:	2000004c 	.word	0x2000004c

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000050 	.word	0x20000050
 8002c44:	200049c0 	.word	0x200049c0

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	200049c0 	.word	0x200049c0

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	@ (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	@ (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002de0:	f7ff ff8e 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff29 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff3e 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff8e 	bl	8002d54 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5d 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff feda 	bl	8002c48 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e099      	b.n	8002fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec0:	e00f      	b.n	8002ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec2:	f7ff fec1 	bl	8002c48 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d908      	bls.n	8002ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e078      	b.n	8002fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e8      	bne.n	8002ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <HAL_DMA_Init+0x158>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	4313      	orrs	r3, r2
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0307 	bic.w	r3, r3, #7
 8002f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d117      	bne.n	8002fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb01 	bl	8003590 <DMA_CheckFifoParam>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2240      	movs	r2, #64	@ 0x40
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e016      	b.n	8002fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fab8 	bl	8003524 <DMA_CalcBaseAndBitshift>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	223f      	movs	r2, #63	@ 0x3f
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	f010803f 	.word	0xf010803f

08002fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Start_IT+0x26>
 8003002:	2302      	movs	r3, #2
 8003004:	e040      	b.n	8003088 <HAL_DMA_Start_IT+0xa8>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12f      	bne.n	800307a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa4a 	bl	80034c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	223f      	movs	r2, #63	@ 0x3f
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0216 	orr.w	r2, r2, #22
 800304e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e005      	b.n	8003086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7ff fdd3 	bl	8002c48 <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d008      	beq.n	80030c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	@ 0x80
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e052      	b.n	8003168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_Abort+0x62>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003112:	e013      	b.n	800313c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003114:	f7ff fd98 	bl	8002c48 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b05      	cmp	r3, #5
 8003120:	d90c      	bls.n	800313c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e015      	b.n	8003168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	223f      	movs	r2, #63	@ 0x3f
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00c      	b.n	80031a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2205      	movs	r2, #5
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c0:	4b8e      	ldr	r3, [pc, #568]	@ (80033fc <HAL_DMA_IRQHandler+0x248>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003400 <HAL_DMA_IRQHandler+0x24c>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	2208      	movs	r2, #8
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01a      	beq.n	8003220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	2208      	movs	r2, #8
 800320e:	409a      	lsls	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	2201      	movs	r2, #1
 8003244:	409a      	lsls	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2204      	movs	r2, #4
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d012      	beq.n	800328c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	2204      	movs	r2, #4
 800327a:	409a      	lsls	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2210      	movs	r2, #16
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d043      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03c      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	2210      	movs	r2, #16
 80032b0:	409a      	lsls	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d024      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
 80032e2:	e01f      	b.n	8003324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
 80032f4:	e016      	b.n	8003324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0208 	bic.w	r2, r2, #8
 8003312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	2220      	movs	r2, #32
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 808f 	beq.w	8003454 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8087 	beq.w	8003454 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	2220      	movs	r2, #32
 800334c:	409a      	lsls	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d136      	bne.n	80033cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0216 	bic.w	r2, r2, #22
 800336c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800337c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_DMA_IRQHandler+0x1da>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0208 	bic.w	r2, r2, #8
 800339c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	223f      	movs	r2, #63	@ 0x3f
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d07e      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
        }
        return;
 80033ca:	e079      	b.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d031      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e02c      	b.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
 80033fa:	bf00      	nop
 80033fc:	20000048 	.word	0x20000048
 8003400:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d023      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
 8003414:	e01e      	b.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0210 	bic.w	r2, r2, #16
 8003432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	2b00      	cmp	r3, #0
 800345a:	d032      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d022      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2205      	movs	r2, #5
 800346c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d307      	bcc.n	800349c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f2      	bne.n	8003480 <HAL_DMA_IRQHandler+0x2cc>
 800349a:	e000      	b.n	800349e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800349c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
 80034be:	e000      	b.n	80034c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034c0:	bf00      	nop
    }
  }
}
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b40      	cmp	r3, #64	@ 0x40
 80034f4:	d108      	bne.n	8003508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003506:	e007      	b.n	8003518 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	3b10      	subs	r3, #16
 8003534:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <DMA_CalcBaseAndBitshift+0x64>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800353e:	4a13      	ldr	r2, [pc, #76]	@ (800358c <DMA_CalcBaseAndBitshift+0x68>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d909      	bls.n	8003566 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	659a      	str	r2, [r3, #88]	@ 0x58
 8003564:	e007      	b.n	8003576 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	aaaaaaab 	.word	0xaaaaaaab
 800358c:	080175e4 	.word	0x080175e4

08003590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d856      	bhi.n	800365e <DMA_CheckFifoParam+0xce>
 80035b0:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <DMA_CheckFifoParam+0x28>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035db 	.word	0x080035db
 80035c0:	080035c9 	.word	0x080035c9
 80035c4:	0800365f 	.word	0x0800365f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d046      	beq.n	8003662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d8:	e043      	b.n	8003662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035e2:	d140      	bne.n	8003666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e8:	e03d      	b.n	8003666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f2:	d121      	bne.n	8003638 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d837      	bhi.n	800366a <DMA_CheckFifoParam+0xda>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <DMA_CheckFifoParam+0x70>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	08003611 	.word	0x08003611
 8003604:	08003617 	.word	0x08003617
 8003608:	08003611 	.word	0x08003611
 800360c:	08003629 	.word	0x08003629
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e030      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d025      	beq.n	800366e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e022      	b.n	800366e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003630:	d11f      	bne.n	8003672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003636:	e01c      	b.n	8003672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d903      	bls.n	8003646 <DMA_CheckFifoParam+0xb6>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d003      	beq.n	800364c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003644:	e018      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
      break;
 800364a:	e015      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e00b      	b.n	8003676 <DMA_CheckFifoParam+0xe6>
      break;
 800365e:	bf00      	nop
 8003660:	e00a      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 8003662:	bf00      	nop
 8003664:	e008      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 8003666:	bf00      	nop
 8003668:	e006      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e004      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;   
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 8003676:	bf00      	nop
    }
  } 
  
  return status; 
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	@ 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e159      	b.n	8003958 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a4:	2201      	movs	r2, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f040 8148 	bne.w	8003952 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d005      	beq.n	80036da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d130      	bne.n	800373c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	2203      	movs	r2, #3
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003710:	2201      	movs	r2, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 0201 	and.w	r2, r3, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b03      	cmp	r3, #3
 8003746:	d017      	beq.n	8003778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d123      	bne.n	80037cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a2 	beq.w	8003952 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b57      	ldr	r3, [pc, #348]	@ (8003970 <HAL_GPIO_Init+0x2e8>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	4a56      	ldr	r2, [pc, #344]	@ (8003970 <HAL_GPIO_Init+0x2e8>)
 8003818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800381c:	6453      	str	r3, [r2, #68]	@ 0x44
 800381e:	4b54      	ldr	r3, [pc, #336]	@ (8003970 <HAL_GPIO_Init+0x2e8>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800382a:	4a52      	ldr	r2, [pc, #328]	@ (8003974 <HAL_GPIO_Init+0x2ec>)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	220f      	movs	r2, #15
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a49      	ldr	r2, [pc, #292]	@ (8003978 <HAL_GPIO_Init+0x2f0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d019      	beq.n	800388a <HAL_GPIO_Init+0x202>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a48      	ldr	r2, [pc, #288]	@ (800397c <HAL_GPIO_Init+0x2f4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_GPIO_Init+0x1fe>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a47      	ldr	r2, [pc, #284]	@ (8003980 <HAL_GPIO_Init+0x2f8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00d      	beq.n	8003882 <HAL_GPIO_Init+0x1fa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a46      	ldr	r2, [pc, #280]	@ (8003984 <HAL_GPIO_Init+0x2fc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <HAL_GPIO_Init+0x1f6>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a45      	ldr	r2, [pc, #276]	@ (8003988 <HAL_GPIO_Init+0x300>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_GPIO_Init+0x1f2>
 8003876:	2304      	movs	r3, #4
 8003878:	e008      	b.n	800388c <HAL_GPIO_Init+0x204>
 800387a:	2307      	movs	r3, #7
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x204>
 800387e:	2303      	movs	r3, #3
 8003880:	e004      	b.n	800388c <HAL_GPIO_Init+0x204>
 8003882:	2302      	movs	r3, #2
 8003884:	e002      	b.n	800388c <HAL_GPIO_Init+0x204>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_GPIO_Init+0x204>
 800388a:	2300      	movs	r3, #0
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f002 0203 	and.w	r2, r2, #3
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	4093      	lsls	r3, r2
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800389c:	4935      	ldr	r1, [pc, #212]	@ (8003974 <HAL_GPIO_Init+0x2ec>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038aa:	4b38      	ldr	r3, [pc, #224]	@ (800398c <HAL_GPIO_Init+0x304>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ce:	4a2f      	ldr	r2, [pc, #188]	@ (800398c <HAL_GPIO_Init+0x304>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d4:	4b2d      	ldr	r3, [pc, #180]	@ (800398c <HAL_GPIO_Init+0x304>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f8:	4a24      	ldr	r2, [pc, #144]	@ (800398c <HAL_GPIO_Init+0x304>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fe:	4b23      	ldr	r3, [pc, #140]	@ (800398c <HAL_GPIO_Init+0x304>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003922:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <HAL_GPIO_Init+0x304>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003928:	4b18      	ldr	r3, [pc, #96]	@ (800398c <HAL_GPIO_Init+0x304>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800394c:	4a0f      	ldr	r2, [pc, #60]	@ (800398c <HAL_GPIO_Init+0x304>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	f67f aea2 	bls.w	80036a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3724      	adds	r7, #36	@ 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40013800 	.word	0x40013800
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400
 8003980:	40020800 	.word	0x40020800
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40021000 	.word	0x40021000
 800398c:	40013c00 	.word	0x40013c00

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039ac:	e003      	b.n	80039b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e267      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d075      	beq.n	8003ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039e2:	4b88      	ldr	r3, [pc, #544]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d00c      	beq.n	8003a08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b85      	ldr	r3, [pc, #532]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d112      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fa:	4b82      	ldr	r3, [pc, #520]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	4b7e      	ldr	r3, [pc, #504]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d05b      	beq.n	8003acc <HAL_RCC_OscConfig+0x108>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d157      	bne.n	8003acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e242      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x74>
 8003a2a:	4b76      	ldr	r3, [pc, #472]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e01d      	b.n	8003a74 <HAL_RCC_OscConfig+0xb0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x98>
 8003a42:	4b70      	ldr	r3, [pc, #448]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6f      	ldr	r2, [pc, #444]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6c      	ldr	r2, [pc, #432]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0xb0>
 8003a5c:	4b69      	ldr	r3, [pc, #420]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a68      	ldr	r2, [pc, #416]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b66      	ldr	r3, [pc, #408]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a65      	ldr	r2, [pc, #404]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7ff f8e4 	bl	8002c48 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7ff f8e0 	bl	8002c48 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	@ 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e207      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b5b      	ldr	r3, [pc, #364]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0xc0>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7ff f8d0 	bl	8002c48 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7ff f8cc 	bl	8002c48 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1f3      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	4b51      	ldr	r3, [pc, #324]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0xe8>
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d063      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ada:	4b4a      	ldr	r3, [pc, #296]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b47      	ldr	r3, [pc, #284]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d11c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af2:	4b44      	ldr	r3, [pc, #272]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	4b41      	ldr	r3, [pc, #260]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_RCC_OscConfig+0x152>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e1c7      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b3b      	ldr	r3, [pc, #236]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4937      	ldr	r1, [pc, #220]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	e03a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b34:	4b34      	ldr	r3, [pc, #208]	@ (8003c08 <HAL_RCC_OscConfig+0x244>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7ff f885 	bl	8002c48 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b42:	f7ff f881 	bl	8002c48 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1a8      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	4b28      	ldr	r3, [pc, #160]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4925      	ldr	r1, [pc, #148]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
 8003b74:	e015      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b76:	4b24      	ldr	r3, [pc, #144]	@ (8003c08 <HAL_RCC_OscConfig+0x244>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7ff f864 	bl	8002c48 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b84:	f7ff f860 	bl	8002c48 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e187      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d036      	beq.n	8003c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb6:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <HAL_RCC_OscConfig+0x248>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7ff f844 	bl	8002c48 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc4:	f7ff f840 	bl	8002c48 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e167      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x200>
 8003be2:	e01b      	b.n	8003c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be4:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <HAL_RCC_OscConfig+0x248>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7ff f82d 	bl	8002c48 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	e00e      	b.n	8003c10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7ff f829 	bl	8002c48 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d907      	bls.n	8003c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e150      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
 8003c04:	40023800 	.word	0x40023800
 8003c08:	42470000 	.word	0x42470000
 8003c0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ea      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8097 	beq.w	8003d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2e:	4b81      	ldr	r3, [pc, #516]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	4a7c      	ldr	r2, [pc, #496]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b77      	ldr	r3, [pc, #476]	@ (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c66:	4b74      	ldr	r3, [pc, #464]	@ (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a73      	ldr	r2, [pc, #460]	@ (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c72:	f7fe ffe9 	bl	8002c48 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fe ffe5 	bl	8002c48 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e10c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e38 <HAL_RCC_OscConfig+0x474>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x2ea>
 8003ca0:	4b64      	ldr	r3, [pc, #400]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca4:	4a63      	ldr	r2, [pc, #396]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x324>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x30c>
 8003cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	4a5e      	ldr	r2, [pc, #376]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0x324>
 8003cd0:	4b58      	ldr	r3, [pc, #352]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd4:	4a57      	ldr	r2, [pc, #348]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cdc:	4b55      	ldr	r3, [pc, #340]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce0:	4a54      	ldr	r2, [pc, #336]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 0304 	bic.w	r3, r3, #4
 8003ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fe ffaa 	bl	8002c48 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fe ffa6 	bl	8002c48 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0cb      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0e:	4b49      	ldr	r3, [pc, #292]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ee      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x334>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1c:	f7fe ff94 	bl	8002c48 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe ff90 	bl	8002c48 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0b5      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ee      	bne.n	8003d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4c:	4b39      	ldr	r3, [pc, #228]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	4a38      	ldr	r2, [pc, #224]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a1 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d62:	4b34      	ldr	r3, [pc, #208]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d05c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d141      	bne.n	8003dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d76:	4b31      	ldr	r3, [pc, #196]	@ (8003e3c <HAL_RCC_OscConfig+0x478>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fe ff64 	bl	8002c48 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fe ff60 	bl	8002c48 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e087      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	491b      	ldr	r1, [pc, #108]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <HAL_RCC_OscConfig+0x478>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7fe ff39 	bl	8002c48 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dda:	f7fe ff35 	bl	8002c48 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e05c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x416>
 8003df8:	e054      	b.n	8003ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <HAL_RCC_OscConfig+0x478>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe ff22 	bl	8002c48 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe ff1e 	bl	8002c48 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e045      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x444>
 8003e26:	e03d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e038      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_RCC_OscConfig+0x4ec>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d121      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d11a      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d111      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0cc      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b68      	ldr	r3, [pc, #416]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d90c      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b65      	ldr	r3, [pc, #404]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b63      	ldr	r3, [pc, #396]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0b8      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f08:	4b59      	ldr	r3, [pc, #356]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f20:	4b53      	ldr	r3, [pc, #332]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a52      	ldr	r2, [pc, #328]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b50      	ldr	r3, [pc, #320]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	494d      	ldr	r1, [pc, #308]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d044      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d119      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	4b3f      	ldr	r3, [pc, #252]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e06f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e067      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4934      	ldr	r1, [pc, #208]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa4:	f7fe fe50 	bl	8002c48 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fe fe4c 	bl	8002c48 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 020c 	and.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1eb      	bne.n	8003fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d20c      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b22      	ldr	r3, [pc, #136]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b20      	ldr	r3, [pc, #128]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e032      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4916      	ldr	r1, [pc, #88]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004026:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	490e      	ldr	r1, [pc, #56]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800403a:	f000 f821 	bl	8004080 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490a      	ldr	r1, [pc, #40]	@ (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	4a09      	ldr	r2, [pc, #36]	@ (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fdb0 	bl	8002bc0 <HAL_InitTick>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023c00 	.word	0x40023c00
 8004070:	40023800 	.word	0x40023800
 8004074:	080175cc 	.word	0x080175cc
 8004078:	20000048 	.word	0x20000048
 800407c:	2000004c 	.word	0x2000004c

08004080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b094      	sub	sp, #80	@ 0x50
 8004086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004098:	4b79      	ldr	r3, [pc, #484]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d00d      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x40>
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	f200 80e1 	bhi.w	800426c <HAL_RCC_GetSysClockFreq+0x1ec>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x3a>
 80040b2:	e0db      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b73      	ldr	r3, [pc, #460]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b8:	e0db      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ba:	4b73      	ldr	r3, [pc, #460]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x208>)
 80040bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040be:	e0d8      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	2200      	movs	r2, #0
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ea:	2300      	movs	r3, #0
 80040ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	0159      	lsls	r1, r3, #5
 8004100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004104:	0150      	lsls	r0, r2, #5
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4621      	mov	r1, r4
 800410c:	1a51      	subs	r1, r2, r1
 800410e:	6139      	str	r1, [r7, #16]
 8004110:	4629      	mov	r1, r5
 8004112:	eb63 0301 	sbc.w	r3, r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	018b      	lsls	r3, r1, #6
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800412e:	4651      	mov	r1, sl
 8004130:	018a      	lsls	r2, r1, #6
 8004132:	4651      	mov	r1, sl
 8004134:	ebb2 0801 	subs.w	r8, r2, r1
 8004138:	4659      	mov	r1, fp
 800413a:	eb63 0901 	sbc.w	r9, r3, r1
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800414a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004152:	4690      	mov	r8, r2
 8004154:	4699      	mov	r9, r3
 8004156:	4623      	mov	r3, r4
 8004158:	eb18 0303 	adds.w	r3, r8, r3
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	462b      	mov	r3, r5
 8004160:	eb49 0303 	adc.w	r3, r9, r3
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004172:	4629      	mov	r1, r5
 8004174:	024b      	lsls	r3, r1, #9
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800417c:	4621      	mov	r1, r4
 800417e:	024a      	lsls	r2, r1, #9
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004186:	2200      	movs	r2, #0
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800418c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004190:	f7fc fc34 	bl	80009fc <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800419c:	e058      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b38      	ldr	r3, [pc, #224]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	2200      	movs	r2, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	4611      	mov	r1, r2
 80041aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	2300      	movs	r3, #0
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041b8:	4642      	mov	r2, r8
 80041ba:	464b      	mov	r3, r9
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	0159      	lsls	r1, r3, #5
 80041c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ca:	0150      	lsls	r0, r2, #5
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4641      	mov	r1, r8
 80041d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041f0:	ebb2 040a 	subs.w	r4, r2, sl
 80041f4:	eb63 050b 	sbc.w	r5, r3, fp
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	464b      	mov	r3, r9
 8004214:	eb45 0303 	adc.w	r3, r5, r3
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004226:	4629      	mov	r1, r5
 8004228:	028b      	lsls	r3, r1, #10
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004230:	4621      	mov	r1, r4
 8004232:	028a      	lsls	r2, r1, #10
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800423a:	2200      	movs	r2, #0
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	61fa      	str	r2, [r7, #28]
 8004240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004244:	f7fc fbda 	bl	80009fc <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4613      	mov	r3, r2
 800424e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004260:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800426a:	e002      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x204>)
 800426e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004274:	4618      	mov	r0, r3
 8004276:	3750      	adds	r7, #80	@ 0x50
 8004278:	46bd      	mov	sp, r7
 800427a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000048 	.word	0x20000048

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a8:	f7ff fff0 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	080175dc 	.word	0x080175dc

080042cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d0:	f7ff ffdc 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0b5b      	lsrs	r3, r3, #13
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	@ (80042f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	080175dc 	.word	0x080175dc

080042f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e041      	b.n	800438a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fe f880 	bl	8002420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f000 fd70 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d001      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e044      	b.n	8004436 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004444 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x6c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d6:	d013      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x6c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <HAL_TIM_Base_Start_IT+0xb4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x6c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <HAL_TIM_Base_Start_IT+0xb8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x6c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <HAL_TIM_Base_Start_IT+0xbc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x6c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a16      	ldr	r2, [pc, #88]	@ (8004454 <HAL_TIM_Base_Start_IT+0xc0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b06      	cmp	r3, #6
 8004410:	d010      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	e007      	b.n	8004434 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000

08004458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e041      	b.n	80044ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f839 	bl	80044f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 fcbe 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_TIM_PWM_Start+0x24>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e022      	b.n	8004576 <HAL_TIM_PWM_Start+0x6a>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d109      	bne.n	800454a <HAL_TIM_PWM_Start+0x3e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	e015      	b.n	8004576 <HAL_TIM_PWM_Start+0x6a>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d109      	bne.n	8004564 <HAL_TIM_PWM_Start+0x58>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e008      	b.n	8004576 <HAL_TIM_PWM_Start+0x6a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e068      	b.n	8004650 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0x82>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800458c:	e013      	b.n	80045b6 <HAL_TIM_PWM_Start+0xaa>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start+0x92>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_PWM_Start+0xaa>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0xa2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045ac:	e003      	b.n	80045b6 <HAL_TIM_PWM_Start+0xaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fedc 	bl	800537c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a23      	ldr	r2, [pc, #140]	@ (8004658 <HAL_TIM_PWM_Start+0x14c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d107      	bne.n	80045de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <HAL_TIM_PWM_Start+0x14c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <HAL_TIM_PWM_Start+0x10e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f0:	d013      	beq.n	800461a <HAL_TIM_PWM_Start+0x10e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_TIM_PWM_Start+0x150>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIM_PWM_Start+0x10e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a17      	ldr	r2, [pc, #92]	@ (8004660 <HAL_TIM_PWM_Start+0x154>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_TIM_PWM_Start+0x10e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a16      	ldr	r2, [pc, #88]	@ (8004664 <HAL_TIM_PWM_Start+0x158>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIM_PWM_Start+0x10e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a14      	ldr	r2, [pc, #80]	@ (8004668 <HAL_TIM_PWM_Start+0x15c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d111      	bne.n	800463e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b06      	cmp	r3, #6
 800462a:	d010      	beq.n	800464e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463c:	e007      	b.n	800464e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000

0800466c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e097      	b.n	80047b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7fd ff01 	bl	800249c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b0:	f023 0307 	bic.w	r3, r3, #7
 80046b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 fba9 	bl	8004e18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	4313      	orrs	r3, r2
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800470c:	f023 030c 	bic.w	r3, r3, #12
 8004710:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004718:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	4313      	orrs	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	011a      	lsls	r2, r3, #4
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	031b      	lsls	r3, r3, #12
 800473c:	4313      	orrs	r3, r2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	4313      	orrs	r3, r2
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d110      	bne.n	800480a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047ee:	7b7b      	ldrb	r3, [r7, #13]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e069      	b.n	80048cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004808:	e031      	b.n	800486e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d110      	bne.n	8004832 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004810:	7bbb      	ldrb	r3, [r7, #14]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d102      	bne.n	800481c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004816:	7b3b      	ldrb	r3, [r7, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e055      	b.n	80048cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004830:	e01d      	b.n	800486e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d108      	bne.n	800484a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	7b7b      	ldrb	r3, [r7, #13]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004844:	7b3b      	ldrb	r3, [r7, #12]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d001      	beq.n	800484e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e03e      	b.n	80048cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_TIM_Encoder_Start+0xc4>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d008      	beq.n	800488c <HAL_TIM_Encoder_Start+0xd4>
 800487a:	e00f      	b.n	800489c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fd79 	bl	800537c <TIM_CCxChannelCmd>
      break;
 800488a:	e016      	b.n	80048ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2201      	movs	r2, #1
 8004892:	2104      	movs	r1, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fd71 	bl	800537c <TIM_CCxChannelCmd>
      break;
 800489a:	e00e      	b.n	80048ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2201      	movs	r2, #1
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fd69 	bl	800537c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	2104      	movs	r1, #4
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fd62 	bl	800537c <TIM_CCxChannelCmd>
      break;
 80048b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d020      	beq.n	8004938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01b      	beq.n	8004938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0202 	mvn.w	r2, #2
 8004908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa5b 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa4d 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa5e 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d020      	beq.n	8004984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0204 	mvn.w	r2, #4
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa35 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa27 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa38 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa0f 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa01 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa12 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0210 	mvn.w	r2, #16
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2208      	movs	r2, #8
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9e9 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9db 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f9ec 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0201 	mvn.w	r2, #1
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc ff8e 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fd7c 	bl	800555c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9bd 	bl	8004e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00c      	beq.n	8004aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0220 	mvn.w	r2, #32
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fd4e 	bl	8005548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0ae      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	f200 809f 	bhi.w	8004c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004c21 	.word	0x08004c21
 8004af0:	08004c21 	.word	0x08004c21
 8004af4:	08004c21 	.word	0x08004c21
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004c21 	.word	0x08004c21
 8004b00:	08004c21 	.word	0x08004c21
 8004b04:	08004c21 	.word	0x08004c21
 8004b08:	08004b9f 	.word	0x08004b9f
 8004b0c:	08004c21 	.word	0x08004c21
 8004b10:	08004c21 	.word	0x08004c21
 8004b14:	08004c21 	.word	0x08004c21
 8004b18:	08004bdf 	.word	0x08004bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa04 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e064      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa4a 	bl	8004ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e043      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fa95 	bl	80050d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e023      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fadf 	bl	80051a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_ConfigClockSource+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0b4      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x186>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8c:	d03e      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xd4>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c92:	f200 8087 	bhi.w	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_TIM_ConfigClockSource+0x172>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	d87f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d01a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0xa6>
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d87b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d050      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d877      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d03c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xfa>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d873      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d058      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d86f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d064      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d86b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d060      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d867      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d05a      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	e062      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cee:	f000 fb25 	bl	800533c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 fb0e 	bl	800533c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d2e:	609a      	str	r2, [r3, #8]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fa82 	bl	8005248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2150      	movs	r1, #80	@ 0x50
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fadb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e02c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 faa1 	bl	80052a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2160      	movs	r1, #96	@ 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 facb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d70:	e01c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fa62 	bl	8005248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2140      	movs	r1, #64	@ 0x40
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fabb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fab2 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004da2:	e003      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004f14 <TIM_Base_SetConfig+0xfc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e36:	d00b      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a37      	ldr	r2, [pc, #220]	@ (8004f18 <TIM_Base_SetConfig+0x100>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a36      	ldr	r2, [pc, #216]	@ (8004f1c <TIM_Base_SetConfig+0x104>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a35      	ldr	r2, [pc, #212]	@ (8004f20 <TIM_Base_SetConfig+0x108>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d108      	bne.n	8004e62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	@ (8004f14 <TIM_Base_SetConfig+0xfc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e70:	d017      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a28      	ldr	r2, [pc, #160]	@ (8004f18 <TIM_Base_SetConfig+0x100>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	@ (8004f1c <TIM_Base_SetConfig+0x104>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a26      	ldr	r2, [pc, #152]	@ (8004f20 <TIM_Base_SetConfig+0x108>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	@ (8004f24 <TIM_Base_SetConfig+0x10c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a24      	ldr	r2, [pc, #144]	@ (8004f28 <TIM_Base_SetConfig+0x110>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	@ (8004f2c <TIM_Base_SetConfig+0x114>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <TIM_Base_SetConfig+0xfc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	611a      	str	r2, [r3, #16]
  }
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0201 	bic.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0302 	bic.w	r3, r3, #2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	@ (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d111      	bne.n	8004fd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40010000 	.word	0x40010000

08004ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f023 0210 	bic.w	r2, r3, #16
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0320 	bic.w	r3, r3, #32
 8005046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a1e      	ldr	r2, [pc, #120]	@ (80050d0 <TIM_OC2_SetConfig+0xd4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <TIM_OC2_SetConfig+0xd4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d113      	bne.n	80050a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000

080050d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <TIM_OC3_SetConfig+0xd0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10d      	bne.n	800514e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a14      	ldr	r2, [pc, #80]	@ (80051a4 <TIM_OC3_SetConfig+0xd0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d113      	bne.n	800517e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40010000 	.word	0x40010000

080051a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a10      	ldr	r2, [pc, #64]	@ (8005244 <TIM_OC4_SetConfig+0x9c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d109      	bne.n	800521c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800520e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000

08005248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 030a 	bic.w	r3, r3, #10
 8005284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f023 0210 	bic.w	r2, r3, #16
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	f043 0307 	orr.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	021a      	lsls	r2, r3, #8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	431a      	orrs	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2201      	movs	r2, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1a      	ldr	r2, [r3, #32]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053dc:	2302      	movs	r3, #2
 80053de:	e050      	b.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1c      	ldr	r2, [pc, #112]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d013      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a18      	ldr	r2, [pc, #96]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a16      	ldr	r2, [pc, #88]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a15      	ldr	r2, [pc, #84]	@ (800549c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10c      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800545c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4313      	orrs	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40014000 	.word	0x40014000

080054a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054bc:	2302      	movs	r3, #2
 80054be:	e03d      	b.n	800553c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e042      	b.n	8005608 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fd f838 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	@ 0x24
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 ffc9 	bl	800654c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08c      	sub	sp, #48	@ 0x30
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b20      	cmp	r3, #32
 8005628:	d156      	bne.n	80056d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_UART_Transmit_DMA+0x26>
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e04f      	b.n	80056da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2221      	movs	r2, #33	@ 0x21
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	4a21      	ldr	r2, [pc, #132]	@ (80056e4 <HAL_UART_Transmit_DMA+0xd4>)
 8005660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005666:	4a20      	ldr	r2, [pc, #128]	@ (80056e8 <HAL_UART_Transmit_DMA+0xd8>)
 8005668:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566e:	4a1f      	ldr	r2, [pc, #124]	@ (80056ec <HAL_UART_Transmit_DMA+0xdc>)
 8005670:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005676:	2200      	movs	r2, #0
 8005678:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005686:	6819      	ldr	r1, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3304      	adds	r3, #4
 800568e:	461a      	mov	r2, r3
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	f7fd fca5 	bl	8002fe0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800569e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3314      	adds	r3, #20
 80056a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	617b      	str	r3, [r7, #20]
   return(result);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80056c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6a39      	ldr	r1, [r7, #32]
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3730      	adds	r7, #48	@ 0x30
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	08005dd9 	.word	0x08005dd9
 80056e8:	08005e73 	.word	0x08005e73
 80056ec:	08005ff7 	.word	0x08005ff7

080056f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b20      	cmp	r3, #32
 8005708:	d112      	bne.n	8005730 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Receive_DMA+0x26>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e00b      	b.n	8005732 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	461a      	mov	r2, r3
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fcb0 	bl	800608c <UART_Start_Receive_DMA>
 800572c:	4603      	mov	r3, r0
 800572e:	e000      	b.n	8005732 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b090      	sub	sp, #64	@ 0x40
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005750:	2b80      	cmp	r3, #128	@ 0x80
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b21      	cmp	r3, #33	@ 0x21
 8005766:	d128      	bne.n	80057ba <HAL_UART_DMAStop+0x80>
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d025      	beq.n	80057ba <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005784:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800578e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005790:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e5      	bne.n	800576e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fd fc6e 	bl	8003090 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fd03 	bl	80061c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b22      	cmp	r3, #34	@ 0x22
 80057da:	d128      	bne.n	800582e <HAL_UART_DMAStop+0xf4>
 80057dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d025      	beq.n	800582e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3314      	adds	r3, #20
 8005800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005802:	61fa      	str	r2, [r7, #28]
 8005804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	617b      	str	r3, [r7, #20]
   return(result);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e5      	bne.n	80057e2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fd fc34 	bl	8003090 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fcf1 	bl	8006210 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3740      	adds	r7, #64	@ 0x40
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b0ba      	sub	sp, #232	@ 0xe8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005864:	2300      	movs	r3, #0
 8005866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_UART_IRQHandler+0x66>
 800588a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fd99 	bl	80063ce <UART_Receive_IT>
      return;
 800589c:	e25b      	b.n	8005d56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800589e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80de 	beq.w	8005a64 <HAL_UART_IRQHandler+0x22c>
 80058a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80d1 	beq.w	8005a64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <HAL_UART_IRQHandler+0xae>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058de:	f043 0201 	orr.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <HAL_UART_IRQHandler+0xd2>
 80058f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005902:	f043 0202 	orr.w	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00b      	beq.n	800592e <HAL_UART_IRQHandler+0xf6>
 8005916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005926:	f043 0204 	orr.w	r2, r3, #4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d011      	beq.n	800595e <HAL_UART_IRQHandler+0x126>
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005956:	f043 0208 	orr.w	r2, r3, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 81f2 	beq.w	8005d4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_UART_IRQHandler+0x14e>
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fd24 	bl	80063ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <HAL_UART_IRQHandler+0x17a>
 80059aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d04f      	beq.n	8005a52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fc2c 	bl	8006210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d141      	bne.n	8005a4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3314      	adds	r3, #20
 80059cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1d9      	bne.n	80059c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d013      	beq.n	8005a42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c18 <HAL_UART_IRQHandler+0x3e0>)
 8005a20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd fba2 	bl	8003170 <HAL_DMA_Abort_IT>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e00e      	b.n	8005a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9b2 	bl	8005dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e00a      	b.n	8005a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9ae 	bl	8005dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	e006      	b.n	8005a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9aa 	bl	8005dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a5e:	e175      	b.n	8005d4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	bf00      	nop
    return;
 8005a62:	e173      	b.n	8005d4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f040 814f 	bne.w	8005d0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8148 	beq.w	8005d0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8141 	beq.w	8005d0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	f040 80b6 	bne.w	8005c1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8145 	beq.w	8005d50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	f080 813e 	bcs.w	8005d50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ada:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae6:	f000 8088 	beq.w	8005bfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1d9      	bne.n	8005aea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3314      	adds	r3, #20
 8005b3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e1      	bne.n	8005b36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e3      	bne.n	8005b72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005bdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005be2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e3      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fd fa4b 	bl	8003090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f8d5 	bl	8005dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c16:	e09b      	b.n	8005d50 <HAL_UART_IRQHandler+0x518>
 8005c18:	080062d7 	.word	0x080062d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 808e 	beq.w	8005d54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8089 	beq.w	8005d54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e3      	bne.n	8005c42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e3      	bne.n	8005c7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ce4:	61fa      	str	r2, [r7, #28]
 8005ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	69b9      	ldr	r1, [r7, #24]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e3      	bne.n	8005cc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f85b 	bl	8005dc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d0a:	e023      	b.n	8005d54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_UART_IRQHandler+0x4f4>
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 faea 	bl	80062fe <UART_Transmit_IT>
    return;
 8005d2a:	e014      	b.n	8005d56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <HAL_UART_IRQHandler+0x51e>
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb2a 	bl	800639e <UART_EndTransmit_IT>
    return;
 8005d4a:	e004      	b.n	8005d56 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d4c:	bf00      	nop
 8005d4e:	e002      	b.n	8005d56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d54:	bf00      	nop
  }
}
 8005d56:	37e8      	adds	r7, #232	@ 0xe8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b090      	sub	sp, #64	@ 0x40
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d137      	bne.n	8005e64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df6:	2200      	movs	r2, #0
 8005df8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e4e:	61fa      	str	r2, [r7, #28]
 8005e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e62:	e002      	b.n	8005e6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e66:	f7ff ff79 	bl	8005d5c <HAL_UART_TxCpltCallback>
}
 8005e6a:	bf00      	nop
 8005e6c:	3740      	adds	r7, #64	@ 0x40
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ff75 	bl	8005d70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b09c      	sub	sp, #112	@ 0x70
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d172      	bne.n	8005f90 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eac:	2200      	movs	r2, #0
 8005eae:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ed0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ed2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ed6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f04:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f06:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e5      	bne.n	8005ee4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	623b      	str	r3, [r7, #32]
   return(result);
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3314      	adds	r3, #20
 8005f36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f38:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e5      	bne.n	8005f18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d119      	bne.n	8005f90 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0310 	bic.w	r3, r3, #16
 8005f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f7c:	61fa      	str	r2, [r7, #28]
 8005f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	69b9      	ldr	r1, [r7, #24]
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e5      	bne.n	8005f5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f92:	2200      	movs	r2, #0
 8005f94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d106      	bne.n	8005fac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fa6:	f7ff ff0b 	bl	8005dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005faa:	e002      	b.n	8005fb2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005fac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fae:	f7ff fee9 	bl	8005d84 <HAL_UART_RxCpltCallback>
}
 8005fb2:	bf00      	nop
 8005fb4:	3770      	adds	r7, #112	@ 0x70
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d108      	bne.n	8005fe8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff feed 	bl	8005dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fe6:	e002      	b.n	8005fee <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fed5 	bl	8005d98 <HAL_UART_RxHalfCpltCallback>
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006006:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006012:	2b80      	cmp	r3, #128	@ 0x80
 8006014:	bf0c      	ite	eq
 8006016:	2301      	moveq	r3, #1
 8006018:	2300      	movne	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b21      	cmp	r3, #33	@ 0x21
 8006028:	d108      	bne.n	800603c <UART_DMAError+0x46>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006036:	68b8      	ldr	r0, [r7, #8]
 8006038:	f000 f8c2 	bl	80061c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b22      	cmp	r3, #34	@ 0x22
 800605c:	d108      	bne.n	8006070 <UART_DMAError+0x7a>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f000 f8d0 	bl	8006210 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006074:	f043 0210 	orr.w	r2, r3, #16
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607c:	68b8      	ldr	r0, [r7, #8]
 800607e:	f7ff fe95 	bl	8005dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b098      	sub	sp, #96	@ 0x60
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2222      	movs	r2, #34	@ 0x22
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b8:	4a3e      	ldr	r2, [pc, #248]	@ (80061b4 <UART_Start_Receive_DMA+0x128>)
 80060ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c0:	4a3d      	ldr	r2, [pc, #244]	@ (80061b8 <UART_Start_Receive_DMA+0x12c>)
 80060c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c8:	4a3c      	ldr	r2, [pc, #240]	@ (80061bc <UART_Start_Receive_DMA+0x130>)
 80060ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	2200      	movs	r2, #0
 80060d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060d4:	f107 0308 	add.w	r3, r7, #8
 80060d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	f7fc ff78 	bl	8002fe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d019      	beq.n	8006142 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800611e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006124:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800612e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006130:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800613c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	657b      	str	r3, [r7, #84]	@ 0x54
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006162:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e5      	bne.n	8006142 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	617b      	str	r3, [r7, #20]
   return(result);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800618c:	653b      	str	r3, [r7, #80]	@ 0x50
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006196:	627a      	str	r2, [r7, #36]	@ 0x24
 8006198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6a39      	ldr	r1, [r7, #32]
 800619c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3760      	adds	r7, #96	@ 0x60
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	08005e8f 	.word	0x08005e8f
 80061b8:	08005fbb 	.word	0x08005fbb
 80061bc:	08005ff7 	.word	0x08005ff7

080061c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b089      	sub	sp, #36	@ 0x24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	61ba      	str	r2, [r7, #24]
 80061ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6979      	ldr	r1, [r7, #20]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	613b      	str	r3, [r7, #16]
   return(result);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e5      	bne.n	80061c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006204:	bf00      	nop
 8006206:	3724      	adds	r7, #36	@ 0x24
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006210:	b480      	push	{r7}
 8006212:	b095      	sub	sp, #84	@ 0x54
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800622e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006238:	643a      	str	r2, [r7, #64]	@ 0x40
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800623e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	61fb      	str	r3, [r7, #28]
   return(result);
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800626c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006284:	2b01      	cmp	r3, #1
 8006286:	d119      	bne.n	80062bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	60bb      	str	r3, [r7, #8]
   return(result);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f023 0310 	bic.w	r3, r3, #16
 800629e:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062a8:	61ba      	str	r2, [r7, #24]
 80062aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6979      	ldr	r1, [r7, #20]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	613b      	str	r3, [r7, #16]
   return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062ca:	bf00      	nop
 80062cc:	3754      	adds	r7, #84	@ 0x54
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff fd5b 	bl	8005dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b21      	cmp	r3, #33	@ 0x21
 8006310:	d13e      	bne.n	8006390 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631a:	d114      	bne.n	8006346 <UART_Transmit_IT+0x48>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d110      	bne.n	8006346 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006338:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	1c9a      	adds	r2, r3, #2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	621a      	str	r2, [r3, #32]
 8006344:	e008      	b.n	8006358 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6211      	str	r1, [r2, #32]
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29b      	uxth	r3, r3
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4619      	mov	r1, r3
 8006366:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10f      	bne.n	800638c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800637a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006390:	2302      	movs	r3, #2
  }
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fccc 	bl	8005d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b08c      	sub	sp, #48	@ 0x30
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b22      	cmp	r3, #34	@ 0x22
 80063e0:	f040 80ae 	bne.w	8006540 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ec:	d117      	bne.n	800641e <UART_Receive_IT+0x50>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d113      	bne.n	800641e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640c:	b29a      	uxth	r2, r3
 800640e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006410:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	1c9a      	adds	r2, r3, #2
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	@ 0x28
 800641c:	e026      	b.n	800646c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006422:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006430:	d007      	beq.n	8006442 <UART_Receive_IT+0x74>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <UART_Receive_IT+0x82>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e008      	b.n	8006462 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006460:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4619      	mov	r1, r3
 800647a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800647c:	2b00      	cmp	r3, #0
 800647e:	d15d      	bne.n	800653c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0220 	bic.w	r2, r2, #32
 800648e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800649e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695a      	ldr	r2, [r3, #20]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d135      	bne.n	8006532 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	613b      	str	r3, [r7, #16]
   return(result);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f023 0310 	bic.w	r3, r3, #16
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ec:	623a      	str	r2, [r7, #32]
 80064ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	69f9      	ldr	r1, [r7, #28]
 80064f2:	6a3a      	ldr	r2, [r7, #32]
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b10      	cmp	r3, #16
 800650c:	d10a      	bne.n	8006524 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fc48 	bl	8005dc0 <HAL_UARTEx_RxEventCallback>
 8006530:	e002      	b.n	8006538 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fc26 	bl	8005d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e002      	b.n	8006542 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e000      	b.n	8006542 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	3730      	adds	r7, #48	@ 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800654c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006550:	b0c0      	sub	sp, #256	@ 0x100
 8006552:	af00      	add	r7, sp, #0
 8006554:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	68d9      	ldr	r1, [r3, #12]
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	ea40 0301 	orr.w	r3, r0, r1
 8006574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	431a      	orrs	r2, r3
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	431a      	orrs	r2, r3
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065a4:	f021 010c 	bic.w	r1, r1, #12
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065b2:	430b      	orrs	r3, r1
 80065b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	6999      	ldr	r1, [r3, #24]
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	ea40 0301 	orr.w	r3, r0, r1
 80065d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b8f      	ldr	r3, [pc, #572]	@ (8006818 <UART_SetConfig+0x2cc>)
 80065dc:	429a      	cmp	r2, r3
 80065de:	d005      	beq.n	80065ec <UART_SetConfig+0xa0>
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b8d      	ldr	r3, [pc, #564]	@ (800681c <UART_SetConfig+0x2d0>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d104      	bne.n	80065f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065ec:	f7fd fe6e 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 80065f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065f4:	e003      	b.n	80065fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065f6:	f7fd fe55 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 80065fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006608:	f040 810c 	bne.w	8006824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800660c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006610:	2200      	movs	r2, #0
 8006612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006616:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800661a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	1891      	adds	r1, r2, r2
 8006624:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006626:	415b      	adcs	r3, r3
 8006628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800662a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800662e:	4621      	mov	r1, r4
 8006630:	eb12 0801 	adds.w	r8, r2, r1
 8006634:	4629      	mov	r1, r5
 8006636:	eb43 0901 	adc.w	r9, r3, r1
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800664a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800664e:	4690      	mov	r8, r2
 8006650:	4699      	mov	r9, r3
 8006652:	4623      	mov	r3, r4
 8006654:	eb18 0303 	adds.w	r3, r8, r3
 8006658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800665c:	462b      	mov	r3, r5
 800665e:	eb49 0303 	adc.w	r3, r9, r3
 8006662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006672:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800667a:	460b      	mov	r3, r1
 800667c:	18db      	adds	r3, r3, r3
 800667e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006680:	4613      	mov	r3, r2
 8006682:	eb42 0303 	adc.w	r3, r2, r3
 8006686:	657b      	str	r3, [r7, #84]	@ 0x54
 8006688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800668c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006690:	f7fa f9b4 	bl	80009fc <__aeabi_uldivmod>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4b61      	ldr	r3, [pc, #388]	@ (8006820 <UART_SetConfig+0x2d4>)
 800669a:	fba3 2302 	umull	r2, r3, r3, r2
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	011c      	lsls	r4, r3, #4
 80066a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	1891      	adds	r1, r2, r2
 80066ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066bc:	415b      	adcs	r3, r3
 80066be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066c4:	4641      	mov	r1, r8
 80066c6:	eb12 0a01 	adds.w	sl, r2, r1
 80066ca:	4649      	mov	r1, r9
 80066cc:	eb43 0b01 	adc.w	fp, r3, r1
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e4:	4692      	mov	sl, r2
 80066e6:	469b      	mov	fp, r3
 80066e8:	4643      	mov	r3, r8
 80066ea:	eb1a 0303 	adds.w	r3, sl, r3
 80066ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066f2:	464b      	mov	r3, r9
 80066f4:	eb4b 0303 	adc.w	r3, fp, r3
 80066f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006708:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800670c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006710:	460b      	mov	r3, r1
 8006712:	18db      	adds	r3, r3, r3
 8006714:	643b      	str	r3, [r7, #64]	@ 0x40
 8006716:	4613      	mov	r3, r2
 8006718:	eb42 0303 	adc.w	r3, r2, r3
 800671c:	647b      	str	r3, [r7, #68]	@ 0x44
 800671e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006726:	f7fa f969 	bl	80009fc <__aeabi_uldivmod>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4611      	mov	r1, r2
 8006730:	4b3b      	ldr	r3, [pc, #236]	@ (8006820 <UART_SetConfig+0x2d4>)
 8006732:	fba3 2301 	umull	r2, r3, r3, r1
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2264      	movs	r2, #100	@ 0x64
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	1acb      	subs	r3, r1, r3
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006746:	4b36      	ldr	r3, [pc, #216]	@ (8006820 <UART_SetConfig+0x2d4>)
 8006748:	fba3 2302 	umull	r2, r3, r3, r2
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006754:	441c      	add	r4, r3
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006760:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	1891      	adds	r1, r2, r2
 800676e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006770:	415b      	adcs	r3, r3
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006778:	4641      	mov	r1, r8
 800677a:	1851      	adds	r1, r2, r1
 800677c:	6339      	str	r1, [r7, #48]	@ 0x30
 800677e:	4649      	mov	r1, r9
 8006780:	414b      	adcs	r3, r1
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006790:	4659      	mov	r1, fp
 8006792:	00cb      	lsls	r3, r1, #3
 8006794:	4651      	mov	r1, sl
 8006796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800679a:	4651      	mov	r1, sl
 800679c:	00ca      	lsls	r2, r1, #3
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	4642      	mov	r2, r8
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067ac:	464b      	mov	r3, r9
 80067ae:	460a      	mov	r2, r1
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067cc:	460b      	mov	r3, r1
 80067ce:	18db      	adds	r3, r3, r3
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d2:	4613      	mov	r3, r2
 80067d4:	eb42 0303 	adc.w	r3, r2, r3
 80067d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067e2:	f7fa f90b 	bl	80009fc <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006820 <UART_SetConfig+0x2d4>)
 80067ec:	fba3 1302 	umull	r1, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	2164      	movs	r1, #100	@ 0x64
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	3332      	adds	r3, #50	@ 0x32
 80067fe:	4a08      	ldr	r2, [pc, #32]	@ (8006820 <UART_SetConfig+0x2d4>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f003 0207 	and.w	r2, r3, #7
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4422      	add	r2, r4
 8006812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006814:	e106      	b.n	8006a24 <UART_SetConfig+0x4d8>
 8006816:	bf00      	nop
 8006818:	40011000 	.word	0x40011000
 800681c:	40011400 	.word	0x40011400
 8006820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006828:	2200      	movs	r2, #0
 800682a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800682e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	1891      	adds	r1, r2, r2
 800683c:	6239      	str	r1, [r7, #32]
 800683e:	415b      	adcs	r3, r3
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
 8006842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006846:	4641      	mov	r1, r8
 8006848:	1854      	adds	r4, r2, r1
 800684a:	4649      	mov	r1, r9
 800684c:	eb43 0501 	adc.w	r5, r3, r1
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	00eb      	lsls	r3, r5, #3
 800685a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800685e:	00e2      	lsls	r2, r4, #3
 8006860:	4614      	mov	r4, r2
 8006862:	461d      	mov	r5, r3
 8006864:	4643      	mov	r3, r8
 8006866:	18e3      	adds	r3, r4, r3
 8006868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800686c:	464b      	mov	r3, r9
 800686e:	eb45 0303 	adc.w	r3, r5, r3
 8006872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006892:	4629      	mov	r1, r5
 8006894:	008b      	lsls	r3, r1, #2
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800689c:	4621      	mov	r1, r4
 800689e:	008a      	lsls	r2, r1, #2
 80068a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068a4:	f7fa f8aa 	bl	80009fc <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4b60      	ldr	r3, [pc, #384]	@ (8006a30 <UART_SetConfig+0x4e4>)
 80068ae:	fba3 2302 	umull	r2, r3, r3, r2
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	011c      	lsls	r4, r3, #4
 80068b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	1891      	adds	r1, r2, r2
 80068ce:	61b9      	str	r1, [r7, #24]
 80068d0:	415b      	adcs	r3, r3
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d8:	4641      	mov	r1, r8
 80068da:	1851      	adds	r1, r2, r1
 80068dc:	6139      	str	r1, [r7, #16]
 80068de:	4649      	mov	r1, r9
 80068e0:	414b      	adcs	r3, r1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068f0:	4659      	mov	r1, fp
 80068f2:	00cb      	lsls	r3, r1, #3
 80068f4:	4651      	mov	r1, sl
 80068f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068fa:	4651      	mov	r1, sl
 80068fc:	00ca      	lsls	r2, r1, #3
 80068fe:	4610      	mov	r0, r2
 8006900:	4619      	mov	r1, r3
 8006902:	4603      	mov	r3, r0
 8006904:	4642      	mov	r2, r8
 8006906:	189b      	adds	r3, r3, r2
 8006908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800690c:	464b      	mov	r3, r9
 800690e:	460a      	mov	r2, r1
 8006910:	eb42 0303 	adc.w	r3, r2, r3
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006922:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006930:	4649      	mov	r1, r9
 8006932:	008b      	lsls	r3, r1, #2
 8006934:	4641      	mov	r1, r8
 8006936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800693a:	4641      	mov	r1, r8
 800693c:	008a      	lsls	r2, r1, #2
 800693e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006942:	f7fa f85b 	bl	80009fc <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4611      	mov	r1, r2
 800694c:	4b38      	ldr	r3, [pc, #224]	@ (8006a30 <UART_SetConfig+0x4e4>)
 800694e:	fba3 2301 	umull	r2, r3, r3, r1
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2264      	movs	r2, #100	@ 0x64
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	1acb      	subs	r3, r1, r3
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	3332      	adds	r3, #50	@ 0x32
 8006960:	4a33      	ldr	r2, [pc, #204]	@ (8006a30 <UART_SetConfig+0x4e4>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800696c:	441c      	add	r4, r3
 800696e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006972:	2200      	movs	r2, #0
 8006974:	673b      	str	r3, [r7, #112]	@ 0x70
 8006976:	677a      	str	r2, [r7, #116]	@ 0x74
 8006978:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800697c:	4642      	mov	r2, r8
 800697e:	464b      	mov	r3, r9
 8006980:	1891      	adds	r1, r2, r2
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	415b      	adcs	r3, r3
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800698c:	4641      	mov	r1, r8
 800698e:	1851      	adds	r1, r2, r1
 8006990:	6039      	str	r1, [r7, #0]
 8006992:	4649      	mov	r1, r9
 8006994:	414b      	adcs	r3, r1
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069a4:	4659      	mov	r1, fp
 80069a6:	00cb      	lsls	r3, r1, #3
 80069a8:	4651      	mov	r1, sl
 80069aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ae:	4651      	mov	r1, sl
 80069b0:	00ca      	lsls	r2, r1, #3
 80069b2:	4610      	mov	r0, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	4642      	mov	r2, r8
 80069ba:	189b      	adds	r3, r3, r2
 80069bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069be:	464b      	mov	r3, r9
 80069c0:	460a      	mov	r2, r1
 80069c2:	eb42 0303 	adc.w	r3, r2, r3
 80069c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80069d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069e0:	4649      	mov	r1, r9
 80069e2:	008b      	lsls	r3, r1, #2
 80069e4:	4641      	mov	r1, r8
 80069e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ea:	4641      	mov	r1, r8
 80069ec:	008a      	lsls	r2, r1, #2
 80069ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069f2:	f7fa f803 	bl	80009fc <__aeabi_uldivmod>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <UART_SetConfig+0x4e4>)
 80069fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	2164      	movs	r1, #100	@ 0x64
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	3332      	adds	r3, #50	@ 0x32
 8006a0e:	4a08      	ldr	r2, [pc, #32]	@ (8006a30 <UART_SetConfig+0x4e4>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	f003 020f 	and.w	r2, r3, #15
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4422      	add	r2, r4
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a30:	51eb851f 	.word	0x51eb851f

08006a34 <__NVIC_SetPriority>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	6039      	str	r1, [r7, #0]
 8006a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	db0a      	blt.n	8006a5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	490c      	ldr	r1, [pc, #48]	@ (8006a80 <__NVIC_SetPriority+0x4c>)
 8006a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a52:	0112      	lsls	r2, r2, #4
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	440b      	add	r3, r1
 8006a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a5c:	e00a      	b.n	8006a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	4908      	ldr	r1, [pc, #32]	@ (8006a84 <__NVIC_SetPriority+0x50>)
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	3b04      	subs	r3, #4
 8006a6c:	0112      	lsls	r2, r2, #4
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	440b      	add	r3, r1
 8006a72:	761a      	strb	r2, [r3, #24]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	e000e100 	.word	0xe000e100
 8006a84:	e000ed00 	.word	0xe000ed00

08006a88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f06f 0004 	mvn.w	r0, #4
 8006a92:	f7ff ffcf 	bl	8006a34 <__NVIC_SetPriority>
#endif
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa2:	f3ef 8305 	mrs	r3, IPSR
 8006aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8006aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006aae:	f06f 0305 	mvn.w	r3, #5
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	e00c      	b.n	8006ad0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <osKernelInitialize+0x44>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006abe:	4b08      	ldr	r3, [pc, #32]	@ (8006ae0 <osKernelInitialize+0x44>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	e002      	b.n	8006ad0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ad0:	687b      	ldr	r3, [r7, #4]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	200049c4 	.word	0x200049c4

08006ae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aea:	f3ef 8305 	mrs	r3, IPSR
 8006aee:	603b      	str	r3, [r7, #0]
  return(result);
 8006af0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006af6:	f06f 0305 	mvn.w	r3, #5
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	e010      	b.n	8006b20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006afe:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <osKernelStart+0x48>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d109      	bne.n	8006b1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b06:	f7ff ffbf 	bl	8006a88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	@ (8006b2c <osKernelStart+0x48>)
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b10:	f001 f87a 	bl	8007c08 <vTaskStartScheduler>
      stat = osOK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	607b      	str	r3, [r7, #4]
 8006b18:	e002      	b.n	8006b20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b20:	687b      	ldr	r3, [r7, #4]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200049c4 	.word	0x200049c4

08006b30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08e      	sub	sp, #56	@ 0x38
 8006b34:	af04      	add	r7, sp, #16
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b40:	f3ef 8305 	mrs	r3, IPSR
 8006b44:	617b      	str	r3, [r7, #20]
  return(result);
 8006b46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d17e      	bne.n	8006c4a <osThreadNew+0x11a>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d07b      	beq.n	8006c4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b52:	2380      	movs	r3, #128	@ 0x80
 8006b54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b56:	2318      	movs	r3, #24
 8006b58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d045      	beq.n	8006bf6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <osThreadNew+0x48>
        name = attr->name;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <osThreadNew+0x6e>
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b38      	cmp	r3, #56	@ 0x38
 8006b90:	d805      	bhi.n	8006b9e <osThreadNew+0x6e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <osThreadNew+0x72>
        return (NULL);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e054      	b.n	8006c4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00e      	beq.n	8006bd8 <osThreadNew+0xa8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b5b      	cmp	r3, #91	@ 0x5b
 8006bc0:	d90a      	bls.n	8006bd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <osThreadNew+0xa8>
        mem = 1;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	e010      	b.n	8006bfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <osThreadNew+0xca>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <osThreadNew+0xca>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <osThreadNew+0xca>
          mem = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e001      	b.n	8006bfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d110      	bne.n	8006c22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c08:	9202      	str	r2, [sp, #8]
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fe1a 	bl	8007850 <xTaskCreateStatic>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	e013      	b.n	8006c4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d110      	bne.n	8006c4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f107 0310 	add.w	r3, r7, #16
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fe68 	bl	8007910 <xTaskCreate>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <osThreadNew+0x11a>
            hTask = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c4a:	693b      	ldr	r3, [r7, #16]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3728      	adds	r7, #40	@ 0x28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c5c:	f3ef 8305 	mrs	r3, IPSR
 8006c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <osDelay+0x1c>
    stat = osErrorISR;
 8006c68:	f06f 0305 	mvn.w	r3, #5
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e007      	b.n	8006c80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 ff8e 	bl	8007b9c <vTaskDelay>
    }
  }

  return (stat);
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a07      	ldr	r2, [pc, #28]	@ (8006cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a06      	ldr	r2, [pc, #24]	@ (8006cbc <vApplicationGetIdleTaskMemory+0x30>)
 8006ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	@ 0x80
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	200049c8 	.word	0x200049c8
 8006cbc:	20004a24 	.word	0x20004a24

08006cc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a07      	ldr	r2, [pc, #28]	@ (8006cec <vApplicationGetTimerTaskMemory+0x2c>)
 8006cd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a06      	ldr	r2, [pc, #24]	@ (8006cf0 <vApplicationGetTimerTaskMemory+0x30>)
 8006cd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20004c24 	.word	0x20004c24
 8006cf0:	20004c80 	.word	0x20004c80

08006cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0208 	add.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f103 0208 	add.w	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0208 	add.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dac:	d103      	bne.n	8006db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e00c      	b.n	8006dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e002      	b.n	8006dc4 <vListInsert+0x2e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d2f6      	bcs.n	8006dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6892      	ldr	r2, [r2, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6852      	ldr	r2, [r2, #4]
 8006e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d103      	bne.n	8006e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <xQueueGenericReset+0x2c>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60bb      	str	r3, [r7, #8]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e88:	f002 f89e 	bl	8008fc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	22ff      	movs	r2, #255	@ 0xff
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	22ff      	movs	r2, #255	@ 0xff
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d114      	bne.n	8006f08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01a      	beq.n	8006f1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3310      	adds	r3, #16
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 f91a 	bl	8008124 <xTaskRemoveFromEventList>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d012      	beq.n	8006f1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <xQueueGenericReset+0xd0>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	e009      	b.n	8006f1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fef1 	bl	8006cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3324      	adds	r3, #36	@ 0x24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff feec 	bl	8006cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f1c:	f002 f886 	bl	800902c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	@ 0x38
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	e7fd      	b.n	8006f76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <xQueueGenericCreateStatic+0x56>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <xQueueGenericCreateStatic+0x5a>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <xQueueGenericCreateStatic+0x5c>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	623b      	str	r3, [r7, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <xQueueGenericCreateStatic+0x84>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <xQueueGenericCreateStatic+0x88>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <xQueueGenericCreateStatic+0x8a>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	61fb      	str	r3, [r7, #28]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fd6:	2350      	movs	r3, #80	@ 0x50
 8006fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b50      	cmp	r3, #80	@ 0x50
 8006fde:	d00b      	beq.n	8006ff8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	61bb      	str	r3, [r7, #24]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ff8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00d      	beq.n	8007020 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800700c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	4613      	mov	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f805 	bl	800702a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007022:	4618      	mov	r0, r3
 8007024:	3730      	adds	r7, #48	@ 0x30
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e002      	b.n	800704c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007058:	2101      	movs	r1, #1
 800705a:	69b8      	ldr	r0, [r7, #24]
 800705c:	f7ff fefe 	bl	8006e5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08e      	sub	sp, #56	@ 0x38
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800707e:	2300      	movs	r3, #0
 8007080:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <xQueueGenericSend+0x34>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <xQueueGenericSend+0x42>
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <xQueueGenericSend+0x46>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <xQueueGenericSend+0x48>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <xQueueGenericSend+0x64>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d103      	bne.n	80070e2 <xQueueGenericSend+0x72>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <xQueueGenericSend+0x76>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <xQueueGenericSend+0x78>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <xQueueGenericSend+0x94>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007104:	f001 f9f6 	bl	80084f4 <xTaskGetSchedulerState>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <xQueueGenericSend+0xa4>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <xQueueGenericSend+0xa8>
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <xQueueGenericSend+0xaa>
 8007118:	2300      	movs	r3, #0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <xQueueGenericSend+0xc6>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	61fb      	str	r3, [r7, #28]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007136:	f001 ff47 	bl	8008fc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007142:	429a      	cmp	r2, r3
 8007144:	d302      	bcc.n	800714c <xQueueGenericSend+0xdc>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d129      	bne.n	80071a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007152:	f000 fa0f 	bl	8007574 <prvCopyDataToQueue>
 8007156:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	3324      	adds	r3, #36	@ 0x24
 8007164:	4618      	mov	r0, r3
 8007166:	f000 ffdd 	bl	8008124 <xTaskRemoveFromEventList>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d013      	beq.n	8007198 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007170:	4b3f      	ldr	r3, [pc, #252]	@ (8007270 <xQueueGenericSend+0x200>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	e00a      	b.n	8007198 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d007      	beq.n	8007198 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007188:	4b39      	ldr	r3, [pc, #228]	@ (8007270 <xQueueGenericSend+0x200>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007198:	f001 ff48 	bl	800902c <vPortExitCritical>
				return pdPASS;
 800719c:	2301      	movs	r3, #1
 800719e:	e063      	b.n	8007268 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071a6:	f001 ff41 	bl	800902c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e05c      	b.n	8007268 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 f83f 	bl	800823c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071c2:	f001 ff33 	bl	800902c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071c6:	f000 fd87 	bl	8007cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071ca:	f001 fefd 	bl	8008fc8 <vPortEnterCritical>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071da:	d103      	bne.n	80071e4 <xQueueGenericSend+0x174>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ea:	b25b      	sxtb	r3, r3
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f0:	d103      	bne.n	80071fa <xQueueGenericSend+0x18a>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071fa:	f001 ff17 	bl	800902c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071fe:	1d3a      	adds	r2, r7, #4
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f82e 	bl	8008268 <xTaskCheckForTimeOut>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d124      	bne.n	800725c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007214:	f000 faa6 	bl	8007764 <prvIsQueueFull>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d018      	beq.n	8007250 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	3310      	adds	r3, #16
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f000 ff2a 	bl	8008080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800722c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722e:	f000 fa31 	bl	8007694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007232:	f000 fd5f 	bl	8007cf4 <xTaskResumeAll>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	f47f af7c 	bne.w	8007136 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800723e:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <xQueueGenericSend+0x200>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	e772      	b.n	8007136 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007252:	f000 fa1f 	bl	8007694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007256:	f000 fd4d 	bl	8007cf4 <xTaskResumeAll>
 800725a:	e76c      	b.n	8007136 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800725c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800725e:	f000 fa19 	bl	8007694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007262:	f000 fd47 	bl	8007cf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007266:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007268:	4618      	mov	r0, r3
 800726a:	3738      	adds	r7, #56	@ 0x38
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b090      	sub	sp, #64	@ 0x40
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSendFromISR+0x3e>
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <xQueueGenericSendFromISR+0x42>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <xQueueGenericSendFromISR+0x44>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d103      	bne.n	80072e2 <xQueueGenericSendFromISR+0x6e>
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <xQueueGenericSendFromISR+0x72>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericSendFromISR+0x74>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	623b      	str	r3, [r7, #32]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007304:	f001 ff40 	bl	8009188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007308:	f3ef 8211 	mrs	r2, BASEPRI
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	61fa      	str	r2, [r7, #28]
 800731e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007320:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732c:	429a      	cmp	r2, r3
 800732e:	d302      	bcc.n	8007336 <xQueueGenericSendFromISR+0xc2>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d12f      	bne.n	8007396 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800733c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800734c:	f000 f912 	bl	8007574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007350:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007358:	d112      	bne.n	8007380 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	3324      	adds	r3, #36	@ 0x24
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fedc 	bl	8008124 <xTaskRemoveFromEventList>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e007      	b.n	8007390 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007380:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007384:	3301      	adds	r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	b25a      	sxtb	r2, r3
 800738a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007390:	2301      	movs	r3, #1
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007394:	e001      	b.n	800739a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800739a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3740      	adds	r7, #64	@ 0x40
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08c      	sub	sp, #48	@ 0x30
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073bc:	2300      	movs	r3, #0
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <xQueueReceive+0x32>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	623b      	str	r3, [r7, #32]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d103      	bne.n	80073f0 <xQueueReceive+0x40>
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <xQueueReceive+0x44>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <xQueueReceive+0x46>
 80073f4:	2300      	movs	r3, #0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <xQueueReceive+0x62>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61fb      	str	r3, [r7, #28]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007412:	f001 f86f 	bl	80084f4 <xTaskGetSchedulerState>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <xQueueReceive+0x72>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <xQueueReceive+0x76>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueReceive+0x78>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10b      	bne.n	8007444 <xQueueReceive+0x94>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61bb      	str	r3, [r7, #24]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007444:	f001 fdc0 	bl	8008fc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01f      	beq.n	8007494 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007458:	f000 f8f6 	bl	8007648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	3310      	adds	r3, #16
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fe57 	bl	8008124 <xTaskRemoveFromEventList>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800747c:	4b3c      	ldr	r3, [pc, #240]	@ (8007570 <xQueueReceive+0x1c0>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800748c:	f001 fdce 	bl	800902c <vPortExitCritical>
				return pdPASS;
 8007490:	2301      	movs	r3, #1
 8007492:	e069      	b.n	8007568 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800749a:	f001 fdc7 	bl	800902c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800749e:	2300      	movs	r3, #0
 80074a0:	e062      	b.n	8007568 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a8:	f107 0310 	add.w	r3, r7, #16
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fec5 	bl	800823c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b6:	f001 fdb9 	bl	800902c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ba:	f000 fc0d 	bl	8007cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074be:	f001 fd83 	bl	8008fc8 <vPortEnterCritical>
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074c8:	b25b      	sxtb	r3, r3
 80074ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ce:	d103      	bne.n	80074d8 <xQueueReceive+0x128>
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074de:	b25b      	sxtb	r3, r3
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e4:	d103      	bne.n	80074ee <xQueueReceive+0x13e>
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ee:	f001 fd9d 	bl	800902c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f2:	1d3a      	adds	r2, r7, #4
 80074f4:	f107 0310 	add.w	r3, r7, #16
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 feb4 	bl	8008268 <xTaskCheckForTimeOut>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d123      	bne.n	800754e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007508:	f000 f916 	bl	8007738 <prvIsQueueEmpty>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d017      	beq.n	8007542 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	3324      	adds	r3, #36	@ 0x24
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fdb0 	bl	8008080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007522:	f000 f8b7 	bl	8007694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007526:	f000 fbe5 	bl	8007cf4 <xTaskResumeAll>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d189      	bne.n	8007444 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007530:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <xQueueReceive+0x1c0>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	e780      	b.n	8007444 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007544:	f000 f8a6 	bl	8007694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007548:	f000 fbd4 	bl	8007cf4 <xTaskResumeAll>
 800754c:	e77a      	b.n	8007444 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800754e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007550:	f000 f8a0 	bl	8007694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007554:	f000 fbce 	bl	8007cf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800755a:	f000 f8ed 	bl	8007738 <prvIsQueueEmpty>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	f43f af6f 	beq.w	8007444 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007566:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007568:	4618      	mov	r0, r3
 800756a:	3730      	adds	r7, #48	@ 0x30
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10d      	bne.n	80075ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d14d      	bne.n	8007636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 ffc6 	bl	8008530 <xTaskPriorityDisinherit>
 80075a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	e043      	b.n	8007636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d119      	bne.n	80075e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6858      	ldr	r0, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	461a      	mov	r2, r3
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	f00f f8df 	bl	8016782 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d32b      	bcc.n	8007636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	e026      	b.n	8007636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68d8      	ldr	r0, [r3, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f0:	461a      	mov	r2, r3
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	f00f f8c5 	bl	8016782 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007600:	425b      	negs	r3, r3
 8007602:	441a      	add	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d207      	bcs.n	8007624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	425b      	negs	r3, r3
 800761e:	441a      	add	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d105      	bne.n	8007636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3b01      	subs	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	441a      	add	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d303      	bcc.n	800767c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68d9      	ldr	r1, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	461a      	mov	r2, r3
 8007686:	6838      	ldr	r0, [r7, #0]
 8007688:	f00f f87b 	bl	8016782 <memcpy>
	}
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800769c:	f001 fc94 	bl	8008fc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076a8:	e011      	b.n	80076ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d012      	beq.n	80076d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3324      	adds	r3, #36	@ 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fd34 	bl	8008124 <xTaskRemoveFromEventList>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076c2:	f000 fe35 	bl	8008330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dce9      	bgt.n	80076aa <prvUnlockQueue+0x16>
 80076d6:	e000      	b.n	80076da <prvUnlockQueue+0x46>
					break;
 80076d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	22ff      	movs	r2, #255	@ 0xff
 80076de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076e2:	f001 fca3 	bl	800902c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076e6:	f001 fc6f 	bl	8008fc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076f2:	e011      	b.n	8007718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d012      	beq.n	8007722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3310      	adds	r3, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fd0f 	bl	8008124 <xTaskRemoveFromEventList>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800770c:	f000 fe10 	bl	8008330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	3b01      	subs	r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dce9      	bgt.n	80076f4 <prvUnlockQueue+0x60>
 8007720:	e000      	b.n	8007724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	22ff      	movs	r2, #255	@ 0xff
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800772c:	f001 fc7e 	bl	800902c <vPortExitCritical>
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007740:	f001 fc42 	bl	8008fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e001      	b.n	8007756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007756:	f001 fc69 	bl	800902c <vPortExitCritical>

	return xReturn;
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800776c:	f001 fc2c 	bl	8008fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007778:	429a      	cmp	r2, r3
 800777a:	d102      	bne.n	8007782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e001      	b.n	8007786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fc51 	bl	800902c <vPortExitCritical>

	return xReturn;
 800778a:	68fb      	ldr	r3, [r7, #12]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e014      	b.n	80077ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077a4:	4a0f      	ldr	r2, [pc, #60]	@ (80077e4 <vQueueAddToRegistry+0x50>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10b      	bne.n	80077c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077b0:	490c      	ldr	r1, [pc, #48]	@ (80077e4 <vQueueAddToRegistry+0x50>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077ba:	4a0a      	ldr	r2, [pc, #40]	@ (80077e4 <vQueueAddToRegistry+0x50>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077c6:	e006      	b.n	80077d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d9e7      	bls.n	80077a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20005080 	.word	0x20005080

080077e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077f8:	f001 fbe6 	bl	8008fc8 <vPortEnterCritical>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007802:	b25b      	sxtb	r3, r3
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007808:	d103      	bne.n	8007812 <vQueueWaitForMessageRestricted+0x2a>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007818:	b25b      	sxtb	r3, r3
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800781e:	d103      	bne.n	8007828 <vQueueWaitForMessageRestricted+0x40>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007828:	f001 fc00 	bl	800902c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	3324      	adds	r3, #36	@ 0x24
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fc45 	bl	80080cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007842:	6978      	ldr	r0, [r7, #20]
 8007844:	f7ff ff26 	bl	8007694 <prvUnlockQueue>
	}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08e      	sub	sp, #56	@ 0x38
 8007854:	af04      	add	r7, sp, #16
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800785e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10b      	bne.n	800787c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	623b      	str	r3, [r7, #32]
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	61fb      	str	r3, [r7, #28]
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800789a:	235c      	movs	r3, #92	@ 0x5c
 800789c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80078a2:	d00b      	beq.n	80078bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	61bb      	str	r3, [r7, #24]
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	e7fd      	b.n	80078b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01e      	beq.n	8007902 <xTaskCreateStatic+0xb2>
 80078c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01b      	beq.n	8007902 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078dc:	2300      	movs	r3, #0
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	9302      	str	r3, [sp, #8]
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f850 	bl	800799a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078fc:	f000 f8de 	bl	8007abc <prvAddNewTaskToReadyList>
 8007900:	e001      	b.n	8007906 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007906:	697b      	ldr	r3, [r7, #20]
	}
 8007908:	4618      	mov	r0, r3
 800790a:	3728      	adds	r7, #40	@ 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08c      	sub	sp, #48	@ 0x30
 8007914:	af04      	add	r7, sp, #16
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007920:	88fb      	ldrh	r3, [r7, #6]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fc71 	bl	800920c <pvPortMalloc>
 800792a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007932:	205c      	movs	r0, #92	@ 0x5c
 8007934:	f001 fc6a 	bl	800920c <pvPortMalloc>
 8007938:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	631a      	str	r2, [r3, #48]	@ 0x30
 8007946:	e005      	b.n	8007954 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007948:	6978      	ldr	r0, [r7, #20]
 800794a:	f001 fd2d 	bl	80093a8 <vPortFree>
 800794e:	e001      	b.n	8007954 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d017      	beq.n	800798a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007962:	88fa      	ldrh	r2, [r7, #6]
 8007964:	2300      	movs	r3, #0
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f80e 	bl	800799a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800797e:	69f8      	ldr	r0, [r7, #28]
 8007980:	f000 f89c 	bl	8007abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007984:	2301      	movs	r3, #1
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e002      	b.n	8007990 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800798a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800798e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007990:	69bb      	ldr	r3, [r7, #24]
	}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b088      	sub	sp, #32
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	461a      	mov	r2, r3
 80079b2:	21a5      	movs	r1, #165	@ 0xa5
 80079b4:	f00e fe1c 	bl	80165f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079c2:	3b01      	subs	r3, #1
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f023 0307 	bic.w	r3, r3, #7
 80079d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	617b      	str	r3, [r7, #20]
}
 80079ee:	bf00      	nop
 80079f0:	bf00      	nop
 80079f2:	e7fd      	b.n	80079f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01f      	beq.n	8007a3a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	e012      	b.n	8007a26 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	7819      	ldrb	r1, [r3, #0]
 8007a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3334      	adds	r3, #52	@ 0x34
 8007a10:	460a      	mov	r2, r1
 8007a12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2b0f      	cmp	r3, #15
 8007a2a:	d9e9      	bls.n	8007a00 <prvInitialiseNewTask+0x66>
 8007a2c:	e000      	b.n	8007a30 <prvInitialiseNewTask+0x96>
			{
				break;
 8007a2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a38:	e003      	b.n	8007a42 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a44:	2b37      	cmp	r3, #55	@ 0x37
 8007a46:	d901      	bls.n	8007a4c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a48:	2337      	movs	r3, #55	@ 0x37
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a50:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a56:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	3304      	adds	r3, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff f966 	bl	8006d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	3318      	adds	r3, #24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff f961 	bl	8006d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a86:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	69b8      	ldr	r0, [r7, #24]
 8007a9c:	f001 f966 	bl	8008d6c <pxPortInitialiseStack>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab2:	bf00      	nop
 8007ab4:	3720      	adds	r7, #32
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ac4:	f001 fa80 	bl	8008fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a2c      	ldr	r2, [pc, #176]	@ (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ada:	4a2a      	ldr	r2, [pc, #168]	@ (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ae0:	4b27      	ldr	r3, [pc, #156]	@ (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d110      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae8:	f000 fc46 	bl	8008378 <prvInitialiseTaskLists>
 8007aec:	e00d      	b.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aee:	4b26      	ldr	r3, [pc, #152]	@ (8007b88 <prvAddNewTaskToReadyList+0xcc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007af6:	4b23      	ldr	r3, [pc, #140]	@ (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d802      	bhi.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b04:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b0a:	4b20      	ldr	r3, [pc, #128]	@ (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b14:	4b1d      	ldr	r3, [pc, #116]	@ (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b20:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <prvAddNewTaskToReadyList+0xd4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d903      	bls.n	8007b30 <prvAddNewTaskToReadyList+0x74>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	4a18      	ldr	r2, [pc, #96]	@ (8007b90 <prvAddNewTaskToReadyList+0xd4>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <prvAddNewTaskToReadyList+0xd8>)
 8007b3e:	441a      	add	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7ff f901 	bl	8006d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b4c:	f001 fa6e 	bl	800902c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b50:	4b0d      	ldr	r3, [pc, #52]	@ (8007b88 <prvAddNewTaskToReadyList+0xcc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00e      	beq.n	8007b76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b58:	4b0a      	ldr	r3, [pc, #40]	@ (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d207      	bcs.n	8007b76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b66:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <prvAddNewTaskToReadyList+0xdc>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20005594 	.word	0x20005594
 8007b84:	200050c0 	.word	0x200050c0
 8007b88:	200055a0 	.word	0x200055a0
 8007b8c:	200055b0 	.word	0x200055b0
 8007b90:	2000559c 	.word	0x2000559c
 8007b94:	200050c4 	.word	0x200050c4
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d018      	beq.n	8007be0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bae:	4b14      	ldr	r3, [pc, #80]	@ (8007c00 <vTaskDelay+0x64>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <vTaskDelay+0x32>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60bb      	str	r3, [r7, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bce:	f000 f883 	bl	8007cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fd1b 	bl	8008610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bda:	f000 f88b 	bl	8007cf4 <xTaskResumeAll>
 8007bde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d107      	bne.n	8007bf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007be6:	4b07      	ldr	r3, [pc, #28]	@ (8007c04 <vTaskDelay+0x68>)
 8007be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	200055bc 	.word	0x200055bc
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	@ 0x28
 8007c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c16:	463a      	mov	r2, r7
 8007c18:	1d39      	adds	r1, r7, #4
 8007c1a:	f107 0308 	add.w	r3, r7, #8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff f834 	bl	8006c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	9202      	str	r2, [sp, #8]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	460a      	mov	r2, r1
 8007c36:	4922      	ldr	r1, [pc, #136]	@ (8007cc0 <vTaskStartScheduler+0xb8>)
 8007c38:	4822      	ldr	r0, [pc, #136]	@ (8007cc4 <vTaskStartScheduler+0xbc>)
 8007c3a:	f7ff fe09 	bl	8007850 <xTaskCreateStatic>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4a21      	ldr	r2, [pc, #132]	@ (8007cc8 <vTaskStartScheduler+0xc0>)
 8007c42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c44:	4b20      	ldr	r3, [pc, #128]	@ (8007cc8 <vTaskStartScheduler+0xc0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e001      	b.n	8007c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d102      	bne.n	8007c62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c5c:	f000 fd2c 	bl	80086b8 <xTimerCreateTimerTask>
 8007c60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d116      	bne.n	8007c96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	613b      	str	r3, [r7, #16]
}
 8007c7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c7c:	4b13      	ldr	r3, [pc, #76]	@ (8007ccc <vTaskStartScheduler+0xc4>)
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c84:	4b12      	ldr	r3, [pc, #72]	@ (8007cd0 <vTaskStartScheduler+0xc8>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c8a:	4b12      	ldr	r3, [pc, #72]	@ (8007cd4 <vTaskStartScheduler+0xcc>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c90:	f001 f8f6 	bl	8008e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c94:	e00f      	b.n	8007cb6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c9c:	d10b      	bne.n	8007cb6 <vTaskStartScheduler+0xae>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	60fb      	str	r3, [r7, #12]
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	e7fd      	b.n	8007cb2 <vTaskStartScheduler+0xaa>
}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08017574 	.word	0x08017574
 8007cc4:	08008349 	.word	0x08008349
 8007cc8:	200055b8 	.word	0x200055b8
 8007ccc:	200055b4 	.word	0x200055b4
 8007cd0:	200055a0 	.word	0x200055a0
 8007cd4:	20005598 	.word	0x20005598

08007cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cdc:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <vTaskSuspendAll+0x18>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	4a03      	ldr	r2, [pc, #12]	@ (8007cf0 <vTaskSuspendAll+0x18>)
 8007ce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ce6:	bf00      	nop
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	200055bc 	.word	0x200055bc

08007cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d02:	4b42      	ldr	r3, [pc, #264]	@ (8007e0c <xTaskResumeAll+0x118>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10b      	bne.n	8007d22 <xTaskResumeAll+0x2e>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	603b      	str	r3, [r7, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d22:	f001 f951 	bl	8008fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d26:	4b39      	ldr	r3, [pc, #228]	@ (8007e0c <xTaskResumeAll+0x118>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	4a37      	ldr	r2, [pc, #220]	@ (8007e0c <xTaskResumeAll+0x118>)
 8007d2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d30:	4b36      	ldr	r3, [pc, #216]	@ (8007e0c <xTaskResumeAll+0x118>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d162      	bne.n	8007dfe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d38:	4b35      	ldr	r3, [pc, #212]	@ (8007e10 <xTaskResumeAll+0x11c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d05e      	beq.n	8007dfe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d40:	e02f      	b.n	8007da2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d42:	4b34      	ldr	r3, [pc, #208]	@ (8007e14 <xTaskResumeAll+0x120>)
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3318      	adds	r3, #24
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff f85a 	bl	8006e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff f855 	bl	8006e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d62:	4b2d      	ldr	r3, [pc, #180]	@ (8007e18 <xTaskResumeAll+0x124>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <xTaskResumeAll+0x7e>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e18 <xTaskResumeAll+0x124>)
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4a27      	ldr	r2, [pc, #156]	@ (8007e1c <xTaskResumeAll+0x128>)
 8007d80:	441a      	add	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fe ffe0 	bl	8006d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d92:	4b23      	ldr	r3, [pc, #140]	@ (8007e20 <xTaskResumeAll+0x12c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d302      	bcc.n	8007da2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d9c:	4b21      	ldr	r3, [pc, #132]	@ (8007e24 <xTaskResumeAll+0x130>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <xTaskResumeAll+0x120>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1cb      	bne.n	8007d42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007db0:	f000 fb80 	bl	80084b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007db4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e28 <xTaskResumeAll+0x134>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d010      	beq.n	8007de2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dc0:	f000 f846 	bl	8007e50 <xTaskIncrementTick>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007dca:	4b16      	ldr	r3, [pc, #88]	@ (8007e24 <xTaskResumeAll+0x130>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f1      	bne.n	8007dc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007ddc:	4b12      	ldr	r3, [pc, #72]	@ (8007e28 <xTaskResumeAll+0x134>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007de2:	4b10      	ldr	r3, [pc, #64]	@ (8007e24 <xTaskResumeAll+0x130>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dee:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <xTaskResumeAll+0x138>)
 8007df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f001 f915 	bl	800902c <vPortExitCritical>

	return xAlreadyYielded;
 8007e02:	68bb      	ldr	r3, [r7, #8]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	200055bc 	.word	0x200055bc
 8007e10:	20005594 	.word	0x20005594
 8007e14:	20005554 	.word	0x20005554
 8007e18:	2000559c 	.word	0x2000559c
 8007e1c:	200050c4 	.word	0x200050c4
 8007e20:	200050c0 	.word	0x200050c0
 8007e24:	200055a8 	.word	0x200055a8
 8007e28:	200055a4 	.word	0x200055a4
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e36:	4b05      	ldr	r3, [pc, #20]	@ (8007e4c <xTaskGetTickCount+0x1c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e3c:	687b      	ldr	r3, [r7, #4]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20005598 	.word	0x20005598

08007e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f98 <xTaskIncrementTick+0x148>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 8090 	bne.w	8007f84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e64:	4b4d      	ldr	r3, [pc, #308]	@ (8007f9c <xTaskIncrementTick+0x14c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8007f9c <xTaskIncrementTick+0x14c>)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d121      	bne.n	8007ebc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e78:	4b49      	ldr	r3, [pc, #292]	@ (8007fa0 <xTaskIncrementTick+0x150>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	603b      	str	r3, [r7, #0]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <xTaskIncrementTick+0x46>
 8007e9a:	4b41      	ldr	r3, [pc, #260]	@ (8007fa0 <xTaskIncrementTick+0x150>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	4b40      	ldr	r3, [pc, #256]	@ (8007fa4 <xTaskIncrementTick+0x154>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8007fa0 <xTaskIncrementTick+0x150>)
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8007fa4 <xTaskIncrementTick+0x154>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa8 <xTaskIncrementTick+0x158>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fa8 <xTaskIncrementTick+0x158>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f000 fafc 	bl	80084b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fac <xTaskIncrementTick+0x15c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d349      	bcc.n	8007f5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec6:	4b36      	ldr	r3, [pc, #216]	@ (8007fa0 <xTaskIncrementTick+0x150>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed0:	4b36      	ldr	r3, [pc, #216]	@ (8007fac <xTaskIncrementTick+0x15c>)
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ed6:	601a      	str	r2, [r3, #0]
					break;
 8007ed8:	e03f      	b.n	8007f5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eda:	4b31      	ldr	r3, [pc, #196]	@ (8007fa0 <xTaskIncrementTick+0x150>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d203      	bcs.n	8007efa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8007fac <xTaskIncrementTick+0x15c>)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ef8:	e02f      	b.n	8007f5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe ff82 	bl	8006e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	3318      	adds	r3, #24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe ff79 	bl	8006e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	4b25      	ldr	r3, [pc, #148]	@ (8007fb0 <xTaskIncrementTick+0x160>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d903      	bls.n	8007f2a <xTaskIncrementTick+0xda>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f26:	4a22      	ldr	r2, [pc, #136]	@ (8007fb0 <xTaskIncrementTick+0x160>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4a1f      	ldr	r2, [pc, #124]	@ (8007fb4 <xTaskIncrementTick+0x164>)
 8007f38:	441a      	add	r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7fe ff04 	bl	8006d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb8 <xTaskIncrementTick+0x168>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d3b8      	bcc.n	8007ec6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f58:	e7b5      	b.n	8007ec6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f5a:	4b17      	ldr	r3, [pc, #92]	@ (8007fb8 <xTaskIncrementTick+0x168>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f60:	4914      	ldr	r1, [pc, #80]	@ (8007fb4 <xTaskIncrementTick+0x164>)
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d901      	bls.n	8007f76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f72:	2301      	movs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f76:	4b11      	ldr	r3, [pc, #68]	@ (8007fbc <xTaskIncrementTick+0x16c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	e004      	b.n	8007f8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f84:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc0 <xTaskIncrementTick+0x170>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007fc0 <xTaskIncrementTick+0x170>)
 8007f8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f8e:	697b      	ldr	r3, [r7, #20]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	200055bc 	.word	0x200055bc
 8007f9c:	20005598 	.word	0x20005598
 8007fa0:	2000554c 	.word	0x2000554c
 8007fa4:	20005550 	.word	0x20005550
 8007fa8:	200055ac 	.word	0x200055ac
 8007fac:	200055b4 	.word	0x200055b4
 8007fb0:	2000559c 	.word	0x2000559c
 8007fb4:	200050c4 	.word	0x200050c4
 8007fb8:	200050c0 	.word	0x200050c0
 8007fbc:	200055a8 	.word	0x200055a8
 8007fc0:	200055a4 	.word	0x200055a4

08007fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fca:	4b28      	ldr	r3, [pc, #160]	@ (800806c <vTaskSwitchContext+0xa8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fd2:	4b27      	ldr	r3, [pc, #156]	@ (8008070 <vTaskSwitchContext+0xac>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fd8:	e042      	b.n	8008060 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007fda:	4b25      	ldr	r3, [pc, #148]	@ (8008070 <vTaskSwitchContext+0xac>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe0:	4b24      	ldr	r3, [pc, #144]	@ (8008074 <vTaskSwitchContext+0xb0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e011      	b.n	800800c <vTaskSwitchContext+0x48>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <vTaskSwitchContext+0x42>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	607b      	str	r3, [r7, #4]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <vTaskSwitchContext+0x3e>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3b01      	subs	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	491a      	ldr	r1, [pc, #104]	@ (8008078 <vTaskSwitchContext+0xb4>)
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0e3      	beq.n	8007fe8 <vTaskSwitchContext+0x24>
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4a13      	ldr	r2, [pc, #76]	@ (8008078 <vTaskSwitchContext+0xb4>)
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	3308      	adds	r3, #8
 8008042:	429a      	cmp	r2, r3
 8008044:	d104      	bne.n	8008050 <vTaskSwitchContext+0x8c>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	605a      	str	r2, [r3, #4]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	4a09      	ldr	r2, [pc, #36]	@ (800807c <vTaskSwitchContext+0xb8>)
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	4a06      	ldr	r2, [pc, #24]	@ (8008074 <vTaskSwitchContext+0xb0>)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6013      	str	r3, [r2, #0]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	200055bc 	.word	0x200055bc
 8008070:	200055a8 	.word	0x200055a8
 8008074:	2000559c 	.word	0x2000559c
 8008078:	200050c4 	.word	0x200050c4
 800807c:	200050c0 	.word	0x200050c0

08008080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10b      	bne.n	80080a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60fb      	str	r3, [r7, #12]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080a8:	4b07      	ldr	r3, [pc, #28]	@ (80080c8 <vTaskPlaceOnEventList+0x48>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3318      	adds	r3, #24
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fe fe70 	bl	8006d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080b6:	2101      	movs	r1, #1
 80080b8:	6838      	ldr	r0, [r7, #0]
 80080ba:	f000 faa9 	bl	8008610 <prvAddCurrentTaskToDelayedList>
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	200050c0 	.word	0x200050c0

080080cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10b      	bne.n	80080f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	617b      	str	r3, [r7, #20]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008120 <vTaskPlaceOnEventListRestricted+0x54>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3318      	adds	r3, #24
 80080fc:	4619      	mov	r1, r3
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7fe fe25 	bl	8006d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800810a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800810e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	68b8      	ldr	r0, [r7, #8]
 8008114:	f000 fa7c 	bl	8008610 <prvAddCurrentTaskToDelayedList>
	}
 8008118:	bf00      	nop
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	200050c0 	.word	0x200050c0

08008124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	60fb      	str	r3, [r7, #12]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	3318      	adds	r3, #24
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe fe56 	bl	8006e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815c:	4b1d      	ldr	r3, [pc, #116]	@ (80081d4 <xTaskRemoveFromEventList+0xb0>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11d      	bne.n	80081a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3304      	adds	r3, #4
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fe4d 	bl	8006e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008172:	4b19      	ldr	r3, [pc, #100]	@ (80081d8 <xTaskRemoveFromEventList+0xb4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d903      	bls.n	8008182 <xTaskRemoveFromEventList+0x5e>
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817e:	4a16      	ldr	r2, [pc, #88]	@ (80081d8 <xTaskRemoveFromEventList+0xb4>)
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4a13      	ldr	r2, [pc, #76]	@ (80081dc <xTaskRemoveFromEventList+0xb8>)
 8008190:	441a      	add	r2, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	3304      	adds	r3, #4
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fe fdd8 	bl	8006d4e <vListInsertEnd>
 800819e:	e005      	b.n	80081ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3318      	adds	r3, #24
 80081a4:	4619      	mov	r1, r3
 80081a6:	480e      	ldr	r0, [pc, #56]	@ (80081e0 <xTaskRemoveFromEventList+0xbc>)
 80081a8:	f7fe fdd1 	bl	8006d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <xTaskRemoveFromEventList+0xc0>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d905      	bls.n	80081c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081be:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <xTaskRemoveFromEventList+0xc4>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e001      	b.n	80081ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081ca:	697b      	ldr	r3, [r7, #20]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	200055bc 	.word	0x200055bc
 80081d8:	2000559c 	.word	0x2000559c
 80081dc:	200050c4 	.word	0x200050c4
 80081e0:	20005554 	.word	0x20005554
 80081e4:	200050c0 	.word	0x200050c0
 80081e8:	200055a8 	.word	0x200055a8

080081ec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	60fb      	str	r3, [r7, #12]
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	e7fd      	b.n	800820e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008212:	f000 fed9 	bl	8008fc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008216:	4b07      	ldr	r3, [pc, #28]	@ (8008234 <vTaskSetTimeOutState+0x48>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800821e:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <vTaskSetTimeOutState+0x4c>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008226:	f000 ff01 	bl	800902c <vPortExitCritical>
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	200055ac 	.word	0x200055ac
 8008238:	20005598 	.word	0x20005598

0800823c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008244:	4b06      	ldr	r3, [pc, #24]	@ (8008260 <vTaskInternalSetTimeOutState+0x24>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800824c:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <vTaskInternalSetTimeOutState+0x28>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	605a      	str	r2, [r3, #4]
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	200055ac 	.word	0x200055ac
 8008264:	20005598 	.word	0x20005598

08008268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10b      	bne.n	8008290 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	613b      	str	r3, [r7, #16]
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	e7fd      	b.n	800828c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60fb      	str	r3, [r7, #12]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80082ae:	f000 fe8b 	bl	8008fc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008328 <xTaskCheckForTimeOut+0xc0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082ca:	d102      	bne.n	80082d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	e023      	b.n	800831a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	4b15      	ldr	r3, [pc, #84]	@ (800832c <xTaskCheckForTimeOut+0xc4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d007      	beq.n	80082ee <xTaskCheckForTimeOut+0x86>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d302      	bcc.n	80082ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	e015      	b.n	800831a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d20b      	bcs.n	8008310 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	1ad2      	subs	r2, r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff ff99 	bl	800823c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	e004      	b.n	800831a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008316:	2301      	movs	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800831a:	f000 fe87 	bl	800902c <vPortExitCritical>

	return xReturn;
 800831e:	69fb      	ldr	r3, [r7, #28]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3720      	adds	r7, #32
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20005598 	.word	0x20005598
 800832c:	200055ac 	.word	0x200055ac

08008330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008334:	4b03      	ldr	r3, [pc, #12]	@ (8008344 <vTaskMissedYield+0x14>)
 8008336:	2201      	movs	r2, #1
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	bf00      	nop
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	200055a8 	.word	0x200055a8

08008348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008350:	f000 f852 	bl	80083f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008354:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <prvIdleTask+0x28>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d9f9      	bls.n	8008350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <prvIdleTask+0x2c>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800836c:	e7f0      	b.n	8008350 <prvIdleTask+0x8>
 800836e:	bf00      	nop
 8008370:	200050c4 	.word	0x200050c4
 8008374:	e000ed04 	.word	0xe000ed04

08008378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800837e:	2300      	movs	r3, #0
 8008380:	607b      	str	r3, [r7, #4]
 8008382:	e00c      	b.n	800839e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4a12      	ldr	r2, [pc, #72]	@ (80083d8 <prvInitialiseTaskLists+0x60>)
 8008390:	4413      	add	r3, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fcae 	bl	8006cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3301      	adds	r3, #1
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b37      	cmp	r3, #55	@ 0x37
 80083a2:	d9ef      	bls.n	8008384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083a4:	480d      	ldr	r0, [pc, #52]	@ (80083dc <prvInitialiseTaskLists+0x64>)
 80083a6:	f7fe fca5 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083aa:	480d      	ldr	r0, [pc, #52]	@ (80083e0 <prvInitialiseTaskLists+0x68>)
 80083ac:	f7fe fca2 	bl	8006cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083b0:	480c      	ldr	r0, [pc, #48]	@ (80083e4 <prvInitialiseTaskLists+0x6c>)
 80083b2:	f7fe fc9f 	bl	8006cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083b6:	480c      	ldr	r0, [pc, #48]	@ (80083e8 <prvInitialiseTaskLists+0x70>)
 80083b8:	f7fe fc9c 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083bc:	480b      	ldr	r0, [pc, #44]	@ (80083ec <prvInitialiseTaskLists+0x74>)
 80083be:	f7fe fc99 	bl	8006cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083c2:	4b0b      	ldr	r3, [pc, #44]	@ (80083f0 <prvInitialiseTaskLists+0x78>)
 80083c4:	4a05      	ldr	r2, [pc, #20]	@ (80083dc <prvInitialiseTaskLists+0x64>)
 80083c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	@ (80083f4 <prvInitialiseTaskLists+0x7c>)
 80083ca:	4a05      	ldr	r2, [pc, #20]	@ (80083e0 <prvInitialiseTaskLists+0x68>)
 80083cc:	601a      	str	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200050c4 	.word	0x200050c4
 80083dc:	20005524 	.word	0x20005524
 80083e0:	20005538 	.word	0x20005538
 80083e4:	20005554 	.word	0x20005554
 80083e8:	20005568 	.word	0x20005568
 80083ec:	20005580 	.word	0x20005580
 80083f0:	2000554c 	.word	0x2000554c
 80083f4:	20005550 	.word	0x20005550

080083f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083fe:	e019      	b.n	8008434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008400:	f000 fde2 	bl	8008fc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008404:	4b10      	ldr	r3, [pc, #64]	@ (8008448 <prvCheckTasksWaitingTermination+0x50>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3304      	adds	r3, #4
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fcf9 	bl	8006e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008416:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <prvCheckTasksWaitingTermination+0x54>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a0b      	ldr	r2, [pc, #44]	@ (800844c <prvCheckTasksWaitingTermination+0x54>)
 800841e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008420:	4b0b      	ldr	r3, [pc, #44]	@ (8008450 <prvCheckTasksWaitingTermination+0x58>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3b01      	subs	r3, #1
 8008426:	4a0a      	ldr	r2, [pc, #40]	@ (8008450 <prvCheckTasksWaitingTermination+0x58>)
 8008428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800842a:	f000 fdff 	bl	800902c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f810 	bl	8008454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008434:	4b06      	ldr	r3, [pc, #24]	@ (8008450 <prvCheckTasksWaitingTermination+0x58>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e1      	bne.n	8008400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20005568 	.word	0x20005568
 800844c:	20005594 	.word	0x20005594
 8008450:	2000557c 	.word	0x2000557c

08008454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008462:	2b00      	cmp	r3, #0
 8008464:	d108      	bne.n	8008478 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846a:	4618      	mov	r0, r3
 800846c:	f000 ff9c 	bl	80093a8 <vPortFree>
				vPortFree( pxTCB );
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 ff99 	bl	80093a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008476:	e019      	b.n	80084ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800847e:	2b01      	cmp	r3, #1
 8008480:	d103      	bne.n	800848a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 ff90 	bl	80093a8 <vPortFree>
	}
 8008488:	e010      	b.n	80084ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008490:	2b02      	cmp	r3, #2
 8008492:	d00b      	beq.n	80084ac <prvDeleteTCB+0x58>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60fb      	str	r3, [r7, #12]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <prvDeleteTCB+0x54>
	}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ba:	4b0c      	ldr	r3, [pc, #48]	@ (80084ec <prvResetNextTaskUnblockTime+0x38>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d104      	bne.n	80084ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084c4:	4b0a      	ldr	r3, [pc, #40]	@ (80084f0 <prvResetNextTaskUnblockTime+0x3c>)
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084cc:	e008      	b.n	80084e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ce:	4b07      	ldr	r3, [pc, #28]	@ (80084ec <prvResetNextTaskUnblockTime+0x38>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4a04      	ldr	r2, [pc, #16]	@ (80084f0 <prvResetNextTaskUnblockTime+0x3c>)
 80084de:	6013      	str	r3, [r2, #0]
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	2000554c 	.word	0x2000554c
 80084f0:	200055b4 	.word	0x200055b4

080084f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <xTaskGetSchedulerState+0x34>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008502:	2301      	movs	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	e008      	b.n	800851a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008508:	4b08      	ldr	r3, [pc, #32]	@ (800852c <xTaskGetSchedulerState+0x38>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008510:	2302      	movs	r3, #2
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	e001      	b.n	800851a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800851a:	687b      	ldr	r3, [r7, #4]
	}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	200055a0 	.word	0x200055a0
 800852c:	200055bc 	.word	0x200055bc

08008530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d058      	beq.n	80085f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008546:	4b2f      	ldr	r3, [pc, #188]	@ (8008604 <xTaskPriorityDisinherit+0xd4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	429a      	cmp	r2, r3
 800854e:	d00b      	beq.n	8008568 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60bb      	str	r3, [r7, #8]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858c:	1e5a      	subs	r2, r3, #1
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800859a:	429a      	cmp	r2, r3
 800859c:	d02c      	beq.n	80085f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d128      	bne.n	80085f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fc2c 	bl	8006e08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008608 <xTaskPriorityDisinherit+0xd8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d903      	bls.n	80085d8 <xTaskPriorityDisinherit+0xa8>
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008608 <xTaskPriorityDisinherit+0xd8>)
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4a09      	ldr	r2, [pc, #36]	@ (800860c <xTaskPriorityDisinherit+0xdc>)
 80085e6:	441a      	add	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f7fe fbad 	bl	8006d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085f8:	697b      	ldr	r3, [r7, #20]
	}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200050c0 	.word	0x200050c0
 8008608:	2000559c 	.word	0x2000559c
 800860c:	200050c4 	.word	0x200050c4

08008610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800861a:	4b21      	ldr	r3, [pc, #132]	@ (80086a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008620:	4b20      	ldr	r3, [pc, #128]	@ (80086a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3304      	adds	r3, #4
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fbee 	bl	8006e08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008632:	d10a      	bne.n	800864a <prvAddCurrentTaskToDelayedList+0x3a>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800863a:	4b1a      	ldr	r3, [pc, #104]	@ (80086a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4819      	ldr	r0, [pc, #100]	@ (80086a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008644:	f7fe fb83 	bl	8006d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008648:	e026      	b.n	8008698 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4413      	add	r3, r2
 8008650:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008652:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	429a      	cmp	r2, r3
 8008660:	d209      	bcs.n	8008676 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3304      	adds	r3, #4
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	f7fe fb91 	bl	8006d96 <vListInsert>
}
 8008674:	e010      	b.n	8008698 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008676:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4b0a      	ldr	r3, [pc, #40]	@ (80086a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fe fb87 	bl	8006d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008688:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	429a      	cmp	r2, r3
 8008690:	d202      	bcs.n	8008698 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008692:	4a08      	ldr	r2, [pc, #32]	@ (80086b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6013      	str	r3, [r2, #0]
}
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20005598 	.word	0x20005598
 80086a4:	200050c0 	.word	0x200050c0
 80086a8:	20005580 	.word	0x20005580
 80086ac:	20005550 	.word	0x20005550
 80086b0:	2000554c 	.word	0x2000554c
 80086b4:	200055b4 	.word	0x200055b4

080086b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	@ 0x28
 80086bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086c2:	f000 fb13 	bl	8008cec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086c6:	4b1d      	ldr	r3, [pc, #116]	@ (800873c <xTimerCreateTimerTask+0x84>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d021      	beq.n	8008712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086d6:	1d3a      	adds	r2, r7, #4
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	f107 030c 	add.w	r3, r7, #12
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe faed 	bl	8006cc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	9202      	str	r2, [sp, #8]
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	2302      	movs	r3, #2
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	2300      	movs	r3, #0
 80086f6:	460a      	mov	r2, r1
 80086f8:	4911      	ldr	r1, [pc, #68]	@ (8008740 <xTimerCreateTimerTask+0x88>)
 80086fa:	4812      	ldr	r0, [pc, #72]	@ (8008744 <xTimerCreateTimerTask+0x8c>)
 80086fc:	f7ff f8a8 	bl	8007850 <xTaskCreateStatic>
 8008700:	4603      	mov	r3, r0
 8008702:	4a11      	ldr	r2, [pc, #68]	@ (8008748 <xTimerCreateTimerTask+0x90>)
 8008704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008706:	4b10      	ldr	r3, [pc, #64]	@ (8008748 <xTimerCreateTimerTask+0x90>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800870e:	2301      	movs	r3, #1
 8008710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10b      	bne.n	8008730 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	613b      	str	r3, [r7, #16]
}
 800872a:	bf00      	nop
 800872c:	bf00      	nop
 800872e:	e7fd      	b.n	800872c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008730:	697b      	ldr	r3, [r7, #20]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200055f0 	.word	0x200055f0
 8008740:	0801757c 	.word	0x0801757c
 8008744:	08008885 	.word	0x08008885
 8008748:	200055f4 	.word	0x200055f4

0800874c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	@ 0x28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800875a:	2300      	movs	r3, #0
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <xTimerGenericCommand+0x30>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	623b      	str	r3, [r7, #32]
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	e7fd      	b.n	8008778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800877c:	4b19      	ldr	r3, [pc, #100]	@ (80087e4 <xTimerGenericCommand+0x98>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d02a      	beq.n	80087da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b05      	cmp	r3, #5
 8008794:	dc18      	bgt.n	80087c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008796:	f7ff fead 	bl	80084f4 <xTaskGetSchedulerState>
 800879a:	4603      	mov	r3, r0
 800879c:	2b02      	cmp	r3, #2
 800879e:	d109      	bne.n	80087b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087a0:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <xTimerGenericCommand+0x98>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	f107 0110 	add.w	r1, r7, #16
 80087a8:	2300      	movs	r3, #0
 80087aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ac:	f7fe fc60 	bl	8007070 <xQueueGenericSend>
 80087b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80087b2:	e012      	b.n	80087da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087b4:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <xTimerGenericCommand+0x98>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	f107 0110 	add.w	r1, r7, #16
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	f7fe fc56 	bl	8007070 <xQueueGenericSend>
 80087c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80087c6:	e008      	b.n	80087da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087c8:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <xTimerGenericCommand+0x98>)
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	f107 0110 	add.w	r1, r7, #16
 80087d0:	2300      	movs	r3, #0
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	f7fe fd4e 	bl	8007274 <xQueueGenericSendFromISR>
 80087d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3728      	adds	r7, #40	@ 0x28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	200055f0 	.word	0x200055f0

080087e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f2:	4b23      	ldr	r3, [pc, #140]	@ (8008880 <prvProcessExpiredTimer+0x98>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	3304      	adds	r3, #4
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe fb01 	bl	8006e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d023      	beq.n	800885c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	699a      	ldr	r2, [r3, #24]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	18d1      	adds	r1, r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	6978      	ldr	r0, [r7, #20]
 8008822:	f000 f8d5 	bl	80089d0 <prvInsertTimerInActiveList>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d020      	beq.n	800886e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800882c:	2300      	movs	r3, #0
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	2300      	movs	r3, #0
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	2100      	movs	r1, #0
 8008836:	6978      	ldr	r0, [r7, #20]
 8008838:	f7ff ff88 	bl	800874c <xTimerGenericCommand>
 800883c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d114      	bne.n	800886e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	60fb      	str	r3, [r7, #12]
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	e7fd      	b.n	8008858 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	6978      	ldr	r0, [r7, #20]
 8008874:	4798      	blx	r3
}
 8008876:	bf00      	nop
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	200055e8 	.word	0x200055e8

08008884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800888c:	f107 0308 	add.w	r3, r7, #8
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f859 	bl	8008948 <prvGetNextExpireTime>
 8008896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4619      	mov	r1, r3
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f805 	bl	80088ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088a2:	f000 f8d7 	bl	8008a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088a6:	bf00      	nop
 80088a8:	e7f0      	b.n	800888c <prvTimerTask+0x8>
	...

080088ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088b6:	f7ff fa0f 	bl	8007cd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f866 	bl	8008990 <prvSampleTimeNow>
 80088c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d130      	bne.n	800892e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <prvProcessTimerOrBlockTask+0x3c>
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d806      	bhi.n	80088e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088da:	f7ff fa0b 	bl	8007cf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ff81 	bl	80087e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088e6:	e024      	b.n	8008932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088ee:	4b13      	ldr	r3, [pc, #76]	@ (800893c <prvProcessTimerOrBlockTask+0x90>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <prvProcessTimerOrBlockTask+0x50>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <prvProcessTimerOrBlockTask+0x52>
 80088fc:	2300      	movs	r3, #0
 80088fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008900:	4b0f      	ldr	r3, [pc, #60]	@ (8008940 <prvProcessTimerOrBlockTask+0x94>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4619      	mov	r1, r3
 800890e:	f7fe ff6b 	bl	80077e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008912:	f7ff f9ef 	bl	8007cf4 <xTaskResumeAll>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800891c:	4b09      	ldr	r3, [pc, #36]	@ (8008944 <prvProcessTimerOrBlockTask+0x98>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
}
 800892c:	e001      	b.n	8008932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800892e:	f7ff f9e1 	bl	8007cf4 <xTaskResumeAll>
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200055ec 	.word	0x200055ec
 8008940:	200055f0 	.word	0x200055f0
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008950:	4b0e      	ldr	r3, [pc, #56]	@ (800898c <prvGetNextExpireTime+0x44>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <prvGetNextExpireTime+0x16>
 800895a:	2201      	movs	r2, #1
 800895c:	e000      	b.n	8008960 <prvGetNextExpireTime+0x18>
 800895e:	2200      	movs	r2, #0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d105      	bne.n	8008978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <prvGetNextExpireTime+0x44>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e001      	b.n	800897c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800897c:	68fb      	ldr	r3, [r7, #12]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	200055e8 	.word	0x200055e8

08008990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008998:	f7ff fa4a 	bl	8007e30 <xTaskGetTickCount>
 800899c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800899e:	4b0b      	ldr	r3, [pc, #44]	@ (80089cc <prvSampleTimeNow+0x3c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d205      	bcs.n	80089b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089a8:	f000 f93a 	bl	8008c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e002      	b.n	80089ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089ba:	4a04      	ldr	r2, [pc, #16]	@ (80089cc <prvSampleTimeNow+0x3c>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089c0:	68fb      	ldr	r3, [r7, #12]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200055f8 	.word	0x200055f8

080089d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d812      	bhi.n	8008a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d302      	bcc.n	8008a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e01b      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a0a:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <prvInsertTimerInActiveList+0x7c>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3304      	adds	r3, #4
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f7fe f9be 	bl	8006d96 <vListInsert>
 8008a1a:	e012      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d206      	bcs.n	8008a32 <prvInsertTimerInActiveList+0x62>
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e007      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a32:	4b07      	ldr	r3, [pc, #28]	@ (8008a50 <prvInsertTimerInActiveList+0x80>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7fe f9aa 	bl	8006d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a42:	697b      	ldr	r3, [r7, #20]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200055ec 	.word	0x200055ec
 8008a50:	200055e8 	.word	0x200055e8

08008a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	@ 0x38
 8008a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a5a:	e0ce      	b.n	8008bfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da19      	bge.n	8008a96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	3304      	adds	r3, #4
 8008a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	61fb      	str	r3, [r7, #28]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8c:	6850      	ldr	r0, [r2, #4]
 8008a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a90:	6892      	ldr	r2, [r2, #8]
 8008a92:	4611      	mov	r1, r2
 8008a94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f2c0 80ae 	blt.w	8008bfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe f9aa 	bl	8006e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff ff6a 	bl	8008990 <prvSampleTimeNow>
 8008abc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b09      	cmp	r3, #9
 8008ac2:	f200 8097 	bhi.w	8008bf4 <prvProcessReceivedCommands+0x1a0>
 8008ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <prvProcessReceivedCommands+0x78>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008af5 	.word	0x08008af5
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008b6b 	.word	0x08008b6b
 8008adc:	08008b7f 	.word	0x08008b7f
 8008ae0:	08008bcb 	.word	0x08008bcb
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008af5 	.word	0x08008af5
 8008aec:	08008b6b 	.word	0x08008b6b
 8008af0:	08008b7f 	.word	0x08008b7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008afa:	f043 0301 	orr.w	r3, r3, #1
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	18d1      	adds	r1, r2, r3
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b14:	f7ff ff5c 	bl	80089d0 <prvInsertTimerInActiveList>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d06c      	beq.n	8008bf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d061      	beq.n	8008bf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	441a      	add	r2, r3
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	2300      	movs	r3, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b46:	f7ff fe01 	bl	800874c <xTimerGenericCommand>
 8008b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d152      	bne.n	8008bf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	61bb      	str	r3, [r7, #24]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b7c:	e03d      	b.n	8008bfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b84:	f043 0301 	orr.w	r3, r3, #1
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	617b      	str	r3, [r7, #20]
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	e7fd      	b.n	8008bb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb8:	699a      	ldr	r2, [r3, #24]
 8008bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbc:	18d1      	adds	r1, r2, r3
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc4:	f7ff ff04 	bl	80089d0 <prvInsertTimerInActiveList>
					break;
 8008bc8:	e017      	b.n	8008bfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bda:	f000 fbe5 	bl	80093a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bde:	e00c      	b.n	8008bfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bf2:	e002      	b.n	8008bfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008bf4:	bf00      	nop
 8008bf6:	e000      	b.n	8008bfa <prvProcessReceivedCommands+0x1a6>
					break;
 8008bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bfa:	4b08      	ldr	r3, [pc, #32]	@ (8008c1c <prvProcessReceivedCommands+0x1c8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	1d39      	adds	r1, r7, #4
 8008c00:	2200      	movs	r2, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fbd4 	bl	80073b0 <xQueueReceive>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f47f af26 	bne.w	8008a5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	3730      	adds	r7, #48	@ 0x30
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200055f0 	.word	0x200055f0

08008c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c26:	e049      	b.n	8008cbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c28:	4b2e      	ldr	r3, [pc, #184]	@ (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c32:	4b2c      	ldr	r3, [pc, #176]	@ (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fe f8e1 	bl	8006e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d02f      	beq.n	8008cbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4413      	add	r3, r2
 8008c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d90e      	bls.n	8008c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f7fe f886 	bl	8006d96 <vListInsert>
 8008c8a:	e017      	b.n	8008cbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	2300      	movs	r3, #0
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	2100      	movs	r1, #0
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fd58 	bl	800874c <xTimerGenericCommand>
 8008c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10b      	bne.n	8008cbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	603b      	str	r3, [r7, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	e7fd      	b.n	8008cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cbc:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1b0      	bne.n	8008c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cc6:	4b07      	ldr	r3, [pc, #28]	@ (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ccc:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <prvSwitchTimerLists+0xc8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a04      	ldr	r2, [pc, #16]	@ (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008cd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cd4:	4a04      	ldr	r2, [pc, #16]	@ (8008ce8 <prvSwitchTimerLists+0xc8>)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	6013      	str	r3, [r2, #0]
}
 8008cda:	bf00      	nop
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	200055e8 	.word	0x200055e8
 8008ce8:	200055ec 	.word	0x200055ec

08008cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cf2:	f000 f969 	bl	8008fc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cf6:	4b15      	ldr	r3, [pc, #84]	@ (8008d4c <prvCheckForValidListAndQueue+0x60>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d120      	bne.n	8008d40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cfe:	4814      	ldr	r0, [pc, #80]	@ (8008d50 <prvCheckForValidListAndQueue+0x64>)
 8008d00:	f7fd fff8 	bl	8006cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d04:	4813      	ldr	r0, [pc, #76]	@ (8008d54 <prvCheckForValidListAndQueue+0x68>)
 8008d06:	f7fd fff5 	bl	8006cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d0a:	4b13      	ldr	r3, [pc, #76]	@ (8008d58 <prvCheckForValidListAndQueue+0x6c>)
 8008d0c:	4a10      	ldr	r2, [pc, #64]	@ (8008d50 <prvCheckForValidListAndQueue+0x64>)
 8008d0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d10:	4b12      	ldr	r3, [pc, #72]	@ (8008d5c <prvCheckForValidListAndQueue+0x70>)
 8008d12:	4a10      	ldr	r2, [pc, #64]	@ (8008d54 <prvCheckForValidListAndQueue+0x68>)
 8008d14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d16:	2300      	movs	r3, #0
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4b11      	ldr	r3, [pc, #68]	@ (8008d60 <prvCheckForValidListAndQueue+0x74>)
 8008d1c:	4a11      	ldr	r2, [pc, #68]	@ (8008d64 <prvCheckForValidListAndQueue+0x78>)
 8008d1e:	2110      	movs	r1, #16
 8008d20:	200a      	movs	r0, #10
 8008d22:	f7fe f905 	bl	8006f30 <xQueueGenericCreateStatic>
 8008d26:	4603      	mov	r3, r0
 8008d28:	4a08      	ldr	r2, [pc, #32]	@ (8008d4c <prvCheckForValidListAndQueue+0x60>)
 8008d2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d2c:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <prvCheckForValidListAndQueue+0x60>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d34:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <prvCheckForValidListAndQueue+0x60>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	490b      	ldr	r1, [pc, #44]	@ (8008d68 <prvCheckForValidListAndQueue+0x7c>)
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fd2a 	bl	8007794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d40:	f000 f974 	bl	800902c <vPortExitCritical>
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200055f0 	.word	0x200055f0
 8008d50:	200055c0 	.word	0x200055c0
 8008d54:	200055d4 	.word	0x200055d4
 8008d58:	200055e8 	.word	0x200055e8
 8008d5c:	200055ec 	.word	0x200055ec
 8008d60:	2000569c 	.word	0x2000569c
 8008d64:	200055fc 	.word	0x200055fc
 8008d68:	08017584 	.word	0x08017584

08008d6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3b04      	subs	r3, #4
 8008d7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f023 0201 	bic.w	r2, r3, #1
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3b04      	subs	r3, #4
 8008d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8008dd0 <pxPortInitialiseStack+0x64>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3b14      	subs	r3, #20
 8008da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3b04      	subs	r3, #4
 8008db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f06f 0202 	mvn.w	r2, #2
 8008dba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3b20      	subs	r3, #32
 8008dc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	08008dd5 	.word	0x08008dd5

08008dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dde:	4b13      	ldr	r3, [pc, #76]	@ (8008e2c <prvTaskExitError+0x58>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008de6:	d00b      	beq.n	8008e00 <prvTaskExitError+0x2c>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60fb      	str	r3, [r7, #12]
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	e7fd      	b.n	8008dfc <prvTaskExitError+0x28>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60bb      	str	r3, [r7, #8]
}
 8008e12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e14:	bf00      	nop
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0fc      	beq.n	8008e16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000054 	.word	0x20000054

08008e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e30:	4b07      	ldr	r3, [pc, #28]	@ (8008e50 <pxCurrentTCBConst2>)
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	6808      	ldr	r0, [r1, #0]
 8008e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	f380 8809 	msr	PSP, r0
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8811 	msr	BASEPRI, r0
 8008e4a:	4770      	bx	lr
 8008e4c:	f3af 8000 	nop.w

08008e50 <pxCurrentTCBConst2>:
 8008e50:	200050c0 	.word	0x200050c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e58:	4808      	ldr	r0, [pc, #32]	@ (8008e7c <prvPortStartFirstTask+0x24>)
 8008e5a:	6800      	ldr	r0, [r0, #0]
 8008e5c:	6800      	ldr	r0, [r0, #0]
 8008e5e:	f380 8808 	msr	MSP, r0
 8008e62:	f04f 0000 	mov.w	r0, #0
 8008e66:	f380 8814 	msr	CONTROL, r0
 8008e6a:	b662      	cpsie	i
 8008e6c:	b661      	cpsie	f
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	df00      	svc	0
 8008e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e7a:	bf00      	nop
 8008e7c:	e000ed08 	.word	0xe000ed08

08008e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e86:	4b47      	ldr	r3, [pc, #284]	@ (8008fa4 <xPortStartScheduler+0x124>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a47      	ldr	r2, [pc, #284]	@ (8008fa8 <xPortStartScheduler+0x128>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d10b      	bne.n	8008ea8 <xPortStartScheduler+0x28>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	613b      	str	r3, [r7, #16]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa4 <xPortStartScheduler+0x124>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a3f      	ldr	r2, [pc, #252]	@ (8008fac <xPortStartScheduler+0x12c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d10b      	bne.n	8008eca <xPortStartScheduler+0x4a>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60fb      	str	r3, [r7, #12]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008eca:	4b39      	ldr	r3, [pc, #228]	@ (8008fb0 <xPortStartScheduler+0x130>)
 8008ecc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	22ff      	movs	r2, #255	@ 0xff
 8008eda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4b31      	ldr	r3, [pc, #196]	@ (8008fb4 <xPortStartScheduler+0x134>)
 8008ef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ef2:	4b31      	ldr	r3, [pc, #196]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008ef4:	2207      	movs	r2, #7
 8008ef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ef8:	e009      	b.n	8008f0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008efa:	4b2f      	ldr	r3, [pc, #188]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	4a2d      	ldr	r2, [pc, #180]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008f02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f16:	2b80      	cmp	r3, #128	@ 0x80
 8008f18:	d0ef      	beq.n	8008efa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f1a:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f1c3 0307 	rsb	r3, r3, #7
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d00b      	beq.n	8008f3e <xPortStartScheduler+0xbe>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	60bb      	str	r3, [r7, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	021b      	lsls	r3, r3, #8
 8008f44:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008f46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f48:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f50:	4a19      	ldr	r2, [pc, #100]	@ (8008fb8 <xPortStartScheduler+0x138>)
 8008f52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f5c:	4b17      	ldr	r3, [pc, #92]	@ (8008fbc <xPortStartScheduler+0x13c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a16      	ldr	r2, [pc, #88]	@ (8008fbc <xPortStartScheduler+0x13c>)
 8008f62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f68:	4b14      	ldr	r3, [pc, #80]	@ (8008fbc <xPortStartScheduler+0x13c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a13      	ldr	r2, [pc, #76]	@ (8008fbc <xPortStartScheduler+0x13c>)
 8008f6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f74:	f000 f8da 	bl	800912c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f78:	4b11      	ldr	r3, [pc, #68]	@ (8008fc0 <xPortStartScheduler+0x140>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f7e:	f000 f8f9 	bl	8009174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f82:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <xPortStartScheduler+0x144>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc4 <xPortStartScheduler+0x144>)
 8008f88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f8e:	f7ff ff63 	bl	8008e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f92:	f7ff f817 	bl	8007fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8008f96:	f7ff ff1d 	bl	8008dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	e000ed00 	.word	0xe000ed00
 8008fa8:	410fc271 	.word	0x410fc271
 8008fac:	410fc270 	.word	0x410fc270
 8008fb0:	e000e400 	.word	0xe000e400
 8008fb4:	200056ec 	.word	0x200056ec
 8008fb8:	200056f0 	.word	0x200056f0
 8008fbc:	e000ed20 	.word	0xe000ed20
 8008fc0:	20000054 	.word	0x20000054
 8008fc4:	e000ef34 	.word	0xe000ef34

08008fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	607b      	str	r3, [r7, #4]
}
 8008fe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fe2:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <vPortEnterCritical+0x5c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8009024 <vPortEnterCritical+0x5c>)
 8008fea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fec:	4b0d      	ldr	r3, [pc, #52]	@ (8009024 <vPortEnterCritical+0x5c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d110      	bne.n	8009016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <vPortEnterCritical+0x60>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00b      	beq.n	8009016 <vPortEnterCritical+0x4e>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	603b      	str	r3, [r7, #0]
}
 8009010:	bf00      	nop
 8009012:	bf00      	nop
 8009014:	e7fd      	b.n	8009012 <vPortEnterCritical+0x4a>
	}
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000054 	.word	0x20000054
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009032:	4b12      	ldr	r3, [pc, #72]	@ (800907c <vPortExitCritical+0x50>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <vPortExitCritical+0x26>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	607b      	str	r3, [r7, #4]
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	e7fd      	b.n	800904e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009052:	4b0a      	ldr	r3, [pc, #40]	@ (800907c <vPortExitCritical+0x50>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3b01      	subs	r3, #1
 8009058:	4a08      	ldr	r2, [pc, #32]	@ (800907c <vPortExitCritical+0x50>)
 800905a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800905c:	4b07      	ldr	r3, [pc, #28]	@ (800907c <vPortExitCritical+0x50>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <vPortExitCritical+0x44>
 8009064:	2300      	movs	r3, #0
 8009066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	f383 8811 	msr	BASEPRI, r3
}
 800906e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	20000054 	.word	0x20000054

08009080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009080:	f3ef 8009 	mrs	r0, PSP
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	4b15      	ldr	r3, [pc, #84]	@ (80090e0 <pxCurrentTCBConst>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	f01e 0f10 	tst.w	lr, #16
 8009090:	bf08      	it	eq
 8009092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	6010      	str	r0, [r2, #0]
 800909c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80090a4:	f380 8811 	msr	BASEPRI, r0
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f7fe ff88 	bl	8007fc4 <vTaskSwitchContext>
 80090b4:	f04f 0000 	mov.w	r0, #0
 80090b8:	f380 8811 	msr	BASEPRI, r0
 80090bc:	bc09      	pop	{r0, r3}
 80090be:	6819      	ldr	r1, [r3, #0]
 80090c0:	6808      	ldr	r0, [r1, #0]
 80090c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c6:	f01e 0f10 	tst.w	lr, #16
 80090ca:	bf08      	it	eq
 80090cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090d0:	f380 8809 	msr	PSP, r0
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	f3af 8000 	nop.w

080090e0 <pxCurrentTCBConst>:
 80090e0:	200050c0 	.word	0x200050c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	607b      	str	r3, [r7, #4]
}
 8009100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009102:	f7fe fea5 	bl	8007e50 <xTaskIncrementTick>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <xPortSysTickHandler+0x40>)
 800910e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	f383 8811 	msr	BASEPRI, r3
}
 800911e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009130:	4b0b      	ldr	r3, [pc, #44]	@ (8009160 <vPortSetupTimerInterrupt+0x34>)
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009136:	4b0b      	ldr	r3, [pc, #44]	@ (8009164 <vPortSetupTimerInterrupt+0x38>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800913c:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <vPortSetupTimerInterrupt+0x3c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a0a      	ldr	r2, [pc, #40]	@ (800916c <vPortSetupTimerInterrupt+0x40>)
 8009142:	fba2 2303 	umull	r2, r3, r2, r3
 8009146:	099b      	lsrs	r3, r3, #6
 8009148:	4a09      	ldr	r2, [pc, #36]	@ (8009170 <vPortSetupTimerInterrupt+0x44>)
 800914a:	3b01      	subs	r3, #1
 800914c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800914e:	4b04      	ldr	r3, [pc, #16]	@ (8009160 <vPortSetupTimerInterrupt+0x34>)
 8009150:	2207      	movs	r2, #7
 8009152:	601a      	str	r2, [r3, #0]
}
 8009154:	bf00      	nop
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	e000e010 	.word	0xe000e010
 8009164:	e000e018 	.word	0xe000e018
 8009168:	20000048 	.word	0x20000048
 800916c:	10624dd3 	.word	0x10624dd3
 8009170:	e000e014 	.word	0xe000e014

08009174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009184 <vPortEnableVFP+0x10>
 8009178:	6801      	ldr	r1, [r0, #0]
 800917a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800917e:	6001      	str	r1, [r0, #0]
 8009180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009182:	bf00      	nop
 8009184:	e000ed88 	.word	0xe000ed88

08009188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800918e:	f3ef 8305 	mrs	r3, IPSR
 8009192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b0f      	cmp	r3, #15
 8009198:	d915      	bls.n	80091c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800919a:	4a18      	ldr	r2, [pc, #96]	@ (80091fc <vPortValidateInterruptPriority+0x74>)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091a4:	4b16      	ldr	r3, [pc, #88]	@ (8009200 <vPortValidateInterruptPriority+0x78>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	7afa      	ldrb	r2, [r7, #11]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d20b      	bcs.n	80091c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	607b      	str	r3, [r7, #4]
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <vPortValidateInterruptPriority+0x7c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80091ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009208 <vPortValidateInterruptPriority+0x80>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d90b      	bls.n	80091ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	603b      	str	r3, [r7, #0]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <vPortValidateInterruptPriority+0x62>
	}
 80091ee:	bf00      	nop
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	e000e3f0 	.word	0xe000e3f0
 8009200:	200056ec 	.word	0x200056ec
 8009204:	e000ed0c 	.word	0xe000ed0c
 8009208:	200056f0 	.word	0x200056f0

0800920c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	@ 0x28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009218:	f7fe fd5e 	bl	8007cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800921c:	4b5c      	ldr	r3, [pc, #368]	@ (8009390 <pvPortMalloc+0x184>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009224:	f000 f924 	bl	8009470 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009228:	4b5a      	ldr	r3, [pc, #360]	@ (8009394 <pvPortMalloc+0x188>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4013      	ands	r3, r2
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8095 	bne.w	8009360 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01e      	beq.n	800927a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800923c:	2208      	movs	r2, #8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4413      	add	r3, r2
 8009242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d015      	beq.n	800927a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f023 0307 	bic.w	r3, r3, #7
 8009254:	3308      	adds	r3, #8
 8009256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <pvPortMalloc+0x6e>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	617b      	str	r3, [r7, #20]
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	e7fd      	b.n	8009276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d06f      	beq.n	8009360 <pvPortMalloc+0x154>
 8009280:	4b45      	ldr	r3, [pc, #276]	@ (8009398 <pvPortMalloc+0x18c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d86a      	bhi.n	8009360 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800928a:	4b44      	ldr	r3, [pc, #272]	@ (800939c <pvPortMalloc+0x190>)
 800928c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800928e:	4b43      	ldr	r3, [pc, #268]	@ (800939c <pvPortMalloc+0x190>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009294:	e004      	b.n	80092a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d903      	bls.n	80092b2 <pvPortMalloc+0xa6>
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f1      	bne.n	8009296 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092b2:	4b37      	ldr	r3, [pc, #220]	@ (8009390 <pvPortMalloc+0x184>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d051      	beq.n	8009360 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2208      	movs	r2, #8
 80092c2:	4413      	add	r3, r2
 80092c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	1ad2      	subs	r2, r2, r3
 80092d6:	2308      	movs	r3, #8
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	429a      	cmp	r2, r3
 80092dc:	d920      	bls.n	8009320 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4413      	add	r3, r2
 80092e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <pvPortMalloc+0xfc>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	613b      	str	r3, [r7, #16]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	1ad2      	subs	r2, r2, r3
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800931a:	69b8      	ldr	r0, [r7, #24]
 800931c:	f000 f90a 	bl	8009534 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009320:	4b1d      	ldr	r3, [pc, #116]	@ (8009398 <pvPortMalloc+0x18c>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	4a1b      	ldr	r2, [pc, #108]	@ (8009398 <pvPortMalloc+0x18c>)
 800932c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800932e:	4b1a      	ldr	r3, [pc, #104]	@ (8009398 <pvPortMalloc+0x18c>)
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	4b1b      	ldr	r3, [pc, #108]	@ (80093a0 <pvPortMalloc+0x194>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d203      	bcs.n	8009342 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800933a:	4b17      	ldr	r3, [pc, #92]	@ (8009398 <pvPortMalloc+0x18c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a18      	ldr	r2, [pc, #96]	@ (80093a0 <pvPortMalloc+0x194>)
 8009340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	4b13      	ldr	r3, [pc, #76]	@ (8009394 <pvPortMalloc+0x188>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	431a      	orrs	r2, r3
 800934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009356:	4b13      	ldr	r3, [pc, #76]	@ (80093a4 <pvPortMalloc+0x198>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	4a11      	ldr	r2, [pc, #68]	@ (80093a4 <pvPortMalloc+0x198>)
 800935e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009360:	f7fe fcc8 	bl	8007cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00b      	beq.n	8009386 <pvPortMalloc+0x17a>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60fb      	str	r3, [r7, #12]
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <pvPortMalloc+0x176>
	return pvReturn;
 8009386:	69fb      	ldr	r3, [r7, #28]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3728      	adds	r7, #40	@ 0x28
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	200092fc 	.word	0x200092fc
 8009394:	20009310 	.word	0x20009310
 8009398:	20009300 	.word	0x20009300
 800939c:	200092f4 	.word	0x200092f4
 80093a0:	20009304 	.word	0x20009304
 80093a4:	20009308 	.word	0x20009308

080093a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d04f      	beq.n	800945a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093ba:	2308      	movs	r3, #8
 80093bc:	425b      	negs	r3, r3
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	4413      	add	r3, r2
 80093c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	4b25      	ldr	r3, [pc, #148]	@ (8009464 <vPortFree+0xbc>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4013      	ands	r3, r2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10b      	bne.n	80093ee <vPortFree+0x46>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	60fb      	str	r3, [r7, #12]
}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	e7fd      	b.n	80093ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <vPortFree+0x66>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	60bb      	str	r3, [r7, #8]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	4b14      	ldr	r3, [pc, #80]	@ (8009464 <vPortFree+0xbc>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4013      	ands	r3, r2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01e      	beq.n	800945a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d11a      	bne.n	800945a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	4b0e      	ldr	r3, [pc, #56]	@ (8009464 <vPortFree+0xbc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	43db      	mvns	r3, r3
 800942e:	401a      	ands	r2, r3
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009434:	f7fe fc50 	bl	8007cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	4b0a      	ldr	r3, [pc, #40]	@ (8009468 <vPortFree+0xc0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4413      	add	r3, r2
 8009442:	4a09      	ldr	r2, [pc, #36]	@ (8009468 <vPortFree+0xc0>)
 8009444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009446:	6938      	ldr	r0, [r7, #16]
 8009448:	f000 f874 	bl	8009534 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800944c:	4b07      	ldr	r3, [pc, #28]	@ (800946c <vPortFree+0xc4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	4a06      	ldr	r2, [pc, #24]	@ (800946c <vPortFree+0xc4>)
 8009454:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009456:	f7fe fc4d 	bl	8007cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800945a:	bf00      	nop
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20009310 	.word	0x20009310
 8009468:	20009300 	.word	0x20009300
 800946c:	2000930c 	.word	0x2000930c

08009470 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009476:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800947a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800947c:	4b27      	ldr	r3, [pc, #156]	@ (800951c <prvHeapInit+0xac>)
 800947e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00c      	beq.n	80094a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3307      	adds	r3, #7
 800948e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0307 	bic.w	r3, r3, #7
 8009496:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	4a1f      	ldr	r2, [pc, #124]	@ (800951c <prvHeapInit+0xac>)
 80094a0:	4413      	add	r3, r2
 80094a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009520 <prvHeapInit+0xb0>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009520 <prvHeapInit+0xb0>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	4413      	add	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094bc:	2208      	movs	r2, #8
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0307 	bic.w	r3, r3, #7
 80094ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <prvHeapInit+0xb4>)
 80094d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094d2:	4b14      	ldr	r3, [pc, #80]	@ (8009524 <prvHeapInit+0xb4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2200      	movs	r2, #0
 80094d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094da:	4b12      	ldr	r3, [pc, #72]	@ (8009524 <prvHeapInit+0xb4>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <prvHeapInit+0xb4>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009528 <prvHeapInit+0xb8>)
 80094fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	4a09      	ldr	r2, [pc, #36]	@ (800952c <prvHeapInit+0xbc>)
 8009506:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009508:	4b09      	ldr	r3, [pc, #36]	@ (8009530 <prvHeapInit+0xc0>)
 800950a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800950e:	601a      	str	r2, [r3, #0]
}
 8009510:	bf00      	nop
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	200056f4 	.word	0x200056f4
 8009520:	200092f4 	.word	0x200092f4
 8009524:	200092fc 	.word	0x200092fc
 8009528:	20009304 	.word	0x20009304
 800952c:	20009300 	.word	0x20009300
 8009530:	20009310 	.word	0x20009310

08009534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800953c:	4b28      	ldr	r3, [pc, #160]	@ (80095e0 <prvInsertBlockIntoFreeList+0xac>)
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e002      	b.n	8009548 <prvInsertBlockIntoFreeList+0x14>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	429a      	cmp	r2, r3
 8009550:	d8f7      	bhi.n	8009542 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	4413      	add	r3, r2
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d108      	bne.n	8009576 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	441a      	add	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d118      	bne.n	80095bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b15      	ldr	r3, [pc, #84]	@ (80095e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d00d      	beq.n	80095b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	441a      	add	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	e008      	b.n	80095c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095b2:	4b0c      	ldr	r3, [pc, #48]	@ (80095e4 <prvInsertBlockIntoFreeList+0xb0>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e003      	b.n	80095c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d002      	beq.n	80095d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095d2:	bf00      	nop
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	200092f4 	.word	0x200092f4
 80095e4:	200092fc 	.word	0x200092fc

080095e8 <rcl_get_zero_initialized_publisher>:
 80095e8:	4b01      	ldr	r3, [pc, #4]	@ (80095f0 <rcl_get_zero_initialized_publisher+0x8>)
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	080175ec 	.word	0x080175ec

080095f4 <rcl_publisher_init>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	b088      	sub	sp, #32
 80095fa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	d069      	beq.n	80096d4 <rcl_publisher_init+0xe0>
 8009600:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009604:	4604      	mov	r4, r0
 8009606:	4648      	mov	r0, r9
 8009608:	460e      	mov	r6, r1
 800960a:	4690      	mov	r8, r2
 800960c:	461f      	mov	r7, r3
 800960e:	f001 f81d 	bl	800a64c <rcutils_allocator_is_valid>
 8009612:	2800      	cmp	r0, #0
 8009614:	d05e      	beq.n	80096d4 <rcl_publisher_init+0xe0>
 8009616:	2c00      	cmp	r4, #0
 8009618:	d05c      	beq.n	80096d4 <rcl_publisher_init+0xe0>
 800961a:	f8d4 a000 	ldr.w	sl, [r4]
 800961e:	f1ba 0f00 	cmp.w	sl, #0
 8009622:	d004      	beq.n	800962e <rcl_publisher_init+0x3a>
 8009624:	2764      	movs	r7, #100	@ 0x64
 8009626:	4638      	mov	r0, r7
 8009628:	b008      	add	sp, #32
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	4630      	mov	r0, r6
 8009630:	f006 fb8a 	bl	800fd48 <rcl_node_is_valid>
 8009634:	2800      	cmp	r0, #0
 8009636:	d052      	beq.n	80096de <rcl_publisher_init+0xea>
 8009638:	f1b8 0f00 	cmp.w	r8, #0
 800963c:	d04a      	beq.n	80096d4 <rcl_publisher_init+0xe0>
 800963e:	2f00      	cmp	r7, #0
 8009640:	d048      	beq.n	80096d4 <rcl_publisher_init+0xe0>
 8009642:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8009646:	aa07      	add	r2, sp, #28
 8009648:	9205      	str	r2, [sp, #20]
 800964a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800964e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009652:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009656:	f8cd a01c 	str.w	sl, [sp, #28]
 800965a:	4639      	mov	r1, r7
 800965c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009660:	4630      	mov	r0, r6
 8009662:	f006 fbc5 	bl	800fdf0 <rcl_node_resolve_name>
 8009666:	4607      	mov	r7, r0
 8009668:	2800      	cmp	r0, #0
 800966a:	d14f      	bne.n	800970c <rcl_publisher_init+0x118>
 800966c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800966e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009670:	20c8      	movs	r0, #200	@ 0xc8
 8009672:	4798      	blx	r3
 8009674:	6020      	str	r0, [r4, #0]
 8009676:	2800      	cmp	r0, #0
 8009678:	d04e      	beq.n	8009718 <rcl_publisher_init+0x124>
 800967a:	4630      	mov	r0, r6
 800967c:	f006 fb86 	bl	800fd8c <rcl_node_get_rmw_handle>
 8009680:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	9a07      	ldr	r2, [sp, #28]
 8009688:	6827      	ldr	r7, [r4, #0]
 800968a:	462b      	mov	r3, r5
 800968c:	4641      	mov	r1, r8
 800968e:	f001 f8ed 	bl	800a86c <rmw_create_publisher>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8009698:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800969c:	b370      	cbz	r0, 80096fc <rcl_publisher_init+0x108>
 800969e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80096a2:	f001 f9c1 	bl	800aa28 <rmw_publisher_get_actual_qos>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	4607      	mov	r7, r0
 80096aa:	b9d0      	cbnz	r0, 80096e2 <rcl_publisher_init+0xee>
 80096ac:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80096b0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80096b4:	4629      	mov	r1, r5
 80096b6:	2270      	movs	r2, #112	@ 0x70
 80096b8:	4618      	mov	r0, r3
 80096ba:	f00d f862 	bl	8016782 <memcpy>
 80096be:	6832      	ldr	r2, [r6, #0]
 80096c0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80096c4:	9807      	ldr	r0, [sp, #28]
 80096c6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80096c8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80096ca:	4798      	blx	r3
 80096cc:	4638      	mov	r0, r7
 80096ce:	b008      	add	sp, #32
 80096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d4:	270b      	movs	r7, #11
 80096d6:	4638      	mov	r0, r7
 80096d8:	b008      	add	sp, #32
 80096da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096de:	27c8      	movs	r7, #200	@ 0xc8
 80096e0:	e7a1      	b.n	8009626 <rcl_publisher_init+0x32>
 80096e2:	b18b      	cbz	r3, 8009708 <rcl_publisher_init+0x114>
 80096e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80096e8:	b142      	cbz	r2, 80096fc <rcl_publisher_init+0x108>
 80096ea:	4630      	mov	r0, r6
 80096ec:	f006 fb4e 	bl	800fd8c <rcl_node_get_rmw_handle>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80096f6:	f001 f9a7 	bl	800aa48 <rmw_destroy_publisher>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80096fe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009700:	4618      	mov	r0, r3
 8009702:	4790      	blx	r2
 8009704:	2300      	movs	r3, #0
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	2701      	movs	r7, #1
 800970a:	e7db      	b.n	80096c4 <rcl_publisher_init+0xd0>
 800970c:	2867      	cmp	r0, #103	@ 0x67
 800970e:	d0d9      	beq.n	80096c4 <rcl_publisher_init+0xd0>
 8009710:	2869      	cmp	r0, #105	@ 0x69
 8009712:	d003      	beq.n	800971c <rcl_publisher_init+0x128>
 8009714:	280a      	cmp	r0, #10
 8009716:	d1f7      	bne.n	8009708 <rcl_publisher_init+0x114>
 8009718:	270a      	movs	r7, #10
 800971a:	e7d3      	b.n	80096c4 <rcl_publisher_init+0xd0>
 800971c:	2767      	movs	r7, #103	@ 0x67
 800971e:	e7d1      	b.n	80096c4 <rcl_publisher_init+0xd0>

08009720 <rcl_publisher_get_default_options>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	4d14      	ldr	r5, [pc, #80]	@ (8009774 <rcl_publisher_get_default_options+0x54>)
 8009724:	4914      	ldr	r1, [pc, #80]	@ (8009778 <rcl_publisher_get_default_options+0x58>)
 8009726:	b088      	sub	sp, #32
 8009728:	4604      	mov	r4, r0
 800972a:	2250      	movs	r2, #80	@ 0x50
 800972c:	4628      	mov	r0, r5
 800972e:	f00d f828 	bl	8016782 <memcpy>
 8009732:	a802      	add	r0, sp, #8
 8009734:	f000 ff7c 	bl	800a630 <rcutils_get_default_allocator>
 8009738:	f10d 0c08 	add.w	ip, sp, #8
 800973c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009740:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009744:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009748:	466e      	mov	r6, sp
 800974a:	f8dc 3000 	ldr.w	r3, [ip]
 800974e:	f8ce 3000 	str.w	r3, [lr]
 8009752:	4630      	mov	r0, r6
 8009754:	f001 f80c 	bl	800a770 <rmw_get_default_publisher_options>
 8009758:	e896 0003 	ldmia.w	r6, {r0, r1}
 800975c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009760:	e883 0003 	stmia.w	r3, {r0, r1}
 8009764:	2270      	movs	r2, #112	@ 0x70
 8009766:	4629      	mov	r1, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f00d f80a 	bl	8016782 <memcpy>
 800976e:	4620      	mov	r0, r4
 8009770:	b008      	add	sp, #32
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	20009318 	.word	0x20009318
 8009778:	080175f0 	.word	0x080175f0

0800977c <rcl_publish>:
 800977c:	b1f8      	cbz	r0, 80097be <rcl_publish+0x42>
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4604      	mov	r4, r0
 8009784:	b1b3      	cbz	r3, 80097b4 <rcl_publish+0x38>
 8009786:	4616      	mov	r6, r2
 8009788:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800978c:	b192      	cbz	r2, 80097b4 <rcl_publish+0x38>
 800978e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009792:	460d      	mov	r5, r1
 8009794:	f005 ff14 	bl	800f5c0 <rcl_context_is_valid>
 8009798:	b160      	cbz	r0, 80097b4 <rcl_publish+0x38>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80097a0:	b140      	cbz	r0, 80097b4 <rcl_publish+0x38>
 80097a2:	b155      	cbz	r5, 80097ba <rcl_publish+0x3e>
 80097a4:	4632      	mov	r2, r6
 80097a6:	4629      	mov	r1, r5
 80097a8:	f001 f800 	bl	800a7ac <rmw_publish>
 80097ac:	3800      	subs	r0, #0
 80097ae:	bf18      	it	ne
 80097b0:	2001      	movne	r0, #1
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	200b      	movs	r0, #11
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
 80097be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80097c2:	4770      	bx	lr

080097c4 <rcl_publisher_is_valid>:
 80097c4:	b1a0      	cbz	r0, 80097f0 <rcl_publisher_is_valid+0x2c>
 80097c6:	6803      	ldr	r3, [r0, #0]
 80097c8:	b510      	push	{r4, lr}
 80097ca:	4604      	mov	r4, r0
 80097cc:	b173      	cbz	r3, 80097ec <rcl_publisher_is_valid+0x28>
 80097ce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80097d2:	b15a      	cbz	r2, 80097ec <rcl_publisher_is_valid+0x28>
 80097d4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80097d8:	f005 fef2 	bl	800f5c0 <rcl_context_is_valid>
 80097dc:	b130      	cbz	r0, 80097ec <rcl_publisher_is_valid+0x28>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80097e4:	3800      	subs	r0, #0
 80097e6:	bf18      	it	ne
 80097e8:	2001      	movne	r0, #1
 80097ea:	bd10      	pop	{r4, pc}
 80097ec:	2000      	movs	r0, #0
 80097ee:	bd10      	pop	{r4, pc}
 80097f0:	2000      	movs	r0, #0
 80097f2:	4770      	bx	lr

080097f4 <rcl_publisher_is_valid_except_context>:
 80097f4:	b130      	cbz	r0, 8009804 <rcl_publisher_is_valid_except_context+0x10>
 80097f6:	6800      	ldr	r0, [r0, #0]
 80097f8:	b120      	cbz	r0, 8009804 <rcl_publisher_is_valid_except_context+0x10>
 80097fa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80097fe:	3800      	subs	r0, #0
 8009800:	bf18      	it	ne
 8009802:	2001      	movne	r0, #1
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop

08009808 <_rclc_check_for_new_data>:
 8009808:	2800      	cmp	r0, #0
 800980a:	d046      	beq.n	800989a <_rclc_check_for_new_data+0x92>
 800980c:	b510      	push	{r4, lr}
 800980e:	7802      	ldrb	r2, [r0, #0]
 8009810:	b084      	sub	sp, #16
 8009812:	4603      	mov	r3, r0
 8009814:	2a0a      	cmp	r2, #10
 8009816:	d842      	bhi.n	800989e <_rclc_check_for_new_data+0x96>
 8009818:	e8df f002 	tbb	[pc, r2]
 800981c:	14181212 	.word	0x14181212
 8009820:	06060614 	.word	0x06060614
 8009824:	2e1a      	.short	0x2e1a
 8009826:	16          	.byte	0x16
 8009827:	00          	.byte	0x00
 8009828:	6a0a      	ldr	r2, [r1, #32]
 800982a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800982c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009830:	2000      	movs	r0, #0
 8009832:	1a12      	subs	r2, r2, r0
 8009834:	bf18      	it	ne
 8009836:	2201      	movne	r2, #1
 8009838:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800983c:	b004      	add	sp, #16
 800983e:	bd10      	pop	{r4, pc}
 8009840:	680a      	ldr	r2, [r1, #0]
 8009842:	e7f2      	b.n	800982a <_rclc_check_for_new_data+0x22>
 8009844:	698a      	ldr	r2, [r1, #24]
 8009846:	e7f0      	b.n	800982a <_rclc_check_for_new_data+0x22>
 8009848:	688a      	ldr	r2, [r1, #8]
 800984a:	e7ee      	b.n	800982a <_rclc_check_for_new_data+0x22>
 800984c:	690a      	ldr	r2, [r1, #16]
 800984e:	e7ec      	b.n	800982a <_rclc_check_for_new_data+0x22>
 8009850:	685c      	ldr	r4, [r3, #4]
 8009852:	4608      	mov	r0, r1
 8009854:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009858:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800985c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009860:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800986a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800986e:	f104 0110 	add.w	r1, r4, #16
 8009872:	f007 fe25 	bl	80114c0 <rcl_action_client_wait_set_get_entities_ready>
 8009876:	e7e1      	b.n	800983c <_rclc_check_for_new_data+0x34>
 8009878:	685c      	ldr	r4, [r3, #4]
 800987a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800987e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009882:	e9cd 3200 	strd	r3, r2, [sp]
 8009886:	4608      	mov	r0, r1
 8009888:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800988c:	f104 0220 	add.w	r2, r4, #32
 8009890:	f104 0110 	add.w	r1, r4, #16
 8009894:	f008 f82c 	bl	80118f0 <rcl_action_server_wait_set_get_entities_ready>
 8009898:	e7d0      	b.n	800983c <_rclc_check_for_new_data+0x34>
 800989a:	200b      	movs	r0, #11
 800989c:	4770      	bx	lr
 800989e:	2001      	movs	r0, #1
 80098a0:	e7cc      	b.n	800983c <_rclc_check_for_new_data+0x34>
 80098a2:	bf00      	nop

080098a4 <_rclc_take_new_data>:
 80098a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a6:	b09b      	sub	sp, #108	@ 0x6c
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f000 8088 	beq.w	80099be <_rclc_take_new_data+0x11a>
 80098ae:	7803      	ldrb	r3, [r0, #0]
 80098b0:	4604      	mov	r4, r0
 80098b2:	2b0a      	cmp	r3, #10
 80098b4:	f200 8167 	bhi.w	8009b86 <_rclc_take_new_data+0x2e2>
 80098b8:	e8df f003 	tbb	[pc, r3]
 80098bc:	44152d2d 	.word	0x44152d2d
 80098c0:	19191944 	.word	0x19191944
 80098c4:	065a      	.short	0x065a
 80098c6:	15          	.byte	0x15
 80098c7:	00          	.byte	0x00
 80098c8:	6840      	ldr	r0, [r0, #4]
 80098ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f040 80b2 	bne.w	8009a38 <_rclc_take_new_data+0x194>
 80098d4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f040 80e4 	bne.w	8009aa6 <_rclc_take_new_data+0x202>
 80098de:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d16f      	bne.n	80099c6 <_rclc_take_new_data+0x122>
 80098e6:	2500      	movs	r5, #0
 80098e8:	4628      	mov	r0, r5
 80098ea:	b01b      	add	sp, #108	@ 0x6c
 80098ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80098f0:	6a0b      	ldr	r3, [r1, #32]
 80098f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0f5      	beq.n	80098e6 <_rclc_take_new_data+0x42>
 80098fa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80098fe:	f104 0110 	add.w	r1, r4, #16
 8009902:	f006 fb23 	bl	800ff4c <rcl_take_request>
 8009906:	4605      	mov	r5, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d0ec      	beq.n	80098e6 <_rclc_take_new_data+0x42>
 800990c:	f240 2359 	movw	r3, #601	@ 0x259
 8009910:	4298      	cmp	r0, r3
 8009912:	d013      	beq.n	800993c <_rclc_take_new_data+0x98>
 8009914:	e029      	b.n	800996a <_rclc_take_new_data+0xc6>
 8009916:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009918:	680b      	ldr	r3, [r1, #0]
 800991a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0e1      	beq.n	80098e6 <_rclc_take_new_data+0x42>
 8009922:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009926:	2300      	movs	r3, #0
 8009928:	aa0a      	add	r2, sp, #40	@ 0x28
 800992a:	f006 fc4d 	bl	80101c8 <rcl_take>
 800992e:	4605      	mov	r5, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	d0d9      	beq.n	80098e8 <_rclc_take_new_data+0x44>
 8009934:	f240 1391 	movw	r3, #401	@ 0x191
 8009938:	4298      	cmp	r0, r3
 800993a:	d116      	bne.n	800996a <_rclc_take_new_data+0xc6>
 800993c:	2300      	movs	r3, #0
 800993e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009942:	e7d1      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009944:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009946:	698b      	ldr	r3, [r1, #24]
 8009948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0ca      	beq.n	80098e6 <_rclc_take_new_data+0x42>
 8009950:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009954:	f104 0110 	add.w	r1, r4, #16
 8009958:	f005 fdc2 	bl	800f4e0 <rcl_take_response>
 800995c:	4605      	mov	r5, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d0c1      	beq.n	80098e6 <_rclc_take_new_data+0x42>
 8009962:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009966:	4298      	cmp	r0, r3
 8009968:	d0be      	beq.n	80098e8 <_rclc_take_new_data+0x44>
 800996a:	f000 fe95 	bl	800a698 <rcutils_reset_error>
 800996e:	e7bb      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009970:	6840      	ldr	r0, [r0, #4]
 8009972:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009976:	2b00      	cmp	r3, #0
 8009978:	d17d      	bne.n	8009a76 <_rclc_take_new_data+0x1d2>
 800997a:	69c3      	ldr	r3, [r0, #28]
 800997c:	b11b      	cbz	r3, 8009986 <_rclc_take_new_data+0xe2>
 800997e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d144      	bne.n	8009a10 <_rclc_take_new_data+0x16c>
 8009986:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800998a:	2b00      	cmp	r3, #0
 800998c:	f040 80ac 	bne.w	8009ae8 <_rclc_take_new_data+0x244>
 8009990:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009994:	2b00      	cmp	r3, #0
 8009996:	d0a6      	beq.n	80098e6 <_rclc_take_new_data+0x42>
 8009998:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800999a:	a90a      	add	r1, sp, #40	@ 0x28
 800999c:	3010      	adds	r0, #16
 800999e:	f007 fc67 	bl	8011270 <rcl_action_take_result_response>
 80099a2:	4605      	mov	r5, r0
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d1e0      	bne.n	800996a <_rclc_take_new_data+0xc6>
 80099a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099ac:	6860      	ldr	r0, [r4, #4]
 80099ae:	f008 f8c3 	bl	8011b38 <rclc_action_find_handle_by_result_request_sequence_number>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d098      	beq.n	80098e8 <_rclc_take_new_data+0x44>
 80099b6:	2301      	movs	r3, #1
 80099b8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80099bc:	e794      	b.n	80098e8 <_rclc_take_new_data+0x44>
 80099be:	250b      	movs	r5, #11
 80099c0:	4628      	mov	r0, r5
 80099c2:	b01b      	add	sp, #108	@ 0x6c
 80099c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c6:	ae04      	add	r6, sp, #16
 80099c8:	aa0a      	add	r2, sp, #40	@ 0x28
 80099ca:	3010      	adds	r0, #16
 80099cc:	4631      	mov	r1, r6
 80099ce:	f007 fec3 	bl	8011758 <rcl_action_take_cancel_request>
 80099d2:	4605      	mov	r5, r0
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1c8      	bne.n	800996a <_rclc_take_new_data+0xc6>
 80099d8:	6860      	ldr	r0, [r4, #4]
 80099da:	a90a      	add	r1, sp, #40	@ 0x28
 80099dc:	f008 f86a 	bl	8011ab4 <rclc_action_find_goal_handle_by_uuid>
 80099e0:	4607      	mov	r7, r0
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f000 80bb 	beq.w	8009b5e <_rclc_take_new_data+0x2ba>
 80099e8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80099ec:	2101      	movs	r1, #1
 80099ee:	f007 ffeb 	bl	80119c8 <rcl_action_transition_goal_state>
 80099f2:	2803      	cmp	r0, #3
 80099f4:	4684      	mov	ip, r0
 80099f6:	f040 80a7 	bne.w	8009b48 <_rclc_take_new_data+0x2a4>
 80099fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80099fc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a02:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009a06:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a0a:	f887 c008 	strb.w	ip, [r7, #8]
 8009a0e:	e76b      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009a10:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a12:	3010      	adds	r0, #16
 8009a14:	f007 fcac 	bl	8011370 <rcl_action_take_feedback>
 8009a18:	4605      	mov	r5, r0
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1a5      	bne.n	800996a <_rclc_take_new_data+0xc6>
 8009a1e:	6860      	ldr	r0, [r4, #4]
 8009a20:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a22:	f008 f847 	bl	8011ab4 <rclc_action_find_goal_handle_by_uuid>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f000 80a3 	beq.w	8009b74 <_rclc_take_new_data+0x2d0>
 8009a2e:	2201      	movs	r2, #1
 8009a30:	6860      	ldr	r0, [r4, #4]
 8009a32:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009a36:	e7a6      	b.n	8009986 <_rclc_take_new_data+0xe2>
 8009a38:	f008 f816 	bl	8011a68 <rclc_action_take_goal_handle>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	6860      	ldr	r0, [r4, #4]
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	f43f af47 	beq.w	80098d4 <_rclc_take_new_data+0x30>
 8009a46:	6070      	str	r0, [r6, #4]
 8009a48:	69f2      	ldr	r2, [r6, #28]
 8009a4a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009a4e:	3010      	adds	r0, #16
 8009a50:	f007 fdca 	bl	80115e8 <rcl_action_take_goal_request>
 8009a54:	4605      	mov	r5, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f040 808e 	bne.w	8009b78 <_rclc_take_new_data+0x2d4>
 8009a5c:	69f7      	ldr	r7, [r6, #28]
 8009a5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009a60:	7235      	strb	r5, [r6, #8]
 8009a62:	f8c6 0009 	str.w	r0, [r6, #9]
 8009a66:	f8c6 100d 	str.w	r1, [r6, #13]
 8009a6a:	6860      	ldr	r0, [r4, #4]
 8009a6c:	f8c6 2011 	str.w	r2, [r6, #17]
 8009a70:	f8c6 3015 	str.w	r3, [r6, #21]
 8009a74:	e72e      	b.n	80098d4 <_rclc_take_new_data+0x30>
 8009a76:	aa04      	add	r2, sp, #16
 8009a78:	a90a      	add	r1, sp, #40	@ 0x28
 8009a7a:	3010      	adds	r0, #16
 8009a7c:	f007 fb80 	bl	8011180 <rcl_action_take_goal_response>
 8009a80:	4605      	mov	r5, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f47f af71 	bne.w	800996a <_rclc_take_new_data+0xc6>
 8009a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a8c:	6860      	ldr	r0, [r4, #4]
 8009a8e:	f008 f841 	bl	8011b14 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009a92:	b130      	cbz	r0, 8009aa2 <_rclc_take_new_data+0x1fe>
 8009a94:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009a98:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f880 2020 	strb.w	r2, [r0, #32]
 8009aa2:	6860      	ldr	r0, [r4, #4]
 8009aa4:	e769      	b.n	800997a <_rclc_take_new_data+0xd6>
 8009aa6:	aa04      	add	r2, sp, #16
 8009aa8:	3010      	adds	r0, #16
 8009aaa:	a90a      	add	r1, sp, #40	@ 0x28
 8009aac:	f007 fe14 	bl	80116d8 <rcl_action_take_result_request>
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	f47f af59 	bne.w	800996a <_rclc_take_new_data+0xc6>
 8009ab8:	6860      	ldr	r0, [r4, #4]
 8009aba:	a904      	add	r1, sp, #16
 8009abc:	f007 fffa 	bl	8011ab4 <rclc_action_find_goal_handle_by_uuid>
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	b160      	cbz	r0, 8009ade <_rclc_take_new_data+0x23a>
 8009ac4:	ad0a      	add	r5, sp, #40	@ 0x28
 8009ac6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009acc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ace:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ad2:	f04f 0c02 	mov.w	ip, #2
 8009ad6:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ada:	f887 c008 	strb.w	ip, [r7, #8]
 8009ade:	6860      	ldr	r0, [r4, #4]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009ae6:	e6fa      	b.n	80098de <_rclc_take_new_data+0x3a>
 8009ae8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009aec:	a90a      	add	r1, sp, #40	@ 0x28
 8009aee:	3010      	adds	r0, #16
 8009af0:	f007 fbfe 	bl	80112f0 <rcl_action_take_cancel_response>
 8009af4:	4605      	mov	r5, r0
 8009af6:	2800      	cmp	r0, #0
 8009af8:	f47f af37 	bne.w	800996a <_rclc_take_new_data+0xc6>
 8009afc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b00:	6860      	ldr	r0, [r4, #4]
 8009b02:	f008 f82b 	bl	8011b5c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009b06:	4606      	mov	r6, r0
 8009b08:	6860      	ldr	r0, [r4, #4]
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	f43f af40 	beq.w	8009990 <_rclc_take_new_data+0xec>
 8009b10:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b12:	2701      	movs	r7, #1
 8009b14:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f43f af3a 	beq.w	8009990 <_rclc_take_new_data+0xec>
 8009b1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b1e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009b22:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b26:	f007 ffc5 	bl	8011ab4 <rclc_action_find_goal_handle_by_uuid>
 8009b2a:	b138      	cbz	r0, 8009b3c <_rclc_take_new_data+0x298>
 8009b2c:	6860      	ldr	r0, [r4, #4]
 8009b2e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b30:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009b34:	3501      	adds	r5, #1
 8009b36:	42ab      	cmp	r3, r5
 8009b38:	d8f0      	bhi.n	8009b1c <_rclc_take_new_data+0x278>
 8009b3a:	e729      	b.n	8009990 <_rclc_take_new_data+0xec>
 8009b3c:	6860      	ldr	r0, [r4, #4]
 8009b3e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009b40:	3501      	adds	r5, #1
 8009b42:	42ab      	cmp	r3, r5
 8009b44:	d8ea      	bhi.n	8009b1c <_rclc_take_new_data+0x278>
 8009b46:	e723      	b.n	8009990 <_rclc_take_new_data+0xec>
 8009b48:	ab06      	add	r3, sp, #24
 8009b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b50:	2103      	movs	r1, #3
 8009b52:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009b56:	6860      	ldr	r0, [r4, #4]
 8009b58:	f008 f876 	bl	8011c48 <rclc_action_server_goal_cancel_reject>
 8009b5c:	e6c4      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009b5e:	ab06      	add	r3, sp, #24
 8009b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b62:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b66:	2102      	movs	r1, #2
 8009b68:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009b6c:	6860      	ldr	r0, [r4, #4]
 8009b6e:	f008 f86b 	bl	8011c48 <rclc_action_server_goal_cancel_reject>
 8009b72:	e6b9      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009b74:	6860      	ldr	r0, [r4, #4]
 8009b76:	e706      	b.n	8009986 <_rclc_take_new_data+0xe2>
 8009b78:	6860      	ldr	r0, [r4, #4]
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	f007 ff84 	bl	8011a88 <rclc_action_remove_used_goal_handle>
 8009b80:	f000 fd8a 	bl	800a698 <rcutils_reset_error>
 8009b84:	e6b0      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009b86:	2501      	movs	r5, #1
 8009b88:	e6ae      	b.n	80098e8 <_rclc_take_new_data+0x44>
 8009b8a:	bf00      	nop

08009b8c <_rclc_execute.part.0>:
 8009b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8e:	7803      	ldrb	r3, [r0, #0]
 8009b90:	b087      	sub	sp, #28
 8009b92:	4604      	mov	r4, r0
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	f200 8136 	bhi.w	8009e06 <_rclc_execute.part.0+0x27a>
 8009b9a:	e8df f003 	tbb	[pc, r3]
 8009b9e:	435e      	.short	0x435e
 8009ba0:	06a1664f 	.word	0x06a1664f
 8009ba4:	6c1e0606 	.word	0x6c1e0606
 8009ba8:	59          	.byte	0x59
 8009ba9:	00          	.byte	0x00
 8009baa:	2b06      	cmp	r3, #6
 8009bac:	f000 8122 	beq.w	8009df4 <_rclc_execute.part.0+0x268>
 8009bb0:	2b07      	cmp	r3, #7
 8009bb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009bb4:	f040 8118 	bne.w	8009de8 <_rclc_execute.part.0+0x25c>
 8009bb8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009bbc:	6880      	ldr	r0, [r0, #8]
 8009bbe:	4798      	blx	r3
 8009bc0:	f104 0110 	add.w	r1, r4, #16
 8009bc4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009bc6:	6860      	ldr	r0, [r4, #4]
 8009bc8:	f006 fa00 	bl	800ffcc <rcl_send_response>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d033      	beq.n	8009c38 <_rclc_execute.part.0+0xac>
 8009bd0:	9005      	str	r0, [sp, #20]
 8009bd2:	f000 fd61 	bl	800a698 <rcutils_reset_error>
 8009bd6:	9805      	ldr	r0, [sp, #20]
 8009bd8:	e02e      	b.n	8009c38 <_rclc_execute.part.0+0xac>
 8009bda:	6840      	ldr	r0, [r0, #4]
 8009bdc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 8086 	beq.w	8009cf2 <_rclc_execute.part.0+0x166>
 8009be6:	2600      	movs	r6, #0
 8009be8:	2701      	movs	r7, #1
 8009bea:	e004      	b.n	8009bf6 <_rclc_execute.part.0+0x6a>
 8009bec:	f007 ff16 	bl	8011a1c <rclc_action_send_result_request>
 8009bf0:	b998      	cbnz	r0, 8009c1a <_rclc_execute.part.0+0x8e>
 8009bf2:	722f      	strb	r7, [r5, #8]
 8009bf4:	6860      	ldr	r0, [r4, #4]
 8009bf6:	f007 ffc3 	bl	8011b80 <rclc_action_find_first_handle_with_goal_response>
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d077      	beq.n	8009cf0 <_rclc_execute.part.0+0x164>
 8009c00:	6863      	ldr	r3, [r4, #4]
 8009c02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009c0a:	f885 6020 	strb.w	r6, [r5, #32]
 8009c0e:	4798      	blx	r3
 8009c10:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009c14:	4628      	mov	r0, r5
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e8      	bne.n	8009bec <_rclc_execute.part.0+0x60>
 8009c1a:	6860      	ldr	r0, [r4, #4]
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f007 ff33 	bl	8011a88 <rclc_action_remove_used_goal_handle>
 8009c22:	e7e7      	b.n	8009bf4 <_rclc_execute.part.0+0x68>
 8009c24:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009c28:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	f000 80c9 	beq.w	8009dc4 <_rclc_execute.part.0+0x238>
 8009c32:	6880      	ldr	r0, [r0, #8]
 8009c34:	4798      	blx	r3
 8009c36:	2000      	movs	r0, #0
 8009c38:	b007      	add	sp, #28
 8009c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3c:	6840      	ldr	r0, [r0, #4]
 8009c3e:	f006 fbc7 	bl	80103d0 <rcl_timer_call>
 8009c42:	f240 3321 	movw	r3, #801	@ 0x321
 8009c46:	4298      	cmp	r0, r3
 8009c48:	d004      	beq.n	8009c54 <_rclc_execute.part.0+0xc8>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d0f4      	beq.n	8009c38 <_rclc_execute.part.0+0xac>
 8009c4e:	e7bf      	b.n	8009bd0 <_rclc_execute.part.0+0x44>
 8009c50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c52:	4798      	blx	r3
 8009c54:	2000      	movs	r0, #0
 8009c56:	b007      	add	sp, #28
 8009c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009c5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c60:	b925      	cbnz	r5, 8009c6c <_rclc_execute.part.0+0xe0>
 8009c62:	4628      	mov	r0, r5
 8009c64:	4798      	blx	r3
 8009c66:	4628      	mov	r0, r5
 8009c68:	e7e6      	b.n	8009c38 <_rclc_execute.part.0+0xac>
 8009c6a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c6c:	68a0      	ldr	r0, [r4, #8]
 8009c6e:	4798      	blx	r3
 8009c70:	2000      	movs	r0, #0
 8009c72:	b007      	add	sp, #28
 8009c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c76:	6840      	ldr	r0, [r0, #4]
 8009c78:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009c7c:	bb3b      	cbnz	r3, 8009cce <_rclc_execute.part.0+0x142>
 8009c7e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d07b      	beq.n	8009d7e <_rclc_execute.part.0+0x1f2>
 8009c86:	f640 0634 	movw	r6, #2100	@ 0x834
 8009c8a:	2701      	movs	r7, #1
 8009c8c:	e007      	b.n	8009c9e <_rclc_execute.part.0+0x112>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f007 ff8e 	bl	8011bb0 <rclc_action_server_response_goal_request>
 8009c94:	6860      	ldr	r0, [r4, #4]
 8009c96:	4629      	mov	r1, r5
 8009c98:	f007 fef6 	bl	8011a88 <rclc_action_remove_used_goal_handle>
 8009c9c:	6860      	ldr	r0, [r4, #4]
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f007 ff20 	bl	8011ae4 <rclc_action_find_first_handle_by_status>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d066      	beq.n	8009d78 <_rclc_execute.part.0+0x1ec>
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	4798      	blx	r3
 8009cb2:	42b0      	cmp	r0, r6
 8009cb4:	f04f 0100 	mov.w	r1, #0
 8009cb8:	d1e9      	bne.n	8009c8e <_rclc_execute.part.0+0x102>
 8009cba:	2101      	movs	r1, #1
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f007 ff77 	bl	8011bb0 <rclc_action_server_response_goal_request>
 8009cc2:	722f      	strb	r7, [r5, #8]
 8009cc4:	e7ea      	b.n	8009c9c <_rclc_execute.part.0+0x110>
 8009cc6:	6848      	ldr	r0, [r1, #4]
 8009cc8:	f007 fede 	bl	8011a88 <rclc_action_remove_used_goal_handle>
 8009ccc:	6860      	ldr	r0, [r4, #4]
 8009cce:	f007 ff15 	bl	8011afc <rclc_action_find_first_terminated_handle>
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d1f6      	bne.n	8009cc6 <_rclc_execute.part.0+0x13a>
 8009cd8:	6860      	ldr	r0, [r4, #4]
 8009cda:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009cde:	e7ce      	b.n	8009c7e <_rclc_execute.part.0+0xf2>
 8009ce0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ce2:	6880      	ldr	r0, [r0, #8]
 8009ce4:	f104 0110 	add.w	r1, r4, #16
 8009ce8:	4798      	blx	r3
 8009cea:	2000      	movs	r0, #0
 8009cec:	b007      	add	sp, #28
 8009cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf0:	6860      	ldr	r0, [r4, #4]
 8009cf2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009cf6:	b18b      	cbz	r3, 8009d1c <_rclc_execute.part.0+0x190>
 8009cf8:	68c5      	ldr	r5, [r0, #12]
 8009cfa:	b32d      	cbz	r5, 8009d48 <_rclc_execute.part.0+0x1bc>
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009d02:	b143      	cbz	r3, 8009d16 <_rclc_execute.part.0+0x18a>
 8009d04:	69c3      	ldr	r3, [r0, #28]
 8009d06:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009d0a:	b123      	cbz	r3, 8009d16 <_rclc_execute.part.0+0x18a>
 8009d0c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009d0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d10:	4628      	mov	r0, r5
 8009d12:	4798      	blx	r3
 8009d14:	6860      	ldr	r0, [r4, #4]
 8009d16:	682d      	ldr	r5, [r5, #0]
 8009d18:	2d00      	cmp	r5, #0
 8009d1a:	d1f0      	bne.n	8009cfe <_rclc_execute.part.0+0x172>
 8009d1c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009d20:	b193      	cbz	r3, 8009d48 <_rclc_execute.part.0+0x1bc>
 8009d22:	68c5      	ldr	r5, [r0, #12]
 8009d24:	b185      	cbz	r5, 8009d48 <_rclc_execute.part.0+0x1bc>
 8009d26:	2600      	movs	r6, #0
 8009d28:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009d2c:	b14b      	cbz	r3, 8009d42 <_rclc_execute.part.0+0x1b6>
 8009d2e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009d30:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009d34:	b12b      	cbz	r3, 8009d42 <_rclc_execute.part.0+0x1b6>
 8009d36:	4628      	mov	r0, r5
 8009d38:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009d3c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d3e:	4798      	blx	r3
 8009d40:	6860      	ldr	r0, [r4, #4]
 8009d42:	682d      	ldr	r5, [r5, #0]
 8009d44:	2d00      	cmp	r5, #0
 8009d46:	d1ef      	bne.n	8009d28 <_rclc_execute.part.0+0x19c>
 8009d48:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d081      	beq.n	8009c54 <_rclc_execute.part.0+0xc8>
 8009d50:	2700      	movs	r7, #0
 8009d52:	e00b      	b.n	8009d6c <_rclc_execute.part.0+0x1e0>
 8009d54:	6863      	ldr	r3, [r4, #4]
 8009d56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009d5a:	6a1e      	ldr	r6, [r3, #32]
 8009d5c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009d60:	47b0      	blx	r6
 8009d62:	6860      	ldr	r0, [r4, #4]
 8009d64:	4629      	mov	r1, r5
 8009d66:	f007 fe8f 	bl	8011a88 <rclc_action_remove_used_goal_handle>
 8009d6a:	6860      	ldr	r0, [r4, #4]
 8009d6c:	f007 ff14 	bl	8011b98 <rclc_action_find_first_handle_with_result_response>
 8009d70:	4605      	mov	r5, r0
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d1ee      	bne.n	8009d54 <_rclc_execute.part.0+0x1c8>
 8009d76:	e76d      	b.n	8009c54 <_rclc_execute.part.0+0xc8>
 8009d78:	6860      	ldr	r0, [r4, #4]
 8009d7a:	f880 5020 	strb.w	r5, [r0, #32]
 8009d7e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f43f af66 	beq.w	8009c54 <_rclc_execute.part.0+0xc8>
 8009d88:	68c5      	ldr	r5, [r0, #12]
 8009d8a:	b1b5      	cbz	r5, 8009dba <_rclc_execute.part.0+0x22e>
 8009d8c:	2602      	movs	r6, #2
 8009d8e:	e001      	b.n	8009d94 <_rclc_execute.part.0+0x208>
 8009d90:	682d      	ldr	r5, [r5, #0]
 8009d92:	b195      	cbz	r5, 8009dba <_rclc_execute.part.0+0x22e>
 8009d94:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d1f9      	bne.n	8009d90 <_rclc_execute.part.0+0x204>
 8009d9c:	69c3      	ldr	r3, [r0, #28]
 8009d9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009da0:	4628      	mov	r0, r5
 8009da2:	4798      	blx	r3
 8009da4:	4603      	mov	r3, r0
 8009da6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009daa:	4628      	mov	r0, r5
 8009dac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009db0:	b163      	cbz	r3, 8009dcc <_rclc_execute.part.0+0x240>
 8009db2:	f007 ff1d 	bl	8011bf0 <rclc_action_server_goal_cancel_accept>
 8009db6:	6860      	ldr	r0, [r4, #4]
 8009db8:	e7ea      	b.n	8009d90 <_rclc_execute.part.0+0x204>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	e739      	b.n	8009c38 <_rclc_execute.part.0+0xac>
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	4798      	blx	r3
 8009dc8:	4628      	mov	r0, r5
 8009dca:	e735      	b.n	8009c38 <_rclc_execute.part.0+0xac>
 8009dcc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009dce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009dd2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dda:	6860      	ldr	r0, [r4, #4]
 8009ddc:	2101      	movs	r1, #1
 8009dde:	f007 ff33 	bl	8011c48 <rclc_action_server_goal_cancel_reject>
 8009de2:	722e      	strb	r6, [r5, #8]
 8009de4:	6860      	ldr	r0, [r4, #4]
 8009de6:	e7d3      	b.n	8009d90 <_rclc_execute.part.0+0x204>
 8009de8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009dea:	6880      	ldr	r0, [r0, #8]
 8009dec:	4798      	blx	r3
 8009dee:	f104 0110 	add.w	r1, r4, #16
 8009df2:	e6e7      	b.n	8009bc4 <_rclc_execute.part.0+0x38>
 8009df4:	f100 0110 	add.w	r1, r0, #16
 8009df8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009dfa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009dfc:	6880      	ldr	r0, [r0, #8]
 8009dfe:	9105      	str	r1, [sp, #20]
 8009e00:	4798      	blx	r3
 8009e02:	9905      	ldr	r1, [sp, #20]
 8009e04:	e6de      	b.n	8009bc4 <_rclc_execute.part.0+0x38>
 8009e06:	2001      	movs	r0, #1
 8009e08:	e716      	b.n	8009c38 <_rclc_execute.part.0+0xac>
 8009e0a:	bf00      	nop

08009e0c <rclc_executor_trigger_any>:
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d03f      	beq.n	8009e90 <rclc_executor_trigger_any+0x84>
 8009e10:	2900      	cmp	r1, #0
 8009e12:	d03e      	beq.n	8009e92 <rclc_executor_trigger_any+0x86>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d037      	beq.n	8009e90 <rclc_executor_trigger_any+0x84>
 8009e20:	b430      	push	{r4, r5}
 8009e22:	f893 c000 	ldrb.w	ip, [r3]
 8009e26:	f1bc 0f08 	cmp.w	ip, #8
 8009e2a:	d11e      	bne.n	8009e6a <rclc_executor_trigger_any+0x5e>
 8009e2c:	685c      	ldr	r4, [r3, #4]
 8009e2e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009e30:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009e34:	d105      	bne.n	8009e42 <rclc_executor_trigger_any+0x36>
 8009e36:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009e3a:	b910      	cbnz	r0, 8009e42 <rclc_executor_trigger_any+0x36>
 8009e3c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009e40:	b128      	cbz	r0, 8009e4e <rclc_executor_trigger_any+0x42>
 8009e42:	bc30      	pop	{r4, r5}
 8009e44:	4770      	bx	lr
 8009e46:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d1f9      	bne.n	8009e42 <rclc_executor_trigger_any+0x36>
 8009e4e:	3201      	adds	r2, #1
 8009e50:	4291      	cmp	r1, r2
 8009e52:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009e56:	d018      	beq.n	8009e8a <rclc_executor_trigger_any+0x7e>
 8009e58:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d0f0      	beq.n	8009e42 <rclc_executor_trigger_any+0x36>
 8009e60:	f893 c000 	ldrb.w	ip, [r3]
 8009e64:	f1bc 0f08 	cmp.w	ip, #8
 8009e68:	d0e0      	beq.n	8009e2c <rclc_executor_trigger_any+0x20>
 8009e6a:	f1bc 0f09 	cmp.w	ip, #9
 8009e6e:	d1ea      	bne.n	8009e46 <rclc_executor_trigger_any+0x3a>
 8009e70:	685c      	ldr	r4, [r3, #4]
 8009e72:	6a25      	ldr	r5, [r4, #32]
 8009e74:	2d00      	cmp	r5, #0
 8009e76:	d1e4      	bne.n	8009e42 <rclc_executor_trigger_any+0x36>
 8009e78:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d1e0      	bne.n	8009e42 <rclc_executor_trigger_any+0x36>
 8009e80:	3201      	adds	r2, #1
 8009e82:	4291      	cmp	r1, r2
 8009e84:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009e88:	d1e6      	bne.n	8009e58 <rclc_executor_trigger_any+0x4c>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	bc30      	pop	{r4, r5}
 8009e8e:	4770      	bx	lr
 8009e90:	4770      	bx	lr
 8009e92:	4608      	mov	r0, r1
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop

08009e98 <rclc_executor_init>:
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d05f      	beq.n	8009f5c <rclc_executor_init+0xc4>
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	b0b0      	sub	sp, #192	@ 0xc0
 8009ea4:	2900      	cmp	r1, #0
 8009ea6:	d051      	beq.n	8009f4c <rclc_executor_init+0xb4>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	4616      	mov	r6, r2
 8009eae:	461f      	mov	r7, r3
 8009eb0:	f000 fbcc 	bl	800a64c <rcutils_allocator_is_valid>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d049      	beq.n	8009f4c <rclc_executor_init+0xb4>
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d047      	beq.n	8009f4c <rclc_executor_init+0xb4>
 8009ebc:	492c      	ldr	r1, [pc, #176]	@ (8009f70 <rclc_executor_init+0xd8>)
 8009ebe:	2288      	movs	r2, #136	@ 0x88
 8009ec0:	a80e      	add	r0, sp, #56	@ 0x38
 8009ec2:	f00c fc5e 	bl	8016782 <memcpy>
 8009ec6:	a90e      	add	r1, sp, #56	@ 0x38
 8009ec8:	2288      	movs	r2, #136	@ 0x88
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f00c fc59 	bl	8016782 <memcpy>
 8009ed0:	602c      	str	r4, [r5, #0]
 8009ed2:	4668      	mov	r0, sp
 8009ed4:	60ae      	str	r6, [r5, #8]
 8009ed6:	466c      	mov	r4, sp
 8009ed8:	f006 fb82 	bl	80105e0 <rcl_get_zero_initialized_wait_set>
 8009edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ede:	f105 0c14 	add.w	ip, r5, #20
 8009ee2:	f8d7 8000 	ldr.w	r8, [r7]
 8009ee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009eec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ef2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ef6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009f68 <rclc_executor_init+0xd0>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	f8cc 3000 	str.w	r3, [ip]
 8009f00:	6939      	ldr	r1, [r7, #16]
 8009f02:	612f      	str	r7, [r5, #16]
 8009f04:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009f08:	01b0      	lsls	r0, r6, #6
 8009f0a:	47c0      	blx	r8
 8009f0c:	6068      	str	r0, [r5, #4]
 8009f0e:	b338      	cbz	r0, 8009f60 <rclc_executor_init+0xc8>
 8009f10:	2400      	movs	r4, #0
 8009f12:	e000      	b.n	8009f16 <rclc_executor_init+0x7e>
 8009f14:	6868      	ldr	r0, [r5, #4]
 8009f16:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	3401      	adds	r4, #1
 8009f1e:	f000 fa6b 	bl	800a3f8 <rclc_executor_handle_init>
 8009f22:	42a6      	cmp	r6, r4
 8009f24:	d1f6      	bne.n	8009f14 <rclc_executor_init+0x7c>
 8009f26:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009f2a:	f000 fa5b 	bl	800a3e4 <rclc_executor_handle_counters_zero_init>
 8009f2e:	4a11      	ldr	r2, [pc, #68]	@ (8009f74 <rclc_executor_init+0xdc>)
 8009f30:	686b      	ldr	r3, [r5, #4]
 8009f32:	2000      	movs	r0, #0
 8009f34:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009f38:	b163      	cbz	r3, 8009f54 <rclc_executor_init+0xbc>
 8009f3a:	692b      	ldr	r3, [r5, #16]
 8009f3c:	b153      	cbz	r3, 8009f54 <rclc_executor_init+0xbc>
 8009f3e:	68ab      	ldr	r3, [r5, #8]
 8009f40:	b143      	cbz	r3, 8009f54 <rclc_executor_init+0xbc>
 8009f42:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009f46:	b030      	add	sp, #192	@ 0xc0
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	200b      	movs	r0, #11
 8009f4e:	b030      	add	sp, #192	@ 0xc0
 8009f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f54:	4618      	mov	r0, r3
 8009f56:	b030      	add	sp, #192	@ 0xc0
 8009f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5c:	200b      	movs	r0, #11
 8009f5e:	4770      	bx	lr
 8009f60:	200a      	movs	r0, #10
 8009f62:	e7f4      	b.n	8009f4e <rclc_executor_init+0xb6>
 8009f64:	f3af 8000 	nop.w
 8009f68:	3b9aca00 	.word	0x3b9aca00
 8009f6c:	00000000 	.word	0x00000000
 8009f70:	08017640 	.word	0x08017640
 8009f74:	08009e0d 	.word	0x08009e0d

08009f78 <rclc_executor_add_subscription>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009f7e:	b338      	cbz	r0, 8009fd0 <rclc_executor_add_subscription+0x58>
 8009f80:	b331      	cbz	r1, 8009fd0 <rclc_executor_add_subscription+0x58>
 8009f82:	b32a      	cbz	r2, 8009fd0 <rclc_executor_add_subscription+0x58>
 8009f84:	b323      	cbz	r3, 8009fd0 <rclc_executor_add_subscription+0x58>
 8009f86:	4604      	mov	r4, r0
 8009f88:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009f8c:	42a8      	cmp	r0, r5
 8009f8e:	d301      	bcc.n	8009f94 <rclc_executor_add_subscription+0x1c>
 8009f90:	2001      	movs	r0, #1
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f94:	6866      	ldr	r6, [r4, #4]
 8009f96:	0187      	lsls	r7, r0, #6
 8009f98:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	55f5      	strb	r5, [r6, r7]
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009fa6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009faa:	2301      	movs	r3, #1
 8009fac:	f104 0514 	add.w	r5, r4, #20
 8009fb0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009fb4:	f88c e001 	strb.w	lr, [ip, #1]
 8009fb8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009fbc:	60e0      	str	r0, [r4, #12]
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f006 fb22 	bl	8010608 <rcl_wait_set_is_valid>
 8009fc4:	b930      	cbnz	r0, 8009fd4 <rclc_executor_add_subscription+0x5c>
 8009fc6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009fc8:	3301      	adds	r3, #1
 8009fca:	2000      	movs	r0, #0
 8009fcc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	200b      	movs	r0, #11
 8009fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f006 fb1d 	bl	8010614 <rcl_wait_set_fini>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d0f3      	beq.n	8009fc6 <rclc_executor_add_subscription+0x4e>
 8009fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fe0 <rclc_executor_prepare>:
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d044      	beq.n	800a06e <rclc_executor_prepare+0x8e>
 8009fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe6:	f100 0514 	add.w	r5, r0, #20
 8009fea:	b09b      	sub	sp, #108	@ 0x6c
 8009fec:	4604      	mov	r4, r0
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f006 fb0a 	bl	8010608 <rcl_wait_set_is_valid>
 8009ff4:	b110      	cbz	r0, 8009ffc <rclc_executor_prepare+0x1c>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	b01b      	add	sp, #108	@ 0x6c
 8009ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f006 fb09 	bl	8010614 <rcl_wait_set_fini>
 800a002:	2800      	cmp	r0, #0
 800a004:	d130      	bne.n	800a068 <rclc_executor_prepare+0x88>
 800a006:	a80c      	add	r0, sp, #48	@ 0x30
 800a008:	f006 faea 	bl	80105e0 <rcl_get_zero_initialized_wait_set>
 800a00c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a010:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a014:	46ae      	mov	lr, r5
 800a016:	6927      	ldr	r7, [r4, #16]
 800a018:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a01c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a020:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a024:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a028:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a02c:	f8dc 3000 	ldr.w	r3, [ip]
 800a030:	f8ce 3000 	str.w	r3, [lr]
 800a034:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a036:	ae04      	add	r6, sp, #16
 800a038:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6822      	ldr	r2, [r4, #0]
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a042:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a044:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a048:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a04c:	e9cd 2100 	strd	r2, r1, [sp]
 800a050:	4628      	mov	r0, r5
 800a052:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a054:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a056:	f006 fddb 	bl	8010c10 <rcl_wait_set_init>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d0cc      	beq.n	8009ff8 <rclc_executor_prepare+0x18>
 800a05e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a060:	f000 fb1a 	bl	800a698 <rcutils_reset_error>
 800a064:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a066:	e7c7      	b.n	8009ff8 <rclc_executor_prepare+0x18>
 800a068:	f000 fb16 	bl	800a698 <rcutils_reset_error>
 800a06c:	e7cb      	b.n	800a006 <rclc_executor_prepare+0x26>
 800a06e:	200b      	movs	r0, #11
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop

0800a074 <rclc_executor_spin_some.part.0>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	f100 0614 	add.w	r6, r0, #20
 800a07c:	b083      	sub	sp, #12
 800a07e:	4691      	mov	r9, r2
 800a080:	4698      	mov	r8, r3
 800a082:	4605      	mov	r5, r0
 800a084:	f7ff ffac 	bl	8009fe0 <rclc_executor_prepare>
 800a088:	4630      	mov	r0, r6
 800a08a:	f006 fb8f 	bl	80107ac <rcl_wait_set_clear>
 800a08e:	4607      	mov	r7, r0
 800a090:	2800      	cmp	r0, #0
 800a092:	f040 80ed 	bne.w	800a270 <rclc_executor_spin_some.part.0+0x1fc>
 800a096:	68ab      	ldr	r3, [r5, #8]
 800a098:	4604      	mov	r4, r0
 800a09a:	b303      	cbz	r3, 800a0de <rclc_executor_spin_some.part.0+0x6a>
 800a09c:	6869      	ldr	r1, [r5, #4]
 800a09e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a0a2:	01a2      	lsls	r2, r4, #6
 800a0a4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a0a8:	b1cb      	cbz	r3, 800a0de <rclc_executor_spin_some.part.0+0x6a>
 800a0aa:	5c8b      	ldrb	r3, [r1, r2]
 800a0ac:	2b0a      	cmp	r3, #10
 800a0ae:	f200 80d8 	bhi.w	800a262 <rclc_executor_spin_some.part.0+0x1ee>
 800a0b2:	e8df f003 	tbb	[pc, r3]
 800a0b6:	9c9c      	.short	0x9c9c
 800a0b8:	068c8ca7 	.word	0x068c8ca7
 800a0bc:	bdc90606 	.word	0xbdc90606
 800a0c0:	b2          	.byte	0xb2
 800a0c1:	00          	.byte	0x00
 800a0c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a0c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f006 feb6 	bl	8010e3c <rcl_wait_set_add_service>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	f040 8086 	bne.w	800a1e2 <rclc_executor_spin_some.part.0+0x16e>
 800a0d6:	68ab      	ldr	r3, [r5, #8]
 800a0d8:	3401      	adds	r4, #1
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	d3de      	bcc.n	800a09c <rclc_executor_spin_some.part.0+0x28>
 800a0de:	4643      	mov	r3, r8
 800a0e0:	464a      	mov	r2, r9
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f006 fed8 	bl	8010e98 <rcl_wait>
 800a0e8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 80c7 	beq.w	800a280 <rclc_executor_spin_some.part.0+0x20c>
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	f040 80b5 	bne.w	800a262 <rclc_executor_spin_some.part.0+0x1ee>
 800a0f8:	68ab      	ldr	r3, [r5, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 8159 	beq.w	800a3b2 <rclc_executor_spin_some.part.0+0x33e>
 800a100:	2400      	movs	r4, #0
 800a102:	46a0      	mov	r8, r4
 800a104:	f240 1991 	movw	r9, #401	@ 0x191
 800a108:	e00a      	b.n	800a120 <rclc_executor_spin_some.part.0+0xac>
 800a10a:	f7ff fb7d 	bl	8009808 <_rclc_check_for_new_data>
 800a10e:	4604      	mov	r4, r0
 800a110:	b110      	cbz	r0, 800a118 <rclc_executor_spin_some.part.0+0xa4>
 800a112:	4548      	cmp	r0, r9
 800a114:	f040 80b2 	bne.w	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a118:	68ab      	ldr	r3, [r5, #8]
 800a11a:	4598      	cmp	r8, r3
 800a11c:	f080 8126 	bcs.w	800a36c <rclc_executor_spin_some.part.0+0x2f8>
 800a120:	686a      	ldr	r2, [r5, #4]
 800a122:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a126:	4631      	mov	r1, r6
 800a128:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a12c:	f108 0801 	add.w	r8, r8, #1
 800a130:	f1bc 0f00 	cmp.w	ip, #0
 800a134:	d1e9      	bne.n	800a10a <rclc_executor_spin_some.part.0+0x96>
 800a136:	4619      	mov	r1, r3
 800a138:	4610      	mov	r0, r2
 800a13a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a13e:	4798      	blx	r3
 800a140:	2800      	cmp	r0, #0
 800a142:	f000 809b 	beq.w	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a146:	68ab      	ldr	r3, [r5, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 8097 	beq.w	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a14e:	f04f 0800 	mov.w	r8, #0
 800a152:	f240 1991 	movw	r9, #401	@ 0x191
 800a156:	e009      	b.n	800a16c <rclc_executor_spin_some.part.0+0xf8>
 800a158:	f7ff fba4 	bl	80098a4 <_rclc_take_new_data>
 800a15c:	4604      	mov	r4, r0
 800a15e:	b110      	cbz	r0, 800a166 <rclc_executor_spin_some.part.0+0xf2>
 800a160:	4548      	cmp	r0, r9
 800a162:	f040 808b 	bne.w	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a166:	68ab      	ldr	r3, [r5, #8]
 800a168:	4598      	cmp	r8, r3
 800a16a:	d209      	bcs.n	800a180 <rclc_executor_spin_some.part.0+0x10c>
 800a16c:	6868      	ldr	r0, [r5, #4]
 800a16e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a172:	4631      	mov	r1, r6
 800a174:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a178:	f108 0801 	add.w	r8, r8, #1
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	d1eb      	bne.n	800a158 <rclc_executor_spin_some.part.0+0xe4>
 800a180:	2600      	movs	r6, #0
 800a182:	b97b      	cbnz	r3, 800a1a4 <rclc_executor_spin_some.part.0+0x130>
 800a184:	e07a      	b.n	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a186:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a18a:	2a08      	cmp	r2, #8
 800a18c:	f000 80fd 	beq.w	800a38a <rclc_executor_spin_some.part.0+0x316>
 800a190:	2a09      	cmp	r2, #9
 800a192:	f000 80ef 	beq.w	800a374 <rclc_executor_spin_some.part.0+0x300>
 800a196:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800a19a:	b98a      	cbnz	r2, 800a1c0 <rclc_executor_spin_some.part.0+0x14c>
 800a19c:	3601      	adds	r6, #1
 800a19e:	429e      	cmp	r6, r3
 800a1a0:	d262      	bcs.n	800a268 <rclc_executor_spin_some.part.0+0x1f4>
 800a1a2:	2400      	movs	r4, #0
 800a1a4:	686a      	ldr	r2, [r5, #4]
 800a1a6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a1aa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a1ae:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800a1b2:	2900      	cmp	r1, #0
 800a1b4:	d062      	beq.n	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a1b6:	7841      	ldrb	r1, [r0, #1]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d0e4      	beq.n	800a186 <rclc_executor_spin_some.part.0+0x112>
 800a1bc:	2901      	cmp	r1, #1
 800a1be:	d1ed      	bne.n	800a19c <rclc_executor_spin_some.part.0+0x128>
 800a1c0:	f7ff fce4 	bl	8009b8c <_rclc_execute.part.0>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f040 80b6 	bne.w	800a336 <rclc_executor_spin_some.part.0+0x2c2>
 800a1ca:	68ab      	ldr	r3, [r5, #8]
 800a1cc:	e7e6      	b.n	800a19c <rclc_executor_spin_some.part.0+0x128>
 800a1ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a1d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f006 fe04 	bl	8010de4 <rcl_wait_set_add_client>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f43f af7a 	beq.w	800a0d6 <rclc_executor_spin_some.part.0+0x62>
 800a1e2:	9001      	str	r0, [sp, #4]
 800a1e4:	f000 fa58 	bl	800a698 <rcutils_reset_error>
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	e03c      	b.n	800a268 <rclc_executor_spin_some.part.0+0x1f4>
 800a1ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a1f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f006 faac 	bl	8010754 <rcl_wait_set_add_subscription>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f af6a 	beq.w	800a0d6 <rclc_executor_spin_some.part.0+0x62>
 800a202:	e7ee      	b.n	800a1e2 <rclc_executor_spin_some.part.0+0x16e>
 800a204:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a208:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a20c:	4630      	mov	r0, r6
 800a20e:	f006 fdb9 	bl	8010d84 <rcl_wait_set_add_timer>
 800a212:	2800      	cmp	r0, #0
 800a214:	f43f af5f 	beq.w	800a0d6 <rclc_executor_spin_some.part.0+0x62>
 800a218:	e7e3      	b.n	800a1e2 <rclc_executor_spin_some.part.0+0x16e>
 800a21a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a21e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a222:	4630      	mov	r0, r6
 800a224:	f006 fd82 	bl	8010d2c <rcl_wait_set_add_guard_condition>
 800a228:	2800      	cmp	r0, #0
 800a22a:	f43f af54 	beq.w	800a0d6 <rclc_executor_spin_some.part.0+0x62>
 800a22e:	e7d8      	b.n	800a1e2 <rclc_executor_spin_some.part.0+0x16e>
 800a230:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a234:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a238:	3110      	adds	r1, #16
 800a23a:	4630      	mov	r0, r6
 800a23c:	f007 fb04 	bl	8011848 <rcl_action_wait_set_add_action_server>
 800a240:	2800      	cmp	r0, #0
 800a242:	f43f af48 	beq.w	800a0d6 <rclc_executor_spin_some.part.0+0x62>
 800a246:	e7cc      	b.n	800a1e2 <rclc_executor_spin_some.part.0+0x16e>
 800a248:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a24c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a250:	3110      	adds	r1, #16
 800a252:	2300      	movs	r3, #0
 800a254:	4630      	mov	r0, r6
 800a256:	f007 f8cf 	bl	80113f8 <rcl_action_wait_set_add_action_client>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	f43f af3b 	beq.w	800a0d6 <rclc_executor_spin_some.part.0+0x62>
 800a260:	e7bf      	b.n	800a1e2 <rclc_executor_spin_some.part.0+0x16e>
 800a262:	f000 fa19 	bl	800a698 <rcutils_reset_error>
 800a266:	2701      	movs	r7, #1
 800a268:	4638      	mov	r0, r7
 800a26a:	b003      	add	sp, #12
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a270:	f000 fa12 	bl	800a698 <rcutils_reset_error>
 800a274:	4638      	mov	r0, r7
 800a276:	b003      	add	sp, #12
 800a278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27c:	4627      	mov	r7, r4
 800a27e:	e7f3      	b.n	800a268 <rclc_executor_spin_some.part.0+0x1f4>
 800a280:	68ab      	ldr	r3, [r5, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8092 	beq.w	800a3ac <rclc_executor_spin_some.part.0+0x338>
 800a288:	2400      	movs	r4, #0
 800a28a:	46a0      	mov	r8, r4
 800a28c:	f240 1991 	movw	r9, #401	@ 0x191
 800a290:	e008      	b.n	800a2a4 <rclc_executor_spin_some.part.0+0x230>
 800a292:	f7ff fab9 	bl	8009808 <_rclc_check_for_new_data>
 800a296:	4604      	mov	r4, r0
 800a298:	b108      	cbz	r0, 800a29e <rclc_executor_spin_some.part.0+0x22a>
 800a29a:	4548      	cmp	r0, r9
 800a29c:	d1ee      	bne.n	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a29e:	68ab      	ldr	r3, [r5, #8]
 800a2a0:	4598      	cmp	r8, r3
 800a2a2:	d265      	bcs.n	800a370 <rclc_executor_spin_some.part.0+0x2fc>
 800a2a4:	686a      	ldr	r2, [r5, #4]
 800a2a6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a2b0:	f108 0801 	add.w	r8, r8, #1
 800a2b4:	f1bc 0f00 	cmp.w	ip, #0
 800a2b8:	d1eb      	bne.n	800a292 <rclc_executor_spin_some.part.0+0x21e>
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a2c2:	4798      	blx	r3
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0d9      	beq.n	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a2c8:	68ab      	ldr	r3, [r5, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0d6      	beq.n	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a2ce:	f04f 0800 	mov.w	r8, #0
 800a2d2:	f240 1991 	movw	r9, #401	@ 0x191
 800a2d6:	f240 2a59 	movw	sl, #601	@ 0x259
 800a2da:	e00e      	b.n	800a2fa <rclc_executor_spin_some.part.0+0x286>
 800a2dc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d033      	beq.n	800a34c <rclc_executor_spin_some.part.0+0x2d8>
 800a2e4:	2b09      	cmp	r3, #9
 800a2e6:	d028      	beq.n	800a33a <rclc_executor_spin_some.part.0+0x2c6>
 800a2e8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a2ec:	b9fb      	cbnz	r3, 800a32e <rclc_executor_spin_some.part.0+0x2ba>
 800a2ee:	68ab      	ldr	r3, [r5, #8]
 800a2f0:	f108 0801 	add.w	r8, r8, #1
 800a2f4:	4598      	cmp	r8, r3
 800a2f6:	d2b7      	bcs.n	800a268 <rclc_executor_spin_some.part.0+0x1f4>
 800a2f8:	2400      	movs	r4, #0
 800a2fa:	6868      	ldr	r0, [r5, #4]
 800a2fc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a300:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a304:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0b7      	beq.n	800a27c <rclc_executor_spin_some.part.0+0x208>
 800a30c:	4631      	mov	r1, r6
 800a30e:	f7ff fac9 	bl	80098a4 <_rclc_take_new_data>
 800a312:	b118      	cbz	r0, 800a31c <rclc_executor_spin_some.part.0+0x2a8>
 800a314:	4548      	cmp	r0, r9
 800a316:	d001      	beq.n	800a31c <rclc_executor_spin_some.part.0+0x2a8>
 800a318:	4550      	cmp	r0, sl
 800a31a:	d10c      	bne.n	800a336 <rclc_executor_spin_some.part.0+0x2c2>
 800a31c:	686b      	ldr	r3, [r5, #4]
 800a31e:	eb13 000b 	adds.w	r0, r3, fp
 800a322:	d021      	beq.n	800a368 <rclc_executor_spin_some.part.0+0x2f4>
 800a324:	7842      	ldrb	r2, [r0, #1]
 800a326:	2a00      	cmp	r2, #0
 800a328:	d0d8      	beq.n	800a2dc <rclc_executor_spin_some.part.0+0x268>
 800a32a:	2a01      	cmp	r2, #1
 800a32c:	d1df      	bne.n	800a2ee <rclc_executor_spin_some.part.0+0x27a>
 800a32e:	f7ff fc2d 	bl	8009b8c <_rclc_execute.part.0>
 800a332:	2800      	cmp	r0, #0
 800a334:	d0db      	beq.n	800a2ee <rclc_executor_spin_some.part.0+0x27a>
 800a336:	4607      	mov	r7, r0
 800a338:	e796      	b.n	800a268 <rclc_executor_spin_some.part.0+0x1f4>
 800a33a:	6843      	ldr	r3, [r0, #4]
 800a33c:	6a1a      	ldr	r2, [r3, #32]
 800a33e:	2a00      	cmp	r2, #0
 800a340:	d1f5      	bne.n	800a32e <rclc_executor_spin_some.part.0+0x2ba>
 800a342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0d1      	beq.n	800a2ee <rclc_executor_spin_some.part.0+0x27a>
 800a34a:	e7f0      	b.n	800a32e <rclc_executor_spin_some.part.0+0x2ba>
 800a34c:	6843      	ldr	r3, [r0, #4]
 800a34e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a350:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a354:	d1eb      	bne.n	800a32e <rclc_executor_spin_some.part.0+0x2ba>
 800a356:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	d1e7      	bne.n	800a32e <rclc_executor_spin_some.part.0+0x2ba>
 800a35e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0c3      	beq.n	800a2ee <rclc_executor_spin_some.part.0+0x27a>
 800a366:	e7e2      	b.n	800a32e <rclc_executor_spin_some.part.0+0x2ba>
 800a368:	270b      	movs	r7, #11
 800a36a:	e77d      	b.n	800a268 <rclc_executor_spin_some.part.0+0x1f4>
 800a36c:	686a      	ldr	r2, [r5, #4]
 800a36e:	e6e2      	b.n	800a136 <rclc_executor_spin_some.part.0+0xc2>
 800a370:	686a      	ldr	r2, [r5, #4]
 800a372:	e7a2      	b.n	800a2ba <rclc_executor_spin_some.part.0+0x246>
 800a374:	6842      	ldr	r2, [r0, #4]
 800a376:	6a11      	ldr	r1, [r2, #32]
 800a378:	2900      	cmp	r1, #0
 800a37a:	f47f af21 	bne.w	800a1c0 <rclc_executor_spin_some.part.0+0x14c>
 800a37e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a382:	2a00      	cmp	r2, #0
 800a384:	f43f af0a 	beq.w	800a19c <rclc_executor_spin_some.part.0+0x128>
 800a388:	e71a      	b.n	800a1c0 <rclc_executor_spin_some.part.0+0x14c>
 800a38a:	6842      	ldr	r2, [r0, #4]
 800a38c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a38e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a392:	f47f af15 	bne.w	800a1c0 <rclc_executor_spin_some.part.0+0x14c>
 800a396:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a39a:	2900      	cmp	r1, #0
 800a39c:	f47f af10 	bne.w	800a1c0 <rclc_executor_spin_some.part.0+0x14c>
 800a3a0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	f43f aef9 	beq.w	800a19c <rclc_executor_spin_some.part.0+0x128>
 800a3aa:	e709      	b.n	800a1c0 <rclc_executor_spin_some.part.0+0x14c>
 800a3ac:	686a      	ldr	r2, [r5, #4]
 800a3ae:	461c      	mov	r4, r3
 800a3b0:	e783      	b.n	800a2ba <rclc_executor_spin_some.part.0+0x246>
 800a3b2:	686a      	ldr	r2, [r5, #4]
 800a3b4:	461c      	mov	r4, r3
 800a3b6:	e6be      	b.n	800a136 <rclc_executor_spin_some.part.0+0xc2>

0800a3b8 <rclc_executor_spin_some>:
 800a3b8:	b190      	cbz	r0, 800a3e0 <rclc_executor_spin_some+0x28>
 800a3ba:	b570      	push	{r4, r5, r6, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	6800      	ldr	r0, [r0, #0]
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	461d      	mov	r5, r3
 800a3c4:	f005 f8fc 	bl	800f5c0 <rcl_context_is_valid>
 800a3c8:	b130      	cbz	r0, 800a3d8 <rclc_executor_spin_some+0x20>
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3d4:	f7ff be4e 	b.w	800a074 <rclc_executor_spin_some.part.0>
 800a3d8:	f000 f95e 	bl	800a698 <rcutils_reset_error>
 800a3dc:	2001      	movs	r0, #1
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
 800a3e0:	200b      	movs	r0, #11
 800a3e2:	4770      	bx	lr

0800a3e4 <rclc_executor_handle_counters_zero_init>:
 800a3e4:	b130      	cbz	r0, 800a3f4 <rclc_executor_handle_counters_zero_init+0x10>
 800a3e6:	b508      	push	{r3, lr}
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	f00c f900 	bl	80165f0 <memset>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	bd08      	pop	{r3, pc}
 800a3f4:	200b      	movs	r0, #11
 800a3f6:	4770      	bx	lr

0800a3f8 <rclc_executor_handle_init>:
 800a3f8:	b168      	cbz	r0, 800a416 <rclc_executor_handle_init+0x1e>
 800a3fa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a420 <rclc_executor_handle_init+0x28>
 800a3fe:	2300      	movs	r3, #0
 800a400:	220b      	movs	r2, #11
 800a402:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a406:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a40a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a40e:	8002      	strh	r2, [r0, #0]
 800a410:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a412:	4618      	mov	r0, r3
 800a414:	4770      	bx	lr
 800a416:	200b      	movs	r0, #11
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	f3af 8000 	nop.w
	...

0800a428 <rclc_support_init>:
 800a428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	b3b8      	cbz	r0, 800a4a0 <rclc_support_init+0x78>
 800a430:	461c      	mov	r4, r3
 800a432:	b3ab      	cbz	r3, 800a4a0 <rclc_support_init+0x78>
 800a434:	460f      	mov	r7, r1
 800a436:	4690      	mov	r8, r2
 800a438:	4606      	mov	r6, r0
 800a43a:	f005 fa15 	bl	800f868 <rcl_get_zero_initialized_init_options>
 800a43e:	f104 030c 	add.w	r3, r4, #12
 800a442:	9005      	str	r0, [sp, #20]
 800a444:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a448:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a44c:	a805      	add	r0, sp, #20
 800a44e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a452:	f005 fa0b 	bl	800f86c <rcl_init_options_init>
 800a456:	4605      	mov	r5, r0
 800a458:	b9e0      	cbnz	r0, 800a494 <rclc_support_init+0x6c>
 800a45a:	ad02      	add	r5, sp, #8
 800a45c:	4628      	mov	r0, r5
 800a45e:	f005 f8a5 	bl	800f5ac <rcl_get_zero_initialized_context>
 800a462:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a466:	4633      	mov	r3, r6
 800a468:	e886 0003 	stmia.w	r6, {r0, r1}
 800a46c:	aa05      	add	r2, sp, #20
 800a46e:	4641      	mov	r1, r8
 800a470:	4638      	mov	r0, r7
 800a472:	f005 f90b 	bl	800f68c <rcl_init>
 800a476:	4605      	mov	r5, r0
 800a478:	b9b8      	cbnz	r0, 800a4aa <rclc_support_init+0x82>
 800a47a:	60b4      	str	r4, [r6, #8]
 800a47c:	4622      	mov	r2, r4
 800a47e:	f106 010c 	add.w	r1, r6, #12
 800a482:	2003      	movs	r0, #3
 800a484:	f005 ff20 	bl	80102c8 <rcl_clock_init>
 800a488:	4605      	mov	r5, r0
 800a48a:	b970      	cbnz	r0, 800a4aa <rclc_support_init+0x82>
 800a48c:	a805      	add	r0, sp, #20
 800a48e:	f005 fa53 	bl	800f938 <rcl_init_options_fini>
 800a492:	b108      	cbz	r0, 800a498 <rclc_support_init+0x70>
 800a494:	f000 f900 	bl	800a698 <rcutils_reset_error>
 800a498:	4628      	mov	r0, r5
 800a49a:	b006      	add	sp, #24
 800a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a0:	250b      	movs	r5, #11
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	b006      	add	sp, #24
 800a4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4aa:	f000 f8f5 	bl	800a698 <rcutils_reset_error>
 800a4ae:	a805      	add	r0, sp, #20
 800a4b0:	f005 fa42 	bl	800f938 <rcl_init_options_fini>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d0ef      	beq.n	800a498 <rclc_support_init+0x70>
 800a4b8:	e7ec      	b.n	800a494 <rclc_support_init+0x6c>
 800a4ba:	bf00      	nop

0800a4bc <rclc_node_init_default>:
 800a4bc:	b3b8      	cbz	r0, 800a52e <rclc_node_init_default+0x72>
 800a4be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	b0a1      	sub	sp, #132	@ 0x84
 800a4c6:	b329      	cbz	r1, 800a514 <rclc_node_init_default+0x58>
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	b31a      	cbz	r2, 800a514 <rclc_node_init_default+0x58>
 800a4cc:	461f      	mov	r7, r3
 800a4ce:	b30b      	cbz	r3, 800a514 <rclc_node_init_default+0x58>
 800a4d0:	f10d 0810 	add.w	r8, sp, #16
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	f005 fae6 	bl	800faa8 <rcl_get_zero_initialized_node>
 800a4dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a4e0:	f10d 0918 	add.w	r9, sp, #24
 800a4e4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a4e8:	4648      	mov	r0, r9
 800a4ea:	f005 fc55 	bl	800fd98 <rcl_node_get_default_options>
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f005 fada 	bl	800faa8 <rcl_get_zero_initialized_node>
 800a4f4:	f8cd 9000 	str.w	r9, [sp]
 800a4f8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	e884 0003 	stmia.w	r4, {r0, r1}
 800a502:	4632      	mov	r2, r6
 800a504:	4629      	mov	r1, r5
 800a506:	4620      	mov	r0, r4
 800a508:	f005 fad8 	bl	800fabc <rcl_node_init>
 800a50c:	b930      	cbnz	r0, 800a51c <rclc_node_init_default+0x60>
 800a50e:	b021      	add	sp, #132	@ 0x84
 800a510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a514:	200b      	movs	r0, #11
 800a516:	b021      	add	sp, #132	@ 0x84
 800a518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a51c:	9003      	str	r0, [sp, #12]
 800a51e:	f000 f8bb 	bl	800a698 <rcutils_reset_error>
 800a522:	f000 f8b9 	bl	800a698 <rcutils_reset_error>
 800a526:	9803      	ldr	r0, [sp, #12]
 800a528:	b021      	add	sp, #132	@ 0x84
 800a52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a52e:	200b      	movs	r0, #11
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop

0800a534 <rclc_publisher_init_default>:
 800a534:	b368      	cbz	r0, 800a592 <rclc_publisher_init_default+0x5e>
 800a536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	460d      	mov	r5, r1
 800a53c:	b0a0      	sub	sp, #128	@ 0x80
 800a53e:	b321      	cbz	r1, 800a58a <rclc_publisher_init_default+0x56>
 800a540:	4616      	mov	r6, r2
 800a542:	b312      	cbz	r2, 800a58a <rclc_publisher_init_default+0x56>
 800a544:	461f      	mov	r7, r3
 800a546:	b303      	cbz	r3, 800a58a <rclc_publisher_init_default+0x56>
 800a548:	4604      	mov	r4, r0
 800a54a:	f7ff f84d 	bl	80095e8 <rcl_get_zero_initialized_publisher>
 800a54e:	f10d 0810 	add.w	r8, sp, #16
 800a552:	6020      	str	r0, [r4, #0]
 800a554:	4640      	mov	r0, r8
 800a556:	f7ff f8e3 	bl	8009720 <rcl_publisher_get_default_options>
 800a55a:	490f      	ldr	r1, [pc, #60]	@ (800a598 <rclc_publisher_init_default+0x64>)
 800a55c:	2250      	movs	r2, #80	@ 0x50
 800a55e:	4640      	mov	r0, r8
 800a560:	f00c f90f 	bl	8016782 <memcpy>
 800a564:	f8cd 8000 	str.w	r8, [sp]
 800a568:	463b      	mov	r3, r7
 800a56a:	4632      	mov	r2, r6
 800a56c:	4629      	mov	r1, r5
 800a56e:	4620      	mov	r0, r4
 800a570:	f7ff f840 	bl	80095f4 <rcl_publisher_init>
 800a574:	b910      	cbnz	r0, 800a57c <rclc_publisher_init_default+0x48>
 800a576:	b020      	add	sp, #128	@ 0x80
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	9003      	str	r0, [sp, #12]
 800a57e:	f000 f88b 	bl	800a698 <rcutils_reset_error>
 800a582:	9803      	ldr	r0, [sp, #12]
 800a584:	b020      	add	sp, #128	@ 0x80
 800a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58a:	200b      	movs	r0, #11
 800a58c:	b020      	add	sp, #128	@ 0x80
 800a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a592:	200b      	movs	r0, #11
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	080176c8 	.word	0x080176c8

0800a59c <rclc_subscription_init_default>:
 800a59c:	b368      	cbz	r0, 800a5fa <rclc_subscription_init_default+0x5e>
 800a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	b0a0      	sub	sp, #128	@ 0x80
 800a5a6:	b321      	cbz	r1, 800a5f2 <rclc_subscription_init_default+0x56>
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	b312      	cbz	r2, 800a5f2 <rclc_subscription_init_default+0x56>
 800a5ac:	461f      	mov	r7, r3
 800a5ae:	b303      	cbz	r3, 800a5f2 <rclc_subscription_init_default+0x56>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	f005 fd2d 	bl	8010010 <rcl_get_zero_initialized_subscription>
 800a5b6:	f10d 0810 	add.w	r8, sp, #16
 800a5ba:	6020      	str	r0, [r4, #0]
 800a5bc:	4640      	mov	r0, r8
 800a5be:	f005 fdd5 	bl	801016c <rcl_subscription_get_default_options>
 800a5c2:	490f      	ldr	r1, [pc, #60]	@ (800a600 <rclc_subscription_init_default+0x64>)
 800a5c4:	2250      	movs	r2, #80	@ 0x50
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f00c f8db 	bl	8016782 <memcpy>
 800a5cc:	f8cd 8000 	str.w	r8, [sp]
 800a5d0:	463b      	mov	r3, r7
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f005 fd20 	bl	801001c <rcl_subscription_init>
 800a5dc:	b910      	cbnz	r0, 800a5e4 <rclc_subscription_init_default+0x48>
 800a5de:	b020      	add	sp, #128	@ 0x80
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	9003      	str	r0, [sp, #12]
 800a5e6:	f000 f857 	bl	800a698 <rcutils_reset_error>
 800a5ea:	9803      	ldr	r0, [sp, #12]
 800a5ec:	b020      	add	sp, #128	@ 0x80
 800a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f2:	200b      	movs	r0, #11
 800a5f4:	b020      	add	sp, #128	@ 0x80
 800a5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fa:	200b      	movs	r0, #11
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	08017718 	.word	0x08017718

0800a604 <__default_zero_allocate>:
 800a604:	f00b bc1c 	b.w	8015e40 <calloc>

0800a608 <__default_reallocate>:
 800a608:	f00b bda8 	b.w	801615c <realloc>

0800a60c <__default_deallocate>:
 800a60c:	f00b bc84 	b.w	8015f18 <free>

0800a610 <__default_allocate>:
 800a610:	f00b bc7a 	b.w	8015f08 <malloc>

0800a614 <rcutils_get_zero_initialized_allocator>:
 800a614:	b510      	push	{r4, lr}
 800a616:	4c05      	ldr	r4, [pc, #20]	@ (800a62c <rcutils_get_zero_initialized_allocator+0x18>)
 800a618:	4686      	mov	lr, r0
 800a61a:	4684      	mov	ip, r0
 800a61c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a61e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	f8cc 3000 	str.w	r3, [ip]
 800a628:	4670      	mov	r0, lr
 800a62a:	bd10      	pop	{r4, pc}
 800a62c:	08017768 	.word	0x08017768

0800a630 <rcutils_get_default_allocator>:
 800a630:	b510      	push	{r4, lr}
 800a632:	4c05      	ldr	r4, [pc, #20]	@ (800a648 <rcutils_get_default_allocator+0x18>)
 800a634:	4686      	mov	lr, r0
 800a636:	4684      	mov	ip, r0
 800a638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a63a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	f8cc 3000 	str.w	r3, [ip]
 800a644:	4670      	mov	r0, lr
 800a646:	bd10      	pop	{r4, pc}
 800a648:	20000058 	.word	0x20000058

0800a64c <rcutils_allocator_is_valid>:
 800a64c:	b158      	cbz	r0, 800a666 <rcutils_allocator_is_valid+0x1a>
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	b143      	cbz	r3, 800a664 <rcutils_allocator_is_valid+0x18>
 800a652:	6843      	ldr	r3, [r0, #4]
 800a654:	b133      	cbz	r3, 800a664 <rcutils_allocator_is_valid+0x18>
 800a656:	68c3      	ldr	r3, [r0, #12]
 800a658:	b123      	cbz	r3, 800a664 <rcutils_allocator_is_valid+0x18>
 800a65a:	6880      	ldr	r0, [r0, #8]
 800a65c:	3800      	subs	r0, #0
 800a65e:	bf18      	it	ne
 800a660:	2001      	movne	r0, #1
 800a662:	4770      	bx	lr
 800a664:	4618      	mov	r0, r3
 800a666:	4770      	bx	lr

0800a668 <rcutils_get_error_string>:
 800a668:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <rcutils_get_error_string+0x1c>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b13b      	cbz	r3, 800a67e <rcutils_get_error_string+0x16>
 800a66e:	4b06      	ldr	r3, [pc, #24]	@ (800a688 <rcutils_get_error_string+0x20>)
 800a670:	781a      	ldrb	r2, [r3, #0]
 800a672:	b90a      	cbnz	r2, 800a678 <rcutils_get_error_string+0x10>
 800a674:	2201      	movs	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
 800a678:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <rcutils_get_error_string+0x24>)
 800a67a:	7818      	ldrb	r0, [r3, #0]
 800a67c:	4770      	bx	lr
 800a67e:	4b04      	ldr	r3, [pc, #16]	@ (800a690 <rcutils_get_error_string+0x28>)
 800a680:	7818      	ldrb	r0, [r3, #0]
 800a682:	4770      	bx	lr
 800a684:	20009388 	.word	0x20009388
 800a688:	200093a1 	.word	0x200093a1
 800a68c:	200093a0 	.word	0x200093a0
 800a690:	0801777c 	.word	0x0801777c
 800a694:	00000000 	.word	0x00000000

0800a698 <rcutils_reset_error>:
 800a698:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a6b8 <rcutils_reset_error+0x20>
 800a69c:	4a08      	ldr	r2, [pc, #32]	@ (800a6c0 <rcutils_reset_error+0x28>)
 800a69e:	4809      	ldr	r0, [pc, #36]	@ (800a6c4 <rcutils_reset_error+0x2c>)
 800a6a0:	4909      	ldr	r1, [pc, #36]	@ (800a6c8 <rcutils_reset_error+0x30>)
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	8013      	strh	r3, [r2, #0]
 800a6a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800a6aa:	4a08      	ldr	r2, [pc, #32]	@ (800a6cc <rcutils_reset_error+0x34>)
 800a6ac:	7003      	strb	r3, [r0, #0]
 800a6ae:	700b      	strb	r3, [r1, #0]
 800a6b0:	7013      	strb	r3, [r2, #0]
 800a6b2:	4770      	bx	lr
 800a6b4:	f3af 8000 	nop.w
	...
 800a6c0:	20009390 	.word	0x20009390
 800a6c4:	200093a1 	.word	0x200093a1
 800a6c8:	200093a0 	.word	0x200093a0
 800a6cc:	20009388 	.word	0x20009388

0800a6d0 <rcutils_system_time_now>:
 800a6d0:	b308      	cbz	r0, 800a716 <rcutils_system_time_now+0x46>
 800a6d2:	b570      	push	{r4, r5, r6, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4669      	mov	r1, sp
 800a6da:	2001      	movs	r0, #1
 800a6dc:	f7f7 fdfc 	bl	80022d8 <clock_gettime>
 800a6e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	db13      	blt.n	800a710 <rcutils_system_time_now+0x40>
 800a6e8:	9902      	ldr	r1, [sp, #8]
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	db0d      	blt.n	800a70a <rcutils_system_time_now+0x3a>
 800a6ee:	4e0b      	ldr	r6, [pc, #44]	@ (800a71c <rcutils_system_time_now+0x4c>)
 800a6f0:	fba3 3206 	umull	r3, r2, r3, r6
 800a6f4:	185b      	adds	r3, r3, r1
 800a6f6:	fb06 2205 	mla	r2, r6, r5, r2
 800a6fa:	f04f 0000 	mov.w	r0, #0
 800a6fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a702:	e9c4 3200 	strd	r3, r2, [r4]
 800a706:	b004      	add	sp, #16
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	ea53 0205 	orrs.w	r2, r3, r5
 800a70e:	d1ee      	bne.n	800a6ee <rcutils_system_time_now+0x1e>
 800a710:	2002      	movs	r0, #2
 800a712:	b004      	add	sp, #16
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	200b      	movs	r0, #11
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	3b9aca00 	.word	0x3b9aca00

0800a720 <rcutils_steady_time_now>:
 800a720:	b308      	cbz	r0, 800a766 <rcutils_steady_time_now+0x46>
 800a722:	b570      	push	{r4, r5, r6, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	4604      	mov	r4, r0
 800a728:	4669      	mov	r1, sp
 800a72a:	2000      	movs	r0, #0
 800a72c:	f7f7 fdd4 	bl	80022d8 <clock_gettime>
 800a730:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a734:	2d00      	cmp	r5, #0
 800a736:	db13      	blt.n	800a760 <rcutils_steady_time_now+0x40>
 800a738:	9902      	ldr	r1, [sp, #8]
 800a73a:	2900      	cmp	r1, #0
 800a73c:	db0d      	blt.n	800a75a <rcutils_steady_time_now+0x3a>
 800a73e:	4e0b      	ldr	r6, [pc, #44]	@ (800a76c <rcutils_steady_time_now+0x4c>)
 800a740:	fba3 3206 	umull	r3, r2, r3, r6
 800a744:	185b      	adds	r3, r3, r1
 800a746:	fb06 2205 	mla	r2, r6, r5, r2
 800a74a:	f04f 0000 	mov.w	r0, #0
 800a74e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a752:	e9c4 3200 	strd	r3, r2, [r4]
 800a756:	b004      	add	sp, #16
 800a758:	bd70      	pop	{r4, r5, r6, pc}
 800a75a:	ea53 0205 	orrs.w	r2, r3, r5
 800a75e:	d1ee      	bne.n	800a73e <rcutils_steady_time_now+0x1e>
 800a760:	2002      	movs	r0, #2
 800a762:	b004      	add	sp, #16
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	200b      	movs	r0, #11
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	3b9aca00 	.word	0x3b9aca00

0800a770 <rmw_get_default_publisher_options>:
 800a770:	2200      	movs	r2, #0
 800a772:	6002      	str	r2, [r0, #0]
 800a774:	7102      	strb	r2, [r0, #4]
 800a776:	4770      	bx	lr

0800a778 <rmw_uros_set_custom_transport>:
 800a778:	b470      	push	{r4, r5, r6}
 800a77a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a77e:	b162      	cbz	r2, 800a79a <rmw_uros_set_custom_transport+0x22>
 800a780:	b15b      	cbz	r3, 800a79a <rmw_uros_set_custom_transport+0x22>
 800a782:	b155      	cbz	r5, 800a79a <rmw_uros_set_custom_transport+0x22>
 800a784:	b14e      	cbz	r6, 800a79a <rmw_uros_set_custom_transport+0x22>
 800a786:	4c06      	ldr	r4, [pc, #24]	@ (800a7a0 <rmw_uros_set_custom_transport+0x28>)
 800a788:	7020      	strb	r0, [r4, #0]
 800a78a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a78e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a792:	6166      	str	r6, [r4, #20]
 800a794:	2000      	movs	r0, #0
 800a796:	bc70      	pop	{r4, r5, r6}
 800a798:	4770      	bx	lr
 800a79a:	200b      	movs	r0, #11
 800a79c:	bc70      	pop	{r4, r5, r6}
 800a79e:	4770      	bx	lr
 800a7a0:	200093a4 	.word	0x200093a4

0800a7a4 <flush_session>:
 800a7a4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a7a6:	f002 beeb 	b.w	800d580 <uxr_run_session_until_confirm_delivery>
 800a7aa:	bf00      	nop

0800a7ac <rmw_publish>:
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d053      	beq.n	800a858 <rmw_publish+0xac>
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	b08e      	sub	sp, #56	@ 0x38
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d04b      	beq.n	800a852 <rmw_publish+0xa6>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f000 fced 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d045      	beq.n	800a852 <rmw_publish+0xa6>
 800a7c6:	6866      	ldr	r6, [r4, #4]
 800a7c8:	2e00      	cmp	r6, #0
 800a7ca:	d042      	beq.n	800a852 <rmw_publish+0xa6>
 800a7cc:	69b4      	ldr	r4, [r6, #24]
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	4798      	blx	r3
 800a7d4:	69f3      	ldr	r3, [r6, #28]
 800a7d6:	9005      	str	r0, [sp, #20]
 800a7d8:	b113      	cbz	r3, 800a7e0 <rmw_publish+0x34>
 800a7da:	a805      	add	r0, sp, #20
 800a7dc:	4798      	blx	r3
 800a7de:	9805      	ldr	r0, [sp, #20]
 800a7e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	9000      	str	r0, [sp, #0]
 800a7e8:	6972      	ldr	r2, [r6, #20]
 800a7ea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a7ec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a7f0:	ab06      	add	r3, sp, #24
 800a7f2:	f003 fcb1 	bl	800e158 <uxr_prepare_output_stream>
 800a7f6:	b1d8      	cbz	r0, 800a830 <rmw_publish+0x84>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	a906      	add	r1, sp, #24
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	4798      	blx	r3
 800a800:	6a33      	ldr	r3, [r6, #32]
 800a802:	4604      	mov	r4, r0
 800a804:	b10b      	cbz	r3, 800a80a <rmw_publish+0x5e>
 800a806:	a806      	add	r0, sp, #24
 800a808:	4798      	blx	r3
 800a80a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a80e:	2b01      	cmp	r3, #1
 800a810:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a814:	d022      	beq.n	800a85c <rmw_publish+0xb0>
 800a816:	6918      	ldr	r0, [r3, #16]
 800a818:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a81a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a81e:	f002 feaf 	bl	800d580 <uxr_run_session_until_confirm_delivery>
 800a822:	4020      	ands	r0, r4
 800a824:	b2c4      	uxtb	r4, r0
 800a826:	f084 0001 	eor.w	r0, r4, #1
 800a82a:	b2c0      	uxtb	r0, r0
 800a82c:	b00e      	add	sp, #56	@ 0x38
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a834:	6918      	ldr	r0, [r3, #16]
 800a836:	9b05      	ldr	r3, [sp, #20]
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	4b0b      	ldr	r3, [pc, #44]	@ (800a868 <rmw_publish+0xbc>)
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	9602      	str	r6, [sp, #8]
 800a840:	6972      	ldr	r2, [r6, #20]
 800a842:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a848:	ab06      	add	r3, sp, #24
 800a84a:	f003 fcb5 	bl	800e1b8 <uxr_prepare_output_stream_fragmented>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d1d2      	bne.n	800a7f8 <rmw_publish+0x4c>
 800a852:	2001      	movs	r0, #1
 800a854:	b00e      	add	sp, #56	@ 0x38
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	2001      	movs	r0, #1
 800a85a:	4770      	bx	lr
 800a85c:	6918      	ldr	r0, [r3, #16]
 800a85e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a862:	f002 facd 	bl	800ce00 <uxr_flash_output_streams>
 800a866:	e7de      	b.n	800a826 <rmw_publish+0x7a>
 800a868:	0800a7a5 	.word	0x0800a7a5

0800a86c <rmw_create_publisher>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	b087      	sub	sp, #28
 800a872:	2800      	cmp	r0, #0
 800a874:	f000 80cc 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a878:	460e      	mov	r6, r1
 800a87a:	2900      	cmp	r1, #0
 800a87c:	f000 80c8 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a880:	4604      	mov	r4, r0
 800a882:	6800      	ldr	r0, [r0, #0]
 800a884:	4615      	mov	r5, r2
 800a886:	4698      	mov	r8, r3
 800a888:	f000 fc88 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f000 80bf 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a892:	2d00      	cmp	r5, #0
 800a894:	f000 80bc 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a898:	782b      	ldrb	r3, [r5, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 80b8 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a8a0:	f1b8 0f00 	cmp.w	r8, #0
 800a8a4:	f000 80b4 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a8a8:	485c      	ldr	r0, [pc, #368]	@ (800aa1c <rmw_create_publisher+0x1b0>)
 800a8aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a8ae:	f007 ff3b 	bl	8012728 <get_memory>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	f000 80ac 	beq.w	800aa10 <rmw_create_publisher+0x1a4>
 800a8b8:	6884      	ldr	r4, [r0, #8]
 800a8ba:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a8be:	f007 ff9b 	bl	80127f8 <rmw_get_implementation_identifier>
 800a8c2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a8c6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a8ca:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f7f5 fc90 	bl	80001f4 <strlen>
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	283c      	cmp	r0, #60	@ 0x3c
 800a8d8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800a8dc:	f200 8091 	bhi.w	800aa02 <rmw_create_publisher+0x196>
 800a8e0:	4a4f      	ldr	r2, [pc, #316]	@ (800aa20 <rmw_create_publisher+0x1b4>)
 800a8e2:	462b      	mov	r3, r5
 800a8e4:	213c      	movs	r1, #60	@ 0x3c
 800a8e6:	4650      	mov	r0, sl
 800a8e8:	f00b fda8 	bl	801643c <sniprintf>
 800a8ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a8f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a8f2:	4641      	mov	r1, r8
 800a8f4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a8f8:	2250      	movs	r2, #80	@ 0x50
 800a8fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a8fe:	f00b ff40 	bl	8016782 <memcpy>
 800a902:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a906:	4947      	ldr	r1, [pc, #284]	@ (800aa24 <rmw_create_publisher+0x1b8>)
 800a908:	2b02      	cmp	r3, #2
 800a90a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a90e:	bf0c      	ite	eq
 800a910:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a914:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a918:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a91a:	2300      	movs	r3, #0
 800a91c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a920:	4630      	mov	r0, r6
 800a922:	f000 fc49 	bl	800b1b8 <get_message_typesupport_handle>
 800a926:	2800      	cmp	r0, #0
 800a928:	d06b      	beq.n	800aa02 <rmw_create_publisher+0x196>
 800a92a:	6842      	ldr	r2, [r0, #4]
 800a92c:	61a2      	str	r2, [r4, #24]
 800a92e:	2a00      	cmp	r2, #0
 800a930:	d067      	beq.n	800aa02 <rmw_create_publisher+0x196>
 800a932:	4629      	mov	r1, r5
 800a934:	4643      	mov	r3, r8
 800a936:	4648      	mov	r0, r9
 800a938:	f008 f9ee 	bl	8012d18 <create_topic>
 800a93c:	6260      	str	r0, [r4, #36]	@ 0x24
 800a93e:	2800      	cmp	r0, #0
 800a940:	d063      	beq.n	800aa0a <rmw_create_publisher+0x19e>
 800a942:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a94a:	2103      	movs	r1, #3
 800a94c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a950:	1c42      	adds	r2, r0, #1
 800a952:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a956:	f002 f903 	bl	800cb60 <uxr_object_id>
 800a95a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a95e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a962:	6120      	str	r0, [r4, #16]
 800a964:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a968:	6910      	ldr	r0, [r2, #16]
 800a96a:	2506      	movs	r5, #6
 800a96c:	9500      	str	r5, [sp, #0]
 800a96e:	6819      	ldr	r1, [r3, #0]
 800a970:	6922      	ldr	r2, [r4, #16]
 800a972:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a976:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a97a:	f001 ffa3 	bl	800c8c4 <uxr_buffer_create_publisher_bin>
 800a97e:	4602      	mov	r2, r0
 800a980:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a984:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a988:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a98c:	f000 fb86 	bl	800b09c <run_xrce_session>
 800a990:	b3b8      	cbz	r0, 800aa02 <rmw_create_publisher+0x196>
 800a992:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a99a:	2105      	movs	r1, #5
 800a99c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a9a0:	1c42      	adds	r2, r0, #1
 800a9a2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a9a6:	f002 f8db 	bl	800cb60 <uxr_object_id>
 800a9aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a9ae:	6160      	str	r0, [r4, #20]
 800a9b0:	691e      	ldr	r6, [r3, #16]
 800a9b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9b6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a9ba:	f10d 0a10 	add.w	sl, sp, #16
 800a9be:	4641      	mov	r1, r8
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800a9c6:	f000 fb85 	bl	800b0d4 <convert_qos_profile>
 800a9ca:	9503      	str	r5, [sp, #12]
 800a9cc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a9d0:	9001      	str	r0, [sp, #4]
 800a9d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a9d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a9e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a9e4:	f8d8 1000 	ldr.w	r1, [r8]
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f001 ffcb 	bl	800c984 <uxr_buffer_create_datawriter_bin>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a9f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a9f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a9fc:	f000 fb4e 	bl	800b09c <run_xrce_session>
 800aa00:	b938      	cbnz	r0, 800aa12 <rmw_create_publisher+0x1a6>
 800aa02:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aa04:	b108      	cbz	r0, 800aa0a <rmw_create_publisher+0x19e>
 800aa06:	f000 fa47 	bl	800ae98 <rmw_uxrce_fini_topic_memory>
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f000 f9ec 	bl	800ade8 <rmw_uxrce_fini_publisher_memory>
 800aa10:	2700      	movs	r7, #0
 800aa12:	4638      	mov	r0, r7
 800aa14:	b007      	add	sp, #28
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1a:	bf00      	nop
 800aa1c:	2000dc9c 	.word	0x2000dc9c
 800aa20:	080177b4 	.word	0x080177b4
 800aa24:	08017780 	.word	0x08017780

0800aa28 <rmw_publisher_get_actual_qos>:
 800aa28:	b150      	cbz	r0, 800aa40 <rmw_publisher_get_actual_qos+0x18>
 800aa2a:	b508      	push	{r3, lr}
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	b149      	cbz	r1, 800aa44 <rmw_publisher_get_actual_qos+0x1c>
 800aa30:	6841      	ldr	r1, [r0, #4]
 800aa32:	2250      	movs	r2, #80	@ 0x50
 800aa34:	3128      	adds	r1, #40	@ 0x28
 800aa36:	4618      	mov	r0, r3
 800aa38:	f00b fea3 	bl	8016782 <memcpy>
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	bd08      	pop	{r3, pc}
 800aa40:	200b      	movs	r0, #11
 800aa42:	4770      	bx	lr
 800aa44:	200b      	movs	r0, #11
 800aa46:	bd08      	pop	{r3, pc}

0800aa48 <rmw_destroy_publisher>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	b128      	cbz	r0, 800aa58 <rmw_destroy_publisher+0x10>
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	6800      	ldr	r0, [r0, #0]
 800aa50:	460d      	mov	r5, r1
 800aa52:	f000 fba3 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 800aa56:	b910      	cbnz	r0, 800aa5e <rmw_destroy_publisher+0x16>
 800aa58:	2401      	movs	r4, #1
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5e:	6863      	ldr	r3, [r4, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f9      	beq.n	800aa58 <rmw_destroy_publisher+0x10>
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d0f7      	beq.n	800aa58 <rmw_destroy_publisher+0x10>
 800aa68:	6828      	ldr	r0, [r5, #0]
 800aa6a:	f000 fb97 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d0f2      	beq.n	800aa58 <rmw_destroy_publisher+0x10>
 800aa72:	686c      	ldr	r4, [r5, #4]
 800aa74:	2c00      	cmp	r4, #0
 800aa76:	d0ef      	beq.n	800aa58 <rmw_destroy_publisher+0x10>
 800aa78:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aa7a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800aa7e:	f008 f99b 	bl	8012db8 <destroy_topic>
 800aa82:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aa86:	6962      	ldr	r2, [r4, #20]
 800aa88:	6918      	ldr	r0, [r3, #16]
 800aa8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800aa8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	f001 fe62 	bl	800c75c <uxr_buffer_delete_entity>
 800aa98:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aa9c:	6922      	ldr	r2, [r4, #16]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	6809      	ldr	r1, [r1, #0]
 800aaa8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800aaac:	f001 fe56 	bl	800c75c <uxr_buffer_delete_entity>
 800aab0:	693e      	ldr	r6, [r7, #16]
 800aab2:	4622      	mov	r2, r4
 800aab4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aab8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aabc:	4604      	mov	r4, r0
 800aabe:	4630      	mov	r0, r6
 800aac0:	f000 faec 	bl	800b09c <run_xrce_session>
 800aac4:	693e      	ldr	r6, [r7, #16]
 800aac6:	4622      	mov	r2, r4
 800aac8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aacc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aad0:	4604      	mov	r4, r0
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 fae2 	bl	800b09c <run_xrce_session>
 800aad8:	b12c      	cbz	r4, 800aae6 <rmw_destroy_publisher+0x9e>
 800aada:	b120      	cbz	r0, 800aae6 <rmw_destroy_publisher+0x9e>
 800aadc:	2400      	movs	r4, #0
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 f982 	bl	800ade8 <rmw_uxrce_fini_publisher_memory>
 800aae4:	e7b9      	b.n	800aa5a <rmw_destroy_publisher+0x12>
 800aae6:	2402      	movs	r4, #2
 800aae8:	e7f9      	b.n	800aade <rmw_destroy_publisher+0x96>
 800aaea:	bf00      	nop

0800aaec <rmw_uxrce_init_service_memory>:
 800aaec:	b1e2      	cbz	r2, 800ab28 <rmw_uxrce_init_service_memory+0x3c>
 800aaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf2:	7b05      	ldrb	r5, [r0, #12]
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	b9ad      	cbnz	r5, 800ab24 <rmw_uxrce_init_service_memory+0x38>
 800aaf8:	23c8      	movs	r3, #200	@ 0xc8
 800aafa:	e9c0 5500 	strd	r5, r5, [r0]
 800aafe:	6083      	str	r3, [r0, #8]
 800ab00:	f240 1301 	movw	r3, #257	@ 0x101
 800ab04:	4617      	mov	r7, r2
 800ab06:	8183      	strh	r3, [r0, #12]
 800ab08:	460c      	mov	r4, r1
 800ab0a:	46a8      	mov	r8, r5
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4630      	mov	r0, r6
 800ab10:	3501      	adds	r5, #1
 800ab12:	f007 fe19 	bl	8012748 <put_memory>
 800ab16:	42af      	cmp	r7, r5
 800ab18:	60a4      	str	r4, [r4, #8]
 800ab1a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab1e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ab22:	d1f3      	bne.n	800ab0c <rmw_uxrce_init_service_memory+0x20>
 800ab24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop

0800ab2c <rmw_uxrce_init_client_memory>:
 800ab2c:	b1e2      	cbz	r2, 800ab68 <rmw_uxrce_init_client_memory+0x3c>
 800ab2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab32:	7b05      	ldrb	r5, [r0, #12]
 800ab34:	4606      	mov	r6, r0
 800ab36:	b9ad      	cbnz	r5, 800ab64 <rmw_uxrce_init_client_memory+0x38>
 800ab38:	23c8      	movs	r3, #200	@ 0xc8
 800ab3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab3e:	6083      	str	r3, [r0, #8]
 800ab40:	f240 1301 	movw	r3, #257	@ 0x101
 800ab44:	4617      	mov	r7, r2
 800ab46:	8183      	strh	r3, [r0, #12]
 800ab48:	460c      	mov	r4, r1
 800ab4a:	46a8      	mov	r8, r5
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4630      	mov	r0, r6
 800ab50:	3501      	adds	r5, #1
 800ab52:	f007 fdf9 	bl	8012748 <put_memory>
 800ab56:	42af      	cmp	r7, r5
 800ab58:	60a4      	str	r4, [r4, #8]
 800ab5a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab5e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ab62:	d1f3      	bne.n	800ab4c <rmw_uxrce_init_client_memory+0x20>
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <rmw_uxrce_init_publisher_memory>:
 800ab6c:	b1e2      	cbz	r2, 800aba8 <rmw_uxrce_init_publisher_memory+0x3c>
 800ab6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab72:	7b05      	ldrb	r5, [r0, #12]
 800ab74:	4606      	mov	r6, r0
 800ab76:	b9ad      	cbnz	r5, 800aba4 <rmw_uxrce_init_publisher_memory+0x38>
 800ab78:	23d8      	movs	r3, #216	@ 0xd8
 800ab7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab7e:	6083      	str	r3, [r0, #8]
 800ab80:	f240 1301 	movw	r3, #257	@ 0x101
 800ab84:	4617      	mov	r7, r2
 800ab86:	8183      	strh	r3, [r0, #12]
 800ab88:	460c      	mov	r4, r1
 800ab8a:	46a8      	mov	r8, r5
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	4630      	mov	r0, r6
 800ab90:	3501      	adds	r5, #1
 800ab92:	f007 fdd9 	bl	8012748 <put_memory>
 800ab96:	42af      	cmp	r7, r5
 800ab98:	60a4      	str	r4, [r4, #8]
 800ab9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab9e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800aba2:	d1f3      	bne.n	800ab8c <rmw_uxrce_init_publisher_memory+0x20>
 800aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop

0800abac <rmw_uxrce_init_subscription_memory>:
 800abac:	b1e2      	cbz	r2, 800abe8 <rmw_uxrce_init_subscription_memory+0x3c>
 800abae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb2:	7b05      	ldrb	r5, [r0, #12]
 800abb4:	4606      	mov	r6, r0
 800abb6:	b9ad      	cbnz	r5, 800abe4 <rmw_uxrce_init_subscription_memory+0x38>
 800abb8:	23d8      	movs	r3, #216	@ 0xd8
 800abba:	e9c0 5500 	strd	r5, r5, [r0]
 800abbe:	6083      	str	r3, [r0, #8]
 800abc0:	f240 1301 	movw	r3, #257	@ 0x101
 800abc4:	4617      	mov	r7, r2
 800abc6:	8183      	strh	r3, [r0, #12]
 800abc8:	460c      	mov	r4, r1
 800abca:	46a8      	mov	r8, r5
 800abcc:	4621      	mov	r1, r4
 800abce:	4630      	mov	r0, r6
 800abd0:	3501      	adds	r5, #1
 800abd2:	f007 fdb9 	bl	8012748 <put_memory>
 800abd6:	42af      	cmp	r7, r5
 800abd8:	60a4      	str	r4, [r4, #8]
 800abda:	f884 800c 	strb.w	r8, [r4, #12]
 800abde:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800abe2:	d1f3      	bne.n	800abcc <rmw_uxrce_init_subscription_memory+0x20>
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop

0800abec <rmw_uxrce_init_node_memory>:
 800abec:	b1e2      	cbz	r2, 800ac28 <rmw_uxrce_init_node_memory+0x3c>
 800abee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf2:	7b05      	ldrb	r5, [r0, #12]
 800abf4:	4606      	mov	r6, r0
 800abf6:	b9ad      	cbnz	r5, 800ac24 <rmw_uxrce_init_node_memory+0x38>
 800abf8:	23a4      	movs	r3, #164	@ 0xa4
 800abfa:	e9c0 5500 	strd	r5, r5, [r0]
 800abfe:	6083      	str	r3, [r0, #8]
 800ac00:	f240 1301 	movw	r3, #257	@ 0x101
 800ac04:	4617      	mov	r7, r2
 800ac06:	8183      	strh	r3, [r0, #12]
 800ac08:	460c      	mov	r4, r1
 800ac0a:	46a8      	mov	r8, r5
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	3501      	adds	r5, #1
 800ac12:	f007 fd99 	bl	8012748 <put_memory>
 800ac16:	42af      	cmp	r7, r5
 800ac18:	60a4      	str	r4, [r4, #8]
 800ac1a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac1e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ac22:	d1f3      	bne.n	800ac0c <rmw_uxrce_init_node_memory+0x20>
 800ac24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop

0800ac2c <rmw_uxrce_init_session_memory>:
 800ac2c:	b1ea      	cbz	r2, 800ac6a <rmw_uxrce_init_session_memory+0x3e>
 800ac2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac32:	7b05      	ldrb	r5, [r0, #12]
 800ac34:	4606      	mov	r6, r0
 800ac36:	b9b5      	cbnz	r5, 800ac66 <rmw_uxrce_init_session_memory+0x3a>
 800ac38:	e9c0 5500 	strd	r5, r5, [r0]
 800ac3c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ac40:	f240 1301 	movw	r3, #257	@ 0x101
 800ac44:	4617      	mov	r7, r2
 800ac46:	f8c0 8008 	str.w	r8, [r0, #8]
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	8183      	strh	r3, [r0, #12]
 800ac4e:	46a9      	mov	r9, r5
 800ac50:	4621      	mov	r1, r4
 800ac52:	4630      	mov	r0, r6
 800ac54:	3501      	adds	r5, #1
 800ac56:	f007 fd77 	bl	8012748 <put_memory>
 800ac5a:	42af      	cmp	r7, r5
 800ac5c:	60a4      	str	r4, [r4, #8]
 800ac5e:	f884 900c 	strb.w	r9, [r4, #12]
 800ac62:	4444      	add	r4, r8
 800ac64:	d1f4      	bne.n	800ac50 <rmw_uxrce_init_session_memory+0x24>
 800ac66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6a:	4770      	bx	lr

0800ac6c <rmw_uxrce_init_topic_memory>:
 800ac6c:	b1e2      	cbz	r2, 800aca8 <rmw_uxrce_init_topic_memory+0x3c>
 800ac6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac72:	7b05      	ldrb	r5, [r0, #12]
 800ac74:	4606      	mov	r6, r0
 800ac76:	b9ad      	cbnz	r5, 800aca4 <rmw_uxrce_init_topic_memory+0x38>
 800ac78:	231c      	movs	r3, #28
 800ac7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac7e:	6083      	str	r3, [r0, #8]
 800ac80:	f240 1301 	movw	r3, #257	@ 0x101
 800ac84:	4617      	mov	r7, r2
 800ac86:	8183      	strh	r3, [r0, #12]
 800ac88:	460c      	mov	r4, r1
 800ac8a:	46a8      	mov	r8, r5
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4630      	mov	r0, r6
 800ac90:	3501      	adds	r5, #1
 800ac92:	f007 fd59 	bl	8012748 <put_memory>
 800ac96:	42af      	cmp	r7, r5
 800ac98:	60a4      	str	r4, [r4, #8]
 800ac9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac9e:	f104 041c 	add.w	r4, r4, #28
 800aca2:	d1f3      	bne.n	800ac8c <rmw_uxrce_init_topic_memory+0x20>
 800aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop

0800acac <rmw_uxrce_init_static_input_buffer_memory>:
 800acac:	b1ea      	cbz	r2, 800acea <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800acae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb2:	7b05      	ldrb	r5, [r0, #12]
 800acb4:	4606      	mov	r6, r0
 800acb6:	b9b5      	cbnz	r5, 800ace6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800acb8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800acbc:	e9c0 5500 	strd	r5, r5, [r0]
 800acc0:	6083      	str	r3, [r0, #8]
 800acc2:	f240 1301 	movw	r3, #257	@ 0x101
 800acc6:	4617      	mov	r7, r2
 800acc8:	8183      	strh	r3, [r0, #12]
 800acca:	460c      	mov	r4, r1
 800accc:	46a8      	mov	r8, r5
 800acce:	4621      	mov	r1, r4
 800acd0:	4630      	mov	r0, r6
 800acd2:	3501      	adds	r5, #1
 800acd4:	f007 fd38 	bl	8012748 <put_memory>
 800acd8:	42af      	cmp	r7, r5
 800acda:	60a4      	str	r4, [r4, #8]
 800acdc:	f884 800c 	strb.w	r8, [r4, #12]
 800ace0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ace4:	d1f3      	bne.n	800acce <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ace6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acea:	4770      	bx	lr

0800acec <rmw_uxrce_init_init_options_impl_memory>:
 800acec:	b1e2      	cbz	r2, 800ad28 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800acee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf2:	7b05      	ldrb	r5, [r0, #12]
 800acf4:	4606      	mov	r6, r0
 800acf6:	b9ad      	cbnz	r5, 800ad24 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800acf8:	232c      	movs	r3, #44	@ 0x2c
 800acfa:	e9c0 5500 	strd	r5, r5, [r0]
 800acfe:	6083      	str	r3, [r0, #8]
 800ad00:	f240 1301 	movw	r3, #257	@ 0x101
 800ad04:	4617      	mov	r7, r2
 800ad06:	8183      	strh	r3, [r0, #12]
 800ad08:	460c      	mov	r4, r1
 800ad0a:	46a8      	mov	r8, r5
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4630      	mov	r0, r6
 800ad10:	3501      	adds	r5, #1
 800ad12:	f007 fd19 	bl	8012748 <put_memory>
 800ad16:	42af      	cmp	r7, r5
 800ad18:	60a4      	str	r4, [r4, #8]
 800ad1a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad1e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ad22:	d1f3      	bne.n	800ad0c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop

0800ad2c <rmw_uxrce_init_wait_set_memory>:
 800ad2c:	b1e2      	cbz	r2, 800ad68 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ad2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	7b05      	ldrb	r5, [r0, #12]
 800ad34:	4606      	mov	r6, r0
 800ad36:	b9ad      	cbnz	r5, 800ad64 <rmw_uxrce_init_wait_set_memory+0x38>
 800ad38:	231c      	movs	r3, #28
 800ad3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad3e:	6083      	str	r3, [r0, #8]
 800ad40:	f240 1301 	movw	r3, #257	@ 0x101
 800ad44:	4617      	mov	r7, r2
 800ad46:	8183      	strh	r3, [r0, #12]
 800ad48:	460c      	mov	r4, r1
 800ad4a:	46a8      	mov	r8, r5
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4630      	mov	r0, r6
 800ad50:	3501      	adds	r5, #1
 800ad52:	f007 fcf9 	bl	8012748 <put_memory>
 800ad56:	42af      	cmp	r7, r5
 800ad58:	60a4      	str	r4, [r4, #8]
 800ad5a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad5e:	f104 041c 	add.w	r4, r4, #28
 800ad62:	d1f3      	bne.n	800ad4c <rmw_uxrce_init_wait_set_memory+0x20>
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop

0800ad6c <rmw_uxrce_init_guard_condition_memory>:
 800ad6c:	b1e2      	cbz	r2, 800ada8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ad6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad72:	7b05      	ldrb	r5, [r0, #12]
 800ad74:	4606      	mov	r6, r0
 800ad76:	b9ad      	cbnz	r5, 800ada4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ad78:	2320      	movs	r3, #32
 800ad7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad7e:	6083      	str	r3, [r0, #8]
 800ad80:	f240 1301 	movw	r3, #257	@ 0x101
 800ad84:	4617      	mov	r7, r2
 800ad86:	8183      	strh	r3, [r0, #12]
 800ad88:	460c      	mov	r4, r1
 800ad8a:	46a8      	mov	r8, r5
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4630      	mov	r0, r6
 800ad90:	3501      	adds	r5, #1
 800ad92:	f007 fcd9 	bl	8012748 <put_memory>
 800ad96:	42af      	cmp	r7, r5
 800ad98:	60a4      	str	r4, [r4, #8]
 800ad9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad9e:	f104 0420 	add.w	r4, r4, #32
 800ada2:	d1f3      	bne.n	800ad8c <rmw_uxrce_init_guard_condition_memory+0x20>
 800ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop

0800adac <rmw_uxrce_fini_session_memory>:
 800adac:	4601      	mov	r1, r0
 800adae:	4801      	ldr	r0, [pc, #4]	@ (800adb4 <rmw_uxrce_fini_session_memory+0x8>)
 800adb0:	f007 bcca 	b.w	8012748 <put_memory>
 800adb4:	2000dcbc 	.word	0x2000dcbc

0800adb8 <rmw_uxrce_fini_node_memory>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4604      	mov	r4, r0
 800adbc:	6800      	ldr	r0, [r0, #0]
 800adbe:	b128      	cbz	r0, 800adcc <rmw_uxrce_fini_node_memory+0x14>
 800adc0:	4b07      	ldr	r3, [pc, #28]	@ (800ade0 <rmw_uxrce_fini_node_memory+0x28>)
 800adc2:	6819      	ldr	r1, [r3, #0]
 800adc4:	f7f5 fa0c 	bl	80001e0 <strcmp>
 800adc8:	b940      	cbnz	r0, 800addc <rmw_uxrce_fini_node_memory+0x24>
 800adca:	6020      	str	r0, [r4, #0]
 800adcc:	6861      	ldr	r1, [r4, #4]
 800adce:	b129      	cbz	r1, 800addc <rmw_uxrce_fini_node_memory+0x24>
 800add0:	2500      	movs	r5, #0
 800add2:	4804      	ldr	r0, [pc, #16]	@ (800ade4 <rmw_uxrce_fini_node_memory+0x2c>)
 800add4:	610d      	str	r5, [r1, #16]
 800add6:	f007 fcb7 	bl	8012748 <put_memory>
 800adda:	6065      	str	r5, [r4, #4]
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	08017f54 	.word	0x08017f54
 800ade4:	2000dc8c 	.word	0x2000dc8c

0800ade8 <rmw_uxrce_fini_publisher_memory>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	6800      	ldr	r0, [r0, #0]
 800adee:	b128      	cbz	r0, 800adfc <rmw_uxrce_fini_publisher_memory+0x14>
 800adf0:	4b06      	ldr	r3, [pc, #24]	@ (800ae0c <rmw_uxrce_fini_publisher_memory+0x24>)
 800adf2:	6819      	ldr	r1, [r3, #0]
 800adf4:	f7f5 f9f4 	bl	80001e0 <strcmp>
 800adf8:	b938      	cbnz	r0, 800ae0a <rmw_uxrce_fini_publisher_memory+0x22>
 800adfa:	6020      	str	r0, [r4, #0]
 800adfc:	6861      	ldr	r1, [r4, #4]
 800adfe:	b121      	cbz	r1, 800ae0a <rmw_uxrce_fini_publisher_memory+0x22>
 800ae00:	4803      	ldr	r0, [pc, #12]	@ (800ae10 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ae02:	f007 fca1 	bl	8012748 <put_memory>
 800ae06:	2300      	movs	r3, #0
 800ae08:	6063      	str	r3, [r4, #4]
 800ae0a:	bd10      	pop	{r4, pc}
 800ae0c:	08017f54 	.word	0x08017f54
 800ae10:	2000dc9c 	.word	0x2000dc9c

0800ae14 <rmw_uxrce_fini_subscription_memory>:
 800ae14:	b510      	push	{r4, lr}
 800ae16:	4604      	mov	r4, r0
 800ae18:	6800      	ldr	r0, [r0, #0]
 800ae1a:	b128      	cbz	r0, 800ae28 <rmw_uxrce_fini_subscription_memory+0x14>
 800ae1c:	4b06      	ldr	r3, [pc, #24]	@ (800ae38 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	f7f5 f9de 	bl	80001e0 <strcmp>
 800ae24:	b938      	cbnz	r0, 800ae36 <rmw_uxrce_fini_subscription_memory+0x22>
 800ae26:	6020      	str	r0, [r4, #0]
 800ae28:	6861      	ldr	r1, [r4, #4]
 800ae2a:	b121      	cbz	r1, 800ae36 <rmw_uxrce_fini_subscription_memory+0x22>
 800ae2c:	4803      	ldr	r0, [pc, #12]	@ (800ae3c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ae2e:	f007 fc8b 	bl	8012748 <put_memory>
 800ae32:	2300      	movs	r3, #0
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	bd10      	pop	{r4, pc}
 800ae38:	08017f54 	.word	0x08017f54
 800ae3c:	2000dcdc 	.word	0x2000dcdc

0800ae40 <rmw_uxrce_fini_service_memory>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	4604      	mov	r4, r0
 800ae44:	6800      	ldr	r0, [r0, #0]
 800ae46:	b128      	cbz	r0, 800ae54 <rmw_uxrce_fini_service_memory+0x14>
 800ae48:	4b06      	ldr	r3, [pc, #24]	@ (800ae64 <rmw_uxrce_fini_service_memory+0x24>)
 800ae4a:	6819      	ldr	r1, [r3, #0]
 800ae4c:	f7f5 f9c8 	bl	80001e0 <strcmp>
 800ae50:	b938      	cbnz	r0, 800ae62 <rmw_uxrce_fini_service_memory+0x22>
 800ae52:	6020      	str	r0, [r4, #0]
 800ae54:	6861      	ldr	r1, [r4, #4]
 800ae56:	b121      	cbz	r1, 800ae62 <rmw_uxrce_fini_service_memory+0x22>
 800ae58:	4803      	ldr	r0, [pc, #12]	@ (800ae68 <rmw_uxrce_fini_service_memory+0x28>)
 800ae5a:	f007 fc75 	bl	8012748 <put_memory>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bd10      	pop	{r4, pc}
 800ae64:	08017f54 	.word	0x08017f54
 800ae68:	2000dcac 	.word	0x2000dcac

0800ae6c <rmw_uxrce_fini_client_memory>:
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4604      	mov	r4, r0
 800ae70:	6800      	ldr	r0, [r0, #0]
 800ae72:	b128      	cbz	r0, 800ae80 <rmw_uxrce_fini_client_memory+0x14>
 800ae74:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <rmw_uxrce_fini_client_memory+0x24>)
 800ae76:	6819      	ldr	r1, [r3, #0]
 800ae78:	f7f5 f9b2 	bl	80001e0 <strcmp>
 800ae7c:	b938      	cbnz	r0, 800ae8e <rmw_uxrce_fini_client_memory+0x22>
 800ae7e:	6020      	str	r0, [r4, #0]
 800ae80:	6861      	ldr	r1, [r4, #4]
 800ae82:	b121      	cbz	r1, 800ae8e <rmw_uxrce_fini_client_memory+0x22>
 800ae84:	4803      	ldr	r0, [pc, #12]	@ (800ae94 <rmw_uxrce_fini_client_memory+0x28>)
 800ae86:	f007 fc5f 	bl	8012748 <put_memory>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6063      	str	r3, [r4, #4]
 800ae8e:	bd10      	pop	{r4, pc}
 800ae90:	08017f54 	.word	0x08017f54
 800ae94:	200093c0 	.word	0x200093c0

0800ae98 <rmw_uxrce_fini_topic_memory>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	4803      	ldr	r0, [pc, #12]	@ (800aeac <rmw_uxrce_fini_topic_memory+0x14>)
 800aea0:	f007 fc52 	bl	8012748 <put_memory>
 800aea4:	2300      	movs	r3, #0
 800aea6:	61a3      	str	r3, [r4, #24]
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	2000dcec 	.word	0x2000dcec

0800aeb0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	b530      	push	{r4, r5, lr}
 800aeb4:	4925      	ldr	r1, [pc, #148]	@ (800af4c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800aeb6:	680d      	ldr	r5, [r1, #0]
 800aeb8:	ac03      	add	r4, sp, #12
 800aeba:	e884 000c 	stmia.w	r4, {r2, r3}
 800aebe:	461c      	mov	r4, r3
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	d041      	beq.n	800af48 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800aec4:	462b      	mov	r3, r5
 800aec6:	2100      	movs	r1, #0
 800aec8:	689a      	ldr	r2, [r3, #8]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800aed0:	4290      	cmp	r0, r2
 800aed2:	bf08      	it	eq
 800aed4:	3101      	addeq	r1, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f6      	bne.n	800aec8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800aeda:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d029      	beq.n	800af36 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800aee2:	d907      	bls.n	800aef4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d005      	beq.n	800aef4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800aee8:	2100      	movs	r1, #0
 800aeea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeee:	4608      	mov	r0, r1
 800aef0:	b002      	add	sp, #8
 800aef2:	4770      	bx	lr
 800aef4:	b314      	cbz	r4, 800af3c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800aef6:	428c      	cmp	r4, r1
 800aef8:	d820      	bhi.n	800af3c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	d0f4      	beq.n	800aee8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800aefe:	2100      	movs	r1, #0
 800af00:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800af04:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800af08:	e002      	b.n	800af10 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800af0a:	686d      	ldr	r5, [r5, #4]
 800af0c:	2d00      	cmp	r5, #0
 800af0e:	d0ec      	beq.n	800aeea <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800af10:	68ab      	ldr	r3, [r5, #8]
 800af12:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800af16:	4290      	cmp	r0, r2
 800af18:	d1f7      	bne.n	800af0a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800af1a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800af1e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800af22:	4562      	cmp	r2, ip
 800af24:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800af28:	eb73 0e04 	sbcs.w	lr, r3, r4
 800af2c:	daed      	bge.n	800af0a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800af2e:	4694      	mov	ip, r2
 800af30:	461c      	mov	r4, r3
 800af32:	4629      	mov	r1, r5
 800af34:	e7e9      	b.n	800af0a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800af36:	b10c      	cbz	r4, 800af3c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800af38:	428c      	cmp	r4, r1
 800af3a:	d9d5      	bls.n	800aee8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800af3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af40:	4802      	ldr	r0, [pc, #8]	@ (800af4c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800af42:	b002      	add	sp, #8
 800af44:	f007 bbf0 	b.w	8012728 <get_memory>
 800af48:	4629      	mov	r1, r5
 800af4a:	e7c6      	b.n	800aeda <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800af4c:	2000dccc 	.word	0x2000dccc

0800af50 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800af50:	4b11      	ldr	r3, [pc, #68]	@ (800af98 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	b530      	push	{r4, r5, lr}
 800af56:	b1e3      	cbz	r3, 800af92 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800af58:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800af5c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800af60:	2400      	movs	r4, #0
 800af62:	e001      	b.n	800af68 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	b193      	cbz	r3, 800af8e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800af6e:	4288      	cmp	r0, r1
 800af70:	d1f8      	bne.n	800af64 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800af72:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800af76:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800af7a:	4571      	cmp	r1, lr
 800af7c:	eb72 050c 	sbcs.w	r5, r2, ip
 800af80:	daf0      	bge.n	800af64 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800af82:	461c      	mov	r4, r3
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	468e      	mov	lr, r1
 800af88:	4694      	mov	ip, r2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1ec      	bne.n	800af68 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800af8e:	4620      	mov	r0, r4
 800af90:	bd30      	pop	{r4, r5, pc}
 800af92:	461c      	mov	r4, r3
 800af94:	4620      	mov	r0, r4
 800af96:	bd30      	pop	{r4, r5, pc}
 800af98:	2000dccc 	.word	0x2000dccc
 800af9c:	00000000 	.word	0x00000000

0800afa0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	4b3c      	ldr	r3, [pc, #240]	@ (800b098 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800afa6:	ed2d 8b06 	vpush	{d8-d10}
 800afaa:	681f      	ldr	r7, [r3, #0]
 800afac:	b08d      	sub	sp, #52	@ 0x34
 800afae:	f008 fd23 	bl	80139f8 <rmw_uros_epoch_nanos>
 800afb2:	2f00      	cmp	r7, #0
 800afb4:	d05d      	beq.n	800b072 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800afb6:	46b8      	mov	r8, r7
 800afb8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b080 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800afbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800afc0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b088 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800afca:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b090 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800afce:	4681      	mov	r9, r0
 800afd0:	468a      	mov	sl, r1
 800afd2:	ac04      	add	r4, sp, #16
 800afd4:	d03f      	beq.n	800b056 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	d044      	beq.n	800b064 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d03b      	beq.n	800b056 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800afde:	ed8d 8b04 	vstr	d8, [sp, #16]
 800afe2:	ed8d ab06 	vstr	d10, [sp, #24]
 800afe6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800afea:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800afee:	ab08      	add	r3, sp, #32
 800aff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aff2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aff6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800affa:	f007 f9c9 	bl	8012390 <rmw_time_equal>
 800affe:	b118      	cbz	r0, 800b008 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b000:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b004:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b008:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b00c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b010:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b014:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b018:	f007 fa0e 	bl	8012438 <rmw_time_total_nsec>
 800b01c:	1830      	adds	r0, r6, r0
 800b01e:	eb47 0101 	adc.w	r1, r7, r1
 800b022:	4548      	cmp	r0, r9
 800b024:	eb71 030a 	sbcs.w	r3, r1, sl
 800b028:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b02c:	db05      	blt.n	800b03a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b02e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b032:	4591      	cmp	r9, r2
 800b034:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b038:	da03      	bge.n	800b042 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b03a:	4817      	ldr	r0, [pc, #92]	@ (800b098 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b03c:	4641      	mov	r1, r8
 800b03e:	f007 fb83 	bl	8012748 <put_memory>
 800b042:	f1bb 0f00 	cmp.w	fp, #0
 800b046:	d014      	beq.n	800b072 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b048:	46d8      	mov	r8, fp
 800b04a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b04e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b052:	2b04      	cmp	r3, #4
 800b054:	d1bf      	bne.n	800afd6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b056:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b05a:	3340      	adds	r3, #64	@ 0x40
 800b05c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b05e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b062:	e7c0      	b.n	800afe6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b064:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b068:	3348      	adds	r3, #72	@ 0x48
 800b06a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b06c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b070:	e7b9      	b.n	800afe6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b072:	b00d      	add	sp, #52	@ 0x34
 800b074:	ecbd 8b06 	vpop	{d8-d10}
 800b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07c:	f3af 8000 	nop.w
	...
 800b088:	00000001 	.word	0x00000001
 800b08c:	00000000 	.word	0x00000000
 800b090:	0000001e 	.word	0x0000001e
 800b094:	00000000 	.word	0x00000000
 800b098:	2000dccc 	.word	0x2000dccc

0800b09c <run_xrce_session>:
 800b09c:	b510      	push	{r4, lr}
 800b09e:	788c      	ldrb	r4, [r1, #2]
 800b0a0:	b086      	sub	sp, #24
 800b0a2:	2c01      	cmp	r4, #1
 800b0a4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b0a8:	d00c      	beq.n	800b0c4 <run_xrce_session+0x28>
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	f10d 020e 	add.w	r2, sp, #14
 800b0b4:	f10d 0317 	add.w	r3, sp, #23
 800b0b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b0bc:	f002 fa86 	bl	800d5cc <uxr_run_session_until_all_status>
 800b0c0:	b006      	add	sp, #24
 800b0c2:	bd10      	pop	{r4, pc}
 800b0c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b0c8:	f001 fe9a 	bl	800ce00 <uxr_flash_output_streams>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	b006      	add	sp, #24
 800b0d0:	bd10      	pop	{r4, pc}
 800b0d2:	bf00      	nop

0800b0d4 <convert_qos_profile>:
 800b0d4:	7a4a      	ldrb	r2, [r1, #9]
 800b0d6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b0da:	2a02      	cmp	r2, #2
 800b0dc:	bf18      	it	ne
 800b0de:	2200      	movne	r2, #0
 800b0e0:	7002      	strb	r2, [r0, #0]
 800b0e2:	780a      	ldrb	r2, [r1, #0]
 800b0e4:	8889      	ldrh	r1, [r1, #4]
 800b0e6:	8081      	strh	r1, [r0, #4]
 800b0e8:	f1ac 0c02 	sub.w	ip, ip, #2
 800b0ec:	f1a2 0202 	sub.w	r2, r2, #2
 800b0f0:	fabc fc8c 	clz	ip, ip
 800b0f4:	fab2 f282 	clz	r2, r2
 800b0f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b0fc:	0952      	lsrs	r2, r2, #5
 800b0fe:	f880 c001 	strb.w	ip, [r0, #1]
 800b102:	7082      	strb	r2, [r0, #2]
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop

0800b108 <generate_type_name>:
 800b108:	b530      	push	{r4, r5, lr}
 800b10a:	2300      	movs	r3, #0
 800b10c:	700b      	strb	r3, [r1, #0]
 800b10e:	6803      	ldr	r3, [r0, #0]
 800b110:	b087      	sub	sp, #28
 800b112:	4614      	mov	r4, r2
 800b114:	b1d3      	cbz	r3, 800b14c <generate_type_name+0x44>
 800b116:	4a0f      	ldr	r2, [pc, #60]	@ (800b154 <generate_type_name+0x4c>)
 800b118:	4615      	mov	r5, r2
 800b11a:	9203      	str	r2, [sp, #12]
 800b11c:	9500      	str	r5, [sp, #0]
 800b11e:	6842      	ldr	r2, [r0, #4]
 800b120:	480d      	ldr	r0, [pc, #52]	@ (800b158 <generate_type_name+0x50>)
 800b122:	9001      	str	r0, [sp, #4]
 800b124:	4608      	mov	r0, r1
 800b126:	490d      	ldr	r1, [pc, #52]	@ (800b15c <generate_type_name+0x54>)
 800b128:	9204      	str	r2, [sp, #16]
 800b12a:	9105      	str	r1, [sp, #20]
 800b12c:	9102      	str	r1, [sp, #8]
 800b12e:	4a0c      	ldr	r2, [pc, #48]	@ (800b160 <generate_type_name+0x58>)
 800b130:	4621      	mov	r1, r4
 800b132:	f00b f983 	bl	801643c <sniprintf>
 800b136:	2800      	cmp	r0, #0
 800b138:	db05      	blt.n	800b146 <generate_type_name+0x3e>
 800b13a:	4284      	cmp	r4, r0
 800b13c:	bfd4      	ite	le
 800b13e:	2000      	movle	r0, #0
 800b140:	2001      	movgt	r0, #1
 800b142:	b007      	add	sp, #28
 800b144:	bd30      	pop	{r4, r5, pc}
 800b146:	2000      	movs	r0, #0
 800b148:	b007      	add	sp, #28
 800b14a:	bd30      	pop	{r4, r5, pc}
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <generate_type_name+0x5c>)
 800b14e:	4a01      	ldr	r2, [pc, #4]	@ (800b154 <generate_type_name+0x4c>)
 800b150:	461d      	mov	r5, r3
 800b152:	e7e2      	b.n	800b11a <generate_type_name+0x12>
 800b154:	080177a4 	.word	0x080177a4
 800b158:	080177bc 	.word	0x080177bc
 800b15c:	080177b8 	.word	0x080177b8
 800b160:	080177a8 	.word	0x080177a8
 800b164:	08017d2c 	.word	0x08017d2c

0800b168 <generate_topic_name>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	4614      	mov	r4, r2
 800b16e:	9000      	str	r0, [sp, #0]
 800b170:	4b08      	ldr	r3, [pc, #32]	@ (800b194 <generate_topic_name+0x2c>)
 800b172:	4a09      	ldr	r2, [pc, #36]	@ (800b198 <generate_topic_name+0x30>)
 800b174:	4608      	mov	r0, r1
 800b176:	4621      	mov	r1, r4
 800b178:	f00b f960 	bl	801643c <sniprintf>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	db05      	blt.n	800b18c <generate_topic_name+0x24>
 800b180:	4284      	cmp	r4, r0
 800b182:	bfd4      	ite	le
 800b184:	2000      	movle	r0, #0
 800b186:	2001      	movgt	r0, #1
 800b188:	b002      	add	sp, #8
 800b18a:	bd10      	pop	{r4, pc}
 800b18c:	2000      	movs	r0, #0
 800b18e:	b002      	add	sp, #8
 800b190:	bd10      	pop	{r4, pc}
 800b192:	bf00      	nop
 800b194:	080177c8 	.word	0x080177c8
 800b198:	080177c0 	.word	0x080177c0

0800b19c <is_uxrce_rmw_identifier_valid>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	b140      	cbz	r0, 800b1b4 <is_uxrce_rmw_identifier_valid+0x18>
 800b1a2:	f007 fb29 	bl	80127f8 <rmw_get_implementation_identifier>
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7f5 f819 	bl	80001e0 <strcmp>
 800b1ae:	fab0 f080 	clz	r0, r0
 800b1b2:	0940      	lsrs	r0, r0, #5
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	bf00      	nop

0800b1b8 <get_message_typesupport_handle>:
 800b1b8:	6883      	ldr	r3, [r0, #8]
 800b1ba:	4718      	bx	r3

0800b1bc <get_message_typesupport_handle_function>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	4604      	mov	r4, r0
 800b1c0:	6800      	ldr	r0, [r0, #0]
 800b1c2:	f7f5 f80d 	bl	80001e0 <strcmp>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	bf0c      	ite	eq
 800b1ca:	4620      	moveq	r0, r4
 800b1cc:	2000      	movne	r0, #0
 800b1ce:	bd10      	pop	{r4, pc}

0800b1d0 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b1d0:	4b04      	ldr	r3, [pc, #16]	@ (800b1e4 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	b10a      	cbz	r2, 800b1da <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 800b1d6:	4803      	ldr	r0, [pc, #12]	@ (800b1e4 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b1d8:	4770      	bx	lr
 800b1da:	4a03      	ldr	r2, [pc, #12]	@ (800b1e8 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 800b1dc:	4801      	ldr	r0, [pc, #4]	@ (800b1e4 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	4770      	bx	lr
 800b1e4:	20000074 	.word	0x20000074
 800b1e8:	200002a0 	.word	0x200002a0

0800b1ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b1ec:	4a02      	ldr	r2, [pc, #8]	@ (800b1f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xc>)
 800b1ee:	4b03      	ldr	r3, [pc, #12]	@ (800b1fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x10>)
 800b1f0:	6812      	ldr	r2, [r2, #0]
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	200002a0 	.word	0x200002a0
 800b1fc:	20000074 	.word	0x20000074

0800b200 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b200:	4b04      	ldr	r3, [pc, #16]	@ (800b214 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	b10a      	cbz	r2, 800b20a <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xa>
 800b206:	4803      	ldr	r0, [pc, #12]	@ (800b214 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b208:	4770      	bx	lr
 800b20a:	4a03      	ldr	r2, [pc, #12]	@ (800b218 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x18>)
 800b20c:	4801      	ldr	r0, [pc, #4]	@ (800b214 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b20e:	6812      	ldr	r2, [r2, #0]
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	4770      	bx	lr
 800b214:	20000088 	.word	0x20000088
 800b218:	200002a0 	.word	0x200002a0

0800b21c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b21c:	4a02      	ldr	r2, [pc, #8]	@ (800b228 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xc>)
 800b21e:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x10>)
 800b220:	6812      	ldr	r2, [r2, #0]
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	200002a0 	.word	0x200002a0
 800b22c:	20000088 	.word	0x20000088

0800b230 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_init_function>:
 800b230:	f008 bc1e 	b.w	8013a70 <rover_msgs__msg__ControllerMsg__init>

0800b234 <rover_msgs__msg__ControllerMsg__rosidl_typesupport_introspection_c__ControllerMsg_fini_function>:
 800b234:	f008 bc20 	b.w	8013a78 <rover_msgs__msg__ControllerMsg__fini>

0800b238 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b238:	4b04      	ldr	r3, [pc, #16]	@ (800b24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	b10a      	cbz	r2, 800b242 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0xa>
 800b23e:	4803      	ldr	r0, [pc, #12]	@ (800b24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b240:	4770      	bx	lr
 800b242:	4a03      	ldr	r2, [pc, #12]	@ (800b250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x18>)
 800b244:	4801      	ldr	r0, [pc, #4]	@ (800b24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x14>)
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	4770      	bx	lr
 800b24c:	20000148 	.word	0x20000148
 800b250:	200002a4 	.word	0x200002a4

0800b254 <rover_msgs__msg__EncoderMsg__rosidl_typesupport_introspection_c__EncoderMsg_init_function>:
 800b254:	f008 bc12 	b.w	8013a7c <rover_msgs__msg__EncoderMsg__init>

0800b258 <rover_msgs__msg__EncoderMsg__rosidl_typesupport_introspection_c__EncoderMsg_fini_function>:
 800b258:	f008 bc14 	b.w	8013a84 <rover_msgs__msg__EncoderMsg__fini>

0800b25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b25c:	4b04      	ldr	r3, [pc, #16]	@ (800b270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	b10a      	cbz	r2, 800b266 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0xa>
 800b262:	4803      	ldr	r0, [pc, #12]	@ (800b270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b264:	4770      	bx	lr
 800b266:	4a03      	ldr	r2, [pc, #12]	@ (800b274 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x18>)
 800b268:	4801      	ldr	r0, [pc, #4]	@ (800b270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x14>)
 800b26a:	6812      	ldr	r2, [r2, #0]
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	4770      	bx	lr
 800b270:	20000244 	.word	0x20000244
 800b274:	200002a4 	.word	0x200002a4

0800b278 <get_serialized_size_rover_msgs__msg__ControllerMsg>:
 800b278:	b1b0      	cbz	r0, 800b2a8 <get_serialized_size_rover_msgs__msg__ControllerMsg+0x30>
 800b27a:	b538      	push	{r3, r4, r5, lr}
 800b27c:	460d      	mov	r5, r1
 800b27e:	4628      	mov	r0, r5
 800b280:	2104      	movs	r1, #4
 800b282:	f001 f9ff 	bl	800c684 <ucdr_alignment>
 800b286:	1d2b      	adds	r3, r5, #4
 800b288:	181c      	adds	r4, r3, r0
 800b28a:	2104      	movs	r1, #4
 800b28c:	4620      	mov	r0, r4
 800b28e:	f001 f9f9 	bl	800c684 <ucdr_alignment>
 800b292:	3004      	adds	r0, #4
 800b294:	4404      	add	r4, r0
 800b296:	2104      	movs	r1, #4
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 f9f3 	bl	800c684 <ucdr_alignment>
 800b29e:	f1c5 0504 	rsb	r5, r5, #4
 800b2a2:	4428      	add	r0, r5
 800b2a4:	4420      	add	r0, r4
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop

0800b2ac <_ControllerMsg__cdr_deserialize>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	b169      	cbz	r1, 800b2ce <_ControllerMsg__cdr_deserialize+0x22>
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	f001 f8fe 	bl	800c4b4 <ucdr_deserialize_float>
 800b2b8:	1d21      	adds	r1, r4, #4
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f001 f8fa 	bl	800c4b4 <ucdr_deserialize_float>
 800b2c0:	f104 0108 	add.w	r1, r4, #8
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ca:	f001 b8f3 	b.w	800c4b4 <ucdr_deserialize_float>
 800b2ce:	4608      	mov	r0, r1
 800b2d0:	bd38      	pop	{r3, r4, r5, pc}
 800b2d2:	bf00      	nop

0800b2d4 <_ControllerMsg__cdr_serialize>:
 800b2d4:	b198      	cbz	r0, 800b2fe <_ControllerMsg__cdr_serialize+0x2a>
 800b2d6:	b538      	push	{r3, r4, r5, lr}
 800b2d8:	ed90 0a00 	vldr	s0, [r0]
 800b2dc:	460d      	mov	r5, r1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	f001 f84f 	bl	800c384 <ucdr_serialize_float>
 800b2e6:	ed94 0a01 	vldr	s0, [r4, #4]
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f001 f84a 	bl	800c384 <ucdr_serialize_float>
 800b2f0:	ed94 0a02 	vldr	s0, [r4, #8]
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2fa:	f001 b843 	b.w	800c384 <ucdr_serialize_float>
 800b2fe:	4770      	bx	lr

0800b300 <_ControllerMsg__get_serialized_size>:
 800b300:	b190      	cbz	r0, 800b328 <_ControllerMsg__get_serialized_size+0x28>
 800b302:	b510      	push	{r4, lr}
 800b304:	2104      	movs	r1, #4
 800b306:	2000      	movs	r0, #0
 800b308:	f001 f9bc 	bl	800c684 <ucdr_alignment>
 800b30c:	1d04      	adds	r4, r0, #4
 800b30e:	2104      	movs	r1, #4
 800b310:	4620      	mov	r0, r4
 800b312:	f001 f9b7 	bl	800c684 <ucdr_alignment>
 800b316:	3004      	adds	r0, #4
 800b318:	4404      	add	r4, r0
 800b31a:	2104      	movs	r1, #4
 800b31c:	4620      	mov	r0, r4
 800b31e:	f001 f9b1 	bl	800c684 <ucdr_alignment>
 800b322:	3004      	adds	r0, #4
 800b324:	4420      	add	r0, r4
 800b326:	bd10      	pop	{r4, pc}
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <_ControllerMsg__max_serialized_size>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	2104      	movs	r1, #4
 800b330:	2000      	movs	r0, #0
 800b332:	f001 f9a7 	bl	800c684 <ucdr_alignment>
 800b336:	1d05      	adds	r5, r0, #4
 800b338:	2104      	movs	r1, #4
 800b33a:	4628      	mov	r0, r5
 800b33c:	f001 f9a2 	bl	800c684 <ucdr_alignment>
 800b340:	1d04      	adds	r4, r0, #4
 800b342:	442c      	add	r4, r5
 800b344:	2104      	movs	r1, #4
 800b346:	4620      	mov	r0, r4
 800b348:	f001 f99c 	bl	800c684 <ucdr_alignment>
 800b34c:	3004      	adds	r0, #4
 800b34e:	4420      	add	r0, r4
 800b350:	bd38      	pop	{r3, r4, r5, pc}
 800b352:	bf00      	nop

0800b354 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg>:
 800b354:	4800      	ldr	r0, [pc, #0]	@ (800b358 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__ControllerMsg+0x4>)
 800b356:	4770      	bx	lr
 800b358:	20000250 	.word	0x20000250

0800b35c <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 800b35c:	b1e0      	cbz	r0, 800b398 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x3c>
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	460d      	mov	r5, r1
 800b362:	4628      	mov	r0, r5
 800b364:	2104      	movs	r1, #4
 800b366:	f001 f98d 	bl	800c684 <ucdr_alignment>
 800b36a:	1d2b      	adds	r3, r5, #4
 800b36c:	181e      	adds	r6, r3, r0
 800b36e:	2104      	movs	r1, #4
 800b370:	4630      	mov	r0, r6
 800b372:	f001 f987 	bl	800c684 <ucdr_alignment>
 800b376:	1d04      	adds	r4, r0, #4
 800b378:	4434      	add	r4, r6
 800b37a:	2104      	movs	r1, #4
 800b37c:	4620      	mov	r0, r4
 800b37e:	f001 f981 	bl	800c684 <ucdr_alignment>
 800b382:	3004      	adds	r0, #4
 800b384:	4404      	add	r4, r0
 800b386:	2104      	movs	r1, #4
 800b388:	4620      	mov	r0, r4
 800b38a:	f001 f97b 	bl	800c684 <ucdr_alignment>
 800b38e:	f1c5 0504 	rsb	r5, r5, #4
 800b392:	4428      	add	r0, r5
 800b394:	4420      	add	r0, r4
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop

0800b39c <_EncoderMsg__cdr_deserialize>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	460c      	mov	r4, r1
 800b3a0:	b191      	cbz	r1, 800b3c8 <_EncoderMsg__cdr_deserialize+0x2c>
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	f001 f886 	bl	800c4b4 <ucdr_deserialize_float>
 800b3a8:	1d21      	adds	r1, r4, #4
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f001 f882 	bl	800c4b4 <ucdr_deserialize_float>
 800b3b0:	f104 0108 	add.w	r1, r4, #8
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f001 f87d 	bl	800c4b4 <ucdr_deserialize_float>
 800b3ba:	f104 010c 	add.w	r1, r4, #12
 800b3be:	4628      	mov	r0, r5
 800b3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3c4:	f001 b876 	b.w	800c4b4 <ucdr_deserialize_float>
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}

0800b3cc <_EncoderMsg__cdr_serialize>:
 800b3cc:	b1c0      	cbz	r0, 800b400 <_EncoderMsg__cdr_serialize+0x34>
 800b3ce:	b538      	push	{r3, r4, r5, lr}
 800b3d0:	ed90 0a00 	vldr	s0, [r0]
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	f000 ffd3 	bl	800c384 <ucdr_serialize_float>
 800b3de:	ed94 0a01 	vldr	s0, [r4, #4]
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 ffce 	bl	800c384 <ucdr_serialize_float>
 800b3e8:	ed94 0a02 	vldr	s0, [r4, #8]
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f000 ffc9 	bl	800c384 <ucdr_serialize_float>
 800b3f2:	ed94 0a03 	vldr	s0, [r4, #12]
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fc:	f000 bfc2 	b.w	800c384 <ucdr_serialize_float>
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop

0800b404 <_EncoderMsg__get_serialized_size>:
 800b404:	b1c0      	cbz	r0, 800b438 <_EncoderMsg__get_serialized_size+0x34>
 800b406:	b538      	push	{r3, r4, r5, lr}
 800b408:	2104      	movs	r1, #4
 800b40a:	2000      	movs	r0, #0
 800b40c:	f001 f93a 	bl	800c684 <ucdr_alignment>
 800b410:	1d05      	adds	r5, r0, #4
 800b412:	2104      	movs	r1, #4
 800b414:	4628      	mov	r0, r5
 800b416:	f001 f935 	bl	800c684 <ucdr_alignment>
 800b41a:	1d04      	adds	r4, r0, #4
 800b41c:	442c      	add	r4, r5
 800b41e:	2104      	movs	r1, #4
 800b420:	4620      	mov	r0, r4
 800b422:	f001 f92f 	bl	800c684 <ucdr_alignment>
 800b426:	3004      	adds	r0, #4
 800b428:	4404      	add	r4, r0
 800b42a:	2104      	movs	r1, #4
 800b42c:	4620      	mov	r0, r4
 800b42e:	f001 f929 	bl	800c684 <ucdr_alignment>
 800b432:	3004      	adds	r0, #4
 800b434:	4420      	add	r0, r4
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop

0800b43c <_EncoderMsg__max_serialized_size>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	2104      	movs	r1, #4
 800b440:	2000      	movs	r0, #0
 800b442:	f001 f91f 	bl	800c684 <ucdr_alignment>
 800b446:	1d05      	adds	r5, r0, #4
 800b448:	2104      	movs	r1, #4
 800b44a:	4628      	mov	r0, r5
 800b44c:	f001 f91a 	bl	800c684 <ucdr_alignment>
 800b450:	1d04      	adds	r4, r0, #4
 800b452:	442c      	add	r4, r5
 800b454:	2104      	movs	r1, #4
 800b456:	4620      	mov	r0, r4
 800b458:	f001 f914 	bl	800c684 <ucdr_alignment>
 800b45c:	3004      	adds	r0, #4
 800b45e:	4404      	add	r4, r0
 800b460:	2104      	movs	r1, #4
 800b462:	4620      	mov	r0, r4
 800b464:	f001 f90e 	bl	800c684 <ucdr_alignment>
 800b468:	3004      	adds	r0, #4
 800b46a:	4420      	add	r0, r4
 800b46c:	bd38      	pop	{r3, r4, r5, pc}
 800b46e:	bf00      	nop

0800b470 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 800b470:	4800      	ldr	r0, [pc, #0]	@ (800b474 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 800b472:	4770      	bx	lr
 800b474:	20000278 	.word	0x20000278

0800b478 <ucdr_serialize_bool>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	460d      	mov	r5, r1
 800b47c:	2101      	movs	r1, #1
 800b47e:	4604      	mov	r4, r0
 800b480:	f001 f8b4 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b484:	b148      	cbz	r0, 800b49a <ucdr_serialize_bool+0x22>
 800b486:	68a3      	ldr	r3, [r4, #8]
 800b488:	701d      	strb	r5, [r3, #0]
 800b48a:	68a2      	ldr	r2, [r4, #8]
 800b48c:	6923      	ldr	r3, [r4, #16]
 800b48e:	2101      	movs	r1, #1
 800b490:	440a      	add	r2, r1
 800b492:	440b      	add	r3, r1
 800b494:	60a2      	str	r2, [r4, #8]
 800b496:	6123      	str	r3, [r4, #16]
 800b498:	7561      	strb	r1, [r4, #21]
 800b49a:	7da0      	ldrb	r0, [r4, #22]
 800b49c:	f080 0001 	eor.w	r0, r0, #1
 800b4a0:	bd38      	pop	{r3, r4, r5, pc}
 800b4a2:	bf00      	nop

0800b4a4 <ucdr_deserialize_bool>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	460d      	mov	r5, r1
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	f001 f89e 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b4b0:	b160      	cbz	r0, 800b4cc <ucdr_deserialize_bool+0x28>
 800b4b2:	68a2      	ldr	r2, [r4, #8]
 800b4b4:	6923      	ldr	r3, [r4, #16]
 800b4b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b4ba:	3900      	subs	r1, #0
 800b4bc:	bf18      	it	ne
 800b4be:	2101      	movne	r1, #1
 800b4c0:	7029      	strb	r1, [r5, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	60a2      	str	r2, [r4, #8]
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	7561      	strb	r1, [r4, #21]
 800b4cc:	7da0      	ldrb	r0, [r4, #22]
 800b4ce:	f080 0001 	eor.w	r0, r0, #1
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}

0800b4d4 <ucdr_serialize_uint8_t>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	2101      	movs	r1, #1
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f001 f886 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b4e0:	b148      	cbz	r0, 800b4f6 <ucdr_serialize_uint8_t+0x22>
 800b4e2:	68a3      	ldr	r3, [r4, #8]
 800b4e4:	701d      	strb	r5, [r3, #0]
 800b4e6:	68a2      	ldr	r2, [r4, #8]
 800b4e8:	6923      	ldr	r3, [r4, #16]
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	440a      	add	r2, r1
 800b4ee:	440b      	add	r3, r1
 800b4f0:	60a2      	str	r2, [r4, #8]
 800b4f2:	6123      	str	r3, [r4, #16]
 800b4f4:	7561      	strb	r1, [r4, #21]
 800b4f6:	7da0      	ldrb	r0, [r4, #22]
 800b4f8:	f080 0001 	eor.w	r0, r0, #1
 800b4fc:	bd38      	pop	{r3, r4, r5, pc}
 800b4fe:	bf00      	nop

0800b500 <ucdr_deserialize_uint8_t>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	460d      	mov	r5, r1
 800b504:	2101      	movs	r1, #1
 800b506:	4604      	mov	r4, r0
 800b508:	f001 f870 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b50c:	b150      	cbz	r0, 800b524 <ucdr_deserialize_uint8_t+0x24>
 800b50e:	68a3      	ldr	r3, [r4, #8]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	702b      	strb	r3, [r5, #0]
 800b514:	68a2      	ldr	r2, [r4, #8]
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	2101      	movs	r1, #1
 800b51a:	440a      	add	r2, r1
 800b51c:	440b      	add	r3, r1
 800b51e:	60a2      	str	r2, [r4, #8]
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	7561      	strb	r1, [r4, #21]
 800b524:	7da0      	ldrb	r0, [r4, #22]
 800b526:	f080 0001 	eor.w	r0, r0, #1
 800b52a:	bd38      	pop	{r3, r4, r5, pc}

0800b52c <ucdr_serialize_uint16_t>:
 800b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b530:	b082      	sub	sp, #8
 800b532:	460b      	mov	r3, r1
 800b534:	2102      	movs	r1, #2
 800b536:	4604      	mov	r4, r0
 800b538:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b53c:	f001 f8aa 	bl	800c694 <ucdr_buffer_alignment>
 800b540:	4601      	mov	r1, r0
 800b542:	4620      	mov	r0, r4
 800b544:	7d67      	ldrb	r7, [r4, #21]
 800b546:	f001 f8e9 	bl	800c71c <ucdr_advance_buffer>
 800b54a:	2102      	movs	r1, #2
 800b54c:	4620      	mov	r0, r4
 800b54e:	f001 f841 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800b552:	bb78      	cbnz	r0, 800b5b4 <ucdr_serialize_uint16_t+0x88>
 800b554:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b558:	42ab      	cmp	r3, r5
 800b55a:	d926      	bls.n	800b5aa <ucdr_serialize_uint16_t+0x7e>
 800b55c:	1b5e      	subs	r6, r3, r5
 800b55e:	60a3      	str	r3, [r4, #8]
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	f1c6 0802 	rsb	r8, r6, #2
 800b566:	4433      	add	r3, r6
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	4641      	mov	r1, r8
 800b56c:	4620      	mov	r0, r4
 800b56e:	f001 f83d 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b572:	2800      	cmp	r0, #0
 800b574:	d03b      	beq.n	800b5ee <ucdr_serialize_uint16_t+0xc2>
 800b576:	7d23      	ldrb	r3, [r4, #20]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d04a      	beq.n	800b612 <ucdr_serialize_uint16_t+0xe6>
 800b57c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b580:	702b      	strb	r3, [r5, #0]
 800b582:	2e00      	cmp	r6, #0
 800b584:	d040      	beq.n	800b608 <ucdr_serialize_uint16_t+0xdc>
 800b586:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b58a:	706b      	strb	r3, [r5, #1]
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	68a2      	ldr	r2, [r4, #8]
 800b590:	7da0      	ldrb	r0, [r4, #22]
 800b592:	3302      	adds	r3, #2
 800b594:	1b9e      	subs	r6, r3, r6
 800b596:	4442      	add	r2, r8
 800b598:	2302      	movs	r3, #2
 800b59a:	f080 0001 	eor.w	r0, r0, #1
 800b59e:	60a2      	str	r2, [r4, #8]
 800b5a0:	6126      	str	r6, [r4, #16]
 800b5a2:	7563      	strb	r3, [r4, #21]
 800b5a4:	b002      	add	sp, #8
 800b5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5aa:	2102      	movs	r1, #2
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f001 f81d 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b5b2:	b190      	cbz	r0, 800b5da <ucdr_serialize_uint16_t+0xae>
 800b5b4:	7d23      	ldrb	r3, [r4, #20]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	68a3      	ldr	r3, [r4, #8]
 800b5ba:	d014      	beq.n	800b5e6 <ucdr_serialize_uint16_t+0xba>
 800b5bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5c8:	705a      	strb	r2, [r3, #1]
 800b5ca:	68a2      	ldr	r2, [r4, #8]
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	3202      	adds	r2, #2
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	2102      	movs	r1, #2
 800b5d4:	60a2      	str	r2, [r4, #8]
 800b5d6:	6123      	str	r3, [r4, #16]
 800b5d8:	7561      	strb	r1, [r4, #21]
 800b5da:	7da0      	ldrb	r0, [r4, #22]
 800b5dc:	f080 0001 	eor.w	r0, r0, #1
 800b5e0:	b002      	add	sp, #8
 800b5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5ea:	801a      	strh	r2, [r3, #0]
 800b5ec:	e7ed      	b.n	800b5ca <ucdr_serialize_uint16_t+0x9e>
 800b5ee:	68a2      	ldr	r2, [r4, #8]
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	7da0      	ldrb	r0, [r4, #22]
 800b5f4:	7567      	strb	r7, [r4, #21]
 800b5f6:	1b92      	subs	r2, r2, r6
 800b5f8:	1b9b      	subs	r3, r3, r6
 800b5fa:	f080 0001 	eor.w	r0, r0, #1
 800b5fe:	60a2      	str	r2, [r4, #8]
 800b600:	6123      	str	r3, [r4, #16]
 800b602:	b002      	add	sp, #8
 800b604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e7bc      	b.n	800b58c <ucdr_serialize_uint16_t+0x60>
 800b612:	4628      	mov	r0, r5
 800b614:	f10d 0506 	add.w	r5, sp, #6
 800b618:	4629      	mov	r1, r5
 800b61a:	4632      	mov	r2, r6
 800b61c:	f00b f8b1 	bl	8016782 <memcpy>
 800b620:	68a0      	ldr	r0, [r4, #8]
 800b622:	4642      	mov	r2, r8
 800b624:	19a9      	adds	r1, r5, r6
 800b626:	f00b f8ac 	bl	8016782 <memcpy>
 800b62a:	e7af      	b.n	800b58c <ucdr_serialize_uint16_t+0x60>

0800b62c <ucdr_serialize_endian_uint16_t>:
 800b62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b630:	b083      	sub	sp, #12
 800b632:	460d      	mov	r5, r1
 800b634:	2102      	movs	r1, #2
 800b636:	4604      	mov	r4, r0
 800b638:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b63c:	f001 f82a 	bl	800c694 <ucdr_buffer_alignment>
 800b640:	4601      	mov	r1, r0
 800b642:	4620      	mov	r0, r4
 800b644:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b648:	f001 f868 	bl	800c71c <ucdr_advance_buffer>
 800b64c:	2102      	movs	r1, #2
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 ffc0 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800b654:	bb70      	cbnz	r0, 800b6b4 <ucdr_serialize_endian_uint16_t+0x88>
 800b656:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b65a:	42be      	cmp	r6, r7
 800b65c:	d925      	bls.n	800b6aa <ucdr_serialize_endian_uint16_t+0x7e>
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	60a6      	str	r6, [r4, #8]
 800b662:	1bf6      	subs	r6, r6, r7
 800b664:	4433      	add	r3, r6
 800b666:	f1c6 0902 	rsb	r9, r6, #2
 800b66a:	6123      	str	r3, [r4, #16]
 800b66c:	4649      	mov	r1, r9
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 ffbc 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b674:	2800      	cmp	r0, #0
 800b676:	d039      	beq.n	800b6ec <ucdr_serialize_endian_uint16_t+0xc0>
 800b678:	2d01      	cmp	r5, #1
 800b67a:	d04a      	beq.n	800b712 <ucdr_serialize_endian_uint16_t+0xe6>
 800b67c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b680:	703b      	strb	r3, [r7, #0]
 800b682:	2e00      	cmp	r6, #0
 800b684:	d040      	beq.n	800b708 <ucdr_serialize_endian_uint16_t+0xdc>
 800b686:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b68a:	707b      	strb	r3, [r7, #1]
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	68a2      	ldr	r2, [r4, #8]
 800b690:	7da0      	ldrb	r0, [r4, #22]
 800b692:	3302      	adds	r3, #2
 800b694:	444a      	add	r2, r9
 800b696:	1b9b      	subs	r3, r3, r6
 800b698:	2102      	movs	r1, #2
 800b69a:	f080 0001 	eor.w	r0, r0, #1
 800b69e:	60a2      	str	r2, [r4, #8]
 800b6a0:	6123      	str	r3, [r4, #16]
 800b6a2:	7561      	strb	r1, [r4, #21]
 800b6a4:	b003      	add	sp, #12
 800b6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	2102      	movs	r1, #2
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 ff9d 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b6b2:	b188      	cbz	r0, 800b6d8 <ucdr_serialize_endian_uint16_t+0xac>
 800b6b4:	2d01      	cmp	r5, #1
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	d014      	beq.n	800b6e4 <ucdr_serialize_endian_uint16_t+0xb8>
 800b6ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6c6:	705a      	strb	r2, [r3, #1]
 800b6c8:	68a2      	ldr	r2, [r4, #8]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	3202      	adds	r2, #2
 800b6ce:	3302      	adds	r3, #2
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	60a2      	str	r2, [r4, #8]
 800b6d4:	6123      	str	r3, [r4, #16]
 800b6d6:	7561      	strb	r1, [r4, #21]
 800b6d8:	7da0      	ldrb	r0, [r4, #22]
 800b6da:	f080 0001 	eor.w	r0, r0, #1
 800b6de:	b003      	add	sp, #12
 800b6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6e8:	801a      	strh	r2, [r3, #0]
 800b6ea:	e7ed      	b.n	800b6c8 <ucdr_serialize_endian_uint16_t+0x9c>
 800b6ec:	68a2      	ldr	r2, [r4, #8]
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	7da0      	ldrb	r0, [r4, #22]
 800b6f2:	f884 8015 	strb.w	r8, [r4, #21]
 800b6f6:	1b92      	subs	r2, r2, r6
 800b6f8:	1b9b      	subs	r3, r3, r6
 800b6fa:	f080 0001 	eor.w	r0, r0, #1
 800b6fe:	60a2      	str	r2, [r4, #8]
 800b700:	6123      	str	r3, [r4, #16]
 800b702:	b003      	add	sp, #12
 800b704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b708:	68a3      	ldr	r3, [r4, #8]
 800b70a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	e7bc      	b.n	800b68c <ucdr_serialize_endian_uint16_t+0x60>
 800b712:	f10d 0506 	add.w	r5, sp, #6
 800b716:	4629      	mov	r1, r5
 800b718:	4632      	mov	r2, r6
 800b71a:	4638      	mov	r0, r7
 800b71c:	f00b f831 	bl	8016782 <memcpy>
 800b720:	68a0      	ldr	r0, [r4, #8]
 800b722:	464a      	mov	r2, r9
 800b724:	19a9      	adds	r1, r5, r6
 800b726:	f00b f82c 	bl	8016782 <memcpy>
 800b72a:	e7af      	b.n	800b68c <ucdr_serialize_endian_uint16_t+0x60>

0800b72c <ucdr_deserialize_uint16_t>:
 800b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b730:	460d      	mov	r5, r1
 800b732:	2102      	movs	r1, #2
 800b734:	4604      	mov	r4, r0
 800b736:	f000 ffad 	bl	800c694 <ucdr_buffer_alignment>
 800b73a:	4601      	mov	r1, r0
 800b73c:	4620      	mov	r0, r4
 800b73e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b742:	f000 ffeb 	bl	800c71c <ucdr_advance_buffer>
 800b746:	2102      	movs	r1, #2
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 ff43 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800b74e:	bb60      	cbnz	r0, 800b7aa <ucdr_deserialize_uint16_t+0x7e>
 800b750:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b754:	42be      	cmp	r6, r7
 800b756:	d923      	bls.n	800b7a0 <ucdr_deserialize_uint16_t+0x74>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	60a6      	str	r6, [r4, #8]
 800b75c:	1bf6      	subs	r6, r6, r7
 800b75e:	4433      	add	r3, r6
 800b760:	f1c6 0902 	rsb	r9, r6, #2
 800b764:	6123      	str	r3, [r4, #16]
 800b766:	4649      	mov	r1, r9
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 ff3f 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d034      	beq.n	800b7dc <ucdr_deserialize_uint16_t+0xb0>
 800b772:	7d23      	ldrb	r3, [r4, #20]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d042      	beq.n	800b7fe <ucdr_deserialize_uint16_t+0xd2>
 800b778:	787b      	ldrb	r3, [r7, #1]
 800b77a:	702b      	strb	r3, [r5, #0]
 800b77c:	2e00      	cmp	r6, #0
 800b77e:	d03a      	beq.n	800b7f6 <ucdr_deserialize_uint16_t+0xca>
 800b780:	783b      	ldrb	r3, [r7, #0]
 800b782:	706b      	strb	r3, [r5, #1]
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	68a2      	ldr	r2, [r4, #8]
 800b788:	7da0      	ldrb	r0, [r4, #22]
 800b78a:	2102      	movs	r1, #2
 800b78c:	3302      	adds	r3, #2
 800b78e:	444a      	add	r2, r9
 800b790:	1b9b      	subs	r3, r3, r6
 800b792:	7561      	strb	r1, [r4, #21]
 800b794:	60a2      	str	r2, [r4, #8]
 800b796:	6123      	str	r3, [r4, #16]
 800b798:	f080 0001 	eor.w	r0, r0, #1
 800b79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a0:	2102      	movs	r1, #2
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 ff22 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b7a8:	b180      	cbz	r0, 800b7cc <ucdr_deserialize_uint16_t+0xa0>
 800b7aa:	7d23      	ldrb	r3, [r4, #20]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	68a3      	ldr	r3, [r4, #8]
 800b7b0:	d011      	beq.n	800b7d6 <ucdr_deserialize_uint16_t+0xaa>
 800b7b2:	785b      	ldrb	r3, [r3, #1]
 800b7b4:	702b      	strb	r3, [r5, #0]
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	706b      	strb	r3, [r5, #1]
 800b7bc:	68a2      	ldr	r2, [r4, #8]
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	3202      	adds	r2, #2
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	2102      	movs	r1, #2
 800b7c6:	60a2      	str	r2, [r4, #8]
 800b7c8:	6123      	str	r3, [r4, #16]
 800b7ca:	7561      	strb	r1, [r4, #21]
 800b7cc:	7da0      	ldrb	r0, [r4, #22]
 800b7ce:	f080 0001 	eor.w	r0, r0, #1
 800b7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	802b      	strh	r3, [r5, #0]
 800b7da:	e7ef      	b.n	800b7bc <ucdr_deserialize_uint16_t+0x90>
 800b7dc:	68a2      	ldr	r2, [r4, #8]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	7da0      	ldrb	r0, [r4, #22]
 800b7e2:	f884 8015 	strb.w	r8, [r4, #21]
 800b7e6:	1b92      	subs	r2, r2, r6
 800b7e8:	1b9b      	subs	r3, r3, r6
 800b7ea:	60a2      	str	r2, [r4, #8]
 800b7ec:	6123      	str	r3, [r4, #16]
 800b7ee:	f080 0001 	eor.w	r0, r0, #1
 800b7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	706b      	strb	r3, [r5, #1]
 800b7fc:	e7c2      	b.n	800b784 <ucdr_deserialize_uint16_t+0x58>
 800b7fe:	4639      	mov	r1, r7
 800b800:	4632      	mov	r2, r6
 800b802:	4628      	mov	r0, r5
 800b804:	f00a ffbd 	bl	8016782 <memcpy>
 800b808:	68a1      	ldr	r1, [r4, #8]
 800b80a:	464a      	mov	r2, r9
 800b80c:	19a8      	adds	r0, r5, r6
 800b80e:	f00a ffb8 	bl	8016782 <memcpy>
 800b812:	e7b7      	b.n	800b784 <ucdr_deserialize_uint16_t+0x58>

0800b814 <ucdr_deserialize_endian_uint16_t>:
 800b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b818:	460e      	mov	r6, r1
 800b81a:	2102      	movs	r1, #2
 800b81c:	4604      	mov	r4, r0
 800b81e:	4615      	mov	r5, r2
 800b820:	f000 ff38 	bl	800c694 <ucdr_buffer_alignment>
 800b824:	4601      	mov	r1, r0
 800b826:	4620      	mov	r0, r4
 800b828:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b82c:	f000 ff76 	bl	800c71c <ucdr_advance_buffer>
 800b830:	2102      	movs	r1, #2
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fece 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800b838:	bb70      	cbnz	r0, 800b898 <ucdr_deserialize_endian_uint16_t+0x84>
 800b83a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b83e:	4547      	cmp	r7, r8
 800b840:	d925      	bls.n	800b88e <ucdr_deserialize_endian_uint16_t+0x7a>
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	60a7      	str	r7, [r4, #8]
 800b846:	eba7 0708 	sub.w	r7, r7, r8
 800b84a:	443b      	add	r3, r7
 800b84c:	f1c7 0a02 	rsb	sl, r7, #2
 800b850:	6123      	str	r3, [r4, #16]
 800b852:	4651      	mov	r1, sl
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fec9 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d034      	beq.n	800b8c8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b85e:	2e01      	cmp	r6, #1
 800b860:	d043      	beq.n	800b8ea <ucdr_deserialize_endian_uint16_t+0xd6>
 800b862:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b866:	702b      	strb	r3, [r5, #0]
 800b868:	2f00      	cmp	r7, #0
 800b86a:	d03a      	beq.n	800b8e2 <ucdr_deserialize_endian_uint16_t+0xce>
 800b86c:	f898 3000 	ldrb.w	r3, [r8]
 800b870:	706b      	strb	r3, [r5, #1]
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	68a2      	ldr	r2, [r4, #8]
 800b876:	7da0      	ldrb	r0, [r4, #22]
 800b878:	2102      	movs	r1, #2
 800b87a:	3302      	adds	r3, #2
 800b87c:	4452      	add	r2, sl
 800b87e:	1bdb      	subs	r3, r3, r7
 800b880:	7561      	strb	r1, [r4, #21]
 800b882:	60a2      	str	r2, [r4, #8]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	f080 0001 	eor.w	r0, r0, #1
 800b88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88e:	2102      	movs	r1, #2
 800b890:	4620      	mov	r0, r4
 800b892:	f000 feab 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b896:	b178      	cbz	r0, 800b8b8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b898:	2e01      	cmp	r6, #1
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	d011      	beq.n	800b8c2 <ucdr_deserialize_endian_uint16_t+0xae>
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	702b      	strb	r3, [r5, #0]
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	706b      	strb	r3, [r5, #1]
 800b8a8:	68a2      	ldr	r2, [r4, #8]
 800b8aa:	6923      	ldr	r3, [r4, #16]
 800b8ac:	3202      	adds	r2, #2
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	2102      	movs	r1, #2
 800b8b2:	60a2      	str	r2, [r4, #8]
 800b8b4:	6123      	str	r3, [r4, #16]
 800b8b6:	7561      	strb	r1, [r4, #21]
 800b8b8:	7da0      	ldrb	r0, [r4, #22]
 800b8ba:	f080 0001 	eor.w	r0, r0, #1
 800b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	802b      	strh	r3, [r5, #0]
 800b8c6:	e7ef      	b.n	800b8a8 <ucdr_deserialize_endian_uint16_t+0x94>
 800b8c8:	68a2      	ldr	r2, [r4, #8]
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	7da0      	ldrb	r0, [r4, #22]
 800b8ce:	f884 9015 	strb.w	r9, [r4, #21]
 800b8d2:	1bd2      	subs	r2, r2, r7
 800b8d4:	1bdb      	subs	r3, r3, r7
 800b8d6:	60a2      	str	r2, [r4, #8]
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	f080 0001 	eor.w	r0, r0, #1
 800b8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e2:	68a3      	ldr	r3, [r4, #8]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	706b      	strb	r3, [r5, #1]
 800b8e8:	e7c3      	b.n	800b872 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	463a      	mov	r2, r7
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f00a ff47 	bl	8016782 <memcpy>
 800b8f4:	68a1      	ldr	r1, [r4, #8]
 800b8f6:	4652      	mov	r2, sl
 800b8f8:	19e8      	adds	r0, r5, r7
 800b8fa:	f00a ff42 	bl	8016782 <memcpy>
 800b8fe:	e7b8      	b.n	800b872 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b900 <ucdr_serialize_uint32_t>:
 800b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	4604      	mov	r4, r0
 800b908:	9101      	str	r1, [sp, #4]
 800b90a:	2104      	movs	r1, #4
 800b90c:	f000 fec2 	bl	800c694 <ucdr_buffer_alignment>
 800b910:	4601      	mov	r1, r0
 800b912:	4620      	mov	r0, r4
 800b914:	7d67      	ldrb	r7, [r4, #21]
 800b916:	f000 ff01 	bl	800c71c <ucdr_advance_buffer>
 800b91a:	2104      	movs	r1, #4
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fe59 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800b922:	2800      	cmp	r0, #0
 800b924:	d139      	bne.n	800b99a <ucdr_serialize_uint32_t+0x9a>
 800b926:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b92a:	42ab      	cmp	r3, r5
 800b92c:	d930      	bls.n	800b990 <ucdr_serialize_uint32_t+0x90>
 800b92e:	1b5e      	subs	r6, r3, r5
 800b930:	60a3      	str	r3, [r4, #8]
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	f1c6 0804 	rsb	r8, r6, #4
 800b938:	4433      	add	r3, r6
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	4641      	mov	r1, r8
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 fe54 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b944:	2800      	cmp	r0, #0
 800b946:	d04c      	beq.n	800b9e2 <ucdr_serialize_uint32_t+0xe2>
 800b948:	7d23      	ldrb	r3, [r4, #20]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d063      	beq.n	800ba16 <ucdr_serialize_uint32_t+0x116>
 800b94e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b952:	702b      	strb	r3, [r5, #0]
 800b954:	2e00      	cmp	r6, #0
 800b956:	d051      	beq.n	800b9fc <ucdr_serialize_uint32_t+0xfc>
 800b958:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b95c:	706b      	strb	r3, [r5, #1]
 800b95e:	2e01      	cmp	r6, #1
 800b960:	d050      	beq.n	800ba04 <ucdr_serialize_uint32_t+0x104>
 800b962:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b966:	70ab      	strb	r3, [r5, #2]
 800b968:	2e02      	cmp	r6, #2
 800b96a:	d04f      	beq.n	800ba0c <ucdr_serialize_uint32_t+0x10c>
 800b96c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b970:	70eb      	strb	r3, [r5, #3]
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	68a2      	ldr	r2, [r4, #8]
 800b976:	7da0      	ldrb	r0, [r4, #22]
 800b978:	3304      	adds	r3, #4
 800b97a:	1b9e      	subs	r6, r3, r6
 800b97c:	4442      	add	r2, r8
 800b97e:	2304      	movs	r3, #4
 800b980:	f080 0001 	eor.w	r0, r0, #1
 800b984:	60a2      	str	r2, [r4, #8]
 800b986:	6126      	str	r6, [r4, #16]
 800b988:	7563      	strb	r3, [r4, #21]
 800b98a:	b002      	add	sp, #8
 800b98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b990:	2104      	movs	r1, #4
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fe2a 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800b998:	b1d0      	cbz	r0, 800b9d0 <ucdr_serialize_uint32_t+0xd0>
 800b99a:	7d23      	ldrb	r3, [r4, #20]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	d01c      	beq.n	800b9dc <ucdr_serialize_uint32_t+0xdc>
 800b9a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	68a3      	ldr	r3, [r4, #8]
 800b9aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9ae:	705a      	strb	r2, [r3, #1]
 800b9b0:	68a3      	ldr	r3, [r4, #8]
 800b9b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9b6:	709a      	strb	r2, [r3, #2]
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9be:	70da      	strb	r2, [r3, #3]
 800b9c0:	68a2      	ldr	r2, [r4, #8]
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	3204      	adds	r2, #4
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	2104      	movs	r1, #4
 800b9ca:	60a2      	str	r2, [r4, #8]
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	7561      	strb	r1, [r4, #21]
 800b9d0:	7da0      	ldrb	r0, [r4, #22]
 800b9d2:	f080 0001 	eor.w	r0, r0, #1
 800b9d6:	b002      	add	sp, #8
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	9a01      	ldr	r2, [sp, #4]
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	e7ee      	b.n	800b9c0 <ucdr_serialize_uint32_t+0xc0>
 800b9e2:	68a2      	ldr	r2, [r4, #8]
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	7da0      	ldrb	r0, [r4, #22]
 800b9e8:	7567      	strb	r7, [r4, #21]
 800b9ea:	1b92      	subs	r2, r2, r6
 800b9ec:	1b9b      	subs	r3, r3, r6
 800b9ee:	f080 0001 	eor.w	r0, r0, #1
 800b9f2:	60a2      	str	r2, [r4, #8]
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	b002      	add	sp, #8
 800b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fc:	68a3      	ldr	r3, [r4, #8]
 800b9fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba0a:	701a      	strb	r2, [r3, #0]
 800ba0c:	68a3      	ldr	r3, [r4, #8]
 800ba0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	e7ad      	b.n	800b972 <ucdr_serialize_uint32_t+0x72>
 800ba16:	4628      	mov	r0, r5
 800ba18:	ad01      	add	r5, sp, #4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	f00a feb0 	bl	8016782 <memcpy>
 800ba22:	68a0      	ldr	r0, [r4, #8]
 800ba24:	4642      	mov	r2, r8
 800ba26:	19a9      	adds	r1, r5, r6
 800ba28:	f00a feab 	bl	8016782 <memcpy>
 800ba2c:	e7a1      	b.n	800b972 <ucdr_serialize_uint32_t+0x72>
 800ba2e:	bf00      	nop

0800ba30 <ucdr_serialize_endian_uint32_t>:
 800ba30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba34:	b083      	sub	sp, #12
 800ba36:	460d      	mov	r5, r1
 800ba38:	2104      	movs	r1, #4
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	9201      	str	r2, [sp, #4]
 800ba3e:	f000 fe29 	bl	800c694 <ucdr_buffer_alignment>
 800ba42:	4601      	mov	r1, r0
 800ba44:	4620      	mov	r0, r4
 800ba46:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba4a:	f000 fe67 	bl	800c71c <ucdr_advance_buffer>
 800ba4e:	2104      	movs	r1, #4
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 fdbf 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d138      	bne.n	800bacc <ucdr_serialize_endian_uint32_t+0x9c>
 800ba5a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba5e:	42b7      	cmp	r7, r6
 800ba60:	d92f      	bls.n	800bac2 <ucdr_serialize_endian_uint32_t+0x92>
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	60a7      	str	r7, [r4, #8]
 800ba66:	1bbf      	subs	r7, r7, r6
 800ba68:	443b      	add	r3, r7
 800ba6a:	f1c7 0904 	rsb	r9, r7, #4
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	4649      	mov	r1, r9
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 fdba 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d04a      	beq.n	800bb12 <ucdr_serialize_endian_uint32_t+0xe2>
 800ba7c:	2d01      	cmp	r5, #1
 800ba7e:	d063      	beq.n	800bb48 <ucdr_serialize_endian_uint32_t+0x118>
 800ba80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba84:	7033      	strb	r3, [r6, #0]
 800ba86:	2f00      	cmp	r7, #0
 800ba88:	d051      	beq.n	800bb2e <ucdr_serialize_endian_uint32_t+0xfe>
 800ba8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba8e:	7073      	strb	r3, [r6, #1]
 800ba90:	2f01      	cmp	r7, #1
 800ba92:	d050      	beq.n	800bb36 <ucdr_serialize_endian_uint32_t+0x106>
 800ba94:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ba98:	70b3      	strb	r3, [r6, #2]
 800ba9a:	2f02      	cmp	r7, #2
 800ba9c:	d04f      	beq.n	800bb3e <ucdr_serialize_endian_uint32_t+0x10e>
 800ba9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800baa2:	70f3      	strb	r3, [r6, #3]
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	68a2      	ldr	r2, [r4, #8]
 800baa8:	7da0      	ldrb	r0, [r4, #22]
 800baaa:	3304      	adds	r3, #4
 800baac:	444a      	add	r2, r9
 800baae:	1bdb      	subs	r3, r3, r7
 800bab0:	2104      	movs	r1, #4
 800bab2:	f080 0001 	eor.w	r0, r0, #1
 800bab6:	60a2      	str	r2, [r4, #8]
 800bab8:	6123      	str	r3, [r4, #16]
 800baba:	7561      	strb	r1, [r4, #21]
 800babc:	b003      	add	sp, #12
 800babe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bac2:	2104      	movs	r1, #4
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 fd91 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800baca:	b1c8      	cbz	r0, 800bb00 <ucdr_serialize_endian_uint32_t+0xd0>
 800bacc:	2d01      	cmp	r5, #1
 800bace:	68a3      	ldr	r3, [r4, #8]
 800bad0:	d01c      	beq.n	800bb0c <ucdr_serialize_endian_uint32_t+0xdc>
 800bad2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bad6:	701a      	strb	r2, [r3, #0]
 800bad8:	68a3      	ldr	r3, [r4, #8]
 800bada:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bade:	705a      	strb	r2, [r3, #1]
 800bae0:	68a3      	ldr	r3, [r4, #8]
 800bae2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bae6:	709a      	strb	r2, [r3, #2]
 800bae8:	68a3      	ldr	r3, [r4, #8]
 800baea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800baee:	70da      	strb	r2, [r3, #3]
 800baf0:	68a2      	ldr	r2, [r4, #8]
 800baf2:	6923      	ldr	r3, [r4, #16]
 800baf4:	3204      	adds	r2, #4
 800baf6:	3304      	adds	r3, #4
 800baf8:	2104      	movs	r1, #4
 800bafa:	60a2      	str	r2, [r4, #8]
 800bafc:	6123      	str	r3, [r4, #16]
 800bafe:	7561      	strb	r1, [r4, #21]
 800bb00:	7da0      	ldrb	r0, [r4, #22]
 800bb02:	f080 0001 	eor.w	r0, r0, #1
 800bb06:	b003      	add	sp, #12
 800bb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb0c:	9a01      	ldr	r2, [sp, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	e7ee      	b.n	800baf0 <ucdr_serialize_endian_uint32_t+0xc0>
 800bb12:	68a2      	ldr	r2, [r4, #8]
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	7da0      	ldrb	r0, [r4, #22]
 800bb18:	f884 8015 	strb.w	r8, [r4, #21]
 800bb1c:	1bd2      	subs	r2, r2, r7
 800bb1e:	1bdb      	subs	r3, r3, r7
 800bb20:	f080 0001 	eor.w	r0, r0, #1
 800bb24:	60a2      	str	r2, [r4, #8]
 800bb26:	6123      	str	r3, [r4, #16]
 800bb28:	b003      	add	sp, #12
 800bb2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb3c:	701a      	strb	r2, [r3, #0]
 800bb3e:	68a3      	ldr	r3, [r4, #8]
 800bb40:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	e7ad      	b.n	800baa4 <ucdr_serialize_endian_uint32_t+0x74>
 800bb48:	ad01      	add	r5, sp, #4
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	463a      	mov	r2, r7
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f00a fe17 	bl	8016782 <memcpy>
 800bb54:	68a0      	ldr	r0, [r4, #8]
 800bb56:	464a      	mov	r2, r9
 800bb58:	19e9      	adds	r1, r5, r7
 800bb5a:	f00a fe12 	bl	8016782 <memcpy>
 800bb5e:	e7a1      	b.n	800baa4 <ucdr_serialize_endian_uint32_t+0x74>

0800bb60 <ucdr_deserialize_uint32_t>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	460d      	mov	r5, r1
 800bb66:	2104      	movs	r1, #4
 800bb68:	4604      	mov	r4, r0
 800bb6a:	f000 fd93 	bl	800c694 <ucdr_buffer_alignment>
 800bb6e:	4601      	mov	r1, r0
 800bb70:	4620      	mov	r0, r4
 800bb72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb76:	f000 fdd1 	bl	800c71c <ucdr_advance_buffer>
 800bb7a:	2104      	movs	r1, #4
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fd29 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d138      	bne.n	800bbf8 <ucdr_deserialize_uint32_t+0x98>
 800bb86:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bb8a:	42b7      	cmp	r7, r6
 800bb8c:	d92f      	bls.n	800bbee <ucdr_deserialize_uint32_t+0x8e>
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	60a7      	str	r7, [r4, #8]
 800bb92:	1bbf      	subs	r7, r7, r6
 800bb94:	443b      	add	r3, r7
 800bb96:	f1c7 0904 	rsb	r9, r7, #4
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fd24 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d046      	beq.n	800bc36 <ucdr_deserialize_uint32_t+0xd6>
 800bba8:	7d23      	ldrb	r3, [r4, #20]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d05c      	beq.n	800bc68 <ucdr_deserialize_uint32_t+0x108>
 800bbae:	78f3      	ldrb	r3, [r6, #3]
 800bbb0:	702b      	strb	r3, [r5, #0]
 800bbb2:	2f00      	cmp	r7, #0
 800bbb4:	d04c      	beq.n	800bc50 <ucdr_deserialize_uint32_t+0xf0>
 800bbb6:	78b3      	ldrb	r3, [r6, #2]
 800bbb8:	706b      	strb	r3, [r5, #1]
 800bbba:	2f01      	cmp	r7, #1
 800bbbc:	f105 0302 	add.w	r3, r5, #2
 800bbc0:	d04a      	beq.n	800bc58 <ucdr_deserialize_uint32_t+0xf8>
 800bbc2:	7873      	ldrb	r3, [r6, #1]
 800bbc4:	70ab      	strb	r3, [r5, #2]
 800bbc6:	2f02      	cmp	r7, #2
 800bbc8:	f105 0303 	add.w	r3, r5, #3
 800bbcc:	d048      	beq.n	800bc60 <ucdr_deserialize_uint32_t+0x100>
 800bbce:	7833      	ldrb	r3, [r6, #0]
 800bbd0:	70eb      	strb	r3, [r5, #3]
 800bbd2:	6923      	ldr	r3, [r4, #16]
 800bbd4:	68a2      	ldr	r2, [r4, #8]
 800bbd6:	7da0      	ldrb	r0, [r4, #22]
 800bbd8:	2104      	movs	r1, #4
 800bbda:	3304      	adds	r3, #4
 800bbdc:	444a      	add	r2, r9
 800bbde:	1bdb      	subs	r3, r3, r7
 800bbe0:	7561      	strb	r1, [r4, #21]
 800bbe2:	60a2      	str	r2, [r4, #8]
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	f080 0001 	eor.w	r0, r0, #1
 800bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbee:	2104      	movs	r1, #4
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fcfb 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bbf6:	b1b0      	cbz	r0, 800bc26 <ucdr_deserialize_uint32_t+0xc6>
 800bbf8:	7d23      	ldrb	r3, [r4, #20]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	d017      	beq.n	800bc30 <ucdr_deserialize_uint32_t+0xd0>
 800bc00:	78db      	ldrb	r3, [r3, #3]
 800bc02:	702b      	strb	r3, [r5, #0]
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	789b      	ldrb	r3, [r3, #2]
 800bc08:	706b      	strb	r3, [r5, #1]
 800bc0a:	68a3      	ldr	r3, [r4, #8]
 800bc0c:	785b      	ldrb	r3, [r3, #1]
 800bc0e:	70ab      	strb	r3, [r5, #2]
 800bc10:	68a3      	ldr	r3, [r4, #8]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	70eb      	strb	r3, [r5, #3]
 800bc16:	68a2      	ldr	r2, [r4, #8]
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	3204      	adds	r2, #4
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	2104      	movs	r1, #4
 800bc20:	60a2      	str	r2, [r4, #8]
 800bc22:	6123      	str	r3, [r4, #16]
 800bc24:	7561      	strb	r1, [r4, #21]
 800bc26:	7da0      	ldrb	r0, [r4, #22]
 800bc28:	f080 0001 	eor.w	r0, r0, #1
 800bc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	e7ef      	b.n	800bc16 <ucdr_deserialize_uint32_t+0xb6>
 800bc36:	68a2      	ldr	r2, [r4, #8]
 800bc38:	6923      	ldr	r3, [r4, #16]
 800bc3a:	7da0      	ldrb	r0, [r4, #22]
 800bc3c:	f884 8015 	strb.w	r8, [r4, #21]
 800bc40:	1bd2      	subs	r2, r2, r7
 800bc42:	1bdb      	subs	r3, r3, r7
 800bc44:	60a2      	str	r2, [r4, #8]
 800bc46:	6123      	str	r3, [r4, #16]
 800bc48:	f080 0001 	eor.w	r0, r0, #1
 800bc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc50:	68a3      	ldr	r3, [r4, #8]
 800bc52:	789b      	ldrb	r3, [r3, #2]
 800bc54:	706b      	strb	r3, [r5, #1]
 800bc56:	1cab      	adds	r3, r5, #2
 800bc58:	68a2      	ldr	r2, [r4, #8]
 800bc5a:	7852      	ldrb	r2, [r2, #1]
 800bc5c:	f803 2b01 	strb.w	r2, [r3], #1
 800bc60:	68a2      	ldr	r2, [r4, #8]
 800bc62:	7812      	ldrb	r2, [r2, #0]
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	e7b4      	b.n	800bbd2 <ucdr_deserialize_uint32_t+0x72>
 800bc68:	4631      	mov	r1, r6
 800bc6a:	463a      	mov	r2, r7
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f00a fd88 	bl	8016782 <memcpy>
 800bc72:	68a1      	ldr	r1, [r4, #8]
 800bc74:	464a      	mov	r2, r9
 800bc76:	19e8      	adds	r0, r5, r7
 800bc78:	f00a fd83 	bl	8016782 <memcpy>
 800bc7c:	e7a9      	b.n	800bbd2 <ucdr_deserialize_uint32_t+0x72>
 800bc7e:	bf00      	nop

0800bc80 <ucdr_deserialize_endian_uint32_t>:
 800bc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc84:	460e      	mov	r6, r1
 800bc86:	2104      	movs	r1, #4
 800bc88:	4604      	mov	r4, r0
 800bc8a:	4615      	mov	r5, r2
 800bc8c:	f000 fd02 	bl	800c694 <ucdr_buffer_alignment>
 800bc90:	4601      	mov	r1, r0
 800bc92:	4620      	mov	r0, r4
 800bc94:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc98:	f000 fd40 	bl	800c71c <ucdr_advance_buffer>
 800bc9c:	2104      	movs	r1, #4
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fc98 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d13c      	bne.n	800bd22 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bca8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bcac:	42bb      	cmp	r3, r7
 800bcae:	d933      	bls.n	800bd18 <ucdr_deserialize_endian_uint32_t+0x98>
 800bcb0:	eba3 0807 	sub.w	r8, r3, r7
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	f1c8 0a04 	rsb	sl, r8, #4
 800bcbc:	4443      	add	r3, r8
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	4651      	mov	r1, sl
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f000 fc92 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d048      	beq.n	800bd5e <ucdr_deserialize_endian_uint32_t+0xde>
 800bccc:	2e01      	cmp	r6, #1
 800bcce:	d061      	beq.n	800bd94 <ucdr_deserialize_endian_uint32_t+0x114>
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	702b      	strb	r3, [r5, #0]
 800bcd4:	f1b8 0f00 	cmp.w	r8, #0
 800bcd8:	d050      	beq.n	800bd7c <ucdr_deserialize_endian_uint32_t+0xfc>
 800bcda:	78bb      	ldrb	r3, [r7, #2]
 800bcdc:	706b      	strb	r3, [r5, #1]
 800bcde:	f1b8 0f01 	cmp.w	r8, #1
 800bce2:	f105 0302 	add.w	r3, r5, #2
 800bce6:	d04d      	beq.n	800bd84 <ucdr_deserialize_endian_uint32_t+0x104>
 800bce8:	787b      	ldrb	r3, [r7, #1]
 800bcea:	70ab      	strb	r3, [r5, #2]
 800bcec:	f1b8 0f02 	cmp.w	r8, #2
 800bcf0:	f105 0303 	add.w	r3, r5, #3
 800bcf4:	d04a      	beq.n	800bd8c <ucdr_deserialize_endian_uint32_t+0x10c>
 800bcf6:	783b      	ldrb	r3, [r7, #0]
 800bcf8:	70eb      	strb	r3, [r5, #3]
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	68a2      	ldr	r2, [r4, #8]
 800bcfe:	7da0      	ldrb	r0, [r4, #22]
 800bd00:	2104      	movs	r1, #4
 800bd02:	3304      	adds	r3, #4
 800bd04:	4452      	add	r2, sl
 800bd06:	eba3 0308 	sub.w	r3, r3, r8
 800bd0a:	7561      	strb	r1, [r4, #21]
 800bd0c:	60a2      	str	r2, [r4, #8]
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	f080 0001 	eor.w	r0, r0, #1
 800bd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd18:	2104      	movs	r1, #4
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 fc66 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bd20:	b1a8      	cbz	r0, 800bd4e <ucdr_deserialize_endian_uint32_t+0xce>
 800bd22:	2e01      	cmp	r6, #1
 800bd24:	68a3      	ldr	r3, [r4, #8]
 800bd26:	d017      	beq.n	800bd58 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bd28:	78db      	ldrb	r3, [r3, #3]
 800bd2a:	702b      	strb	r3, [r5, #0]
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	789b      	ldrb	r3, [r3, #2]
 800bd30:	706b      	strb	r3, [r5, #1]
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	70ab      	strb	r3, [r5, #2]
 800bd38:	68a3      	ldr	r3, [r4, #8]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	70eb      	strb	r3, [r5, #3]
 800bd3e:	68a2      	ldr	r2, [r4, #8]
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	3204      	adds	r2, #4
 800bd44:	3304      	adds	r3, #4
 800bd46:	2104      	movs	r1, #4
 800bd48:	60a2      	str	r2, [r4, #8]
 800bd4a:	6123      	str	r3, [r4, #16]
 800bd4c:	7561      	strb	r1, [r4, #21]
 800bd4e:	7da0      	ldrb	r0, [r4, #22]
 800bd50:	f080 0001 	eor.w	r0, r0, #1
 800bd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	e7ef      	b.n	800bd3e <ucdr_deserialize_endian_uint32_t+0xbe>
 800bd5e:	68a2      	ldr	r2, [r4, #8]
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	7da0      	ldrb	r0, [r4, #22]
 800bd64:	f884 9015 	strb.w	r9, [r4, #21]
 800bd68:	eba2 0208 	sub.w	r2, r2, r8
 800bd6c:	eba3 0308 	sub.w	r3, r3, r8
 800bd70:	60a2      	str	r2, [r4, #8]
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	f080 0001 	eor.w	r0, r0, #1
 800bd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7c:	68a3      	ldr	r3, [r4, #8]
 800bd7e:	789b      	ldrb	r3, [r3, #2]
 800bd80:	706b      	strb	r3, [r5, #1]
 800bd82:	1cab      	adds	r3, r5, #2
 800bd84:	68a2      	ldr	r2, [r4, #8]
 800bd86:	7852      	ldrb	r2, [r2, #1]
 800bd88:	f803 2b01 	strb.w	r2, [r3], #1
 800bd8c:	68a2      	ldr	r2, [r4, #8]
 800bd8e:	7812      	ldrb	r2, [r2, #0]
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	e7b2      	b.n	800bcfa <ucdr_deserialize_endian_uint32_t+0x7a>
 800bd94:	4639      	mov	r1, r7
 800bd96:	4642      	mov	r2, r8
 800bd98:	4628      	mov	r0, r5
 800bd9a:	f00a fcf2 	bl	8016782 <memcpy>
 800bd9e:	68a1      	ldr	r1, [r4, #8]
 800bda0:	4652      	mov	r2, sl
 800bda2:	eb05 0008 	add.w	r0, r5, r8
 800bda6:	f00a fcec 	bl	8016782 <memcpy>
 800bdaa:	e7a6      	b.n	800bcfa <ucdr_deserialize_endian_uint32_t+0x7a>

0800bdac <ucdr_serialize_uint64_t>:
 800bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb0:	2108      	movs	r1, #8
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	e9cd 2300 	strd	r2, r3, [sp]
 800bdba:	f000 fc6b 	bl	800c694 <ucdr_buffer_alignment>
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	7d67      	ldrb	r7, [r4, #21]
 800bdc4:	f000 fcaa 	bl	800c71c <ucdr_advance_buffer>
 800bdc8:	2108      	movs	r1, #8
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fc02 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d14e      	bne.n	800be72 <ucdr_serialize_uint64_t+0xc6>
 800bdd4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bdd8:	42ab      	cmp	r3, r5
 800bdda:	d945      	bls.n	800be68 <ucdr_serialize_uint64_t+0xbc>
 800bddc:	1b5e      	subs	r6, r3, r5
 800bdde:	60a3      	str	r3, [r4, #8]
 800bde0:	6923      	ldr	r3, [r4, #16]
 800bde2:	f1c6 0808 	rsb	r8, r6, #8
 800bde6:	4433      	add	r3, r6
 800bde8:	6123      	str	r3, [r4, #16]
 800bdea:	4641      	mov	r1, r8
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 fbfd 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d074      	beq.n	800bee0 <ucdr_serialize_uint64_t+0x134>
 800bdf6:	7d23      	ldrb	r3, [r4, #20]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	f000 809b 	beq.w	800bf34 <ucdr_serialize_uint64_t+0x188>
 800bdfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be02:	702b      	strb	r3, [r5, #0]
 800be04:	2e00      	cmp	r6, #0
 800be06:	d078      	beq.n	800befa <ucdr_serialize_uint64_t+0x14e>
 800be08:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be0c:	706b      	strb	r3, [r5, #1]
 800be0e:	2e01      	cmp	r6, #1
 800be10:	d077      	beq.n	800bf02 <ucdr_serialize_uint64_t+0x156>
 800be12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be16:	70ab      	strb	r3, [r5, #2]
 800be18:	2e02      	cmp	r6, #2
 800be1a:	d076      	beq.n	800bf0a <ucdr_serialize_uint64_t+0x15e>
 800be1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be20:	70eb      	strb	r3, [r5, #3]
 800be22:	2e03      	cmp	r6, #3
 800be24:	d075      	beq.n	800bf12 <ucdr_serialize_uint64_t+0x166>
 800be26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800be2a:	712b      	strb	r3, [r5, #4]
 800be2c:	2e04      	cmp	r6, #4
 800be2e:	d074      	beq.n	800bf1a <ucdr_serialize_uint64_t+0x16e>
 800be30:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be34:	716b      	strb	r3, [r5, #5]
 800be36:	2e05      	cmp	r6, #5
 800be38:	d073      	beq.n	800bf22 <ucdr_serialize_uint64_t+0x176>
 800be3a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800be3e:	71ab      	strb	r3, [r5, #6]
 800be40:	2e06      	cmp	r6, #6
 800be42:	d072      	beq.n	800bf2a <ucdr_serialize_uint64_t+0x17e>
 800be44:	f89d 3000 	ldrb.w	r3, [sp]
 800be48:	71eb      	strb	r3, [r5, #7]
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	68a2      	ldr	r2, [r4, #8]
 800be4e:	7da0      	ldrb	r0, [r4, #22]
 800be50:	3308      	adds	r3, #8
 800be52:	1b9e      	subs	r6, r3, r6
 800be54:	4442      	add	r2, r8
 800be56:	2308      	movs	r3, #8
 800be58:	f080 0001 	eor.w	r0, r0, #1
 800be5c:	60a2      	str	r2, [r4, #8]
 800be5e:	6126      	str	r6, [r4, #16]
 800be60:	7563      	strb	r3, [r4, #21]
 800be62:	b002      	add	sp, #8
 800be64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be68:	2108      	movs	r1, #8
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fbbe 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800be70:	b350      	cbz	r0, 800bec8 <ucdr_serialize_uint64_t+0x11c>
 800be72:	7d23      	ldrb	r3, [r4, #20]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d02d      	beq.n	800bed4 <ucdr_serialize_uint64_t+0x128>
 800be78:	68a3      	ldr	r3, [r4, #8]
 800be7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be7e:	701a      	strb	r2, [r3, #0]
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be86:	705a      	strb	r2, [r3, #1]
 800be88:	68a3      	ldr	r3, [r4, #8]
 800be8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be8e:	709a      	strb	r2, [r3, #2]
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be96:	70da      	strb	r2, [r3, #3]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be9e:	711a      	strb	r2, [r3, #4]
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bea6:	715a      	strb	r2, [r3, #5]
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800beae:	719a      	strb	r2, [r3, #6]
 800beb0:	68a3      	ldr	r3, [r4, #8]
 800beb2:	f89d 2000 	ldrb.w	r2, [sp]
 800beb6:	71da      	strb	r2, [r3, #7]
 800beb8:	68a2      	ldr	r2, [r4, #8]
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	3208      	adds	r2, #8
 800bebe:	3308      	adds	r3, #8
 800bec0:	2108      	movs	r1, #8
 800bec2:	60a2      	str	r2, [r4, #8]
 800bec4:	6123      	str	r3, [r4, #16]
 800bec6:	7561      	strb	r1, [r4, #21]
 800bec8:	7da0      	ldrb	r0, [r4, #22]
 800beca:	f080 0001 	eor.w	r0, r0, #1
 800bece:	b002      	add	sp, #8
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed4:	466b      	mov	r3, sp
 800bed6:	cb03      	ldmia	r3!, {r0, r1}
 800bed8:	68a3      	ldr	r3, [r4, #8]
 800beda:	6018      	str	r0, [r3, #0]
 800bedc:	6059      	str	r1, [r3, #4]
 800bede:	e7eb      	b.n	800beb8 <ucdr_serialize_uint64_t+0x10c>
 800bee0:	68a2      	ldr	r2, [r4, #8]
 800bee2:	6923      	ldr	r3, [r4, #16]
 800bee4:	7da0      	ldrb	r0, [r4, #22]
 800bee6:	7567      	strb	r7, [r4, #21]
 800bee8:	1b92      	subs	r2, r2, r6
 800beea:	1b9b      	subs	r3, r3, r6
 800beec:	f080 0001 	eor.w	r0, r0, #1
 800bef0:	60a2      	str	r2, [r4, #8]
 800bef2:	6123      	str	r3, [r4, #16]
 800bef4:	b002      	add	sp, #8
 800bef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befa:	68a3      	ldr	r3, [r4, #8]
 800befc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf00:	701a      	strb	r2, [r3, #0]
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf08:	701a      	strb	r2, [r3, #0]
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf10:	701a      	strb	r2, [r3, #0]
 800bf12:	68a3      	ldr	r3, [r4, #8]
 800bf14:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	68a3      	ldr	r3, [r4, #8]
 800bf1c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf28:	701a      	strb	r2, [r3, #0]
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	f89d 2000 	ldrb.w	r2, [sp]
 800bf30:	701a      	strb	r2, [r3, #0]
 800bf32:	e78a      	b.n	800be4a <ucdr_serialize_uint64_t+0x9e>
 800bf34:	4628      	mov	r0, r5
 800bf36:	466d      	mov	r5, sp
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	f00a fc21 	bl	8016782 <memcpy>
 800bf40:	68a0      	ldr	r0, [r4, #8]
 800bf42:	4642      	mov	r2, r8
 800bf44:	19a9      	adds	r1, r5, r6
 800bf46:	f00a fc1c 	bl	8016782 <memcpy>
 800bf4a:	e77e      	b.n	800be4a <ucdr_serialize_uint64_t+0x9e>

0800bf4c <ucdr_serialize_int16_t>:
 800bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	460b      	mov	r3, r1
 800bf54:	2102      	movs	r1, #2
 800bf56:	4604      	mov	r4, r0
 800bf58:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bf5c:	f000 fb9a 	bl	800c694 <ucdr_buffer_alignment>
 800bf60:	4601      	mov	r1, r0
 800bf62:	4620      	mov	r0, r4
 800bf64:	7d67      	ldrb	r7, [r4, #21]
 800bf66:	f000 fbd9 	bl	800c71c <ucdr_advance_buffer>
 800bf6a:	2102      	movs	r1, #2
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fb31 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800bf72:	bb78      	cbnz	r0, 800bfd4 <ucdr_serialize_int16_t+0x88>
 800bf74:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf78:	42ab      	cmp	r3, r5
 800bf7a:	d926      	bls.n	800bfca <ucdr_serialize_int16_t+0x7e>
 800bf7c:	1b5e      	subs	r6, r3, r5
 800bf7e:	60a3      	str	r3, [r4, #8]
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	f1c6 0802 	rsb	r8, r6, #2
 800bf86:	4433      	add	r3, r6
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	4641      	mov	r1, r8
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 fb2d 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d03b      	beq.n	800c00e <ucdr_serialize_int16_t+0xc2>
 800bf96:	7d23      	ldrb	r3, [r4, #20]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d04a      	beq.n	800c032 <ucdr_serialize_int16_t+0xe6>
 800bf9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfa0:	702b      	strb	r3, [r5, #0]
 800bfa2:	2e00      	cmp	r6, #0
 800bfa4:	d040      	beq.n	800c028 <ucdr_serialize_int16_t+0xdc>
 800bfa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bfaa:	706b      	strb	r3, [r5, #1]
 800bfac:	6923      	ldr	r3, [r4, #16]
 800bfae:	68a2      	ldr	r2, [r4, #8]
 800bfb0:	7da0      	ldrb	r0, [r4, #22]
 800bfb2:	3302      	adds	r3, #2
 800bfb4:	1b9e      	subs	r6, r3, r6
 800bfb6:	4442      	add	r2, r8
 800bfb8:	2302      	movs	r3, #2
 800bfba:	f080 0001 	eor.w	r0, r0, #1
 800bfbe:	60a2      	str	r2, [r4, #8]
 800bfc0:	6126      	str	r6, [r4, #16]
 800bfc2:	7563      	strb	r3, [r4, #21]
 800bfc4:	b002      	add	sp, #8
 800bfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfca:	2102      	movs	r1, #2
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 fb0d 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800bfd2:	b190      	cbz	r0, 800bffa <ucdr_serialize_int16_t+0xae>
 800bfd4:	7d23      	ldrb	r3, [r4, #20]
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	68a3      	ldr	r3, [r4, #8]
 800bfda:	d014      	beq.n	800c006 <ucdr_serialize_int16_t+0xba>
 800bfdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfe8:	705a      	strb	r2, [r3, #1]
 800bfea:	68a2      	ldr	r2, [r4, #8]
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	3202      	adds	r2, #2
 800bff0:	3302      	adds	r3, #2
 800bff2:	2102      	movs	r1, #2
 800bff4:	60a2      	str	r2, [r4, #8]
 800bff6:	6123      	str	r3, [r4, #16]
 800bff8:	7561      	strb	r1, [r4, #21]
 800bffa:	7da0      	ldrb	r0, [r4, #22]
 800bffc:	f080 0001 	eor.w	r0, r0, #1
 800c000:	b002      	add	sp, #8
 800c002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c006:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c00a:	801a      	strh	r2, [r3, #0]
 800c00c:	e7ed      	b.n	800bfea <ucdr_serialize_int16_t+0x9e>
 800c00e:	68a2      	ldr	r2, [r4, #8]
 800c010:	6923      	ldr	r3, [r4, #16]
 800c012:	7da0      	ldrb	r0, [r4, #22]
 800c014:	7567      	strb	r7, [r4, #21]
 800c016:	1b92      	subs	r2, r2, r6
 800c018:	1b9b      	subs	r3, r3, r6
 800c01a:	f080 0001 	eor.w	r0, r0, #1
 800c01e:	60a2      	str	r2, [r4, #8]
 800c020:	6123      	str	r3, [r4, #16]
 800c022:	b002      	add	sp, #8
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	68a3      	ldr	r3, [r4, #8]
 800c02a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	e7bc      	b.n	800bfac <ucdr_serialize_int16_t+0x60>
 800c032:	4628      	mov	r0, r5
 800c034:	f10d 0506 	add.w	r5, sp, #6
 800c038:	4629      	mov	r1, r5
 800c03a:	4632      	mov	r2, r6
 800c03c:	f00a fba1 	bl	8016782 <memcpy>
 800c040:	68a0      	ldr	r0, [r4, #8]
 800c042:	4642      	mov	r2, r8
 800c044:	19a9      	adds	r1, r5, r6
 800c046:	f00a fb9c 	bl	8016782 <memcpy>
 800c04a:	e7af      	b.n	800bfac <ucdr_serialize_int16_t+0x60>

0800c04c <ucdr_deserialize_int16_t>:
 800c04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c050:	460d      	mov	r5, r1
 800c052:	2102      	movs	r1, #2
 800c054:	4604      	mov	r4, r0
 800c056:	f000 fb1d 	bl	800c694 <ucdr_buffer_alignment>
 800c05a:	4601      	mov	r1, r0
 800c05c:	4620      	mov	r0, r4
 800c05e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c062:	f000 fb5b 	bl	800c71c <ucdr_advance_buffer>
 800c066:	2102      	movs	r1, #2
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fab3 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800c06e:	bb60      	cbnz	r0, 800c0ca <ucdr_deserialize_int16_t+0x7e>
 800c070:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c074:	42be      	cmp	r6, r7
 800c076:	d923      	bls.n	800c0c0 <ucdr_deserialize_int16_t+0x74>
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	60a6      	str	r6, [r4, #8]
 800c07c:	1bf6      	subs	r6, r6, r7
 800c07e:	4433      	add	r3, r6
 800c080:	f1c6 0902 	rsb	r9, r6, #2
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	4649      	mov	r1, r9
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 faaf 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d034      	beq.n	800c0fc <ucdr_deserialize_int16_t+0xb0>
 800c092:	7d23      	ldrb	r3, [r4, #20]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d042      	beq.n	800c11e <ucdr_deserialize_int16_t+0xd2>
 800c098:	787b      	ldrb	r3, [r7, #1]
 800c09a:	702b      	strb	r3, [r5, #0]
 800c09c:	2e00      	cmp	r6, #0
 800c09e:	d03a      	beq.n	800c116 <ucdr_deserialize_int16_t+0xca>
 800c0a0:	783b      	ldrb	r3, [r7, #0]
 800c0a2:	706b      	strb	r3, [r5, #1]
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	68a2      	ldr	r2, [r4, #8]
 800c0a8:	7da0      	ldrb	r0, [r4, #22]
 800c0aa:	2102      	movs	r1, #2
 800c0ac:	3302      	adds	r3, #2
 800c0ae:	444a      	add	r2, r9
 800c0b0:	1b9b      	subs	r3, r3, r6
 800c0b2:	7561      	strb	r1, [r4, #21]
 800c0b4:	60a2      	str	r2, [r4, #8]
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	f080 0001 	eor.w	r0, r0, #1
 800c0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c0:	2102      	movs	r1, #2
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 fa92 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c0c8:	b180      	cbz	r0, 800c0ec <ucdr_deserialize_int16_t+0xa0>
 800c0ca:	7d23      	ldrb	r3, [r4, #20]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	d011      	beq.n	800c0f6 <ucdr_deserialize_int16_t+0xaa>
 800c0d2:	785b      	ldrb	r3, [r3, #1]
 800c0d4:	702b      	strb	r3, [r5, #0]
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	706b      	strb	r3, [r5, #1]
 800c0dc:	68a2      	ldr	r2, [r4, #8]
 800c0de:	6923      	ldr	r3, [r4, #16]
 800c0e0:	3202      	adds	r2, #2
 800c0e2:	3302      	adds	r3, #2
 800c0e4:	2102      	movs	r1, #2
 800c0e6:	60a2      	str	r2, [r4, #8]
 800c0e8:	6123      	str	r3, [r4, #16]
 800c0ea:	7561      	strb	r1, [r4, #21]
 800c0ec:	7da0      	ldrb	r0, [r4, #22]
 800c0ee:	f080 0001 	eor.w	r0, r0, #1
 800c0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	802b      	strh	r3, [r5, #0]
 800c0fa:	e7ef      	b.n	800c0dc <ucdr_deserialize_int16_t+0x90>
 800c0fc:	68a2      	ldr	r2, [r4, #8]
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	7da0      	ldrb	r0, [r4, #22]
 800c102:	f884 8015 	strb.w	r8, [r4, #21]
 800c106:	1b92      	subs	r2, r2, r6
 800c108:	1b9b      	subs	r3, r3, r6
 800c10a:	60a2      	str	r2, [r4, #8]
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	f080 0001 	eor.w	r0, r0, #1
 800c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	706b      	strb	r3, [r5, #1]
 800c11c:	e7c2      	b.n	800c0a4 <ucdr_deserialize_int16_t+0x58>
 800c11e:	4639      	mov	r1, r7
 800c120:	4632      	mov	r2, r6
 800c122:	4628      	mov	r0, r5
 800c124:	f00a fb2d 	bl	8016782 <memcpy>
 800c128:	68a1      	ldr	r1, [r4, #8]
 800c12a:	464a      	mov	r2, r9
 800c12c:	19a8      	adds	r0, r5, r6
 800c12e:	f00a fb28 	bl	8016782 <memcpy>
 800c132:	e7b7      	b.n	800c0a4 <ucdr_deserialize_int16_t+0x58>

0800c134 <ucdr_serialize_int32_t>:
 800c134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	4604      	mov	r4, r0
 800c13c:	9101      	str	r1, [sp, #4]
 800c13e:	2104      	movs	r1, #4
 800c140:	f000 faa8 	bl	800c694 <ucdr_buffer_alignment>
 800c144:	4601      	mov	r1, r0
 800c146:	4620      	mov	r0, r4
 800c148:	7d67      	ldrb	r7, [r4, #21]
 800c14a:	f000 fae7 	bl	800c71c <ucdr_advance_buffer>
 800c14e:	2104      	movs	r1, #4
 800c150:	4620      	mov	r0, r4
 800c152:	f000 fa3f 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800c156:	2800      	cmp	r0, #0
 800c158:	d139      	bne.n	800c1ce <ucdr_serialize_int32_t+0x9a>
 800c15a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c15e:	42ab      	cmp	r3, r5
 800c160:	d930      	bls.n	800c1c4 <ucdr_serialize_int32_t+0x90>
 800c162:	1b5e      	subs	r6, r3, r5
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	f1c6 0804 	rsb	r8, r6, #4
 800c16c:	4433      	add	r3, r6
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	4641      	mov	r1, r8
 800c172:	4620      	mov	r0, r4
 800c174:	f000 fa3a 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d04c      	beq.n	800c216 <ucdr_serialize_int32_t+0xe2>
 800c17c:	7d23      	ldrb	r3, [r4, #20]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d063      	beq.n	800c24a <ucdr_serialize_int32_t+0x116>
 800c182:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c186:	702b      	strb	r3, [r5, #0]
 800c188:	2e00      	cmp	r6, #0
 800c18a:	d051      	beq.n	800c230 <ucdr_serialize_int32_t+0xfc>
 800c18c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c190:	706b      	strb	r3, [r5, #1]
 800c192:	2e01      	cmp	r6, #1
 800c194:	d050      	beq.n	800c238 <ucdr_serialize_int32_t+0x104>
 800c196:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c19a:	70ab      	strb	r3, [r5, #2]
 800c19c:	2e02      	cmp	r6, #2
 800c19e:	d04f      	beq.n	800c240 <ucdr_serialize_int32_t+0x10c>
 800c1a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1a4:	70eb      	strb	r3, [r5, #3]
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	68a2      	ldr	r2, [r4, #8]
 800c1aa:	7da0      	ldrb	r0, [r4, #22]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	1b9e      	subs	r6, r3, r6
 800c1b0:	4442      	add	r2, r8
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	f080 0001 	eor.w	r0, r0, #1
 800c1b8:	60a2      	str	r2, [r4, #8]
 800c1ba:	6126      	str	r6, [r4, #16]
 800c1bc:	7563      	strb	r3, [r4, #21]
 800c1be:	b002      	add	sp, #8
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	2104      	movs	r1, #4
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 fa10 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c1cc:	b1d0      	cbz	r0, 800c204 <ucdr_serialize_int32_t+0xd0>
 800c1ce:	7d23      	ldrb	r3, [r4, #20]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	d01c      	beq.n	800c210 <ucdr_serialize_int32_t+0xdc>
 800c1d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1da:	701a      	strb	r2, [r3, #0]
 800c1dc:	68a3      	ldr	r3, [r4, #8]
 800c1de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1e2:	705a      	strb	r2, [r3, #1]
 800c1e4:	68a3      	ldr	r3, [r4, #8]
 800c1e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1ea:	709a      	strb	r2, [r3, #2]
 800c1ec:	68a3      	ldr	r3, [r4, #8]
 800c1ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1f2:	70da      	strb	r2, [r3, #3]
 800c1f4:	68a2      	ldr	r2, [r4, #8]
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	3204      	adds	r2, #4
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	2104      	movs	r1, #4
 800c1fe:	60a2      	str	r2, [r4, #8]
 800c200:	6123      	str	r3, [r4, #16]
 800c202:	7561      	strb	r1, [r4, #21]
 800c204:	7da0      	ldrb	r0, [r4, #22]
 800c206:	f080 0001 	eor.w	r0, r0, #1
 800c20a:	b002      	add	sp, #8
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c210:	9a01      	ldr	r2, [sp, #4]
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	e7ee      	b.n	800c1f4 <ucdr_serialize_int32_t+0xc0>
 800c216:	68a2      	ldr	r2, [r4, #8]
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	7da0      	ldrb	r0, [r4, #22]
 800c21c:	7567      	strb	r7, [r4, #21]
 800c21e:	1b92      	subs	r2, r2, r6
 800c220:	1b9b      	subs	r3, r3, r6
 800c222:	f080 0001 	eor.w	r0, r0, #1
 800c226:	60a2      	str	r2, [r4, #8]
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	b002      	add	sp, #8
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	68a3      	ldr	r3, [r4, #8]
 800c232:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c236:	701a      	strb	r2, [r3, #0]
 800c238:	68a3      	ldr	r3, [r4, #8]
 800c23a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c23e:	701a      	strb	r2, [r3, #0]
 800c240:	68a3      	ldr	r3, [r4, #8]
 800c242:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	e7ad      	b.n	800c1a6 <ucdr_serialize_int32_t+0x72>
 800c24a:	4628      	mov	r0, r5
 800c24c:	ad01      	add	r5, sp, #4
 800c24e:	4629      	mov	r1, r5
 800c250:	4632      	mov	r2, r6
 800c252:	f00a fa96 	bl	8016782 <memcpy>
 800c256:	68a0      	ldr	r0, [r4, #8]
 800c258:	4642      	mov	r2, r8
 800c25a:	19a9      	adds	r1, r5, r6
 800c25c:	f00a fa91 	bl	8016782 <memcpy>
 800c260:	e7a1      	b.n	800c1a6 <ucdr_serialize_int32_t+0x72>
 800c262:	bf00      	nop

0800c264 <ucdr_deserialize_int32_t>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	460d      	mov	r5, r1
 800c26a:	2104      	movs	r1, #4
 800c26c:	4604      	mov	r4, r0
 800c26e:	f000 fa11 	bl	800c694 <ucdr_buffer_alignment>
 800c272:	4601      	mov	r1, r0
 800c274:	4620      	mov	r0, r4
 800c276:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c27a:	f000 fa4f 	bl	800c71c <ucdr_advance_buffer>
 800c27e:	2104      	movs	r1, #4
 800c280:	4620      	mov	r0, r4
 800c282:	f000 f9a7 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800c286:	2800      	cmp	r0, #0
 800c288:	d138      	bne.n	800c2fc <ucdr_deserialize_int32_t+0x98>
 800c28a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c28e:	42b7      	cmp	r7, r6
 800c290:	d92f      	bls.n	800c2f2 <ucdr_deserialize_int32_t+0x8e>
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	60a7      	str	r7, [r4, #8]
 800c296:	1bbf      	subs	r7, r7, r6
 800c298:	443b      	add	r3, r7
 800c29a:	f1c7 0904 	rsb	r9, r7, #4
 800c29e:	6123      	str	r3, [r4, #16]
 800c2a0:	4649      	mov	r1, r9
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 f9a2 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d046      	beq.n	800c33a <ucdr_deserialize_int32_t+0xd6>
 800c2ac:	7d23      	ldrb	r3, [r4, #20]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d05c      	beq.n	800c36c <ucdr_deserialize_int32_t+0x108>
 800c2b2:	78f3      	ldrb	r3, [r6, #3]
 800c2b4:	702b      	strb	r3, [r5, #0]
 800c2b6:	2f00      	cmp	r7, #0
 800c2b8:	d04c      	beq.n	800c354 <ucdr_deserialize_int32_t+0xf0>
 800c2ba:	78b3      	ldrb	r3, [r6, #2]
 800c2bc:	706b      	strb	r3, [r5, #1]
 800c2be:	2f01      	cmp	r7, #1
 800c2c0:	f105 0302 	add.w	r3, r5, #2
 800c2c4:	d04a      	beq.n	800c35c <ucdr_deserialize_int32_t+0xf8>
 800c2c6:	7873      	ldrb	r3, [r6, #1]
 800c2c8:	70ab      	strb	r3, [r5, #2]
 800c2ca:	2f02      	cmp	r7, #2
 800c2cc:	f105 0303 	add.w	r3, r5, #3
 800c2d0:	d048      	beq.n	800c364 <ucdr_deserialize_int32_t+0x100>
 800c2d2:	7833      	ldrb	r3, [r6, #0]
 800c2d4:	70eb      	strb	r3, [r5, #3]
 800c2d6:	6923      	ldr	r3, [r4, #16]
 800c2d8:	68a2      	ldr	r2, [r4, #8]
 800c2da:	7da0      	ldrb	r0, [r4, #22]
 800c2dc:	2104      	movs	r1, #4
 800c2de:	3304      	adds	r3, #4
 800c2e0:	444a      	add	r2, r9
 800c2e2:	1bdb      	subs	r3, r3, r7
 800c2e4:	7561      	strb	r1, [r4, #21]
 800c2e6:	60a2      	str	r2, [r4, #8]
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	f080 0001 	eor.w	r0, r0, #1
 800c2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f2:	2104      	movs	r1, #4
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f000 f979 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c2fa:	b1b0      	cbz	r0, 800c32a <ucdr_deserialize_int32_t+0xc6>
 800c2fc:	7d23      	ldrb	r3, [r4, #20]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	68a3      	ldr	r3, [r4, #8]
 800c302:	d017      	beq.n	800c334 <ucdr_deserialize_int32_t+0xd0>
 800c304:	78db      	ldrb	r3, [r3, #3]
 800c306:	702b      	strb	r3, [r5, #0]
 800c308:	68a3      	ldr	r3, [r4, #8]
 800c30a:	789b      	ldrb	r3, [r3, #2]
 800c30c:	706b      	strb	r3, [r5, #1]
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	785b      	ldrb	r3, [r3, #1]
 800c312:	70ab      	strb	r3, [r5, #2]
 800c314:	68a3      	ldr	r3, [r4, #8]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	70eb      	strb	r3, [r5, #3]
 800c31a:	68a2      	ldr	r2, [r4, #8]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	3204      	adds	r2, #4
 800c320:	3304      	adds	r3, #4
 800c322:	2104      	movs	r1, #4
 800c324:	60a2      	str	r2, [r4, #8]
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	7561      	strb	r1, [r4, #21]
 800c32a:	7da0      	ldrb	r0, [r4, #22]
 800c32c:	f080 0001 	eor.w	r0, r0, #1
 800c330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	602b      	str	r3, [r5, #0]
 800c338:	e7ef      	b.n	800c31a <ucdr_deserialize_int32_t+0xb6>
 800c33a:	68a2      	ldr	r2, [r4, #8]
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	7da0      	ldrb	r0, [r4, #22]
 800c340:	f884 8015 	strb.w	r8, [r4, #21]
 800c344:	1bd2      	subs	r2, r2, r7
 800c346:	1bdb      	subs	r3, r3, r7
 800c348:	60a2      	str	r2, [r4, #8]
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	f080 0001 	eor.w	r0, r0, #1
 800c350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	789b      	ldrb	r3, [r3, #2]
 800c358:	706b      	strb	r3, [r5, #1]
 800c35a:	1cab      	adds	r3, r5, #2
 800c35c:	68a2      	ldr	r2, [r4, #8]
 800c35e:	7852      	ldrb	r2, [r2, #1]
 800c360:	f803 2b01 	strb.w	r2, [r3], #1
 800c364:	68a2      	ldr	r2, [r4, #8]
 800c366:	7812      	ldrb	r2, [r2, #0]
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	e7b4      	b.n	800c2d6 <ucdr_deserialize_int32_t+0x72>
 800c36c:	4631      	mov	r1, r6
 800c36e:	463a      	mov	r2, r7
 800c370:	4628      	mov	r0, r5
 800c372:	f00a fa06 	bl	8016782 <memcpy>
 800c376:	68a1      	ldr	r1, [r4, #8]
 800c378:	464a      	mov	r2, r9
 800c37a:	19e8      	adds	r0, r5, r7
 800c37c:	f00a fa01 	bl	8016782 <memcpy>
 800c380:	e7a9      	b.n	800c2d6 <ucdr_deserialize_int32_t+0x72>
 800c382:	bf00      	nop

0800c384 <ucdr_serialize_float>:
 800c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c388:	2104      	movs	r1, #4
 800c38a:	b082      	sub	sp, #8
 800c38c:	4604      	mov	r4, r0
 800c38e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c392:	f000 f97f 	bl	800c694 <ucdr_buffer_alignment>
 800c396:	4601      	mov	r1, r0
 800c398:	4620      	mov	r0, r4
 800c39a:	7d67      	ldrb	r7, [r4, #21]
 800c39c:	f000 f9be 	bl	800c71c <ucdr_advance_buffer>
 800c3a0:	2104      	movs	r1, #4
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 f916 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d139      	bne.n	800c420 <ucdr_serialize_float+0x9c>
 800c3ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3b0:	42ab      	cmp	r3, r5
 800c3b2:	d930      	bls.n	800c416 <ucdr_serialize_float+0x92>
 800c3b4:	1b5e      	subs	r6, r3, r5
 800c3b6:	60a3      	str	r3, [r4, #8]
 800c3b8:	6923      	ldr	r3, [r4, #16]
 800c3ba:	f1c6 0804 	rsb	r8, r6, #4
 800c3be:	4433      	add	r3, r6
 800c3c0:	6123      	str	r3, [r4, #16]
 800c3c2:	4641      	mov	r1, r8
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f000 f911 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d04c      	beq.n	800c468 <ucdr_serialize_float+0xe4>
 800c3ce:	7d23      	ldrb	r3, [r4, #20]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d063      	beq.n	800c49c <ucdr_serialize_float+0x118>
 800c3d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3d8:	702b      	strb	r3, [r5, #0]
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	d051      	beq.n	800c482 <ucdr_serialize_float+0xfe>
 800c3de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c3e2:	706b      	strb	r3, [r5, #1]
 800c3e4:	2e01      	cmp	r6, #1
 800c3e6:	d050      	beq.n	800c48a <ucdr_serialize_float+0x106>
 800c3e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c3ec:	70ab      	strb	r3, [r5, #2]
 800c3ee:	2e02      	cmp	r6, #2
 800c3f0:	d04f      	beq.n	800c492 <ucdr_serialize_float+0x10e>
 800c3f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c3f6:	70eb      	strb	r3, [r5, #3]
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	68a2      	ldr	r2, [r4, #8]
 800c3fc:	7da0      	ldrb	r0, [r4, #22]
 800c3fe:	3304      	adds	r3, #4
 800c400:	1b9e      	subs	r6, r3, r6
 800c402:	4442      	add	r2, r8
 800c404:	2304      	movs	r3, #4
 800c406:	f080 0001 	eor.w	r0, r0, #1
 800c40a:	60a2      	str	r2, [r4, #8]
 800c40c:	6126      	str	r6, [r4, #16]
 800c40e:	7563      	strb	r3, [r4, #21]
 800c410:	b002      	add	sp, #8
 800c412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c416:	2104      	movs	r1, #4
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 f8e7 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c41e:	b1d0      	cbz	r0, 800c456 <ucdr_serialize_float+0xd2>
 800c420:	7d23      	ldrb	r3, [r4, #20]
 800c422:	2b01      	cmp	r3, #1
 800c424:	68a3      	ldr	r3, [r4, #8]
 800c426:	d01c      	beq.n	800c462 <ucdr_serialize_float+0xde>
 800c428:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c42c:	701a      	strb	r2, [r3, #0]
 800c42e:	68a3      	ldr	r3, [r4, #8]
 800c430:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c434:	705a      	strb	r2, [r3, #1]
 800c436:	68a3      	ldr	r3, [r4, #8]
 800c438:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c43c:	709a      	strb	r2, [r3, #2]
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c444:	70da      	strb	r2, [r3, #3]
 800c446:	68a2      	ldr	r2, [r4, #8]
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	3204      	adds	r2, #4
 800c44c:	3304      	adds	r3, #4
 800c44e:	2104      	movs	r1, #4
 800c450:	60a2      	str	r2, [r4, #8]
 800c452:	6123      	str	r3, [r4, #16]
 800c454:	7561      	strb	r1, [r4, #21]
 800c456:	7da0      	ldrb	r0, [r4, #22]
 800c458:	f080 0001 	eor.w	r0, r0, #1
 800c45c:	b002      	add	sp, #8
 800c45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c462:	9a01      	ldr	r2, [sp, #4]
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	e7ee      	b.n	800c446 <ucdr_serialize_float+0xc2>
 800c468:	68a2      	ldr	r2, [r4, #8]
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	7da0      	ldrb	r0, [r4, #22]
 800c46e:	7567      	strb	r7, [r4, #21]
 800c470:	1b92      	subs	r2, r2, r6
 800c472:	1b9b      	subs	r3, r3, r6
 800c474:	f080 0001 	eor.w	r0, r0, #1
 800c478:	60a2      	str	r2, [r4, #8]
 800c47a:	6123      	str	r3, [r4, #16]
 800c47c:	b002      	add	sp, #8
 800c47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c488:	701a      	strb	r2, [r3, #0]
 800c48a:	68a3      	ldr	r3, [r4, #8]
 800c48c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	68a3      	ldr	r3, [r4, #8]
 800c494:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c498:	701a      	strb	r2, [r3, #0]
 800c49a:	e7ad      	b.n	800c3f8 <ucdr_serialize_float+0x74>
 800c49c:	4628      	mov	r0, r5
 800c49e:	ad01      	add	r5, sp, #4
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4632      	mov	r2, r6
 800c4a4:	f00a f96d 	bl	8016782 <memcpy>
 800c4a8:	68a0      	ldr	r0, [r4, #8]
 800c4aa:	4642      	mov	r2, r8
 800c4ac:	19a9      	adds	r1, r5, r6
 800c4ae:	f00a f968 	bl	8016782 <memcpy>
 800c4b2:	e7a1      	b.n	800c3f8 <ucdr_serialize_float+0x74>

0800c4b4 <ucdr_deserialize_float>:
 800c4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	4604      	mov	r4, r0
 800c4be:	f000 f8e9 	bl	800c694 <ucdr_buffer_alignment>
 800c4c2:	4601      	mov	r1, r0
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c4ca:	f000 f927 	bl	800c71c <ucdr_advance_buffer>
 800c4ce:	2104      	movs	r1, #4
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 f87f 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d138      	bne.n	800c54c <ucdr_deserialize_float+0x98>
 800c4da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c4de:	42b7      	cmp	r7, r6
 800c4e0:	d92f      	bls.n	800c542 <ucdr_deserialize_float+0x8e>
 800c4e2:	6923      	ldr	r3, [r4, #16]
 800c4e4:	60a7      	str	r7, [r4, #8]
 800c4e6:	1bbf      	subs	r7, r7, r6
 800c4e8:	443b      	add	r3, r7
 800c4ea:	f1c7 0904 	rsb	r9, r7, #4
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 f87a 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d046      	beq.n	800c58a <ucdr_deserialize_float+0xd6>
 800c4fc:	7d23      	ldrb	r3, [r4, #20]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d05c      	beq.n	800c5bc <ucdr_deserialize_float+0x108>
 800c502:	78f3      	ldrb	r3, [r6, #3]
 800c504:	702b      	strb	r3, [r5, #0]
 800c506:	2f00      	cmp	r7, #0
 800c508:	d04c      	beq.n	800c5a4 <ucdr_deserialize_float+0xf0>
 800c50a:	78b3      	ldrb	r3, [r6, #2]
 800c50c:	706b      	strb	r3, [r5, #1]
 800c50e:	2f01      	cmp	r7, #1
 800c510:	f105 0302 	add.w	r3, r5, #2
 800c514:	d04a      	beq.n	800c5ac <ucdr_deserialize_float+0xf8>
 800c516:	7873      	ldrb	r3, [r6, #1]
 800c518:	70ab      	strb	r3, [r5, #2]
 800c51a:	2f02      	cmp	r7, #2
 800c51c:	f105 0303 	add.w	r3, r5, #3
 800c520:	d048      	beq.n	800c5b4 <ucdr_deserialize_float+0x100>
 800c522:	7833      	ldrb	r3, [r6, #0]
 800c524:	70eb      	strb	r3, [r5, #3]
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	68a2      	ldr	r2, [r4, #8]
 800c52a:	7da0      	ldrb	r0, [r4, #22]
 800c52c:	2104      	movs	r1, #4
 800c52e:	3304      	adds	r3, #4
 800c530:	444a      	add	r2, r9
 800c532:	1bdb      	subs	r3, r3, r7
 800c534:	7561      	strb	r1, [r4, #21]
 800c536:	60a2      	str	r2, [r4, #8]
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	f080 0001 	eor.w	r0, r0, #1
 800c53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c542:	2104      	movs	r1, #4
 800c544:	4620      	mov	r0, r4
 800c546:	f000 f851 	bl	800c5ec <ucdr_check_final_buffer_behavior>
 800c54a:	b1b0      	cbz	r0, 800c57a <ucdr_deserialize_float+0xc6>
 800c54c:	7d23      	ldrb	r3, [r4, #20]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	68a3      	ldr	r3, [r4, #8]
 800c552:	d017      	beq.n	800c584 <ucdr_deserialize_float+0xd0>
 800c554:	78db      	ldrb	r3, [r3, #3]
 800c556:	702b      	strb	r3, [r5, #0]
 800c558:	68a3      	ldr	r3, [r4, #8]
 800c55a:	789b      	ldrb	r3, [r3, #2]
 800c55c:	706b      	strb	r3, [r5, #1]
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	785b      	ldrb	r3, [r3, #1]
 800c562:	70ab      	strb	r3, [r5, #2]
 800c564:	68a3      	ldr	r3, [r4, #8]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	70eb      	strb	r3, [r5, #3]
 800c56a:	68a2      	ldr	r2, [r4, #8]
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	3204      	adds	r2, #4
 800c570:	3304      	adds	r3, #4
 800c572:	2104      	movs	r1, #4
 800c574:	60a2      	str	r2, [r4, #8]
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	7561      	strb	r1, [r4, #21]
 800c57a:	7da0      	ldrb	r0, [r4, #22]
 800c57c:	f080 0001 	eor.w	r0, r0, #1
 800c580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	602b      	str	r3, [r5, #0]
 800c588:	e7ef      	b.n	800c56a <ucdr_deserialize_float+0xb6>
 800c58a:	68a2      	ldr	r2, [r4, #8]
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	7da0      	ldrb	r0, [r4, #22]
 800c590:	f884 8015 	strb.w	r8, [r4, #21]
 800c594:	1bd2      	subs	r2, r2, r7
 800c596:	1bdb      	subs	r3, r3, r7
 800c598:	60a2      	str	r2, [r4, #8]
 800c59a:	6123      	str	r3, [r4, #16]
 800c59c:	f080 0001 	eor.w	r0, r0, #1
 800c5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	68a3      	ldr	r3, [r4, #8]
 800c5a6:	789b      	ldrb	r3, [r3, #2]
 800c5a8:	706b      	strb	r3, [r5, #1]
 800c5aa:	1cab      	adds	r3, r5, #2
 800c5ac:	68a2      	ldr	r2, [r4, #8]
 800c5ae:	7852      	ldrb	r2, [r2, #1]
 800c5b0:	f803 2b01 	strb.w	r2, [r3], #1
 800c5b4:	68a2      	ldr	r2, [r4, #8]
 800c5b6:	7812      	ldrb	r2, [r2, #0]
 800c5b8:	701a      	strb	r2, [r3, #0]
 800c5ba:	e7b4      	b.n	800c526 <ucdr_deserialize_float+0x72>
 800c5bc:	4631      	mov	r1, r6
 800c5be:	463a      	mov	r2, r7
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f00a f8de 	bl	8016782 <memcpy>
 800c5c6:	68a1      	ldr	r1, [r4, #8]
 800c5c8:	464a      	mov	r2, r9
 800c5ca:	19e8      	adds	r0, r5, r7
 800c5cc:	f00a f8d9 	bl	8016782 <memcpy>
 800c5d0:	e7a9      	b.n	800c526 <ucdr_deserialize_float+0x72>
 800c5d2:	bf00      	nop

0800c5d4 <ucdr_check_buffer_available_for>:
 800c5d4:	7d83      	ldrb	r3, [r0, #22]
 800c5d6:	b93b      	cbnz	r3, 800c5e8 <ucdr_check_buffer_available_for+0x14>
 800c5d8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c5dc:	4419      	add	r1, r3
 800c5de:	4288      	cmp	r0, r1
 800c5e0:	bf34      	ite	cc
 800c5e2:	2000      	movcc	r0, #0
 800c5e4:	2001      	movcs	r0, #1
 800c5e6:	4770      	bx	lr
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	4770      	bx	lr

0800c5ec <ucdr_check_final_buffer_behavior>:
 800c5ec:	7d83      	ldrb	r3, [r0, #22]
 800c5ee:	b943      	cbnz	r3, 800c602 <ucdr_check_final_buffer_behavior+0x16>
 800c5f0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c5f4:	4291      	cmp	r1, r2
 800c5f6:	b510      	push	{r4, lr}
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	d205      	bcs.n	800c608 <ucdr_check_final_buffer_behavior+0x1c>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4618      	mov	r0, r3
 800c600:	bd10      	pop	{r4, pc}
 800c602:	2300      	movs	r3, #0
 800c604:	4618      	mov	r0, r3
 800c606:	4770      	bx	lr
 800c608:	6982      	ldr	r2, [r0, #24]
 800c60a:	b13a      	cbz	r2, 800c61c <ucdr_check_final_buffer_behavior+0x30>
 800c60c:	69c1      	ldr	r1, [r0, #28]
 800c60e:	4790      	blx	r2
 800c610:	f080 0301 	eor.w	r3, r0, #1
 800c614:	b2db      	uxtb	r3, r3
 800c616:	75a0      	strb	r0, [r4, #22]
 800c618:	4618      	mov	r0, r3
 800c61a:	bd10      	pop	{r4, pc}
 800c61c:	2001      	movs	r0, #1
 800c61e:	75a0      	strb	r0, [r4, #22]
 800c620:	e7fa      	b.n	800c618 <ucdr_check_final_buffer_behavior+0x2c>
 800c622:	bf00      	nop

0800c624 <ucdr_set_on_full_buffer_callback>:
 800c624:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop

0800c62c <ucdr_init_buffer_origin_offset_endian>:
 800c62c:	b410      	push	{r4}
 800c62e:	9c01      	ldr	r4, [sp, #4]
 800c630:	6001      	str	r1, [r0, #0]
 800c632:	440a      	add	r2, r1
 800c634:	6042      	str	r2, [r0, #4]
 800c636:	190a      	adds	r2, r1, r4
 800c638:	441c      	add	r4, r3
 800c63a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c63e:	6082      	str	r2, [r0, #8]
 800c640:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c644:	7503      	strb	r3, [r0, #20]
 800c646:	2200      	movs	r2, #0
 800c648:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c650:	7542      	strb	r2, [r0, #21]
 800c652:	7582      	strb	r2, [r0, #22]
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop

0800c658 <ucdr_init_buffer_origin_offset>:
 800c658:	b510      	push	{r4, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	9c04      	ldr	r4, [sp, #16]
 800c65e:	9400      	str	r4, [sp, #0]
 800c660:	2401      	movs	r4, #1
 800c662:	9401      	str	r4, [sp, #4]
 800c664:	f7ff ffe2 	bl	800c62c <ucdr_init_buffer_origin_offset_endian>
 800c668:	b002      	add	sp, #8
 800c66a:	bd10      	pop	{r4, pc}

0800c66c <ucdr_init_buffer_origin>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	2400      	movs	r4, #0
 800c672:	9400      	str	r4, [sp, #0]
 800c674:	f7ff fff0 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800c678:	b002      	add	sp, #8
 800c67a:	bd10      	pop	{r4, pc}

0800c67c <ucdr_init_buffer>:
 800c67c:	2300      	movs	r3, #0
 800c67e:	f7ff bff5 	b.w	800c66c <ucdr_init_buffer_origin>
 800c682:	bf00      	nop

0800c684 <ucdr_alignment>:
 800c684:	fbb0 f3f1 	udiv	r3, r0, r1
 800c688:	fb03 0011 	mls	r0, r3, r1, r0
 800c68c:	1a08      	subs	r0, r1, r0
 800c68e:	3901      	subs	r1, #1
 800c690:	4008      	ands	r0, r1
 800c692:	4770      	bx	lr

0800c694 <ucdr_buffer_alignment>:
 800c694:	7d43      	ldrb	r3, [r0, #21]
 800c696:	428b      	cmp	r3, r1
 800c698:	d208      	bcs.n	800c6ac <ucdr_buffer_alignment+0x18>
 800c69a:	6900      	ldr	r0, [r0, #16]
 800c69c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c6a0:	fb01 0013 	mls	r0, r1, r3, r0
 800c6a4:	1a08      	subs	r0, r1, r0
 800c6a6:	3901      	subs	r1, #1
 800c6a8:	4008      	ands	r0, r1
 800c6aa:	4770      	bx	lr
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	4770      	bx	lr

0800c6b0 <ucdr_align_to>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	f7ff ffed 	bl	800c694 <ucdr_buffer_alignment>
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	6921      	ldr	r1, [r4, #16]
 800c6be:	7565      	strb	r5, [r4, #21]
 800c6c0:	181a      	adds	r2, r3, r0
 800c6c2:	6863      	ldr	r3, [r4, #4]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	4408      	add	r0, r1
 800c6c8:	bf28      	it	cs
 800c6ca:	4613      	movcs	r3, r2
 800c6cc:	6120      	str	r0, [r4, #16]
 800c6ce:	60a3      	str	r3, [r4, #8]
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop

0800c6d4 <ucdr_buffer_length>:
 800c6d4:	6882      	ldr	r2, [r0, #8]
 800c6d6:	6800      	ldr	r0, [r0, #0]
 800c6d8:	1a10      	subs	r0, r2, r0
 800c6da:	4770      	bx	lr

0800c6dc <ucdr_buffer_remaining>:
 800c6dc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c6e0:	1a10      	subs	r0, r2, r0
 800c6e2:	4770      	bx	lr

0800c6e4 <ucdr_check_final_buffer_behavior_array>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	7d83      	ldrb	r3, [r0, #22]
 800c6e8:	b963      	cbnz	r3, 800c704 <ucdr_check_final_buffer_behavior_array+0x20>
 800c6ea:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	d308      	bcc.n	800c708 <ucdr_check_final_buffer_behavior_array+0x24>
 800c6f6:	b139      	cbz	r1, 800c708 <ucdr_check_final_buffer_behavior_array+0x24>
 800c6f8:	6983      	ldr	r3, [r0, #24]
 800c6fa:	b163      	cbz	r3, 800c716 <ucdr_check_final_buffer_behavior_array+0x32>
 800c6fc:	69c1      	ldr	r1, [r0, #28]
 800c6fe:	4798      	blx	r3
 800c700:	75a0      	strb	r0, [r4, #22]
 800c702:	b108      	cbz	r0, 800c708 <ucdr_check_final_buffer_behavior_array+0x24>
 800c704:	2000      	movs	r0, #0
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	4620      	mov	r0, r4
 800c70a:	f7ff ffe7 	bl	800c6dc <ucdr_buffer_remaining>
 800c70e:	42a8      	cmp	r0, r5
 800c710:	bf28      	it	cs
 800c712:	4628      	movcs	r0, r5
 800c714:	bd38      	pop	{r3, r4, r5, pc}
 800c716:	2301      	movs	r3, #1
 800c718:	7583      	strb	r3, [r0, #22]
 800c71a:	e7f3      	b.n	800c704 <ucdr_check_final_buffer_behavior_array+0x20>

0800c71c <ucdr_advance_buffer>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4604      	mov	r4, r0
 800c720:	460d      	mov	r5, r1
 800c722:	f7ff ff57 	bl	800c5d4 <ucdr_check_buffer_available_for>
 800c726:	b178      	cbz	r0, 800c748 <ucdr_advance_buffer+0x2c>
 800c728:	6923      	ldr	r3, [r4, #16]
 800c72a:	68a2      	ldr	r2, [r4, #8]
 800c72c:	442b      	add	r3, r5
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	2301      	movs	r3, #1
 800c732:	442a      	add	r2, r5
 800c734:	7563      	strb	r3, [r4, #21]
 800c736:	60a2      	str	r2, [r4, #8]
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	68a2      	ldr	r2, [r4, #8]
 800c73c:	6923      	ldr	r3, [r4, #16]
 800c73e:	4402      	add	r2, r0
 800c740:	4403      	add	r3, r0
 800c742:	1a2d      	subs	r5, r5, r0
 800c744:	60a2      	str	r2, [r4, #8]
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	4629      	mov	r1, r5
 800c74a:	2201      	movs	r2, #1
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7ff ffc9 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 800c752:	2800      	cmp	r0, #0
 800c754:	d1f1      	bne.n	800c73a <ucdr_advance_buffer+0x1e>
 800c756:	2301      	movs	r3, #1
 800c758:	7563      	strb	r3, [r4, #21]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}

0800c75c <uxr_buffer_delete_entity>:
 800c75c:	b510      	push	{r4, lr}
 800c75e:	2300      	movs	r3, #0
 800c760:	b08e      	sub	sp, #56	@ 0x38
 800c762:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c766:	2303      	movs	r3, #3
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	2204      	movs	r2, #4
 800c76c:	ab06      	add	r3, sp, #24
 800c76e:	4604      	mov	r4, r0
 800c770:	9103      	str	r1, [sp, #12]
 800c772:	f001 f953 	bl	800da1c <uxr_prepare_stream_to_write_submessage>
 800c776:	b918      	cbnz	r0, 800c780 <uxr_buffer_delete_entity+0x24>
 800c778:	4604      	mov	r4, r0
 800c77a:	4620      	mov	r0, r4
 800c77c:	b00e      	add	sp, #56	@ 0x38
 800c77e:	bd10      	pop	{r4, pc}
 800c780:	9902      	ldr	r1, [sp, #8]
 800c782:	aa05      	add	r2, sp, #20
 800c784:	4620      	mov	r0, r4
 800c786:	f001 fa7f 	bl	800dc88 <uxr_init_base_object_request>
 800c78a:	a905      	add	r1, sp, #20
 800c78c:	4604      	mov	r4, r0
 800c78e:	a806      	add	r0, sp, #24
 800c790:	f002 fcd0 	bl	800f134 <uxr_serialize_DELETE_Payload>
 800c794:	4620      	mov	r0, r4
 800c796:	b00e      	add	sp, #56	@ 0x38
 800c798:	bd10      	pop	{r4, pc}
 800c79a:	bf00      	nop

0800c79c <uxr_common_create_entity>:
 800c79c:	b510      	push	{r4, lr}
 800c79e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c7a2:	b08c      	sub	sp, #48	@ 0x30
 800c7a4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c7a8:	f1bc 0f01 	cmp.w	ip, #1
 800c7ac:	bf0c      	ite	eq
 800c7ae:	f003 0201 	andeq.w	r2, r3, #1
 800c7b2:	2200      	movne	r2, #0
 800c7b4:	330e      	adds	r3, #14
 800c7b6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c7ba:	9101      	str	r1, [sp, #4]
 800c7bc:	441a      	add	r2, r3
 800c7be:	2301      	movs	r3, #1
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	9903      	ldr	r1, [sp, #12]
 800c7c4:	ab04      	add	r3, sp, #16
 800c7c6:	b292      	uxth	r2, r2
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	f001 f927 	bl	800da1c <uxr_prepare_stream_to_write_submessage>
 800c7ce:	b918      	cbnz	r0, 800c7d8 <uxr_common_create_entity+0x3c>
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	b00c      	add	sp, #48	@ 0x30
 800c7d6:	bd10      	pop	{r4, pc}
 800c7d8:	9902      	ldr	r1, [sp, #8]
 800c7da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f001 fa53 	bl	800dc88 <uxr_init_base_object_request>
 800c7e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	a804      	add	r0, sp, #16
 800c7e8:	f002 fc00 	bl	800efec <uxr_serialize_CREATE_Payload>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	b00c      	add	sp, #48	@ 0x30
 800c7f0:	bd10      	pop	{r4, pc}
 800c7f2:	bf00      	nop

0800c7f4 <uxr_buffer_create_participant_bin>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c7fa:	ac11      	add	r4, sp, #68	@ 0x44
 800c7fc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c800:	2303      	movs	r3, #3
 800c802:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c806:	7223      	strb	r3, [r4, #8]
 800c808:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c80a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c80e:	2201      	movs	r2, #1
 800c810:	2100      	movs	r1, #0
 800c812:	4605      	mov	r5, r0
 800c814:	7122      	strb	r2, [r4, #4]
 800c816:	f88d 1014 	strb.w	r1, [sp, #20]
 800c81a:	b1cb      	cbz	r3, 800c850 <uxr_buffer_create_participant_bin+0x5c>
 800c81c:	f88d 201c 	strb.w	r2, [sp, #28]
 800c820:	9308      	str	r3, [sp, #32]
 800c822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c826:	a915      	add	r1, sp, #84	@ 0x54
 800c828:	a809      	add	r0, sp, #36	@ 0x24
 800c82a:	f7ff ff27 	bl	800c67c <ucdr_init_buffer>
 800c82e:	a905      	add	r1, sp, #20
 800c830:	a809      	add	r0, sp, #36	@ 0x24
 800c832:	f001 ffbd 	bl	800e7b0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c838:	9600      	str	r6, [sp, #0]
 800c83a:	9401      	str	r4, [sp, #4]
 800c83c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c840:	60e3      	str	r3, [r4, #12]
 800c842:	4628      	mov	r0, r5
 800c844:	b29b      	uxth	r3, r3
 800c846:	f7ff ffa9 	bl	800c79c <uxr_common_create_entity>
 800c84a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	f88d 301c 	strb.w	r3, [sp, #28]
 800c854:	e7e5      	b.n	800c822 <uxr_buffer_create_participant_bin+0x2e>
 800c856:	bf00      	nop

0800c858 <uxr_buffer_create_topic_bin>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c85e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c862:	9105      	str	r1, [sp, #20]
 800c864:	4605      	mov	r5, r0
 800c866:	a997      	add	r1, sp, #604	@ 0x25c
 800c868:	4618      	mov	r0, r3
 800c86a:	2302      	movs	r3, #2
 800c86c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c870:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c874:	f000 f996 	bl	800cba4 <uxr_object_id_to_raw>
 800c878:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c87a:	9306      	str	r3, [sp, #24]
 800c87c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c87e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c880:	2303      	movs	r3, #3
 800c882:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c886:	2301      	movs	r3, #1
 800c888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c88c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c890:	a917      	add	r1, sp, #92	@ 0x5c
 800c892:	2300      	movs	r3, #0
 800c894:	a80b      	add	r0, sp, #44	@ 0x2c
 800c896:	f88d 301c 	strb.w	r3, [sp, #28]
 800c89a:	f7ff feef 	bl	800c67c <ucdr_init_buffer>
 800c89e:	a906      	add	r1, sp, #24
 800c8a0:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8a2:	f001 ffa7 	bl	800e7f4 <uxr_serialize_OBJK_Topic_Binary>
 800c8a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a8:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8aa:	ac13      	add	r4, sp, #76	@ 0x4c
 800c8ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8b0:	9600      	str	r6, [sp, #0]
 800c8b2:	9401      	str	r4, [sp, #4]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f7ff ff70 	bl	800c79c <uxr_common_create_entity>
 800c8bc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c8c0:	bd70      	pop	{r4, r5, r6, pc}
 800c8c2:	bf00      	nop

0800c8c4 <uxr_buffer_create_publisher_bin>:
 800c8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	9105      	str	r1, [sp, #20]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	2603      	movs	r6, #3
 800c8d2:	a992      	add	r1, sp, #584	@ 0x248
 800c8d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c8d8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c8dc:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c8e0:	f000 f960 	bl	800cba4 <uxr_object_id_to_raw>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8ea:	a912      	add	r1, sp, #72	@ 0x48
 800c8ec:	a806      	add	r0, sp, #24
 800c8ee:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c8f2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c8f6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c8fa:	f7ff febf 	bl	800c67c <ucdr_init_buffer>
 800c8fe:	a993      	add	r1, sp, #588	@ 0x24c
 800c900:	a806      	add	r0, sp, #24
 800c902:	f002 f82b 	bl	800e95c <uxr_serialize_OBJK_Publisher_Binary>
 800c906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c908:	9311      	str	r3, [sp, #68]	@ 0x44
 800c90a:	ac0e      	add	r4, sp, #56	@ 0x38
 800c90c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c910:	9700      	str	r7, [sp, #0]
 800c912:	9401      	str	r4, [sp, #4]
 800c914:	b29b      	uxth	r3, r3
 800c916:	4628      	mov	r0, r5
 800c918:	f7ff ff40 	bl	800c79c <uxr_common_create_entity>
 800c91c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c922:	bf00      	nop

0800c924 <uxr_buffer_create_subscriber_bin>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c92a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c92e:	9105      	str	r1, [sp, #20]
 800c930:	4605      	mov	r5, r0
 800c932:	a992      	add	r1, sp, #584	@ 0x248
 800c934:	4618      	mov	r0, r3
 800c936:	2304      	movs	r3, #4
 800c938:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c93c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c940:	f000 f930 	bl	800cba4 <uxr_object_id_to_raw>
 800c944:	2300      	movs	r3, #0
 800c946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c94a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c94e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c952:	a912      	add	r1, sp, #72	@ 0x48
 800c954:	2303      	movs	r3, #3
 800c956:	a806      	add	r0, sp, #24
 800c958:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c95c:	f7ff fe8e 	bl	800c67c <ucdr_init_buffer>
 800c960:	a993      	add	r1, sp, #588	@ 0x24c
 800c962:	a806      	add	r0, sp, #24
 800c964:	f002 f8aa 	bl	800eabc <uxr_serialize_OBJK_Subscriber_Binary>
 800c968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c96a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c96c:	ac0e      	add	r4, sp, #56	@ 0x38
 800c96e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c972:	9600      	str	r6, [sp, #0]
 800c974:	9401      	str	r4, [sp, #4]
 800c976:	b29b      	uxth	r3, r3
 800c978:	4628      	mov	r0, r5
 800c97a:	f7ff ff0f 	bl	800c79c <uxr_common_create_entity>
 800c97e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c982:	bd70      	pop	{r4, r5, r6, pc}

0800c984 <uxr_buffer_create_datawriter_bin>:
 800c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c988:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c98c:	ac1d      	add	r4, sp, #116	@ 0x74
 800c98e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c992:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800c996:	9105      	str	r1, [sp, #20]
 800c998:	4606      	mov	r6, r0
 800c99a:	a9a1      	add	r1, sp, #644	@ 0x284
 800c99c:	4618      	mov	r0, r3
 800c99e:	2305      	movs	r3, #5
 800c9a0:	7123      	strb	r3, [r4, #4]
 800c9a2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800c9a6:	2703      	movs	r7, #3
 800c9a8:	f000 f8fc 	bl	800cba4 <uxr_object_id_to_raw>
 800c9ac:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c9ae:	7227      	strb	r7, [r4, #8]
 800c9b0:	a90e      	add	r1, sp, #56	@ 0x38
 800c9b2:	f000 f8f7 	bl	800cba4 <uxr_object_id_to_raw>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c9bc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800c9c0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c9c4:	3d00      	subs	r5, #0
 800c9c6:	bf18      	it	ne
 800c9c8:	2501      	movne	r5, #1
 800c9ca:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c9ce:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c9d2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c9d6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9da:	2301      	movs	r3, #1
 800c9dc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c9e0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c9e4:	bb8a      	cbnz	r2, 800ca4a <uxr_buffer_create_datawriter_bin+0xc6>
 800c9e6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9ea:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c9ee:	f04f 0c13 	mov.w	ip, #19
 800c9f2:	250b      	movs	r5, #11
 800c9f4:	2221      	movs	r2, #33	@ 0x21
 800c9f6:	2111      	movs	r1, #17
 800c9f8:	2009      	movs	r0, #9
 800c9fa:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800c9fe:	b923      	cbnz	r3, 800ca0a <uxr_buffer_create_datawriter_bin+0x86>
 800ca00:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ca04:	4672      	mov	r2, lr
 800ca06:	4661      	mov	r1, ip
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d025      	beq.n	800ca5e <uxr_buffer_create_datawriter_bin+0xda>
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d029      	beq.n	800ca6a <uxr_buffer_create_datawriter_bin+0xe6>
 800ca16:	b32b      	cbz	r3, 800ca64 <uxr_buffer_create_datawriter_bin+0xe0>
 800ca18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca1c:	a921      	add	r1, sp, #132	@ 0x84
 800ca1e:	a806      	add	r0, sp, #24
 800ca20:	f7ff fe2c 	bl	800c67c <ucdr_init_buffer>
 800ca24:	a90e      	add	r1, sp, #56	@ 0x38
 800ca26:	a806      	add	r0, sp, #24
 800ca28:	f002 f8fa 	bl	800ec20 <uxr_serialize_OBJK_DataWriter_Binary>
 800ca2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca2e:	f8cd 8000 	str.w	r8, [sp]
 800ca32:	9401      	str	r4, [sp, #4]
 800ca34:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ca38:	60e3      	str	r3, [r4, #12]
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	f7ff fead 	bl	800c79c <uxr_common_create_entity>
 800ca42:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ca46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ca4e:	f04f 0c12 	mov.w	ip, #18
 800ca52:	250a      	movs	r5, #10
 800ca54:	2220      	movs	r2, #32
 800ca56:	2110      	movs	r1, #16
 800ca58:	2008      	movs	r0, #8
 800ca5a:	2702      	movs	r7, #2
 800ca5c:	e7cd      	b.n	800c9fa <uxr_buffer_create_datawriter_bin+0x76>
 800ca5e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ca62:	e7d9      	b.n	800ca18 <uxr_buffer_create_datawriter_bin+0x94>
 800ca64:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ca68:	e7d6      	b.n	800ca18 <uxr_buffer_create_datawriter_bin+0x94>
 800ca6a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ca6e:	e7d3      	b.n	800ca18 <uxr_buffer_create_datawriter_bin+0x94>

0800ca70 <uxr_buffer_create_datareader_bin>:
 800ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca74:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ca78:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ca7a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ca7e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800ca82:	9105      	str	r1, [sp, #20]
 800ca84:	4606      	mov	r6, r0
 800ca86:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ca88:	4618      	mov	r0, r3
 800ca8a:	2306      	movs	r3, #6
 800ca8c:	7123      	strb	r3, [r4, #4]
 800ca8e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800ca92:	2703      	movs	r7, #3
 800ca94:	f000 f886 	bl	800cba4 <uxr_object_id_to_raw>
 800ca98:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ca9a:	7227      	strb	r7, [r4, #8]
 800ca9c:	a90e      	add	r1, sp, #56	@ 0x38
 800ca9e:	f000 f881 	bl	800cba4 <uxr_object_id_to_raw>
 800caa2:	2300      	movs	r3, #0
 800caa4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800caa8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800caac:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800cab0:	3d00      	subs	r5, #0
 800cab2:	bf18      	it	ne
 800cab4:	2501      	movne	r5, #1
 800cab6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800caba:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800cabe:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800cac2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cac6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800caca:	2301      	movs	r3, #1
 800cacc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800cad0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800cad4:	bb8a      	cbnz	r2, 800cb3a <uxr_buffer_create_datareader_bin+0xca>
 800cad6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cada:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800cade:	f04f 0c13 	mov.w	ip, #19
 800cae2:	250b      	movs	r5, #11
 800cae4:	2221      	movs	r2, #33	@ 0x21
 800cae6:	2111      	movs	r1, #17
 800cae8:	2009      	movs	r0, #9
 800caea:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800caee:	b923      	cbnz	r3, 800cafa <uxr_buffer_create_datareader_bin+0x8a>
 800caf0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800caf4:	4672      	mov	r2, lr
 800caf6:	4661      	mov	r1, ip
 800caf8:	4628      	mov	r0, r5
 800cafa:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d025      	beq.n	800cb4e <uxr_buffer_create_datareader_bin+0xde>
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d029      	beq.n	800cb5a <uxr_buffer_create_datareader_bin+0xea>
 800cb06:	b32b      	cbz	r3, 800cb54 <uxr_buffer_create_datareader_bin+0xe4>
 800cb08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb0c:	a923      	add	r1, sp, #140	@ 0x8c
 800cb0e:	a806      	add	r0, sp, #24
 800cb10:	f7ff fdb4 	bl	800c67c <ucdr_init_buffer>
 800cb14:	a90e      	add	r1, sp, #56	@ 0x38
 800cb16:	a806      	add	r0, sp, #24
 800cb18:	f002 f846 	bl	800eba8 <uxr_serialize_OBJK_DataReader_Binary>
 800cb1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb1e:	f8cd 8000 	str.w	r8, [sp]
 800cb22:	9401      	str	r4, [sp, #4]
 800cb24:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cb28:	60e3      	str	r3, [r4, #12]
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	f7ff fe35 	bl	800c79c <uxr_common_create_entity>
 800cb32:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cb3e:	f04f 0c12 	mov.w	ip, #18
 800cb42:	250a      	movs	r5, #10
 800cb44:	2220      	movs	r2, #32
 800cb46:	2110      	movs	r1, #16
 800cb48:	2008      	movs	r0, #8
 800cb4a:	2702      	movs	r7, #2
 800cb4c:	e7cd      	b.n	800caea <uxr_buffer_create_datareader_bin+0x7a>
 800cb4e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cb52:	e7d9      	b.n	800cb08 <uxr_buffer_create_datareader_bin+0x98>
 800cb54:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800cb58:	e7d6      	b.n	800cb08 <uxr_buffer_create_datareader_bin+0x98>
 800cb5a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800cb5e:	e7d3      	b.n	800cb08 <uxr_buffer_create_datareader_bin+0x98>

0800cb60 <uxr_object_id>:
 800cb60:	b082      	sub	sp, #8
 800cb62:	2300      	movs	r3, #0
 800cb64:	f88d 1006 	strb.w	r1, [sp, #6]
 800cb68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb6c:	f360 030f 	bfi	r3, r0, #0, #16
 800cb70:	f362 431f 	bfi	r3, r2, #16, #16
 800cb74:	4618      	mov	r0, r3
 800cb76:	b002      	add	sp, #8
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop

0800cb7c <uxr_object_id_from_raw>:
 800cb7c:	7843      	ldrb	r3, [r0, #1]
 800cb7e:	7801      	ldrb	r1, [r0, #0]
 800cb80:	b082      	sub	sp, #8
 800cb82:	f003 020f 	and.w	r2, r3, #15
 800cb86:	f88d 2006 	strb.w	r2, [sp, #6]
 800cb8a:	091b      	lsrs	r3, r3, #4
 800cb8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb90:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800cb94:	2000      	movs	r0, #0
 800cb96:	f363 000f 	bfi	r0, r3, #0, #16
 800cb9a:	f362 401f 	bfi	r0, r2, #16, #16
 800cb9e:	b002      	add	sp, #8
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop

0800cba4 <uxr_object_id_to_raw>:
 800cba4:	4602      	mov	r2, r0
 800cba6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800cbaa:	b082      	sub	sp, #8
 800cbac:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800cbb0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800cbb4:	f881 c000 	strb.w	ip, [r1]
 800cbb8:	7048      	strb	r0, [r1, #1]
 800cbba:	b002      	add	sp, #8
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <on_get_fragmentation_info>:
 800cbc0:	b500      	push	{lr}
 800cbc2:	b08b      	sub	sp, #44	@ 0x2c
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	2204      	movs	r2, #4
 800cbc8:	a802      	add	r0, sp, #8
 800cbca:	f7ff fd57 	bl	800c67c <ucdr_init_buffer>
 800cbce:	f10d 0305 	add.w	r3, sp, #5
 800cbd2:	f10d 0206 	add.w	r2, sp, #6
 800cbd6:	a901      	add	r1, sp, #4
 800cbd8:	a802      	add	r0, sp, #8
 800cbda:	f001 f9d7 	bl	800df8c <uxr_read_submessage_header>
 800cbde:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cbe2:	2b0d      	cmp	r3, #13
 800cbe4:	d003      	beq.n	800cbee <on_get_fragmentation_info+0x2e>
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	b00b      	add	sp, #44	@ 0x2c
 800cbea:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cbf2:	f013 0f02 	tst.w	r3, #2
 800cbf6:	bf14      	ite	ne
 800cbf8:	2002      	movne	r0, #2
 800cbfa:	2001      	moveq	r0, #1
 800cbfc:	b00b      	add	sp, #44	@ 0x2c
 800cbfe:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc02:	bf00      	nop

0800cc04 <read_submessage_get_info>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	2500      	movs	r5, #0
 800cc08:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800cc12:	460e      	mov	r6, r1
 800cc14:	a810      	add	r0, sp, #64	@ 0x40
 800cc16:	4629      	mov	r1, r5
 800cc18:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cc1c:	f009 fce8 	bl	80165f0 <memset>
 800cc20:	a903      	add	r1, sp, #12
 800cc22:	4630      	mov	r0, r6
 800cc24:	f002 fa72 	bl	800f10c <uxr_deserialize_GET_INFO_Payload>
 800cc28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cc2c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cc30:	4620      	mov	r0, r4
 800cc32:	f001 f821 	bl	800dc78 <uxr_session_header_offset>
 800cc36:	462b      	mov	r3, r5
 800cc38:	9000      	str	r0, [sp, #0]
 800cc3a:	220c      	movs	r2, #12
 800cc3c:	a905      	add	r1, sp, #20
 800cc3e:	a808      	add	r0, sp, #32
 800cc40:	f7ff fd0a 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800cc44:	a910      	add	r1, sp, #64	@ 0x40
 800cc46:	a808      	add	r0, sp, #32
 800cc48:	f002 fad2 	bl	800f1f0 <uxr_serialize_INFO_Payload>
 800cc4c:	9b08      	ldr	r3, [sp, #32]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4629      	mov	r1, r5
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 ffba 	bl	800dbcc <uxr_stamp_session_header>
 800cc58:	a808      	add	r0, sp, #32
 800cc5a:	f7ff fd3b 	bl	800c6d4 <ucdr_buffer_length>
 800cc5e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cc60:	4602      	mov	r2, r0
 800cc62:	a905      	add	r1, sp, #20
 800cc64:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cc68:	47a0      	blx	r4
 800cc6a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}

0800cc70 <write_submessage_acknack.isra.0>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	b092      	sub	sp, #72	@ 0x48
 800cc74:	4605      	mov	r5, r0
 800cc76:	460e      	mov	r6, r1
 800cc78:	4614      	mov	r4, r2
 800cc7a:	f000 fffd 	bl	800dc78 <uxr_session_header_offset>
 800cc7e:	a905      	add	r1, sp, #20
 800cc80:	9000      	str	r0, [sp, #0]
 800cc82:	2300      	movs	r3, #0
 800cc84:	a80a      	add	r0, sp, #40	@ 0x28
 800cc86:	2211      	movs	r2, #17
 800cc88:	f7ff fce6 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800cc8c:	2218      	movs	r2, #24
 800cc8e:	fb02 5404 	mla	r4, r2, r4, r5
 800cc92:	2300      	movs	r3, #0
 800cc94:	2205      	movs	r2, #5
 800cc96:	3450      	adds	r4, #80	@ 0x50
 800cc98:	210a      	movs	r1, #10
 800cc9a:	a80a      	add	r0, sp, #40	@ 0x28
 800cc9c:	f001 f95c 	bl	800df58 <uxr_buffer_submessage_header>
 800cca0:	a903      	add	r1, sp, #12
 800cca2:	4620      	mov	r0, r4
 800cca4:	f007 faf0 	bl	8014288 <uxr_compute_acknack>
 800cca8:	ba40      	rev16	r0, r0
 800ccaa:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ccae:	a903      	add	r1, sp, #12
 800ccb0:	a80a      	add	r0, sp, #40	@ 0x28
 800ccb2:	f88d 6010 	strb.w	r6, [sp, #16]
 800ccb6:	f002 fb0b 	bl	800f2d0 <uxr_serialize_ACKNACK_Payload>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f000 ff83 	bl	800dbcc <uxr_stamp_session_header>
 800ccc6:	a80a      	add	r0, sp, #40	@ 0x28
 800ccc8:	f7ff fd04 	bl	800c6d4 <ucdr_buffer_length>
 800cccc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ccce:	4602      	mov	r2, r0
 800ccd0:	a905      	add	r1, sp, #20
 800ccd2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ccd6:	47a0      	blx	r4
 800ccd8:	b012      	add	sp, #72	@ 0x48
 800ccda:	bd70      	pop	{r4, r5, r6, pc}
 800ccdc:	0000      	movs	r0, r0
	...

0800cce0 <uxr_init_session>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cd18 <uxr_init_session+0x38>
 800cce6:	2300      	movs	r3, #0
 800cce8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ccec:	4604      	mov	r4, r0
 800ccee:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ccf2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ccf6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ccfa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ccfe:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800cd02:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800cd06:	2181      	movs	r1, #129	@ 0x81
 800cd08:	f000 fecc 	bl	800daa4 <uxr_init_session_info>
 800cd0c:	f104 0008 	add.w	r0, r4, #8
 800cd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd14:	f001 b83c 	b.w	800dd90 <uxr_init_stream_storage>
	...

0800cd20 <uxr_set_status_callback>:
 800cd20:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop

0800cd28 <uxr_set_topic_callback>:
 800cd28:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop

0800cd30 <uxr_set_request_callback>:
 800cd30:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop

0800cd38 <uxr_set_reply_callback>:
 800cd38:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop

0800cd40 <uxr_create_output_best_effort_stream>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	e9cd 2100 	strd	r2, r1, [sp]
 800cd48:	4604      	mov	r4, r0
 800cd4a:	f000 ff95 	bl	800dc78 <uxr_session_header_offset>
 800cd4e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cd52:	4603      	mov	r3, r0
 800cd54:	f104 0008 	add.w	r0, r4, #8
 800cd58:	b004      	add	sp, #16
 800cd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd5e:	f001 b861 	b.w	800de24 <uxr_add_output_best_effort_buffer>
 800cd62:	bf00      	nop

0800cd64 <uxr_create_output_reliable_stream>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	b088      	sub	sp, #32
 800cd68:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	f000 ff82 	bl	800dc78 <uxr_session_header_offset>
 800cd74:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cd78:	9000      	str	r0, [sp, #0]
 800cd7a:	9905      	ldr	r1, [sp, #20]
 800cd7c:	f104 0008 	add.w	r0, r4, #8
 800cd80:	f001 f864 	bl	800de4c <uxr_add_output_reliable_buffer>
 800cd84:	2200      	movs	r2, #0
 800cd86:	b2c3      	uxtb	r3, r0
 800cd88:	f363 0207 	bfi	r2, r3, #0, #8
 800cd8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cd90:	f363 220f 	bfi	r2, r3, #8, #8
 800cd94:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cd98:	f363 4217 	bfi	r2, r3, #16, #8
 800cd9c:	0e03      	lsrs	r3, r0, #24
 800cd9e:	f363 621f 	bfi	r2, r3, #24, #8
 800cda2:	4610      	mov	r0, r2
 800cda4:	b008      	add	sp, #32
 800cda6:	bd10      	pop	{r4, pc}

0800cda8 <uxr_create_input_best_effort_stream>:
 800cda8:	b082      	sub	sp, #8
 800cdaa:	3008      	adds	r0, #8
 800cdac:	b002      	add	sp, #8
 800cdae:	f001 b867 	b.w	800de80 <uxr_add_input_best_effort_buffer>
 800cdb2:	bf00      	nop

0800cdb4 <uxr_create_input_reliable_stream>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	4c0b      	ldr	r4, [pc, #44]	@ (800cde8 <uxr_create_input_reliable_stream+0x34>)
 800cdba:	9400      	str	r4, [sp, #0]
 800cdbc:	3008      	adds	r0, #8
 800cdbe:	f001 f875 	bl	800deac <uxr_add_input_reliable_buffer>
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	b2c3      	uxtb	r3, r0
 800cdc6:	f363 0207 	bfi	r2, r3, #0, #8
 800cdca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cdce:	f363 220f 	bfi	r2, r3, #8, #8
 800cdd2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdd6:	f363 4217 	bfi	r2, r3, #16, #8
 800cdda:	0e03      	lsrs	r3, r0, #24
 800cddc:	f363 621f 	bfi	r2, r3, #24, #8
 800cde0:	4610      	mov	r0, r2
 800cde2:	b004      	add	sp, #16
 800cde4:	bd10      	pop	{r4, pc}
 800cde6:	bf00      	nop
 800cde8:	0800cbc1 	.word	0x0800cbc1

0800cdec <uxr_epoch_nanos>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	4604      	mov	r4, r0
 800cdf0:	f001 f912 	bl	800e018 <uxr_nanos>
 800cdf4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	eb61 0102 	sbc.w	r1, r1, r2
 800cdfe:	bd10      	pop	{r4, pc}

0800ce00 <uxr_flash_output_streams>:
 800ce00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce04:	7e03      	ldrb	r3, [r0, #24]
 800ce06:	b084      	sub	sp, #16
 800ce08:	4604      	mov	r4, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d035      	beq.n	800ce7a <uxr_flash_output_streams+0x7a>
 800ce0e:	f04f 0900 	mov.w	r9, #0
 800ce12:	4648      	mov	r0, r9
 800ce14:	f10d 0802 	add.w	r8, sp, #2
 800ce18:	af03      	add	r7, sp, #12
 800ce1a:	ae02      	add	r6, sp, #8
 800ce1c:	e006      	b.n	800ce2c <uxr_flash_output_streams+0x2c>
 800ce1e:	7e23      	ldrb	r3, [r4, #24]
 800ce20:	f109 0901 	add.w	r9, r9, #1
 800ce24:	fa5f f089 	uxtb.w	r0, r9
 800ce28:	4283      	cmp	r3, r0
 800ce2a:	d926      	bls.n	800ce7a <uxr_flash_output_streams+0x7a>
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	4611      	mov	r1, r2
 800ce30:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ce34:	f000 ff58 	bl	800dce8 <uxr_stream_id>
 800ce38:	3508      	adds	r5, #8
 800ce3a:	4684      	mov	ip, r0
 800ce3c:	4643      	mov	r3, r8
 800ce3e:	463a      	mov	r2, r7
 800ce40:	4631      	mov	r1, r6
 800ce42:	4628      	mov	r0, r5
 800ce44:	f8cd c004 	str.w	ip, [sp, #4]
 800ce48:	f007 faa4 	bl	8014394 <uxr_prepare_best_effort_buffer_to_send>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d0e6      	beq.n	800ce1e <uxr_flash_output_streams+0x1e>
 800ce50:	9b02      	ldr	r3, [sp, #8]
 800ce52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ce56:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 feb6 	bl	800dbcc <uxr_stamp_session_header>
 800ce60:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ce62:	9a03      	ldr	r2, [sp, #12]
 800ce64:	685d      	ldr	r5, [r3, #4]
 800ce66:	6818      	ldr	r0, [r3, #0]
 800ce68:	9902      	ldr	r1, [sp, #8]
 800ce6a:	47a8      	blx	r5
 800ce6c:	f109 0901 	add.w	r9, r9, #1
 800ce70:	7e23      	ldrb	r3, [r4, #24]
 800ce72:	fa5f f089 	uxtb.w	r0, r9
 800ce76:	4283      	cmp	r3, r0
 800ce78:	d8d8      	bhi.n	800ce2c <uxr_flash_output_streams+0x2c>
 800ce7a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ce7e:	b38b      	cbz	r3, 800cee4 <uxr_flash_output_streams+0xe4>
 800ce80:	f04f 0900 	mov.w	r9, #0
 800ce84:	f10d 0802 	add.w	r8, sp, #2
 800ce88:	af03      	add	r7, sp, #12
 800ce8a:	ae02      	add	r6, sp, #8
 800ce8c:	4648      	mov	r0, r9
 800ce8e:	2201      	movs	r2, #1
 800ce90:	2102      	movs	r1, #2
 800ce92:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ce96:	f000 ff27 	bl	800dce8 <uxr_stream_id>
 800ce9a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ce9e:	3520      	adds	r5, #32
 800cea0:	9001      	str	r0, [sp, #4]
 800cea2:	e00d      	b.n	800cec0 <uxr_flash_output_streams+0xc0>
 800cea4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cea8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	f000 fe8d 	bl	800dbcc <uxr_stamp_session_header>
 800ceb2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ceb4:	9a03      	ldr	r2, [sp, #12]
 800ceb6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ceba:	9902      	ldr	r1, [sp, #8]
 800cebc:	6818      	ldr	r0, [r3, #0]
 800cebe:	47d0      	blx	sl
 800cec0:	4643      	mov	r3, r8
 800cec2:	463a      	mov	r2, r7
 800cec4:	4631      	mov	r1, r6
 800cec6:	4628      	mov	r0, r5
 800cec8:	f007 fc82 	bl	80147d0 <uxr_prepare_next_reliable_buffer_to_send>
 800cecc:	4603      	mov	r3, r0
 800cece:	4620      	mov	r0, r4
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e7      	bne.n	800cea4 <uxr_flash_output_streams+0xa4>
 800ced4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ced8:	f109 0901 	add.w	r9, r9, #1
 800cedc:	fa5f f089 	uxtb.w	r0, r9
 800cee0:	4283      	cmp	r3, r0
 800cee2:	d8d4      	bhi.n	800ce8e <uxr_flash_output_streams+0x8e>
 800cee4:	b004      	add	sp, #16
 800cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceea:	bf00      	nop

0800ceec <read_submessage_info>:
 800ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef0:	460d      	mov	r5, r1
 800cef2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cef6:	4669      	mov	r1, sp
 800cef8:	4607      	mov	r7, r0
 800cefa:	4628      	mov	r0, r5
 800cefc:	f002 f814 	bl	800ef28 <uxr_deserialize_BaseObjectReply>
 800cf00:	a902      	add	r1, sp, #8
 800cf02:	4604      	mov	r4, r0
 800cf04:	4628      	mov	r0, r5
 800cf06:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cf0a:	f7fe facb 	bl	800b4a4 <ucdr_deserialize_bool>
 800cf0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cf12:	4004      	ands	r4, r0
 800cf14:	b2e4      	uxtb	r4, r4
 800cf16:	b95b      	cbnz	r3, 800cf30 <read_submessage_info+0x44>
 800cf18:	a987      	add	r1, sp, #540	@ 0x21c
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f7fe fac2 	bl	800b4a4 <ucdr_deserialize_bool>
 800cf20:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cf24:	4606      	mov	r6, r0
 800cf26:	b94b      	cbnz	r3, 800cf3c <read_submessage_info+0x50>
 800cf28:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf30:	a903      	add	r1, sp, #12
 800cf32:	4628      	mov	r0, r5
 800cf34:	f001 fea0 	bl	800ec78 <uxr_deserialize_ObjectVariant>
 800cf38:	4004      	ands	r4, r0
 800cf3a:	e7ed      	b.n	800cf18 <read_submessage_info+0x2c>
 800cf3c:	a988      	add	r1, sp, #544	@ 0x220
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f7fe fade 	bl	800b500 <ucdr_deserialize_uint8_t>
 800cf44:	4234      	tst	r4, r6
 800cf46:	d0ef      	beq.n	800cf28 <read_submessage_info+0x3c>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d0ed      	beq.n	800cf28 <read_submessage_info+0x3c>
 800cf4c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cf50:	2b0d      	cmp	r3, #13
 800cf52:	d1e9      	bne.n	800cf28 <read_submessage_info+0x3c>
 800cf54:	a98a      	add	r1, sp, #552	@ 0x228
 800cf56:	4628      	mov	r0, r5
 800cf58:	f7ff f878 	bl	800c04c <ucdr_deserialize_int16_t>
 800cf5c:	b140      	cbz	r0, 800cf70 <read_submessage_info+0x84>
 800cf5e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	dd07      	ble.n	800cf76 <read_submessage_info+0x8a>
 800cf66:	f1b8 0f00 	cmp.w	r8, #0
 800cf6a:	bf14      	ite	ne
 800cf6c:	2001      	movne	r0, #1
 800cf6e:	2002      	moveq	r0, #2
 800cf70:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cf74:	e7d8      	b.n	800cf28 <read_submessage_info+0x3c>
 800cf76:	2000      	movs	r0, #0
 800cf78:	e7fa      	b.n	800cf70 <read_submessage_info+0x84>
 800cf7a:	bf00      	nop

0800cf7c <read_submessage_list>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	b097      	sub	sp, #92	@ 0x5c
 800cf82:	4ec1      	ldr	r6, [pc, #772]	@ (800d288 <read_submessage_list+0x30c>)
 800cf84:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf86:	4604      	mov	r4, r0
 800cf88:	460d      	mov	r5, r1
 800cf8a:	f04f 0801 	mov.w	r8, #1
 800cf8e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cf92:	aa0c      	add	r2, sp, #48	@ 0x30
 800cf94:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f000 fff7 	bl	800df8c <uxr_read_submessage_header>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f000 813e 	beq.w	800d220 <read_submessage_list+0x2a4>
 800cfa4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800cfa8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800cfac:	3b02      	subs	r3, #2
 800cfae:	2b0d      	cmp	r3, #13
 800cfb0:	d8ed      	bhi.n	800cf8e <read_submessage_list+0x12>
 800cfb2:	a101      	add	r1, pc, #4	@ (adr r1, 800cfb8 <read_submessage_list+0x3c>)
 800cfb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfb8:	0800d217 	.word	0x0800d217
 800cfbc:	0800cf8f 	.word	0x0800cf8f
 800cfc0:	0800d207 	.word	0x0800d207
 800cfc4:	0800d1a5 	.word	0x0800d1a5
 800cfc8:	0800d19b 	.word	0x0800d19b
 800cfcc:	0800cf8f 	.word	0x0800cf8f
 800cfd0:	0800cf8f 	.word	0x0800cf8f
 800cfd4:	0800d0fb 	.word	0x0800d0fb
 800cfd8:	0800d08b 	.word	0x0800d08b
 800cfdc:	0800d04b 	.word	0x0800d04b
 800cfe0:	0800cf8f 	.word	0x0800cf8f
 800cfe4:	0800cf8f 	.word	0x0800cf8f
 800cfe8:	0800cf8f 	.word	0x0800cf8f
 800cfec:	0800cff1 	.word	0x0800cff1
 800cff0:	a910      	add	r1, sp, #64	@ 0x40
 800cff2:	4628      	mov	r0, r5
 800cff4:	f002 f9bc 	bl	800f370 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cff8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800cffc:	f1b9 0f00 	cmp.w	r9, #0
 800d000:	f000 8116 	beq.w	800d230 <read_submessage_list+0x2b4>
 800d004:	f001 f808 	bl	800e018 <uxr_nanos>
 800d008:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d010:	2100      	movs	r1, #0
 800d012:	468c      	mov	ip, r1
 800d014:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d018:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d01c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d01e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d020:	468c      	mov	ip, r1
 800d022:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d026:	46e2      	mov	sl, ip
 800d028:	46bc      	mov	ip, r7
 800d02a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d02e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d032:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d036:	e9cd 7100 	strd	r7, r1, [sp]
 800d03a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d03e:	9106      	str	r1, [sp, #24]
 800d040:	4620      	mov	r0, r4
 800d042:	47c8      	blx	r9
 800d044:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d048:	e7a1      	b.n	800cf8e <read_submessage_list+0x12>
 800d04a:	a910      	add	r1, sp, #64	@ 0x40
 800d04c:	4628      	mov	r0, r5
 800d04e:	f002 f97d 	bl	800f34c <uxr_deserialize_HEARTBEAT_Payload>
 800d052:	2100      	movs	r1, #0
 800d054:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d058:	f000 fe70 	bl	800dd3c <uxr_stream_id_from_raw>
 800d05c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d060:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d062:	4639      	mov	r1, r7
 800d064:	f104 0008 	add.w	r0, r4, #8
 800d068:	f000 ff56 	bl	800df18 <uxr_get_input_reliable_stream>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d08e      	beq.n	800cf8e <read_submessage_list+0x12>
 800d070:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d074:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d078:	f007 f8fa 	bl	8014270 <uxr_process_heartbeat>
 800d07c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d080:	463a      	mov	r2, r7
 800d082:	4620      	mov	r0, r4
 800d084:	f7ff fdf4 	bl	800cc70 <write_submessage_acknack.isra.0>
 800d088:	e781      	b.n	800cf8e <read_submessage_list+0x12>
 800d08a:	a910      	add	r1, sp, #64	@ 0x40
 800d08c:	4628      	mov	r0, r5
 800d08e:	f002 f935 	bl	800f2fc <uxr_deserialize_ACKNACK_Payload>
 800d092:	2100      	movs	r1, #0
 800d094:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d098:	f000 fe50 	bl	800dd3c <uxr_stream_id_from_raw>
 800d09c:	900d      	str	r0, [sp, #52]	@ 0x34
 800d09e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d0a2:	f104 0008 	add.w	r0, r4, #8
 800d0a6:	f000 ff23 	bl	800def0 <uxr_get_output_reliable_stream>
 800d0aa:	4607      	mov	r7, r0
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	f43f af6e 	beq.w	800cf8e <read_submessage_list+0x12>
 800d0b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d0b6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d0ba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d0be:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d0c2:	b289      	uxth	r1, r1
 800d0c4:	f007 fc2e 	bl	8014924 <uxr_process_acknack>
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f007 fbeb 	bl	80148a4 <uxr_begin_output_nack_buffer_it>
 800d0ce:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d0d2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d0d6:	e006      	b.n	800d0e6 <read_submessage_list+0x16a>
 800d0d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d0da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d0e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	47c8      	blx	r9
 800d0e6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d0ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d0ec:	4651      	mov	r1, sl
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	f007 fbda 	bl	80148a8 <uxr_next_reliable_nack_buffer_to_send>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d1ef      	bne.n	800d0d8 <read_submessage_list+0x15c>
 800d0f8:	e749      	b.n	800cf8e <read_submessage_list+0x12>
 800d0fa:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d0fe:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d102:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d106:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d10a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d10e:	4651      	mov	r1, sl
 800d110:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d114:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d118:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d11c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d120:	4628      	mov	r0, r5
 800d122:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d126:	f001 fe49 	bl	800edbc <uxr_deserialize_BaseObjectRequest>
 800d12a:	4650      	mov	r0, sl
 800d12c:	a90f      	add	r1, sp, #60	@ 0x3c
 800d12e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d132:	f000 fdc7 	bl	800dcc4 <uxr_parse_base_object_request>
 800d136:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d13a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d13c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d140:	9110      	str	r1, [sp, #64]	@ 0x40
 800d142:	3f04      	subs	r7, #4
 800d144:	f009 090e 	and.w	r9, r9, #14
 800d148:	b2bf      	uxth	r7, r7
 800d14a:	f1bb 0f00 	cmp.w	fp, #0
 800d14e:	d006      	beq.n	800d15e <read_submessage_list+0x1e2>
 800d150:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	4652      	mov	r2, sl
 800d158:	2300      	movs	r3, #0
 800d15a:	4620      	mov	r0, r4
 800d15c:	47d8      	blx	fp
 800d15e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d160:	b16a      	cbz	r2, 800d17e <read_submessage_list+0x202>
 800d162:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d164:	2100      	movs	r1, #0
 800d166:	3802      	subs	r0, #2
 800d168:	e002      	b.n	800d170 <read_submessage_list+0x1f4>
 800d16a:	3101      	adds	r1, #1
 800d16c:	4291      	cmp	r1, r2
 800d16e:	d006      	beq.n	800d17e <read_submessage_list+0x202>
 800d170:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d174:	4553      	cmp	r3, sl
 800d176:	d1f8      	bne.n	800d16a <read_submessage_list+0x1ee>
 800d178:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d17a:	2200      	movs	r2, #0
 800d17c:	545a      	strb	r2, [r3, r1]
 800d17e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d182:	9102      	str	r1, [sp, #8]
 800d184:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d186:	9101      	str	r1, [sp, #4]
 800d188:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d18a:	9100      	str	r1, [sp, #0]
 800d18c:	464b      	mov	r3, r9
 800d18e:	463a      	mov	r2, r7
 800d190:	4629      	mov	r1, r5
 800d192:	4620      	mov	r0, r4
 800d194:	f007 fc84 	bl	8014aa0 <read_submessage_format>
 800d198:	e6f9      	b.n	800cf8e <read_submessage_list+0x12>
 800d19a:	4629      	mov	r1, r5
 800d19c:	4620      	mov	r0, r4
 800d19e:	f7ff fea5 	bl	800ceec <read_submessage_info>
 800d1a2:	e6f4      	b.n	800cf8e <read_submessage_list+0x12>
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	d03e      	beq.n	800d226 <read_submessage_list+0x2aa>
 800d1a8:	a910      	add	r1, sp, #64	@ 0x40
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f002 f802 	bl	800f1b4 <uxr_deserialize_STATUS_Payload>
 800d1b0:	a90e      	add	r1, sp, #56	@ 0x38
 800d1b2:	aa0d      	add	r2, sp, #52	@ 0x34
 800d1b4:	a810      	add	r0, sp, #64	@ 0x40
 800d1b6:	f000 fd85 	bl	800dcc4 <uxr_parse_base_object_request>
 800d1ba:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d1be:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1c0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d1c4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d1c8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d1ca:	f1ba 0f00 	cmp.w	sl, #0
 800d1ce:	d006      	beq.n	800d1de <read_submessage_list+0x262>
 800d1d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	463a      	mov	r2, r7
 800d1d8:	464b      	mov	r3, r9
 800d1da:	4620      	mov	r0, r4
 800d1dc:	47d0      	blx	sl
 800d1de:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	f43f aed4 	beq.w	800cf8e <read_submessage_list+0x12>
 800d1e6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	3802      	subs	r0, #2
 800d1ec:	e003      	b.n	800d1f6 <read_submessage_list+0x27a>
 800d1ee:	3101      	adds	r1, #1
 800d1f0:	4291      	cmp	r1, r2
 800d1f2:	f43f aecc 	beq.w	800cf8e <read_submessage_list+0x12>
 800d1f6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d1fa:	42bb      	cmp	r3, r7
 800d1fc:	d1f7      	bne.n	800d1ee <read_submessage_list+0x272>
 800d1fe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d200:	f803 9001 	strb.w	r9, [r3, r1]
 800d204:	e6c3      	b.n	800cf8e <read_submessage_list+0x12>
 800d206:	2a00      	cmp	r2, #0
 800d208:	f47f aec1 	bne.w	800cf8e <read_submessage_list+0x12>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 fc9e 	bl	800db50 <uxr_read_create_session_status>
 800d214:	e6bb      	b.n	800cf8e <read_submessage_list+0x12>
 800d216:	4629      	mov	r1, r5
 800d218:	4620      	mov	r0, r4
 800d21a:	f7ff fcf3 	bl	800cc04 <read_submessage_get_info>
 800d21e:	e6b6      	b.n	800cf8e <read_submessage_list+0x12>
 800d220:	b017      	add	sp, #92	@ 0x5c
 800d222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d226:	4629      	mov	r1, r5
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 fc9d 	bl	800db68 <uxr_read_delete_session_status>
 800d22e:	e6ae      	b.n	800cf8e <read_submessage_list+0x12>
 800d230:	f000 fef2 	bl	800e018 <uxr_nanos>
 800d234:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d236:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d238:	464f      	mov	r7, r9
 800d23a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d23e:	1812      	adds	r2, r2, r0
 800d240:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d242:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d244:	eb47 0101 	adc.w	r1, r7, r1
 800d248:	464f      	mov	r7, r9
 800d24a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d24e:	463b      	mov	r3, r7
 800d250:	4684      	mov	ip, r0
 800d252:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d256:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d25a:	eb1c 0c00 	adds.w	ip, ip, r0
 800d25e:	464f      	mov	r7, r9
 800d260:	eb43 0307 	adc.w	r3, r3, r7
 800d264:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d268:	eb61 0303 	sbc.w	r3, r1, r3
 800d26c:	0fda      	lsrs	r2, r3, #31
 800d26e:	eb12 020c 	adds.w	r2, r2, ip
 800d272:	f143 0300 	adc.w	r3, r3, #0
 800d276:	0852      	lsrs	r2, r2, #1
 800d278:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d27c:	105b      	asrs	r3, r3, #1
 800d27e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d282:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d286:	e6dd      	b.n	800d044 <read_submessage_list+0xc8>
 800d288:	3b9aca00 	.word	0x3b9aca00

0800d28c <listen_message_reliably>:
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	1e0b      	subs	r3, r1, #0
 800d292:	b09d      	sub	sp, #116	@ 0x74
 800d294:	bfb8      	it	lt
 800d296:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d29a:	4680      	mov	r8, r0
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	f000 fea1 	bl	800dfe4 <uxr_millis>
 800d2a2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d2a6:	4681      	mov	r9, r0
 800d2a8:	2a00      	cmp	r2, #0
 800d2aa:	f000 80a1 	beq.w	800d3f0 <listen_message_reliably+0x164>
 800d2ae:	2600      	movs	r6, #0
 800d2b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d2b4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d2b8:	9303      	str	r3, [sp, #12]
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	460f      	mov	r7, r1
 800d2be:	e00f      	b.n	800d2e0 <listen_message_reliably+0x54>
 800d2c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d2c4:	9903      	ldr	r1, [sp, #12]
 800d2c6:	455a      	cmp	r2, fp
 800d2c8:	f106 0601 	add.w	r6, r6, #1
 800d2cc:	eb73 0101 	sbcs.w	r1, r3, r1
 800d2d0:	b2f0      	uxtb	r0, r6
 800d2d2:	da01      	bge.n	800d2d8 <listen_message_reliably+0x4c>
 800d2d4:	4693      	mov	fp, r2
 800d2d6:	9303      	str	r3, [sp, #12]
 800d2d8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d2dc:	4283      	cmp	r3, r0
 800d2de:	d960      	bls.n	800d3a2 <listen_message_reliably+0x116>
 800d2e0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d2e4:	2102      	movs	r1, #2
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f000 fcfe 	bl	800dce8 <uxr_stream_id>
 800d2ec:	00e4      	lsls	r4, r4, #3
 800d2ee:	f104 0520 	add.w	r5, r4, #32
 800d2f2:	4445      	add	r5, r8
 800d2f4:	4601      	mov	r1, r0
 800d2f6:	463b      	mov	r3, r7
 800d2f8:	464a      	mov	r2, r9
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800d2fe:	f007 faa7 	bl	8014850 <uxr_update_output_stream_heartbeat_timestamp>
 800d302:	eb08 0304 	add.w	r3, r8, r4
 800d306:	2800      	cmp	r0, #0
 800d308:	d0da      	beq.n	800d2c0 <listen_message_reliably+0x34>
 800d30a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d30e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d312:	9304      	str	r3, [sp, #16]
 800d314:	4640      	mov	r0, r8
 800d316:	f000 fcaf 	bl	800dc78 <uxr_session_header_offset>
 800d31a:	3501      	adds	r5, #1
 800d31c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d320:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d324:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d328:	2300      	movs	r3, #0
 800d32a:	2211      	movs	r2, #17
 800d32c:	9000      	str	r0, [sp, #0]
 800d32e:	a90c      	add	r1, sp, #48	@ 0x30
 800d330:	4650      	mov	r0, sl
 800d332:	f7ff f991 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800d336:	2300      	movs	r3, #0
 800d338:	2205      	movs	r2, #5
 800d33a:	210b      	movs	r1, #11
 800d33c:	4650      	mov	r0, sl
 800d33e:	f000 fe0b 	bl	800df58 <uxr_buffer_submessage_header>
 800d342:	8968      	ldrh	r0, [r5, #10]
 800d344:	2101      	movs	r1, #1
 800d346:	f007 fc75 	bl	8014c34 <uxr_seq_num_add>
 800d34a:	892b      	ldrh	r3, [r5, #8]
 800d34c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d350:	4602      	mov	r2, r0
 800d352:	9b04      	ldr	r3, [sp, #16]
 800d354:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d358:	a90a      	add	r1, sp, #40	@ 0x28
 800d35a:	4650      	mov	r0, sl
 800d35c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d360:	f001 ffe0 	bl	800f324 <uxr_serialize_HEARTBEAT_Payload>
 800d364:	2200      	movs	r2, #0
 800d366:	4611      	mov	r1, r2
 800d368:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d36a:	4640      	mov	r0, r8
 800d36c:	f000 fc2e 	bl	800dbcc <uxr_stamp_session_header>
 800d370:	4650      	mov	r0, sl
 800d372:	f7ff f9af 	bl	800c6d4 <ucdr_buffer_length>
 800d376:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d37a:	4602      	mov	r2, r0
 800d37c:	a90c      	add	r1, sp, #48	@ 0x30
 800d37e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d382:	4444      	add	r4, r8
 800d384:	47a8      	blx	r5
 800d386:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d38a:	9903      	ldr	r1, [sp, #12]
 800d38c:	455a      	cmp	r2, fp
 800d38e:	f106 0601 	add.w	r6, r6, #1
 800d392:	eb73 0101 	sbcs.w	r1, r3, r1
 800d396:	b2f0      	uxtb	r0, r6
 800d398:	db9c      	blt.n	800d2d4 <listen_message_reliably+0x48>
 800d39a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	d89e      	bhi.n	800d2e0 <listen_message_reliably+0x54>
 800d3a2:	9a03      	ldr	r2, [sp, #12]
 800d3a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	bf08      	it	eq
 800d3ac:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d3b0:	d01e      	beq.n	800d3f0 <listen_message_reliably+0x164>
 800d3b2:	ebab 0309 	sub.w	r3, fp, r9
 800d3b6:	9905      	ldr	r1, [sp, #20]
 800d3b8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bf08      	it	eq
 800d3c0:	2301      	moveq	r3, #1
 800d3c2:	4299      	cmp	r1, r3
 800d3c4:	bfa8      	it	ge
 800d3c6:	4619      	movge	r1, r3
 800d3c8:	6894      	ldr	r4, [r2, #8]
 800d3ca:	6810      	ldr	r0, [r2, #0]
 800d3cc:	4689      	mov	r9, r1
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	aa08      	add	r2, sp, #32
 800d3d2:	a907      	add	r1, sp, #28
 800d3d4:	47a0      	blx	r4
 800d3d6:	b968      	cbnz	r0, 800d3f4 <listen_message_reliably+0x168>
 800d3d8:	9b05      	ldr	r3, [sp, #20]
 800d3da:	eba3 0309 	sub.w	r3, r3, r9
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	9305      	str	r3, [sp, #20]
 800d3e2:	f73f af5c 	bgt.w	800d29e <listen_message_reliably+0x12>
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	b01d      	add	sp, #116	@ 0x74
 800d3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f0:	9b05      	ldr	r3, [sp, #20]
 800d3f2:	e7e0      	b.n	800d3b6 <listen_message_reliably+0x12a>
 800d3f4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	a80c      	add	r0, sp, #48	@ 0x30
 800d3fc:	f7ff f93e 	bl	800c67c <ucdr_init_buffer>
 800d400:	2500      	movs	r5, #0
 800d402:	f10d 031a 	add.w	r3, sp, #26
 800d406:	aa06      	add	r2, sp, #24
 800d408:	a90c      	add	r1, sp, #48	@ 0x30
 800d40a:	4640      	mov	r0, r8
 800d40c:	f88d 5018 	strb.w	r5, [sp, #24]
 800d410:	f000 fbf0 	bl	800dbf4 <uxr_read_session_header>
 800d414:	b918      	cbnz	r0, 800d41e <listen_message_reliably+0x192>
 800d416:	4620      	mov	r0, r4
 800d418:	b01d      	add	sp, #116	@ 0x74
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41e:	4629      	mov	r1, r5
 800d420:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d424:	f000 fc8a 	bl	800dd3c <uxr_stream_id_from_raw>
 800d428:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d42c:	2d01      	cmp	r5, #1
 800d42e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d432:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d436:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d43a:	d04b      	beq.n	800d4d4 <listen_message_reliably+0x248>
 800d43c:	2d02      	cmp	r5, #2
 800d43e:	d00f      	beq.n	800d460 <listen_message_reliably+0x1d4>
 800d440:	2d00      	cmp	r5, #0
 800d442:	d1e8      	bne.n	800d416 <listen_message_reliably+0x18a>
 800d444:	4629      	mov	r1, r5
 800d446:	4628      	mov	r0, r5
 800d448:	f000 fc78 	bl	800dd3c <uxr_stream_id_from_raw>
 800d44c:	a90c      	add	r1, sp, #48	@ 0x30
 800d44e:	4602      	mov	r2, r0
 800d450:	4640      	mov	r0, r8
 800d452:	920a      	str	r2, [sp, #40]	@ 0x28
 800d454:	f7ff fd92 	bl	800cf7c <read_submessage_list>
 800d458:	4620      	mov	r0, r4
 800d45a:	b01d      	add	sp, #116	@ 0x74
 800d45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d460:	4631      	mov	r1, r6
 800d462:	f108 0008 	add.w	r0, r8, #8
 800d466:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d46a:	f000 fd55 	bl	800df18 <uxr_get_input_reliable_stream>
 800d46e:	4607      	mov	r7, r0
 800d470:	b338      	cbz	r0, 800d4c2 <listen_message_reliably+0x236>
 800d472:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d474:	9203      	str	r2, [sp, #12]
 800d476:	a80c      	add	r0, sp, #48	@ 0x30
 800d478:	f7ff f930 	bl	800c6dc <ucdr_buffer_remaining>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f10d 0019 	add.w	r0, sp, #25
 800d482:	9000      	str	r0, [sp, #0]
 800d484:	9a03      	ldr	r2, [sp, #12]
 800d486:	4651      	mov	r1, sl
 800d488:	4638      	mov	r0, r7
 800d48a:	f006 fdf7 	bl	801407c <uxr_receive_reliable_message>
 800d48e:	b1c0      	cbz	r0, 800d4c2 <listen_message_reliably+0x236>
 800d490:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d494:	b393      	cbz	r3, 800d4fc <listen_message_reliably+0x270>
 800d496:	ad14      	add	r5, sp, #80	@ 0x50
 800d498:	f04f 0a02 	mov.w	sl, #2
 800d49c:	e00a      	b.n	800d4b4 <listen_message_reliably+0x228>
 800d49e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d4a2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d4a6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d4aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	f7ff fd64 	bl	800cf7c <read_submessage_list>
 800d4b4:	2204      	movs	r2, #4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	f006 fe5f 	bl	801417c <uxr_next_input_reliable_buffer_available>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d1ed      	bne.n	800d49e <listen_message_reliably+0x212>
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	4649      	mov	r1, r9
 800d4c8:	f7ff fbd2 	bl	800cc70 <write_submessage_acknack.isra.0>
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	b01d      	add	sp, #116	@ 0x74
 800d4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	f108 0008 	add.w	r0, r8, #8
 800d4da:	f000 fd13 	bl	800df04 <uxr_get_input_best_effort_stream>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d099      	beq.n	800d416 <listen_message_reliably+0x18a>
 800d4e2:	4651      	mov	r1, sl
 800d4e4:	f006 fd36 	bl	8013f54 <uxr_receive_best_effort_message>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d094      	beq.n	800d416 <listen_message_reliably+0x18a>
 800d4ec:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d4f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4f2:	a90c      	add	r1, sp, #48	@ 0x30
 800d4f4:	4640      	mov	r0, r8
 800d4f6:	f7ff fd41 	bl	800cf7c <read_submessage_list>
 800d4fa:	e78c      	b.n	800d416 <listen_message_reliably+0x18a>
 800d4fc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d500:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d502:	a90c      	add	r1, sp, #48	@ 0x30
 800d504:	4640      	mov	r0, r8
 800d506:	f7ff fd39 	bl	800cf7c <read_submessage_list>
 800d50a:	e7c4      	b.n	800d496 <listen_message_reliably+0x20a>

0800d50c <uxr_run_session_timeout>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	4604      	mov	r4, r0
 800d510:	460d      	mov	r5, r1
 800d512:	f000 fd67 	bl	800dfe4 <uxr_millis>
 800d516:	4606      	mov	r6, r0
 800d518:	4620      	mov	r0, r4
 800d51a:	f7ff fc71 	bl	800ce00 <uxr_flash_output_streams>
 800d51e:	4629      	mov	r1, r5
 800d520:	4620      	mov	r0, r4
 800d522:	f7ff feb3 	bl	800d28c <listen_message_reliably>
 800d526:	f000 fd5d 	bl	800dfe4 <uxr_millis>
 800d52a:	1b83      	subs	r3, r0, r6
 800d52c:	1ae9      	subs	r1, r5, r3
 800d52e:	2900      	cmp	r1, #0
 800d530:	dcf6      	bgt.n	800d520 <uxr_run_session_timeout+0x14>
 800d532:	f104 0008 	add.w	r0, r4, #8
 800d536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d53a:	f000 bcf7 	b.w	800df2c <uxr_output_streams_confirmed>
 800d53e:	bf00      	nop

0800d540 <uxr_run_session_until_data>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	4604      	mov	r4, r0
 800d544:	460d      	mov	r5, r1
 800d546:	f000 fd4d 	bl	800dfe4 <uxr_millis>
 800d54a:	4606      	mov	r6, r0
 800d54c:	4620      	mov	r0, r4
 800d54e:	f7ff fc57 	bl	800ce00 <uxr_flash_output_streams>
 800d552:	2300      	movs	r3, #0
 800d554:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d558:	4629      	mov	r1, r5
 800d55a:	e005      	b.n	800d568 <uxr_run_session_until_data+0x28>
 800d55c:	f000 fd42 	bl	800dfe4 <uxr_millis>
 800d560:	1b83      	subs	r3, r0, r6
 800d562:	1ae9      	subs	r1, r5, r3
 800d564:	2900      	cmp	r1, #0
 800d566:	dd07      	ble.n	800d578 <uxr_run_session_until_data+0x38>
 800d568:	4620      	mov	r0, r4
 800d56a:	f7ff fe8f 	bl	800d28c <listen_message_reliably>
 800d56e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d572:	2800      	cmp	r0, #0
 800d574:	d0f2      	beq.n	800d55c <uxr_run_session_until_data+0x1c>
 800d576:	bd70      	pop	{r4, r5, r6, pc}
 800d578:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d57c:	bd70      	pop	{r4, r5, r6, pc}
 800d57e:	bf00      	nop

0800d580 <uxr_run_session_until_confirm_delivery>:
 800d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d584:	4606      	mov	r6, r0
 800d586:	460d      	mov	r5, r1
 800d588:	f000 fd2c 	bl	800dfe4 <uxr_millis>
 800d58c:	4607      	mov	r7, r0
 800d58e:	4630      	mov	r0, r6
 800d590:	f7ff fc36 	bl	800ce00 <uxr_flash_output_streams>
 800d594:	2d00      	cmp	r5, #0
 800d596:	f106 0808 	add.w	r8, r6, #8
 800d59a:	bfa8      	it	ge
 800d59c:	462c      	movge	r4, r5
 800d59e:	da07      	bge.n	800d5b0 <uxr_run_session_until_confirm_delivery+0x30>
 800d5a0:	e00e      	b.n	800d5c0 <uxr_run_session_until_confirm_delivery+0x40>
 800d5a2:	f7ff fe73 	bl	800d28c <listen_message_reliably>
 800d5a6:	f000 fd1d 	bl	800dfe4 <uxr_millis>
 800d5aa:	1bc3      	subs	r3, r0, r7
 800d5ac:	1aec      	subs	r4, r5, r3
 800d5ae:	d407      	bmi.n	800d5c0 <uxr_run_session_until_confirm_delivery+0x40>
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	f000 fcbb 	bl	800df2c <uxr_output_streams_confirmed>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0f0      	beq.n	800d5a2 <uxr_run_session_until_confirm_delivery+0x22>
 800d5c0:	4640      	mov	r0, r8
 800d5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	f000 bcb1 	b.w	800df2c <uxr_output_streams_confirmed>
 800d5ca:	bf00      	nop

0800d5cc <uxr_run_session_until_all_status>:
 800d5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d0:	9c08      	ldr	r4, [sp, #32]
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	4691      	mov	r9, r2
 800d5d8:	461d      	mov	r5, r3
 800d5da:	f7ff fc11 	bl	800ce00 <uxr_flash_output_streams>
 800d5de:	b124      	cbz	r4, 800d5ea <uxr_run_session_until_all_status+0x1e>
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	21ff      	movs	r1, #255	@ 0xff
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f009 f803 	bl	80165f0 <memset>
 800d5ea:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d5ee:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d5f0:	f000 fcf8 	bl	800dfe4 <uxr_millis>
 800d5f4:	3d01      	subs	r5, #1
 800d5f6:	f1a9 0902 	sub.w	r9, r9, #2
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	4630      	mov	r0, r6
 800d600:	f7ff fe44 	bl	800d28c <listen_message_reliably>
 800d604:	f000 fcee 	bl	800dfe4 <uxr_millis>
 800d608:	eba0 0008 	sub.w	r0, r0, r8
 800d60c:	1a39      	subs	r1, r7, r0
 800d60e:	b344      	cbz	r4, 800d662 <uxr_run_session_until_all_status+0x96>
 800d610:	4628      	mov	r0, r5
 800d612:	46ac      	mov	ip, r5
 800d614:	2301      	movs	r3, #1
 800d616:	e002      	b.n	800d61e <uxr_run_session_until_all_status+0x52>
 800d618:	42a3      	cmp	r3, r4
 800d61a:	d20d      	bcs.n	800d638 <uxr_run_session_until_all_status+0x6c>
 800d61c:	3301      	adds	r3, #1
 800d61e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d622:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d626:	d1f7      	bne.n	800d618 <uxr_run_session_until_all_status+0x4c>
 800d628:	42a3      	cmp	r3, r4
 800d62a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d62e:	d213      	bcs.n	800d658 <uxr_run_session_until_all_status+0x8c>
 800d630:	2a00      	cmp	r2, #0
 800d632:	d0f3      	beq.n	800d61c <uxr_run_session_until_all_status+0x50>
 800d634:	2900      	cmp	r1, #0
 800d636:	dce2      	bgt.n	800d5fe <uxr_run_session_until_all_status+0x32>
 800d638:	2300      	movs	r3, #0
 800d63a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d63c:	442c      	add	r4, r5
 800d63e:	e001      	b.n	800d644 <uxr_run_session_until_all_status+0x78>
 800d640:	2b01      	cmp	r3, #1
 800d642:	d812      	bhi.n	800d66a <uxr_run_session_until_all_status+0x9e>
 800d644:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d648:	4284      	cmp	r4, r0
 800d64a:	d1f9      	bne.n	800d640 <uxr_run_session_until_all_status+0x74>
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	bf8c      	ite	hi
 800d650:	2000      	movhi	r0, #0
 800d652:	2001      	movls	r0, #1
 800d654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d658:	2900      	cmp	r1, #0
 800d65a:	dded      	ble.n	800d638 <uxr_run_session_until_all_status+0x6c>
 800d65c:	2a00      	cmp	r2, #0
 800d65e:	d1ce      	bne.n	800d5fe <uxr_run_session_until_all_status+0x32>
 800d660:	e7ea      	b.n	800d638 <uxr_run_session_until_all_status+0x6c>
 800d662:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d664:	2001      	movs	r0, #1
 800d666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66a:	2000      	movs	r0, #0
 800d66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d670 <wait_session_status>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	4604      	mov	r4, r0
 800d676:	b09d      	sub	sp, #116	@ 0x74
 800d678:	20ff      	movs	r0, #255	@ 0xff
 800d67a:	7160      	strb	r0, [r4, #5]
 800d67c:	9303      	str	r3, [sp, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 80b6 	beq.w	800d7f0 <wait_session_status+0x180>
 800d684:	468a      	mov	sl, r1
 800d686:	4691      	mov	r9, r2
 800d688:	f04f 0b00 	mov.w	fp, #0
 800d68c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d68e:	464a      	mov	r2, r9
 800d690:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d694:	4651      	mov	r1, sl
 800d696:	47a8      	blx	r5
 800d698:	f000 fca4 	bl	800dfe4 <uxr_millis>
 800d69c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	e009      	b.n	800d6b8 <wait_session_status+0x48>
 800d6a4:	f000 fc9e 	bl	800dfe4 <uxr_millis>
 800d6a8:	1b40      	subs	r0, r0, r5
 800d6aa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	dd40      	ble.n	800d734 <wait_session_status+0xc4>
 800d6b2:	7960      	ldrb	r0, [r4, #5]
 800d6b4:	28ff      	cmp	r0, #255	@ 0xff
 800d6b6:	d145      	bne.n	800d744 <wait_session_status+0xd4>
 800d6b8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d6ba:	a908      	add	r1, sp, #32
 800d6bc:	6896      	ldr	r6, [r2, #8]
 800d6be:	6810      	ldr	r0, [r2, #0]
 800d6c0:	aa09      	add	r2, sp, #36	@ 0x24
 800d6c2:	47b0      	blx	r6
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d0ed      	beq.n	800d6a4 <wait_session_status+0x34>
 800d6c8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d6cc:	a80c      	add	r0, sp, #48	@ 0x30
 800d6ce:	f7fe ffd5 	bl	800c67c <ucdr_init_buffer>
 800d6d2:	2600      	movs	r6, #0
 800d6d4:	f10d 031e 	add.w	r3, sp, #30
 800d6d8:	aa07      	add	r2, sp, #28
 800d6da:	a90c      	add	r1, sp, #48	@ 0x30
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f88d 601c 	strb.w	r6, [sp, #28]
 800d6e2:	f000 fa87 	bl	800dbf4 <uxr_read_session_header>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0dc      	beq.n	800d6a4 <wait_session_status+0x34>
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d6f0:	f000 fb24 	bl	800dd3c <uxr_stream_id_from_raw>
 800d6f4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d6f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d6fc:	9302      	str	r3, [sp, #8]
 800d6fe:	2f01      	cmp	r7, #1
 800d700:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d704:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d708:	d05c      	beq.n	800d7c4 <wait_session_status+0x154>
 800d70a:	2f02      	cmp	r7, #2
 800d70c:	d020      	beq.n	800d750 <wait_session_status+0xe0>
 800d70e:	2f00      	cmp	r7, #0
 800d710:	d1c8      	bne.n	800d6a4 <wait_session_status+0x34>
 800d712:	4639      	mov	r1, r7
 800d714:	4638      	mov	r0, r7
 800d716:	f000 fb11 	bl	800dd3c <uxr_stream_id_from_raw>
 800d71a:	a90c      	add	r1, sp, #48	@ 0x30
 800d71c:	4602      	mov	r2, r0
 800d71e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d720:	4620      	mov	r0, r4
 800d722:	f7ff fc2b 	bl	800cf7c <read_submessage_list>
 800d726:	f000 fc5d 	bl	800dfe4 <uxr_millis>
 800d72a:	1b40      	subs	r0, r0, r5
 800d72c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d730:	2b00      	cmp	r3, #0
 800d732:	dcbe      	bgt.n	800d6b2 <wait_session_status+0x42>
 800d734:	9b03      	ldr	r3, [sp, #12]
 800d736:	7960      	ldrb	r0, [r4, #5]
 800d738:	f10b 0b01 	add.w	fp, fp, #1
 800d73c:	455b      	cmp	r3, fp
 800d73e:	d001      	beq.n	800d744 <wait_session_status+0xd4>
 800d740:	28ff      	cmp	r0, #255	@ 0xff
 800d742:	d0a3      	beq.n	800d68c <wait_session_status+0x1c>
 800d744:	38ff      	subs	r0, #255	@ 0xff
 800d746:	bf18      	it	ne
 800d748:	2001      	movne	r0, #1
 800d74a:	b01d      	add	sp, #116	@ 0x74
 800d74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d750:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	4631      	mov	r1, r6
 800d758:	f104 0008 	add.w	r0, r4, #8
 800d75c:	f000 fbdc 	bl	800df18 <uxr_get_input_reliable_stream>
 800d760:	4680      	mov	r8, r0
 800d762:	b348      	cbz	r0, 800d7b8 <wait_session_status+0x148>
 800d764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d766:	9205      	str	r2, [sp, #20]
 800d768:	a80c      	add	r0, sp, #48	@ 0x30
 800d76a:	f7fe ffb7 	bl	800c6dc <ucdr_buffer_remaining>
 800d76e:	4603      	mov	r3, r0
 800d770:	f10d 001d 	add.w	r0, sp, #29
 800d774:	9000      	str	r0, [sp, #0]
 800d776:	9a05      	ldr	r2, [sp, #20]
 800d778:	9902      	ldr	r1, [sp, #8]
 800d77a:	4640      	mov	r0, r8
 800d77c:	f006 fc7e 	bl	801407c <uxr_receive_reliable_message>
 800d780:	b1d0      	cbz	r0, 800d7b8 <wait_session_status+0x148>
 800d782:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d03a      	beq.n	800d800 <wait_session_status+0x190>
 800d78a:	9f04      	ldr	r7, [sp, #16]
 800d78c:	e00a      	b.n	800d7a4 <wait_session_status+0x134>
 800d78e:	f04f 0302 	mov.w	r3, #2
 800d792:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d796:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d79a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d79e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7a0:	f7ff fbec 	bl	800cf7c <read_submessage_list>
 800d7a4:	a914      	add	r1, sp, #80	@ 0x50
 800d7a6:	2204      	movs	r2, #4
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	f006 fce7 	bl	801417c <uxr_next_input_reliable_buffer_available>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	a914      	add	r1, sp, #80	@ 0x50
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1ea      	bne.n	800d78e <wait_session_status+0x11e>
 800d7b8:	9904      	ldr	r1, [sp, #16]
 800d7ba:	4632      	mov	r2, r6
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f7ff fa57 	bl	800cc70 <write_submessage_acknack.isra.0>
 800d7c2:	e76f      	b.n	800d6a4 <wait_session_status+0x34>
 800d7c4:	4631      	mov	r1, r6
 800d7c6:	f104 0008 	add.w	r0, r4, #8
 800d7ca:	f000 fb9b 	bl	800df04 <uxr_get_input_best_effort_stream>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	f43f af68 	beq.w	800d6a4 <wait_session_status+0x34>
 800d7d4:	9902      	ldr	r1, [sp, #8]
 800d7d6:	f006 fbbd 	bl	8013f54 <uxr_receive_best_effort_message>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f43f af62 	beq.w	800d6a4 <wait_session_status+0x34>
 800d7e0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d7e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7e6:	a90c      	add	r1, sp, #48	@ 0x30
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7ff fbc7 	bl	800cf7c <read_submessage_list>
 800d7ee:	e759      	b.n	800d6a4 <wait_session_status+0x34>
 800d7f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d7f2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d7f6:	47a0      	blx	r4
 800d7f8:	2001      	movs	r0, #1
 800d7fa:	b01d      	add	sp, #116	@ 0x74
 800d7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d800:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d804:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d806:	a90c      	add	r1, sp, #48	@ 0x30
 800d808:	4620      	mov	r0, r4
 800d80a:	f7ff fbb7 	bl	800cf7c <read_submessage_list>
 800d80e:	e7bc      	b.n	800d78a <wait_session_status+0x11a>

0800d810 <uxr_delete_session_retries>:
 800d810:	b530      	push	{r4, r5, lr}
 800d812:	b08f      	sub	sp, #60	@ 0x3c
 800d814:	4604      	mov	r4, r0
 800d816:	460d      	mov	r5, r1
 800d818:	f000 fa2e 	bl	800dc78 <uxr_session_header_offset>
 800d81c:	2300      	movs	r3, #0
 800d81e:	2210      	movs	r2, #16
 800d820:	9000      	str	r0, [sp, #0]
 800d822:	a902      	add	r1, sp, #8
 800d824:	a806      	add	r0, sp, #24
 800d826:	f7fe ff17 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800d82a:	a906      	add	r1, sp, #24
 800d82c:	4620      	mov	r0, r4
 800d82e:	f000 f973 	bl	800db18 <uxr_buffer_delete_session>
 800d832:	2200      	movs	r2, #0
 800d834:	4611      	mov	r1, r2
 800d836:	9b06      	ldr	r3, [sp, #24]
 800d838:	4620      	mov	r0, r4
 800d83a:	f000 f9c7 	bl	800dbcc <uxr_stamp_session_header>
 800d83e:	a806      	add	r0, sp, #24
 800d840:	f7fe ff48 	bl	800c6d4 <ucdr_buffer_length>
 800d844:	462b      	mov	r3, r5
 800d846:	4602      	mov	r2, r0
 800d848:	a902      	add	r1, sp, #8
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff ff10 	bl	800d670 <wait_session_status>
 800d850:	b118      	cbz	r0, 800d85a <uxr_delete_session_retries+0x4a>
 800d852:	7960      	ldrb	r0, [r4, #5]
 800d854:	fab0 f080 	clz	r0, r0
 800d858:	0940      	lsrs	r0, r0, #5
 800d85a:	b00f      	add	sp, #60	@ 0x3c
 800d85c:	bd30      	pop	{r4, r5, pc}
 800d85e:	bf00      	nop

0800d860 <uxr_create_session>:
 800d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d864:	f100 0b08 	add.w	fp, r0, #8
 800d868:	b0ab      	sub	sp, #172	@ 0xac
 800d86a:	4604      	mov	r4, r0
 800d86c:	4658      	mov	r0, fp
 800d86e:	f000 fa99 	bl	800dda4 <uxr_reset_stream_storage>
 800d872:	4620      	mov	r0, r4
 800d874:	f000 fa00 	bl	800dc78 <uxr_session_header_offset>
 800d878:	2300      	movs	r3, #0
 800d87a:	9000      	str	r0, [sp, #0]
 800d87c:	221c      	movs	r2, #28
 800d87e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d880:	a812      	add	r0, sp, #72	@ 0x48
 800d882:	f7fe fee9 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800d886:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d888:	8a1a      	ldrh	r2, [r3, #16]
 800d88a:	3a04      	subs	r2, #4
 800d88c:	b292      	uxth	r2, r2
 800d88e:	a912      	add	r1, sp, #72	@ 0x48
 800d890:	4620      	mov	r0, r4
 800d892:	f000 f917 	bl	800dac4 <uxr_buffer_create_session>
 800d896:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 f983 	bl	800dba4 <uxr_stamp_create_session_header>
 800d89e:	a812      	add	r0, sp, #72	@ 0x48
 800d8a0:	f7fe ff18 	bl	800c6d4 <ucdr_buffer_length>
 800d8a4:	23ff      	movs	r3, #255	@ 0xff
 800d8a6:	7163      	strb	r3, [r4, #5]
 800d8a8:	230a      	movs	r3, #10
 800d8aa:	46da      	mov	sl, fp
 800d8ac:	9303      	str	r3, [sp, #12]
 800d8ae:	4683      	mov	fp, r0
 800d8b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8b2:	465a      	mov	r2, fp
 800d8b4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d8b8:	a90b      	add	r1, sp, #44	@ 0x2c
 800d8ba:	47a8      	blx	r5
 800d8bc:	f000 fb92 	bl	800dfe4 <uxr_millis>
 800d8c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	e009      	b.n	800d8dc <uxr_create_session+0x7c>
 800d8c8:	f000 fb8c 	bl	800dfe4 <uxr_millis>
 800d8cc:	1b40      	subs	r0, r0, r5
 800d8ce:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	7962      	ldrb	r2, [r4, #5]
 800d8d6:	dd38      	ble.n	800d94a <uxr_create_session+0xea>
 800d8d8:	2aff      	cmp	r2, #255	@ 0xff
 800d8da:	d13c      	bne.n	800d956 <uxr_create_session+0xf6>
 800d8dc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d8de:	a907      	add	r1, sp, #28
 800d8e0:	6896      	ldr	r6, [r2, #8]
 800d8e2:	6810      	ldr	r0, [r2, #0]
 800d8e4:	aa08      	add	r2, sp, #32
 800d8e6:	47b0      	blx	r6
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d0ed      	beq.n	800d8c8 <uxr_create_session+0x68>
 800d8ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d8f0:	a81a      	add	r0, sp, #104	@ 0x68
 800d8f2:	f7fe fec3 	bl	800c67c <ucdr_init_buffer>
 800d8f6:	2600      	movs	r6, #0
 800d8f8:	f10d 031a 	add.w	r3, sp, #26
 800d8fc:	aa06      	add	r2, sp, #24
 800d8fe:	a91a      	add	r1, sp, #104	@ 0x68
 800d900:	4620      	mov	r0, r4
 800d902:	f88d 6018 	strb.w	r6, [sp, #24]
 800d906:	f000 f975 	bl	800dbf4 <uxr_read_session_header>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d0dc      	beq.n	800d8c8 <uxr_create_session+0x68>
 800d90e:	4631      	mov	r1, r6
 800d910:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d914:	f000 fa12 	bl	800dd3c <uxr_stream_id_from_raw>
 800d918:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d91c:	2e01      	cmp	r6, #1
 800d91e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d922:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d926:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d92a:	d053      	beq.n	800d9d4 <uxr_create_session+0x174>
 800d92c:	2e02      	cmp	r6, #2
 800d92e:	d018      	beq.n	800d962 <uxr_create_session+0x102>
 800d930:	2e00      	cmp	r6, #0
 800d932:	d1c9      	bne.n	800d8c8 <uxr_create_session+0x68>
 800d934:	4631      	mov	r1, r6
 800d936:	4630      	mov	r0, r6
 800d938:	f000 fa00 	bl	800dd3c <uxr_stream_id_from_raw>
 800d93c:	a91a      	add	r1, sp, #104	@ 0x68
 800d93e:	4602      	mov	r2, r0
 800d940:	900a      	str	r0, [sp, #40]	@ 0x28
 800d942:	4620      	mov	r0, r4
 800d944:	f7ff fb1a 	bl	800cf7c <read_submessage_list>
 800d948:	e7be      	b.n	800d8c8 <uxr_create_session+0x68>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	3b01      	subs	r3, #1
 800d94e:	9303      	str	r3, [sp, #12]
 800d950:	d001      	beq.n	800d956 <uxr_create_session+0xf6>
 800d952:	2aff      	cmp	r2, #255	@ 0xff
 800d954:	d0ac      	beq.n	800d8b0 <uxr_create_session+0x50>
 800d956:	2a00      	cmp	r2, #0
 800d958:	d051      	beq.n	800d9fe <uxr_create_session+0x19e>
 800d95a:	2000      	movs	r0, #0
 800d95c:	b02b      	add	sp, #172	@ 0xac
 800d95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d962:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d966:	9304      	str	r3, [sp, #16]
 800d968:	4639      	mov	r1, r7
 800d96a:	4650      	mov	r0, sl
 800d96c:	f000 fad4 	bl	800df18 <uxr_get_input_reliable_stream>
 800d970:	4680      	mov	r8, r0
 800d972:	b348      	cbz	r0, 800d9c8 <uxr_create_session+0x168>
 800d974:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d976:	9205      	str	r2, [sp, #20]
 800d978:	a81a      	add	r0, sp, #104	@ 0x68
 800d97a:	f7fe feaf 	bl	800c6dc <ucdr_buffer_remaining>
 800d97e:	4603      	mov	r3, r0
 800d980:	f10d 0019 	add.w	r0, sp, #25
 800d984:	9000      	str	r0, [sp, #0]
 800d986:	9a05      	ldr	r2, [sp, #20]
 800d988:	4649      	mov	r1, r9
 800d98a:	4640      	mov	r0, r8
 800d98c:	f006 fb76 	bl	801407c <uxr_receive_reliable_message>
 800d990:	b1d0      	cbz	r0, 800d9c8 <uxr_create_session+0x168>
 800d992:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d038      	beq.n	800da0c <uxr_create_session+0x1ac>
 800d99a:	9e04      	ldr	r6, [sp, #16]
 800d99c:	e00a      	b.n	800d9b4 <uxr_create_session+0x154>
 800d99e:	f04f 0302 	mov.w	r3, #2
 800d9a2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d9a6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800d9aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9b0:	f7ff fae4 	bl	800cf7c <read_submessage_list>
 800d9b4:	a922      	add	r1, sp, #136	@ 0x88
 800d9b6:	2204      	movs	r2, #4
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	f006 fbdf 	bl	801417c <uxr_next_input_reliable_buffer_available>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	a922      	add	r1, sp, #136	@ 0x88
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1ea      	bne.n	800d99e <uxr_create_session+0x13e>
 800d9c8:	9904      	ldr	r1, [sp, #16]
 800d9ca:	463a      	mov	r2, r7
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f7ff f94f 	bl	800cc70 <write_submessage_acknack.isra.0>
 800d9d2:	e779      	b.n	800d8c8 <uxr_create_session+0x68>
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	4650      	mov	r0, sl
 800d9d8:	f000 fa94 	bl	800df04 <uxr_get_input_best_effort_stream>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	f43f af73 	beq.w	800d8c8 <uxr_create_session+0x68>
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	f006 fab6 	bl	8013f54 <uxr_receive_best_effort_message>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	f43f af6d 	beq.w	800d8c8 <uxr_create_session+0x68>
 800d9ee:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d9f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9f4:	a91a      	add	r1, sp, #104	@ 0x68
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f7ff fac0 	bl	800cf7c <read_submessage_list>
 800d9fc:	e764      	b.n	800d8c8 <uxr_create_session+0x68>
 800d9fe:	4650      	mov	r0, sl
 800da00:	f000 f9d0 	bl	800dda4 <uxr_reset_stream_storage>
 800da04:	2001      	movs	r0, #1
 800da06:	b02b      	add	sp, #172	@ 0xac
 800da08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da12:	a91a      	add	r1, sp, #104	@ 0x68
 800da14:	4620      	mov	r0, r4
 800da16:	f7ff fab1 	bl	800cf7c <read_submessage_list>
 800da1a:	e7be      	b.n	800d99a <uxr_create_session+0x13a>

0800da1c <uxr_prepare_stream_to_write_submessage>:
 800da1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	b082      	sub	sp, #8
 800da22:	4682      	mov	sl, r0
 800da24:	4610      	mov	r0, r2
 800da26:	4615      	mov	r5, r2
 800da28:	461e      	mov	r6, r3
 800da2a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800da2e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800da32:	9101      	str	r1, [sp, #4]
 800da34:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800da38:	f000 face 	bl	800dfd8 <uxr_submessage_padding>
 800da3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da40:	f105 0904 	add.w	r9, r5, #4
 800da44:	2b01      	cmp	r3, #1
 800da46:	4481      	add	r9, r0
 800da48:	d01d      	beq.n	800da86 <uxr_prepare_stream_to_write_submessage+0x6a>
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d116      	bne.n	800da7c <uxr_prepare_stream_to_write_submessage+0x60>
 800da4e:	4621      	mov	r1, r4
 800da50:	f10a 0008 	add.w	r0, sl, #8
 800da54:	f000 fa4c 	bl	800def0 <uxr_get_output_reliable_stream>
 800da58:	4604      	mov	r4, r0
 800da5a:	b158      	cbz	r0, 800da74 <uxr_prepare_stream_to_write_submessage+0x58>
 800da5c:	4649      	mov	r1, r9
 800da5e:	4632      	mov	r2, r6
 800da60:	f006 fd48 	bl	80144f4 <uxr_prepare_reliable_buffer_to_write>
 800da64:	4604      	mov	r4, r0
 800da66:	b12c      	cbz	r4, 800da74 <uxr_prepare_stream_to_write_submessage+0x58>
 800da68:	4643      	mov	r3, r8
 800da6a:	b2aa      	uxth	r2, r5
 800da6c:	4639      	mov	r1, r7
 800da6e:	4630      	mov	r0, r6
 800da70:	f000 fa72 	bl	800df58 <uxr_buffer_submessage_header>
 800da74:	4620      	mov	r0, r4
 800da76:	b002      	add	sp, #8
 800da78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7c:	2400      	movs	r4, #0
 800da7e:	4620      	mov	r0, r4
 800da80:	b002      	add	sp, #8
 800da82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da86:	4621      	mov	r1, r4
 800da88:	f10a 0008 	add.w	r0, sl, #8
 800da8c:	f000 fa28 	bl	800dee0 <uxr_get_output_best_effort_stream>
 800da90:	4604      	mov	r4, r0
 800da92:	2800      	cmp	r0, #0
 800da94:	d0ee      	beq.n	800da74 <uxr_prepare_stream_to_write_submessage+0x58>
 800da96:	4649      	mov	r1, r9
 800da98:	4632      	mov	r2, r6
 800da9a:	f006 fc5b 	bl	8014354 <uxr_prepare_best_effort_buffer_to_write>
 800da9e:	4604      	mov	r4, r0
 800daa0:	e7e1      	b.n	800da66 <uxr_prepare_stream_to_write_submessage+0x4a>
 800daa2:	bf00      	nop

0800daa4 <uxr_init_session_info>:
 800daa4:	0e13      	lsrs	r3, r2, #24
 800daa6:	7043      	strb	r3, [r0, #1]
 800daa8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800daac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dab0:	7001      	strb	r1, [r0, #0]
 800dab2:	70c3      	strb	r3, [r0, #3]
 800dab4:	2109      	movs	r1, #9
 800dab6:	23ff      	movs	r3, #255	@ 0xff
 800dab8:	f880 c002 	strb.w	ip, [r0, #2]
 800dabc:	7102      	strb	r2, [r0, #4]
 800dabe:	80c1      	strh	r1, [r0, #6]
 800dac0:	7143      	strb	r3, [r0, #5]
 800dac2:	4770      	bx	lr

0800dac4 <uxr_buffer_create_session>:
 800dac4:	b530      	push	{r4, r5, lr}
 800dac6:	b089      	sub	sp, #36	@ 0x24
 800dac8:	2300      	movs	r3, #0
 800daca:	4d12      	ldr	r5, [pc, #72]	@ (800db14 <uxr_buffer_create_session+0x50>)
 800dacc:	9307      	str	r3, [sp, #28]
 800dace:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dad2:	2201      	movs	r2, #1
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	80c2      	strh	r2, [r0, #6]
 800dad8:	f88d 2004 	strb.w	r2, [sp, #4]
 800dadc:	682a      	ldr	r2, [r5, #0]
 800dade:	9200      	str	r2, [sp, #0]
 800dae0:	88aa      	ldrh	r2, [r5, #4]
 800dae2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dae6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800daea:	9202      	str	r2, [sp, #8]
 800daec:	460c      	mov	r4, r1
 800daee:	7802      	ldrb	r2, [r0, #0]
 800daf0:	9303      	str	r3, [sp, #12]
 800daf2:	4619      	mov	r1, r3
 800daf4:	f88d 200c 	strb.w	r2, [sp, #12]
 800daf8:	4620      	mov	r0, r4
 800dafa:	2210      	movs	r2, #16
 800dafc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800db00:	9306      	str	r3, [sp, #24]
 800db02:	f000 fa29 	bl	800df58 <uxr_buffer_submessage_header>
 800db06:	4669      	mov	r1, sp
 800db08:	4620      	mov	r0, r4
 800db0a:	f001 fa6d 	bl	800efe8 <uxr_serialize_CREATE_CLIENT_Payload>
 800db0e:	b009      	add	sp, #36	@ 0x24
 800db10:	bd30      	pop	{r4, r5, pc}
 800db12:	bf00      	nop
 800db14:	0801758c 	.word	0x0801758c

0800db18 <uxr_buffer_delete_session>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	4b0c      	ldr	r3, [pc, #48]	@ (800db4c <uxr_buffer_delete_session+0x34>)
 800db1c:	b082      	sub	sp, #8
 800db1e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800db22:	f8ad c006 	strh.w	ip, [sp, #6]
 800db26:	460c      	mov	r4, r1
 800db28:	2202      	movs	r2, #2
 800db2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db2e:	80c2      	strh	r2, [r0, #6]
 800db30:	f8ad 3004 	strh.w	r3, [sp, #4]
 800db34:	2204      	movs	r2, #4
 800db36:	2300      	movs	r3, #0
 800db38:	2103      	movs	r1, #3
 800db3a:	4620      	mov	r0, r4
 800db3c:	f000 fa0c 	bl	800df58 <uxr_buffer_submessage_header>
 800db40:	a901      	add	r1, sp, #4
 800db42:	4620      	mov	r0, r4
 800db44:	f001 faf6 	bl	800f134 <uxr_serialize_DELETE_Payload>
 800db48:	b002      	add	sp, #8
 800db4a:	bd10      	pop	{r4, pc}
 800db4c:	0801758c 	.word	0x0801758c

0800db50 <uxr_read_create_session_status>:
 800db50:	b510      	push	{r4, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	4604      	mov	r4, r0
 800db56:	4608      	mov	r0, r1
 800db58:	a901      	add	r1, sp, #4
 800db5a:	f001 fafb 	bl	800f154 <uxr_deserialize_STATUS_AGENT_Payload>
 800db5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db62:	7163      	strb	r3, [r4, #5]
 800db64:	b008      	add	sp, #32
 800db66:	bd10      	pop	{r4, pc}

0800db68 <uxr_read_delete_session_status>:
 800db68:	b510      	push	{r4, lr}
 800db6a:	4604      	mov	r4, r0
 800db6c:	b084      	sub	sp, #16
 800db6e:	4608      	mov	r0, r1
 800db70:	a902      	add	r1, sp, #8
 800db72:	f001 fb1f 	bl	800f1b4 <uxr_deserialize_STATUS_Payload>
 800db76:	88e3      	ldrh	r3, [r4, #6]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d001      	beq.n	800db80 <uxr_read_delete_session_status+0x18>
 800db7c:	b004      	add	sp, #16
 800db7e:	bd10      	pop	{r4, pc}
 800db80:	f10d 000a 	add.w	r0, sp, #10
 800db84:	f7fe fffa 	bl	800cb7c <uxr_object_id_from_raw>
 800db88:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800db8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800db90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800db94:	b29b      	uxth	r3, r3
 800db96:	2b02      	cmp	r3, #2
 800db98:	bf04      	itt	eq
 800db9a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800db9e:	7163      	strbeq	r3, [r4, #5]
 800dba0:	b004      	add	sp, #16
 800dba2:	bd10      	pop	{r4, pc}

0800dba4 <uxr_stamp_create_session_header>:
 800dba4:	b510      	push	{r4, lr}
 800dba6:	2208      	movs	r2, #8
 800dba8:	b08a      	sub	sp, #40	@ 0x28
 800dbaa:	4604      	mov	r4, r0
 800dbac:	eb0d 0002 	add.w	r0, sp, r2
 800dbb0:	f7fe fd64 	bl	800c67c <ucdr_init_buffer>
 800dbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb8:	9400      	str	r4, [sp, #0]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800dbc2:	a802      	add	r0, sp, #8
 800dbc4:	f000 fbc2 	bl	800e34c <uxr_serialize_message_header>
 800dbc8:	b00a      	add	sp, #40	@ 0x28
 800dbca:	bd10      	pop	{r4, pc}

0800dbcc <uxr_stamp_session_header>:
 800dbcc:	b530      	push	{r4, r5, lr}
 800dbce:	b08d      	sub	sp, #52	@ 0x34
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	9203      	str	r2, [sp, #12]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	a804      	add	r0, sp, #16
 800dbda:	2208      	movs	r2, #8
 800dbdc:	f7fe fd4e 	bl	800c67c <ucdr_init_buffer>
 800dbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe4:	9b03      	ldr	r3, [sp, #12]
 800dbe6:	9400      	str	r4, [sp, #0]
 800dbe8:	462a      	mov	r2, r5
 800dbea:	a804      	add	r0, sp, #16
 800dbec:	f000 fbae 	bl	800e34c <uxr_serialize_message_header>
 800dbf0:	b00d      	add	sp, #52	@ 0x34
 800dbf2:	bd30      	pop	{r4, r5, pc}

0800dbf4 <uxr_read_session_header>:
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	460c      	mov	r4, r1
 800dc00:	4615      	mov	r5, r2
 800dc02:	461e      	mov	r6, r3
 800dc04:	f7fe fd6a 	bl	800c6dc <ucdr_buffer_remaining>
 800dc08:	2808      	cmp	r0, #8
 800dc0a:	d803      	bhi.n	800dc14 <uxr_read_session_header+0x20>
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	b004      	add	sp, #16
 800dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc14:	f10d 080c 	add.w	r8, sp, #12
 800dc18:	4633      	mov	r3, r6
 800dc1a:	462a      	mov	r2, r5
 800dc1c:	f8cd 8000 	str.w	r8, [sp]
 800dc20:	4620      	mov	r0, r4
 800dc22:	f10d 010b 	add.w	r1, sp, #11
 800dc26:	f000 fbaf 	bl	800e388 <uxr_deserialize_message_header>
 800dc2a:	783a      	ldrb	r2, [r7, #0]
 800dc2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d1eb      	bne.n	800dc0c <uxr_read_session_header+0x18>
 800dc34:	061b      	lsls	r3, r3, #24
 800dc36:	d41c      	bmi.n	800dc72 <uxr_read_session_header+0x7e>
 800dc38:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dc3c:	787b      	ldrb	r3, [r7, #1]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d003      	beq.n	800dc4a <uxr_read_session_header+0x56>
 800dc42:	2001      	movs	r0, #1
 800dc44:	f080 0001 	eor.w	r0, r0, #1
 800dc48:	e7e1      	b.n	800dc0e <uxr_read_session_header+0x1a>
 800dc4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dc4e:	78bb      	ldrb	r3, [r7, #2]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	f107 0102 	add.w	r1, r7, #2
 800dc56:	d1f4      	bne.n	800dc42 <uxr_read_session_header+0x4e>
 800dc58:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800dc5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d1ee      	bne.n	800dc42 <uxr_read_session_header+0x4e>
 800dc64:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dc68:	784b      	ldrb	r3, [r1, #1]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d1e9      	bne.n	800dc42 <uxr_read_session_header+0x4e>
 800dc6e:	2000      	movs	r0, #0
 800dc70:	e7e8      	b.n	800dc44 <uxr_read_session_header+0x50>
 800dc72:	2001      	movs	r0, #1
 800dc74:	e7cb      	b.n	800dc0e <uxr_read_session_header+0x1a>
 800dc76:	bf00      	nop

0800dc78 <uxr_session_header_offset>:
 800dc78:	f990 3000 	ldrsb.w	r3, [r0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	bfac      	ite	ge
 800dc80:	2008      	movge	r0, #8
 800dc82:	2004      	movlt	r0, #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop

0800dc88 <uxr_init_base_object_request>:
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	88c3      	ldrh	r3, [r0, #6]
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800dc92:	9101      	str	r1, [sp, #4]
 800dc94:	f1a3 010a 	sub.w	r1, r3, #10
 800dc98:	b289      	uxth	r1, r1
 800dc9a:	42a1      	cmp	r1, r4
 800dc9c:	d80e      	bhi.n	800dcbc <uxr_init_base_object_request+0x34>
 800dc9e:	3301      	adds	r3, #1
 800dca0:	b29c      	uxth	r4, r3
 800dca2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	80c4      	strh	r4, [r0, #6]
 800dcaa:	9801      	ldr	r0, [sp, #4]
 800dcac:	7011      	strb	r1, [r2, #0]
 800dcae:	7053      	strb	r3, [r2, #1]
 800dcb0:	1c91      	adds	r1, r2, #2
 800dcb2:	f7fe ff77 	bl	800cba4 <uxr_object_id_to_raw>
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	b002      	add	sp, #8
 800dcba:	bd10      	pop	{r4, pc}
 800dcbc:	230a      	movs	r3, #10
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	461c      	mov	r4, r3
 800dcc2:	e7f1      	b.n	800dca8 <uxr_init_base_object_request+0x20>

0800dcc4 <uxr_parse_base_object_request>:
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	3002      	adds	r0, #2
 800dcca:	460d      	mov	r5, r1
 800dccc:	4616      	mov	r6, r2
 800dcce:	f7fe ff55 	bl	800cb7c <uxr_object_id_from_raw>
 800dcd2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dcd6:	8028      	strh	r0, [r5, #0]
 800dcd8:	806b      	strh	r3, [r5, #2]
 800dcda:	7822      	ldrb	r2, [r4, #0]
 800dcdc:	7863      	ldrb	r3, [r4, #1]
 800dcde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dce2:	8033      	strh	r3, [r6, #0]
 800dce4:	bd70      	pop	{r4, r5, r6, pc}
 800dce6:	bf00      	nop

0800dce8 <uxr_stream_id>:
 800dce8:	2901      	cmp	r1, #1
 800dcea:	b082      	sub	sp, #8
 800dcec:	d01d      	beq.n	800dd2a <uxr_stream_id+0x42>
 800dcee:	2902      	cmp	r1, #2
 800dcf0:	f04f 0c00 	mov.w	ip, #0
 800dcf4:	d01e      	beq.n	800dd34 <uxr_stream_id+0x4c>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f36c 0307 	bfi	r3, ip, #0, #8
 800dcfc:	f360 230f 	bfi	r3, r0, #8, #8
 800dd00:	f361 4317 	bfi	r3, r1, #16, #8
 800dd04:	f362 631f 	bfi	r3, r2, #24, #8
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	f362 0007 	bfi	r0, r2, #0, #8
 800dd10:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd14:	f362 200f 	bfi	r0, r2, #8, #8
 800dd18:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dd1c:	f362 4017 	bfi	r0, r2, #16, #8
 800dd20:	0e1b      	lsrs	r3, r3, #24
 800dd22:	f363 601f 	bfi	r0, r3, #24, #8
 800dd26:	b002      	add	sp, #8
 800dd28:	4770      	bx	lr
 800dd2a:	f100 0c01 	add.w	ip, r0, #1
 800dd2e:	fa5f fc8c 	uxtb.w	ip, ip
 800dd32:	e7e0      	b.n	800dcf6 <uxr_stream_id+0xe>
 800dd34:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800dd38:	e7dd      	b.n	800dcf6 <uxr_stream_id+0xe>
 800dd3a:	bf00      	nop

0800dd3c <uxr_stream_id_from_raw>:
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	b130      	cbz	r0, 800dd4e <uxr_stream_id_from_raw+0x12>
 800dd40:	0603      	lsls	r3, r0, #24
 800dd42:	d420      	bmi.n	800dd86 <uxr_stream_id_from_raw+0x4a>
 800dd44:	1e42      	subs	r2, r0, #1
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	f04f 0c01 	mov.w	ip, #1
 800dd4c:	e001      	b.n	800dd52 <uxr_stream_id_from_raw+0x16>
 800dd4e:	4684      	mov	ip, r0
 800dd50:	4602      	mov	r2, r0
 800dd52:	2300      	movs	r3, #0
 800dd54:	f360 0307 	bfi	r3, r0, #0, #8
 800dd58:	f362 230f 	bfi	r3, r2, #8, #8
 800dd5c:	f36c 4317 	bfi	r3, ip, #16, #8
 800dd60:	f361 631f 	bfi	r3, r1, #24, #8
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	2000      	movs	r0, #0
 800dd68:	f362 0007 	bfi	r0, r2, #0, #8
 800dd6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd70:	f362 200f 	bfi	r0, r2, #8, #8
 800dd74:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dd78:	f362 4017 	bfi	r0, r2, #16, #8
 800dd7c:	0e1b      	lsrs	r3, r3, #24
 800dd7e:	f363 601f 	bfi	r0, r3, #24, #8
 800dd82:	b002      	add	sp, #8
 800dd84:	4770      	bx	lr
 800dd86:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800dd8a:	f04f 0c02 	mov.w	ip, #2
 800dd8e:	e7e0      	b.n	800dd52 <uxr_stream_id_from_raw+0x16>

0800dd90 <uxr_init_stream_storage>:
 800dd90:	2300      	movs	r3, #0
 800dd92:	7403      	strb	r3, [r0, #16]
 800dd94:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800dd98:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800dd9c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop

0800dda4 <uxr_reset_stream_storage>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	7c03      	ldrb	r3, [r0, #16]
 800dda8:	4604      	mov	r4, r0
 800ddaa:	b153      	cbz	r3, 800ddc2 <uxr_reset_stream_storage+0x1e>
 800ddac:	4606      	mov	r6, r0
 800ddae:	2500      	movs	r5, #0
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f006 fac9 	bl	8014348 <uxr_reset_output_best_effort_stream>
 800ddb6:	7c23      	ldrb	r3, [r4, #16]
 800ddb8:	3501      	adds	r5, #1
 800ddba:	42ab      	cmp	r3, r5
 800ddbc:	f106 0610 	add.w	r6, r6, #16
 800ddc0:	d8f6      	bhi.n	800ddb0 <uxr_reset_stream_storage+0xc>
 800ddc2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ddc6:	b163      	cbz	r3, 800dde2 <uxr_reset_stream_storage+0x3e>
 800ddc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ddcc:	2500      	movs	r5, #0
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f006 f8bc 	bl	8013f4c <uxr_reset_input_best_effort_stream>
 800ddd4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ddd8:	3501      	adds	r5, #1
 800ddda:	42ab      	cmp	r3, r5
 800dddc:	f106 0602 	add.w	r6, r6, #2
 800dde0:	d8f5      	bhi.n	800ddce <uxr_reset_stream_storage+0x2a>
 800dde2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800dde6:	b163      	cbz	r3, 800de02 <uxr_reset_stream_storage+0x5e>
 800dde8:	f104 0618 	add.w	r6, r4, #24
 800ddec:	2500      	movs	r5, #0
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f006 fb56 	bl	80144a0 <uxr_reset_output_reliable_stream>
 800ddf4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	42ab      	cmp	r3, r5
 800ddfc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800de00:	d8f5      	bhi.n	800ddee <uxr_reset_stream_storage+0x4a>
 800de02:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800de06:	b163      	cbz	r3, 800de22 <uxr_reset_stream_storage+0x7e>
 800de08:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800de0c:	2500      	movs	r5, #0
 800de0e:	4630      	mov	r0, r6
 800de10:	f006 f910 	bl	8014034 <uxr_reset_input_reliable_stream>
 800de14:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800de18:	3501      	adds	r5, #1
 800de1a:	42ab      	cmp	r3, r5
 800de1c:	f106 0618 	add.w	r6, r6, #24
 800de20:	d8f5      	bhi.n	800de0e <uxr_reset_stream_storage+0x6a>
 800de22:	bd70      	pop	{r4, r5, r6, pc}

0800de24 <uxr_add_output_best_effort_buffer>:
 800de24:	b510      	push	{r4, lr}
 800de26:	7c04      	ldrb	r4, [r0, #16]
 800de28:	f104 0c01 	add.w	ip, r4, #1
 800de2c:	b082      	sub	sp, #8
 800de2e:	f880 c010 	strb.w	ip, [r0, #16]
 800de32:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800de36:	f006 fa7d 	bl	8014334 <uxr_init_output_best_effort_stream>
 800de3a:	2201      	movs	r2, #1
 800de3c:	4611      	mov	r1, r2
 800de3e:	4620      	mov	r0, r4
 800de40:	b002      	add	sp, #8
 800de42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de46:	f7ff bf4f 	b.w	800dce8 <uxr_stream_id>
 800de4a:	bf00      	nop

0800de4c <uxr_add_output_reliable_buffer>:
 800de4c:	b510      	push	{r4, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	4684      	mov	ip, r0
 800de52:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800de56:	9000      	str	r0, [sp, #0]
 800de58:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800de5c:	2028      	movs	r0, #40	@ 0x28
 800de5e:	fb00 c004 	mla	r0, r0, r4, ip
 800de62:	f104 0e01 	add.w	lr, r4, #1
 800de66:	3018      	adds	r0, #24
 800de68:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800de6c:	f006 fae0 	bl	8014430 <uxr_init_output_reliable_stream>
 800de70:	2201      	movs	r2, #1
 800de72:	2102      	movs	r1, #2
 800de74:	4620      	mov	r0, r4
 800de76:	b004      	add	sp, #16
 800de78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de7c:	f7ff bf34 	b.w	800dce8 <uxr_stream_id>

0800de80 <uxr_add_input_best_effort_buffer>:
 800de80:	b510      	push	{r4, lr}
 800de82:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800de86:	4603      	mov	r3, r0
 800de88:	1c62      	adds	r2, r4, #1
 800de8a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800de8e:	b082      	sub	sp, #8
 800de90:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800de94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de98:	f006 f854 	bl	8013f44 <uxr_init_input_best_effort_stream>
 800de9c:	2200      	movs	r2, #0
 800de9e:	2101      	movs	r1, #1
 800dea0:	4620      	mov	r0, r4
 800dea2:	b002      	add	sp, #8
 800dea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea8:	f7ff bf1e 	b.w	800dce8 <uxr_stream_id>

0800deac <uxr_add_input_reliable_buffer>:
 800deac:	b510      	push	{r4, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	4684      	mov	ip, r0
 800deb2:	9806      	ldr	r0, [sp, #24]
 800deb4:	9000      	str	r0, [sp, #0]
 800deb6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800deba:	2018      	movs	r0, #24
 800debc:	fb00 c004 	mla	r0, r0, r4, ip
 800dec0:	f104 0e01 	add.w	lr, r4, #1
 800dec4:	3048      	adds	r0, #72	@ 0x48
 800dec6:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800deca:	f006 f887 	bl	8013fdc <uxr_init_input_reliable_stream>
 800dece:	2200      	movs	r2, #0
 800ded0:	2102      	movs	r1, #2
 800ded2:	4620      	mov	r0, r4
 800ded4:	b004      	add	sp, #16
 800ded6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deda:	f7ff bf05 	b.w	800dce8 <uxr_stream_id>
 800dede:	bf00      	nop

0800dee0 <uxr_get_output_best_effort_stream>:
 800dee0:	7c03      	ldrb	r3, [r0, #16]
 800dee2:	428b      	cmp	r3, r1
 800dee4:	bf8c      	ite	hi
 800dee6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800deea:	2000      	movls	r0, #0
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop

0800def0 <uxr_get_output_reliable_stream>:
 800def0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800def4:	428b      	cmp	r3, r1
 800def6:	bf83      	ittte	hi
 800def8:	2328      	movhi	r3, #40	@ 0x28
 800defa:	fb03 0001 	mlahi	r0, r3, r1, r0
 800defe:	3018      	addhi	r0, #24
 800df00:	2000      	movls	r0, #0
 800df02:	4770      	bx	lr

0800df04 <uxr_get_input_best_effort_stream>:
 800df04:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800df08:	428b      	cmp	r3, r1
 800df0a:	bf86      	itte	hi
 800df0c:	3121      	addhi	r1, #33	@ 0x21
 800df0e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800df12:	2000      	movls	r0, #0
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop

0800df18 <uxr_get_input_reliable_stream>:
 800df18:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800df1c:	428b      	cmp	r3, r1
 800df1e:	bf83      	ittte	hi
 800df20:	2318      	movhi	r3, #24
 800df22:	fb03 0001 	mlahi	r0, r3, r1, r0
 800df26:	3048      	addhi	r0, #72	@ 0x48
 800df28:	2000      	movls	r0, #0
 800df2a:	4770      	bx	lr

0800df2c <uxr_output_streams_confirmed>:
 800df2c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800df30:	b183      	cbz	r3, 800df54 <uxr_output_streams_confirmed+0x28>
 800df32:	b570      	push	{r4, r5, r6, lr}
 800df34:	4606      	mov	r6, r0
 800df36:	f100 0518 	add.w	r5, r0, #24
 800df3a:	2400      	movs	r4, #0
 800df3c:	e001      	b.n	800df42 <uxr_output_streams_confirmed+0x16>
 800df3e:	3528      	adds	r5, #40	@ 0x28
 800df40:	b138      	cbz	r0, 800df52 <uxr_output_streams_confirmed+0x26>
 800df42:	4628      	mov	r0, r5
 800df44:	f006 fd1c 	bl	8014980 <uxr_is_output_up_to_date>
 800df48:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800df4c:	3401      	adds	r4, #1
 800df4e:	42a3      	cmp	r3, r4
 800df50:	d8f5      	bhi.n	800df3e <uxr_output_streams_confirmed+0x12>
 800df52:	bd70      	pop	{r4, r5, r6, pc}
 800df54:	2001      	movs	r0, #1
 800df56:	4770      	bx	lr

0800df58 <uxr_buffer_submessage_header>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	4604      	mov	r4, r0
 800df5c:	460e      	mov	r6, r1
 800df5e:	2104      	movs	r1, #4
 800df60:	4615      	mov	r5, r2
 800df62:	461f      	mov	r7, r3
 800df64:	f7fe fba4 	bl	800c6b0 <ucdr_align_to>
 800df68:	2301      	movs	r3, #1
 800df6a:	ea47 0203 	orr.w	r2, r7, r3
 800df6e:	4631      	mov	r1, r6
 800df70:	7523      	strb	r3, [r4, #20]
 800df72:	4620      	mov	r0, r4
 800df74:	462b      	mov	r3, r5
 800df76:	f000 fa27 	bl	800e3c8 <uxr_serialize_submessage_header>
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7fe fbae 	bl	800c6dc <ucdr_buffer_remaining>
 800df80:	42a8      	cmp	r0, r5
 800df82:	bf34      	ite	cc
 800df84:	2000      	movcc	r0, #0
 800df86:	2001      	movcs	r0, #1
 800df88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df8a:	bf00      	nop

0800df8c <uxr_read_submessage_header>:
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	2104      	movs	r1, #4
 800df96:	4616      	mov	r6, r2
 800df98:	4698      	mov	r8, r3
 800df9a:	f7fe fb89 	bl	800c6b0 <ucdr_align_to>
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f7fe fb9c 	bl	800c6dc <ucdr_buffer_remaining>
 800dfa4:	2803      	cmp	r0, #3
 800dfa6:	bf8c      	ite	hi
 800dfa8:	2701      	movhi	r7, #1
 800dfaa:	2700      	movls	r7, #0
 800dfac:	d802      	bhi.n	800dfb4 <uxr_read_submessage_header+0x28>
 800dfae:	4638      	mov	r0, r7
 800dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb4:	4633      	mov	r3, r6
 800dfb6:	4642      	mov	r2, r8
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4629      	mov	r1, r5
 800dfbc:	f000 fa18 	bl	800e3f0 <uxr_deserialize_submessage_header>
 800dfc0:	f898 3000 	ldrb.w	r3, [r8]
 800dfc4:	f003 0201 	and.w	r2, r3, #1
 800dfc8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dfcc:	f888 3000 	strb.w	r3, [r8]
 800dfd0:	7522      	strb	r2, [r4, #20]
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfd8 <uxr_submessage_padding>:
 800dfd8:	f010 0003 	ands.w	r0, r0, #3
 800dfdc:	bf18      	it	ne
 800dfde:	f1c0 0004 	rsbne	r0, r0, #4
 800dfe2:	4770      	bx	lr

0800dfe4 <uxr_millis>:
 800dfe4:	b510      	push	{r4, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	4669      	mov	r1, sp
 800dfea:	2001      	movs	r0, #1
 800dfec:	f7f4 f974 	bl	80022d8 <clock_gettime>
 800dff0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800dff4:	4906      	ldr	r1, [pc, #24]	@ (800e010 <uxr_millis+0x2c>)
 800dff6:	fba0 0301 	umull	r0, r3, r0, r1
 800dffa:	1900      	adds	r0, r0, r4
 800dffc:	fb01 3102 	mla	r1, r1, r2, r3
 800e000:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e004:	4a03      	ldr	r2, [pc, #12]	@ (800e014 <uxr_millis+0x30>)
 800e006:	2300      	movs	r3, #0
 800e008:	f7f2 fca8 	bl	800095c <__aeabi_ldivmod>
 800e00c:	b004      	add	sp, #16
 800e00e:	bd10      	pop	{r4, pc}
 800e010:	3b9aca00 	.word	0x3b9aca00
 800e014:	000f4240 	.word	0x000f4240

0800e018 <uxr_nanos>:
 800e018:	b510      	push	{r4, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	4669      	mov	r1, sp
 800e01e:	2001      	movs	r0, #1
 800e020:	f7f4 f95a 	bl	80022d8 <clock_gettime>
 800e024:	4a06      	ldr	r2, [pc, #24]	@ (800e040 <uxr_nanos+0x28>)
 800e026:	9800      	ldr	r0, [sp, #0]
 800e028:	9902      	ldr	r1, [sp, #8]
 800e02a:	9c01      	ldr	r4, [sp, #4]
 800e02c:	fba0 0302 	umull	r0, r3, r0, r2
 800e030:	1840      	adds	r0, r0, r1
 800e032:	fb02 3304 	mla	r3, r2, r4, r3
 800e036:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e03a:	b004      	add	sp, #16
 800e03c:	bd10      	pop	{r4, pc}
 800e03e:	bf00      	nop
 800e040:	3b9aca00 	.word	0x3b9aca00

0800e044 <on_full_output_buffer_fragmented>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	460c      	mov	r4, r1
 800e04a:	b08a      	sub	sp, #40	@ 0x28
 800e04c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e050:	4606      	mov	r6, r0
 800e052:	f104 0008 	add.w	r0, r4, #8
 800e056:	f7ff ff4b 	bl	800def0 <uxr_get_output_reliable_stream>
 800e05a:	4605      	mov	r5, r0
 800e05c:	f006 fc9a 	bl	8014994 <get_available_free_slots>
 800e060:	b968      	cbnz	r0, 800e07e <on_full_output_buffer_fragmented+0x3a>
 800e062:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e066:	4620      	mov	r0, r4
 800e068:	4798      	blx	r3
 800e06a:	b918      	cbnz	r0, 800e074 <on_full_output_buffer_fragmented+0x30>
 800e06c:	2001      	movs	r0, #1
 800e06e:	b00a      	add	sp, #40	@ 0x28
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	4628      	mov	r0, r5
 800e076:	f006 fc8d 	bl	8014994 <get_available_free_slots>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d0f6      	beq.n	800e06c <on_full_output_buffer_fragmented+0x28>
 800e07e:	8929      	ldrh	r1, [r5, #8]
 800e080:	89eb      	ldrh	r3, [r5, #14]
 800e082:	7b28      	ldrb	r0, [r5, #12]
 800e084:	686a      	ldr	r2, [r5, #4]
 800e086:	fbb2 f8f1 	udiv	r8, r2, r1
 800e08a:	fbb3 f2f1 	udiv	r2, r3, r1
 800e08e:	fb01 3112 	mls	r1, r1, r2, r3
 800e092:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e096:	b289      	uxth	r1, r1
 800e098:	fb08 f101 	mul.w	r1, r8, r1
 800e09c:	30fc      	adds	r0, #252	@ 0xfc
 800e09e:	f1a8 0804 	sub.w	r8, r8, #4
 800e0a2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e0a6:	4440      	add	r0, r8
 800e0a8:	b287      	uxth	r7, r0
 800e0aa:	1bdb      	subs	r3, r3, r7
 800e0ac:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	3104      	adds	r1, #4
 800e0b4:	4419      	add	r1, r3
 800e0b6:	4642      	mov	r2, r8
 800e0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	a802      	add	r0, sp, #8
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f7fe fac9 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800e0c6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e0ca:	f102 0308 	add.w	r3, r2, #8
 800e0ce:	4543      	cmp	r3, r8
 800e0d0:	d928      	bls.n	800e124 <on_full_output_buffer_fragmented+0xe0>
 800e0d2:	463a      	mov	r2, r7
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	210d      	movs	r1, #13
 800e0d8:	a802      	add	r0, sp, #8
 800e0da:	f7ff ff3d 	bl	800df58 <uxr_buffer_submessage_header>
 800e0de:	8929      	ldrh	r1, [r5, #8]
 800e0e0:	89eb      	ldrh	r3, [r5, #14]
 800e0e2:	fbb3 f2f1 	udiv	r2, r3, r1
 800e0e6:	fb01 3312 	mls	r3, r1, r2, r3
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	686a      	ldr	r2, [r5, #4]
 800e0ee:	fbb2 f2f1 	udiv	r2, r2, r1
 800e0f2:	fb02 f303 	mul.w	r3, r2, r3
 800e0f6:	682a      	ldr	r2, [r5, #0]
 800e0f8:	f842 8003 	str.w	r8, [r2, r3]
 800e0fc:	89e8      	ldrh	r0, [r5, #14]
 800e0fe:	2101      	movs	r1, #1
 800e100:	f006 fd98 	bl	8014c34 <uxr_seq_num_add>
 800e104:	9904      	ldr	r1, [sp, #16]
 800e106:	9a03      	ldr	r2, [sp, #12]
 800e108:	81e8      	strh	r0, [r5, #14]
 800e10a:	1a52      	subs	r2, r2, r1
 800e10c:	4630      	mov	r0, r6
 800e10e:	f7fe fab5 	bl	800c67c <ucdr_init_buffer>
 800e112:	4630      	mov	r0, r6
 800e114:	490f      	ldr	r1, [pc, #60]	@ (800e154 <on_full_output_buffer_fragmented+0x110>)
 800e116:	4622      	mov	r2, r4
 800e118:	f7fe fa84 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 800e11c:	2000      	movs	r0, #0
 800e11e:	b00a      	add	sp, #40	@ 0x28
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e124:	b292      	uxth	r2, r2
 800e126:	2302      	movs	r3, #2
 800e128:	210d      	movs	r1, #13
 800e12a:	a802      	add	r0, sp, #8
 800e12c:	f7ff ff14 	bl	800df58 <uxr_buffer_submessage_header>
 800e130:	8928      	ldrh	r0, [r5, #8]
 800e132:	89eb      	ldrh	r3, [r5, #14]
 800e134:	fbb3 f1f0 	udiv	r1, r3, r0
 800e138:	fb00 3311 	mls	r3, r0, r1, r3
 800e13c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e140:	6869      	ldr	r1, [r5, #4]
 800e142:	fbb1 f1f0 	udiv	r1, r1, r0
 800e146:	b29b      	uxth	r3, r3
 800e148:	fb01 f303 	mul.w	r3, r1, r3
 800e14c:	6829      	ldr	r1, [r5, #0]
 800e14e:	3208      	adds	r2, #8
 800e150:	50ca      	str	r2, [r1, r3]
 800e152:	e7d3      	b.n	800e0fc <on_full_output_buffer_fragmented+0xb8>
 800e154:	0800e045 	.word	0x0800e045

0800e158 <uxr_prepare_output_stream>:
 800e158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e15a:	b087      	sub	sp, #28
 800e15c:	2707      	movs	r7, #7
 800e15e:	9202      	str	r2, [sp, #8]
 800e160:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e162:	9103      	str	r1, [sp, #12]
 800e164:	2500      	movs	r5, #0
 800e166:	3204      	adds	r2, #4
 800e168:	e9cd 7500 	strd	r7, r5, [sp]
 800e16c:	461c      	mov	r4, r3
 800e16e:	4606      	mov	r6, r0
 800e170:	f7ff fc54 	bl	800da1c <uxr_prepare_stream_to_write_submessage>
 800e174:	f080 0201 	eor.w	r2, r0, #1
 800e178:	b2d2      	uxtb	r2, r2
 800e17a:	75a2      	strb	r2, [r4, #22]
 800e17c:	b112      	cbz	r2, 800e184 <uxr_prepare_output_stream+0x2c>
 800e17e:	4628      	mov	r0, r5
 800e180:	b007      	add	sp, #28
 800e182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e184:	aa05      	add	r2, sp, #20
 800e186:	9902      	ldr	r1, [sp, #8]
 800e188:	4630      	mov	r0, r6
 800e18a:	f7ff fd7d 	bl	800dc88 <uxr_init_base_object_request>
 800e18e:	a905      	add	r1, sp, #20
 800e190:	4605      	mov	r5, r0
 800e192:	4620      	mov	r0, r4
 800e194:	f001 f88c 	bl	800f2b0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e198:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e19c:	69a6      	ldr	r6, [r4, #24]
 800e19e:	69e7      	ldr	r7, [r4, #28]
 800e1a0:	1a52      	subs	r2, r2, r1
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f7fe fa6a 	bl	800c67c <ucdr_init_buffer>
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	463a      	mov	r2, r7
 800e1ac:	4631      	mov	r1, r6
 800e1ae:	f7fe fa39 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	b007      	add	sp, #28
 800e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1b8 <uxr_prepare_output_stream_fragmented>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	b091      	sub	sp, #68	@ 0x44
 800e1be:	4605      	mov	r5, r0
 800e1c0:	9105      	str	r1, [sp, #20]
 800e1c2:	3008      	adds	r0, #8
 800e1c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e1c8:	461e      	mov	r6, r3
 800e1ca:	9204      	str	r2, [sp, #16]
 800e1cc:	f7ff fe90 	bl	800def0 <uxr_get_output_reliable_stream>
 800e1d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	f000 8091 	beq.w	800e2fc <uxr_prepare_output_stream_fragmented+0x144>
 800e1da:	4604      	mov	r4, r0
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	f000 808d 	beq.w	800e2fc <uxr_prepare_output_stream_fragmented+0x144>
 800e1e2:	f006 fbd7 	bl	8014994 <get_available_free_slots>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f000 8083 	beq.w	800e2f2 <uxr_prepare_output_stream_fragmented+0x13a>
 800e1ec:	8922      	ldrh	r2, [r4, #8]
 800e1ee:	89e7      	ldrh	r7, [r4, #14]
 800e1f0:	fbb7 f9f2 	udiv	r9, r7, r2
 800e1f4:	fb02 7919 	mls	r9, r2, r9, r7
 800e1f8:	fa1f f989 	uxth.w	r9, r9
 800e1fc:	6863      	ldr	r3, [r4, #4]
 800e1fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	9203      	str	r2, [sp, #12]
 800e206:	fb02 f909 	mul.w	r9, r2, r9
 800e20a:	f109 0904 	add.w	r9, r9, #4
 800e20e:	4499      	add	r9, r3
 800e210:	7b23      	ldrb	r3, [r4, #12]
 800e212:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e216:	4543      	cmp	r3, r8
 800e218:	f1a2 0b04 	sub.w	fp, r2, #4
 800e21c:	d37a      	bcc.n	800e314 <uxr_prepare_output_stream_fragmented+0x15c>
 800e21e:	f1ab 0a04 	sub.w	sl, fp, #4
 800e222:	ebaa 0a03 	sub.w	sl, sl, r3
 800e226:	465a      	mov	r2, fp
 800e228:	2300      	movs	r3, #0
 800e22a:	4649      	mov	r1, r9
 800e22c:	a808      	add	r0, sp, #32
 800e22e:	f8cd 8000 	str.w	r8, [sp]
 800e232:	f7fe fa11 	bl	800c658 <ucdr_init_buffer_origin_offset>
 800e236:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e238:	fa1f fa8a 	uxth.w	sl, sl
 800e23c:	4652      	mov	r2, sl
 800e23e:	f103 0a08 	add.w	sl, r3, #8
 800e242:	45da      	cmp	sl, fp
 800e244:	bf34      	ite	cc
 800e246:	2302      	movcc	r3, #2
 800e248:	2300      	movcs	r3, #0
 800e24a:	210d      	movs	r1, #13
 800e24c:	a808      	add	r0, sp, #32
 800e24e:	f7ff fe83 	bl	800df58 <uxr_buffer_submessage_header>
 800e252:	8921      	ldrh	r1, [r4, #8]
 800e254:	fbb7 f2f1 	udiv	r2, r7, r1
 800e258:	fb01 7212 	mls	r2, r1, r2, r7
 800e25c:	b292      	uxth	r2, r2
 800e25e:	6863      	ldr	r3, [r4, #4]
 800e260:	fbb3 f3f1 	udiv	r3, r3, r1
 800e264:	fb02 f303 	mul.w	r3, r2, r3
 800e268:	6822      	ldr	r2, [r4, #0]
 800e26a:	4638      	mov	r0, r7
 800e26c:	f842 b003 	str.w	fp, [r2, r3]
 800e270:	2101      	movs	r1, #1
 800e272:	f006 fcdf 	bl	8014c34 <uxr_seq_num_add>
 800e276:	9b03      	ldr	r3, [sp, #12]
 800e278:	f108 0104 	add.w	r1, r8, #4
 800e27c:	f1a3 0208 	sub.w	r2, r3, #8
 800e280:	eba2 0208 	sub.w	r2, r2, r8
 800e284:	4449      	add	r1, r9
 800e286:	4607      	mov	r7, r0
 800e288:	4630      	mov	r0, r6
 800e28a:	f7fe f9f7 	bl	800c67c <ucdr_init_buffer>
 800e28e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e290:	81e7      	strh	r7, [r4, #14]
 800e292:	1d1a      	adds	r2, r3, #4
 800e294:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e298:	bf28      	it	cs
 800e29a:	2200      	movcs	r2, #0
 800e29c:	2300      	movs	r3, #0
 800e29e:	b292      	uxth	r2, r2
 800e2a0:	2107      	movs	r1, #7
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7ff fe58 	bl	800df58 <uxr_buffer_submessage_header>
 800e2a8:	9904      	ldr	r1, [sp, #16]
 800e2aa:	aa07      	add	r2, sp, #28
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f7ff fceb 	bl	800dc88 <uxr_init_base_object_request>
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	b318      	cbz	r0, 800e2fe <uxr_prepare_output_stream_fragmented+0x146>
 800e2b6:	a907      	add	r1, sp, #28
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f000 fff9 	bl	800f2b0 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e2be:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	1a52      	subs	r2, r2, r1
 800e2c6:	f7fe f9d9 	bl	800c67c <ucdr_init_buffer>
 800e2ca:	9b05      	ldr	r3, [sp, #20]
 800e2cc:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e2d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e2d2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e2d6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e2d8:	491b      	ldr	r1, [pc, #108]	@ (800e348 <uxr_prepare_output_stream_fragmented+0x190>)
 800e2da:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e2de:	4630      	mov	r0, r6
 800e2e0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e2e4:	462a      	mov	r2, r5
 800e2e6:	f7fe f99d 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	b011      	add	sp, #68	@ 0x44
 800e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e2f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	4798      	blx	r3
 800e2fa:	b920      	cbnz	r0, 800e306 <uxr_prepare_output_stream_fragmented+0x14e>
 800e2fc:	2400      	movs	r4, #0
 800e2fe:	4620      	mov	r0, r4
 800e300:	b011      	add	sp, #68	@ 0x44
 800e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	4620      	mov	r0, r4
 800e308:	f006 fb44 	bl	8014994 <get_available_free_slots>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	f47f af6d 	bne.w	800e1ec <uxr_prepare_output_stream_fragmented+0x34>
 800e312:	e7f3      	b.n	800e2fc <uxr_prepare_output_stream_fragmented+0x144>
 800e314:	4638      	mov	r0, r7
 800e316:	2101      	movs	r1, #1
 800e318:	f006 fc8c 	bl	8014c34 <uxr_seq_num_add>
 800e31c:	8921      	ldrh	r1, [r4, #8]
 800e31e:	fbb0 f2f1 	udiv	r2, r0, r1
 800e322:	fb01 0912 	mls	r9, r1, r2, r0
 800e326:	fa1f f289 	uxth.w	r2, r9
 800e32a:	6863      	ldr	r3, [r4, #4]
 800e32c:	fbb3 f9f1 	udiv	r9, r3, r1
 800e330:	6823      	ldr	r3, [r4, #0]
 800e332:	fb02 f909 	mul.w	r9, r2, r9
 800e336:	f109 0904 	add.w	r9, r9, #4
 800e33a:	4499      	add	r9, r3
 800e33c:	4607      	mov	r7, r0
 800e33e:	7b23      	ldrb	r3, [r4, #12]
 800e340:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e344:	e76b      	b.n	800e21e <uxr_prepare_output_stream_fragmented+0x66>
 800e346:	bf00      	nop
 800e348:	0800e045 	.word	0x0800e045

0800e34c <uxr_serialize_message_header>:
 800e34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e34e:	b083      	sub	sp, #12
 800e350:	4616      	mov	r6, r2
 800e352:	4604      	mov	r4, r0
 800e354:	9301      	str	r3, [sp, #4]
 800e356:	460d      	mov	r5, r1
 800e358:	9f08      	ldr	r7, [sp, #32]
 800e35a:	f7fd f8bb 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e35e:	4631      	mov	r1, r6
 800e360:	4620      	mov	r0, r4
 800e362:	f7fd f8b7 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e366:	9a01      	ldr	r2, [sp, #4]
 800e368:	2101      	movs	r1, #1
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7fd f95e 	bl	800b62c <ucdr_serialize_endian_uint16_t>
 800e370:	062b      	lsls	r3, r5, #24
 800e372:	d501      	bpl.n	800e378 <uxr_serialize_message_header+0x2c>
 800e374:	b003      	add	sp, #12
 800e376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e378:	2204      	movs	r2, #4
 800e37a:	4639      	mov	r1, r7
 800e37c:	4620      	mov	r0, r4
 800e37e:	b003      	add	sp, #12
 800e380:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e384:	f005 bbe4 	b.w	8013b50 <ucdr_serialize_array_uint8_t>

0800e388 <uxr_deserialize_message_header>:
 800e388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e38a:	b083      	sub	sp, #12
 800e38c:	4616      	mov	r6, r2
 800e38e:	4604      	mov	r4, r0
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	460d      	mov	r5, r1
 800e394:	9f08      	ldr	r7, [sp, #32]
 800e396:	f7fd f8b3 	bl	800b500 <ucdr_deserialize_uint8_t>
 800e39a:	4631      	mov	r1, r6
 800e39c:	4620      	mov	r0, r4
 800e39e:	f7fd f8af 	bl	800b500 <ucdr_deserialize_uint8_t>
 800e3a2:	9a01      	ldr	r2, [sp, #4]
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f7fd fa34 	bl	800b814 <ucdr_deserialize_endian_uint16_t>
 800e3ac:	f995 3000 	ldrsb.w	r3, [r5]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	da01      	bge.n	800e3b8 <uxr_deserialize_message_header+0x30>
 800e3b4:	b003      	add	sp, #12
 800e3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3b8:	2204      	movs	r2, #4
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	4620      	mov	r0, r4
 800e3be:	b003      	add	sp, #12
 800e3c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3c4:	f005 bc28 	b.w	8013c18 <ucdr_deserialize_array_uint8_t>

0800e3c8 <uxr_serialize_submessage_header>:
 800e3c8:	b530      	push	{r4, r5, lr}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	4615      	mov	r5, r2
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	f7fd f87f 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f7fd f87b 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e3de:	9a01      	ldr	r2, [sp, #4]
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	b003      	add	sp, #12
 800e3e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3ea:	f7fd b91f 	b.w	800b62c <ucdr_serialize_endian_uint16_t>
 800e3ee:	bf00      	nop

0800e3f0 <uxr_deserialize_submessage_header>:
 800e3f0:	b530      	push	{r4, r5, lr}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	4615      	mov	r5, r2
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	9301      	str	r3, [sp, #4]
 800e3fa:	f7fd f881 	bl	800b500 <ucdr_deserialize_uint8_t>
 800e3fe:	4629      	mov	r1, r5
 800e400:	4620      	mov	r0, r4
 800e402:	f7fd f87d 	bl	800b500 <ucdr_deserialize_uint8_t>
 800e406:	9a01      	ldr	r2, [sp, #4]
 800e408:	2101      	movs	r1, #1
 800e40a:	4620      	mov	r0, r4
 800e40c:	b003      	add	sp, #12
 800e40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e412:	f7fd b9ff 	b.w	800b814 <ucdr_deserialize_endian_uint16_t>
 800e416:	bf00      	nop

0800e418 <uxr_serialize_CLIENT_Representation>:
 800e418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e41c:	2204      	movs	r2, #4
 800e41e:	460e      	mov	r6, r1
 800e420:	4605      	mov	r5, r0
 800e422:	f005 fb95 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e426:	2202      	movs	r2, #2
 800e428:	4607      	mov	r7, r0
 800e42a:	1d31      	adds	r1, r6, #4
 800e42c:	4628      	mov	r0, r5
 800e42e:	f005 fb8f 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e432:	4038      	ands	r0, r7
 800e434:	2202      	movs	r2, #2
 800e436:	1db1      	adds	r1, r6, #6
 800e438:	b2c7      	uxtb	r7, r0
 800e43a:	4628      	mov	r0, r5
 800e43c:	f005 fb88 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e440:	2204      	movs	r2, #4
 800e442:	4007      	ands	r7, r0
 800e444:	f106 0108 	add.w	r1, r6, #8
 800e448:	4628      	mov	r0, r5
 800e44a:	f005 fb81 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e44e:	7b31      	ldrb	r1, [r6, #12]
 800e450:	4007      	ands	r7, r0
 800e452:	4628      	mov	r0, r5
 800e454:	f7fd f83e 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e458:	7b71      	ldrb	r1, [r6, #13]
 800e45a:	4007      	ands	r7, r0
 800e45c:	4628      	mov	r0, r5
 800e45e:	f7fd f80b 	bl	800b478 <ucdr_serialize_bool>
 800e462:	7b73      	ldrb	r3, [r6, #13]
 800e464:	ea07 0800 	and.w	r8, r7, r0
 800e468:	b93b      	cbnz	r3, 800e47a <uxr_serialize_CLIENT_Representation+0x62>
 800e46a:	8bb1      	ldrh	r1, [r6, #28]
 800e46c:	4628      	mov	r0, r5
 800e46e:	f7fd f85d 	bl	800b52c <ucdr_serialize_uint16_t>
 800e472:	ea08 0000 	and.w	r0, r8, r0
 800e476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e47a:	6931      	ldr	r1, [r6, #16]
 800e47c:	4628      	mov	r0, r5
 800e47e:	f7fd fa3f 	bl	800b900 <ucdr_serialize_uint32_t>
 800e482:	6933      	ldr	r3, [r6, #16]
 800e484:	b1e3      	cbz	r3, 800e4c0 <uxr_serialize_CLIENT_Representation+0xa8>
 800e486:	b1c0      	cbz	r0, 800e4ba <uxr_serialize_CLIENT_Representation+0xa2>
 800e488:	4637      	mov	r7, r6
 800e48a:	f04f 0900 	mov.w	r9, #0
 800e48e:	e001      	b.n	800e494 <uxr_serialize_CLIENT_Representation+0x7c>
 800e490:	3708      	adds	r7, #8
 800e492:	b194      	cbz	r4, 800e4ba <uxr_serialize_CLIENT_Representation+0xa2>
 800e494:	6979      	ldr	r1, [r7, #20]
 800e496:	4628      	mov	r0, r5
 800e498:	f005 fc7a 	bl	8013d90 <ucdr_serialize_string>
 800e49c:	69b9      	ldr	r1, [r7, #24]
 800e49e:	4604      	mov	r4, r0
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	f005 fc75 	bl	8013d90 <ucdr_serialize_string>
 800e4a6:	6933      	ldr	r3, [r6, #16]
 800e4a8:	f109 0901 	add.w	r9, r9, #1
 800e4ac:	4004      	ands	r4, r0
 800e4ae:	4599      	cmp	r9, r3
 800e4b0:	b2e4      	uxtb	r4, r4
 800e4b2:	d3ed      	bcc.n	800e490 <uxr_serialize_CLIENT_Representation+0x78>
 800e4b4:	ea08 0804 	and.w	r8, r8, r4
 800e4b8:	e7d7      	b.n	800e46a <uxr_serialize_CLIENT_Representation+0x52>
 800e4ba:	f04f 0800 	mov.w	r8, #0
 800e4be:	e7d4      	b.n	800e46a <uxr_serialize_CLIENT_Representation+0x52>
 800e4c0:	ea08 0800 	and.w	r8, r8, r0
 800e4c4:	e7d1      	b.n	800e46a <uxr_serialize_CLIENT_Representation+0x52>
 800e4c6:	bf00      	nop

0800e4c8 <uxr_deserialize_CLIENT_Representation>:
 800e4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	f005 fba1 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	4607      	mov	r7, r0
 800e4da:	1d21      	adds	r1, r4, #4
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f005 fb9b 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800e4e2:	4038      	ands	r0, r7
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	1da1      	adds	r1, r4, #6
 800e4e8:	b2c6      	uxtb	r6, r0
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	f005 fb94 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800e4f0:	2204      	movs	r2, #4
 800e4f2:	4006      	ands	r6, r0
 800e4f4:	f104 0108 	add.w	r1, r4, #8
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f005 fb8d 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800e4fe:	f104 010c 	add.w	r1, r4, #12
 800e502:	4006      	ands	r6, r0
 800e504:	4628      	mov	r0, r5
 800e506:	f7fc fffb 	bl	800b500 <ucdr_deserialize_uint8_t>
 800e50a:	f104 010d 	add.w	r1, r4, #13
 800e50e:	ea06 0700 	and.w	r7, r6, r0
 800e512:	4628      	mov	r0, r5
 800e514:	f7fc ffc6 	bl	800b4a4 <ucdr_deserialize_bool>
 800e518:	7b63      	ldrb	r3, [r4, #13]
 800e51a:	4007      	ands	r7, r0
 800e51c:	b93b      	cbnz	r3, 800e52e <uxr_deserialize_CLIENT_Representation+0x66>
 800e51e:	f104 011c 	add.w	r1, r4, #28
 800e522:	4628      	mov	r0, r5
 800e524:	f7fd f902 	bl	800b72c <ucdr_deserialize_uint16_t>
 800e528:	4038      	ands	r0, r7
 800e52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e52e:	f104 0110 	add.w	r1, r4, #16
 800e532:	4628      	mov	r0, r5
 800e534:	f7fd fb14 	bl	800bb60 <ucdr_deserialize_uint32_t>
 800e538:	6923      	ldr	r3, [r4, #16]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d903      	bls.n	800e546 <uxr_deserialize_CLIENT_Representation+0x7e>
 800e53e:	2301      	movs	r3, #1
 800e540:	75ab      	strb	r3, [r5, #22]
 800e542:	2700      	movs	r7, #0
 800e544:	e7eb      	b.n	800e51e <uxr_deserialize_CLIENT_Representation+0x56>
 800e546:	b30b      	cbz	r3, 800e58c <uxr_deserialize_CLIENT_Representation+0xc4>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d0fa      	beq.n	800e542 <uxr_deserialize_CLIENT_Representation+0x7a>
 800e54c:	46a0      	mov	r8, r4
 800e54e:	f04f 0900 	mov.w	r9, #0
 800e552:	e001      	b.n	800e558 <uxr_deserialize_CLIENT_Representation+0x90>
 800e554:	2e00      	cmp	r6, #0
 800e556:	d0f4      	beq.n	800e542 <uxr_deserialize_CLIENT_Representation+0x7a>
 800e558:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e55c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e560:	4628      	mov	r0, r5
 800e562:	f005 fc25 	bl	8013db0 <ucdr_deserialize_string>
 800e566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e56a:	4606      	mov	r6, r0
 800e56c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e570:	4628      	mov	r0, r5
 800e572:	f005 fc1d 	bl	8013db0 <ucdr_deserialize_string>
 800e576:	6923      	ldr	r3, [r4, #16]
 800e578:	f109 0901 	add.w	r9, r9, #1
 800e57c:	4006      	ands	r6, r0
 800e57e:	4599      	cmp	r9, r3
 800e580:	f108 0808 	add.w	r8, r8, #8
 800e584:	b2f6      	uxtb	r6, r6
 800e586:	d3e5      	bcc.n	800e554 <uxr_deserialize_CLIENT_Representation+0x8c>
 800e588:	4037      	ands	r7, r6
 800e58a:	e7c8      	b.n	800e51e <uxr_deserialize_CLIENT_Representation+0x56>
 800e58c:	4007      	ands	r7, r0
 800e58e:	e7c6      	b.n	800e51e <uxr_deserialize_CLIENT_Representation+0x56>

0800e590 <uxr_serialize_AGENT_Representation>:
 800e590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e594:	2204      	movs	r2, #4
 800e596:	460f      	mov	r7, r1
 800e598:	4605      	mov	r5, r0
 800e59a:	f005 fad9 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e59e:	2202      	movs	r2, #2
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	1d39      	adds	r1, r7, #4
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f005 fad3 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e5aa:	4020      	ands	r0, r4
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	1db9      	adds	r1, r7, #6
 800e5b0:	b2c4      	uxtb	r4, r0
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	f005 facc 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e5b8:	7a39      	ldrb	r1, [r7, #8]
 800e5ba:	4004      	ands	r4, r0
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f7fc ff5b 	bl	800b478 <ucdr_serialize_bool>
 800e5c2:	7a3b      	ldrb	r3, [r7, #8]
 800e5c4:	ea00 0804 	and.w	r8, r0, r4
 800e5c8:	b913      	cbnz	r3, 800e5d0 <uxr_serialize_AGENT_Representation+0x40>
 800e5ca:	4640      	mov	r0, r8
 800e5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d0:	68f9      	ldr	r1, [r7, #12]
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f7fd f994 	bl	800b900 <ucdr_serialize_uint32_t>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	b303      	cbz	r3, 800e61e <uxr_serialize_AGENT_Representation+0x8e>
 800e5dc:	b1d0      	cbz	r0, 800e614 <uxr_serialize_AGENT_Representation+0x84>
 800e5de:	463e      	mov	r6, r7
 800e5e0:	f04f 0900 	mov.w	r9, #0
 800e5e4:	e001      	b.n	800e5ea <uxr_serialize_AGENT_Representation+0x5a>
 800e5e6:	3608      	adds	r6, #8
 800e5e8:	b1a4      	cbz	r4, 800e614 <uxr_serialize_AGENT_Representation+0x84>
 800e5ea:	6931      	ldr	r1, [r6, #16]
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	f005 fbcf 	bl	8013d90 <ucdr_serialize_string>
 800e5f2:	6971      	ldr	r1, [r6, #20]
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	f005 fbca 	bl	8013d90 <ucdr_serialize_string>
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f109 0901 	add.w	r9, r9, #1
 800e602:	4004      	ands	r4, r0
 800e604:	4599      	cmp	r9, r3
 800e606:	b2e4      	uxtb	r4, r4
 800e608:	d3ed      	bcc.n	800e5e6 <uxr_serialize_AGENT_Representation+0x56>
 800e60a:	ea08 0804 	and.w	r8, r8, r4
 800e60e:	4640      	mov	r0, r8
 800e610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e614:	f04f 0800 	mov.w	r8, #0
 800e618:	4640      	mov	r0, r8
 800e61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e61e:	ea08 0800 	and.w	r8, r8, r0
 800e622:	e7d2      	b.n	800e5ca <uxr_serialize_AGENT_Representation+0x3a>

0800e624 <uxr_serialize_DATAWRITER_Representation>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	460d      	mov	r5, r1
 800e628:	7809      	ldrb	r1, [r1, #0]
 800e62a:	4606      	mov	r6, r0
 800e62c:	f7fc ff52 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e630:	4604      	mov	r4, r0
 800e632:	b130      	cbz	r0, 800e642 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e634:	782b      	ldrb	r3, [r5, #0]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d00c      	beq.n	800e654 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d010      	beq.n	800e660 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d008      	beq.n	800e654 <uxr_serialize_DATAWRITER_Representation+0x30>
 800e642:	2202      	movs	r2, #2
 800e644:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e648:	4630      	mov	r0, r6
 800e64a:	f005 fa81 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e64e:	4020      	ands	r0, r4
 800e650:	b2c0      	uxtb	r0, r0
 800e652:	bd70      	pop	{r4, r5, r6, pc}
 800e654:	6869      	ldr	r1, [r5, #4]
 800e656:	4630      	mov	r0, r6
 800e658:	f005 fb9a 	bl	8013d90 <ucdr_serialize_string>
 800e65c:	4604      	mov	r4, r0
 800e65e:	e7f0      	b.n	800e642 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e660:	4629      	mov	r1, r5
 800e662:	4630      	mov	r0, r6
 800e664:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e668:	3104      	adds	r1, #4
 800e66a:	f005 fb65 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800e66e:	4604      	mov	r4, r0
 800e670:	e7e7      	b.n	800e642 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e672:	bf00      	nop

0800e674 <uxr_serialize_ObjectVariant.part.0>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	780b      	ldrb	r3, [r1, #0]
 800e678:	3b01      	subs	r3, #1
 800e67a:	460c      	mov	r4, r1
 800e67c:	4605      	mov	r5, r0
 800e67e:	2b0d      	cmp	r3, #13
 800e680:	d854      	bhi.n	800e72c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e682:	e8df f003 	tbb	[pc, r3]
 800e686:	0730      	.short	0x0730
 800e688:	07071b1b 	.word	0x07071b1b
 800e68c:	0c530707 	.word	0x0c530707
 800e690:	494e0c0c 	.word	0x494e0c0c
 800e694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e698:	3104      	adds	r1, #4
 800e69a:	f7ff bfc3 	b.w	800e624 <uxr_serialize_DATAWRITER_Representation>
 800e69e:	7909      	ldrb	r1, [r1, #4]
 800e6a0:	f7fc ff18 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e6a4:	b1e8      	cbz	r0, 800e6e2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e6a6:	7923      	ldrb	r3, [r4, #4]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d001      	beq.n	800e6b0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d13d      	bne.n	800e72c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e6b0:	68a1      	ldr	r1, [r4, #8]
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6b8:	f005 bb6a 	b.w	8013d90 <ucdr_serialize_string>
 800e6bc:	7909      	ldrb	r1, [r1, #4]
 800e6be:	f7fc ff09 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	b120      	cbz	r0, 800e6d0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e6c6:	7923      	ldrb	r3, [r4, #4]
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d039      	beq.n	800e740 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e6cc:	2b03      	cmp	r3, #3
 800e6ce:	d02f      	beq.n	800e730 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e6d0:	2202      	movs	r2, #2
 800e6d2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	f005 fa3a 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800e6dc:	4030      	ands	r0, r6
 800e6de:	b2c0      	uxtb	r0, r0
 800e6e0:	bd70      	pop	{r4, r5, r6, pc}
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	bd70      	pop	{r4, r5, r6, pc}
 800e6e6:	7909      	ldrb	r1, [r1, #4]
 800e6e8:	f7fc fef4 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800e6ec:	4606      	mov	r6, r0
 800e6ee:	b158      	cbz	r0, 800e708 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e6f0:	7923      	ldrb	r3, [r4, #4]
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d003      	beq.n	800e6fe <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d028      	beq.n	800e74c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d104      	bne.n	800e708 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e6fe:	68a1      	ldr	r1, [r4, #8]
 800e700:	4628      	mov	r0, r5
 800e702:	f005 fb45 	bl	8013d90 <ucdr_serialize_string>
 800e706:	4606      	mov	r6, r0
 800e708:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800e70c:	4628      	mov	r0, r5
 800e70e:	f7fd fc1d 	bl	800bf4c <ucdr_serialize_int16_t>
 800e712:	4030      	ands	r0, r6
 800e714:	b2c0      	uxtb	r0, r0
 800e716:	bd70      	pop	{r4, r5, r6, pc}
 800e718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e71c:	3104      	adds	r1, #4
 800e71e:	f7ff be7b 	b.w	800e418 <uxr_serialize_CLIENT_Representation>
 800e722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e726:	3104      	adds	r1, #4
 800e728:	f7ff bf32 	b.w	800e590 <uxr_serialize_AGENT_Representation>
 800e72c:	2001      	movs	r0, #1
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
 800e730:	68a2      	ldr	r2, [r4, #8]
 800e732:	f104 010c 	add.w	r1, r4, #12
 800e736:	4628      	mov	r0, r5
 800e738:	f005 fafe 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800e73c:	4606      	mov	r6, r0
 800e73e:	e7c7      	b.n	800e6d0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e740:	68a1      	ldr	r1, [r4, #8]
 800e742:	4628      	mov	r0, r5
 800e744:	f005 fb24 	bl	8013d90 <ucdr_serialize_string>
 800e748:	4606      	mov	r6, r0
 800e74a:	e7c1      	b.n	800e6d0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e74c:	68a2      	ldr	r2, [r4, #8]
 800e74e:	f104 010c 	add.w	r1, r4, #12
 800e752:	4628      	mov	r0, r5
 800e754:	f005 faf0 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800e758:	4606      	mov	r6, r0
 800e75a:	e7d5      	b.n	800e708 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e75c <uxr_deserialize_DATAWRITER_Representation>:
 800e75c:	b570      	push	{r4, r5, r6, lr}
 800e75e:	4606      	mov	r6, r0
 800e760:	460d      	mov	r5, r1
 800e762:	f7fc fecd 	bl	800b500 <ucdr_deserialize_uint8_t>
 800e766:	4604      	mov	r4, r0
 800e768:	b130      	cbz	r0, 800e778 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e76a:	782b      	ldrb	r3, [r5, #0]
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d00c      	beq.n	800e78a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e770:	2b03      	cmp	r3, #3
 800e772:	d012      	beq.n	800e79a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e774:	2b01      	cmp	r3, #1
 800e776:	d008      	beq.n	800e78a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e778:	2202      	movs	r2, #2
 800e77a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e77e:	4630      	mov	r0, r6
 800e780:	f005 fa4a 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800e784:	4020      	ands	r0, r4
 800e786:	b2c0      	uxtb	r0, r0
 800e788:	bd70      	pop	{r4, r5, r6, pc}
 800e78a:	6869      	ldr	r1, [r5, #4]
 800e78c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e790:	4630      	mov	r0, r6
 800e792:	f005 fb0d 	bl	8013db0 <ucdr_deserialize_string>
 800e796:	4604      	mov	r4, r0
 800e798:	e7ee      	b.n	800e778 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e79a:	1d2b      	adds	r3, r5, #4
 800e79c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7a0:	f105 0108 	add.w	r1, r5, #8
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f005 fad9 	bl	8013d5c <ucdr_deserialize_sequence_uint8_t>
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	e7e4      	b.n	800e778 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e7ae:	bf00      	nop

0800e7b0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	460d      	mov	r5, r1
 800e7b4:	7809      	ldrb	r1, [r1, #0]
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	f7fc fe5e 	bl	800b478 <ucdr_serialize_bool>
 800e7bc:	782b      	ldrb	r3, [r5, #0]
 800e7be:	4604      	mov	r4, r0
 800e7c0:	b94b      	cbnz	r3, 800e7d6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e7c2:	7a29      	ldrb	r1, [r5, #8]
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7fc fe57 	bl	800b478 <ucdr_serialize_bool>
 800e7ca:	7a2b      	ldrb	r3, [r5, #8]
 800e7cc:	4004      	ands	r4, r0
 800e7ce:	b2e4      	uxtb	r4, r4
 800e7d0:	b943      	cbnz	r3, 800e7e4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
 800e7d6:	6869      	ldr	r1, [r5, #4]
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f005 fad9 	bl	8013d90 <ucdr_serialize_string>
 800e7de:	4004      	ands	r4, r0
 800e7e0:	b2e4      	uxtb	r4, r4
 800e7e2:	e7ee      	b.n	800e7c2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e7e4:	68e9      	ldr	r1, [r5, #12]
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f005 fad2 	bl	8013d90 <ucdr_serialize_string>
 800e7ec:	4004      	ands	r4, r0
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	bd70      	pop	{r4, r5, r6, pc}
 800e7f2:	bf00      	nop

0800e7f4 <uxr_serialize_OBJK_Topic_Binary>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	460d      	mov	r5, r1
 800e7f8:	6809      	ldr	r1, [r1, #0]
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	f005 fac8 	bl	8013d90 <ucdr_serialize_string>
 800e800:	7929      	ldrb	r1, [r5, #4]
 800e802:	4604      	mov	r4, r0
 800e804:	4630      	mov	r0, r6
 800e806:	f7fc fe37 	bl	800b478 <ucdr_serialize_bool>
 800e80a:	792b      	ldrb	r3, [r5, #4]
 800e80c:	4004      	ands	r4, r0
 800e80e:	b2e4      	uxtb	r4, r4
 800e810:	b943      	cbnz	r3, 800e824 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e812:	7b29      	ldrb	r1, [r5, #12]
 800e814:	4630      	mov	r0, r6
 800e816:	f7fc fe2f 	bl	800b478 <ucdr_serialize_bool>
 800e81a:	7b2b      	ldrb	r3, [r5, #12]
 800e81c:	4004      	ands	r4, r0
 800e81e:	b93b      	cbnz	r3, 800e830 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e820:	4620      	mov	r0, r4
 800e822:	bd70      	pop	{r4, r5, r6, pc}
 800e824:	68a9      	ldr	r1, [r5, #8]
 800e826:	4630      	mov	r0, r6
 800e828:	f005 fab2 	bl	8013d90 <ucdr_serialize_string>
 800e82c:	4004      	ands	r4, r0
 800e82e:	e7f0      	b.n	800e812 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e830:	6929      	ldr	r1, [r5, #16]
 800e832:	4630      	mov	r0, r6
 800e834:	f005 faac 	bl	8013d90 <ucdr_serialize_string>
 800e838:	4004      	ands	r4, r0
 800e83a:	b2e4      	uxtb	r4, r4
 800e83c:	4620      	mov	r0, r4
 800e83e:	bd70      	pop	{r4, r5, r6, pc}

0800e840 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e844:	460c      	mov	r4, r1
 800e846:	7809      	ldrb	r1, [r1, #0]
 800e848:	4606      	mov	r6, r0
 800e84a:	f7fc fe15 	bl	800b478 <ucdr_serialize_bool>
 800e84e:	7823      	ldrb	r3, [r4, #0]
 800e850:	4605      	mov	r5, r0
 800e852:	b96b      	cbnz	r3, 800e870 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e854:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e858:	4630      	mov	r0, r6
 800e85a:	f7fc fe0d 	bl	800b478 <ucdr_serialize_bool>
 800e85e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e862:	4005      	ands	r5, r0
 800e864:	b2ed      	uxtb	r5, r5
 800e866:	2b00      	cmp	r3, #0
 800e868:	d169      	bne.n	800e93e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e86a:	4628      	mov	r0, r5
 800e86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e870:	6861      	ldr	r1, [r4, #4]
 800e872:	4630      	mov	r0, r6
 800e874:	f7fd f844 	bl	800b900 <ucdr_serialize_uint32_t>
 800e878:	6863      	ldr	r3, [r4, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d06b      	beq.n	800e956 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d067      	beq.n	800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e882:	68a1      	ldr	r1, [r4, #8]
 800e884:	4630      	mov	r0, r6
 800e886:	f005 fa83 	bl	8013d90 <ucdr_serialize_string>
 800e88a:	6863      	ldr	r3, [r4, #4]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d953      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e890:	2800      	cmp	r0, #0
 800e892:	d05e      	beq.n	800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e894:	68e1      	ldr	r1, [r4, #12]
 800e896:	4630      	mov	r0, r6
 800e898:	f005 fa7a 	bl	8013d90 <ucdr_serialize_string>
 800e89c:	6863      	ldr	r3, [r4, #4]
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d94a      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d055      	beq.n	800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8a6:	6921      	ldr	r1, [r4, #16]
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f005 fa71 	bl	8013d90 <ucdr_serialize_string>
 800e8ae:	6863      	ldr	r3, [r4, #4]
 800e8b0:	2b03      	cmp	r3, #3
 800e8b2:	d941      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	d04c      	beq.n	800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8b8:	6961      	ldr	r1, [r4, #20]
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f005 fa68 	bl	8013d90 <ucdr_serialize_string>
 800e8c0:	6863      	ldr	r3, [r4, #4]
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	d938      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d043      	beq.n	800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8ca:	69a1      	ldr	r1, [r4, #24]
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f005 fa5f 	bl	8013d90 <ucdr_serialize_string>
 800e8d2:	6863      	ldr	r3, [r4, #4]
 800e8d4:	2b05      	cmp	r3, #5
 800e8d6:	d92f      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	d03a      	beq.n	800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8dc:	69e1      	ldr	r1, [r4, #28]
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f005 fa56 	bl	8013d90 <ucdr_serialize_string>
 800e8e4:	6863      	ldr	r3, [r4, #4]
 800e8e6:	2b06      	cmp	r3, #6
 800e8e8:	d926      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8ea:	b390      	cbz	r0, 800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8ec:	6a21      	ldr	r1, [r4, #32]
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f005 fa4e 	bl	8013d90 <ucdr_serialize_string>
 800e8f4:	6863      	ldr	r3, [r4, #4]
 800e8f6:	2b07      	cmp	r3, #7
 800e8f8:	d91e      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8fa:	b350      	cbz	r0, 800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e8fe:	4630      	mov	r0, r6
 800e900:	f005 fa46 	bl	8013d90 <ucdr_serialize_string>
 800e904:	6863      	ldr	r3, [r4, #4]
 800e906:	2b08      	cmp	r3, #8
 800e908:	d916      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e90a:	b310      	cbz	r0, 800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e90c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e90e:	4630      	mov	r0, r6
 800e910:	f005 fa3e 	bl	8013d90 <ucdr_serialize_string>
 800e914:	6863      	ldr	r3, [r4, #4]
 800e916:	2b09      	cmp	r3, #9
 800e918:	d90e      	bls.n	800e938 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e91a:	b1d0      	cbz	r0, 800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e91c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800e920:	2709      	movs	r7, #9
 800e922:	e000      	b.n	800e926 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e924:	b1a8      	cbz	r0, 800e952 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e926:	f858 1b04 	ldr.w	r1, [r8], #4
 800e92a:	4630      	mov	r0, r6
 800e92c:	f005 fa30 	bl	8013d90 <ucdr_serialize_string>
 800e930:	6862      	ldr	r2, [r4, #4]
 800e932:	3701      	adds	r7, #1
 800e934:	4297      	cmp	r7, r2
 800e936:	d3f5      	bcc.n	800e924 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e938:	4005      	ands	r5, r0
 800e93a:	b2ed      	uxtb	r5, r5
 800e93c:	e78a      	b.n	800e854 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e93e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e940:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e944:	4630      	mov	r0, r6
 800e946:	f005 f9f7 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800e94a:	4005      	ands	r5, r0
 800e94c:	4628      	mov	r0, r5
 800e94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e952:	2500      	movs	r5, #0
 800e954:	e77e      	b.n	800e854 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e956:	4028      	ands	r0, r5
 800e958:	b2c5      	uxtb	r5, r0
 800e95a:	e77b      	b.n	800e854 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e95c <uxr_serialize_OBJK_Publisher_Binary>:
 800e95c:	b570      	push	{r4, r5, r6, lr}
 800e95e:	460d      	mov	r5, r1
 800e960:	7809      	ldrb	r1, [r1, #0]
 800e962:	4606      	mov	r6, r0
 800e964:	f7fc fd88 	bl	800b478 <ucdr_serialize_bool>
 800e968:	782b      	ldrb	r3, [r5, #0]
 800e96a:	4604      	mov	r4, r0
 800e96c:	b94b      	cbnz	r3, 800e982 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e96e:	7a29      	ldrb	r1, [r5, #8]
 800e970:	4630      	mov	r0, r6
 800e972:	f7fc fd81 	bl	800b478 <ucdr_serialize_bool>
 800e976:	7a2b      	ldrb	r3, [r5, #8]
 800e978:	4004      	ands	r4, r0
 800e97a:	b2e4      	uxtb	r4, r4
 800e97c:	b943      	cbnz	r3, 800e990 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e97e:	4620      	mov	r0, r4
 800e980:	bd70      	pop	{r4, r5, r6, pc}
 800e982:	6869      	ldr	r1, [r5, #4]
 800e984:	4630      	mov	r0, r6
 800e986:	f005 fa03 	bl	8013d90 <ucdr_serialize_string>
 800e98a:	4004      	ands	r4, r0
 800e98c:	b2e4      	uxtb	r4, r4
 800e98e:	e7ee      	b.n	800e96e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e990:	f105 010c 	add.w	r1, r5, #12
 800e994:	4630      	mov	r0, r6
 800e996:	f7ff ff53 	bl	800e840 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e99a:	4004      	ands	r4, r0
 800e99c:	4620      	mov	r0, r4
 800e99e:	bd70      	pop	{r4, r5, r6, pc}

0800e9a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	7809      	ldrb	r1, [r1, #0]
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	f7fc fd65 	bl	800b478 <ucdr_serialize_bool>
 800e9ae:	7823      	ldrb	r3, [r4, #0]
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	b96b      	cbnz	r3, 800e9d0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e9b4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f7fc fd5d 	bl	800b478 <ucdr_serialize_bool>
 800e9be:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9c2:	4005      	ands	r5, r0
 800e9c4:	b2ed      	uxtb	r5, r5
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d169      	bne.n	800ea9e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d0:	6861      	ldr	r1, [r4, #4]
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f7fc ff94 	bl	800b900 <ucdr_serialize_uint32_t>
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d06b      	beq.n	800eab6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d067      	beq.n	800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e9e2:	68a1      	ldr	r1, [r4, #8]
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	f005 f9d3 	bl	8013d90 <ucdr_serialize_string>
 800e9ea:	6863      	ldr	r3, [r4, #4]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d953      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d05e      	beq.n	800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e9f4:	68e1      	ldr	r1, [r4, #12]
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f005 f9ca 	bl	8013d90 <ucdr_serialize_string>
 800e9fc:	6863      	ldr	r3, [r4, #4]
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d94a      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d055      	beq.n	800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea06:	6921      	ldr	r1, [r4, #16]
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f005 f9c1 	bl	8013d90 <ucdr_serialize_string>
 800ea0e:	6863      	ldr	r3, [r4, #4]
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d941      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d04c      	beq.n	800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea18:	6961      	ldr	r1, [r4, #20]
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f005 f9b8 	bl	8013d90 <ucdr_serialize_string>
 800ea20:	6863      	ldr	r3, [r4, #4]
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d938      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d043      	beq.n	800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea2a:	69a1      	ldr	r1, [r4, #24]
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f005 f9af 	bl	8013d90 <ucdr_serialize_string>
 800ea32:	6863      	ldr	r3, [r4, #4]
 800ea34:	2b05      	cmp	r3, #5
 800ea36:	d92f      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d03a      	beq.n	800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea3c:	69e1      	ldr	r1, [r4, #28]
 800ea3e:	4630      	mov	r0, r6
 800ea40:	f005 f9a6 	bl	8013d90 <ucdr_serialize_string>
 800ea44:	6863      	ldr	r3, [r4, #4]
 800ea46:	2b06      	cmp	r3, #6
 800ea48:	d926      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea4a:	b390      	cbz	r0, 800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea4c:	6a21      	ldr	r1, [r4, #32]
 800ea4e:	4630      	mov	r0, r6
 800ea50:	f005 f99e 	bl	8013d90 <ucdr_serialize_string>
 800ea54:	6863      	ldr	r3, [r4, #4]
 800ea56:	2b07      	cmp	r3, #7
 800ea58:	d91e      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea5a:	b350      	cbz	r0, 800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f005 f996 	bl	8013d90 <ucdr_serialize_string>
 800ea64:	6863      	ldr	r3, [r4, #4]
 800ea66:	2b08      	cmp	r3, #8
 800ea68:	d916      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea6a:	b310      	cbz	r0, 800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea6c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f005 f98e 	bl	8013d90 <ucdr_serialize_string>
 800ea74:	6863      	ldr	r3, [r4, #4]
 800ea76:	2b09      	cmp	r3, #9
 800ea78:	d90e      	bls.n	800ea98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea7a:	b1d0      	cbz	r0, 800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea7c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800ea80:	2709      	movs	r7, #9
 800ea82:	e000      	b.n	800ea86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800ea84:	b1a8      	cbz	r0, 800eab2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea86:	f858 1b04 	ldr.w	r1, [r8], #4
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f005 f980 	bl	8013d90 <ucdr_serialize_string>
 800ea90:	6862      	ldr	r2, [r4, #4]
 800ea92:	3701      	adds	r7, #1
 800ea94:	4297      	cmp	r7, r2
 800ea96:	d3f5      	bcc.n	800ea84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800ea98:	4005      	ands	r5, r0
 800ea9a:	b2ed      	uxtb	r5, r5
 800ea9c:	e78a      	b.n	800e9b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800ea9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eaa0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	f005 f947 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800eaaa:	4005      	ands	r5, r0
 800eaac:	4628      	mov	r0, r5
 800eaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab2:	2500      	movs	r5, #0
 800eab4:	e77e      	b.n	800e9b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800eab6:	4028      	ands	r0, r5
 800eab8:	b2c5      	uxtb	r5, r0
 800eaba:	e77b      	b.n	800e9b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800eabc <uxr_serialize_OBJK_Subscriber_Binary>:
 800eabc:	b570      	push	{r4, r5, r6, lr}
 800eabe:	460d      	mov	r5, r1
 800eac0:	7809      	ldrb	r1, [r1, #0]
 800eac2:	4606      	mov	r6, r0
 800eac4:	f7fc fcd8 	bl	800b478 <ucdr_serialize_bool>
 800eac8:	782b      	ldrb	r3, [r5, #0]
 800eaca:	4604      	mov	r4, r0
 800eacc:	b94b      	cbnz	r3, 800eae2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800eace:	7a29      	ldrb	r1, [r5, #8]
 800ead0:	4630      	mov	r0, r6
 800ead2:	f7fc fcd1 	bl	800b478 <ucdr_serialize_bool>
 800ead6:	7a2b      	ldrb	r3, [r5, #8]
 800ead8:	4004      	ands	r4, r0
 800eada:	b2e4      	uxtb	r4, r4
 800eadc:	b943      	cbnz	r3, 800eaf0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800eade:	4620      	mov	r0, r4
 800eae0:	bd70      	pop	{r4, r5, r6, pc}
 800eae2:	6869      	ldr	r1, [r5, #4]
 800eae4:	4630      	mov	r0, r6
 800eae6:	f005 f953 	bl	8013d90 <ucdr_serialize_string>
 800eaea:	4004      	ands	r4, r0
 800eaec:	b2e4      	uxtb	r4, r4
 800eaee:	e7ee      	b.n	800eace <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800eaf0:	f105 010c 	add.w	r1, r5, #12
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f7ff ff53 	bl	800e9a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800eafa:	4004      	ands	r4, r0
 800eafc:	4620      	mov	r0, r4
 800eafe:	bd70      	pop	{r4, r5, r6, pc}

0800eb00 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800eb00:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800eb04:	4688      	mov	r8, r1
 800eb06:	8809      	ldrh	r1, [r1, #0]
 800eb08:	4681      	mov	r9, r0
 800eb0a:	f7fc fd0f 	bl	800b52c <ucdr_serialize_uint16_t>
 800eb0e:	f898 1002 	ldrb.w	r1, [r8, #2]
 800eb12:	4606      	mov	r6, r0
 800eb14:	4648      	mov	r0, r9
 800eb16:	f7fc fcaf 	bl	800b478 <ucdr_serialize_bool>
 800eb1a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800eb1e:	4006      	ands	r6, r0
 800eb20:	b2f5      	uxtb	r5, r6
 800eb22:	b9eb      	cbnz	r3, 800eb60 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800eb24:	f898 1006 	ldrb.w	r1, [r8, #6]
 800eb28:	4648      	mov	r0, r9
 800eb2a:	f7fc fca5 	bl	800b478 <ucdr_serialize_bool>
 800eb2e:	f898 3006 	ldrb.w	r3, [r8, #6]
 800eb32:	4005      	ands	r5, r0
 800eb34:	bb7b      	cbnz	r3, 800eb96 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800eb36:	f898 100c 	ldrb.w	r1, [r8, #12]
 800eb3a:	4648      	mov	r0, r9
 800eb3c:	f7fc fc9c 	bl	800b478 <ucdr_serialize_bool>
 800eb40:	f898 300c 	ldrb.w	r3, [r8, #12]
 800eb44:	4005      	ands	r5, r0
 800eb46:	b9f3      	cbnz	r3, 800eb86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800eb48:	f898 1014 	ldrb.w	r1, [r8, #20]
 800eb4c:	4648      	mov	r0, r9
 800eb4e:	f7fc fc93 	bl	800b478 <ucdr_serialize_bool>
 800eb52:	f898 3014 	ldrb.w	r3, [r8, #20]
 800eb56:	4005      	ands	r5, r0
 800eb58:	b94b      	cbnz	r3, 800eb6e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eb60:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800eb64:	4648      	mov	r0, r9
 800eb66:	f7fc fce1 	bl	800b52c <ucdr_serialize_uint16_t>
 800eb6a:	4005      	ands	r5, r0
 800eb6c:	e7da      	b.n	800eb24 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800eb6e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800eb72:	f108 011c 	add.w	r1, r8, #28
 800eb76:	4648      	mov	r0, r9
 800eb78:	f005 f8de 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800eb7c:	4028      	ands	r0, r5
 800eb7e:	b2c5      	uxtb	r5, r0
 800eb80:	4628      	mov	r0, r5
 800eb82:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eb86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f7fc feb8 	bl	800b900 <ucdr_serialize_uint32_t>
 800eb90:	4028      	ands	r0, r5
 800eb92:	b2c5      	uxtb	r5, r0
 800eb94:	e7d8      	b.n	800eb48 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800eb96:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800eb9a:	4648      	mov	r0, r9
 800eb9c:	f7fc feb0 	bl	800b900 <ucdr_serialize_uint32_t>
 800eba0:	4028      	ands	r0, r5
 800eba2:	b2c5      	uxtb	r5, r0
 800eba4:	e7c7      	b.n	800eb36 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800eba6:	bf00      	nop

0800eba8 <uxr_serialize_OBJK_DataReader_Binary>:
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	2202      	movs	r2, #2
 800ebac:	460c      	mov	r4, r1
 800ebae:	4606      	mov	r6, r0
 800ebb0:	f004 ffce 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800ebb4:	78a1      	ldrb	r1, [r4, #2]
 800ebb6:	4605      	mov	r5, r0
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f7fc fc5d 	bl	800b478 <ucdr_serialize_bool>
 800ebbe:	78a3      	ldrb	r3, [r4, #2]
 800ebc0:	4005      	ands	r5, r0
 800ebc2:	b2ed      	uxtb	r5, r5
 800ebc4:	b90b      	cbnz	r3, 800ebca <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebca:	f104 0108 	add.w	r1, r4, #8
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7ff ff96 	bl	800eb00 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ebd4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ebd8:	4607      	mov	r7, r0
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f7fc fc4c 	bl	800b478 <ucdr_serialize_bool>
 800ebe0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ebe4:	4038      	ands	r0, r7
 800ebe6:	b2c7      	uxtb	r7, r0
 800ebe8:	b95b      	cbnz	r3, 800ec02 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800ebea:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f7fc fc42 	bl	800b478 <ucdr_serialize_bool>
 800ebf4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ebf8:	4007      	ands	r7, r0
 800ebfa:	b94b      	cbnz	r3, 800ec10 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800ebfc:	403d      	ands	r5, r7
 800ebfe:	4628      	mov	r0, r5
 800ec00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec02:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800ec06:	4630      	mov	r0, r6
 800ec08:	f7fd f8d0 	bl	800bdac <ucdr_serialize_uint64_t>
 800ec0c:	4007      	ands	r7, r0
 800ec0e:	e7ec      	b.n	800ebea <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800ec10:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ec12:	4630      	mov	r0, r6
 800ec14:	f005 f8bc 	bl	8013d90 <ucdr_serialize_string>
 800ec18:	4007      	ands	r7, r0
 800ec1a:	b2ff      	uxtb	r7, r7
 800ec1c:	e7ee      	b.n	800ebfc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800ec1e:	bf00      	nop

0800ec20 <uxr_serialize_OBJK_DataWriter_Binary>:
 800ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec22:	2202      	movs	r2, #2
 800ec24:	460d      	mov	r5, r1
 800ec26:	4606      	mov	r6, r0
 800ec28:	f004 ff92 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800ec2c:	78a9      	ldrb	r1, [r5, #2]
 800ec2e:	4604      	mov	r4, r0
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7fc fc21 	bl	800b478 <ucdr_serialize_bool>
 800ec36:	78ab      	ldrb	r3, [r5, #2]
 800ec38:	4004      	ands	r4, r0
 800ec3a:	b2e4      	uxtb	r4, r4
 800ec3c:	b90b      	cbnz	r3, 800ec42 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ec3e:	4620      	mov	r0, r4
 800ec40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec42:	f105 0108 	add.w	r1, r5, #8
 800ec46:	4630      	mov	r0, r6
 800ec48:	f7ff ff5a 	bl	800eb00 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ec4c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ec50:	4607      	mov	r7, r0
 800ec52:	4630      	mov	r0, r6
 800ec54:	f7fc fc10 	bl	800b478 <ucdr_serialize_bool>
 800ec58:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ec5c:	4038      	ands	r0, r7
 800ec5e:	b2c7      	uxtb	r7, r0
 800ec60:	b913      	cbnz	r3, 800ec68 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ec62:	403c      	ands	r4, r7
 800ec64:	4620      	mov	r0, r4
 800ec66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec68:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f7fd f89d 	bl	800bdac <ucdr_serialize_uint64_t>
 800ec72:	4007      	ands	r7, r0
 800ec74:	e7f5      	b.n	800ec62 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ec76:	bf00      	nop

0800ec78 <uxr_deserialize_ObjectVariant>:
 800ec78:	b570      	push	{r4, r5, r6, lr}
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	f7fc fc3f 	bl	800b500 <ucdr_deserialize_uint8_t>
 800ec82:	b168      	cbz	r0, 800eca0 <uxr_deserialize_ObjectVariant+0x28>
 800ec84:	7833      	ldrb	r3, [r6, #0]
 800ec86:	3b01      	subs	r3, #1
 800ec88:	4604      	mov	r4, r0
 800ec8a:	2b0d      	cmp	r3, #13
 800ec8c:	d809      	bhi.n	800eca2 <uxr_deserialize_ObjectVariant+0x2a>
 800ec8e:	e8df f003 	tbb	[pc, r3]
 800ec92:	0a41      	.short	0x0a41
 800ec94:	0a0a2323 	.word	0x0a0a2323
 800ec98:	10080a0a 	.word	0x10080a0a
 800ec9c:	565c1010 	.word	0x565c1010
 800eca0:	2400      	movs	r4, #0
 800eca2:	4620      	mov	r0, r4
 800eca4:	bd70      	pop	{r4, r5, r6, pc}
 800eca6:	1d31      	adds	r1, r6, #4
 800eca8:	4628      	mov	r0, r5
 800ecaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecae:	f7ff bd55 	b.w	800e75c <uxr_deserialize_DATAWRITER_Representation>
 800ecb2:	1d31      	adds	r1, r6, #4
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	f7fc fc23 	bl	800b500 <ucdr_deserialize_uint8_t>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d0f0      	beq.n	800eca0 <uxr_deserialize_ObjectVariant+0x28>
 800ecbe:	7933      	ldrb	r3, [r6, #4]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d001      	beq.n	800ecc8 <uxr_deserialize_ObjectVariant+0x50>
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d1ec      	bne.n	800eca2 <uxr_deserialize_ObjectVariant+0x2a>
 800ecc8:	68b1      	ldr	r1, [r6, #8]
 800ecca:	4628      	mov	r0, r5
 800eccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecd4:	f005 b86c 	b.w	8013db0 <ucdr_deserialize_string>
 800ecd8:	1d31      	adds	r1, r6, #4
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f7fc fc10 	bl	800b500 <ucdr_deserialize_uint8_t>
 800ece0:	4604      	mov	r4, r0
 800ece2:	b170      	cbz	r0, 800ed02 <uxr_deserialize_ObjectVariant+0x8a>
 800ece4:	7933      	ldrb	r3, [r6, #4]
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d04c      	beq.n	800ed84 <uxr_deserialize_ObjectVariant+0x10c>
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d109      	bne.n	800ed02 <uxr_deserialize_ObjectVariant+0x8a>
 800ecee:	f106 0308 	add.w	r3, r6, #8
 800ecf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecf6:	f106 010c 	add.w	r1, r6, #12
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f005 f82e 	bl	8013d5c <ucdr_deserialize_sequence_uint8_t>
 800ed00:	4604      	mov	r4, r0
 800ed02:	2202      	movs	r2, #2
 800ed04:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f004 ff85 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800ed0e:	4020      	ands	r0, r4
 800ed10:	b2c4      	uxtb	r4, r0
 800ed12:	e7c6      	b.n	800eca2 <uxr_deserialize_ObjectVariant+0x2a>
 800ed14:	1d31      	adds	r1, r6, #4
 800ed16:	4628      	mov	r0, r5
 800ed18:	f7fc fbf2 	bl	800b500 <ucdr_deserialize_uint8_t>
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	b130      	cbz	r0, 800ed2e <uxr_deserialize_ObjectVariant+0xb6>
 800ed20:	7933      	ldrb	r3, [r6, #4]
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d036      	beq.n	800ed94 <uxr_deserialize_ObjectVariant+0x11c>
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d03c      	beq.n	800eda4 <uxr_deserialize_ObjectVariant+0x12c>
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d032      	beq.n	800ed94 <uxr_deserialize_ObjectVariant+0x11c>
 800ed2e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ed32:	4628      	mov	r0, r5
 800ed34:	f7fd f98a 	bl	800c04c <ucdr_deserialize_int16_t>
 800ed38:	4020      	ands	r0, r4
 800ed3a:	b2c4      	uxtb	r4, r0
 800ed3c:	e7b1      	b.n	800eca2 <uxr_deserialize_ObjectVariant+0x2a>
 800ed3e:	1d31      	adds	r1, r6, #4
 800ed40:	4628      	mov	r0, r5
 800ed42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed46:	f7ff bbbf 	b.w	800e4c8 <uxr_deserialize_CLIENT_Representation>
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	18b1      	adds	r1, r6, r2
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f004 ff62 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800ed54:	2202      	movs	r2, #2
 800ed56:	f106 0108 	add.w	r1, r6, #8
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f004 ff5b 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800ed62:	2202      	movs	r2, #2
 800ed64:	4004      	ands	r4, r0
 800ed66:	f106 010a 	add.w	r1, r6, #10
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f004 ff54 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800ed70:	b2e4      	uxtb	r4, r4
 800ed72:	4603      	mov	r3, r0
 800ed74:	f106 010c 	add.w	r1, r6, #12
 800ed78:	4628      	mov	r0, r5
 800ed7a:	401c      	ands	r4, r3
 800ed7c:	f7fc fb92 	bl	800b4a4 <ucdr_deserialize_bool>
 800ed80:	4004      	ands	r4, r0
 800ed82:	e78e      	b.n	800eca2 <uxr_deserialize_ObjectVariant+0x2a>
 800ed84:	68b1      	ldr	r1, [r6, #8]
 800ed86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f005 f810 	bl	8013db0 <ucdr_deserialize_string>
 800ed90:	4604      	mov	r4, r0
 800ed92:	e7b6      	b.n	800ed02 <uxr_deserialize_ObjectVariant+0x8a>
 800ed94:	68b1      	ldr	r1, [r6, #8]
 800ed96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f005 f808 	bl	8013db0 <ucdr_deserialize_string>
 800eda0:	4604      	mov	r4, r0
 800eda2:	e7c4      	b.n	800ed2e <uxr_deserialize_ObjectVariant+0xb6>
 800eda4:	f106 0308 	add.w	r3, r6, #8
 800eda8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edac:	f106 010c 	add.w	r1, r6, #12
 800edb0:	4628      	mov	r0, r5
 800edb2:	f004 ffd3 	bl	8013d5c <ucdr_deserialize_sequence_uint8_t>
 800edb6:	4604      	mov	r4, r0
 800edb8:	e7b9      	b.n	800ed2e <uxr_deserialize_ObjectVariant+0xb6>
 800edba:	bf00      	nop

0800edbc <uxr_deserialize_BaseObjectRequest>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	2202      	movs	r2, #2
 800edc0:	4605      	mov	r5, r0
 800edc2:	460e      	mov	r6, r1
 800edc4:	f004 ff28 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800edc8:	2202      	movs	r2, #2
 800edca:	4604      	mov	r4, r0
 800edcc:	18b1      	adds	r1, r6, r2
 800edce:	4628      	mov	r0, r5
 800edd0:	f004 ff22 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800edd4:	4020      	ands	r0, r4
 800edd6:	b2c0      	uxtb	r0, r0
 800edd8:	bd70      	pop	{r4, r5, r6, pc}
 800edda:	bf00      	nop

0800eddc <uxr_serialize_ActivityInfoVariant>:
 800eddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede0:	460d      	mov	r5, r1
 800ede2:	7809      	ldrb	r1, [r1, #0]
 800ede4:	4607      	mov	r7, r0
 800ede6:	f7fc fb75 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800edea:	4681      	mov	r9, r0
 800edec:	b138      	cbz	r0, 800edfe <uxr_serialize_ActivityInfoVariant+0x22>
 800edee:	782b      	ldrb	r3, [r5, #0]
 800edf0:	2b06      	cmp	r3, #6
 800edf2:	f000 8082 	beq.w	800eefa <uxr_serialize_ActivityInfoVariant+0x11e>
 800edf6:	2b0d      	cmp	r3, #13
 800edf8:	d016      	beq.n	800ee28 <uxr_serialize_ActivityInfoVariant+0x4c>
 800edfa:	2b05      	cmp	r3, #5
 800edfc:	d002      	beq.n	800ee04 <uxr_serialize_ActivityInfoVariant+0x28>
 800edfe:	4648      	mov	r0, r9
 800ee00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee04:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ee08:	4638      	mov	r0, r7
 800ee0a:	f7fd f89f 	bl	800bf4c <ucdr_serialize_int16_t>
 800ee0e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ee12:	4681      	mov	r9, r0
 800ee14:	4638      	mov	r0, r7
 800ee16:	f7fc ffc9 	bl	800bdac <ucdr_serialize_uint64_t>
 800ee1a:	ea09 0000 	and.w	r0, r9, r0
 800ee1e:	fa5f f980 	uxtb.w	r9, r0
 800ee22:	4648      	mov	r0, r9
 800ee24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee28:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	f7fd f88d 	bl	800bf4c <ucdr_serialize_int16_t>
 800ee32:	68e9      	ldr	r1, [r5, #12]
 800ee34:	4681      	mov	r9, r0
 800ee36:	4638      	mov	r0, r7
 800ee38:	f7fc fd62 	bl	800b900 <ucdr_serialize_uint32_t>
 800ee3c:	68eb      	ldr	r3, [r5, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d0eb      	beq.n	800ee1a <uxr_serialize_ActivityInfoVariant+0x3e>
 800ee42:	b320      	cbz	r0, 800ee8e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ee44:	f105 080c 	add.w	r8, r5, #12
 800ee48:	2600      	movs	r6, #0
 800ee4a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ee4e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ee52:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ee56:	4638      	mov	r0, r7
 800ee58:	f7fc fb3c 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d053      	beq.n	800ef08 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ee60:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ee64:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ee68:	0074      	lsls	r4, r6, #1
 800ee6a:	00c9      	lsls	r1, r1, #3
 800ee6c:	2b03      	cmp	r3, #3
 800ee6e:	d854      	bhi.n	800ef1a <uxr_serialize_ActivityInfoVariant+0x13e>
 800ee70:	e8df f003 	tbb	[pc, r3]
 800ee74:	02102132 	.word	0x02102132
 800ee78:	4441      	add	r1, r8
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	6889      	ldr	r1, [r1, #8]
 800ee7e:	f004 ff87 	bl	8013d90 <ucdr_serialize_string>
 800ee82:	68ea      	ldr	r2, [r5, #12]
 800ee84:	3601      	adds	r6, #1
 800ee86:	4296      	cmp	r6, r2
 800ee88:	d242      	bcs.n	800ef10 <uxr_serialize_ActivityInfoVariant+0x134>
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d1dd      	bne.n	800ee4a <uxr_serialize_ActivityInfoVariant+0x6e>
 800ee8e:	f04f 0900 	mov.w	r9, #0
 800ee92:	e7b4      	b.n	800edfe <uxr_serialize_ActivityInfoVariant+0x22>
 800ee94:	3108      	adds	r1, #8
 800ee96:	4441      	add	r1, r8
 800ee98:	2210      	movs	r2, #16
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f004 fe58 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800eea0:	4434      	add	r4, r6
 800eea2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eea6:	4604      	mov	r4, r0
 800eea8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800eeaa:	4638      	mov	r0, r7
 800eeac:	f7fc fd28 	bl	800b900 <ucdr_serialize_uint32_t>
 800eeb0:	4020      	ands	r0, r4
 800eeb2:	b2c0      	uxtb	r0, r0
 800eeb4:	e7e5      	b.n	800ee82 <uxr_serialize_ActivityInfoVariant+0xa6>
 800eeb6:	3108      	adds	r1, #8
 800eeb8:	4441      	add	r1, r8
 800eeba:	2204      	movs	r2, #4
 800eebc:	4638      	mov	r0, r7
 800eebe:	f004 fe47 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800eec2:	4434      	add	r4, r6
 800eec4:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eec8:	4604      	mov	r4, r0
 800eeca:	8b19      	ldrh	r1, [r3, #24]
 800eecc:	4638      	mov	r0, r7
 800eece:	f7fc fb2d 	bl	800b52c <ucdr_serialize_uint16_t>
 800eed2:	4020      	ands	r0, r4
 800eed4:	b2c0      	uxtb	r0, r0
 800eed6:	e7d4      	b.n	800ee82 <uxr_serialize_ActivityInfoVariant+0xa6>
 800eed8:	3108      	adds	r1, #8
 800eeda:	4441      	add	r1, r8
 800eedc:	2202      	movs	r2, #2
 800eede:	4638      	mov	r0, r7
 800eee0:	f004 fe36 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800eee4:	4434      	add	r4, r6
 800eee6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eeea:	4604      	mov	r4, r0
 800eeec:	7d99      	ldrb	r1, [r3, #22]
 800eeee:	4638      	mov	r0, r7
 800eef0:	f7fc faf0 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800eef4:	4020      	ands	r0, r4
 800eef6:	b2c0      	uxtb	r0, r0
 800eef8:	e7c3      	b.n	800ee82 <uxr_serialize_ActivityInfoVariant+0xa6>
 800eefa:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800eefe:	4638      	mov	r0, r7
 800ef00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	f7fd b822 	b.w	800bf4c <ucdr_serialize_int16_t>
 800ef08:	68ea      	ldr	r2, [r5, #12]
 800ef0a:	3601      	adds	r6, #1
 800ef0c:	42b2      	cmp	r2, r6
 800ef0e:	d8be      	bhi.n	800ee8e <uxr_serialize_ActivityInfoVariant+0xb2>
 800ef10:	ea09 0900 	and.w	r9, r9, r0
 800ef14:	fa5f f989 	uxtb.w	r9, r9
 800ef18:	e771      	b.n	800edfe <uxr_serialize_ActivityInfoVariant+0x22>
 800ef1a:	68eb      	ldr	r3, [r5, #12]
 800ef1c:	3601      	adds	r6, #1
 800ef1e:	429e      	cmp	r6, r3
 800ef20:	f10a 0a18 	add.w	sl, sl, #24
 800ef24:	d395      	bcc.n	800ee52 <uxr_serialize_ActivityInfoVariant+0x76>
 800ef26:	e76a      	b.n	800edfe <uxr_serialize_ActivityInfoVariant+0x22>

0800ef28 <uxr_deserialize_BaseObjectReply>:
 800ef28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	4606      	mov	r6, r0
 800ef30:	460f      	mov	r7, r1
 800ef32:	f004 fe71 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800ef36:	2202      	movs	r2, #2
 800ef38:	18b9      	adds	r1, r7, r2
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f004 fe6b 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800ef42:	1d39      	adds	r1, r7, #4
 800ef44:	4680      	mov	r8, r0
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7fc fada 	bl	800b500 <ucdr_deserialize_uint8_t>
 800ef4c:	1d79      	adds	r1, r7, #5
 800ef4e:	4604      	mov	r4, r0
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7fc fad5 	bl	800b500 <ucdr_deserialize_uint8_t>
 800ef56:	ea05 0508 	and.w	r5, r5, r8
 800ef5a:	402c      	ands	r4, r5
 800ef5c:	4020      	ands	r0, r4
 800ef5e:	b2c0      	uxtb	r0, r0
 800ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef64 <uxr_serialize_ReadSpecification>:
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef68:	460e      	mov	r6, r1
 800ef6a:	7809      	ldrb	r1, [r1, #0]
 800ef6c:	4607      	mov	r7, r0
 800ef6e:	f7fc fab1 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800ef72:	7871      	ldrb	r1, [r6, #1]
 800ef74:	4604      	mov	r4, r0
 800ef76:	4638      	mov	r0, r7
 800ef78:	f7fc faac 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800ef7c:	78b1      	ldrb	r1, [r6, #2]
 800ef7e:	4004      	ands	r4, r0
 800ef80:	4638      	mov	r0, r7
 800ef82:	f7fc fa79 	bl	800b478 <ucdr_serialize_bool>
 800ef86:	78b3      	ldrb	r3, [r6, #2]
 800ef88:	b2e4      	uxtb	r4, r4
 800ef8a:	4004      	ands	r4, r0
 800ef8c:	b94b      	cbnz	r3, 800efa2 <uxr_serialize_ReadSpecification+0x3e>
 800ef8e:	7a31      	ldrb	r1, [r6, #8]
 800ef90:	4638      	mov	r0, r7
 800ef92:	f7fc fa71 	bl	800b478 <ucdr_serialize_bool>
 800ef96:	7a33      	ldrb	r3, [r6, #8]
 800ef98:	4004      	ands	r4, r0
 800ef9a:	b943      	cbnz	r3, 800efae <uxr_serialize_ReadSpecification+0x4a>
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa2:	6871      	ldr	r1, [r6, #4]
 800efa4:	4638      	mov	r0, r7
 800efa6:	f004 fef3 	bl	8013d90 <ucdr_serialize_string>
 800efaa:	4004      	ands	r4, r0
 800efac:	e7ef      	b.n	800ef8e <uxr_serialize_ReadSpecification+0x2a>
 800efae:	8971      	ldrh	r1, [r6, #10]
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7fc fabb 	bl	800b52c <ucdr_serialize_uint16_t>
 800efb6:	89b1      	ldrh	r1, [r6, #12]
 800efb8:	4605      	mov	r5, r0
 800efba:	4638      	mov	r0, r7
 800efbc:	f7fc fab6 	bl	800b52c <ucdr_serialize_uint16_t>
 800efc0:	89f1      	ldrh	r1, [r6, #14]
 800efc2:	4005      	ands	r5, r0
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7fc fab1 	bl	800b52c <ucdr_serialize_uint16_t>
 800efca:	8a31      	ldrh	r1, [r6, #16]
 800efcc:	4680      	mov	r8, r0
 800efce:	4638      	mov	r0, r7
 800efd0:	f7fc faac 	bl	800b52c <ucdr_serialize_uint16_t>
 800efd4:	b2ed      	uxtb	r5, r5
 800efd6:	4025      	ands	r5, r4
 800efd8:	ea08 0505 	and.w	r5, r8, r5
 800efdc:	ea00 0405 	and.w	r4, r0, r5
 800efe0:	4620      	mov	r0, r4
 800efe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe6:	bf00      	nop

0800efe8 <uxr_serialize_CREATE_CLIENT_Payload>:
 800efe8:	f7ff ba16 	b.w	800e418 <uxr_serialize_CLIENT_Representation>

0800efec <uxr_serialize_CREATE_Payload>:
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efee:	2202      	movs	r2, #2
 800eff0:	4607      	mov	r7, r0
 800eff2:	460e      	mov	r6, r1
 800eff4:	f004 fdac 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800eff8:	2202      	movs	r2, #2
 800effa:	18b1      	adds	r1, r6, r2
 800effc:	4605      	mov	r5, r0
 800effe:	4638      	mov	r0, r7
 800f000:	f004 fda6 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f004:	7931      	ldrb	r1, [r6, #4]
 800f006:	4604      	mov	r4, r0
 800f008:	4638      	mov	r0, r7
 800f00a:	f7fc fa63 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f00e:	b170      	cbz	r0, 800f02e <uxr_serialize_CREATE_Payload+0x42>
 800f010:	7933      	ldrb	r3, [r6, #4]
 800f012:	402c      	ands	r4, r5
 800f014:	3b01      	subs	r3, #1
 800f016:	b2e4      	uxtb	r4, r4
 800f018:	2b0d      	cmp	r3, #13
 800f01a:	d809      	bhi.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f01c:	e8df f003 	tbb	[pc, r3]
 800f020:	23230a4c 	.word	0x23230a4c
 800f024:	0a0a0a0a 	.word	0x0a0a0a0a
 800f028:	12121208 	.word	0x12121208
 800f02c:	3e45      	.short	0x3e45
 800f02e:	2400      	movs	r4, #0
 800f030:	4620      	mov	r0, r4
 800f032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f034:	f106 0108 	add.w	r1, r6, #8
 800f038:	4638      	mov	r0, r7
 800f03a:	f7ff faf3 	bl	800e624 <uxr_serialize_DATAWRITER_Representation>
 800f03e:	4004      	ands	r4, r0
 800f040:	4620      	mov	r0, r4
 800f042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f044:	7a31      	ldrb	r1, [r6, #8]
 800f046:	4638      	mov	r0, r7
 800f048:	f7fc fa44 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d0ee      	beq.n	800f02e <uxr_serialize_CREATE_Payload+0x42>
 800f050:	7a33      	ldrb	r3, [r6, #8]
 800f052:	2b01      	cmp	r3, #1
 800f054:	d001      	beq.n	800f05a <uxr_serialize_CREATE_Payload+0x6e>
 800f056:	2b02      	cmp	r3, #2
 800f058:	d1ea      	bne.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f05a:	68f1      	ldr	r1, [r6, #12]
 800f05c:	4638      	mov	r0, r7
 800f05e:	f004 fe97 	bl	8013d90 <ucdr_serialize_string>
 800f062:	4004      	ands	r4, r0
 800f064:	e7e4      	b.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f066:	7a31      	ldrb	r1, [r6, #8]
 800f068:	4638      	mov	r0, r7
 800f06a:	f7fc fa33 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f06e:	4605      	mov	r5, r0
 800f070:	b158      	cbz	r0, 800f08a <uxr_serialize_CREATE_Payload+0x9e>
 800f072:	7a33      	ldrb	r3, [r6, #8]
 800f074:	2b02      	cmp	r3, #2
 800f076:	d034      	beq.n	800f0e2 <uxr_serialize_CREATE_Payload+0xf6>
 800f078:	2b03      	cmp	r3, #3
 800f07a:	d106      	bne.n	800f08a <uxr_serialize_CREATE_Payload+0x9e>
 800f07c:	68f2      	ldr	r2, [r6, #12]
 800f07e:	f106 0110 	add.w	r1, r6, #16
 800f082:	4638      	mov	r0, r7
 800f084:	f004 fe58 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800f088:	4605      	mov	r5, r0
 800f08a:	2202      	movs	r2, #2
 800f08c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f090:	4638      	mov	r0, r7
 800f092:	f004 fd5d 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f096:	4028      	ands	r0, r5
 800f098:	4004      	ands	r4, r0
 800f09a:	e7c9      	b.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f09c:	f106 0108 	add.w	r1, r6, #8
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f7ff f9b9 	bl	800e418 <uxr_serialize_CLIENT_Representation>
 800f0a6:	4004      	ands	r4, r0
 800f0a8:	e7c2      	b.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f0aa:	f106 0108 	add.w	r1, r6, #8
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	f7ff fa6e 	bl	800e590 <uxr_serialize_AGENT_Representation>
 800f0b4:	4004      	ands	r4, r0
 800f0b6:	e7bb      	b.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f0b8:	7a31      	ldrb	r1, [r6, #8]
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	f7fc fa0a 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	b130      	cbz	r0, 800f0d2 <uxr_serialize_CREATE_Payload+0xe6>
 800f0c4:	7a33      	ldrb	r3, [r6, #8]
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d011      	beq.n	800f0ee <uxr_serialize_CREATE_Payload+0x102>
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d015      	beq.n	800f0fa <uxr_serialize_CREATE_Payload+0x10e>
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d00d      	beq.n	800f0ee <uxr_serialize_CREATE_Payload+0x102>
 800f0d2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f7fc ff38 	bl	800bf4c <ucdr_serialize_int16_t>
 800f0dc:	4028      	ands	r0, r5
 800f0de:	4004      	ands	r4, r0
 800f0e0:	e7a6      	b.n	800f030 <uxr_serialize_CREATE_Payload+0x44>
 800f0e2:	68f1      	ldr	r1, [r6, #12]
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	f004 fe53 	bl	8013d90 <ucdr_serialize_string>
 800f0ea:	4605      	mov	r5, r0
 800f0ec:	e7cd      	b.n	800f08a <uxr_serialize_CREATE_Payload+0x9e>
 800f0ee:	68f1      	ldr	r1, [r6, #12]
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f004 fe4d 	bl	8013d90 <ucdr_serialize_string>
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	e7eb      	b.n	800f0d2 <uxr_serialize_CREATE_Payload+0xe6>
 800f0fa:	68f2      	ldr	r2, [r6, #12]
 800f0fc:	f106 0110 	add.w	r1, r6, #16
 800f100:	4638      	mov	r0, r7
 800f102:	f004 fe19 	bl	8013d38 <ucdr_serialize_sequence_uint8_t>
 800f106:	4605      	mov	r5, r0
 800f108:	e7e3      	b.n	800f0d2 <uxr_serialize_CREATE_Payload+0xe6>
 800f10a:	bf00      	nop

0800f10c <uxr_deserialize_GET_INFO_Payload>:
 800f10c:	b570      	push	{r4, r5, r6, lr}
 800f10e:	2202      	movs	r2, #2
 800f110:	4605      	mov	r5, r0
 800f112:	460e      	mov	r6, r1
 800f114:	f004 fd80 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f118:	2202      	movs	r2, #2
 800f11a:	18b1      	adds	r1, r6, r2
 800f11c:	4604      	mov	r4, r0
 800f11e:	4628      	mov	r0, r5
 800f120:	f004 fd7a 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f124:	1d31      	adds	r1, r6, #4
 800f126:	4004      	ands	r4, r0
 800f128:	4628      	mov	r0, r5
 800f12a:	f7fc fd19 	bl	800bb60 <ucdr_deserialize_uint32_t>
 800f12e:	b2e4      	uxtb	r4, r4
 800f130:	4020      	ands	r0, r4
 800f132:	bd70      	pop	{r4, r5, r6, pc}

0800f134 <uxr_serialize_DELETE_Payload>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	2202      	movs	r2, #2
 800f138:	4605      	mov	r5, r0
 800f13a:	460e      	mov	r6, r1
 800f13c:	f004 fd08 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f140:	2202      	movs	r2, #2
 800f142:	4604      	mov	r4, r0
 800f144:	18b1      	adds	r1, r6, r2
 800f146:	4628      	mov	r0, r5
 800f148:	f004 fd02 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f14c:	4020      	ands	r0, r4
 800f14e:	b2c0      	uxtb	r0, r0
 800f150:	bd70      	pop	{r4, r5, r6, pc}
 800f152:	bf00      	nop

0800f154 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f158:	4605      	mov	r5, r0
 800f15a:	460e      	mov	r6, r1
 800f15c:	f7fc f9d0 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f160:	1c71      	adds	r1, r6, #1
 800f162:	4604      	mov	r4, r0
 800f164:	4628      	mov	r0, r5
 800f166:	f7fc f9cb 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f16a:	2204      	movs	r2, #4
 800f16c:	18b1      	adds	r1, r6, r2
 800f16e:	4680      	mov	r8, r0
 800f170:	4628      	mov	r0, r5
 800f172:	f004 fd51 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f176:	f106 0108 	add.w	r1, r6, #8
 800f17a:	4607      	mov	r7, r0
 800f17c:	2202      	movs	r2, #2
 800f17e:	4628      	mov	r0, r5
 800f180:	f004 fd4a 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f184:	ea04 0308 	and.w	r3, r4, r8
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	ea03 0407 	and.w	r4, r3, r7
 800f18e:	2202      	movs	r2, #2
 800f190:	4607      	mov	r7, r0
 800f192:	f106 010a 	add.w	r1, r6, #10
 800f196:	4628      	mov	r0, r5
 800f198:	f004 fd3e 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f19c:	f106 010c 	add.w	r1, r6, #12
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	461d      	mov	r5, r3
 800f1a6:	f7fc f97d 	bl	800b4a4 <ucdr_deserialize_bool>
 800f1aa:	403c      	ands	r4, r7
 800f1ac:	4025      	ands	r5, r4
 800f1ae:	4028      	ands	r0, r5
 800f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1b4 <uxr_deserialize_STATUS_Payload>:
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	f004 fd2b 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	18b9      	adds	r1, r7, r2
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f004 fd25 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f1ce:	1d39      	adds	r1, r7, #4
 800f1d0:	4680      	mov	r8, r0
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7fc f994 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f1d8:	1d79      	adds	r1, r7, #5
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7fc f98f 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f1e2:	ea05 0508 	and.w	r5, r5, r8
 800f1e6:	402c      	ands	r4, r5
 800f1e8:	4020      	ands	r0, r4
 800f1ea:	b2c0      	uxtb	r0, r0
 800f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1f0 <uxr_serialize_INFO_Payload>:
 800f1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	f004 fca9 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f1fe:	2202      	movs	r2, #2
 800f200:	18a1      	adds	r1, r4, r2
 800f202:	4680      	mov	r8, r0
 800f204:	4628      	mov	r0, r5
 800f206:	f004 fca3 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f20a:	7921      	ldrb	r1, [r4, #4]
 800f20c:	4607      	mov	r7, r0
 800f20e:	4628      	mov	r0, r5
 800f210:	f7fc f960 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f214:	7961      	ldrb	r1, [r4, #5]
 800f216:	4606      	mov	r6, r0
 800f218:	4628      	mov	r0, r5
 800f21a:	f7fc f95b 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f21e:	ea08 0807 	and.w	r8, r8, r7
 800f222:	ea06 0608 	and.w	r6, r6, r8
 800f226:	4006      	ands	r6, r0
 800f228:	7a21      	ldrb	r1, [r4, #8]
 800f22a:	4628      	mov	r0, r5
 800f22c:	f7fc f924 	bl	800b478 <ucdr_serialize_bool>
 800f230:	7a23      	ldrb	r3, [r4, #8]
 800f232:	b2f7      	uxtb	r7, r6
 800f234:	4606      	mov	r6, r0
 800f236:	b96b      	cbnz	r3, 800f254 <uxr_serialize_INFO_Payload+0x64>
 800f238:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f23c:	4628      	mov	r0, r5
 800f23e:	f7fc f91b 	bl	800b478 <ucdr_serialize_bool>
 800f242:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f246:	4030      	ands	r0, r6
 800f248:	b2c6      	uxtb	r6, r0
 800f24a:	b983      	cbnz	r3, 800f26e <uxr_serialize_INFO_Payload+0x7e>
 800f24c:	ea06 0007 	and.w	r0, r6, r7
 800f250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f254:	7b21      	ldrb	r1, [r4, #12]
 800f256:	4628      	mov	r0, r5
 800f258:	f7fc f93c 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f25c:	b188      	cbz	r0, 800f282 <uxr_serialize_INFO_Payload+0x92>
 800f25e:	f104 010c 	add.w	r1, r4, #12
 800f262:	4628      	mov	r0, r5
 800f264:	f7ff fa06 	bl	800e674 <uxr_serialize_ObjectVariant.part.0>
 800f268:	4030      	ands	r0, r6
 800f26a:	b2c6      	uxtb	r6, r0
 800f26c:	e7e4      	b.n	800f238 <uxr_serialize_INFO_Payload+0x48>
 800f26e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f272:	4628      	mov	r0, r5
 800f274:	f7ff fdb2 	bl	800eddc <uxr_serialize_ActivityInfoVariant>
 800f278:	4006      	ands	r6, r0
 800f27a:	ea06 0007 	and.w	r0, r6, r7
 800f27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f282:	4606      	mov	r6, r0
 800f284:	e7d8      	b.n	800f238 <uxr_serialize_INFO_Payload+0x48>
 800f286:	bf00      	nop

0800f288 <uxr_serialize_READ_DATA_Payload>:
 800f288:	b570      	push	{r4, r5, r6, lr}
 800f28a:	2202      	movs	r2, #2
 800f28c:	4605      	mov	r5, r0
 800f28e:	460e      	mov	r6, r1
 800f290:	f004 fc5e 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f294:	2202      	movs	r2, #2
 800f296:	18b1      	adds	r1, r6, r2
 800f298:	4604      	mov	r4, r0
 800f29a:	4628      	mov	r0, r5
 800f29c:	f004 fc58 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f2a0:	1d31      	adds	r1, r6, #4
 800f2a2:	4004      	ands	r4, r0
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f7ff fe5d 	bl	800ef64 <uxr_serialize_ReadSpecification>
 800f2aa:	b2e4      	uxtb	r4, r4
 800f2ac:	4020      	ands	r0, r4
 800f2ae:	bd70      	pop	{r4, r5, r6, pc}

0800f2b0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f2b0:	b570      	push	{r4, r5, r6, lr}
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	460e      	mov	r6, r1
 800f2b8:	f004 fc4a 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f2bc:	2202      	movs	r2, #2
 800f2be:	4604      	mov	r4, r0
 800f2c0:	18b1      	adds	r1, r6, r2
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f004 fc44 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f2c8:	4020      	ands	r0, r4
 800f2ca:	b2c0      	uxtb	r0, r0
 800f2cc:	bd70      	pop	{r4, r5, r6, pc}
 800f2ce:	bf00      	nop

0800f2d0 <uxr_serialize_ACKNACK_Payload>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	460e      	mov	r6, r1
 800f2d6:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f2da:	4605      	mov	r5, r0
 800f2dc:	f7fc f926 	bl	800b52c <ucdr_serialize_uint16_t>
 800f2e0:	2202      	movs	r2, #2
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	f004 fc32 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f2ec:	7931      	ldrb	r1, [r6, #4]
 800f2ee:	4004      	ands	r4, r0
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f7fc f8ef 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f2f6:	b2e4      	uxtb	r4, r4
 800f2f8:	4020      	ands	r0, r4
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}

0800f2fc <uxr_deserialize_ACKNACK_Payload>:
 800f2fc:	b570      	push	{r4, r5, r6, lr}
 800f2fe:	4605      	mov	r5, r0
 800f300:	460e      	mov	r6, r1
 800f302:	f7fc fa13 	bl	800b72c <ucdr_deserialize_uint16_t>
 800f306:	2202      	movs	r2, #2
 800f308:	18b1      	adds	r1, r6, r2
 800f30a:	4604      	mov	r4, r0
 800f30c:	4628      	mov	r0, r5
 800f30e:	f004 fc83 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f312:	1d31      	adds	r1, r6, #4
 800f314:	4004      	ands	r4, r0
 800f316:	4628      	mov	r0, r5
 800f318:	f7fc f8f2 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f31c:	b2e4      	uxtb	r4, r4
 800f31e:	4020      	ands	r0, r4
 800f320:	bd70      	pop	{r4, r5, r6, pc}
 800f322:	bf00      	nop

0800f324 <uxr_serialize_HEARTBEAT_Payload>:
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	460d      	mov	r5, r1
 800f328:	8809      	ldrh	r1, [r1, #0]
 800f32a:	4606      	mov	r6, r0
 800f32c:	f7fc f8fe 	bl	800b52c <ucdr_serialize_uint16_t>
 800f330:	8869      	ldrh	r1, [r5, #2]
 800f332:	4604      	mov	r4, r0
 800f334:	4630      	mov	r0, r6
 800f336:	f7fc f8f9 	bl	800b52c <ucdr_serialize_uint16_t>
 800f33a:	7929      	ldrb	r1, [r5, #4]
 800f33c:	4004      	ands	r4, r0
 800f33e:	4630      	mov	r0, r6
 800f340:	f7fc f8c8 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f344:	b2e4      	uxtb	r4, r4
 800f346:	4020      	ands	r0, r4
 800f348:	bd70      	pop	{r4, r5, r6, pc}
 800f34a:	bf00      	nop

0800f34c <uxr_deserialize_HEARTBEAT_Payload>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	4605      	mov	r5, r0
 800f350:	460e      	mov	r6, r1
 800f352:	f7fc f9eb 	bl	800b72c <ucdr_deserialize_uint16_t>
 800f356:	1cb1      	adds	r1, r6, #2
 800f358:	4604      	mov	r4, r0
 800f35a:	4628      	mov	r0, r5
 800f35c:	f7fc f9e6 	bl	800b72c <ucdr_deserialize_uint16_t>
 800f360:	1d31      	adds	r1, r6, #4
 800f362:	4004      	ands	r4, r0
 800f364:	4628      	mov	r0, r5
 800f366:	f7fc f8cb 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f36a:	b2e4      	uxtb	r4, r4
 800f36c:	4020      	ands	r0, r4
 800f36e:	bd70      	pop	{r4, r5, r6, pc}

0800f370 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f374:	4605      	mov	r5, r0
 800f376:	460e      	mov	r6, r1
 800f378:	f7fc ff74 	bl	800c264 <ucdr_deserialize_int32_t>
 800f37c:	1d31      	adds	r1, r6, #4
 800f37e:	4607      	mov	r7, r0
 800f380:	4628      	mov	r0, r5
 800f382:	f7fc fbed 	bl	800bb60 <ucdr_deserialize_uint32_t>
 800f386:	f106 0108 	add.w	r1, r6, #8
 800f38a:	4680      	mov	r8, r0
 800f38c:	4628      	mov	r0, r5
 800f38e:	f7fc ff69 	bl	800c264 <ucdr_deserialize_int32_t>
 800f392:	f106 010c 	add.w	r1, r6, #12
 800f396:	4604      	mov	r4, r0
 800f398:	4628      	mov	r0, r5
 800f39a:	f7fc fbe1 	bl	800bb60 <ucdr_deserialize_uint32_t>
 800f39e:	ea07 0708 	and.w	r7, r7, r8
 800f3a2:	403c      	ands	r4, r7
 800f3a4:	f106 0110 	add.w	r1, r6, #16
 800f3a8:	4004      	ands	r4, r0
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f7fc ff5a 	bl	800c264 <ucdr_deserialize_int32_t>
 800f3b0:	f106 0114 	add.w	r1, r6, #20
 800f3b4:	4607      	mov	r7, r0
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f7fc fbd2 	bl	800bb60 <ucdr_deserialize_uint32_t>
 800f3bc:	b2e4      	uxtb	r4, r4
 800f3be:	403c      	ands	r4, r7
 800f3c0:	4020      	ands	r0, r4
 800f3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c6:	bf00      	nop

0800f3c8 <uxr_serialize_SampleIdentity>:
 800f3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3cc:	220c      	movs	r2, #12
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	f004 fbbd 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f3d6:	2203      	movs	r2, #3
 800f3d8:	f105 010c 	add.w	r1, r5, #12
 800f3dc:	4607      	mov	r7, r0
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f004 fbb6 	bl	8013b50 <ucdr_serialize_array_uint8_t>
 800f3e4:	7be9      	ldrb	r1, [r5, #15]
 800f3e6:	4680      	mov	r8, r0
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f7fc f873 	bl	800b4d4 <ucdr_serialize_uint8_t>
 800f3ee:	6929      	ldr	r1, [r5, #16]
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f7fc fe9e 	bl	800c134 <ucdr_serialize_int32_t>
 800f3f8:	6969      	ldr	r1, [r5, #20]
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	ea07 0708 	and.w	r7, r7, r8
 800f402:	461c      	mov	r4, r3
 800f404:	f7fc fa7c 	bl	800b900 <ucdr_serialize_uint32_t>
 800f408:	403e      	ands	r6, r7
 800f40a:	4034      	ands	r4, r6
 800f40c:	4020      	ands	r0, r4
 800f40e:	b2c0      	uxtb	r0, r0
 800f410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f414 <uxr_deserialize_SampleIdentity>:
 800f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f418:	220c      	movs	r2, #12
 800f41a:	4604      	mov	r4, r0
 800f41c:	460d      	mov	r5, r1
 800f41e:	f004 fbfb 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f422:	2203      	movs	r2, #3
 800f424:	f105 010c 	add.w	r1, r5, #12
 800f428:	4607      	mov	r7, r0
 800f42a:	4620      	mov	r0, r4
 800f42c:	f004 fbf4 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 800f430:	f105 010f 	add.w	r1, r5, #15
 800f434:	4680      	mov	r8, r0
 800f436:	4620      	mov	r0, r4
 800f438:	f7fc f862 	bl	800b500 <ucdr_deserialize_uint8_t>
 800f43c:	f105 0110 	add.w	r1, r5, #16
 800f440:	4606      	mov	r6, r0
 800f442:	4620      	mov	r0, r4
 800f444:	f7fc ff0e 	bl	800c264 <ucdr_deserialize_int32_t>
 800f448:	f105 0114 	add.w	r1, r5, #20
 800f44c:	4603      	mov	r3, r0
 800f44e:	4620      	mov	r0, r4
 800f450:	ea07 0708 	and.w	r7, r7, r8
 800f454:	461c      	mov	r4, r3
 800f456:	f7fc fb83 	bl	800bb60 <ucdr_deserialize_uint32_t>
 800f45a:	403e      	ands	r6, r7
 800f45c:	4034      	ands	r4, r6
 800f45e:	4020      	ands	r0, r4
 800f460:	b2c0      	uxtb	r0, r0
 800f462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f466:	bf00      	nop

0800f468 <rcl_client_get_rmw_handle>:
 800f468:	b118      	cbz	r0, 800f472 <rcl_client_get_rmw_handle+0xa>
 800f46a:	6800      	ldr	r0, [r0, #0]
 800f46c:	b108      	cbz	r0, 800f472 <rcl_client_get_rmw_handle+0xa>
 800f46e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f472:	4770      	bx	lr

0800f474 <rcl_send_request>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	b1e8      	cbz	r0, 800f4b6 <rcl_send_request+0x42>
 800f47a:	4604      	mov	r4, r0
 800f47c:	6800      	ldr	r0, [r0, #0]
 800f47e:	b1d0      	cbz	r0, 800f4b6 <rcl_send_request+0x42>
 800f480:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f484:	b1bb      	cbz	r3, 800f4b6 <rcl_send_request+0x42>
 800f486:	460e      	mov	r6, r1
 800f488:	b1d1      	cbz	r1, 800f4c0 <rcl_send_request+0x4c>
 800f48a:	4615      	mov	r5, r2
 800f48c:	b1c2      	cbz	r2, 800f4c0 <rcl_send_request+0x4c>
 800f48e:	2105      	movs	r1, #5
 800f490:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f494:	f002 fbf8 	bl	8011c88 <__atomic_load_8>
 800f498:	6823      	ldr	r3, [r4, #0]
 800f49a:	e9c5 0100 	strd	r0, r1, [r5]
 800f49e:	462a      	mov	r2, r5
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f4a6:	f003 fdbd 	bl	8013024 <rmw_send_request>
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	b160      	cbz	r0, 800f4c8 <rcl_send_request+0x54>
 800f4ae:	2601      	movs	r6, #1
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	b002      	add	sp, #8
 800f4b4:	bd70      	pop	{r4, r5, r6, pc}
 800f4b6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	b002      	add	sp, #8
 800f4be:	bd70      	pop	{r4, r5, r6, pc}
 800f4c0:	260b      	movs	r6, #11
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	b002      	add	sp, #8
 800f4c6:	bd70      	pop	{r4, r5, r6, pc}
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	2105      	movs	r1, #5
 800f4cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4d0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f4d4:	9100      	str	r1, [sp, #0]
 800f4d6:	f002 fc43 	bl	8011d60 <__atomic_exchange_8>
 800f4da:	4630      	mov	r0, r6
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <rcl_take_response>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	468e      	mov	lr, r1
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	4616      	mov	r6, r2
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4ee:	b08c      	sub	sp, #48	@ 0x30
 800f4f0:	f10d 0c18 	add.w	ip, sp, #24
 800f4f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f4fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f500:	b35d      	cbz	r5, 800f55a <rcl_take_response+0x7a>
 800f502:	682b      	ldr	r3, [r5, #0]
 800f504:	b34b      	cbz	r3, 800f55a <rcl_take_response+0x7a>
 800f506:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f50a:	b330      	cbz	r0, 800f55a <rcl_take_response+0x7a>
 800f50c:	b346      	cbz	r6, 800f560 <rcl_take_response+0x80>
 800f50e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800f568 <rcl_take_response+0x88>
 800f512:	2300      	movs	r3, #0
 800f514:	f88d 3007 	strb.w	r3, [sp, #7]
 800f518:	4632      	mov	r2, r6
 800f51a:	f10d 0307 	add.w	r3, sp, #7
 800f51e:	a902      	add	r1, sp, #8
 800f520:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f524:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f528:	f003 fe84 	bl	8013234 <rmw_take_response>
 800f52c:	4605      	mov	r5, r0
 800f52e:	b9c8      	cbnz	r0, 800f564 <rcl_take_response+0x84>
 800f530:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f534:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f538:	2a00      	cmp	r2, #0
 800f53a:	bf08      	it	eq
 800f53c:	461d      	moveq	r5, r3
 800f53e:	f10d 0e18 	add.w	lr, sp, #24
 800f542:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f546:	46a4      	mov	ip, r4
 800f548:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f54c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f550:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f554:	4628      	mov	r0, r5
 800f556:	b00c      	add	sp, #48	@ 0x30
 800f558:	bd70      	pop	{r4, r5, r6, pc}
 800f55a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800f55e:	e7ee      	b.n	800f53e <rcl_take_response+0x5e>
 800f560:	250b      	movs	r5, #11
 800f562:	e7ec      	b.n	800f53e <rcl_take_response+0x5e>
 800f564:	2501      	movs	r5, #1
 800f566:	e7ea      	b.n	800f53e <rcl_take_response+0x5e>
	...

0800f570 <rcl_client_is_valid>:
 800f570:	b130      	cbz	r0, 800f580 <rcl_client_is_valid+0x10>
 800f572:	6800      	ldr	r0, [r0, #0]
 800f574:	b120      	cbz	r0, 800f580 <rcl_client_is_valid+0x10>
 800f576:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f57a:	3800      	subs	r0, #0
 800f57c:	bf18      	it	ne
 800f57e:	2001      	movne	r0, #1
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop

0800f584 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f584:	280b      	cmp	r0, #11
 800f586:	dc0d      	bgt.n	800f5a4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f588:	2800      	cmp	r0, #0
 800f58a:	db09      	blt.n	800f5a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f58c:	280b      	cmp	r0, #11
 800f58e:	d807      	bhi.n	800f5a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f590:	e8df f000 	tbb	[pc, r0]
 800f594:	07060607 	.word	0x07060607
 800f598:	06060606 	.word	0x06060606
 800f59c:	07070606 	.word	0x07070606
 800f5a0:	2001      	movs	r0, #1
 800f5a2:	4770      	bx	lr
 800f5a4:	28cb      	cmp	r0, #203	@ 0xcb
 800f5a6:	bf18      	it	ne
 800f5a8:	2001      	movne	r0, #1
 800f5aa:	4770      	bx	lr

0800f5ac <rcl_get_zero_initialized_context>:
 800f5ac:	4a03      	ldr	r2, [pc, #12]	@ (800f5bc <rcl_get_zero_initialized_context+0x10>)
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	4770      	bx	lr
 800f5bc:	08017a7c 	.word	0x08017a7c

0800f5c0 <rcl_context_is_valid>:
 800f5c0:	b118      	cbz	r0, 800f5ca <rcl_context_is_valid+0xa>
 800f5c2:	6840      	ldr	r0, [r0, #4]
 800f5c4:	3800      	subs	r0, #0
 800f5c6:	bf18      	it	ne
 800f5c8:	2001      	movne	r0, #1
 800f5ca:	4770      	bx	lr

0800f5cc <__cleanup_context>:
 800f5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	6800      	ldr	r0, [r0, #0]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	6073      	str	r3, [r6, #4]
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d049      	beq.n	800f670 <__cleanup_context+0xa4>
 800f5dc:	6947      	ldr	r7, [r0, #20]
 800f5de:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f5e2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f5e6:	b137      	cbz	r7, 800f5f6 <__cleanup_context+0x2a>
 800f5e8:	3014      	adds	r0, #20
 800f5ea:	f000 f9a5 	bl	800f938 <rcl_init_options_fini>
 800f5ee:	4607      	mov	r7, r0
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d144      	bne.n	800f67e <__cleanup_context+0xb2>
 800f5f4:	6830      	ldr	r0, [r6, #0]
 800f5f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f5f8:	b143      	cbz	r3, 800f60c <__cleanup_context+0x40>
 800f5fa:	3028      	adds	r0, #40	@ 0x28
 800f5fc:	f003 fb5a 	bl	8012cb4 <rmw_context_fini>
 800f600:	b118      	cbz	r0, 800f60a <__cleanup_context+0x3e>
 800f602:	2f00      	cmp	r7, #0
 800f604:	d03e      	beq.n	800f684 <__cleanup_context+0xb8>
 800f606:	f7fb f847 	bl	800a698 <rcutils_reset_error>
 800f60a:	6830      	ldr	r0, [r6, #0]
 800f60c:	6a03      	ldr	r3, [r0, #32]
 800f60e:	b1db      	cbz	r3, 800f648 <__cleanup_context+0x7c>
 800f610:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f614:	2a01      	cmp	r2, #1
 800f616:	f17c 0100 	sbcs.w	r1, ip, #0
 800f61a:	db11      	blt.n	800f640 <__cleanup_context+0x74>
 800f61c:	2400      	movs	r4, #0
 800f61e:	4625      	mov	r5, r4
 800f620:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f624:	4649      	mov	r1, r9
 800f626:	b1b8      	cbz	r0, 800f658 <__cleanup_context+0x8c>
 800f628:	47c0      	blx	r8
 800f62a:	6833      	ldr	r3, [r6, #0]
 800f62c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f630:	3401      	adds	r4, #1
 800f632:	f145 0500 	adc.w	r5, r5, #0
 800f636:	4294      	cmp	r4, r2
 800f638:	eb75 010c 	sbcs.w	r1, r5, ip
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	dbef      	blt.n	800f620 <__cleanup_context+0x54>
 800f640:	4618      	mov	r0, r3
 800f642:	4649      	mov	r1, r9
 800f644:	47c0      	blx	r8
 800f646:	6830      	ldr	r0, [r6, #0]
 800f648:	4649      	mov	r1, r9
 800f64a:	47c0      	blx	r8
 800f64c:	2300      	movs	r3, #0
 800f64e:	e9c6 3300 	strd	r3, r3, [r6]
 800f652:	4638      	mov	r0, r7
 800f654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f658:	3401      	adds	r4, #1
 800f65a:	f145 0500 	adc.w	r5, r5, #0
 800f65e:	4294      	cmp	r4, r2
 800f660:	eb75 010c 	sbcs.w	r1, r5, ip
 800f664:	dbdc      	blt.n	800f620 <__cleanup_context+0x54>
 800f666:	4618      	mov	r0, r3
 800f668:	4649      	mov	r1, r9
 800f66a:	47c0      	blx	r8
 800f66c:	6830      	ldr	r0, [r6, #0]
 800f66e:	e7eb      	b.n	800f648 <__cleanup_context+0x7c>
 800f670:	4607      	mov	r7, r0
 800f672:	2300      	movs	r3, #0
 800f674:	e9c6 3300 	strd	r3, r3, [r6]
 800f678:	4638      	mov	r0, r7
 800f67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f67e:	f7fb f80b 	bl	800a698 <rcutils_reset_error>
 800f682:	e7b7      	b.n	800f5f4 <__cleanup_context+0x28>
 800f684:	f7ff ff7e 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 800f688:	4607      	mov	r7, r0
 800f68a:	e7bc      	b.n	800f606 <__cleanup_context+0x3a>

0800f68c <rcl_init>:
 800f68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f690:	1e05      	subs	r5, r0, #0
 800f692:	b09c      	sub	sp, #112	@ 0x70
 800f694:	460e      	mov	r6, r1
 800f696:	4690      	mov	r8, r2
 800f698:	461f      	mov	r7, r3
 800f69a:	f340 8099 	ble.w	800f7d0 <rcl_init+0x144>
 800f69e:	2900      	cmp	r1, #0
 800f6a0:	f000 8099 	beq.w	800f7d6 <rcl_init+0x14a>
 800f6a4:	f1a1 0e04 	sub.w	lr, r1, #4
 800f6a8:	f04f 0c00 	mov.w	ip, #0
 800f6ac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f6b0:	f10c 0c01 	add.w	ip, ip, #1
 800f6b4:	2c00      	cmp	r4, #0
 800f6b6:	f000 808e 	beq.w	800f7d6 <rcl_init+0x14a>
 800f6ba:	4565      	cmp	r5, ip
 800f6bc:	d1f6      	bne.n	800f6ac <rcl_init+0x20>
 800f6be:	f1b8 0f00 	cmp.w	r8, #0
 800f6c2:	f000 8088 	beq.w	800f7d6 <rcl_init+0x14a>
 800f6c6:	f8d8 4000 	ldr.w	r4, [r8]
 800f6ca:	2c00      	cmp	r4, #0
 800f6cc:	f000 8083 	beq.w	800f7d6 <rcl_init+0x14a>
 800f6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6d2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f6d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	f8cc 3000 	str.w	r3, [ip]
 800f6e0:	a817      	add	r0, sp, #92	@ 0x5c
 800f6e2:	f7fa ffb3 	bl	800a64c <rcutils_allocator_is_valid>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d075      	beq.n	800f7d6 <rcl_init+0x14a>
 800f6ea:	2f00      	cmp	r7, #0
 800f6ec:	d073      	beq.n	800f7d6 <rcl_init+0x14a>
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d175      	bne.n	800f7e0 <rcl_init+0x154>
 800f6f4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800f6f8:	2178      	movs	r1, #120	@ 0x78
 800f6fa:	2001      	movs	r0, #1
 800f6fc:	4798      	blx	r3
 800f6fe:	4604      	mov	r4, r0
 800f700:	6038      	str	r0, [r7, #0]
 800f702:	2800      	cmp	r0, #0
 800f704:	f000 80a0 	beq.w	800f848 <rcl_init+0x1bc>
 800f708:	a802      	add	r0, sp, #8
 800f70a:	f002 fdfd 	bl	8012308 <rmw_get_zero_initialized_context>
 800f70e:	a902      	add	r1, sp, #8
 800f710:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f714:	2250      	movs	r2, #80	@ 0x50
 800f716:	ac17      	add	r4, sp, #92	@ 0x5c
 800f718:	f007 f833 	bl	8016782 <memcpy>
 800f71c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f71e:	f8d7 e000 	ldr.w	lr, [r7]
 800f722:	46f4      	mov	ip, lr
 800f724:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	f8cc 3000 	str.w	r3, [ip]
 800f72e:	f10e 0114 	add.w	r1, lr, #20
 800f732:	4640      	mov	r0, r8
 800f734:	f000 f92a 	bl	800f98c <rcl_init_options_copy>
 800f738:	4604      	mov	r4, r0
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d144      	bne.n	800f7c8 <rcl_init+0x13c>
 800f73e:	f8d7 9000 	ldr.w	r9, [r7]
 800f742:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f746:	f8c9 0020 	str.w	r0, [r9, #32]
 800f74a:	f8c9 5018 	str.w	r5, [r9, #24]
 800f74e:	f8c9 801c 	str.w	r8, [r9, #28]
 800f752:	2d00      	cmp	r5, #0
 800f754:	d04b      	beq.n	800f7ee <rcl_init+0x162>
 800f756:	2e00      	cmp	r6, #0
 800f758:	d049      	beq.n	800f7ee <rcl_init+0x162>
 800f75a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800f75e:	2104      	movs	r1, #4
 800f760:	4628      	mov	r0, r5
 800f762:	4798      	blx	r3
 800f764:	f8c9 0020 	str.w	r0, [r9, #32]
 800f768:	f8d7 9000 	ldr.w	r9, [r7]
 800f76c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f770:	46ca      	mov	sl, r9
 800f772:	b343      	cbz	r3, 800f7c6 <rcl_init+0x13a>
 800f774:	2d01      	cmp	r5, #1
 800f776:	f178 0300 	sbcs.w	r3, r8, #0
 800f77a:	db38      	blt.n	800f7ee <rcl_init+0x162>
 800f77c:	2400      	movs	r4, #0
 800f77e:	3e04      	subs	r6, #4
 800f780:	46a1      	mov	r9, r4
 800f782:	e00b      	b.n	800f79c <rcl_init+0x110>
 800f784:	6831      	ldr	r1, [r6, #0]
 800f786:	f006 fffc 	bl	8016782 <memcpy>
 800f78a:	3401      	adds	r4, #1
 800f78c:	f149 0900 	adc.w	r9, r9, #0
 800f790:	45c8      	cmp	r8, r9
 800f792:	bf08      	it	eq
 800f794:	42a5      	cmpeq	r5, r4
 800f796:	d028      	beq.n	800f7ea <rcl_init+0x15e>
 800f798:	f8d7 a000 	ldr.w	sl, [r7]
 800f79c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f7a0:	f7f0 fd28 	bl	80001f4 <strlen>
 800f7a4:	1c42      	adds	r2, r0, #1
 800f7a6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7a8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800f7aa:	f8da a020 	ldr.w	sl, [sl, #32]
 800f7ae:	9201      	str	r2, [sp, #4]
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	4798      	blx	r3
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f7ba:	6a1b      	ldr	r3, [r3, #32]
 800f7bc:	9a01      	ldr	r2, [sp, #4]
 800f7be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d1de      	bne.n	800f784 <rcl_init+0xf8>
 800f7c6:	240a      	movs	r4, #10
 800f7c8:	4638      	mov	r0, r7
 800f7ca:	f7ff feff 	bl	800f5cc <__cleanup_context>
 800f7ce:	e003      	b.n	800f7d8 <rcl_init+0x14c>
 800f7d0:	2900      	cmp	r1, #0
 800f7d2:	f43f af74 	beq.w	800f6be <rcl_init+0x32>
 800f7d6:	240b      	movs	r4, #11
 800f7d8:	4620      	mov	r0, r4
 800f7da:	b01c      	add	sp, #112	@ 0x70
 800f7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e0:	2464      	movs	r4, #100	@ 0x64
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	b01c      	add	sp, #112	@ 0x70
 800f7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ea:	f8d7 9000 	ldr.w	r9, [r7]
 800f7ee:	491d      	ldr	r1, [pc, #116]	@ (800f864 <rcl_init+0x1d8>)
 800f7f0:	680b      	ldr	r3, [r1, #0]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	d023      	beq.n	800f83e <rcl_init+0x1b2>
 800f7f6:	600b      	str	r3, [r1, #0]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	2400      	movs	r4, #0
 800f7fc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f800:	607b      	str	r3, [r7, #4]
 800f802:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f804:	6182      	str	r2, [r0, #24]
 800f806:	3301      	adds	r3, #1
 800f808:	61c4      	str	r4, [r0, #28]
 800f80a:	d01f      	beq.n	800f84c <rcl_init+0x1c0>
 800f80c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800f810:	b94b      	cbnz	r3, 800f826 <rcl_init+0x19a>
 800f812:	3030      	adds	r0, #48	@ 0x30
 800f814:	f000 f926 	bl	800fa64 <rcl_get_localhost_only>
 800f818:	4604      	mov	r4, r0
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d1d4      	bne.n	800f7c8 <rcl_init+0x13c>
 800f81e:	f8d7 9000 	ldr.w	r9, [r7]
 800f822:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f826:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800f82a:	3018      	adds	r0, #24
 800f82c:	f003 f90c 	bl	8012a48 <rmw_init>
 800f830:	4604      	mov	r4, r0
 800f832:	2800      	cmp	r0, #0
 800f834:	d0d0      	beq.n	800f7d8 <rcl_init+0x14c>
 800f836:	f7ff fea5 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 800f83a:	4604      	mov	r4, r0
 800f83c:	e7c4      	b.n	800f7c8 <rcl_init+0x13c>
 800f83e:	2201      	movs	r2, #1
 800f840:	461c      	mov	r4, r3
 800f842:	600a      	str	r2, [r1, #0]
 800f844:	4613      	mov	r3, r2
 800f846:	e7d9      	b.n	800f7fc <rcl_init+0x170>
 800f848:	240a      	movs	r4, #10
 800f84a:	e7c5      	b.n	800f7d8 <rcl_init+0x14c>
 800f84c:	3024      	adds	r0, #36	@ 0x24
 800f84e:	f005 fea3 	bl	8015598 <rcl_get_default_domain_id>
 800f852:	4604      	mov	r4, r0
 800f854:	2800      	cmp	r0, #0
 800f856:	d1b7      	bne.n	800f7c8 <rcl_init+0x13c>
 800f858:	f8d7 9000 	ldr.w	r9, [r7]
 800f85c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f860:	e7d4      	b.n	800f80c <rcl_init+0x180>
 800f862:	bf00      	nop
 800f864:	2000dd0c 	.word	0x2000dd0c

0800f868 <rcl_get_zero_initialized_init_options>:
 800f868:	2000      	movs	r0, #0
 800f86a:	4770      	bx	lr

0800f86c <rcl_init_options_init>:
 800f86c:	b084      	sub	sp, #16
 800f86e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f870:	b097      	sub	sp, #92	@ 0x5c
 800f872:	ae1d      	add	r6, sp, #116	@ 0x74
 800f874:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f878:	2800      	cmp	r0, #0
 800f87a:	d058      	beq.n	800f92e <rcl_init_options_init+0xc2>
 800f87c:	6803      	ldr	r3, [r0, #0]
 800f87e:	4605      	mov	r5, r0
 800f880:	b133      	cbz	r3, 800f890 <rcl_init_options_init+0x24>
 800f882:	2464      	movs	r4, #100	@ 0x64
 800f884:	4620      	mov	r0, r4
 800f886:	b017      	add	sp, #92	@ 0x5c
 800f888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f88c:	b004      	add	sp, #16
 800f88e:	4770      	bx	lr
 800f890:	4630      	mov	r0, r6
 800f892:	f7fa fedb 	bl	800a64c <rcutils_allocator_is_valid>
 800f896:	2800      	cmp	r0, #0
 800f898:	d049      	beq.n	800f92e <rcl_init_options_init+0xc2>
 800f89a:	46b4      	mov	ip, r6
 800f89c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8a0:	ac11      	add	r4, sp, #68	@ 0x44
 800f8a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8a4:	f8dc 3000 	ldr.w	r3, [ip]
 800f8a8:	6023      	str	r3, [r4, #0]
 800f8aa:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f8ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8ae:	2050      	movs	r0, #80	@ 0x50
 800f8b0:	4798      	blx	r3
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	6028      	str	r0, [r5, #0]
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d03b      	beq.n	800f932 <rcl_init_options_init+0xc6>
 800f8ba:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800f8be:	4686      	mov	lr, r0
 800f8c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8c8:	f8dc 3000 	ldr.w	r3, [ip]
 800f8cc:	f8ce 3000 	str.w	r3, [lr]
 800f8d0:	a802      	add	r0, sp, #8
 800f8d2:	f002 fd29 	bl	8012328 <rmw_get_zero_initialized_init_options>
 800f8d6:	f10d 0e08 	add.w	lr, sp, #8
 800f8da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8de:	f104 0c18 	add.w	ip, r4, #24
 800f8e2:	682f      	ldr	r7, [r5, #0]
 800f8e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f8fc:	ac20      	add	r4, sp, #128	@ 0x80
 800f8fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f902:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f906:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f90a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f90e:	f107 0018 	add.w	r0, r7, #24
 800f912:	f002 ff77 	bl	8012804 <rmw_init_options_init>
 800f916:	4604      	mov	r4, r0
 800f918:	2800      	cmp	r0, #0
 800f91a:	d0b3      	beq.n	800f884 <rcl_init_options_init+0x18>
 800f91c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f91e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f920:	6828      	ldr	r0, [r5, #0]
 800f922:	4798      	blx	r3
 800f924:	4620      	mov	r0, r4
 800f926:	f7ff fe2d 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 800f92a:	4604      	mov	r4, r0
 800f92c:	e7aa      	b.n	800f884 <rcl_init_options_init+0x18>
 800f92e:	240b      	movs	r4, #11
 800f930:	e7a8      	b.n	800f884 <rcl_init_options_init+0x18>
 800f932:	240a      	movs	r4, #10
 800f934:	e7a6      	b.n	800f884 <rcl_init_options_init+0x18>
 800f936:	bf00      	nop

0800f938 <rcl_init_options_fini>:
 800f938:	b530      	push	{r4, r5, lr}
 800f93a:	b087      	sub	sp, #28
 800f93c:	b1f0      	cbz	r0, 800f97c <rcl_init_options_fini+0x44>
 800f93e:	6803      	ldr	r3, [r0, #0]
 800f940:	4604      	mov	r4, r0
 800f942:	b1db      	cbz	r3, 800f97c <rcl_init_options_fini+0x44>
 800f944:	469c      	mov	ip, r3
 800f946:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f94a:	f10d 0e04 	add.w	lr, sp, #4
 800f94e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f952:	f8dc 3000 	ldr.w	r3, [ip]
 800f956:	f8ce 3000 	str.w	r3, [lr]
 800f95a:	a801      	add	r0, sp, #4
 800f95c:	f7fa fe76 	bl	800a64c <rcutils_allocator_is_valid>
 800f960:	b160      	cbz	r0, 800f97c <rcl_init_options_fini+0x44>
 800f962:	6820      	ldr	r0, [r4, #0]
 800f964:	3018      	adds	r0, #24
 800f966:	f003 f823 	bl	80129b0 <rmw_init_options_fini>
 800f96a:	4605      	mov	r5, r0
 800f96c:	b950      	cbnz	r0, 800f984 <rcl_init_options_fini+0x4c>
 800f96e:	6820      	ldr	r0, [r4, #0]
 800f970:	9b02      	ldr	r3, [sp, #8]
 800f972:	9905      	ldr	r1, [sp, #20]
 800f974:	4798      	blx	r3
 800f976:	4628      	mov	r0, r5
 800f978:	b007      	add	sp, #28
 800f97a:	bd30      	pop	{r4, r5, pc}
 800f97c:	250b      	movs	r5, #11
 800f97e:	4628      	mov	r0, r5
 800f980:	b007      	add	sp, #28
 800f982:	bd30      	pop	{r4, r5, pc}
 800f984:	f7ff fdfe 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 800f988:	4605      	mov	r5, r0
 800f98a:	e7f8      	b.n	800f97e <rcl_init_options_fini+0x46>

0800f98c <rcl_init_options_copy>:
 800f98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f990:	b094      	sub	sp, #80	@ 0x50
 800f992:	2800      	cmp	r0, #0
 800f994:	d058      	beq.n	800fa48 <rcl_init_options_copy+0xbc>
 800f996:	4604      	mov	r4, r0
 800f998:	6800      	ldr	r0, [r0, #0]
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d054      	beq.n	800fa48 <rcl_init_options_copy+0xbc>
 800f99e:	460e      	mov	r6, r1
 800f9a0:	f7fa fe54 	bl	800a64c <rcutils_allocator_is_valid>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	d04f      	beq.n	800fa48 <rcl_init_options_copy+0xbc>
 800f9a8:	2e00      	cmp	r6, #0
 800f9aa:	d04d      	beq.n	800fa48 <rcl_init_options_copy+0xbc>
 800f9ac:	6833      	ldr	r3, [r6, #0]
 800f9ae:	b123      	cbz	r3, 800f9ba <rcl_init_options_copy+0x2e>
 800f9b0:	2464      	movs	r4, #100	@ 0x64
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	b014      	add	sp, #80	@ 0x50
 800f9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ba:	6827      	ldr	r7, [r4, #0]
 800f9bc:	46bc      	mov	ip, r7
 800f9be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9c2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800f9c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f9c6:	f8dc 3000 	ldr.w	r3, [ip]
 800f9ca:	f8d7 8000 	ldr.w	r8, [r7]
 800f9ce:	602b      	str	r3, [r5, #0]
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	2050      	movs	r0, #80	@ 0x50
 800f9d4:	47c0      	blx	r8
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	6030      	str	r0, [r6, #0]
 800f9da:	b3d0      	cbz	r0, 800fa52 <rcl_init_options_copy+0xc6>
 800f9dc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800f9e0:	4686      	mov	lr, r0
 800f9e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f9ea:	f8dc 3000 	ldr.w	r3, [ip]
 800f9ee:	f8ce 3000 	str.w	r3, [lr]
 800f9f2:	4668      	mov	r0, sp
 800f9f4:	f002 fc98 	bl	8012328 <rmw_get_zero_initialized_init_options>
 800f9f8:	46ee      	mov	lr, sp
 800f9fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f9fe:	f105 0c18 	add.w	ip, r5, #24
 800fa02:	6824      	ldr	r4, [r4, #0]
 800fa04:	6835      	ldr	r5, [r6, #0]
 800fa06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa1a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fa1e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fa22:	f104 0018 	add.w	r0, r4, #24
 800fa26:	f105 0118 	add.w	r1, r5, #24
 800fa2a:	f002 ff4d 	bl	80128c8 <rmw_init_options_copy>
 800fa2e:	4604      	mov	r4, r0
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d0be      	beq.n	800f9b2 <rcl_init_options_copy+0x26>
 800fa34:	f7fa fe18 	bl	800a668 <rcutils_get_error_string>
 800fa38:	f7fa fe2e 	bl	800a698 <rcutils_reset_error>
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f7ff ff7b 	bl	800f938 <rcl_init_options_fini>
 800fa42:	b140      	cbz	r0, 800fa56 <rcl_init_options_copy+0xca>
 800fa44:	4604      	mov	r4, r0
 800fa46:	e7b4      	b.n	800f9b2 <rcl_init_options_copy+0x26>
 800fa48:	240b      	movs	r4, #11
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	b014      	add	sp, #80	@ 0x50
 800fa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa52:	240a      	movs	r4, #10
 800fa54:	e7ad      	b.n	800f9b2 <rcl_init_options_copy+0x26>
 800fa56:	4620      	mov	r0, r4
 800fa58:	b014      	add	sp, #80	@ 0x50
 800fa5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5e:	f7ff bd91 	b.w	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 800fa62:	bf00      	nop

0800fa64 <rcl_get_localhost_only>:
 800fa64:	b510      	push	{r4, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9301      	str	r3, [sp, #4]
 800fa6c:	b1b8      	cbz	r0, 800fa9e <rcl_get_localhost_only+0x3a>
 800fa6e:	4604      	mov	r4, r0
 800fa70:	a901      	add	r1, sp, #4
 800fa72:	480c      	ldr	r0, [pc, #48]	@ (800faa4 <rcl_get_localhost_only+0x40>)
 800fa74:	f002 f9ac 	bl	8011dd0 <rcutils_get_env>
 800fa78:	b110      	cbz	r0, 800fa80 <rcl_get_localhost_only+0x1c>
 800fa7a:	2001      	movs	r0, #1
 800fa7c:	b002      	add	sp, #8
 800fa7e:	bd10      	pop	{r4, pc}
 800fa80:	9b01      	ldr	r3, [sp, #4]
 800fa82:	b113      	cbz	r3, 800fa8a <rcl_get_localhost_only+0x26>
 800fa84:	781a      	ldrb	r2, [r3, #0]
 800fa86:	2a31      	cmp	r2, #49	@ 0x31
 800fa88:	d004      	beq.n	800fa94 <rcl_get_localhost_only+0x30>
 800fa8a:	2302      	movs	r3, #2
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	7023      	strb	r3, [r4, #0]
 800fa90:	b002      	add	sp, #8
 800fa92:	bd10      	pop	{r4, pc}
 800fa94:	785b      	ldrb	r3, [r3, #1]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1f7      	bne.n	800fa8a <rcl_get_localhost_only+0x26>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e7f6      	b.n	800fa8c <rcl_get_localhost_only+0x28>
 800fa9e:	200b      	movs	r0, #11
 800faa0:	b002      	add	sp, #8
 800faa2:	bd10      	pop	{r4, pc}
 800faa4:	08017a84 	.word	0x08017a84

0800faa8 <rcl_get_zero_initialized_node>:
 800faa8:	4a03      	ldr	r2, [pc, #12]	@ (800fab8 <rcl_get_zero_initialized_node+0x10>)
 800faaa:	4603      	mov	r3, r0
 800faac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fab0:	e883 0003 	stmia.w	r3, {r0, r1}
 800fab4:	4618      	mov	r0, r3
 800fab6:	4770      	bx	lr
 800fab8:	08017aac 	.word	0x08017aac

0800fabc <rcl_node_init>:
 800fabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac0:	b0a9      	sub	sp, #164	@ 0xa4
 800fac2:	4604      	mov	r4, r0
 800fac4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800fac8:	a823      	add	r0, sp, #140	@ 0x8c
 800faca:	460e      	mov	r6, r1
 800facc:	4615      	mov	r5, r2
 800face:	461f      	mov	r7, r3
 800fad0:	f005 ff8a 	bl	80159e8 <rcl_guard_condition_get_default_options>
 800fad4:	f1b8 0f00 	cmp.w	r8, #0
 800fad8:	f000 80e6 	beq.w	800fca8 <rcl_node_init+0x1ec>
 800fadc:	4640      	mov	r0, r8
 800fade:	f7fa fdb5 	bl	800a64c <rcutils_allocator_is_valid>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	f000 80e0 	beq.w	800fca8 <rcl_node_init+0x1ec>
 800fae8:	2e00      	cmp	r6, #0
 800faea:	f000 80dd 	beq.w	800fca8 <rcl_node_init+0x1ec>
 800faee:	2d00      	cmp	r5, #0
 800faf0:	f000 80da 	beq.w	800fca8 <rcl_node_init+0x1ec>
 800faf4:	2c00      	cmp	r4, #0
 800faf6:	f000 80d7 	beq.w	800fca8 <rcl_node_init+0x1ec>
 800fafa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fafe:	f1b9 0f00 	cmp.w	r9, #0
 800fb02:	f040 80fd 	bne.w	800fd00 <rcl_node_init+0x244>
 800fb06:	2f00      	cmp	r7, #0
 800fb08:	f000 80ce 	beq.w	800fca8 <rcl_node_init+0x1ec>
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f7ff fd57 	bl	800f5c0 <rcl_context_is_valid>
 800fb12:	4682      	mov	sl, r0
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f000 80cd 	beq.w	800fcb4 <rcl_node_init+0x1f8>
 800fb1a:	464a      	mov	r2, r9
 800fb1c:	a922      	add	r1, sp, #136	@ 0x88
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800fb24:	f002 fda2 	bl	801266c <rmw_validate_node_name>
 800fb28:	4681      	mov	r9, r0
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	f040 80be 	bne.w	800fcac <rcl_node_init+0x1f0>
 800fb30:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fb32:	2800      	cmp	r0, #0
 800fb34:	f040 80f0 	bne.w	800fd18 <rcl_node_init+0x25c>
 800fb38:	4628      	mov	r0, r5
 800fb3a:	f7f0 fb5b 	bl	80001f4 <strlen>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	f040 80bb 	bne.w	800fcba <rcl_node_init+0x1fe>
 800fb44:	4d7c      	ldr	r5, [pc, #496]	@ (800fd38 <rcl_node_init+0x27c>)
 800fb46:	a922      	add	r1, sp, #136	@ 0x88
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f002 fd70 	bl	8012630 <rmw_validate_namespace>
 800fb50:	4681      	mov	r9, r0
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f040 80aa 	bne.w	800fcac <rcl_node_init+0x1f0>
 800fb58:	4682      	mov	sl, r0
 800fb5a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	f040 80e0 	bne.w	800fd22 <rcl_node_init+0x266>
 800fb62:	f8d8 3000 	ldr.w	r3, [r8]
 800fb66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb6a:	2078      	movs	r0, #120	@ 0x78
 800fb6c:	4798      	blx	r3
 800fb6e:	4681      	mov	r9, r0
 800fb70:	6060      	str	r0, [r4, #4]
 800fb72:	2800      	cmp	r0, #0
 800fb74:	f000 80ca 	beq.w	800fd0c <rcl_node_init+0x250>
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800fb80:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800fb84:	a808      	add	r0, sp, #32
 800fb86:	f000 f907 	bl	800fd98 <rcl_node_get_default_options>
 800fb8a:	a908      	add	r1, sp, #32
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	2268      	movs	r2, #104	@ 0x68
 800fb90:	f006 fdf7 	bl	8016782 <memcpy>
 800fb94:	6861      	ldr	r1, [r4, #4]
 800fb96:	6027      	str	r7, [r4, #0]
 800fb98:	4640      	mov	r0, r8
 800fb9a:	f000 f90b 	bl	800fdb4 <rcl_node_options_copy>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d158      	bne.n	800fc54 <rcl_node_init+0x198>
 800fba2:	4628      	mov	r0, r5
 800fba4:	f7f0 fb26 	bl	80001f4 <strlen>
 800fba8:	4428      	add	r0, r5
 800fbaa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fbae:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fbb2:	2b2f      	cmp	r3, #47	@ 0x2f
 800fbb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	bf0c      	ite	eq
 800fbbc:	4b5f      	ldreq	r3, [pc, #380]	@ (800fd3c <rcl_node_init+0x280>)
 800fbbe:	4b60      	ldrne	r3, [pc, #384]	@ (800fd40 <rcl_node_init+0x284>)
 800fbc0:	9302      	str	r3, [sp, #8]
 800fbc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fbcc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fbd0:	f002 f916 	bl	8011e00 <rcutils_format_string_limit>
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	4631      	mov	r1, r6
 800fbde:	3028      	adds	r0, #40	@ 0x28
 800fbe0:	462a      	mov	r2, r5
 800fbe2:	6866      	ldr	r6, [r4, #4]
 800fbe4:	f003 f984 	bl	8012ef0 <rmw_create_node>
 800fbe8:	6863      	ldr	r3, [r4, #4]
 800fbea:	66b0      	str	r0, [r6, #104]	@ 0x68
 800fbec:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d032      	beq.n	800fc58 <rcl_node_init+0x19c>
 800fbf2:	f003 fa11 	bl	8013018 <rmw_node_get_graph_guard_condition>
 800fbf6:	4681      	mov	r9, r0
 800fbf8:	b360      	cbz	r0, 800fc54 <rcl_node_init+0x198>
 800fbfa:	f8d8 3000 	ldr.w	r3, [r8]
 800fbfe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc02:	6866      	ldr	r6, [r4, #4]
 800fc04:	2008      	movs	r0, #8
 800fc06:	4798      	blx	r3
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fc0c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800fc10:	f1bb 0f00 	cmp.w	fp, #0
 800fc14:	d020      	beq.n	800fc58 <rcl_node_init+0x19c>
 800fc16:	a806      	add	r0, sp, #24
 800fc18:	f005 fe56 	bl	80158c8 <rcl_get_zero_initialized_guard_condition>
 800fc1c:	a806      	add	r0, sp, #24
 800fc1e:	c803      	ldmia	r0, {r0, r1}
 800fc20:	6863      	ldr	r3, [r4, #4]
 800fc22:	46c4      	mov	ip, r8
 800fc24:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fc28:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fc2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc30:	ae23      	add	r6, sp, #140	@ 0x8c
 800fc32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc34:	f8dc 3000 	ldr.w	r3, [ip]
 800fc38:	6033      	str	r3, [r6, #0]
 800fc3a:	ab28      	add	r3, sp, #160	@ 0xa0
 800fc3c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fc40:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc44:	4649      	mov	r1, r9
 800fc46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc48:	463a      	mov	r2, r7
 800fc4a:	4670      	mov	r0, lr
 800fc4c:	f005 fe46 	bl	80158dc <rcl_guard_condition_init_from_rmw>
 800fc50:	4681      	mov	r9, r0
 800fc52:	b328      	cbz	r0, 800fca0 <rcl_node_init+0x1e4>
 800fc54:	6863      	ldr	r3, [r4, #4]
 800fc56:	b1f3      	cbz	r3, 800fc96 <rcl_node_init+0x1da>
 800fc58:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fc5a:	b128      	cbz	r0, 800fc68 <rcl_node_init+0x1ac>
 800fc5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc60:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc64:	4798      	blx	r3
 800fc66:	6863      	ldr	r3, [r4, #4]
 800fc68:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fc6a:	b110      	cbz	r0, 800fc72 <rcl_node_init+0x1b6>
 800fc6c:	f003 f958 	bl	8012f20 <rmw_destroy_node>
 800fc70:	6863      	ldr	r3, [r4, #4]
 800fc72:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fc74:	b148      	cbz	r0, 800fc8a <rcl_node_init+0x1ce>
 800fc76:	f005 fe91 	bl	801599c <rcl_guard_condition_fini>
 800fc7a:	6863      	ldr	r3, [r4, #4]
 800fc7c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc80:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fc82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc86:	4798      	blx	r3
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc94:	4798      	blx	r3
 800fc96:	2300      	movs	r3, #0
 800fc98:	e9c4 3300 	strd	r3, r3, [r4]
 800fc9c:	f04f 0901 	mov.w	r9, #1
 800fca0:	f1ba 0f00 	cmp.w	sl, #0
 800fca4:	d125      	bne.n	800fcf2 <rcl_node_init+0x236>
 800fca6:	e001      	b.n	800fcac <rcl_node_init+0x1f0>
 800fca8:	f04f 090b 	mov.w	r9, #11
 800fcac:	4648      	mov	r0, r9
 800fcae:	b029      	add	sp, #164	@ 0xa4
 800fcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800fcb8:	e7f8      	b.n	800fcac <rcl_node_init+0x1f0>
 800fcba:	782b      	ldrb	r3, [r5, #0]
 800fcbc:	2b2f      	cmp	r3, #47	@ 0x2f
 800fcbe:	f43f af42 	beq.w	800fb46 <rcl_node_init+0x8a>
 800fcc2:	9503      	str	r5, [sp, #12]
 800fcc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	4b1e      	ldr	r3, [pc, #120]	@ (800fd44 <rcl_node_init+0x288>)
 800fccc:	9302      	str	r3, [sp, #8]
 800fcce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fcd2:	9301      	str	r3, [sp, #4]
 800fcd4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fcd8:	f002 f892 	bl	8011e00 <rcutils_format_string_limit>
 800fcdc:	4605      	mov	r5, r0
 800fcde:	b340      	cbz	r0, 800fd32 <rcl_node_init+0x276>
 800fce0:	2200      	movs	r2, #0
 800fce2:	a922      	add	r1, sp, #136	@ 0x88
 800fce4:	9222      	str	r2, [sp, #136]	@ 0x88
 800fce6:	f002 fca3 	bl	8012630 <rmw_validate_namespace>
 800fcea:	4681      	mov	r9, r0
 800fcec:	2800      	cmp	r0, #0
 800fcee:	f43f af34 	beq.w	800fb5a <rcl_node_init+0x9e>
 800fcf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fcf6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	4798      	blx	r3
 800fcfe:	e7d5      	b.n	800fcac <rcl_node_init+0x1f0>
 800fd00:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800fd04:	4648      	mov	r0, r9
 800fd06:	b029      	add	sp, #164	@ 0xa4
 800fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0c:	f04f 090a 	mov.w	r9, #10
 800fd10:	f1ba 0f00 	cmp.w	sl, #0
 800fd14:	d1ed      	bne.n	800fcf2 <rcl_node_init+0x236>
 800fd16:	e7c9      	b.n	800fcac <rcl_node_init+0x1f0>
 800fd18:	f002 fcfa 	bl	8012710 <rmw_node_name_validation_result_string>
 800fd1c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800fd20:	e7c4      	b.n	800fcac <rcl_node_init+0x1f0>
 800fd22:	f002 fc97 	bl	8012654 <rmw_namespace_validation_result_string>
 800fd26:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800fd2a:	f1ba 0f00 	cmp.w	sl, #0
 800fd2e:	d1e0      	bne.n	800fcf2 <rcl_node_init+0x236>
 800fd30:	e7bc      	b.n	800fcac <rcl_node_init+0x1f0>
 800fd32:	f04f 090a 	mov.w	r9, #10
 800fd36:	e7b9      	b.n	800fcac <rcl_node_init+0x1f0>
 800fd38:	08017a9c 	.word	0x08017a9c
 800fd3c:	080177c0 	.word	0x080177c0
 800fd40:	08017aa4 	.word	0x08017aa4
 800fd44:	08017aa0 	.word	0x08017aa0

0800fd48 <rcl_node_is_valid>:
 800fd48:	b130      	cbz	r0, 800fd58 <rcl_node_is_valid+0x10>
 800fd4a:	6843      	ldr	r3, [r0, #4]
 800fd4c:	b123      	cbz	r3, 800fd58 <rcl_node_is_valid+0x10>
 800fd4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd50:	b113      	cbz	r3, 800fd58 <rcl_node_is_valid+0x10>
 800fd52:	6800      	ldr	r0, [r0, #0]
 800fd54:	f7ff bc34 	b.w	800f5c0 <rcl_context_is_valid>
 800fd58:	2000      	movs	r0, #0
 800fd5a:	4770      	bx	lr

0800fd5c <rcl_node_get_name>:
 800fd5c:	b120      	cbz	r0, 800fd68 <rcl_node_get_name+0xc>
 800fd5e:	6840      	ldr	r0, [r0, #4]
 800fd60:	b110      	cbz	r0, 800fd68 <rcl_node_get_name+0xc>
 800fd62:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd64:	b100      	cbz	r0, 800fd68 <rcl_node_get_name+0xc>
 800fd66:	6880      	ldr	r0, [r0, #8]
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop

0800fd6c <rcl_node_get_namespace>:
 800fd6c:	b120      	cbz	r0, 800fd78 <rcl_node_get_namespace+0xc>
 800fd6e:	6840      	ldr	r0, [r0, #4]
 800fd70:	b110      	cbz	r0, 800fd78 <rcl_node_get_namespace+0xc>
 800fd72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd74:	b100      	cbz	r0, 800fd78 <rcl_node_get_namespace+0xc>
 800fd76:	68c0      	ldr	r0, [r0, #12]
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop

0800fd7c <rcl_node_get_options>:
 800fd7c:	b128      	cbz	r0, 800fd8a <rcl_node_get_options+0xe>
 800fd7e:	6840      	ldr	r0, [r0, #4]
 800fd80:	b118      	cbz	r0, 800fd8a <rcl_node_get_options+0xe>
 800fd82:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	bf08      	it	eq
 800fd88:	2000      	moveq	r0, #0
 800fd8a:	4770      	bx	lr

0800fd8c <rcl_node_get_rmw_handle>:
 800fd8c:	b110      	cbz	r0, 800fd94 <rcl_node_get_rmw_handle+0x8>
 800fd8e:	6840      	ldr	r0, [r0, #4]
 800fd90:	b100      	cbz	r0, 800fd94 <rcl_node_get_rmw_handle+0x8>
 800fd92:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop

0800fd98 <rcl_node_get_default_options>:
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	2268      	movs	r2, #104	@ 0x68
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	2100      	movs	r1, #0
 800fda0:	f006 fc26 	bl	80165f0 <memset>
 800fda4:	4620      	mov	r0, r4
 800fda6:	f7fa fc43 	bl	800a630 <rcutils_get_default_allocator>
 800fdaa:	2301      	movs	r3, #1
 800fdac:	7523      	strb	r3, [r4, #20]
 800fdae:	4620      	mov	r0, r4
 800fdb0:	bd10      	pop	{r4, pc}
 800fdb2:	bf00      	nop

0800fdb4 <rcl_node_options_copy>:
 800fdb4:	b1d0      	cbz	r0, 800fdec <rcl_node_options_copy+0x38>
 800fdb6:	b570      	push	{r4, r5, r6, lr}
 800fdb8:	460c      	mov	r4, r1
 800fdba:	b1a9      	cbz	r1, 800fde8 <rcl_node_options_copy+0x34>
 800fdbc:	4288      	cmp	r0, r1
 800fdbe:	4684      	mov	ip, r0
 800fdc0:	d012      	beq.n	800fde8 <rcl_node_options_copy+0x34>
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	8a86      	ldrh	r6, [r0, #20]
 800fdc6:	468e      	mov	lr, r1
 800fdc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fdce:	682b      	ldr	r3, [r5, #0]
 800fdd0:	f8ce 3000 	str.w	r3, [lr]
 800fdd4:	f10c 0118 	add.w	r1, ip, #24
 800fdd8:	2250      	movs	r2, #80	@ 0x50
 800fdda:	82a6      	strh	r6, [r4, #20]
 800fddc:	f104 0018 	add.w	r0, r4, #24
 800fde0:	f006 fccf 	bl	8016782 <memcpy>
 800fde4:	2000      	movs	r0, #0
 800fde6:	bd70      	pop	{r4, r5, r6, pc}
 800fde8:	200b      	movs	r0, #11
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	200b      	movs	r0, #11
 800fdee:	4770      	bx	lr

0800fdf0 <rcl_node_resolve_name>:
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf6:	b091      	sub	sp, #68	@ 0x44
 800fdf8:	ac1a      	add	r4, sp, #104	@ 0x68
 800fdfa:	e884 000c 	stmia.w	r4, {r2, r3}
 800fdfe:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d03b      	beq.n	800fe7e <rcl_node_resolve_name+0x8e>
 800fe06:	460c      	mov	r4, r1
 800fe08:	4605      	mov	r5, r0
 800fe0a:	f7ff ffb7 	bl	800fd7c <rcl_node_get_options>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d037      	beq.n	800fe82 <rcl_node_resolve_name+0x92>
 800fe12:	4628      	mov	r0, r5
 800fe14:	f7ff ffa2 	bl	800fd5c <rcl_node_get_name>
 800fe18:	4606      	mov	r6, r0
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f7ff ffa6 	bl	800fd6c <rcl_node_get_namespace>
 800fe20:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fe24:	4681      	mov	r9, r0
 800fe26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe2a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fe2c:	46ac      	mov	ip, r5
 800fe2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe32:	f8de 3000 	ldr.w	r3, [lr]
 800fe36:	f8cc 3000 	str.w	r3, [ip]
 800fe3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe3c:	b1fb      	cbz	r3, 800fe7e <rcl_node_resolve_name+0x8e>
 800fe3e:	468a      	mov	sl, r1
 800fe40:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fe44:	f002 f934 	bl	80120b0 <rcutils_get_zero_initialized_string_map>
 800fe48:	ab10      	add	r3, sp, #64	@ 0x40
 800fe4a:	9008      	str	r0, [sp, #32]
 800fe4c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fe50:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fe54:	2100      	movs	r1, #0
 800fe56:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fe5a:	a808      	add	r0, sp, #32
 800fe5c:	f002 f9a0 	bl	80121a0 <rcutils_string_map_init>
 800fe60:	4607      	mov	r7, r0
 800fe62:	b180      	cbz	r0, 800fe86 <rcl_node_resolve_name+0x96>
 800fe64:	f7fa fc00 	bl	800a668 <rcutils_get_error_string>
 800fe68:	f7fa fc16 	bl	800a698 <rcutils_reset_error>
 800fe6c:	2f0a      	cmp	r7, #10
 800fe6e:	bf18      	it	ne
 800fe70:	2701      	movne	r7, #1
 800fe72:	4638      	mov	r0, r7
 800fe74:	b011      	add	sp, #68	@ 0x44
 800fe76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7a:	b002      	add	sp, #8
 800fe7c:	4770      	bx	lr
 800fe7e:	270b      	movs	r7, #11
 800fe80:	e7f7      	b.n	800fe72 <rcl_node_resolve_name+0x82>
 800fe82:	2701      	movs	r7, #1
 800fe84:	e7f5      	b.n	800fe72 <rcl_node_resolve_name+0x82>
 800fe86:	9009      	str	r0, [sp, #36]	@ 0x24
 800fe88:	9007      	str	r0, [sp, #28]
 800fe8a:	a808      	add	r0, sp, #32
 800fe8c:	f005 fd16 	bl	80158bc <rcl_get_default_topic_name_substitutions>
 800fe90:	4607      	mov	r7, r0
 800fe92:	b1a8      	cbz	r0, 800fec0 <rcl_node_resolve_name+0xd0>
 800fe94:	280a      	cmp	r0, #10
 800fe96:	9c07      	ldr	r4, [sp, #28]
 800fe98:	d000      	beq.n	800fe9c <rcl_node_resolve_name+0xac>
 800fe9a:	2701      	movs	r7, #1
 800fe9c:	a808      	add	r0, sp, #32
 800fe9e:	f002 f9bf 	bl	8012220 <rcutils_string_map_fini>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d13d      	bne.n	800ff22 <rcl_node_resolve_name+0x132>
 800fea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fea8:	4659      	mov	r1, fp
 800feaa:	47d0      	blx	sl
 800feac:	4659      	mov	r1, fp
 800feae:	4620      	mov	r0, r4
 800feb0:	47d0      	blx	sl
 800feb2:	f1b8 0f00 	cmp.w	r8, #0
 800feb6:	d0dc      	beq.n	800fe72 <rcl_node_resolve_name+0x82>
 800feb8:	2f67      	cmp	r7, #103	@ 0x67
 800feba:	bf08      	it	eq
 800febc:	2768      	moveq	r7, #104	@ 0x68
 800febe:	e7d8      	b.n	800fe72 <rcl_node_resolve_name+0x82>
 800fec0:	ab09      	add	r3, sp, #36	@ 0x24
 800fec2:	9305      	str	r3, [sp, #20]
 800fec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fec6:	46ec      	mov	ip, sp
 800fec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fecc:	682b      	ldr	r3, [r5, #0]
 800fece:	f8cc 3000 	str.w	r3, [ip]
 800fed2:	464a      	mov	r2, r9
 800fed4:	4631      	mov	r1, r6
 800fed6:	4620      	mov	r0, r4
 800fed8:	ab08      	add	r3, sp, #32
 800feda:	f005 fb91 	bl	8015600 <rcl_expand_topic_name>
 800fede:	4607      	mov	r7, r0
 800fee0:	b9b8      	cbnz	r0, 800ff12 <rcl_node_resolve_name+0x122>
 800fee2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800fee4:	9009      	str	r0, [sp, #36]	@ 0x24
 800fee6:	4602      	mov	r2, r0
 800fee8:	a90a      	add	r1, sp, #40	@ 0x28
 800feea:	4620      	mov	r0, r4
 800feec:	f002 fadc 	bl	80124a8 <rmw_validate_full_topic_name>
 800fef0:	b988      	cbnz	r0, 800ff16 <rcl_node_resolve_name+0x126>
 800fef2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fef4:	b9d5      	cbnz	r5, 800ff2c <rcl_node_resolve_name+0x13c>
 800fef6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fef8:	a808      	add	r0, sp, #32
 800fefa:	601c      	str	r4, [r3, #0]
 800fefc:	f002 f990 	bl	8012220 <rcutils_string_map_fini>
 800ff00:	4607      	mov	r7, r0
 800ff02:	b1a8      	cbz	r0, 800ff30 <rcl_node_resolve_name+0x140>
 800ff04:	f7fa fbb0 	bl	800a668 <rcutils_get_error_string>
 800ff08:	462c      	mov	r4, r5
 800ff0a:	f7fa fbc5 	bl	800a698 <rcutils_reset_error>
 800ff0e:	2701      	movs	r7, #1
 800ff10:	e7c9      	b.n	800fea6 <rcl_node_resolve_name+0xb6>
 800ff12:	9c07      	ldr	r4, [sp, #28]
 800ff14:	e7c2      	b.n	800fe9c <rcl_node_resolve_name+0xac>
 800ff16:	f7fa fba7 	bl	800a668 <rcutils_get_error_string>
 800ff1a:	2701      	movs	r7, #1
 800ff1c:	f7fa fbbc 	bl	800a698 <rcutils_reset_error>
 800ff20:	e7bc      	b.n	800fe9c <rcl_node_resolve_name+0xac>
 800ff22:	f7fa fba1 	bl	800a668 <rcutils_get_error_string>
 800ff26:	f7fa fbb7 	bl	800a698 <rcutils_reset_error>
 800ff2a:	e7bc      	b.n	800fea6 <rcl_node_resolve_name+0xb6>
 800ff2c:	2767      	movs	r7, #103	@ 0x67
 800ff2e:	e7b5      	b.n	800fe9c <rcl_node_resolve_name+0xac>
 800ff30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff32:	4659      	mov	r1, fp
 800ff34:	47d0      	blx	sl
 800ff36:	4659      	mov	r1, fp
 800ff38:	4638      	mov	r0, r7
 800ff3a:	47d0      	blx	sl
 800ff3c:	e799      	b.n	800fe72 <rcl_node_resolve_name+0x82>
 800ff3e:	bf00      	nop

0800ff40 <rcl_service_get_rmw_handle>:
 800ff40:	b118      	cbz	r0, 800ff4a <rcl_service_get_rmw_handle+0xa>
 800ff42:	6800      	ldr	r0, [r0, #0]
 800ff44:	b108      	cbz	r0, 800ff4a <rcl_service_get_rmw_handle+0xa>
 800ff46:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ff4a:	4770      	bx	lr

0800ff4c <rcl_take_request>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	468e      	mov	lr, r1
 800ff50:	460c      	mov	r4, r1
 800ff52:	4616      	mov	r6, r2
 800ff54:	4605      	mov	r5, r0
 800ff56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff5a:	b08c      	sub	sp, #48	@ 0x30
 800ff5c:	f10d 0c18 	add.w	ip, sp, #24
 800ff60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff64:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ff68:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ff6c:	b30d      	cbz	r5, 800ffb2 <rcl_take_request+0x66>
 800ff6e:	682b      	ldr	r3, [r5, #0]
 800ff70:	b1fb      	cbz	r3, 800ffb2 <rcl_take_request+0x66>
 800ff72:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ff76:	b1e0      	cbz	r0, 800ffb2 <rcl_take_request+0x66>
 800ff78:	b336      	cbz	r6, 800ffc8 <rcl_take_request+0x7c>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ff80:	4632      	mov	r2, r6
 800ff82:	f10d 0307 	add.w	r3, sp, #7
 800ff86:	a902      	add	r1, sp, #8
 800ff88:	f003 f89a 	bl	80130c0 <rmw_take_request>
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	b198      	cbz	r0, 800ffb8 <rcl_take_request+0x6c>
 800ff90:	280a      	cmp	r0, #10
 800ff92:	bf18      	it	ne
 800ff94:	2501      	movne	r5, #1
 800ff96:	f10d 0e18 	add.w	lr, sp, #24
 800ff9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff9e:	46a4      	mov	ip, r4
 800ffa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffa4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ffa8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ffac:	4628      	mov	r0, r5
 800ffae:	b00c      	add	sp, #48	@ 0x30
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
 800ffb2:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800ffb6:	e7ee      	b.n	800ff96 <rcl_take_request+0x4a>
 800ffb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ffbc:	f240 2359 	movw	r3, #601	@ 0x259
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	bf08      	it	eq
 800ffc4:	461d      	moveq	r5, r3
 800ffc6:	e7e6      	b.n	800ff96 <rcl_take_request+0x4a>
 800ffc8:	250b      	movs	r5, #11
 800ffca:	e7e4      	b.n	800ff96 <rcl_take_request+0x4a>

0800ffcc <rcl_send_response>:
 800ffcc:	b170      	cbz	r0, 800ffec <rcl_send_response+0x20>
 800ffce:	6800      	ldr	r0, [r0, #0]
 800ffd0:	b160      	cbz	r0, 800ffec <rcl_send_response+0x20>
 800ffd2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ffd6:	b148      	cbz	r0, 800ffec <rcl_send_response+0x20>
 800ffd8:	b159      	cbz	r1, 800fff2 <rcl_send_response+0x26>
 800ffda:	b510      	push	{r4, lr}
 800ffdc:	b15a      	cbz	r2, 800fff6 <rcl_send_response+0x2a>
 800ffde:	f003 f8cd 	bl	801317c <rmw_send_response>
 800ffe2:	b110      	cbz	r0, 800ffea <rcl_send_response+0x1e>
 800ffe4:	2802      	cmp	r0, #2
 800ffe6:	bf18      	it	ne
 800ffe8:	2001      	movne	r0, #1
 800ffea:	bd10      	pop	{r4, pc}
 800ffec:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800fff0:	4770      	bx	lr
 800fff2:	200b      	movs	r0, #11
 800fff4:	4770      	bx	lr
 800fff6:	200b      	movs	r0, #11
 800fff8:	bd10      	pop	{r4, pc}
 800fffa:	bf00      	nop

0800fffc <rcl_service_is_valid>:
 800fffc:	b130      	cbz	r0, 801000c <rcl_service_is_valid+0x10>
 800fffe:	6800      	ldr	r0, [r0, #0]
 8010000:	b120      	cbz	r0, 801000c <rcl_service_is_valid+0x10>
 8010002:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010006:	3800      	subs	r0, #0
 8010008:	bf18      	it	ne
 801000a:	2001      	movne	r0, #1
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop

08010010 <rcl_get_zero_initialized_subscription>:
 8010010:	4b01      	ldr	r3, [pc, #4]	@ (8010018 <rcl_get_zero_initialized_subscription+0x8>)
 8010012:	6818      	ldr	r0, [r3, #0]
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	08017ab4 	.word	0x08017ab4

0801001c <rcl_subscription_init>:
 801001c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010020:	b089      	sub	sp, #36	@ 0x24
 8010022:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010024:	b1d6      	cbz	r6, 801005c <rcl_subscription_init+0x40>
 8010026:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801002a:	4604      	mov	r4, r0
 801002c:	4648      	mov	r0, r9
 801002e:	460d      	mov	r5, r1
 8010030:	4690      	mov	r8, r2
 8010032:	461f      	mov	r7, r3
 8010034:	f7fa fb0a 	bl	800a64c <rcutils_allocator_is_valid>
 8010038:	b180      	cbz	r0, 801005c <rcl_subscription_init+0x40>
 801003a:	b17c      	cbz	r4, 801005c <rcl_subscription_init+0x40>
 801003c:	4628      	mov	r0, r5
 801003e:	f7ff fe83 	bl	800fd48 <rcl_node_is_valid>
 8010042:	2800      	cmp	r0, #0
 8010044:	d054      	beq.n	80100f0 <rcl_subscription_init+0xd4>
 8010046:	f1b8 0f00 	cmp.w	r8, #0
 801004a:	d007      	beq.n	801005c <rcl_subscription_init+0x40>
 801004c:	b137      	cbz	r7, 801005c <rcl_subscription_init+0x40>
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	b14b      	cbz	r3, 8010066 <rcl_subscription_init+0x4a>
 8010052:	2764      	movs	r7, #100	@ 0x64
 8010054:	4638      	mov	r0, r7
 8010056:	b009      	add	sp, #36	@ 0x24
 8010058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801005c:	270b      	movs	r7, #11
 801005e:	4638      	mov	r0, r7
 8010060:	b009      	add	sp, #36	@ 0x24
 8010062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010066:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801006a:	aa07      	add	r2, sp, #28
 801006c:	9205      	str	r2, [sp, #20]
 801006e:	9307      	str	r3, [sp, #28]
 8010070:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010078:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801007c:	4639      	mov	r1, r7
 801007e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010082:	4628      	mov	r0, r5
 8010084:	f7ff feb4 	bl	800fdf0 <rcl_node_resolve_name>
 8010088:	4607      	mov	r7, r0
 801008a:	2800      	cmp	r0, #0
 801008c:	d15f      	bne.n	801014e <rcl_subscription_init+0x132>
 801008e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8010092:	21c8      	movs	r1, #200	@ 0xc8
 8010094:	2001      	movs	r0, #1
 8010096:	4798      	blx	r3
 8010098:	6020      	str	r0, [r4, #0]
 801009a:	2800      	cmp	r0, #0
 801009c:	d05d      	beq.n	801015a <rcl_subscription_init+0x13e>
 801009e:	4628      	mov	r0, r5
 80100a0:	f7ff fe74 	bl	800fd8c <rcl_node_get_rmw_handle>
 80100a4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	9a07      	ldr	r2, [sp, #28]
 80100ac:	6827      	ldr	r7, [r4, #0]
 80100ae:	4641      	mov	r1, r8
 80100b0:	4633      	mov	r3, r6
 80100b2:	f003 f94d 	bl	8013350 <rmw_create_subscription>
 80100b6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80100ba:	6827      	ldr	r7, [r4, #0]
 80100bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80100c0:	b348      	cbz	r0, 8010116 <rcl_subscription_init+0xfa>
 80100c2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80100c6:	f003 fa25 	bl	8013514 <rmw_subscription_get_actual_qos>
 80100ca:	4607      	mov	r7, r0
 80100cc:	b9a8      	cbnz	r0, 80100fa <rcl_subscription_init+0xde>
 80100ce:	6820      	ldr	r0, [r4, #0]
 80100d0:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80100d4:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80100d8:	2270      	movs	r2, #112	@ 0x70
 80100da:	4631      	mov	r1, r6
 80100dc:	f006 fb51 	bl	8016782 <memcpy>
 80100e0:	9807      	ldr	r0, [sp, #28]
 80100e2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80100e4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80100e6:	4798      	blx	r3
 80100e8:	4638      	mov	r0, r7
 80100ea:	b009      	add	sp, #36	@ 0x24
 80100ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100f0:	27c8      	movs	r7, #200	@ 0xc8
 80100f2:	4638      	mov	r0, r7
 80100f4:	b009      	add	sp, #36	@ 0x24
 80100f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100fa:	6827      	ldr	r7, [r4, #0]
 80100fc:	b32f      	cbz	r7, 801014a <rcl_subscription_init+0x12e>
 80100fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010102:	b14b      	cbz	r3, 8010118 <rcl_subscription_init+0xfc>
 8010104:	4628      	mov	r0, r5
 8010106:	f7ff fe41 	bl	800fd8c <rcl_node_get_rmw_handle>
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8010110:	f003 fa10 	bl	8013534 <rmw_destroy_subscription>
 8010114:	6827      	ldr	r7, [r4, #0]
 8010116:	b197      	cbz	r7, 801013e <rcl_subscription_init+0x122>
 8010118:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801011c:	4628      	mov	r0, r5
 801011e:	f7fa fa95 	bl	800a64c <rcutils_allocator_is_valid>
 8010122:	b158      	cbz	r0, 801013c <rcl_subscription_init+0x120>
 8010124:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010126:	b148      	cbz	r0, 801013c <rcl_subscription_init+0x120>
 8010128:	4629      	mov	r1, r5
 801012a:	f002 f911 	bl	8012350 <rmw_subscription_content_filter_options_fini>
 801012e:	4605      	mov	r5, r0
 8010130:	b9b8      	cbnz	r0, 8010162 <rcl_subscription_init+0x146>
 8010132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010134:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010136:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010138:	4798      	blx	r3
 801013a:	66fd      	str	r5, [r7, #108]	@ 0x6c
 801013c:	6827      	ldr	r7, [r4, #0]
 801013e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010140:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010142:	4638      	mov	r0, r7
 8010144:	4798      	blx	r3
 8010146:	2300      	movs	r3, #0
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	2701      	movs	r7, #1
 801014c:	e7c8      	b.n	80100e0 <rcl_subscription_init+0xc4>
 801014e:	2867      	cmp	r0, #103	@ 0x67
 8010150:	d0c6      	beq.n	80100e0 <rcl_subscription_init+0xc4>
 8010152:	2869      	cmp	r0, #105	@ 0x69
 8010154:	d003      	beq.n	801015e <rcl_subscription_init+0x142>
 8010156:	280a      	cmp	r0, #10
 8010158:	d1f7      	bne.n	801014a <rcl_subscription_init+0x12e>
 801015a:	270a      	movs	r7, #10
 801015c:	e7c0      	b.n	80100e0 <rcl_subscription_init+0xc4>
 801015e:	2767      	movs	r7, #103	@ 0x67
 8010160:	e7be      	b.n	80100e0 <rcl_subscription_init+0xc4>
 8010162:	f7ff fa0f 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 8010166:	6827      	ldr	r7, [r4, #0]
 8010168:	e7e9      	b.n	801013e <rcl_subscription_init+0x122>
 801016a:	bf00      	nop

0801016c <rcl_subscription_get_default_options>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4d14      	ldr	r5, [pc, #80]	@ (80101c0 <rcl_subscription_get_default_options+0x54>)
 8010170:	4914      	ldr	r1, [pc, #80]	@ (80101c4 <rcl_subscription_get_default_options+0x58>)
 8010172:	b08a      	sub	sp, #40	@ 0x28
 8010174:	4604      	mov	r4, r0
 8010176:	2250      	movs	r2, #80	@ 0x50
 8010178:	4628      	mov	r0, r5
 801017a:	f006 fb02 	bl	8016782 <memcpy>
 801017e:	a804      	add	r0, sp, #16
 8010180:	f7fa fa56 	bl	800a630 <rcutils_get_default_allocator>
 8010184:	f10d 0c10 	add.w	ip, sp, #16
 8010188:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801018c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010190:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010194:	466e      	mov	r6, sp
 8010196:	f8dc 3000 	ldr.w	r3, [ip]
 801019a:	f8ce 3000 	str.w	r3, [lr]
 801019e:	4630      	mov	r0, r6
 80101a0:	f002 f8f0 	bl	8012384 <rmw_get_default_subscription_options>
 80101a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80101a8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80101ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80101b0:	2270      	movs	r2, #112	@ 0x70
 80101b2:	4629      	mov	r1, r5
 80101b4:	4620      	mov	r0, r4
 80101b6:	f006 fae4 	bl	8016782 <memcpy>
 80101ba:	4620      	mov	r0, r4
 80101bc:	b00a      	add	sp, #40	@ 0x28
 80101be:	bd70      	pop	{r4, r5, r6, pc}
 80101c0:	2000dd10 	.word	0x2000dd10
 80101c4:	08017ab8 	.word	0x08017ab8

080101c8 <rcl_take>:
 80101c8:	2800      	cmp	r0, #0
 80101ca:	d04a      	beq.n	8010262 <rcl_take+0x9a>
 80101cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d0:	4604      	mov	r4, r0
 80101d2:	6800      	ldr	r0, [r0, #0]
 80101d4:	b0a4      	sub	sp, #144	@ 0x90
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d03b      	beq.n	8010252 <rcl_take+0x8a>
 80101da:	461f      	mov	r7, r3
 80101dc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d036      	beq.n	8010252 <rcl_take+0x8a>
 80101e4:	460e      	mov	r6, r1
 80101e6:	2900      	cmp	r1, #0
 80101e8:	d039      	beq.n	801025e <rcl_take+0x96>
 80101ea:	4615      	mov	r5, r2
 80101ec:	2a00      	cmp	r2, #0
 80101ee:	d03c      	beq.n	801026a <rcl_take+0xa2>
 80101f0:	a802      	add	r0, sp, #8
 80101f2:	f002 f951 	bl	8012498 <rmw_get_zero_initialized_message_info>
 80101f6:	f10d 0c08 	add.w	ip, sp, #8
 80101fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101fe:	46ae      	mov	lr, r5
 8010200:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010204:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801020c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010210:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010214:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010218:	f04f 0800 	mov.w	r8, #0
 801021c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010220:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8010224:	6822      	ldr	r2, [r4, #0]
 8010226:	462b      	mov	r3, r5
 8010228:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801022c:	9700      	str	r7, [sp, #0]
 801022e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8010232:	4631      	mov	r1, r6
 8010234:	f003 f9de 	bl	80135f4 <rmw_take_with_info>
 8010238:	4603      	mov	r3, r0
 801023a:	b9c0      	cbnz	r0, 801026e <rcl_take+0xa6>
 801023c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010240:	f240 1291 	movw	r2, #401	@ 0x191
 8010244:	2900      	cmp	r1, #0
 8010246:	bf08      	it	eq
 8010248:	4613      	moveq	r3, r2
 801024a:	4618      	mov	r0, r3
 801024c:	b024      	add	sp, #144	@ 0x90
 801024e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010252:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010256:	4618      	mov	r0, r3
 8010258:	b024      	add	sp, #144	@ 0x90
 801025a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025e:	230b      	movs	r3, #11
 8010260:	e7f3      	b.n	801024a <rcl_take+0x82>
 8010262:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010266:	4618      	mov	r0, r3
 8010268:	4770      	bx	lr
 801026a:	ad14      	add	r5, sp, #80	@ 0x50
 801026c:	e7c0      	b.n	80101f0 <rcl_take+0x28>
 801026e:	f7ff f989 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 8010272:	4603      	mov	r3, r0
 8010274:	e7e9      	b.n	801024a <rcl_take+0x82>
 8010276:	bf00      	nop

08010278 <rcl_subscription_get_rmw_handle>:
 8010278:	b118      	cbz	r0, 8010282 <rcl_subscription_get_rmw_handle+0xa>
 801027a:	6800      	ldr	r0, [r0, #0]
 801027c:	b108      	cbz	r0, 8010282 <rcl_subscription_get_rmw_handle+0xa>
 801027e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010282:	4770      	bx	lr

08010284 <rcl_subscription_is_valid>:
 8010284:	b130      	cbz	r0, 8010294 <rcl_subscription_is_valid+0x10>
 8010286:	6800      	ldr	r0, [r0, #0]
 8010288:	b120      	cbz	r0, 8010294 <rcl_subscription_is_valid+0x10>
 801028a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801028e:	3800      	subs	r0, #0
 8010290:	bf18      	it	ne
 8010292:	2001      	movne	r0, #1
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop

08010298 <rcl_get_system_time>:
 8010298:	4608      	mov	r0, r1
 801029a:	f7fa ba19 	b.w	800a6d0 <rcutils_system_time_now>
 801029e:	bf00      	nop

080102a0 <rcl_get_steady_time>:
 80102a0:	4608      	mov	r0, r1
 80102a2:	f7fa ba3d 	b.w	800a720 <rcutils_steady_time_now>
 80102a6:	bf00      	nop

080102a8 <rcl_get_ros_time>:
 80102a8:	7a03      	ldrb	r3, [r0, #8]
 80102aa:	b510      	push	{r4, lr}
 80102ac:	460c      	mov	r4, r1
 80102ae:	b133      	cbz	r3, 80102be <rcl_get_ros_time+0x16>
 80102b0:	2105      	movs	r1, #5
 80102b2:	f001 fce9 	bl	8011c88 <__atomic_load_8>
 80102b6:	e9c4 0100 	strd	r0, r1, [r4]
 80102ba:	2000      	movs	r0, #0
 80102bc:	bd10      	pop	{r4, pc}
 80102be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102c2:	4608      	mov	r0, r1
 80102c4:	f7fa ba04 	b.w	800a6d0 <rcutils_system_time_now>

080102c8 <rcl_clock_init>:
 80102c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ca:	4605      	mov	r5, r0
 80102cc:	4610      	mov	r0, r2
 80102ce:	4614      	mov	r4, r2
 80102d0:	460e      	mov	r6, r1
 80102d2:	f7fa f9bb 	bl	800a64c <rcutils_allocator_is_valid>
 80102d6:	b128      	cbz	r0, 80102e4 <rcl_clock_init+0x1c>
 80102d8:	2d03      	cmp	r5, #3
 80102da:	d803      	bhi.n	80102e4 <rcl_clock_init+0x1c>
 80102dc:	e8df f005 	tbb	[pc, r5]
 80102e0:	06532e1d 	.word	0x06532e1d
 80102e4:	f04f 0c0b 	mov.w	ip, #11
 80102e8:	4660      	mov	r0, ip
 80102ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ec:	2e00      	cmp	r6, #0
 80102ee:	d0f9      	beq.n	80102e4 <rcl_clock_init+0x1c>
 80102f0:	2c00      	cmp	r4, #0
 80102f2:	d0f7      	beq.n	80102e4 <rcl_clock_init+0x1c>
 80102f4:	2300      	movs	r3, #0
 80102f6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80102fa:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80103b0 <rcl_clock_init+0xe8>
 80102fe:	6133      	str	r3, [r6, #16]
 8010300:	f106 0514 	add.w	r5, r6, #20
 8010304:	469c      	mov	ip, r3
 8010306:	2703      	movs	r7, #3
 8010308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801030a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	602b      	str	r3, [r5, #0]
 8010310:	7037      	strb	r7, [r6, #0]
 8010312:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010316:	4660      	mov	r0, ip
 8010318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801031a:	2e00      	cmp	r6, #0
 801031c:	d0e2      	beq.n	80102e4 <rcl_clock_init+0x1c>
 801031e:	2300      	movs	r3, #0
 8010320:	7033      	strb	r3, [r6, #0]
 8010322:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010326:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801032a:	469c      	mov	ip, r3
 801032c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801032e:	f106 0514 	add.w	r5, r6, #20
 8010332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010334:	6823      	ldr	r3, [r4, #0]
 8010336:	602b      	str	r3, [r5, #0]
 8010338:	4660      	mov	r0, ip
 801033a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033c:	2e00      	cmp	r6, #0
 801033e:	d0d1      	beq.n	80102e4 <rcl_clock_init+0x1c>
 8010340:	2c00      	cmp	r4, #0
 8010342:	d0cf      	beq.n	80102e4 <rcl_clock_init+0x1c>
 8010344:	2700      	movs	r7, #0
 8010346:	7037      	strb	r7, [r6, #0]
 8010348:	46a4      	mov	ip, r4
 801034a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801034e:	f106 0514 	add.w	r5, r6, #20
 8010352:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010356:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801035a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801035c:	f8dc 3000 	ldr.w	r3, [ip]
 8010360:	602b      	str	r3, [r5, #0]
 8010362:	6921      	ldr	r1, [r4, #16]
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	2010      	movs	r0, #16
 8010368:	4798      	blx	r3
 801036a:	6130      	str	r0, [r6, #16]
 801036c:	b1d0      	cbz	r0, 80103a4 <rcl_clock_init+0xdc>
 801036e:	2200      	movs	r2, #0
 8010370:	2300      	movs	r3, #0
 8010372:	e9c0 2300 	strd	r2, r3, [r0]
 8010376:	2301      	movs	r3, #1
 8010378:	7207      	strb	r7, [r0, #8]
 801037a:	4a0c      	ldr	r2, [pc, #48]	@ (80103ac <rcl_clock_init+0xe4>)
 801037c:	7033      	strb	r3, [r6, #0]
 801037e:	46bc      	mov	ip, r7
 8010380:	60f2      	str	r2, [r6, #12]
 8010382:	4660      	mov	r0, ip
 8010384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010386:	2e00      	cmp	r6, #0
 8010388:	d0ac      	beq.n	80102e4 <rcl_clock_init+0x1c>
 801038a:	2c00      	cmp	r4, #0
 801038c:	d0aa      	beq.n	80102e4 <rcl_clock_init+0x1c>
 801038e:	2300      	movs	r3, #0
 8010390:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010394:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80103b4 <rcl_clock_init+0xec>
 8010398:	6133      	str	r3, [r6, #16]
 801039a:	f106 0514 	add.w	r5, r6, #20
 801039e:	469c      	mov	ip, r3
 80103a0:	2702      	movs	r7, #2
 80103a2:	e7b1      	b.n	8010308 <rcl_clock_init+0x40>
 80103a4:	f04f 0c0a 	mov.w	ip, #10
 80103a8:	e79e      	b.n	80102e8 <rcl_clock_init+0x20>
 80103aa:	bf00      	nop
 80103ac:	080102a9 	.word	0x080102a9
 80103b0:	080102a1 	.word	0x080102a1
 80103b4:	08010299 	.word	0x08010299

080103b8 <rcl_clock_get_now>:
 80103b8:	b140      	cbz	r0, 80103cc <rcl_clock_get_now+0x14>
 80103ba:	b139      	cbz	r1, 80103cc <rcl_clock_get_now+0x14>
 80103bc:	7803      	ldrb	r3, [r0, #0]
 80103be:	b11b      	cbz	r3, 80103c8 <rcl_clock_get_now+0x10>
 80103c0:	68c3      	ldr	r3, [r0, #12]
 80103c2:	b10b      	cbz	r3, 80103c8 <rcl_clock_get_now+0x10>
 80103c4:	6900      	ldr	r0, [r0, #16]
 80103c6:	4718      	bx	r3
 80103c8:	2001      	movs	r0, #1
 80103ca:	4770      	bx	lr
 80103cc:	200b      	movs	r0, #11
 80103ce:	4770      	bx	lr

080103d0 <rcl_timer_call>:
 80103d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d4:	b087      	sub	sp, #28
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d06d      	beq.n	80104b6 <rcl_timer_call+0xe6>
 80103da:	6803      	ldr	r3, [r0, #0]
 80103dc:	4604      	mov	r4, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d063      	beq.n	80104aa <rcl_timer_call+0xda>
 80103e2:	f3bf 8f5b 	dmb	ish
 80103e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80103ea:	f3bf 8f5b 	dmb	ish
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d150      	bne.n	8010494 <rcl_timer_call+0xc4>
 80103f2:	6803      	ldr	r3, [r0, #0]
 80103f4:	a904      	add	r1, sp, #16
 80103f6:	6818      	ldr	r0, [r3, #0]
 80103f8:	f7ff ffde 	bl	80103b8 <rcl_clock_get_now>
 80103fc:	4605      	mov	r5, r0
 80103fe:	2800      	cmp	r0, #0
 8010400:	d14a      	bne.n	8010498 <rcl_timer_call+0xc8>
 8010402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	db4a      	blt.n	80104a0 <rcl_timer_call+0xd0>
 801040a:	6820      	ldr	r0, [r4, #0]
 801040c:	f04f 0a05 	mov.w	sl, #5
 8010410:	f8cd a000 	str.w	sl, [sp]
 8010414:	3020      	adds	r0, #32
 8010416:	f001 fca3 	bl	8011d60 <__atomic_exchange_8>
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	f3bf 8f5b 	dmb	ish
 8010420:	4680      	mov	r8, r0
 8010422:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010426:	f3bf 8f5b 	dmb	ish
 801042a:	6820      	ldr	r0, [r4, #0]
 801042c:	4689      	mov	r9, r1
 801042e:	3028      	adds	r0, #40	@ 0x28
 8010430:	4651      	mov	r1, sl
 8010432:	f001 fc29 	bl	8011c88 <__atomic_load_8>
 8010436:	4606      	mov	r6, r0
 8010438:	6820      	ldr	r0, [r4, #0]
 801043a:	460f      	mov	r7, r1
 801043c:	3018      	adds	r0, #24
 801043e:	4651      	mov	r1, sl
 8010440:	f001 fc22 	bl	8011c88 <__atomic_load_8>
 8010444:	1836      	adds	r6, r6, r0
 8010446:	4602      	mov	r2, r0
 8010448:	4682      	mov	sl, r0
 801044a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801044e:	eb47 0701 	adc.w	r7, r7, r1
 8010452:	4286      	cmp	r6, r0
 8010454:	460b      	mov	r3, r1
 8010456:	eb77 010c 	sbcs.w	r1, r7, ip
 801045a:	da04      	bge.n	8010466 <rcl_timer_call+0x96>
 801045c:	ea53 0102 	orrs.w	r1, r3, r2
 8010460:	d12e      	bne.n	80104c0 <rcl_timer_call+0xf0>
 8010462:	4606      	mov	r6, r0
 8010464:	4667      	mov	r7, ip
 8010466:	6820      	ldr	r0, [r4, #0]
 8010468:	2105      	movs	r1, #5
 801046a:	4632      	mov	r2, r6
 801046c:	463b      	mov	r3, r7
 801046e:	3028      	adds	r0, #40	@ 0x28
 8010470:	9100      	str	r1, [sp, #0]
 8010472:	f001 fc3f 	bl	8011cf4 <__atomic_store_8>
 8010476:	f1bb 0f00 	cmp.w	fp, #0
 801047a:	d00d      	beq.n	8010498 <rcl_timer_call+0xc8>
 801047c:	9a04      	ldr	r2, [sp, #16]
 801047e:	9b05      	ldr	r3, [sp, #20]
 8010480:	ebb2 0208 	subs.w	r2, r2, r8
 8010484:	4620      	mov	r0, r4
 8010486:	eb63 0309 	sbc.w	r3, r3, r9
 801048a:	47d8      	blx	fp
 801048c:	4628      	mov	r0, r5
 801048e:	b007      	add	sp, #28
 8010490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010494:	f240 3521 	movw	r5, #801	@ 0x321
 8010498:	4628      	mov	r0, r5
 801049a:	b007      	add	sp, #28
 801049c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a0:	2501      	movs	r5, #1
 80104a2:	4628      	mov	r0, r5
 80104a4:	b007      	add	sp, #28
 80104a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104aa:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80104ae:	4628      	mov	r0, r5
 80104b0:	b007      	add	sp, #28
 80104b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b6:	250b      	movs	r5, #11
 80104b8:	4628      	mov	r0, r5
 80104ba:	b007      	add	sp, #28
 80104bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c0:	1b80      	subs	r0, r0, r6
 80104c2:	eb6c 0107 	sbc.w	r1, ip, r7
 80104c6:	3801      	subs	r0, #1
 80104c8:	f161 0100 	sbc.w	r1, r1, #0
 80104cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80104d0:	f7f0 fa44 	bl	800095c <__aeabi_ldivmod>
 80104d4:	9b02      	ldr	r3, [sp, #8]
 80104d6:	3001      	adds	r0, #1
 80104d8:	f141 0100 	adc.w	r1, r1, #0
 80104dc:	fb00 f303 	mul.w	r3, r0, r3
 80104e0:	fb01 330a 	mla	r3, r1, sl, r3
 80104e4:	fba0 0a0a 	umull	r0, sl, r0, sl
 80104e8:	1986      	adds	r6, r0, r6
 80104ea:	4453      	add	r3, sl
 80104ec:	eb43 0707 	adc.w	r7, r3, r7
 80104f0:	e7b9      	b.n	8010466 <rcl_timer_call+0x96>
 80104f2:	bf00      	nop

080104f4 <rcl_timer_is_ready>:
 80104f4:	b570      	push	{r4, r5, r6, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	b378      	cbz	r0, 801055a <rcl_timer_is_ready+0x66>
 80104fa:	6803      	ldr	r3, [r0, #0]
 80104fc:	4604      	mov	r4, r0
 80104fe:	b383      	cbz	r3, 8010562 <rcl_timer_is_ready+0x6e>
 8010500:	460d      	mov	r5, r1
 8010502:	b351      	cbz	r1, 801055a <rcl_timer_is_ready+0x66>
 8010504:	f3bf 8f5b 	dmb	ish
 8010508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801050c:	f3bf 8f5b 	dmb	ish
 8010510:	b953      	cbnz	r3, 8010528 <rcl_timer_is_ready+0x34>
 8010512:	6803      	ldr	r3, [r0, #0]
 8010514:	4669      	mov	r1, sp
 8010516:	6818      	ldr	r0, [r3, #0]
 8010518:	f7ff ff4e 	bl	80103b8 <rcl_clock_get_now>
 801051c:	4606      	mov	r6, r0
 801051e:	b140      	cbz	r0, 8010532 <rcl_timer_is_ready+0x3e>
 8010520:	f240 3321 	movw	r3, #801	@ 0x321
 8010524:	4298      	cmp	r0, r3
 8010526:	d101      	bne.n	801052c <rcl_timer_is_ready+0x38>
 8010528:	2600      	movs	r6, #0
 801052a:	702e      	strb	r6, [r5, #0]
 801052c:	4630      	mov	r0, r6
 801052e:	b002      	add	sp, #8
 8010530:	bd70      	pop	{r4, r5, r6, pc}
 8010532:	6820      	ldr	r0, [r4, #0]
 8010534:	2105      	movs	r1, #5
 8010536:	3028      	adds	r0, #40	@ 0x28
 8010538:	f001 fba6 	bl	8011c88 <__atomic_load_8>
 801053c:	9b00      	ldr	r3, [sp, #0]
 801053e:	1ac0      	subs	r0, r0, r3
 8010540:	9b01      	ldr	r3, [sp, #4]
 8010542:	eb61 0103 	sbc.w	r1, r1, r3
 8010546:	2801      	cmp	r0, #1
 8010548:	f171 0300 	sbcs.w	r3, r1, #0
 801054c:	bfb4      	ite	lt
 801054e:	2301      	movlt	r3, #1
 8010550:	2300      	movge	r3, #0
 8010552:	4630      	mov	r0, r6
 8010554:	702b      	strb	r3, [r5, #0]
 8010556:	b002      	add	sp, #8
 8010558:	bd70      	pop	{r4, r5, r6, pc}
 801055a:	260b      	movs	r6, #11
 801055c:	4630      	mov	r0, r6
 801055e:	b002      	add	sp, #8
 8010560:	bd70      	pop	{r4, r5, r6, pc}
 8010562:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010566:	e7e1      	b.n	801052c <rcl_timer_is_ready+0x38>

08010568 <rcl_timer_get_time_until_next_call>:
 8010568:	b570      	push	{r4, r5, r6, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	b330      	cbz	r0, 80105bc <rcl_timer_get_time_until_next_call+0x54>
 801056e:	6803      	ldr	r3, [r0, #0]
 8010570:	4604      	mov	r4, r0
 8010572:	b33b      	cbz	r3, 80105c4 <rcl_timer_get_time_until_next_call+0x5c>
 8010574:	460d      	mov	r5, r1
 8010576:	b309      	cbz	r1, 80105bc <rcl_timer_get_time_until_next_call+0x54>
 8010578:	f3bf 8f5b 	dmb	ish
 801057c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010580:	f3bf 8f5b 	dmb	ish
 8010584:	b9ab      	cbnz	r3, 80105b2 <rcl_timer_get_time_until_next_call+0x4a>
 8010586:	6803      	ldr	r3, [r0, #0]
 8010588:	4669      	mov	r1, sp
 801058a:	6818      	ldr	r0, [r3, #0]
 801058c:	f7ff ff14 	bl	80103b8 <rcl_clock_get_now>
 8010590:	4606      	mov	r6, r0
 8010592:	b958      	cbnz	r0, 80105ac <rcl_timer_get_time_until_next_call+0x44>
 8010594:	6820      	ldr	r0, [r4, #0]
 8010596:	2105      	movs	r1, #5
 8010598:	3028      	adds	r0, #40	@ 0x28
 801059a:	f001 fb75 	bl	8011c88 <__atomic_load_8>
 801059e:	9b00      	ldr	r3, [sp, #0]
 80105a0:	1ac0      	subs	r0, r0, r3
 80105a2:	9b01      	ldr	r3, [sp, #4]
 80105a4:	6028      	str	r0, [r5, #0]
 80105a6:	eb61 0103 	sbc.w	r1, r1, r3
 80105aa:	6069      	str	r1, [r5, #4]
 80105ac:	4630      	mov	r0, r6
 80105ae:	b002      	add	sp, #8
 80105b0:	bd70      	pop	{r4, r5, r6, pc}
 80105b2:	f240 3621 	movw	r6, #801	@ 0x321
 80105b6:	4630      	mov	r0, r6
 80105b8:	b002      	add	sp, #8
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	260b      	movs	r6, #11
 80105be:	4630      	mov	r0, r6
 80105c0:	b002      	add	sp, #8
 80105c2:	bd70      	pop	{r4, r5, r6, pc}
 80105c4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80105c8:	e7f0      	b.n	80105ac <rcl_timer_get_time_until_next_call+0x44>
 80105ca:	bf00      	nop

080105cc <rcl_timer_get_guard_condition>:
 80105cc:	b130      	cbz	r0, 80105dc <rcl_timer_get_guard_condition+0x10>
 80105ce:	6800      	ldr	r0, [r0, #0]
 80105d0:	b120      	cbz	r0, 80105dc <rcl_timer_get_guard_condition+0x10>
 80105d2:	68c3      	ldr	r3, [r0, #12]
 80105d4:	b10b      	cbz	r3, 80105da <rcl_timer_get_guard_condition+0xe>
 80105d6:	3008      	adds	r0, #8
 80105d8:	4770      	bx	lr
 80105da:	4618      	mov	r0, r3
 80105dc:	4770      	bx	lr
 80105de:	bf00      	nop

080105e0 <rcl_get_zero_initialized_wait_set>:
 80105e0:	b510      	push	{r4, lr}
 80105e2:	4c08      	ldr	r4, [pc, #32]	@ (8010604 <rcl_get_zero_initialized_wait_set+0x24>)
 80105e4:	4686      	mov	lr, r0
 80105e6:	4684      	mov	ip, r0
 80105e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105fa:	6823      	ldr	r3, [r4, #0]
 80105fc:	f8cc 3000 	str.w	r3, [ip]
 8010600:	4670      	mov	r0, lr
 8010602:	bd10      	pop	{r4, pc}
 8010604:	08017b08 	.word	0x08017b08

08010608 <rcl_wait_set_is_valid>:
 8010608:	b118      	cbz	r0, 8010612 <rcl_wait_set_is_valid+0xa>
 801060a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801060c:	3800      	subs	r0, #0
 801060e:	bf18      	it	ne
 8010610:	2001      	movne	r0, #1
 8010612:	4770      	bx	lr

08010614 <rcl_wait_set_fini>:
 8010614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010618:	b082      	sub	sp, #8
 801061a:	2800      	cmp	r0, #0
 801061c:	f000 8095 	beq.w	801074a <rcl_wait_set_fini+0x136>
 8010620:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010622:	4604      	mov	r4, r0
 8010624:	2e00      	cmp	r6, #0
 8010626:	f000 808c 	beq.w	8010742 <rcl_wait_set_fini+0x12e>
 801062a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801062c:	f003 f9d0 	bl	80139d0 <rmw_destroy_wait_set>
 8010630:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010632:	1e06      	subs	r6, r0, #0
 8010634:	bf18      	it	ne
 8010636:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801063a:	2d00      	cmp	r5, #0
 801063c:	f000 8081 	beq.w	8010742 <rcl_wait_set_fini+0x12e>
 8010640:	6820      	ldr	r0, [r4, #0]
 8010642:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010646:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010648:	2700      	movs	r7, #0
 801064a:	6067      	str	r7, [r4, #4]
 801064c:	602f      	str	r7, [r5, #0]
 801064e:	b120      	cbz	r0, 801065a <rcl_wait_set_fini+0x46>
 8010650:	9101      	str	r1, [sp, #4]
 8010652:	47c0      	blx	r8
 8010654:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010656:	9901      	ldr	r1, [sp, #4]
 8010658:	6027      	str	r7, [r4, #0]
 801065a:	68a8      	ldr	r0, [r5, #8]
 801065c:	b120      	cbz	r0, 8010668 <rcl_wait_set_fini+0x54>
 801065e:	47c0      	blx	r8
 8010660:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010662:	2300      	movs	r3, #0
 8010664:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010668:	68a0      	ldr	r0, [r4, #8]
 801066a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801066c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801066e:	f04f 0800 	mov.w	r8, #0
 8010672:	f8c4 800c 	str.w	r8, [r4, #12]
 8010676:	f8c5 800c 	str.w	r8, [r5, #12]
 801067a:	b128      	cbz	r0, 8010688 <rcl_wait_set_fini+0x74>
 801067c:	47b8      	blx	r7
 801067e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010680:	f8c4 8008 	str.w	r8, [r4, #8]
 8010684:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010686:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010688:	6968      	ldr	r0, [r5, #20]
 801068a:	f04f 0800 	mov.w	r8, #0
 801068e:	f8c5 8010 	str.w	r8, [r5, #16]
 8010692:	b128      	cbz	r0, 80106a0 <rcl_wait_set_fini+0x8c>
 8010694:	47b8      	blx	r7
 8010696:	f8c5 8014 	str.w	r8, [r5, #20]
 801069a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801069c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801069e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106a0:	6920      	ldr	r0, [r4, #16]
 80106a2:	f04f 0800 	mov.w	r8, #0
 80106a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80106aa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80106ae:	b128      	cbz	r0, 80106bc <rcl_wait_set_fini+0xa8>
 80106b0:	47b8      	blx	r7
 80106b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80106b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80106ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106bc:	69a0      	ldr	r0, [r4, #24]
 80106be:	f04f 0800 	mov.w	r8, #0
 80106c2:	f8c4 801c 	str.w	r8, [r4, #28]
 80106c6:	f8c5 8018 	str.w	r8, [r5, #24]
 80106ca:	b128      	cbz	r0, 80106d8 <rcl_wait_set_fini+0xc4>
 80106cc:	9101      	str	r1, [sp, #4]
 80106ce:	47b8      	blx	r7
 80106d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106d2:	9901      	ldr	r1, [sp, #4]
 80106d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80106d8:	6a28      	ldr	r0, [r5, #32]
 80106da:	b120      	cbz	r0, 80106e6 <rcl_wait_set_fini+0xd2>
 80106dc:	47b8      	blx	r7
 80106de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106e0:	2300      	movs	r3, #0
 80106e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80106e6:	6a20      	ldr	r0, [r4, #32]
 80106e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80106ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80106ee:	2700      	movs	r7, #0
 80106f0:	6267      	str	r7, [r4, #36]	@ 0x24
 80106f2:	626f      	str	r7, [r5, #36]	@ 0x24
 80106f4:	b120      	cbz	r0, 8010700 <rcl_wait_set_fini+0xec>
 80106f6:	9101      	str	r1, [sp, #4]
 80106f8:	47c0      	blx	r8
 80106fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80106fc:	9901      	ldr	r1, [sp, #4]
 80106fe:	6227      	str	r7, [r4, #32]
 8010700:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010702:	b120      	cbz	r0, 801070e <rcl_wait_set_fini+0xfa>
 8010704:	47c0      	blx	r8
 8010706:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010708:	2300      	movs	r3, #0
 801070a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801070e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010710:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010714:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010716:	2700      	movs	r7, #0
 8010718:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801071a:	632f      	str	r7, [r5, #48]	@ 0x30
 801071c:	b120      	cbz	r0, 8010728 <rcl_wait_set_fini+0x114>
 801071e:	9101      	str	r1, [sp, #4]
 8010720:	47c0      	blx	r8
 8010722:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010724:	9901      	ldr	r1, [sp, #4]
 8010726:	62a7      	str	r7, [r4, #40]	@ 0x28
 8010728:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801072a:	b120      	cbz	r0, 8010736 <rcl_wait_set_fini+0x122>
 801072c:	47c0      	blx	r8
 801072e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010730:	2300      	movs	r3, #0
 8010732:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8010736:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010738:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801073a:	4628      	mov	r0, r5
 801073c:	4798      	blx	r3
 801073e:	2300      	movs	r3, #0
 8010740:	6323      	str	r3, [r4, #48]	@ 0x30
 8010742:	4630      	mov	r0, r6
 8010744:	b002      	add	sp, #8
 8010746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801074a:	260b      	movs	r6, #11
 801074c:	4630      	mov	r0, r6
 801074e:	b002      	add	sp, #8
 8010750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010754 <rcl_wait_set_add_subscription>:
 8010754:	b318      	cbz	r0, 801079e <rcl_wait_set_add_subscription+0x4a>
 8010756:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	4604      	mov	r4, r0
 801075c:	b30b      	cbz	r3, 80107a2 <rcl_wait_set_add_subscription+0x4e>
 801075e:	b319      	cbz	r1, 80107a8 <rcl_wait_set_add_subscription+0x54>
 8010760:	681d      	ldr	r5, [r3, #0]
 8010762:	6840      	ldr	r0, [r0, #4]
 8010764:	4285      	cmp	r5, r0
 8010766:	d217      	bcs.n	8010798 <rcl_wait_set_add_subscription+0x44>
 8010768:	6820      	ldr	r0, [r4, #0]
 801076a:	1c6e      	adds	r6, r5, #1
 801076c:	601e      	str	r6, [r3, #0]
 801076e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010772:	b102      	cbz	r2, 8010776 <rcl_wait_set_add_subscription+0x22>
 8010774:	6015      	str	r5, [r2, #0]
 8010776:	4608      	mov	r0, r1
 8010778:	f7ff fd7e 	bl	8010278 <rcl_subscription_get_rmw_handle>
 801077c:	b150      	cbz	r0, 8010794 <rcl_wait_set_add_subscription+0x40>
 801077e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010780:	6842      	ldr	r2, [r0, #4]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010788:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801078a:	6853      	ldr	r3, [r2, #4]
 801078c:	3301      	adds	r3, #1
 801078e:	2000      	movs	r0, #0
 8010790:	6053      	str	r3, [r2, #4]
 8010792:	bd70      	pop	{r4, r5, r6, pc}
 8010794:	2001      	movs	r0, #1
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	f240 3086 	movw	r0, #902	@ 0x386
 801079c:	bd70      	pop	{r4, r5, r6, pc}
 801079e:	200b      	movs	r0, #11
 80107a0:	4770      	bx	lr
 80107a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80107a6:	bd70      	pop	{r4, r5, r6, pc}
 80107a8:	200b      	movs	r0, #11
 80107aa:	bd70      	pop	{r4, r5, r6, pc}

080107ac <rcl_wait_set_clear>:
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d073      	beq.n	8010898 <rcl_wait_set_clear+0xec>
 80107b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80107b2:	b510      	push	{r4, lr}
 80107b4:	4604      	mov	r4, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d070      	beq.n	801089c <rcl_wait_set_clear+0xf0>
 80107ba:	6800      	ldr	r0, [r0, #0]
 80107bc:	b138      	cbz	r0, 80107ce <rcl_wait_set_clear+0x22>
 80107be:	6862      	ldr	r2, [r4, #4]
 80107c0:	2100      	movs	r1, #0
 80107c2:	0092      	lsls	r2, r2, #2
 80107c4:	f005 ff14 	bl	80165f0 <memset>
 80107c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107ca:	2200      	movs	r2, #0
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	68a0      	ldr	r0, [r4, #8]
 80107d0:	b138      	cbz	r0, 80107e2 <rcl_wait_set_clear+0x36>
 80107d2:	68e2      	ldr	r2, [r4, #12]
 80107d4:	2100      	movs	r1, #0
 80107d6:	0092      	lsls	r2, r2, #2
 80107d8:	f005 ff0a 	bl	80165f0 <memset>
 80107dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107de:	2200      	movs	r2, #0
 80107e0:	60da      	str	r2, [r3, #12]
 80107e2:	69a0      	ldr	r0, [r4, #24]
 80107e4:	b138      	cbz	r0, 80107f6 <rcl_wait_set_clear+0x4a>
 80107e6:	69e2      	ldr	r2, [r4, #28]
 80107e8:	2100      	movs	r1, #0
 80107ea:	0092      	lsls	r2, r2, #2
 80107ec:	f005 ff00 	bl	80165f0 <memset>
 80107f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80107f2:	2200      	movs	r2, #0
 80107f4:	619a      	str	r2, [r3, #24]
 80107f6:	6a20      	ldr	r0, [r4, #32]
 80107f8:	b138      	cbz	r0, 801080a <rcl_wait_set_clear+0x5e>
 80107fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80107fc:	2100      	movs	r1, #0
 80107fe:	0092      	lsls	r2, r2, #2
 8010800:	f005 fef6 	bl	80165f0 <memset>
 8010804:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010806:	2200      	movs	r2, #0
 8010808:	625a      	str	r2, [r3, #36]	@ 0x24
 801080a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801080c:	b138      	cbz	r0, 801081e <rcl_wait_set_clear+0x72>
 801080e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010810:	2100      	movs	r1, #0
 8010812:	0092      	lsls	r2, r2, #2
 8010814:	f005 feec 	bl	80165f0 <memset>
 8010818:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801081a:	2200      	movs	r2, #0
 801081c:	631a      	str	r2, [r3, #48]	@ 0x30
 801081e:	6920      	ldr	r0, [r4, #16]
 8010820:	b138      	cbz	r0, 8010832 <rcl_wait_set_clear+0x86>
 8010822:	6962      	ldr	r2, [r4, #20]
 8010824:	2100      	movs	r1, #0
 8010826:	0092      	lsls	r2, r2, #2
 8010828:	f005 fee2 	bl	80165f0 <memset>
 801082c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801082e:	2200      	movs	r2, #0
 8010830:	641a      	str	r2, [r3, #64]	@ 0x40
 8010832:	6898      	ldr	r0, [r3, #8]
 8010834:	b138      	cbz	r0, 8010846 <rcl_wait_set_clear+0x9a>
 8010836:	685a      	ldr	r2, [r3, #4]
 8010838:	2100      	movs	r1, #0
 801083a:	0092      	lsls	r2, r2, #2
 801083c:	f005 fed8 	bl	80165f0 <memset>
 8010840:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010842:	2200      	movs	r2, #0
 8010844:	605a      	str	r2, [r3, #4]
 8010846:	6958      	ldr	r0, [r3, #20]
 8010848:	b138      	cbz	r0, 801085a <rcl_wait_set_clear+0xae>
 801084a:	691a      	ldr	r2, [r3, #16]
 801084c:	2100      	movs	r1, #0
 801084e:	0092      	lsls	r2, r2, #2
 8010850:	f005 fece 	bl	80165f0 <memset>
 8010854:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010856:	2200      	movs	r2, #0
 8010858:	611a      	str	r2, [r3, #16]
 801085a:	6a18      	ldr	r0, [r3, #32]
 801085c:	b138      	cbz	r0, 801086e <rcl_wait_set_clear+0xc2>
 801085e:	69da      	ldr	r2, [r3, #28]
 8010860:	2100      	movs	r1, #0
 8010862:	0092      	lsls	r2, r2, #2
 8010864:	f005 fec4 	bl	80165f0 <memset>
 8010868:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801086a:	2200      	movs	r2, #0
 801086c:	61da      	str	r2, [r3, #28]
 801086e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010870:	b138      	cbz	r0, 8010882 <rcl_wait_set_clear+0xd6>
 8010872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010874:	2100      	movs	r1, #0
 8010876:	0092      	lsls	r2, r2, #2
 8010878:	f005 feba 	bl	80165f0 <memset>
 801087c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801087e:	2200      	movs	r2, #0
 8010880:	629a      	str	r2, [r3, #40]	@ 0x28
 8010882:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010884:	b138      	cbz	r0, 8010896 <rcl_wait_set_clear+0xea>
 8010886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010888:	2100      	movs	r1, #0
 801088a:	0092      	lsls	r2, r2, #2
 801088c:	f005 feb0 	bl	80165f0 <memset>
 8010890:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010892:	2000      	movs	r0, #0
 8010894:	6358      	str	r0, [r3, #52]	@ 0x34
 8010896:	bd10      	pop	{r4, pc}
 8010898:	200b      	movs	r0, #11
 801089a:	4770      	bx	lr
 801089c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80108a0:	bd10      	pop	{r4, pc}
 80108a2:	bf00      	nop

080108a4 <rcl_wait_set_resize>:
 80108a4:	2800      	cmp	r0, #0
 80108a6:	f000 8185 	beq.w	8010bb4 <rcl_wait_set_resize+0x310>
 80108aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80108b0:	b083      	sub	sp, #12
 80108b2:	4605      	mov	r5, r0
 80108b4:	2c00      	cmp	r4, #0
 80108b6:	f000 817f 	beq.w	8010bb8 <rcl_wait_set_resize+0x314>
 80108ba:	f04f 0900 	mov.w	r9, #0
 80108be:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80108c2:	461f      	mov	r7, r3
 80108c4:	4688      	mov	r8, r1
 80108c6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80108ca:	4616      	mov	r6, r2
 80108cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80108d0:	f8c4 9000 	str.w	r9, [r4]
 80108d4:	2900      	cmp	r1, #0
 80108d6:	f000 80bd 	beq.w	8010a54 <rcl_wait_set_resize+0x1b0>
 80108da:	008c      	lsls	r4, r1, #2
 80108dc:	6800      	ldr	r0, [r0, #0]
 80108de:	9301      	str	r3, [sp, #4]
 80108e0:	4652      	mov	r2, sl
 80108e2:	4621      	mov	r1, r4
 80108e4:	4798      	blx	r3
 80108e6:	9b01      	ldr	r3, [sp, #4]
 80108e8:	6028      	str	r0, [r5, #0]
 80108ea:	2800      	cmp	r0, #0
 80108ec:	f000 80cb 	beq.w	8010a86 <rcl_wait_set_resize+0x1e2>
 80108f0:	4622      	mov	r2, r4
 80108f2:	4649      	mov	r1, r9
 80108f4:	9301      	str	r3, [sp, #4]
 80108f6:	f005 fe7b 	bl	80165f0 <memset>
 80108fa:	f8c5 8004 	str.w	r8, [r5, #4]
 80108fe:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8010902:	9b01      	ldr	r3, [sp, #4]
 8010904:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010908:	f8c8 9004 	str.w	r9, [r8, #4]
 801090c:	4652      	mov	r2, sl
 801090e:	4621      	mov	r1, r4
 8010910:	4798      	blx	r3
 8010912:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010914:	f8c8 0008 	str.w	r0, [r8, #8]
 8010918:	689b      	ldr	r3, [r3, #8]
 801091a:	2b00      	cmp	r3, #0
 801091c:	f000 80ac 	beq.w	8010a78 <rcl_wait_set_resize+0x1d4>
 8010920:	4622      	mov	r2, r4
 8010922:	4649      	mov	r1, r9
 8010924:	4618      	mov	r0, r3
 8010926:	f005 fe63 	bl	80165f0 <memset>
 801092a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801092c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010930:	f04f 0800 	mov.w	r8, #0
 8010934:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8010938:	f8c5 800c 	str.w	r8, [r5, #12]
 801093c:	f8c4 800c 	str.w	r8, [r4, #12]
 8010940:	2e00      	cmp	r6, #0
 8010942:	f040 80a4 	bne.w	8010a8e <rcl_wait_set_resize+0x1ea>
 8010946:	68a8      	ldr	r0, [r5, #8]
 8010948:	b128      	cbz	r0, 8010956 <rcl_wait_set_resize+0xb2>
 801094a:	4649      	mov	r1, r9
 801094c:	4790      	blx	r2
 801094e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010950:	60ae      	str	r6, [r5, #8]
 8010952:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010956:	f04f 0800 	mov.w	r8, #0
 801095a:	19f6      	adds	r6, r6, r7
 801095c:	f8c4 8010 	str.w	r8, [r4, #16]
 8010960:	f040 80ac 	bne.w	8010abc <rcl_wait_set_resize+0x218>
 8010964:	6960      	ldr	r0, [r4, #20]
 8010966:	b130      	cbz	r0, 8010976 <rcl_wait_set_resize+0xd2>
 8010968:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801096a:	4649      	mov	r1, r9
 801096c:	4798      	blx	r3
 801096e:	6166      	str	r6, [r4, #20]
 8010970:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010972:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010976:	2600      	movs	r6, #0
 8010978:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801097c:	616e      	str	r6, [r5, #20]
 801097e:	6426      	str	r6, [r4, #64]	@ 0x40
 8010980:	2f00      	cmp	r7, #0
 8010982:	f040 80ad 	bne.w	8010ae0 <rcl_wait_set_resize+0x23c>
 8010986:	6928      	ldr	r0, [r5, #16]
 8010988:	b138      	cbz	r0, 801099a <rcl_wait_set_resize+0xf6>
 801098a:	4649      	mov	r1, r9
 801098c:	47d0      	blx	sl
 801098e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010990:	612f      	str	r7, [r5, #16]
 8010992:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010996:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801099a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801099c:	2600      	movs	r6, #0
 801099e:	61ee      	str	r6, [r5, #28]
 80109a0:	61a6      	str	r6, [r4, #24]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f040 80af 	bne.w	8010b06 <rcl_wait_set_resize+0x262>
 80109a8:	69a8      	ldr	r0, [r5, #24]
 80109aa:	b120      	cbz	r0, 80109b6 <rcl_wait_set_resize+0x112>
 80109ac:	4649      	mov	r1, r9
 80109ae:	47d0      	blx	sl
 80109b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109b4:	61ab      	str	r3, [r5, #24]
 80109b6:	6a20      	ldr	r0, [r4, #32]
 80109b8:	b128      	cbz	r0, 80109c6 <rcl_wait_set_resize+0x122>
 80109ba:	4649      	mov	r1, r9
 80109bc:	47d0      	blx	sl
 80109be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109c0:	2300      	movs	r3, #0
 80109c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80109c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109c8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80109ca:	2600      	movs	r6, #0
 80109cc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80109d0:	626e      	str	r6, [r5, #36]	@ 0x24
 80109d2:	6266      	str	r6, [r4, #36]	@ 0x24
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 80b6 	beq.w	8010b46 <rcl_wait_set_resize+0x2a2>
 80109da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80109de:	6a28      	ldr	r0, [r5, #32]
 80109e0:	463a      	mov	r2, r7
 80109e2:	4651      	mov	r1, sl
 80109e4:	47c8      	blx	r9
 80109e6:	6228      	str	r0, [r5, #32]
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d04c      	beq.n	8010a86 <rcl_wait_set_resize+0x1e2>
 80109ec:	4652      	mov	r2, sl
 80109ee:	4631      	mov	r1, r6
 80109f0:	f005 fdfe 	bl	80165f0 <memset>
 80109f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109f8:	626b      	str	r3, [r5, #36]	@ 0x24
 80109fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80109fc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80109fe:	463a      	mov	r2, r7
 8010a00:	4651      	mov	r1, sl
 8010a02:	47c8      	blx	r9
 8010a04:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a06:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8010a08:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8010a0a:	2c00      	cmp	r4, #0
 8010a0c:	f000 80f0 	beq.w	8010bf0 <rcl_wait_set_resize+0x34c>
 8010a10:	4620      	mov	r0, r4
 8010a12:	4652      	mov	r2, sl
 8010a14:	4631      	mov	r1, r6
 8010a16:	f005 fdeb 	bl	80165f0 <memset>
 8010a1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a1e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010a20:	2600      	movs	r6, #0
 8010a22:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010a26:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8010a28:	6326      	str	r6, [r4, #48]	@ 0x30
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f040 809d 	bne.w	8010b6a <rcl_wait_set_resize+0x2c6>
 8010a30:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010a32:	b120      	cbz	r0, 8010a3e <rcl_wait_set_resize+0x19a>
 8010a34:	4639      	mov	r1, r7
 8010a36:	47c0      	blx	r8
 8010a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a3a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a3c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8010a3e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8010a40:	b310      	cbz	r0, 8010a88 <rcl_wait_set_resize+0x1e4>
 8010a42:	4639      	mov	r1, r7
 8010a44:	47c0      	blx	r8
 8010a46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a48:	2000      	movs	r0, #0
 8010a4a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8010a4e:	b003      	add	sp, #12
 8010a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a54:	6800      	ldr	r0, [r0, #0]
 8010a56:	b120      	cbz	r0, 8010a62 <rcl_wait_set_resize+0x1be>
 8010a58:	4651      	mov	r1, sl
 8010a5a:	47d8      	blx	fp
 8010a5c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a5e:	f8c5 8000 	str.w	r8, [r5]
 8010a62:	68a0      	ldr	r0, [r4, #8]
 8010a64:	2800      	cmp	r0, #0
 8010a66:	f43f af61 	beq.w	801092c <rcl_wait_set_resize+0x88>
 8010a6a:	4651      	mov	r1, sl
 8010a6c:	47d8      	blx	fp
 8010a6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a70:	2300      	movs	r3, #0
 8010a72:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010a76:	e759      	b.n	801092c <rcl_wait_set_resize+0x88>
 8010a78:	6828      	ldr	r0, [r5, #0]
 8010a7a:	9301      	str	r3, [sp, #4]
 8010a7c:	4651      	mov	r1, sl
 8010a7e:	47d8      	blx	fp
 8010a80:	9b01      	ldr	r3, [sp, #4]
 8010a82:	e9c5 3300 	strd	r3, r3, [r5]
 8010a86:	200a      	movs	r0, #10
 8010a88:	b003      	add	sp, #12
 8010a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a8e:	00b4      	lsls	r4, r6, #2
 8010a90:	68a8      	ldr	r0, [r5, #8]
 8010a92:	464a      	mov	r2, r9
 8010a94:	4621      	mov	r1, r4
 8010a96:	4798      	blx	r3
 8010a98:	60a8      	str	r0, [r5, #8]
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	d0f3      	beq.n	8010a86 <rcl_wait_set_resize+0x1e2>
 8010a9e:	4622      	mov	r2, r4
 8010aa0:	4641      	mov	r1, r8
 8010aa2:	f005 fda5 	bl	80165f0 <memset>
 8010aa6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010aa8:	60ee      	str	r6, [r5, #12]
 8010aaa:	f04f 0800 	mov.w	r8, #0
 8010aae:	19f6      	adds	r6, r6, r7
 8010ab0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010ab4:	f8c4 8010 	str.w	r8, [r4, #16]
 8010ab8:	f43f af54 	beq.w	8010964 <rcl_wait_set_resize+0xc0>
 8010abc:	00b6      	lsls	r6, r6, #2
 8010abe:	464a      	mov	r2, r9
 8010ac0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010ac2:	6960      	ldr	r0, [r4, #20]
 8010ac4:	4631      	mov	r1, r6
 8010ac6:	4798      	blx	r3
 8010ac8:	4681      	mov	r9, r0
 8010aca:	6160      	str	r0, [r4, #20]
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d076      	beq.n	8010bbe <rcl_wait_set_resize+0x31a>
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	4641      	mov	r1, r8
 8010ad4:	f005 fd8c 	bl	80165f0 <memset>
 8010ad8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ada:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010ade:	e74a      	b.n	8010976 <rcl_wait_set_resize+0xd2>
 8010ae0:	00bc      	lsls	r4, r7, #2
 8010ae2:	6928      	ldr	r0, [r5, #16]
 8010ae4:	464a      	mov	r2, r9
 8010ae6:	4621      	mov	r1, r4
 8010ae8:	47c0      	blx	r8
 8010aea:	6128      	str	r0, [r5, #16]
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d0ca      	beq.n	8010a86 <rcl_wait_set_resize+0x1e2>
 8010af0:	4622      	mov	r2, r4
 8010af2:	4631      	mov	r1, r6
 8010af4:	f005 fd7c 	bl	80165f0 <memset>
 8010af8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010afa:	616f      	str	r7, [r5, #20]
 8010afc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010b00:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010b04:	e749      	b.n	801099a <rcl_wait_set_resize+0xf6>
 8010b06:	009c      	lsls	r4, r3, #2
 8010b08:	69a8      	ldr	r0, [r5, #24]
 8010b0a:	464a      	mov	r2, r9
 8010b0c:	4621      	mov	r1, r4
 8010b0e:	47c0      	blx	r8
 8010b10:	61a8      	str	r0, [r5, #24]
 8010b12:	2800      	cmp	r0, #0
 8010b14:	d0b7      	beq.n	8010a86 <rcl_wait_set_resize+0x1e2>
 8010b16:	4622      	mov	r2, r4
 8010b18:	4631      	mov	r1, r6
 8010b1a:	f005 fd69 	bl	80165f0 <memset>
 8010b1e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8010b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b22:	61eb      	str	r3, [r5, #28]
 8010b24:	6a38      	ldr	r0, [r7, #32]
 8010b26:	61fe      	str	r6, [r7, #28]
 8010b28:	464a      	mov	r2, r9
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	47c0      	blx	r8
 8010b2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010b30:	6238      	str	r0, [r7, #32]
 8010b32:	6a1f      	ldr	r7, [r3, #32]
 8010b34:	2f00      	cmp	r7, #0
 8010b36:	d054      	beq.n	8010be2 <rcl_wait_set_resize+0x33e>
 8010b38:	4622      	mov	r2, r4
 8010b3a:	4631      	mov	r1, r6
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	f005 fd57 	bl	80165f0 <memset>
 8010b42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b44:	e73f      	b.n	80109c6 <rcl_wait_set_resize+0x122>
 8010b46:	6a28      	ldr	r0, [r5, #32]
 8010b48:	b120      	cbz	r0, 8010b54 <rcl_wait_set_resize+0x2b0>
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	47c0      	blx	r8
 8010b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b52:	622b      	str	r3, [r5, #32]
 8010b54:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f43f af60 	beq.w	8010a1c <rcl_wait_set_resize+0x178>
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	47c0      	blx	r8
 8010b60:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010b62:	2300      	movs	r3, #0
 8010b64:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8010b68:	e758      	b.n	8010a1c <rcl_wait_set_resize+0x178>
 8010b6a:	009c      	lsls	r4, r3, #2
 8010b6c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010b6e:	463a      	mov	r2, r7
 8010b70:	4621      	mov	r1, r4
 8010b72:	47c8      	blx	r9
 8010b74:	62a8      	str	r0, [r5, #40]	@ 0x28
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d085      	beq.n	8010a86 <rcl_wait_set_resize+0x1e2>
 8010b7a:	4622      	mov	r2, r4
 8010b7c:	4631      	mov	r1, r6
 8010b7e:	f005 fd37 	bl	80165f0 <memset>
 8010b82:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8010b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b88:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8010b8a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010b8e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8010b92:	463a      	mov	r2, r7
 8010b94:	4621      	mov	r1, r4
 8010b96:	47c8      	blx	r9
 8010b98:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010b9a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8010b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ba0:	b36b      	cbz	r3, 8010bfe <rcl_wait_set_resize+0x35a>
 8010ba2:	4622      	mov	r2, r4
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f005 fd22 	bl	80165f0 <memset>
 8010bac:	4630      	mov	r0, r6
 8010bae:	b003      	add	sp, #12
 8010bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb4:	200b      	movs	r0, #11
 8010bb6:	4770      	bx	lr
 8010bb8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010bbc:	e764      	b.n	8010a88 <rcl_wait_set_resize+0x1e4>
 8010bbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010bc0:	68a8      	ldr	r0, [r5, #8]
 8010bc2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bc6:	4798      	blx	r3
 8010bc8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010bca:	6928      	ldr	r0, [r5, #16]
 8010bcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010bce:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010bd0:	f8c5 900c 	str.w	r9, [r5, #12]
 8010bd4:	f8c5 9008 	str.w	r9, [r5, #8]
 8010bd8:	4790      	blx	r2
 8010bda:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010bde:	200a      	movs	r0, #10
 8010be0:	e752      	b.n	8010a88 <rcl_wait_set_resize+0x1e4>
 8010be2:	69a8      	ldr	r0, [r5, #24]
 8010be4:	4649      	mov	r1, r9
 8010be6:	47d0      	blx	sl
 8010be8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010bec:	200a      	movs	r0, #10
 8010bee:	e74b      	b.n	8010a88 <rcl_wait_set_resize+0x1e4>
 8010bf0:	6a28      	ldr	r0, [r5, #32]
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	47c0      	blx	r8
 8010bf6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010bfa:	200a      	movs	r0, #10
 8010bfc:	e744      	b.n	8010a88 <rcl_wait_set_resize+0x1e4>
 8010bfe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010c00:	9301      	str	r3, [sp, #4]
 8010c02:	4639      	mov	r1, r7
 8010c04:	47c0      	blx	r8
 8010c06:	9b01      	ldr	r3, [sp, #4]
 8010c08:	200a      	movs	r0, #10
 8010c0a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010c0e:	e73b      	b.n	8010a88 <rcl_wait_set_resize+0x1e4>

08010c10 <rcl_wait_set_init>:
 8010c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c14:	b084      	sub	sp, #16
 8010c16:	4604      	mov	r4, r0
 8010c18:	a810      	add	r0, sp, #64	@ 0x40
 8010c1a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8010c1e:	460f      	mov	r7, r1
 8010c20:	4690      	mov	r8, r2
 8010c22:	4699      	mov	r9, r3
 8010c24:	f7f9 fd12 	bl	800a64c <rcutils_allocator_is_valid>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	d06b      	beq.n	8010d04 <rcl_wait_set_init+0xf4>
 8010c2c:	2c00      	cmp	r4, #0
 8010c2e:	d069      	beq.n	8010d04 <rcl_wait_set_init+0xf4>
 8010c30:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c32:	b125      	cbz	r5, 8010c3e <rcl_wait_set_init+0x2e>
 8010c34:	2564      	movs	r5, #100	@ 0x64
 8010c36:	4628      	mov	r0, r5
 8010c38:	b004      	add	sp, #16
 8010c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c3e:	f1ba 0f00 	cmp.w	sl, #0
 8010c42:	d05f      	beq.n	8010d04 <rcl_wait_set_init+0xf4>
 8010c44:	4650      	mov	r0, sl
 8010c46:	f7fe fcbb 	bl	800f5c0 <rcl_context_is_valid>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	d067      	beq.n	8010d1e <rcl_wait_set_init+0x10e>
 8010c4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c50:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010c52:	205c      	movs	r0, #92	@ 0x5c
 8010c54:	4798      	blx	r3
 8010c56:	6320      	str	r0, [r4, #48]	@ 0x30
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d062      	beq.n	8010d22 <rcl_wait_set_init+0x112>
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	225c      	movs	r2, #92	@ 0x5c
 8010c60:	f005 fcc6 	bl	80165f0 <memset>
 8010c64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8010c68:	eb03 0e02 	add.w	lr, r3, r2
 8010c6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c6e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010c70:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010c74:	449e      	add	lr, r3
 8010c76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c7a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010c7e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8010c82:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8010c86:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8010c8a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8010c8e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8010c92:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8010c96:	f8da a000 	ldr.w	sl, [sl]
 8010c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c9c:	44c6      	add	lr, r8
 8010c9e:	f8dc 3000 	ldr.w	r3, [ip]
 8010ca2:	602b      	str	r3, [r5, #0]
 8010ca4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8010ca8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8010cac:	f002 fe86 	bl	80139bc <rmw_create_wait_set>
 8010cb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cb2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8010cb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010cb6:	b350      	cbz	r0, 8010d0e <rcl_wait_set_init+0xfe>
 8010cb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cba:	9302      	str	r3, [sp, #8]
 8010cbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	4642      	mov	r2, r8
 8010cc6:	464b      	mov	r3, r9
 8010cc8:	4639      	mov	r1, r7
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7ff fdea 	bl	80108a4 <rcl_wait_set_resize>
 8010cd0:	4605      	mov	r5, r0
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d0af      	beq.n	8010c36 <rcl_wait_set_init+0x26>
 8010cd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cd8:	bb2b      	cbnz	r3, 8010d26 <rcl_wait_set_init+0x116>
 8010cda:	2600      	movs	r6, #0
 8010cdc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010ce0:	9600      	str	r6, [sp, #0]
 8010ce2:	4633      	mov	r3, r6
 8010ce4:	4632      	mov	r2, r6
 8010ce6:	4631      	mov	r1, r6
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f7ff fddb 	bl	80108a4 <rcl_wait_set_resize>
 8010cee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d0a0      	beq.n	8010c36 <rcl_wait_set_init+0x26>
 8010cf4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010cf6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8010cf8:	4798      	blx	r3
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	6326      	str	r6, [r4, #48]	@ 0x30
 8010cfe:	b004      	add	sp, #16
 8010d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d04:	250b      	movs	r5, #11
 8010d06:	4628      	mov	r0, r5
 8010d08:	b004      	add	sp, #16
 8010d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d0e:	2501      	movs	r5, #1
 8010d10:	f002 fe5e 	bl	80139d0 <rmw_destroy_wait_set>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	bf18      	it	ne
 8010d18:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8010d1c:	e7dd      	b.n	8010cda <rcl_wait_set_init+0xca>
 8010d1e:	2565      	movs	r5, #101	@ 0x65
 8010d20:	e789      	b.n	8010c36 <rcl_wait_set_init+0x26>
 8010d22:	250a      	movs	r5, #10
 8010d24:	e787      	b.n	8010c36 <rcl_wait_set_init+0x26>
 8010d26:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010d28:	e7f2      	b.n	8010d10 <rcl_wait_set_init+0x100>
 8010d2a:	bf00      	nop

08010d2c <rcl_wait_set_add_guard_condition>:
 8010d2c:	b318      	cbz	r0, 8010d76 <rcl_wait_set_add_guard_condition+0x4a>
 8010d2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d30:	b570      	push	{r4, r5, r6, lr}
 8010d32:	4604      	mov	r4, r0
 8010d34:	b30b      	cbz	r3, 8010d7a <rcl_wait_set_add_guard_condition+0x4e>
 8010d36:	b319      	cbz	r1, 8010d80 <rcl_wait_set_add_guard_condition+0x54>
 8010d38:	68dd      	ldr	r5, [r3, #12]
 8010d3a:	68c0      	ldr	r0, [r0, #12]
 8010d3c:	4285      	cmp	r5, r0
 8010d3e:	d217      	bcs.n	8010d70 <rcl_wait_set_add_guard_condition+0x44>
 8010d40:	68a0      	ldr	r0, [r4, #8]
 8010d42:	1c6e      	adds	r6, r5, #1
 8010d44:	60de      	str	r6, [r3, #12]
 8010d46:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010d4a:	b102      	cbz	r2, 8010d4e <rcl_wait_set_add_guard_condition+0x22>
 8010d4c:	6015      	str	r5, [r2, #0]
 8010d4e:	4608      	mov	r0, r1
 8010d50:	f004 fe66 	bl	8015a20 <rcl_guard_condition_get_rmw_handle>
 8010d54:	b150      	cbz	r0, 8010d6c <rcl_wait_set_add_guard_condition+0x40>
 8010d56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d58:	6842      	ldr	r2, [r0, #4]
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010d62:	6913      	ldr	r3, [r2, #16]
 8010d64:	3301      	adds	r3, #1
 8010d66:	2000      	movs	r0, #0
 8010d68:	6113      	str	r3, [r2, #16]
 8010d6a:	bd70      	pop	{r4, r5, r6, pc}
 8010d6c:	2001      	movs	r0, #1
 8010d6e:	bd70      	pop	{r4, r5, r6, pc}
 8010d70:	f240 3086 	movw	r0, #902	@ 0x386
 8010d74:	bd70      	pop	{r4, r5, r6, pc}
 8010d76:	200b      	movs	r0, #11
 8010d78:	4770      	bx	lr
 8010d7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}
 8010d80:	200b      	movs	r0, #11
 8010d82:	bd70      	pop	{r4, r5, r6, pc}

08010d84 <rcl_wait_set_add_timer>:
 8010d84:	b328      	cbz	r0, 8010dd2 <rcl_wait_set_add_timer+0x4e>
 8010d86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d88:	b570      	push	{r4, r5, r6, lr}
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	b31b      	cbz	r3, 8010dd6 <rcl_wait_set_add_timer+0x52>
 8010d8e:	b329      	cbz	r1, 8010ddc <rcl_wait_set_add_timer+0x58>
 8010d90:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010d92:	6965      	ldr	r5, [r4, #20]
 8010d94:	42a8      	cmp	r0, r5
 8010d96:	d219      	bcs.n	8010dcc <rcl_wait_set_add_timer+0x48>
 8010d98:	6925      	ldr	r5, [r4, #16]
 8010d9a:	1c46      	adds	r6, r0, #1
 8010d9c:	641e      	str	r6, [r3, #64]	@ 0x40
 8010d9e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8010da2:	b102      	cbz	r2, 8010da6 <rcl_wait_set_add_timer+0x22>
 8010da4:	6010      	str	r0, [r2, #0]
 8010da6:	4608      	mov	r0, r1
 8010da8:	f7ff fc10 	bl	80105cc <rcl_timer_get_guard_condition>
 8010dac:	b168      	cbz	r0, 8010dca <rcl_wait_set_add_timer+0x46>
 8010dae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010db0:	68e3      	ldr	r3, [r4, #12]
 8010db2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8010db4:	3b01      	subs	r3, #1
 8010db6:	441d      	add	r5, r3
 8010db8:	f004 fe32 	bl	8015a20 <rcl_guard_condition_get_rmw_handle>
 8010dbc:	b180      	cbz	r0, 8010de0 <rcl_wait_set_add_timer+0x5c>
 8010dbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010dc0:	6842      	ldr	r2, [r0, #4]
 8010dc2:	695b      	ldr	r3, [r3, #20]
 8010dc4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dc8:	2000      	movs	r0, #0
 8010dca:	bd70      	pop	{r4, r5, r6, pc}
 8010dcc:	f240 3086 	movw	r0, #902	@ 0x386
 8010dd0:	bd70      	pop	{r4, r5, r6, pc}
 8010dd2:	200b      	movs	r0, #11
 8010dd4:	4770      	bx	lr
 8010dd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	200b      	movs	r0, #11
 8010dde:	bd70      	pop	{r4, r5, r6, pc}
 8010de0:	2001      	movs	r0, #1
 8010de2:	bd70      	pop	{r4, r5, r6, pc}

08010de4 <rcl_wait_set_add_client>:
 8010de4:	b318      	cbz	r0, 8010e2e <rcl_wait_set_add_client+0x4a>
 8010de6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010de8:	b570      	push	{r4, r5, r6, lr}
 8010dea:	4604      	mov	r4, r0
 8010dec:	b30b      	cbz	r3, 8010e32 <rcl_wait_set_add_client+0x4e>
 8010dee:	b319      	cbz	r1, 8010e38 <rcl_wait_set_add_client+0x54>
 8010df0:	699d      	ldr	r5, [r3, #24]
 8010df2:	69c0      	ldr	r0, [r0, #28]
 8010df4:	4285      	cmp	r5, r0
 8010df6:	d217      	bcs.n	8010e28 <rcl_wait_set_add_client+0x44>
 8010df8:	69a0      	ldr	r0, [r4, #24]
 8010dfa:	1c6e      	adds	r6, r5, #1
 8010dfc:	619e      	str	r6, [r3, #24]
 8010dfe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010e02:	b102      	cbz	r2, 8010e06 <rcl_wait_set_add_client+0x22>
 8010e04:	6015      	str	r5, [r2, #0]
 8010e06:	4608      	mov	r0, r1
 8010e08:	f7fe fb2e 	bl	800f468 <rcl_client_get_rmw_handle>
 8010e0c:	b150      	cbz	r0, 8010e24 <rcl_wait_set_add_client+0x40>
 8010e0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e10:	6842      	ldr	r2, [r0, #4]
 8010e12:	6a1b      	ldr	r3, [r3, #32]
 8010e14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010e1a:	69d3      	ldr	r3, [r2, #28]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	2000      	movs	r0, #0
 8010e20:	61d3      	str	r3, [r2, #28]
 8010e22:	bd70      	pop	{r4, r5, r6, pc}
 8010e24:	2001      	movs	r0, #1
 8010e26:	bd70      	pop	{r4, r5, r6, pc}
 8010e28:	f240 3086 	movw	r0, #902	@ 0x386
 8010e2c:	bd70      	pop	{r4, r5, r6, pc}
 8010e2e:	200b      	movs	r0, #11
 8010e30:	4770      	bx	lr
 8010e32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e36:	bd70      	pop	{r4, r5, r6, pc}
 8010e38:	200b      	movs	r0, #11
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}

08010e3c <rcl_wait_set_add_service>:
 8010e3c:	b318      	cbz	r0, 8010e86 <rcl_wait_set_add_service+0x4a>
 8010e3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	4604      	mov	r4, r0
 8010e44:	b30b      	cbz	r3, 8010e8a <rcl_wait_set_add_service+0x4e>
 8010e46:	b319      	cbz	r1, 8010e90 <rcl_wait_set_add_service+0x54>
 8010e48:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010e4a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010e4c:	4285      	cmp	r5, r0
 8010e4e:	d217      	bcs.n	8010e80 <rcl_wait_set_add_service+0x44>
 8010e50:	6a20      	ldr	r0, [r4, #32]
 8010e52:	1c6e      	adds	r6, r5, #1
 8010e54:	625e      	str	r6, [r3, #36]	@ 0x24
 8010e56:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010e5a:	b102      	cbz	r2, 8010e5e <rcl_wait_set_add_service+0x22>
 8010e5c:	6015      	str	r5, [r2, #0]
 8010e5e:	4608      	mov	r0, r1
 8010e60:	f7ff f86e 	bl	800ff40 <rcl_service_get_rmw_handle>
 8010e64:	b150      	cbz	r0, 8010e7c <rcl_wait_set_add_service+0x40>
 8010e66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e68:	6842      	ldr	r2, [r0, #4]
 8010e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e70:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010e72:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010e74:	3301      	adds	r3, #1
 8010e76:	2000      	movs	r0, #0
 8010e78:	6293      	str	r3, [r2, #40]	@ 0x28
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	2001      	movs	r0, #1
 8010e7e:	bd70      	pop	{r4, r5, r6, pc}
 8010e80:	f240 3086 	movw	r0, #902	@ 0x386
 8010e84:	bd70      	pop	{r4, r5, r6, pc}
 8010e86:	200b      	movs	r0, #11
 8010e88:	4770      	bx	lr
 8010e8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e8e:	bd70      	pop	{r4, r5, r6, pc}
 8010e90:	200b      	movs	r0, #11
 8010e92:	bd70      	pop	{r4, r5, r6, pc}
 8010e94:	0000      	movs	r0, r0
	...

08010e98 <rcl_wait>:
 8010e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	ed2d 8b02 	vpush	{d8}
 8010ea0:	b08d      	sub	sp, #52	@ 0x34
 8010ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f000 8143 	beq.w	8011132 <rcl_wait+0x29a>
 8010eac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010eae:	4605      	mov	r5, r0
 8010eb0:	2e00      	cmp	r6, #0
 8010eb2:	f000 8112 	beq.w	80110da <rcl_wait+0x242>
 8010eb6:	6843      	ldr	r3, [r0, #4]
 8010eb8:	b983      	cbnz	r3, 8010edc <rcl_wait+0x44>
 8010eba:	68eb      	ldr	r3, [r5, #12]
 8010ebc:	b973      	cbnz	r3, 8010edc <rcl_wait+0x44>
 8010ebe:	696b      	ldr	r3, [r5, #20]
 8010ec0:	b963      	cbnz	r3, 8010edc <rcl_wait+0x44>
 8010ec2:	69eb      	ldr	r3, [r5, #28]
 8010ec4:	b953      	cbnz	r3, 8010edc <rcl_wait+0x44>
 8010ec6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010ec8:	b943      	cbnz	r3, 8010edc <rcl_wait+0x44>
 8010eca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8010ecc:	b933      	cbnz	r3, 8010edc <rcl_wait+0x44>
 8010ece:	f240 3085 	movw	r0, #901	@ 0x385
 8010ed2:	b00d      	add	sp, #52	@ 0x34
 8010ed4:	ecbd 8b02 	vpop	{d8}
 8010ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	9b05      	ldr	r3, [sp, #20]
 8010ee4:	f173 0300 	sbcs.w	r3, r3, #0
 8010ee8:	f2c0 80f0 	blt.w	80110cc <rcl_wait+0x234>
 8010eec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010ef0:	4643      	mov	r3, r8
 8010ef2:	2a00      	cmp	r2, #0
 8010ef4:	f000 8133 	beq.w	801115e <rcl_wait+0x2c6>
 8010ef8:	2400      	movs	r4, #0
 8010efa:	4613      	mov	r3, r2
 8010efc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011170 <rcl_wait+0x2d8>
 8010f00:	46a2      	mov	sl, r4
 8010f02:	46a3      	mov	fp, r4
 8010f04:	f240 3921 	movw	r9, #801	@ 0x321
 8010f08:	4632      	mov	r2, r6
 8010f0a:	e014      	b.n	8010f36 <rcl_wait+0x9e>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d1e0      	bne.n	8010ed2 <rcl_wait+0x3a>
 8010f10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f14:	4542      	cmp	r2, r8
 8010f16:	eb73 0107 	sbcs.w	r1, r3, r7
 8010f1a:	da03      	bge.n	8010f24 <rcl_wait+0x8c>
 8010f1c:	4690      	mov	r8, r2
 8010f1e:	461f      	mov	r7, r3
 8010f20:	f04f 0b01 	mov.w	fp, #1
 8010f24:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010f26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010f28:	3401      	adds	r4, #1
 8010f2a:	f14a 0a00 	adc.w	sl, sl, #0
 8010f2e:	429c      	cmp	r4, r3
 8010f30:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f34:	d228      	bcs.n	8010f88 <rcl_wait+0xf0>
 8010f36:	6928      	ldr	r0, [r5, #16]
 8010f38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f3c:	a908      	add	r1, sp, #32
 8010f3e:	00a6      	lsls	r6, r4, #2
 8010f40:	2800      	cmp	r0, #0
 8010f42:	d0f1      	beq.n	8010f28 <rcl_wait+0x90>
 8010f44:	68eb      	ldr	r3, [r5, #12]
 8010f46:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010f4a:	4423      	add	r3, r4
 8010f4c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010f50:	f1be 0f00 	cmp.w	lr, #0
 8010f54:	d006      	beq.n	8010f64 <rcl_wait+0xcc>
 8010f56:	6913      	ldr	r3, [r2, #16]
 8010f58:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	6113      	str	r3, [r2, #16]
 8010f60:	692b      	ldr	r3, [r5, #16]
 8010f62:	5998      	ldr	r0, [r3, r6]
 8010f64:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010f68:	f7ff fafe 	bl	8010568 <rcl_timer_get_time_until_next_call>
 8010f6c:	4548      	cmp	r0, r9
 8010f6e:	d1cd      	bne.n	8010f0c <rcl_wait+0x74>
 8010f70:	692b      	ldr	r3, [r5, #16]
 8010f72:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010f74:	2100      	movs	r1, #0
 8010f76:	5199      	str	r1, [r3, r6]
 8010f78:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010f7a:	3401      	adds	r4, #1
 8010f7c:	f14a 0a00 	adc.w	sl, sl, #0
 8010f80:	429c      	cmp	r4, r3
 8010f82:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f86:	d3d6      	bcc.n	8010f36 <rcl_wait+0x9e>
 8010f88:	4616      	mov	r6, r2
 8010f8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	46d9      	mov	r9, fp
 8010f92:	f040 80a9 	bne.w	80110e8 <rcl_wait+0x250>
 8010f96:	2300      	movs	r3, #0
 8010f98:	2200      	movs	r2, #0
 8010f9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8010fa2:	ab08      	add	r3, sp, #32
 8010fa4:	9302      	str	r3, [sp, #8]
 8010fa6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8010fa8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8010fac:	e9cd 3200 	strd	r3, r2, [sp]
 8010fb0:	f106 0110 	add.w	r1, r6, #16
 8010fb4:	f106 031c 	add.w	r3, r6, #28
 8010fb8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8010fbc:	1d30      	adds	r0, r6, #4
 8010fbe:	f002 fb85 	bl	80136cc <rmw_wait>
 8010fc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010fc6:	4680      	mov	r8, r0
 8010fc8:	b1ca      	cbz	r2, 8010ffe <rcl_wait+0x166>
 8010fca:	2400      	movs	r4, #0
 8010fcc:	4627      	mov	r7, r4
 8010fce:	692a      	ldr	r2, [r5, #16]
 8010fd0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8010fd4:	f10d 011f 	add.w	r1, sp, #31
 8010fd8:	00a6      	lsls	r6, r4, #2
 8010fda:	b160      	cbz	r0, 8010ff6 <rcl_wait+0x15e>
 8010fdc:	f88d 701f 	strb.w	r7, [sp, #31]
 8010fe0:	f7ff fa88 	bl	80104f4 <rcl_timer_is_ready>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	f47f af74 	bne.w	8010ed2 <rcl_wait+0x3a>
 8010fea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010fee:	b90b      	cbnz	r3, 8010ff4 <rcl_wait+0x15c>
 8010ff0:	692a      	ldr	r2, [r5, #16]
 8010ff2:	5193      	str	r3, [r2, r6]
 8010ff4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ff8:	3401      	adds	r4, #1
 8010ffa:	42a2      	cmp	r2, r4
 8010ffc:	d8e7      	bhi.n	8010fce <rcl_wait+0x136>
 8010ffe:	f038 0002 	bics.w	r0, r8, #2
 8011002:	f040 8090 	bne.w	8011126 <rcl_wait+0x28e>
 8011006:	686e      	ldr	r6, [r5, #4]
 8011008:	4602      	mov	r2, r0
 801100a:	b91e      	cbnz	r6, 8011014 <rcl_wait+0x17c>
 801100c:	e00d      	b.n	801102a <rcl_wait+0x192>
 801100e:	3201      	adds	r2, #1
 8011010:	42b2      	cmp	r2, r6
 8011012:	d00a      	beq.n	801102a <rcl_wait+0x192>
 8011014:	6899      	ldr	r1, [r3, #8]
 8011016:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801101a:	2900      	cmp	r1, #0
 801101c:	d1f7      	bne.n	801100e <rcl_wait+0x176>
 801101e:	682c      	ldr	r4, [r5, #0]
 8011020:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011024:	3201      	adds	r2, #1
 8011026:	42b2      	cmp	r2, r6
 8011028:	d1f4      	bne.n	8011014 <rcl_wait+0x17c>
 801102a:	68ee      	ldr	r6, [r5, #12]
 801102c:	2200      	movs	r2, #0
 801102e:	b91e      	cbnz	r6, 8011038 <rcl_wait+0x1a0>
 8011030:	e00d      	b.n	801104e <rcl_wait+0x1b6>
 8011032:	3201      	adds	r2, #1
 8011034:	42b2      	cmp	r2, r6
 8011036:	d00a      	beq.n	801104e <rcl_wait+0x1b6>
 8011038:	6959      	ldr	r1, [r3, #20]
 801103a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801103e:	2900      	cmp	r1, #0
 8011040:	d1f7      	bne.n	8011032 <rcl_wait+0x19a>
 8011042:	68ac      	ldr	r4, [r5, #8]
 8011044:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011048:	3201      	adds	r2, #1
 801104a:	42b2      	cmp	r2, r6
 801104c:	d1f4      	bne.n	8011038 <rcl_wait+0x1a0>
 801104e:	69ee      	ldr	r6, [r5, #28]
 8011050:	2200      	movs	r2, #0
 8011052:	b91e      	cbnz	r6, 801105c <rcl_wait+0x1c4>
 8011054:	e00d      	b.n	8011072 <rcl_wait+0x1da>
 8011056:	3201      	adds	r2, #1
 8011058:	42b2      	cmp	r2, r6
 801105a:	d00a      	beq.n	8011072 <rcl_wait+0x1da>
 801105c:	6a19      	ldr	r1, [r3, #32]
 801105e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011062:	2900      	cmp	r1, #0
 8011064:	d1f7      	bne.n	8011056 <rcl_wait+0x1be>
 8011066:	69ac      	ldr	r4, [r5, #24]
 8011068:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801106c:	3201      	adds	r2, #1
 801106e:	42b2      	cmp	r2, r6
 8011070:	d1f4      	bne.n	801105c <rcl_wait+0x1c4>
 8011072:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011074:	2200      	movs	r2, #0
 8011076:	b91e      	cbnz	r6, 8011080 <rcl_wait+0x1e8>
 8011078:	e00d      	b.n	8011096 <rcl_wait+0x1fe>
 801107a:	3201      	adds	r2, #1
 801107c:	4296      	cmp	r6, r2
 801107e:	d00a      	beq.n	8011096 <rcl_wait+0x1fe>
 8011080:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011082:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011086:	2900      	cmp	r1, #0
 8011088:	d1f7      	bne.n	801107a <rcl_wait+0x1e2>
 801108a:	6a2c      	ldr	r4, [r5, #32]
 801108c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011090:	3201      	adds	r2, #1
 8011092:	4296      	cmp	r6, r2
 8011094:	d1f4      	bne.n	8011080 <rcl_wait+0x1e8>
 8011096:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011098:	2200      	movs	r2, #0
 801109a:	b91e      	cbnz	r6, 80110a4 <rcl_wait+0x20c>
 801109c:	e00d      	b.n	80110ba <rcl_wait+0x222>
 801109e:	3201      	adds	r2, #1
 80110a0:	42b2      	cmp	r2, r6
 80110a2:	d00a      	beq.n	80110ba <rcl_wait+0x222>
 80110a4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80110a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110aa:	2900      	cmp	r1, #0
 80110ac:	d1f7      	bne.n	801109e <rcl_wait+0x206>
 80110ae:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80110b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80110b4:	3201      	adds	r2, #1
 80110b6:	42b2      	cmp	r2, r6
 80110b8:	d1f4      	bne.n	80110a4 <rcl_wait+0x20c>
 80110ba:	f1b8 0f02 	cmp.w	r8, #2
 80110be:	f47f af08 	bne.w	8010ed2 <rcl_wait+0x3a>
 80110c2:	464b      	mov	r3, r9
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	bf08      	it	eq
 80110c8:	2002      	moveq	r0, #2
 80110ca:	e702      	b.n	8010ed2 <rcl_wait+0x3a>
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	d03a      	beq.n	8011146 <rcl_wait+0x2ae>
 80110d0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80110d4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80110d8:	e70e      	b.n	8010ef8 <rcl_wait+0x60>
 80110da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80110de:	b00d      	add	sp, #52	@ 0x34
 80110e0:	ecbd 8b02 	vpop	{d8}
 80110e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e8:	9b04      	ldr	r3, [sp, #16]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	9b05      	ldr	r3, [sp, #20]
 80110ee:	f173 0300 	sbcs.w	r3, r3, #0
 80110f2:	db24      	blt.n	801113e <rcl_wait+0x2a6>
 80110f4:	2f00      	cmp	r7, #0
 80110f6:	bfbc      	itt	lt
 80110f8:	f04f 0800 	movlt.w	r8, #0
 80110fc:	4647      	movlt	r7, r8
 80110fe:	a31e      	add	r3, pc, #120	@ (adr r3, 8011178 <rcl_wait+0x2e0>)
 8011100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011104:	4640      	mov	r0, r8
 8011106:	4639      	mov	r1, r7
 8011108:	f7ef fc28 	bl	800095c <__aeabi_ldivmod>
 801110c:	a31a      	add	r3, pc, #104	@ (adr r3, 8011178 <rcl_wait+0x2e0>)
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011116:	4640      	mov	r0, r8
 8011118:	4639      	mov	r1, r7
 801111a:	f7ef fc1f 	bl	800095c <__aeabi_ldivmod>
 801111e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011122:	ab08      	add	r3, sp, #32
 8011124:	e73e      	b.n	8010fa4 <rcl_wait+0x10c>
 8011126:	2001      	movs	r0, #1
 8011128:	b00d      	add	sp, #52	@ 0x34
 801112a:	ecbd 8b02 	vpop	{d8}
 801112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011132:	200b      	movs	r0, #11
 8011134:	b00d      	add	sp, #52	@ 0x34
 8011136:	ecbd 8b02 	vpop	{d8}
 801113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113e:	465b      	mov	r3, fp
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1d7      	bne.n	80110f4 <rcl_wait+0x25c>
 8011144:	e72e      	b.n	8010fa4 <rcl_wait+0x10c>
 8011146:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801114a:	430b      	orrs	r3, r1
 801114c:	bf08      	it	eq
 801114e:	4691      	moveq	r9, r2
 8011150:	f43f af21 	beq.w	8010f96 <rcl_wait+0xfe>
 8011154:	9b04      	ldr	r3, [sp, #16]
 8011156:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801115a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801115e:	2b01      	cmp	r3, #1
 8011160:	9b05      	ldr	r3, [sp, #20]
 8011162:	f173 0300 	sbcs.w	r3, r3, #0
 8011166:	f04f 0300 	mov.w	r3, #0
 801116a:	4699      	mov	r9, r3
 801116c:	dac2      	bge.n	80110f4 <rcl_wait+0x25c>
 801116e:	e719      	b.n	8010fa4 <rcl_wait+0x10c>
 8011170:	ffffffff 	.word	0xffffffff
 8011174:	7fffffff 	.word	0x7fffffff
 8011178:	3b9aca00 	.word	0x3b9aca00
 801117c:	00000000 	.word	0x00000000

08011180 <rcl_action_take_goal_response>:
 8011180:	2800      	cmp	r0, #0
 8011182:	d039      	beq.n	80111f8 <rcl_action_take_goal_response+0x78>
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	4604      	mov	r4, r0
 8011188:	6800      	ldr	r0, [r0, #0]
 801118a:	b380      	cbz	r0, 80111ee <rcl_action_take_goal_response+0x6e>
 801118c:	460d      	mov	r5, r1
 801118e:	4616      	mov	r6, r2
 8011190:	f7fe f9ee 	bl	800f570 <rcl_client_is_valid>
 8011194:	b330      	cbz	r0, 80111e4 <rcl_action_take_goal_response+0x64>
 8011196:	6820      	ldr	r0, [r4, #0]
 8011198:	3004      	adds	r0, #4
 801119a:	f7fe f9e9 	bl	800f570 <rcl_client_is_valid>
 801119e:	b308      	cbz	r0, 80111e4 <rcl_action_take_goal_response+0x64>
 80111a0:	6820      	ldr	r0, [r4, #0]
 80111a2:	3008      	adds	r0, #8
 80111a4:	f7fe f9e4 	bl	800f570 <rcl_client_is_valid>
 80111a8:	b1e0      	cbz	r0, 80111e4 <rcl_action_take_goal_response+0x64>
 80111aa:	6820      	ldr	r0, [r4, #0]
 80111ac:	300c      	adds	r0, #12
 80111ae:	f7ff f869 	bl	8010284 <rcl_subscription_is_valid>
 80111b2:	b1b8      	cbz	r0, 80111e4 <rcl_action_take_goal_response+0x64>
 80111b4:	6820      	ldr	r0, [r4, #0]
 80111b6:	3010      	adds	r0, #16
 80111b8:	f7ff f864 	bl	8010284 <rcl_subscription_is_valid>
 80111bc:	b190      	cbz	r0, 80111e4 <rcl_action_take_goal_response+0x64>
 80111be:	b1cd      	cbz	r5, 80111f4 <rcl_action_take_goal_response+0x74>
 80111c0:	b1c6      	cbz	r6, 80111f4 <rcl_action_take_goal_response+0x74>
 80111c2:	6820      	ldr	r0, [r4, #0]
 80111c4:	4632      	mov	r2, r6
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7fe f98a 	bl	800f4e0 <rcl_take_response>
 80111cc:	b148      	cbz	r0, 80111e2 <rcl_action_take_goal_response+0x62>
 80111ce:	280a      	cmp	r0, #10
 80111d0:	d007      	beq.n	80111e2 <rcl_action_take_goal_response+0x62>
 80111d2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80111d6:	f640 0337 	movw	r3, #2103	@ 0x837
 80111da:	4290      	cmp	r0, r2
 80111dc:	bf0c      	ite	eq
 80111de:	4618      	moveq	r0, r3
 80111e0:	2001      	movne	r0, #1
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
 80111e4:	f7f9 fa58 	bl	800a698 <rcutils_reset_error>
 80111e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80111ec:	bd70      	pop	{r4, r5, r6, pc}
 80111ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80111f2:	bd70      	pop	{r4, r5, r6, pc}
 80111f4:	200b      	movs	r0, #11
 80111f6:	bd70      	pop	{r4, r5, r6, pc}
 80111f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop

08011200 <rcl_action_send_result_request>:
 8011200:	b390      	cbz	r0, 8011268 <rcl_action_send_result_request+0x68>
 8011202:	b570      	push	{r4, r5, r6, lr}
 8011204:	4604      	mov	r4, r0
 8011206:	6800      	ldr	r0, [r0, #0]
 8011208:	b348      	cbz	r0, 801125e <rcl_action_send_result_request+0x5e>
 801120a:	460d      	mov	r5, r1
 801120c:	4616      	mov	r6, r2
 801120e:	f7fe f9af 	bl	800f570 <rcl_client_is_valid>
 8011212:	b1f8      	cbz	r0, 8011254 <rcl_action_send_result_request+0x54>
 8011214:	6820      	ldr	r0, [r4, #0]
 8011216:	3004      	adds	r0, #4
 8011218:	f7fe f9aa 	bl	800f570 <rcl_client_is_valid>
 801121c:	b1d0      	cbz	r0, 8011254 <rcl_action_send_result_request+0x54>
 801121e:	6820      	ldr	r0, [r4, #0]
 8011220:	3008      	adds	r0, #8
 8011222:	f7fe f9a5 	bl	800f570 <rcl_client_is_valid>
 8011226:	b1a8      	cbz	r0, 8011254 <rcl_action_send_result_request+0x54>
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	300c      	adds	r0, #12
 801122c:	f7ff f82a 	bl	8010284 <rcl_subscription_is_valid>
 8011230:	b180      	cbz	r0, 8011254 <rcl_action_send_result_request+0x54>
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	3010      	adds	r0, #16
 8011236:	f7ff f825 	bl	8010284 <rcl_subscription_is_valid>
 801123a:	b158      	cbz	r0, 8011254 <rcl_action_send_result_request+0x54>
 801123c:	b195      	cbz	r5, 8011264 <rcl_action_send_result_request+0x64>
 801123e:	b18e      	cbz	r6, 8011264 <rcl_action_send_result_request+0x64>
 8011240:	6820      	ldr	r0, [r4, #0]
 8011242:	4632      	mov	r2, r6
 8011244:	4629      	mov	r1, r5
 8011246:	3008      	adds	r0, #8
 8011248:	f7fe f914 	bl	800f474 <rcl_send_request>
 801124c:	3800      	subs	r0, #0
 801124e:	bf18      	it	ne
 8011250:	2001      	movne	r0, #1
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	f7f9 fa20 	bl	800a698 <rcutils_reset_error>
 8011258:	f640 0036 	movw	r0, #2102	@ 0x836
 801125c:	bd70      	pop	{r4, r5, r6, pc}
 801125e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011262:	bd70      	pop	{r4, r5, r6, pc}
 8011264:	200b      	movs	r0, #11
 8011266:	bd70      	pop	{r4, r5, r6, pc}
 8011268:	f640 0036 	movw	r0, #2102	@ 0x836
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop

08011270 <rcl_action_take_result_response>:
 8011270:	2800      	cmp	r0, #0
 8011272:	d03a      	beq.n	80112ea <rcl_action_take_result_response+0x7a>
 8011274:	b570      	push	{r4, r5, r6, lr}
 8011276:	4604      	mov	r4, r0
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	b388      	cbz	r0, 80112e0 <rcl_action_take_result_response+0x70>
 801127c:	460d      	mov	r5, r1
 801127e:	4616      	mov	r6, r2
 8011280:	f7fe f976 	bl	800f570 <rcl_client_is_valid>
 8011284:	b338      	cbz	r0, 80112d6 <rcl_action_take_result_response+0x66>
 8011286:	6820      	ldr	r0, [r4, #0]
 8011288:	3004      	adds	r0, #4
 801128a:	f7fe f971 	bl	800f570 <rcl_client_is_valid>
 801128e:	b310      	cbz	r0, 80112d6 <rcl_action_take_result_response+0x66>
 8011290:	6820      	ldr	r0, [r4, #0]
 8011292:	3008      	adds	r0, #8
 8011294:	f7fe f96c 	bl	800f570 <rcl_client_is_valid>
 8011298:	b1e8      	cbz	r0, 80112d6 <rcl_action_take_result_response+0x66>
 801129a:	6820      	ldr	r0, [r4, #0]
 801129c:	300c      	adds	r0, #12
 801129e:	f7fe fff1 	bl	8010284 <rcl_subscription_is_valid>
 80112a2:	b1c0      	cbz	r0, 80112d6 <rcl_action_take_result_response+0x66>
 80112a4:	6820      	ldr	r0, [r4, #0]
 80112a6:	3010      	adds	r0, #16
 80112a8:	f7fe ffec 	bl	8010284 <rcl_subscription_is_valid>
 80112ac:	b198      	cbz	r0, 80112d6 <rcl_action_take_result_response+0x66>
 80112ae:	b1d5      	cbz	r5, 80112e6 <rcl_action_take_result_response+0x76>
 80112b0:	b1ce      	cbz	r6, 80112e6 <rcl_action_take_result_response+0x76>
 80112b2:	6820      	ldr	r0, [r4, #0]
 80112b4:	4632      	mov	r2, r6
 80112b6:	4629      	mov	r1, r5
 80112b8:	3008      	adds	r0, #8
 80112ba:	f7fe f911 	bl	800f4e0 <rcl_take_response>
 80112be:	b148      	cbz	r0, 80112d4 <rcl_action_take_result_response+0x64>
 80112c0:	280a      	cmp	r0, #10
 80112c2:	d007      	beq.n	80112d4 <rcl_action_take_result_response+0x64>
 80112c4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80112c8:	f640 0337 	movw	r3, #2103	@ 0x837
 80112cc:	4290      	cmp	r0, r2
 80112ce:	bf0c      	ite	eq
 80112d0:	4618      	moveq	r0, r3
 80112d2:	2001      	movne	r0, #1
 80112d4:	bd70      	pop	{r4, r5, r6, pc}
 80112d6:	f7f9 f9df 	bl	800a698 <rcutils_reset_error>
 80112da:	f640 0036 	movw	r0, #2102	@ 0x836
 80112de:	bd70      	pop	{r4, r5, r6, pc}
 80112e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80112e4:	bd70      	pop	{r4, r5, r6, pc}
 80112e6:	200b      	movs	r0, #11
 80112e8:	bd70      	pop	{r4, r5, r6, pc}
 80112ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80112ee:	4770      	bx	lr

080112f0 <rcl_action_take_cancel_response>:
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d03a      	beq.n	801136a <rcl_action_take_cancel_response+0x7a>
 80112f4:	b570      	push	{r4, r5, r6, lr}
 80112f6:	4604      	mov	r4, r0
 80112f8:	6800      	ldr	r0, [r0, #0]
 80112fa:	b388      	cbz	r0, 8011360 <rcl_action_take_cancel_response+0x70>
 80112fc:	460d      	mov	r5, r1
 80112fe:	4616      	mov	r6, r2
 8011300:	f7fe f936 	bl	800f570 <rcl_client_is_valid>
 8011304:	b338      	cbz	r0, 8011356 <rcl_action_take_cancel_response+0x66>
 8011306:	6820      	ldr	r0, [r4, #0]
 8011308:	3004      	adds	r0, #4
 801130a:	f7fe f931 	bl	800f570 <rcl_client_is_valid>
 801130e:	b310      	cbz	r0, 8011356 <rcl_action_take_cancel_response+0x66>
 8011310:	6820      	ldr	r0, [r4, #0]
 8011312:	3008      	adds	r0, #8
 8011314:	f7fe f92c 	bl	800f570 <rcl_client_is_valid>
 8011318:	b1e8      	cbz	r0, 8011356 <rcl_action_take_cancel_response+0x66>
 801131a:	6820      	ldr	r0, [r4, #0]
 801131c:	300c      	adds	r0, #12
 801131e:	f7fe ffb1 	bl	8010284 <rcl_subscription_is_valid>
 8011322:	b1c0      	cbz	r0, 8011356 <rcl_action_take_cancel_response+0x66>
 8011324:	6820      	ldr	r0, [r4, #0]
 8011326:	3010      	adds	r0, #16
 8011328:	f7fe ffac 	bl	8010284 <rcl_subscription_is_valid>
 801132c:	b198      	cbz	r0, 8011356 <rcl_action_take_cancel_response+0x66>
 801132e:	b1d5      	cbz	r5, 8011366 <rcl_action_take_cancel_response+0x76>
 8011330:	b1ce      	cbz	r6, 8011366 <rcl_action_take_cancel_response+0x76>
 8011332:	6820      	ldr	r0, [r4, #0]
 8011334:	4632      	mov	r2, r6
 8011336:	4629      	mov	r1, r5
 8011338:	3004      	adds	r0, #4
 801133a:	f7fe f8d1 	bl	800f4e0 <rcl_take_response>
 801133e:	b148      	cbz	r0, 8011354 <rcl_action_take_cancel_response+0x64>
 8011340:	280a      	cmp	r0, #10
 8011342:	d007      	beq.n	8011354 <rcl_action_take_cancel_response+0x64>
 8011344:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011348:	f640 0337 	movw	r3, #2103	@ 0x837
 801134c:	4290      	cmp	r0, r2
 801134e:	bf0c      	ite	eq
 8011350:	4618      	moveq	r0, r3
 8011352:	2001      	movne	r0, #1
 8011354:	bd70      	pop	{r4, r5, r6, pc}
 8011356:	f7f9 f99f 	bl	800a698 <rcutils_reset_error>
 801135a:	f640 0036 	movw	r0, #2102	@ 0x836
 801135e:	bd70      	pop	{r4, r5, r6, pc}
 8011360:	f640 0036 	movw	r0, #2102	@ 0x836
 8011364:	bd70      	pop	{r4, r5, r6, pc}
 8011366:	200b      	movs	r0, #11
 8011368:	bd70      	pop	{r4, r5, r6, pc}
 801136a:	f640 0036 	movw	r0, #2102	@ 0x836
 801136e:	4770      	bx	lr

08011370 <rcl_action_take_feedback>:
 8011370:	2800      	cmp	r0, #0
 8011372:	d038      	beq.n	80113e6 <rcl_action_take_feedback+0x76>
 8011374:	b530      	push	{r4, r5, lr}
 8011376:	4604      	mov	r4, r0
 8011378:	6800      	ldr	r0, [r0, #0]
 801137a:	b091      	sub	sp, #68	@ 0x44
 801137c:	b378      	cbz	r0, 80113de <rcl_action_take_feedback+0x6e>
 801137e:	460d      	mov	r5, r1
 8011380:	f7fe f8f6 	bl	800f570 <rcl_client_is_valid>
 8011384:	b328      	cbz	r0, 80113d2 <rcl_action_take_feedback+0x62>
 8011386:	6820      	ldr	r0, [r4, #0]
 8011388:	3004      	adds	r0, #4
 801138a:	f7fe f8f1 	bl	800f570 <rcl_client_is_valid>
 801138e:	b300      	cbz	r0, 80113d2 <rcl_action_take_feedback+0x62>
 8011390:	6820      	ldr	r0, [r4, #0]
 8011392:	3008      	adds	r0, #8
 8011394:	f7fe f8ec 	bl	800f570 <rcl_client_is_valid>
 8011398:	b1d8      	cbz	r0, 80113d2 <rcl_action_take_feedback+0x62>
 801139a:	6820      	ldr	r0, [r4, #0]
 801139c:	300c      	adds	r0, #12
 801139e:	f7fe ff71 	bl	8010284 <rcl_subscription_is_valid>
 80113a2:	b1b0      	cbz	r0, 80113d2 <rcl_action_take_feedback+0x62>
 80113a4:	6820      	ldr	r0, [r4, #0]
 80113a6:	3010      	adds	r0, #16
 80113a8:	f7fe ff6c 	bl	8010284 <rcl_subscription_is_valid>
 80113ac:	b188      	cbz	r0, 80113d2 <rcl_action_take_feedback+0x62>
 80113ae:	b1ed      	cbz	r5, 80113ec <rcl_action_take_feedback+0x7c>
 80113b0:	6820      	ldr	r0, [r4, #0]
 80113b2:	2300      	movs	r3, #0
 80113b4:	466a      	mov	r2, sp
 80113b6:	4629      	mov	r1, r5
 80113b8:	300c      	adds	r0, #12
 80113ba:	f7fe ff05 	bl	80101c8 <rcl_take>
 80113be:	b160      	cbz	r0, 80113da <rcl_action_take_feedback+0x6a>
 80113c0:	f240 1391 	movw	r3, #401	@ 0x191
 80113c4:	4298      	cmp	r0, r3
 80113c6:	d014      	beq.n	80113f2 <rcl_action_take_feedback+0x82>
 80113c8:	280a      	cmp	r0, #10
 80113ca:	bf18      	it	ne
 80113cc:	2001      	movne	r0, #1
 80113ce:	b011      	add	sp, #68	@ 0x44
 80113d0:	bd30      	pop	{r4, r5, pc}
 80113d2:	f7f9 f961 	bl	800a698 <rcutils_reset_error>
 80113d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80113da:	b011      	add	sp, #68	@ 0x44
 80113dc:	bd30      	pop	{r4, r5, pc}
 80113de:	f640 0036 	movw	r0, #2102	@ 0x836
 80113e2:	b011      	add	sp, #68	@ 0x44
 80113e4:	bd30      	pop	{r4, r5, pc}
 80113e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80113ea:	4770      	bx	lr
 80113ec:	200b      	movs	r0, #11
 80113ee:	b011      	add	sp, #68	@ 0x44
 80113f0:	bd30      	pop	{r4, r5, pc}
 80113f2:	f640 0037 	movw	r0, #2103	@ 0x837
 80113f6:	e7f0      	b.n	80113da <rcl_action_take_feedback+0x6a>

080113f8 <rcl_action_wait_set_add_action_client>:
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d048      	beq.n	801148e <rcl_action_wait_set_add_action_client+0x96>
 80113fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fe:	460c      	mov	r4, r1
 8011400:	2900      	cmp	r1, #0
 8011402:	d03c      	beq.n	801147e <rcl_action_wait_set_add_action_client+0x86>
 8011404:	4605      	mov	r5, r0
 8011406:	6808      	ldr	r0, [r1, #0]
 8011408:	2800      	cmp	r0, #0
 801140a:	d038      	beq.n	801147e <rcl_action_wait_set_add_action_client+0x86>
 801140c:	4617      	mov	r7, r2
 801140e:	461e      	mov	r6, r3
 8011410:	f7fe f8ae 	bl	800f570 <rcl_client_is_valid>
 8011414:	b3b0      	cbz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x8c>
 8011416:	6820      	ldr	r0, [r4, #0]
 8011418:	3004      	adds	r0, #4
 801141a:	f7fe f8a9 	bl	800f570 <rcl_client_is_valid>
 801141e:	b388      	cbz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x8c>
 8011420:	6820      	ldr	r0, [r4, #0]
 8011422:	3008      	adds	r0, #8
 8011424:	f7fe f8a4 	bl	800f570 <rcl_client_is_valid>
 8011428:	b360      	cbz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x8c>
 801142a:	6820      	ldr	r0, [r4, #0]
 801142c:	300c      	adds	r0, #12
 801142e:	f7fe ff29 	bl	8010284 <rcl_subscription_is_valid>
 8011432:	b338      	cbz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x8c>
 8011434:	6820      	ldr	r0, [r4, #0]
 8011436:	3010      	adds	r0, #16
 8011438:	f7fe ff24 	bl	8010284 <rcl_subscription_is_valid>
 801143c:	b310      	cbz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x8c>
 801143e:	6821      	ldr	r1, [r4, #0]
 8011440:	4628      	mov	r0, r5
 8011442:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011446:	f7ff fccd 	bl	8010de4 <rcl_wait_set_add_client>
 801144a:	b9b8      	cbnz	r0, 801147c <rcl_action_wait_set_add_action_client+0x84>
 801144c:	6821      	ldr	r1, [r4, #0]
 801144e:	4628      	mov	r0, r5
 8011450:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011454:	3104      	adds	r1, #4
 8011456:	f7ff fcc5 	bl	8010de4 <rcl_wait_set_add_client>
 801145a:	b978      	cbnz	r0, 801147c <rcl_action_wait_set_add_action_client+0x84>
 801145c:	6821      	ldr	r1, [r4, #0]
 801145e:	4628      	mov	r0, r5
 8011460:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011464:	3108      	adds	r1, #8
 8011466:	f7ff fcbd 	bl	8010de4 <rcl_wait_set_add_client>
 801146a:	b938      	cbnz	r0, 801147c <rcl_action_wait_set_add_action_client+0x84>
 801146c:	6821      	ldr	r1, [r4, #0]
 801146e:	4628      	mov	r0, r5
 8011470:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011474:	310c      	adds	r1, #12
 8011476:	f7ff f96d 	bl	8010754 <rcl_wait_set_add_subscription>
 801147a:	b158      	cbz	r0, 8011494 <rcl_action_wait_set_add_action_client+0x9c>
 801147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801147e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011484:	f7f9 f908 	bl	800a698 <rcutils_reset_error>
 8011488:	f640 0036 	movw	r0, #2102	@ 0x836
 801148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801148e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011492:	4770      	bx	lr
 8011494:	6821      	ldr	r1, [r4, #0]
 8011496:	4628      	mov	r0, r5
 8011498:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801149c:	3110      	adds	r1, #16
 801149e:	f7ff f959 	bl	8010754 <rcl_wait_set_add_subscription>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	d1ea      	bne.n	801147c <rcl_action_wait_set_add_action_client+0x84>
 80114a6:	b11f      	cbz	r7, 80114b0 <rcl_action_wait_set_add_action_client+0xb8>
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80114ae:	603b      	str	r3, [r7, #0]
 80114b0:	2e00      	cmp	r6, #0
 80114b2:	d0e3      	beq.n	801147c <rcl_action_wait_set_add_action_client+0x84>
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80114ba:	6033      	str	r3, [r6, #0]
 80114bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114be:	bf00      	nop

080114c0 <rcl_action_client_wait_set_get_entities_ready>:
 80114c0:	2800      	cmp	r0, #0
 80114c2:	f000 808d 	beq.w	80115e0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80114c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ca:	460c      	mov	r4, r1
 80114cc:	2900      	cmp	r1, #0
 80114ce:	d077      	beq.n	80115c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80114d0:	4605      	mov	r5, r0
 80114d2:	6808      	ldr	r0, [r1, #0]
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d073      	beq.n	80115c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80114d8:	4616      	mov	r6, r2
 80114da:	461f      	mov	r7, r3
 80114dc:	f7fe f848 	bl	800f570 <rcl_client_is_valid>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d071      	beq.n	80115c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80114e4:	6820      	ldr	r0, [r4, #0]
 80114e6:	3004      	adds	r0, #4
 80114e8:	f7fe f842 	bl	800f570 <rcl_client_is_valid>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d06b      	beq.n	80115c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80114f0:	6820      	ldr	r0, [r4, #0]
 80114f2:	3008      	adds	r0, #8
 80114f4:	f7fe f83c 	bl	800f570 <rcl_client_is_valid>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d065      	beq.n	80115c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80114fc:	6820      	ldr	r0, [r4, #0]
 80114fe:	300c      	adds	r0, #12
 8011500:	f7fe fec0 	bl	8010284 <rcl_subscription_is_valid>
 8011504:	2800      	cmp	r0, #0
 8011506:	d05f      	beq.n	80115c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011508:	6820      	ldr	r0, [r4, #0]
 801150a:	3010      	adds	r0, #16
 801150c:	f7fe feba 	bl	8010284 <rcl_subscription_is_valid>
 8011510:	2800      	cmp	r0, #0
 8011512:	d059      	beq.n	80115c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011514:	2e00      	cmp	r6, #0
 8011516:	d060      	beq.n	80115da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011518:	2f00      	cmp	r7, #0
 801151a:	d05e      	beq.n	80115da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801151c:	9b06      	ldr	r3, [sp, #24]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d05b      	beq.n	80115da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011522:	9b07      	ldr	r3, [sp, #28]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d058      	beq.n	80115da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011528:	9b08      	ldr	r3, [sp, #32]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d055      	beq.n	80115da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	686a      	ldr	r2, [r5, #4]
 8011532:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011536:	428a      	cmp	r2, r1
 8011538:	d94c      	bls.n	80115d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801153a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801153e:	4282      	cmp	r2, r0
 8011540:	d948      	bls.n	80115d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011542:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011546:	69ea      	ldr	r2, [r5, #28]
 8011548:	42a2      	cmp	r2, r4
 801154a:	d943      	bls.n	80115d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801154c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011550:	4562      	cmp	r2, ip
 8011552:	d93f      	bls.n	80115d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011554:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011558:	4572      	cmp	r2, lr
 801155a:	d93b      	bls.n	80115d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801155c:	69aa      	ldr	r2, [r5, #24]
 801155e:	682d      	ldr	r5, [r5, #0]
 8011560:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011564:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011568:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801156c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011570:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011574:	f103 0c0c 	add.w	ip, r3, #12
 8011578:	eba5 050c 	sub.w	r5, r5, ip
 801157c:	fab5 f585 	clz	r5, r5
 8011580:	096d      	lsrs	r5, r5, #5
 8011582:	7035      	strb	r5, [r6, #0]
 8011584:	f103 0510 	add.w	r5, r3, #16
 8011588:	1b64      	subs	r4, r4, r5
 801158a:	fab4 f484 	clz	r4, r4
 801158e:	0964      	lsrs	r4, r4, #5
 8011590:	703c      	strb	r4, [r7, #0]
 8011592:	eba3 0008 	sub.w	r0, r3, r8
 8011596:	1d1c      	adds	r4, r3, #4
 8011598:	3308      	adds	r3, #8
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	fab0 f080 	clz	r0, r0
 80115a0:	9a06      	ldr	r2, [sp, #24]
 80115a2:	0940      	lsrs	r0, r0, #5
 80115a4:	1b09      	subs	r1, r1, r4
 80115a6:	7010      	strb	r0, [r2, #0]
 80115a8:	fab1 f181 	clz	r1, r1
 80115ac:	9a07      	ldr	r2, [sp, #28]
 80115ae:	0949      	lsrs	r1, r1, #5
 80115b0:	7011      	strb	r1, [r2, #0]
 80115b2:	fab3 f383 	clz	r3, r3
 80115b6:	9a08      	ldr	r2, [sp, #32]
 80115b8:	095b      	lsrs	r3, r3, #5
 80115ba:	2000      	movs	r0, #0
 80115bc:	7013      	strb	r3, [r2, #0]
 80115be:	e001      	b.n	80115c4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80115c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80115c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c8:	f7f9 f866 	bl	800a698 <rcutils_reset_error>
 80115cc:	f640 0036 	movw	r0, #2102	@ 0x836
 80115d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d4:	2001      	movs	r0, #1
 80115d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115da:	200b      	movs	r0, #11
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop

080115e8 <rcl_action_take_goal_request>:
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d039      	beq.n	8011660 <rcl_action_take_goal_request+0x78>
 80115ec:	b570      	push	{r4, r5, r6, lr}
 80115ee:	4604      	mov	r4, r0
 80115f0:	6800      	ldr	r0, [r0, #0]
 80115f2:	b380      	cbz	r0, 8011656 <rcl_action_take_goal_request+0x6e>
 80115f4:	460d      	mov	r5, r1
 80115f6:	4616      	mov	r6, r2
 80115f8:	f7fe fd00 	bl	800fffc <rcl_service_is_valid>
 80115fc:	b330      	cbz	r0, 801164c <rcl_action_take_goal_request+0x64>
 80115fe:	6820      	ldr	r0, [r4, #0]
 8011600:	3004      	adds	r0, #4
 8011602:	f7fe fcfb 	bl	800fffc <rcl_service_is_valid>
 8011606:	b308      	cbz	r0, 801164c <rcl_action_take_goal_request+0x64>
 8011608:	6820      	ldr	r0, [r4, #0]
 801160a:	3008      	adds	r0, #8
 801160c:	f7fe fcf6 	bl	800fffc <rcl_service_is_valid>
 8011610:	b1e0      	cbz	r0, 801164c <rcl_action_take_goal_request+0x64>
 8011612:	6820      	ldr	r0, [r4, #0]
 8011614:	300c      	adds	r0, #12
 8011616:	f7f8 f8d5 	bl	80097c4 <rcl_publisher_is_valid>
 801161a:	b1b8      	cbz	r0, 801164c <rcl_action_take_goal_request+0x64>
 801161c:	6820      	ldr	r0, [r4, #0]
 801161e:	3010      	adds	r0, #16
 8011620:	f7f8 f8d0 	bl	80097c4 <rcl_publisher_is_valid>
 8011624:	b190      	cbz	r0, 801164c <rcl_action_take_goal_request+0x64>
 8011626:	b1cd      	cbz	r5, 801165c <rcl_action_take_goal_request+0x74>
 8011628:	b1c6      	cbz	r6, 801165c <rcl_action_take_goal_request+0x74>
 801162a:	6820      	ldr	r0, [r4, #0]
 801162c:	4632      	mov	r2, r6
 801162e:	4629      	mov	r1, r5
 8011630:	f7fe fc8c 	bl	800ff4c <rcl_take_request>
 8011634:	b148      	cbz	r0, 801164a <rcl_action_take_goal_request+0x62>
 8011636:	280a      	cmp	r0, #10
 8011638:	d007      	beq.n	801164a <rcl_action_take_goal_request+0x62>
 801163a:	f240 2259 	movw	r2, #601	@ 0x259
 801163e:	f640 0399 	movw	r3, #2201	@ 0x899
 8011642:	4290      	cmp	r0, r2
 8011644:	bf0c      	ite	eq
 8011646:	4618      	moveq	r0, r3
 8011648:	2001      	movne	r0, #1
 801164a:	bd70      	pop	{r4, r5, r6, pc}
 801164c:	f7f9 f824 	bl	800a698 <rcutils_reset_error>
 8011650:	f640 0098 	movw	r0, #2200	@ 0x898
 8011654:	bd70      	pop	{r4, r5, r6, pc}
 8011656:	f640 0098 	movw	r0, #2200	@ 0x898
 801165a:	bd70      	pop	{r4, r5, r6, pc}
 801165c:	200b      	movs	r0, #11
 801165e:	bd70      	pop	{r4, r5, r6, pc}
 8011660:	f640 0098 	movw	r0, #2200	@ 0x898
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop

08011668 <rcl_action_send_goal_response>:
 8011668:	b390      	cbz	r0, 80116d0 <rcl_action_send_goal_response+0x68>
 801166a:	b570      	push	{r4, r5, r6, lr}
 801166c:	4604      	mov	r4, r0
 801166e:	6800      	ldr	r0, [r0, #0]
 8011670:	b348      	cbz	r0, 80116c6 <rcl_action_send_goal_response+0x5e>
 8011672:	460d      	mov	r5, r1
 8011674:	4616      	mov	r6, r2
 8011676:	f7fe fcc1 	bl	800fffc <rcl_service_is_valid>
 801167a:	b1f8      	cbz	r0, 80116bc <rcl_action_send_goal_response+0x54>
 801167c:	6820      	ldr	r0, [r4, #0]
 801167e:	3004      	adds	r0, #4
 8011680:	f7fe fcbc 	bl	800fffc <rcl_service_is_valid>
 8011684:	b1d0      	cbz	r0, 80116bc <rcl_action_send_goal_response+0x54>
 8011686:	6820      	ldr	r0, [r4, #0]
 8011688:	3008      	adds	r0, #8
 801168a:	f7fe fcb7 	bl	800fffc <rcl_service_is_valid>
 801168e:	b1a8      	cbz	r0, 80116bc <rcl_action_send_goal_response+0x54>
 8011690:	6820      	ldr	r0, [r4, #0]
 8011692:	300c      	adds	r0, #12
 8011694:	f7f8 f896 	bl	80097c4 <rcl_publisher_is_valid>
 8011698:	b180      	cbz	r0, 80116bc <rcl_action_send_goal_response+0x54>
 801169a:	6820      	ldr	r0, [r4, #0]
 801169c:	3010      	adds	r0, #16
 801169e:	f7f8 f891 	bl	80097c4 <rcl_publisher_is_valid>
 80116a2:	b158      	cbz	r0, 80116bc <rcl_action_send_goal_response+0x54>
 80116a4:	b195      	cbz	r5, 80116cc <rcl_action_send_goal_response+0x64>
 80116a6:	b18e      	cbz	r6, 80116cc <rcl_action_send_goal_response+0x64>
 80116a8:	6820      	ldr	r0, [r4, #0]
 80116aa:	4632      	mov	r2, r6
 80116ac:	4629      	mov	r1, r5
 80116ae:	f7fe fc8d 	bl	800ffcc <rcl_send_response>
 80116b2:	b110      	cbz	r0, 80116ba <rcl_action_send_goal_response+0x52>
 80116b4:	2802      	cmp	r0, #2
 80116b6:	bf18      	it	ne
 80116b8:	2001      	movne	r0, #1
 80116ba:	bd70      	pop	{r4, r5, r6, pc}
 80116bc:	f7f8 ffec 	bl	800a698 <rcutils_reset_error>
 80116c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80116c4:	bd70      	pop	{r4, r5, r6, pc}
 80116c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	200b      	movs	r0, #11
 80116ce:	bd70      	pop	{r4, r5, r6, pc}
 80116d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop

080116d8 <rcl_action_take_result_request>:
 80116d8:	2800      	cmp	r0, #0
 80116da:	d03a      	beq.n	8011752 <rcl_action_take_result_request+0x7a>
 80116dc:	b570      	push	{r4, r5, r6, lr}
 80116de:	4604      	mov	r4, r0
 80116e0:	6800      	ldr	r0, [r0, #0]
 80116e2:	b388      	cbz	r0, 8011748 <rcl_action_take_result_request+0x70>
 80116e4:	460d      	mov	r5, r1
 80116e6:	4616      	mov	r6, r2
 80116e8:	f7fe fc88 	bl	800fffc <rcl_service_is_valid>
 80116ec:	b338      	cbz	r0, 801173e <rcl_action_take_result_request+0x66>
 80116ee:	6820      	ldr	r0, [r4, #0]
 80116f0:	3004      	adds	r0, #4
 80116f2:	f7fe fc83 	bl	800fffc <rcl_service_is_valid>
 80116f6:	b310      	cbz	r0, 801173e <rcl_action_take_result_request+0x66>
 80116f8:	6820      	ldr	r0, [r4, #0]
 80116fa:	3008      	adds	r0, #8
 80116fc:	f7fe fc7e 	bl	800fffc <rcl_service_is_valid>
 8011700:	b1e8      	cbz	r0, 801173e <rcl_action_take_result_request+0x66>
 8011702:	6820      	ldr	r0, [r4, #0]
 8011704:	300c      	adds	r0, #12
 8011706:	f7f8 f85d 	bl	80097c4 <rcl_publisher_is_valid>
 801170a:	b1c0      	cbz	r0, 801173e <rcl_action_take_result_request+0x66>
 801170c:	6820      	ldr	r0, [r4, #0]
 801170e:	3010      	adds	r0, #16
 8011710:	f7f8 f858 	bl	80097c4 <rcl_publisher_is_valid>
 8011714:	b198      	cbz	r0, 801173e <rcl_action_take_result_request+0x66>
 8011716:	b1d5      	cbz	r5, 801174e <rcl_action_take_result_request+0x76>
 8011718:	b1ce      	cbz	r6, 801174e <rcl_action_take_result_request+0x76>
 801171a:	6820      	ldr	r0, [r4, #0]
 801171c:	4632      	mov	r2, r6
 801171e:	4629      	mov	r1, r5
 8011720:	3008      	adds	r0, #8
 8011722:	f7fe fc13 	bl	800ff4c <rcl_take_request>
 8011726:	b148      	cbz	r0, 801173c <rcl_action_take_result_request+0x64>
 8011728:	280a      	cmp	r0, #10
 801172a:	d007      	beq.n	801173c <rcl_action_take_result_request+0x64>
 801172c:	f240 2259 	movw	r2, #601	@ 0x259
 8011730:	f640 0399 	movw	r3, #2201	@ 0x899
 8011734:	4290      	cmp	r0, r2
 8011736:	bf0c      	ite	eq
 8011738:	4618      	moveq	r0, r3
 801173a:	2001      	movne	r0, #1
 801173c:	bd70      	pop	{r4, r5, r6, pc}
 801173e:	f7f8 ffab 	bl	800a698 <rcutils_reset_error>
 8011742:	f640 0098 	movw	r0, #2200	@ 0x898
 8011746:	bd70      	pop	{r4, r5, r6, pc}
 8011748:	f640 0098 	movw	r0, #2200	@ 0x898
 801174c:	bd70      	pop	{r4, r5, r6, pc}
 801174e:	200b      	movs	r0, #11
 8011750:	bd70      	pop	{r4, r5, r6, pc}
 8011752:	f640 0098 	movw	r0, #2200	@ 0x898
 8011756:	4770      	bx	lr

08011758 <rcl_action_take_cancel_request>:
 8011758:	2800      	cmp	r0, #0
 801175a:	d03a      	beq.n	80117d2 <rcl_action_take_cancel_request+0x7a>
 801175c:	b570      	push	{r4, r5, r6, lr}
 801175e:	4604      	mov	r4, r0
 8011760:	6800      	ldr	r0, [r0, #0]
 8011762:	b388      	cbz	r0, 80117c8 <rcl_action_take_cancel_request+0x70>
 8011764:	460d      	mov	r5, r1
 8011766:	4616      	mov	r6, r2
 8011768:	f7fe fc48 	bl	800fffc <rcl_service_is_valid>
 801176c:	b338      	cbz	r0, 80117be <rcl_action_take_cancel_request+0x66>
 801176e:	6820      	ldr	r0, [r4, #0]
 8011770:	3004      	adds	r0, #4
 8011772:	f7fe fc43 	bl	800fffc <rcl_service_is_valid>
 8011776:	b310      	cbz	r0, 80117be <rcl_action_take_cancel_request+0x66>
 8011778:	6820      	ldr	r0, [r4, #0]
 801177a:	3008      	adds	r0, #8
 801177c:	f7fe fc3e 	bl	800fffc <rcl_service_is_valid>
 8011780:	b1e8      	cbz	r0, 80117be <rcl_action_take_cancel_request+0x66>
 8011782:	6820      	ldr	r0, [r4, #0]
 8011784:	300c      	adds	r0, #12
 8011786:	f7f8 f81d 	bl	80097c4 <rcl_publisher_is_valid>
 801178a:	b1c0      	cbz	r0, 80117be <rcl_action_take_cancel_request+0x66>
 801178c:	6820      	ldr	r0, [r4, #0]
 801178e:	3010      	adds	r0, #16
 8011790:	f7f8 f818 	bl	80097c4 <rcl_publisher_is_valid>
 8011794:	b198      	cbz	r0, 80117be <rcl_action_take_cancel_request+0x66>
 8011796:	b1d5      	cbz	r5, 80117ce <rcl_action_take_cancel_request+0x76>
 8011798:	b1ce      	cbz	r6, 80117ce <rcl_action_take_cancel_request+0x76>
 801179a:	6820      	ldr	r0, [r4, #0]
 801179c:	4632      	mov	r2, r6
 801179e:	4629      	mov	r1, r5
 80117a0:	3004      	adds	r0, #4
 80117a2:	f7fe fbd3 	bl	800ff4c <rcl_take_request>
 80117a6:	b148      	cbz	r0, 80117bc <rcl_action_take_cancel_request+0x64>
 80117a8:	280a      	cmp	r0, #10
 80117aa:	d007      	beq.n	80117bc <rcl_action_take_cancel_request+0x64>
 80117ac:	f240 2259 	movw	r2, #601	@ 0x259
 80117b0:	f640 0399 	movw	r3, #2201	@ 0x899
 80117b4:	4290      	cmp	r0, r2
 80117b6:	bf0c      	ite	eq
 80117b8:	4618      	moveq	r0, r3
 80117ba:	2001      	movne	r0, #1
 80117bc:	bd70      	pop	{r4, r5, r6, pc}
 80117be:	f7f8 ff6b 	bl	800a698 <rcutils_reset_error>
 80117c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80117c6:	bd70      	pop	{r4, r5, r6, pc}
 80117c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80117cc:	bd70      	pop	{r4, r5, r6, pc}
 80117ce:	200b      	movs	r0, #11
 80117d0:	bd70      	pop	{r4, r5, r6, pc}
 80117d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80117d6:	4770      	bx	lr

080117d8 <rcl_action_send_cancel_response>:
 80117d8:	b398      	cbz	r0, 8011842 <rcl_action_send_cancel_response+0x6a>
 80117da:	b570      	push	{r4, r5, r6, lr}
 80117dc:	4604      	mov	r4, r0
 80117de:	6800      	ldr	r0, [r0, #0]
 80117e0:	b350      	cbz	r0, 8011838 <rcl_action_send_cancel_response+0x60>
 80117e2:	460d      	mov	r5, r1
 80117e4:	4616      	mov	r6, r2
 80117e6:	f7fe fc09 	bl	800fffc <rcl_service_is_valid>
 80117ea:	b300      	cbz	r0, 801182e <rcl_action_send_cancel_response+0x56>
 80117ec:	6820      	ldr	r0, [r4, #0]
 80117ee:	3004      	adds	r0, #4
 80117f0:	f7fe fc04 	bl	800fffc <rcl_service_is_valid>
 80117f4:	b1d8      	cbz	r0, 801182e <rcl_action_send_cancel_response+0x56>
 80117f6:	6820      	ldr	r0, [r4, #0]
 80117f8:	3008      	adds	r0, #8
 80117fa:	f7fe fbff 	bl	800fffc <rcl_service_is_valid>
 80117fe:	b1b0      	cbz	r0, 801182e <rcl_action_send_cancel_response+0x56>
 8011800:	6820      	ldr	r0, [r4, #0]
 8011802:	300c      	adds	r0, #12
 8011804:	f7f7 ffde 	bl	80097c4 <rcl_publisher_is_valid>
 8011808:	b188      	cbz	r0, 801182e <rcl_action_send_cancel_response+0x56>
 801180a:	6820      	ldr	r0, [r4, #0]
 801180c:	3010      	adds	r0, #16
 801180e:	f7f7 ffd9 	bl	80097c4 <rcl_publisher_is_valid>
 8011812:	b160      	cbz	r0, 801182e <rcl_action_send_cancel_response+0x56>
 8011814:	b19d      	cbz	r5, 801183e <rcl_action_send_cancel_response+0x66>
 8011816:	b196      	cbz	r6, 801183e <rcl_action_send_cancel_response+0x66>
 8011818:	6820      	ldr	r0, [r4, #0]
 801181a:	4632      	mov	r2, r6
 801181c:	4629      	mov	r1, r5
 801181e:	3004      	adds	r0, #4
 8011820:	f7fe fbd4 	bl	800ffcc <rcl_send_response>
 8011824:	b110      	cbz	r0, 801182c <rcl_action_send_cancel_response+0x54>
 8011826:	2802      	cmp	r0, #2
 8011828:	bf18      	it	ne
 801182a:	2001      	movne	r0, #1
 801182c:	bd70      	pop	{r4, r5, r6, pc}
 801182e:	f7f8 ff33 	bl	800a698 <rcutils_reset_error>
 8011832:	f640 0098 	movw	r0, #2200	@ 0x898
 8011836:	bd70      	pop	{r4, r5, r6, pc}
 8011838:	f640 0098 	movw	r0, #2200	@ 0x898
 801183c:	bd70      	pop	{r4, r5, r6, pc}
 801183e:	200b      	movs	r0, #11
 8011840:	bd70      	pop	{r4, r5, r6, pc}
 8011842:	f640 0098 	movw	r0, #2200	@ 0x898
 8011846:	4770      	bx	lr

08011848 <rcl_action_wait_set_add_action_server>:
 8011848:	2800      	cmp	r0, #0
 801184a:	d04d      	beq.n	80118e8 <rcl_action_wait_set_add_action_server+0xa0>
 801184c:	b570      	push	{r4, r5, r6, lr}
 801184e:	460c      	mov	r4, r1
 8011850:	b159      	cbz	r1, 801186a <rcl_action_wait_set_add_action_server+0x22>
 8011852:	4605      	mov	r5, r0
 8011854:	6808      	ldr	r0, [r1, #0]
 8011856:	b140      	cbz	r0, 801186a <rcl_action_wait_set_add_action_server+0x22>
 8011858:	4616      	mov	r6, r2
 801185a:	f7fe fbcf 	bl	800fffc <rcl_service_is_valid>
 801185e:	b120      	cbz	r0, 801186a <rcl_action_wait_set_add_action_server+0x22>
 8011860:	6820      	ldr	r0, [r4, #0]
 8011862:	3004      	adds	r0, #4
 8011864:	f7fe fbca 	bl	800fffc <rcl_service_is_valid>
 8011868:	b910      	cbnz	r0, 8011870 <rcl_action_wait_set_add_action_server+0x28>
 801186a:	f640 0098 	movw	r0, #2200	@ 0x898
 801186e:	bd70      	pop	{r4, r5, r6, pc}
 8011870:	6820      	ldr	r0, [r4, #0]
 8011872:	3008      	adds	r0, #8
 8011874:	f7fe fbc2 	bl	800fffc <rcl_service_is_valid>
 8011878:	2800      	cmp	r0, #0
 801187a:	d0f6      	beq.n	801186a <rcl_action_wait_set_add_action_server+0x22>
 801187c:	6820      	ldr	r0, [r4, #0]
 801187e:	300c      	adds	r0, #12
 8011880:	f7f7 ffb8 	bl	80097f4 <rcl_publisher_is_valid_except_context>
 8011884:	2800      	cmp	r0, #0
 8011886:	d0f0      	beq.n	801186a <rcl_action_wait_set_add_action_server+0x22>
 8011888:	6820      	ldr	r0, [r4, #0]
 801188a:	3010      	adds	r0, #16
 801188c:	f7f7 ffb2 	bl	80097f4 <rcl_publisher_is_valid_except_context>
 8011890:	2800      	cmp	r0, #0
 8011892:	d0ea      	beq.n	801186a <rcl_action_wait_set_add_action_server+0x22>
 8011894:	6821      	ldr	r1, [r4, #0]
 8011896:	4628      	mov	r0, r5
 8011898:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801189c:	f7ff face 	bl	8010e3c <rcl_wait_set_add_service>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d1e4      	bne.n	801186e <rcl_action_wait_set_add_action_server+0x26>
 80118a4:	6821      	ldr	r1, [r4, #0]
 80118a6:	4628      	mov	r0, r5
 80118a8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80118ac:	3104      	adds	r1, #4
 80118ae:	f7ff fac5 	bl	8010e3c <rcl_wait_set_add_service>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d1db      	bne.n	801186e <rcl_action_wait_set_add_action_server+0x26>
 80118b6:	6821      	ldr	r1, [r4, #0]
 80118b8:	4628      	mov	r0, r5
 80118ba:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80118be:	3108      	adds	r1, #8
 80118c0:	f7ff fabc 	bl	8010e3c <rcl_wait_set_add_service>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d1d2      	bne.n	801186e <rcl_action_wait_set_add_action_server+0x26>
 80118c8:	6821      	ldr	r1, [r4, #0]
 80118ca:	4628      	mov	r0, r5
 80118cc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80118d0:	3114      	adds	r1, #20
 80118d2:	f7ff fa57 	bl	8010d84 <rcl_wait_set_add_timer>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d1c9      	bne.n	801186e <rcl_action_wait_set_add_action_server+0x26>
 80118da:	2e00      	cmp	r6, #0
 80118dc:	d0c7      	beq.n	801186e <rcl_action_wait_set_add_action_server+0x26>
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80118e4:	6033      	str	r3, [r6, #0]
 80118e6:	bd70      	pop	{r4, r5, r6, pc}
 80118e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop

080118f0 <rcl_action_server_wait_set_get_entities_ready>:
 80118f0:	2800      	cmp	r0, #0
 80118f2:	d05a      	beq.n	80119aa <rcl_action_server_wait_set_get_entities_ready+0xba>
 80118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f6:	460c      	mov	r4, r1
 80118f8:	b161      	cbz	r1, 8011914 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80118fa:	4605      	mov	r5, r0
 80118fc:	6808      	ldr	r0, [r1, #0]
 80118fe:	b148      	cbz	r0, 8011914 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011900:	4616      	mov	r6, r2
 8011902:	461f      	mov	r7, r3
 8011904:	f7fe fb7a 	bl	800fffc <rcl_service_is_valid>
 8011908:	b120      	cbz	r0, 8011914 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801190a:	6820      	ldr	r0, [r4, #0]
 801190c:	3004      	adds	r0, #4
 801190e:	f7fe fb75 	bl	800fffc <rcl_service_is_valid>
 8011912:	b910      	cbnz	r0, 801191a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011914:	f640 0098 	movw	r0, #2200	@ 0x898
 8011918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801191a:	6820      	ldr	r0, [r4, #0]
 801191c:	3008      	adds	r0, #8
 801191e:	f7fe fb6d 	bl	800fffc <rcl_service_is_valid>
 8011922:	2800      	cmp	r0, #0
 8011924:	d0f6      	beq.n	8011914 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011926:	6820      	ldr	r0, [r4, #0]
 8011928:	300c      	adds	r0, #12
 801192a:	f7f7 ff63 	bl	80097f4 <rcl_publisher_is_valid_except_context>
 801192e:	2800      	cmp	r0, #0
 8011930:	d0f0      	beq.n	8011914 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011932:	6820      	ldr	r0, [r4, #0]
 8011934:	3010      	adds	r0, #16
 8011936:	f7f7 ff5d 	bl	80097f4 <rcl_publisher_is_valid_except_context>
 801193a:	2800      	cmp	r0, #0
 801193c:	d0ea      	beq.n	8011914 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801193e:	b3be      	cbz	r6, 80119b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011940:	b3b7      	cbz	r7, 80119b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011942:	9b06      	ldr	r3, [sp, #24]
 8011944:	b3a3      	cbz	r3, 80119b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011946:	9b07      	ldr	r3, [sp, #28]
 8011948:	b393      	cbz	r3, 80119b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801194a:	6821      	ldr	r1, [r4, #0]
 801194c:	692a      	ldr	r2, [r5, #16]
 801194e:	6a2c      	ldr	r4, [r5, #32]
 8011950:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8011954:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8011958:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801195c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8011960:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8011964:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011968:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801196c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011970:	1a64      	subs	r4, r4, r1
 8011972:	fab4 f484 	clz	r4, r4
 8011976:	0964      	lsrs	r4, r4, #5
 8011978:	7034      	strb	r4, [r6, #0]
 801197a:	1d0c      	adds	r4, r1, #4
 801197c:	1b1b      	subs	r3, r3, r4
 801197e:	fab3 f383 	clz	r3, r3
 8011982:	095b      	lsrs	r3, r3, #5
 8011984:	f101 0408 	add.w	r4, r1, #8
 8011988:	703b      	strb	r3, [r7, #0]
 801198a:	f101 0314 	add.w	r3, r1, #20
 801198e:	1b01      	subs	r1, r0, r4
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	fab1 f181 	clz	r1, r1
 8011996:	9a06      	ldr	r2, [sp, #24]
 8011998:	0949      	lsrs	r1, r1, #5
 801199a:	7011      	strb	r1, [r2, #0]
 801199c:	fab3 f383 	clz	r3, r3
 80119a0:	9a07      	ldr	r2, [sp, #28]
 80119a2:	095b      	lsrs	r3, r3, #5
 80119a4:	2000      	movs	r0, #0
 80119a6:	7013      	strb	r3, [r2, #0]
 80119a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119ae:	4770      	bx	lr
 80119b0:	200b      	movs	r0, #11
 80119b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119b4 <_execute_event_handler>:
 80119b4:	2002      	movs	r0, #2
 80119b6:	4770      	bx	lr

080119b8 <_cancel_goal_event_handler>:
 80119b8:	2003      	movs	r0, #3
 80119ba:	4770      	bx	lr

080119bc <_succeed_event_handler>:
 80119bc:	2004      	movs	r0, #4
 80119be:	4770      	bx	lr

080119c0 <_abort_event_handler>:
 80119c0:	2006      	movs	r0, #6
 80119c2:	4770      	bx	lr

080119c4 <_canceled_event_handler>:
 80119c4:	2005      	movs	r0, #5
 80119c6:	4770      	bx	lr

080119c8 <rcl_action_transition_goal_state>:
 80119c8:	b2c2      	uxtb	r2, r0
 80119ca:	2a06      	cmp	r2, #6
 80119cc:	d80c      	bhi.n	80119e8 <rcl_action_transition_goal_state+0x20>
 80119ce:	2904      	cmp	r1, #4
 80119d0:	d80a      	bhi.n	80119e8 <rcl_action_transition_goal_state+0x20>
 80119d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80119d6:	b410      	push	{r4}
 80119d8:	1853      	adds	r3, r2, r1
 80119da:	4c06      	ldr	r4, [pc, #24]	@ (80119f4 <rcl_action_transition_goal_state+0x2c>)
 80119dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80119e0:	b123      	cbz	r3, 80119ec <rcl_action_transition_goal_state+0x24>
 80119e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119e6:	4718      	bx	r3
 80119e8:	2000      	movs	r0, #0
 80119ea:	4770      	bx	lr
 80119ec:	2000      	movs	r0, #0
 80119ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	08017b3c 	.word	0x08017b3c

080119f8 <rcl_action_get_zero_initialized_cancel_response>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	4c07      	ldr	r4, [pc, #28]	@ (8011a18 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80119fc:	4686      	mov	lr, r0
 80119fe:	4684      	mov	ip, r0
 8011a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a0c:	6823      	ldr	r3, [r4, #0]
 8011a0e:	f8cc 3000 	str.w	r3, [ip]
 8011a12:	4670      	mov	r0, lr
 8011a14:	bd10      	pop	{r4, pc}
 8011a16:	bf00      	nop
 8011a18:	08017bc8 	.word	0x08017bc8

08011a1c <rclc_action_send_result_request>:
 8011a1c:	b1d0      	cbz	r0, 8011a54 <rclc_action_send_result_request+0x38>
 8011a1e:	b500      	push	{lr}
 8011a20:	4684      	mov	ip, r0
 8011a22:	b087      	sub	sp, #28
 8011a24:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011a28:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011a2c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011a30:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011a34:	f10d 0e08 	add.w	lr, sp, #8
 8011a38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a3c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011a40:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8011a44:	a902      	add	r1, sp, #8
 8011a46:	3010      	adds	r0, #16
 8011a48:	f7ff fbda 	bl	8011200 <rcl_action_send_result_request>
 8011a4c:	b920      	cbnz	r0, 8011a58 <rclc_action_send_result_request+0x3c>
 8011a4e:	b007      	add	sp, #28
 8011a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a54:	200b      	movs	r0, #11
 8011a56:	4770      	bx	lr
 8011a58:	9001      	str	r0, [sp, #4]
 8011a5a:	f7f8 fe1d 	bl	800a698 <rcutils_reset_error>
 8011a5e:	9801      	ldr	r0, [sp, #4]
 8011a60:	b007      	add	sp, #28
 8011a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a66:	bf00      	nop

08011a68 <rclc_action_take_goal_handle>:
 8011a68:	b160      	cbz	r0, 8011a84 <rclc_action_take_goal_handle+0x1c>
 8011a6a:	6883      	ldr	r3, [r0, #8]
 8011a6c:	b143      	cbz	r3, 8011a80 <rclc_action_take_goal_handle+0x18>
 8011a6e:	6819      	ldr	r1, [r3, #0]
 8011a70:	6081      	str	r1, [r0, #8]
 8011a72:	2200      	movs	r2, #0
 8011a74:	721a      	strb	r2, [r3, #8]
 8011a76:	68c1      	ldr	r1, [r0, #12]
 8011a78:	6019      	str	r1, [r3, #0]
 8011a7a:	621a      	str	r2, [r3, #32]
 8011a7c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8011a7e:	60c3      	str	r3, [r0, #12]
 8011a80:	4618      	mov	r0, r3
 8011a82:	4770      	bx	lr
 8011a84:	4603      	mov	r3, r0
 8011a86:	e7fb      	b.n	8011a80 <rclc_action_take_goal_handle+0x18>

08011a88 <rclc_action_remove_used_goal_handle>:
 8011a88:	b180      	cbz	r0, 8011aac <rclc_action_remove_used_goal_handle+0x24>
 8011a8a:	b179      	cbz	r1, 8011aac <rclc_action_remove_used_goal_handle+0x24>
 8011a8c:	68c3      	ldr	r3, [r0, #12]
 8011a8e:	4299      	cmp	r1, r3
 8011a90:	d00d      	beq.n	8011aae <rclc_action_remove_used_goal_handle+0x26>
 8011a92:	b12b      	cbz	r3, 8011aa0 <rclc_action_remove_used_goal_handle+0x18>
 8011a94:	681a      	ldr	r2, [r3, #0]
 8011a96:	4291      	cmp	r1, r2
 8011a98:	d003      	beq.n	8011aa2 <rclc_action_remove_used_goal_handle+0x1a>
 8011a9a:	4613      	mov	r3, r2
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1f9      	bne.n	8011a94 <rclc_action_remove_used_goal_handle+0xc>
 8011aa0:	4770      	bx	lr
 8011aa2:	680a      	ldr	r2, [r1, #0]
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	6883      	ldr	r3, [r0, #8]
 8011aa8:	600b      	str	r3, [r1, #0]
 8011aaa:	6081      	str	r1, [r0, #8]
 8011aac:	4770      	bx	lr
 8011aae:	680b      	ldr	r3, [r1, #0]
 8011ab0:	60c3      	str	r3, [r0, #12]
 8011ab2:	e7f8      	b.n	8011aa6 <rclc_action_remove_used_goal_handle+0x1e>

08011ab4 <rclc_action_find_goal_handle_by_uuid>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	b180      	cbz	r0, 8011ada <rclc_action_find_goal_handle_by_uuid+0x26>
 8011ab8:	460d      	mov	r5, r1
 8011aba:	b181      	cbz	r1, 8011ade <rclc_action_find_goal_handle_by_uuid+0x2a>
 8011abc:	68c4      	ldr	r4, [r0, #12]
 8011abe:	b914      	cbnz	r4, 8011ac6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011ac0:	e009      	b.n	8011ad6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ac2:	6824      	ldr	r4, [r4, #0]
 8011ac4:	b13c      	cbz	r4, 8011ad6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ac6:	f104 0009 	add.w	r0, r4, #9
 8011aca:	2210      	movs	r2, #16
 8011acc:	4629      	mov	r1, r5
 8011ace:	f004 fd65 	bl	801659c <memcmp>
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	d1f5      	bne.n	8011ac2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	bd38      	pop	{r3, r4, r5, pc}
 8011ada:	4604      	mov	r4, r0
 8011adc:	e7fb      	b.n	8011ad6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ade:	460c      	mov	r4, r1
 8011ae0:	e7f9      	b.n	8011ad6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ae2:	bf00      	nop

08011ae4 <rclc_action_find_first_handle_by_status>:
 8011ae4:	b140      	cbz	r0, 8011af8 <rclc_action_find_first_handle_by_status+0x14>
 8011ae6:	68c0      	ldr	r0, [r0, #12]
 8011ae8:	b910      	cbnz	r0, 8011af0 <rclc_action_find_first_handle_by_status+0xc>
 8011aea:	e005      	b.n	8011af8 <rclc_action_find_first_handle_by_status+0x14>
 8011aec:	6800      	ldr	r0, [r0, #0]
 8011aee:	b118      	cbz	r0, 8011af8 <rclc_action_find_first_handle_by_status+0x14>
 8011af0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011af4:	428b      	cmp	r3, r1
 8011af6:	d1f9      	bne.n	8011aec <rclc_action_find_first_handle_by_status+0x8>
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop

08011afc <rclc_action_find_first_terminated_handle>:
 8011afc:	b140      	cbz	r0, 8011b10 <rclc_action_find_first_terminated_handle+0x14>
 8011afe:	68c0      	ldr	r0, [r0, #12]
 8011b00:	b910      	cbnz	r0, 8011b08 <rclc_action_find_first_terminated_handle+0xc>
 8011b02:	e005      	b.n	8011b10 <rclc_action_find_first_terminated_handle+0x14>
 8011b04:	6800      	ldr	r0, [r0, #0]
 8011b06:	b118      	cbz	r0, 8011b10 <rclc_action_find_first_terminated_handle+0x14>
 8011b08:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b0c:	2b03      	cmp	r3, #3
 8011b0e:	ddf9      	ble.n	8011b04 <rclc_action_find_first_terminated_handle+0x8>
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop

08011b14 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011b14:	b170      	cbz	r0, 8011b34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b16:	68c0      	ldr	r0, [r0, #12]
 8011b18:	b160      	cbz	r0, 8011b34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b1a:	b410      	push	{r4}
 8011b1c:	e001      	b.n	8011b22 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011b1e:	6800      	ldr	r0, [r0, #0]
 8011b20:	b128      	cbz	r0, 8011b2e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011b22:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8011b26:	4299      	cmp	r1, r3
 8011b28:	bf08      	it	eq
 8011b2a:	4294      	cmpeq	r4, r2
 8011b2c:	d1f7      	bne.n	8011b1e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	4770      	bx	lr
 8011b36:	bf00      	nop

08011b38 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011b38:	b170      	cbz	r0, 8011b58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b3a:	68c0      	ldr	r0, [r0, #12]
 8011b3c:	b160      	cbz	r0, 8011b58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b3e:	b410      	push	{r4}
 8011b40:	e001      	b.n	8011b46 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011b42:	6800      	ldr	r0, [r0, #0]
 8011b44:	b128      	cbz	r0, 8011b52 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011b46:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8011b4a:	4299      	cmp	r1, r3
 8011b4c:	bf08      	it	eq
 8011b4e:	4294      	cmpeq	r4, r2
 8011b50:	d1f7      	bne.n	8011b42 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b56:	4770      	bx	lr
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop

08011b5c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011b5c:	b170      	cbz	r0, 8011b7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b5e:	68c0      	ldr	r0, [r0, #12]
 8011b60:	b160      	cbz	r0, 8011b7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b62:	b410      	push	{r4}
 8011b64:	e001      	b.n	8011b6a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011b66:	6800      	ldr	r0, [r0, #0]
 8011b68:	b128      	cbz	r0, 8011b76 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011b6a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8011b6e:	4299      	cmp	r1, r3
 8011b70:	bf08      	it	eq
 8011b72:	4294      	cmpeq	r4, r2
 8011b74:	d1f7      	bne.n	8011b66 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop

08011b80 <rclc_action_find_first_handle_with_goal_response>:
 8011b80:	b140      	cbz	r0, 8011b94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b82:	68c0      	ldr	r0, [r0, #12]
 8011b84:	b910      	cbnz	r0, 8011b8c <rclc_action_find_first_handle_with_goal_response+0xc>
 8011b86:	e005      	b.n	8011b94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b88:	6800      	ldr	r0, [r0, #0]
 8011b8a:	b118      	cbz	r0, 8011b94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b8c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d0f9      	beq.n	8011b88 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011b94:	4770      	bx	lr
 8011b96:	bf00      	nop

08011b98 <rclc_action_find_first_handle_with_result_response>:
 8011b98:	b140      	cbz	r0, 8011bac <rclc_action_find_first_handle_with_result_response+0x14>
 8011b9a:	68c0      	ldr	r0, [r0, #12]
 8011b9c:	b910      	cbnz	r0, 8011ba4 <rclc_action_find_first_handle_with_result_response+0xc>
 8011b9e:	e005      	b.n	8011bac <rclc_action_find_first_handle_with_result_response+0x14>
 8011ba0:	6800      	ldr	r0, [r0, #0]
 8011ba2:	b118      	cbz	r0, 8011bac <rclc_action_find_first_handle_with_result_response+0x14>
 8011ba4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d0f9      	beq.n	8011ba0 <rclc_action_find_first_handle_with_result_response+0x8>
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop

08011bb0 <rclc_action_server_response_goal_request>:
 8011bb0:	b198      	cbz	r0, 8011bda <rclc_action_server_response_goal_request+0x2a>
 8011bb2:	b510      	push	{r4, lr}
 8011bb4:	6844      	ldr	r4, [r0, #4]
 8011bb6:	b086      	sub	sp, #24
 8011bb8:	2200      	movs	r2, #0
 8011bba:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	9205      	str	r2, [sp, #20]
 8011bc2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8011bc6:	aa03      	add	r2, sp, #12
 8011bc8:	f104 0010 	add.w	r0, r4, #16
 8011bcc:	f88d 300c 	strb.w	r3, [sp, #12]
 8011bd0:	f7ff fd4a 	bl	8011668 <rcl_action_send_goal_response>
 8011bd4:	b918      	cbnz	r0, 8011bde <rclc_action_server_response_goal_request+0x2e>
 8011bd6:	b006      	add	sp, #24
 8011bd8:	bd10      	pop	{r4, pc}
 8011bda:	200b      	movs	r0, #11
 8011bdc:	4770      	bx	lr
 8011bde:	9001      	str	r0, [sp, #4]
 8011be0:	f7f8 fd5a 	bl	800a698 <rcutils_reset_error>
 8011be4:	9801      	ldr	r0, [sp, #4]
 8011be6:	b006      	add	sp, #24
 8011be8:	bd10      	pop	{r4, pc}
 8011bea:	bf00      	nop
 8011bec:	0000      	movs	r0, r0
	...

08011bf0 <rclc_action_server_goal_cancel_accept>:
 8011bf0:	b310      	cbz	r0, 8011c38 <rclc_action_server_goal_cancel_accept+0x48>
 8011bf2:	b510      	push	{r4, lr}
 8011bf4:	b090      	sub	sp, #64	@ 0x40
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	a806      	add	r0, sp, #24
 8011bfa:	f7ff fefd 	bl	80119f8 <rcl_action_get_zero_initialized_cancel_response>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011c04:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011c08:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011c0c:	f88d 3018 	strb.w	r3, [sp, #24]
 8011c10:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011c14:	f8cd d01c 	str.w	sp, [sp, #28]
 8011c18:	46ec      	mov	ip, sp
 8011c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c1e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8011c40 <rclc_action_server_goal_cancel_accept+0x50>
 8011c22:	6860      	ldr	r0, [r4, #4]
 8011c24:	aa06      	add	r2, sp, #24
 8011c26:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8011c2a:	3010      	adds	r0, #16
 8011c2c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c30:	f7ff fdd2 	bl	80117d8 <rcl_action_send_cancel_response>
 8011c34:	b010      	add	sp, #64	@ 0x40
 8011c36:	bd10      	pop	{r4, pc}
 8011c38:	200b      	movs	r0, #11
 8011c3a:	4770      	bx	lr
 8011c3c:	f3af 8000 	nop.w
 8011c40:	00000001 	.word	0x00000001
 8011c44:	00000001 	.word	0x00000001

08011c48 <rclc_action_server_goal_cancel_reject>:
 8011c48:	b082      	sub	sp, #8
 8011c4a:	b530      	push	{r4, r5, lr}
 8011c4c:	b08b      	sub	sp, #44	@ 0x2c
 8011c4e:	ac0e      	add	r4, sp, #56	@ 0x38
 8011c50:	e884 000c 	stmia.w	r4, {r2, r3}
 8011c54:	b188      	cbz	r0, 8011c7a <rclc_action_server_goal_cancel_reject+0x32>
 8011c56:	4604      	mov	r4, r0
 8011c58:	a801      	add	r0, sp, #4
 8011c5a:	460d      	mov	r5, r1
 8011c5c:	f7ff fecc 	bl	80119f8 <rcl_action_get_zero_initialized_cancel_response>
 8011c60:	aa01      	add	r2, sp, #4
 8011c62:	a90e      	add	r1, sp, #56	@ 0x38
 8011c64:	f104 0010 	add.w	r0, r4, #16
 8011c68:	f88d 5004 	strb.w	r5, [sp, #4]
 8011c6c:	f7ff fdb4 	bl	80117d8 <rcl_action_send_cancel_response>
 8011c70:	b00b      	add	sp, #44	@ 0x2c
 8011c72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c76:	b002      	add	sp, #8
 8011c78:	4770      	bx	lr
 8011c7a:	200b      	movs	r0, #11
 8011c7c:	b00b      	add	sp, #44	@ 0x2c
 8011c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c82:	b002      	add	sp, #8
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop

08011c88 <__atomic_load_8>:
 8011c88:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011c8c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011c90:	4a15      	ldr	r2, [pc, #84]	@ (8011ce8 <__atomic_load_8+0x60>)
 8011c92:	4b16      	ldr	r3, [pc, #88]	@ (8011cec <__atomic_load_8+0x64>)
 8011c94:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011c98:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011c9c:	fb02 f101 	mul.w	r1, r2, r1
 8011ca0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011ca4:	fba3 2301 	umull	r2, r3, r3, r1
 8011ca8:	091b      	lsrs	r3, r3, #4
 8011caa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011cae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011cb2:	b4d0      	push	{r4, r6, r7}
 8011cb4:	4c0e      	ldr	r4, [pc, #56]	@ (8011cf0 <__atomic_load_8+0x68>)
 8011cb6:	1ac9      	subs	r1, r1, r3
 8011cb8:	1862      	adds	r2, r4, r1
 8011cba:	f04f 0c01 	mov.w	ip, #1
 8011cbe:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011cc2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011cc6:	2e00      	cmp	r6, #0
 8011cc8:	d1f9      	bne.n	8011cbe <__atomic_load_8+0x36>
 8011cca:	f3bf 8f5b 	dmb	ish
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1f4      	bne.n	8011cbe <__atomic_load_8+0x36>
 8011cd4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011cd8:	f3bf 8f5b 	dmb	ish
 8011cdc:	5463      	strb	r3, [r4, r1]
 8011cde:	4630      	mov	r0, r6
 8011ce0:	4639      	mov	r1, r7
 8011ce2:	bcd0      	pop	{r4, r6, r7}
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	27d4eb2d 	.word	0x27d4eb2d
 8011cec:	b21642c9 	.word	0xb21642c9
 8011cf0:	2000dd80 	.word	0x2000dd80

08011cf4 <__atomic_store_8>:
 8011cf4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011cf8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011cfc:	b570      	push	{r4, r5, r6, lr}
 8011cfe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011d02:	4c14      	ldr	r4, [pc, #80]	@ (8011d54 <__atomic_store_8+0x60>)
 8011d04:	4d14      	ldr	r5, [pc, #80]	@ (8011d58 <__atomic_store_8+0x64>)
 8011d06:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011d0a:	fb04 f101 	mul.w	r1, r4, r1
 8011d0e:	4c13      	ldr	r4, [pc, #76]	@ (8011d5c <__atomic_store_8+0x68>)
 8011d10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011d14:	fba4 4e01 	umull	r4, lr, r4, r1
 8011d18:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011d1c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011d20:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8011d24:	eba1 0e0e 	sub.w	lr, r1, lr
 8011d28:	eb05 0c0e 	add.w	ip, r5, lr
 8011d2c:	f04f 0401 	mov.w	r4, #1
 8011d30:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011d34:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011d38:	2e00      	cmp	r6, #0
 8011d3a:	d1f9      	bne.n	8011d30 <__atomic_store_8+0x3c>
 8011d3c:	f3bf 8f5b 	dmb	ish
 8011d40:	b2c9      	uxtb	r1, r1
 8011d42:	2900      	cmp	r1, #0
 8011d44:	d1f4      	bne.n	8011d30 <__atomic_store_8+0x3c>
 8011d46:	e9c0 2300 	strd	r2, r3, [r0]
 8011d4a:	f3bf 8f5b 	dmb	ish
 8011d4e:	f805 100e 	strb.w	r1, [r5, lr]
 8011d52:	bd70      	pop	{r4, r5, r6, pc}
 8011d54:	27d4eb2d 	.word	0x27d4eb2d
 8011d58:	2000dd80 	.word	0x2000dd80
 8011d5c:	b21642c9 	.word	0xb21642c9

08011d60 <__atomic_exchange_8>:
 8011d60:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011d64:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011d68:	4916      	ldr	r1, [pc, #88]	@ (8011dc4 <__atomic_exchange_8+0x64>)
 8011d6a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011d6e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011d72:	fb01 fc0c 	mul.w	ip, r1, ip
 8011d76:	4914      	ldr	r1, [pc, #80]	@ (8011dc8 <__atomic_exchange_8+0x68>)
 8011d78:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011d7c:	b570      	push	{r4, r5, r6, lr}
 8011d7e:	4605      	mov	r5, r0
 8011d80:	fba1 010c 	umull	r0, r1, r1, ip
 8011d84:	0909      	lsrs	r1, r1, #4
 8011d86:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011d8a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8011dcc <__atomic_exchange_8+0x6c>)
 8011d90:	ebac 0c01 	sub.w	ip, ip, r1
 8011d94:	eb06 010c 	add.w	r1, r6, ip
 8011d98:	f04f 0e01 	mov.w	lr, #1
 8011d9c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011da0:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011da4:	2800      	cmp	r0, #0
 8011da6:	d1f9      	bne.n	8011d9c <__atomic_exchange_8+0x3c>
 8011da8:	f3bf 8f5b 	dmb	ish
 8011dac:	b2e4      	uxtb	r4, r4
 8011dae:	2c00      	cmp	r4, #0
 8011db0:	d1f4      	bne.n	8011d9c <__atomic_exchange_8+0x3c>
 8011db2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011db6:	e9c5 2300 	strd	r2, r3, [r5]
 8011dba:	f3bf 8f5b 	dmb	ish
 8011dbe:	f806 400c 	strb.w	r4, [r6, ip]
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	27d4eb2d 	.word	0x27d4eb2d
 8011dc8:	b21642c9 	.word	0xb21642c9
 8011dcc:	2000dd80 	.word	0x2000dd80

08011dd0 <rcutils_get_env>:
 8011dd0:	b168      	cbz	r0, 8011dee <rcutils_get_env+0x1e>
 8011dd2:	b510      	push	{r4, lr}
 8011dd4:	460c      	mov	r4, r1
 8011dd6:	b129      	cbz	r1, 8011de4 <rcutils_get_env+0x14>
 8011dd8:	f004 f84e 	bl	8015e78 <getenv>
 8011ddc:	b120      	cbz	r0, 8011de8 <rcutils_get_env+0x18>
 8011dde:	6020      	str	r0, [r4, #0]
 8011de0:	2000      	movs	r0, #0
 8011de2:	bd10      	pop	{r4, pc}
 8011de4:	4803      	ldr	r0, [pc, #12]	@ (8011df4 <rcutils_get_env+0x24>)
 8011de6:	bd10      	pop	{r4, pc}
 8011de8:	4b03      	ldr	r3, [pc, #12]	@ (8011df8 <rcutils_get_env+0x28>)
 8011dea:	6023      	str	r3, [r4, #0]
 8011dec:	bd10      	pop	{r4, pc}
 8011dee:	4803      	ldr	r0, [pc, #12]	@ (8011dfc <rcutils_get_env+0x2c>)
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	08017c08 	.word	0x08017c08
 8011df8:	08017d2c 	.word	0x08017d2c
 8011dfc:	08017bec 	.word	0x08017bec

08011e00 <rcutils_format_string_limit>:
 8011e00:	b40f      	push	{r0, r1, r2, r3}
 8011e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e04:	b083      	sub	sp, #12
 8011e06:	ac08      	add	r4, sp, #32
 8011e08:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e0e:	b34e      	cbz	r6, 8011e64 <rcutils_format_string_limit+0x64>
 8011e10:	a808      	add	r0, sp, #32
 8011e12:	f7f8 fc1b 	bl	800a64c <rcutils_allocator_is_valid>
 8011e16:	b328      	cbz	r0, 8011e64 <rcutils_format_string_limit+0x64>
 8011e18:	2100      	movs	r1, #0
 8011e1a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011e1c:	4632      	mov	r2, r6
 8011e1e:	4608      	mov	r0, r1
 8011e20:	e9cd 3300 	strd	r3, r3, [sp]
 8011e24:	f000 f8f4 	bl	8012010 <rcutils_vsnprintf>
 8011e28:	1c43      	adds	r3, r0, #1
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	d01a      	beq.n	8011e64 <rcutils_format_string_limit+0x64>
 8011e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e32:	1c47      	adds	r7, r0, #1
 8011e34:	429f      	cmp	r7, r3
 8011e36:	bf84      	itt	hi
 8011e38:	461f      	movhi	r7, r3
 8011e3a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8011e3e:	4638      	mov	r0, r7
 8011e40:	9b08      	ldr	r3, [sp, #32]
 8011e42:	4798      	blx	r3
 8011e44:	4604      	mov	r4, r0
 8011e46:	b168      	cbz	r0, 8011e64 <rcutils_format_string_limit+0x64>
 8011e48:	9b01      	ldr	r3, [sp, #4]
 8011e4a:	4632      	mov	r2, r6
 8011e4c:	4639      	mov	r1, r7
 8011e4e:	f000 f8df 	bl	8012010 <rcutils_vsnprintf>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	db02      	blt.n	8011e5c <rcutils_format_string_limit+0x5c>
 8011e56:	2300      	movs	r3, #0
 8011e58:	5563      	strb	r3, [r4, r5]
 8011e5a:	e004      	b.n	8011e66 <rcutils_format_string_limit+0x66>
 8011e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e60:	4620      	mov	r0, r4
 8011e62:	4798      	blx	r3
 8011e64:	2400      	movs	r4, #0
 8011e66:	4620      	mov	r0, r4
 8011e68:	b003      	add	sp, #12
 8011e6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011e6e:	b004      	add	sp, #16
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop

08011e74 <rcutils_repl_str>:
 8011e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e78:	ed2d 8b02 	vpush	{d8}
 8011e7c:	b087      	sub	sp, #28
 8011e7e:	4680      	mov	r8, r0
 8011e80:	4608      	mov	r0, r1
 8011e82:	f8cd 8004 	str.w	r8, [sp, #4]
 8011e86:	ee08 2a10 	vmov	s16, r2
 8011e8a:	468a      	mov	sl, r1
 8011e8c:	4699      	mov	r9, r3
 8011e8e:	f7ee f9b1 	bl	80001f4 <strlen>
 8011e92:	2600      	movs	r6, #0
 8011e94:	4647      	mov	r7, r8
 8011e96:	9002      	str	r0, [sp, #8]
 8011e98:	46b3      	mov	fp, r6
 8011e9a:	2510      	movs	r5, #16
 8011e9c:	46b0      	mov	r8, r6
 8011e9e:	e01d      	b.n	8011edc <rcutils_repl_str+0x68>
 8011ea0:	f10b 0b01 	add.w	fp, fp, #1
 8011ea4:	455e      	cmp	r6, fp
 8011ea6:	d211      	bcs.n	8011ecc <rcutils_repl_str+0x58>
 8011ea8:	442e      	add	r6, r5
 8011eaa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011eae:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011eb2:	00b1      	lsls	r1, r6, #2
 8011eb4:	4798      	blx	r3
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	f000 8088 	beq.w	8011fcc <rcutils_repl_str+0x158>
 8011ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ec0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8011ec4:	4680      	mov	r8, r0
 8011ec6:	bf28      	it	cs
 8011ec8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8011ecc:	9a01      	ldr	r2, [sp, #4]
 8011ece:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8011ed2:	1aa2      	subs	r2, r4, r2
 8011ed4:	f843 2c04 	str.w	r2, [r3, #-4]
 8011ed8:	9b02      	ldr	r3, [sp, #8]
 8011eda:	18e7      	adds	r7, r4, r3
 8011edc:	4651      	mov	r1, sl
 8011ede:	4638      	mov	r0, r7
 8011ee0:	f004 fbad 	bl	801663e <strstr>
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	4640      	mov	r0, r8
 8011ee8:	2c00      	cmp	r4, #0
 8011eea:	d1d9      	bne.n	8011ea0 <rcutils_repl_str+0x2c>
 8011eec:	46b8      	mov	r8, r7
 8011eee:	4607      	mov	r7, r0
 8011ef0:	4640      	mov	r0, r8
 8011ef2:	f7ee f97f 	bl	80001f4 <strlen>
 8011ef6:	9b01      	ldr	r3, [sp, #4]
 8011ef8:	eba8 0303 	sub.w	r3, r8, r3
 8011efc:	181c      	adds	r4, r3, r0
 8011efe:	9404      	str	r4, [sp, #16]
 8011f00:	f1bb 0f00 	cmp.w	fp, #0
 8011f04:	d04a      	beq.n	8011f9c <rcutils_repl_str+0x128>
 8011f06:	ee18 0a10 	vmov	r0, s16
 8011f0a:	f7ee f973 	bl	80001f4 <strlen>
 8011f0e:	9b02      	ldr	r3, [sp, #8]
 8011f10:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011f14:	1ac3      	subs	r3, r0, r3
 8011f16:	fb0b 4303 	mla	r3, fp, r3, r4
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	9305      	str	r3, [sp, #20]
 8011f1e:	4606      	mov	r6, r0
 8011f20:	f8d9 3000 	ldr.w	r3, [r9]
 8011f24:	1c50      	adds	r0, r2, #1
 8011f26:	4798      	blx	r3
 8011f28:	9003      	str	r0, [sp, #12]
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d04f      	beq.n	8011fce <rcutils_repl_str+0x15a>
 8011f2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f32:	683a      	ldr	r2, [r7, #0]
 8011f34:	4641      	mov	r1, r8
 8011f36:	f004 fc24 	bl	8016782 <memcpy>
 8011f3a:	683d      	ldr	r5, [r7, #0]
 8011f3c:	9b03      	ldr	r3, [sp, #12]
 8011f3e:	9701      	str	r7, [sp, #4]
 8011f40:	46ba      	mov	sl, r7
 8011f42:	441d      	add	r5, r3
 8011f44:	9f02      	ldr	r7, [sp, #8]
 8011f46:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f4a:	2401      	movs	r4, #1
 8011f4c:	46d1      	mov	r9, sl
 8011f4e:	ee18 aa10 	vmov	sl, s16
 8011f52:	e00a      	b.n	8011f6a <rcutils_repl_str+0xf6>
 8011f54:	f8d9 5000 	ldr.w	r5, [r9]
 8011f58:	1aaa      	subs	r2, r5, r2
 8011f5a:	1885      	adds	r5, r0, r2
 8011f5c:	f004 fc11 	bl	8016782 <memcpy>
 8011f60:	45a3      	cmp	fp, r4
 8011f62:	f104 0201 	add.w	r2, r4, #1
 8011f66:	d935      	bls.n	8011fd4 <rcutils_repl_str+0x160>
 8011f68:	4614      	mov	r4, r2
 8011f6a:	4632      	mov	r2, r6
 8011f6c:	4651      	mov	r1, sl
 8011f6e:	4628      	mov	r0, r5
 8011f70:	f004 fc07 	bl	8016782 <memcpy>
 8011f74:	f859 2b04 	ldr.w	r2, [r9], #4
 8011f78:	45a3      	cmp	fp, r4
 8011f7a:	443a      	add	r2, r7
 8011f7c:	eb05 0006 	add.w	r0, r5, r6
 8011f80:	eb08 0102 	add.w	r1, r8, r2
 8011f84:	d1e6      	bne.n	8011f54 <rcutils_repl_str+0xe0>
 8011f86:	9b04      	ldr	r3, [sp, #16]
 8011f88:	1a9a      	subs	r2, r3, r2
 8011f8a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8011f8e:	f004 fbf8 	bl	8016782 <memcpy>
 8011f92:	9a03      	ldr	r2, [sp, #12]
 8011f94:	9905      	ldr	r1, [sp, #20]
 8011f96:	2300      	movs	r3, #0
 8011f98:	5453      	strb	r3, [r2, r1]
 8011f9a:	e00b      	b.n	8011fb4 <rcutils_repl_str+0x140>
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	f8d9 3000 	ldr.w	r3, [r9]
 8011fa2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fa6:	3001      	adds	r0, #1
 8011fa8:	4798      	blx	r3
 8011faa:	9003      	str	r0, [sp, #12]
 8011fac:	b110      	cbz	r0, 8011fb4 <rcutils_repl_str+0x140>
 8011fae:	9901      	ldr	r1, [sp, #4]
 8011fb0:	f004 fbdf 	bl	8016772 <strcpy>
 8011fb4:	4638      	mov	r0, r7
 8011fb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011fba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fbe:	4798      	blx	r3
 8011fc0:	9803      	ldr	r0, [sp, #12]
 8011fc2:	b007      	add	sp, #28
 8011fc4:	ecbd 8b02 	vpop	{d8}
 8011fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fcc:	4647      	mov	r7, r8
 8011fce:	2300      	movs	r3, #0
 8011fd0:	9303      	str	r3, [sp, #12]
 8011fd2:	e7ef      	b.n	8011fb4 <rcutils_repl_str+0x140>
 8011fd4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8011fd8:	e7db      	b.n	8011f92 <rcutils_repl_str+0x11e>
 8011fda:	bf00      	nop

08011fdc <rcutils_snprintf>:
 8011fdc:	b40c      	push	{r2, r3}
 8011fde:	b530      	push	{r4, r5, lr}
 8011fe0:	b083      	sub	sp, #12
 8011fe2:	ab06      	add	r3, sp, #24
 8011fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fe8:	9301      	str	r3, [sp, #4]
 8011fea:	b152      	cbz	r2, 8012002 <rcutils_snprintf+0x26>
 8011fec:	b138      	cbz	r0, 8011ffe <rcutils_snprintf+0x22>
 8011fee:	b141      	cbz	r1, 8012002 <rcutils_snprintf+0x26>
 8011ff0:	f004 fac6 	bl	8016580 <vsniprintf>
 8011ff4:	b003      	add	sp, #12
 8011ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ffa:	b002      	add	sp, #8
 8011ffc:	4770      	bx	lr
 8011ffe:	2900      	cmp	r1, #0
 8012000:	d0f6      	beq.n	8011ff0 <rcutils_snprintf+0x14>
 8012002:	f004 fb89 	bl	8016718 <__errno>
 8012006:	2316      	movs	r3, #22
 8012008:	6003      	str	r3, [r0, #0]
 801200a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801200e:	e7f1      	b.n	8011ff4 <rcutils_snprintf+0x18>

08012010 <rcutils_vsnprintf>:
 8012010:	b570      	push	{r4, r5, r6, lr}
 8012012:	b13a      	cbz	r2, 8012024 <rcutils_vsnprintf+0x14>
 8012014:	b120      	cbz	r0, 8012020 <rcutils_vsnprintf+0x10>
 8012016:	b129      	cbz	r1, 8012024 <rcutils_vsnprintf+0x14>
 8012018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801201c:	f004 bab0 	b.w	8016580 <vsniprintf>
 8012020:	2900      	cmp	r1, #0
 8012022:	d0f9      	beq.n	8012018 <rcutils_vsnprintf+0x8>
 8012024:	f004 fb78 	bl	8016718 <__errno>
 8012028:	2316      	movs	r3, #22
 801202a:	6003      	str	r3, [r0, #0]
 801202c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012030:	bd70      	pop	{r4, r5, r6, pc}
 8012032:	bf00      	nop

08012034 <rcutils_strdup>:
 8012034:	b084      	sub	sp, #16
 8012036:	b570      	push	{r4, r5, r6, lr}
 8012038:	b082      	sub	sp, #8
 801203a:	ac07      	add	r4, sp, #28
 801203c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012040:	4605      	mov	r5, r0
 8012042:	b1b0      	cbz	r0, 8012072 <rcutils_strdup+0x3e>
 8012044:	f7ee f8d6 	bl	80001f4 <strlen>
 8012048:	1c42      	adds	r2, r0, #1
 801204a:	9b07      	ldr	r3, [sp, #28]
 801204c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801204e:	9201      	str	r2, [sp, #4]
 8012050:	4606      	mov	r6, r0
 8012052:	4610      	mov	r0, r2
 8012054:	4798      	blx	r3
 8012056:	4604      	mov	r4, r0
 8012058:	b128      	cbz	r0, 8012066 <rcutils_strdup+0x32>
 801205a:	9a01      	ldr	r2, [sp, #4]
 801205c:	4629      	mov	r1, r5
 801205e:	f004 fb90 	bl	8016782 <memcpy>
 8012062:	2300      	movs	r3, #0
 8012064:	55a3      	strb	r3, [r4, r6]
 8012066:	4620      	mov	r0, r4
 8012068:	b002      	add	sp, #8
 801206a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801206e:	b004      	add	sp, #16
 8012070:	4770      	bx	lr
 8012072:	4604      	mov	r4, r0
 8012074:	e7f7      	b.n	8012066 <rcutils_strdup+0x32>
 8012076:	bf00      	nop

08012078 <rcutils_strndup>:
 8012078:	b082      	sub	sp, #8
 801207a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207c:	ac06      	add	r4, sp, #24
 801207e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012082:	4605      	mov	r5, r0
 8012084:	b188      	cbz	r0, 80120aa <rcutils_strndup+0x32>
 8012086:	1c4f      	adds	r7, r1, #1
 8012088:	460e      	mov	r6, r1
 801208a:	4638      	mov	r0, r7
 801208c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801208e:	4790      	blx	r2
 8012090:	4604      	mov	r4, r0
 8012092:	b128      	cbz	r0, 80120a0 <rcutils_strndup+0x28>
 8012094:	463a      	mov	r2, r7
 8012096:	4629      	mov	r1, r5
 8012098:	f004 fb73 	bl	8016782 <memcpy>
 801209c:	2300      	movs	r3, #0
 801209e:	55a3      	strb	r3, [r4, r6]
 80120a0:	4620      	mov	r0, r4
 80120a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120a6:	b002      	add	sp, #8
 80120a8:	4770      	bx	lr
 80120aa:	4604      	mov	r4, r0
 80120ac:	e7f8      	b.n	80120a0 <rcutils_strndup+0x28>
 80120ae:	bf00      	nop

080120b0 <rcutils_get_zero_initialized_string_map>:
 80120b0:	4b01      	ldr	r3, [pc, #4]	@ (80120b8 <rcutils_get_zero_initialized_string_map+0x8>)
 80120b2:	2000      	movs	r0, #0
 80120b4:	6018      	str	r0, [r3, #0]
 80120b6:	4770      	bx	lr
 80120b8:	2000dd98 	.word	0x2000dd98

080120bc <rcutils_string_map_reserve>:
 80120bc:	2800      	cmp	r0, #0
 80120be:	d05f      	beq.n	8012180 <rcutils_string_map_reserve+0xc4>
 80120c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c4:	460c      	mov	r4, r1
 80120c6:	6801      	ldr	r1, [r0, #0]
 80120c8:	b082      	sub	sp, #8
 80120ca:	4605      	mov	r5, r0
 80120cc:	b129      	cbz	r1, 80120da <rcutils_string_map_reserve+0x1e>
 80120ce:	68cb      	ldr	r3, [r1, #12]
 80120d0:	42a3      	cmp	r3, r4
 80120d2:	d906      	bls.n	80120e2 <rcutils_string_map_reserve+0x26>
 80120d4:	461c      	mov	r4, r3
 80120d6:	2900      	cmp	r1, #0
 80120d8:	d1f9      	bne.n	80120ce <rcutils_string_map_reserve+0x12>
 80120da:	201f      	movs	r0, #31
 80120dc:	b002      	add	sp, #8
 80120de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e2:	688b      	ldr	r3, [r1, #8]
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	d047      	beq.n	8012178 <rcutils_string_map_reserve+0xbc>
 80120e8:	6a0e      	ldr	r6, [r1, #32]
 80120ea:	2c00      	cmp	r4, #0
 80120ec:	d034      	beq.n	8012158 <rcutils_string_map_reserve+0x9c>
 80120ee:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80120f2:	d243      	bcs.n	801217c <rcutils_string_map_reserve+0xc0>
 80120f4:	00a7      	lsls	r7, r4, #2
 80120f6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80120fa:	6808      	ldr	r0, [r1, #0]
 80120fc:	4632      	mov	r2, r6
 80120fe:	4639      	mov	r1, r7
 8012100:	47c0      	blx	r8
 8012102:	2800      	cmp	r0, #0
 8012104:	d03a      	beq.n	801217c <rcutils_string_map_reserve+0xc0>
 8012106:	682b      	ldr	r3, [r5, #0]
 8012108:	4632      	mov	r2, r6
 801210a:	6018      	str	r0, [r3, #0]
 801210c:	4639      	mov	r1, r7
 801210e:	6858      	ldr	r0, [r3, #4]
 8012110:	47c0      	blx	r8
 8012112:	2800      	cmp	r0, #0
 8012114:	d032      	beq.n	801217c <rcutils_string_map_reserve+0xc0>
 8012116:	682d      	ldr	r5, [r5, #0]
 8012118:	68ab      	ldr	r3, [r5, #8]
 801211a:	6068      	str	r0, [r5, #4]
 801211c:	42a3      	cmp	r3, r4
 801211e:	d226      	bcs.n	801216e <rcutils_string_map_reserve+0xb2>
 8012120:	682a      	ldr	r2, [r5, #0]
 8012122:	eb00 0c07 	add.w	ip, r0, r7
 8012126:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801212a:	45e6      	cmp	lr, ip
 801212c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012130:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012134:	d203      	bcs.n	801213e <rcutils_string_map_reserve+0x82>
 8012136:	eb02 0c07 	add.w	ip, r2, r7
 801213a:	4566      	cmp	r6, ip
 801213c:	d322      	bcc.n	8012184 <rcutils_string_map_reserve+0xc8>
 801213e:	1ae3      	subs	r3, r4, r3
 8012140:	009a      	lsls	r2, r3, #2
 8012142:	4670      	mov	r0, lr
 8012144:	2100      	movs	r1, #0
 8012146:	9201      	str	r2, [sp, #4]
 8012148:	f004 fa52 	bl	80165f0 <memset>
 801214c:	9a01      	ldr	r2, [sp, #4]
 801214e:	2100      	movs	r1, #0
 8012150:	4630      	mov	r0, r6
 8012152:	f004 fa4d 	bl	80165f0 <memset>
 8012156:	e00a      	b.n	801216e <rcutils_string_map_reserve+0xb2>
 8012158:	694f      	ldr	r7, [r1, #20]
 801215a:	6808      	ldr	r0, [r1, #0]
 801215c:	4631      	mov	r1, r6
 801215e:	47b8      	blx	r7
 8012160:	682b      	ldr	r3, [r5, #0]
 8012162:	4631      	mov	r1, r6
 8012164:	6858      	ldr	r0, [r3, #4]
 8012166:	601c      	str	r4, [r3, #0]
 8012168:	47b8      	blx	r7
 801216a:	682d      	ldr	r5, [r5, #0]
 801216c:	606c      	str	r4, [r5, #4]
 801216e:	2000      	movs	r0, #0
 8012170:	60ac      	str	r4, [r5, #8]
 8012172:	b002      	add	sp, #8
 8012174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012178:	2000      	movs	r0, #0
 801217a:	e7af      	b.n	80120dc <rcutils_string_map_reserve+0x20>
 801217c:	200a      	movs	r0, #10
 801217e:	e7ad      	b.n	80120dc <rcutils_string_map_reserve+0x20>
 8012180:	200b      	movs	r0, #11
 8012182:	4770      	bx	lr
 8012184:	1f0b      	subs	r3, r1, #4
 8012186:	4418      	add	r0, r3
 8012188:	4413      	add	r3, r2
 801218a:	3a04      	subs	r2, #4
 801218c:	4417      	add	r7, r2
 801218e:	2200      	movs	r2, #0
 8012190:	f843 2f04 	str.w	r2, [r3, #4]!
 8012194:	42bb      	cmp	r3, r7
 8012196:	f840 2f04 	str.w	r2, [r0, #4]!
 801219a:	d1f9      	bne.n	8012190 <rcutils_string_map_reserve+0xd4>
 801219c:	e7e7      	b.n	801216e <rcutils_string_map_reserve+0xb2>
 801219e:	bf00      	nop

080121a0 <rcutils_string_map_init>:
 80121a0:	b082      	sub	sp, #8
 80121a2:	b570      	push	{r4, r5, r6, lr}
 80121a4:	ac04      	add	r4, sp, #16
 80121a6:	e884 000c 	stmia.w	r4, {r2, r3}
 80121aa:	b380      	cbz	r0, 801220e <rcutils_string_map_init+0x6e>
 80121ac:	6806      	ldr	r6, [r0, #0]
 80121ae:	4604      	mov	r4, r0
 80121b0:	b12e      	cbz	r6, 80121be <rcutils_string_map_init+0x1e>
 80121b2:	251e      	movs	r5, #30
 80121b4:	4628      	mov	r0, r5
 80121b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121ba:	b002      	add	sp, #8
 80121bc:	4770      	bx	lr
 80121be:	a804      	add	r0, sp, #16
 80121c0:	460d      	mov	r5, r1
 80121c2:	f7f8 fa43 	bl	800a64c <rcutils_allocator_is_valid>
 80121c6:	b310      	cbz	r0, 801220e <rcutils_string_map_init+0x6e>
 80121c8:	9b04      	ldr	r3, [sp, #16]
 80121ca:	9908      	ldr	r1, [sp, #32]
 80121cc:	2024      	movs	r0, #36	@ 0x24
 80121ce:	4798      	blx	r3
 80121d0:	6020      	str	r0, [r4, #0]
 80121d2:	b310      	cbz	r0, 801221a <rcutils_string_map_init+0x7a>
 80121d4:	f10d 0e10 	add.w	lr, sp, #16
 80121d8:	e9c0 6600 	strd	r6, r6, [r0]
 80121dc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80121e0:	f100 0c10 	add.w	ip, r0, #16
 80121e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121ec:	f8de 3000 	ldr.w	r3, [lr]
 80121f0:	f8cc 3000 	str.w	r3, [ip]
 80121f4:	4629      	mov	r1, r5
 80121f6:	4620      	mov	r0, r4
 80121f8:	f7ff ff60 	bl	80120bc <rcutils_string_map_reserve>
 80121fc:	4605      	mov	r5, r0
 80121fe:	2800      	cmp	r0, #0
 8012200:	d0d8      	beq.n	80121b4 <rcutils_string_map_init+0x14>
 8012202:	9b05      	ldr	r3, [sp, #20]
 8012204:	9908      	ldr	r1, [sp, #32]
 8012206:	6820      	ldr	r0, [r4, #0]
 8012208:	4798      	blx	r3
 801220a:	6026      	str	r6, [r4, #0]
 801220c:	e7d2      	b.n	80121b4 <rcutils_string_map_init+0x14>
 801220e:	250b      	movs	r5, #11
 8012210:	4628      	mov	r0, r5
 8012212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012216:	b002      	add	sp, #8
 8012218:	4770      	bx	lr
 801221a:	250a      	movs	r5, #10
 801221c:	e7ca      	b.n	80121b4 <rcutils_string_map_init+0x14>
 801221e:	bf00      	nop

08012220 <rcutils_string_map_fini>:
 8012220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012224:	b082      	sub	sp, #8
 8012226:	2800      	cmp	r0, #0
 8012228:	d03a      	beq.n	80122a0 <rcutils_string_map_fini+0x80>
 801222a:	6804      	ldr	r4, [r0, #0]
 801222c:	4606      	mov	r6, r0
 801222e:	2c00      	cmp	r4, #0
 8012230:	d032      	beq.n	8012298 <rcutils_string_map_fini+0x78>
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	b32b      	cbz	r3, 8012282 <rcutils_string_map_fini+0x62>
 8012236:	2500      	movs	r5, #0
 8012238:	6822      	ldr	r2, [r4, #0]
 801223a:	462f      	mov	r7, r5
 801223c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012240:	b1e0      	cbz	r0, 801227c <rcutils_string_map_fini+0x5c>
 8012242:	6a21      	ldr	r1, [r4, #32]
 8012244:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012248:	9101      	str	r1, [sp, #4]
 801224a:	47c0      	blx	r8
 801224c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012250:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012254:	9901      	ldr	r1, [sp, #4]
 8012256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801225a:	47c0      	blx	r8
 801225c:	68e3      	ldr	r3, [r4, #12]
 801225e:	6862      	ldr	r2, [r4, #4]
 8012260:	3b01      	subs	r3, #1
 8012262:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012266:	60e3      	str	r3, [r4, #12]
 8012268:	6834      	ldr	r4, [r6, #0]
 801226a:	68a3      	ldr	r3, [r4, #8]
 801226c:	3501      	adds	r5, #1
 801226e:	429d      	cmp	r5, r3
 8012270:	d207      	bcs.n	8012282 <rcutils_string_map_fini+0x62>
 8012272:	6822      	ldr	r2, [r4, #0]
 8012274:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012278:	2800      	cmp	r0, #0
 801227a:	d1e2      	bne.n	8012242 <rcutils_string_map_fini+0x22>
 801227c:	3501      	adds	r5, #1
 801227e:	429d      	cmp	r5, r3
 8012280:	d3dc      	bcc.n	801223c <rcutils_string_map_fini+0x1c>
 8012282:	2100      	movs	r1, #0
 8012284:	4630      	mov	r0, r6
 8012286:	f7ff ff19 	bl	80120bc <rcutils_string_map_reserve>
 801228a:	4604      	mov	r4, r0
 801228c:	b920      	cbnz	r0, 8012298 <rcutils_string_map_fini+0x78>
 801228e:	6830      	ldr	r0, [r6, #0]
 8012290:	6943      	ldr	r3, [r0, #20]
 8012292:	6a01      	ldr	r1, [r0, #32]
 8012294:	4798      	blx	r3
 8012296:	6034      	str	r4, [r6, #0]
 8012298:	4620      	mov	r0, r4
 801229a:	b002      	add	sp, #8
 801229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a0:	240b      	movs	r4, #11
 80122a2:	4620      	mov	r0, r4
 80122a4:	b002      	add	sp, #8
 80122a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122aa:	bf00      	nop

080122ac <rcutils_string_map_getn>:
 80122ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b0:	b300      	cbz	r0, 80122f4 <rcutils_string_map_getn+0x48>
 80122b2:	6807      	ldr	r7, [r0, #0]
 80122b4:	b1ff      	cbz	r7, 80122f6 <rcutils_string_map_getn+0x4a>
 80122b6:	4688      	mov	r8, r1
 80122b8:	b1e1      	cbz	r1, 80122f4 <rcutils_string_map_getn+0x48>
 80122ba:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80122be:	683e      	ldr	r6, [r7, #0]
 80122c0:	f1ba 0f00 	cmp.w	sl, #0
 80122c4:	d016      	beq.n	80122f4 <rcutils_string_map_getn+0x48>
 80122c6:	4691      	mov	r9, r2
 80122c8:	3e04      	subs	r6, #4
 80122ca:	2400      	movs	r4, #0
 80122cc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80122d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80122d4:	4628      	mov	r0, r5
 80122d6:	3401      	adds	r4, #1
 80122d8:	b155      	cbz	r5, 80122f0 <rcutils_string_map_getn+0x44>
 80122da:	f7ed ff8b 	bl	80001f4 <strlen>
 80122de:	4548      	cmp	r0, r9
 80122e0:	4602      	mov	r2, r0
 80122e2:	4629      	mov	r1, r5
 80122e4:	bf38      	it	cc
 80122e6:	464a      	movcc	r2, r9
 80122e8:	4640      	mov	r0, r8
 80122ea:	f004 f996 	bl	801661a <strncmp>
 80122ee:	b128      	cbz	r0, 80122fc <rcutils_string_map_getn+0x50>
 80122f0:	45a2      	cmp	sl, r4
 80122f2:	d1eb      	bne.n	80122cc <rcutils_string_map_getn+0x20>
 80122f4:	2700      	movs	r7, #0
 80122f6:	4638      	mov	r0, r7
 80122f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f853 700b 	ldr.w	r7, [r3, fp]
 8012302:	4638      	mov	r0, r7
 8012304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012308 <rmw_get_zero_initialized_context>:
 8012308:	b510      	push	{r4, lr}
 801230a:	4604      	mov	r4, r0
 801230c:	3010      	adds	r0, #16
 801230e:	f000 f80b 	bl	8012328 <rmw_get_zero_initialized_init_options>
 8012312:	2300      	movs	r3, #0
 8012314:	2000      	movs	r0, #0
 8012316:	2100      	movs	r1, #0
 8012318:	e9c4 0100 	strd	r0, r1, [r4]
 801231c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012320:	60a3      	str	r3, [r4, #8]
 8012322:	4620      	mov	r0, r4
 8012324:	bd10      	pop	{r4, pc}
 8012326:	bf00      	nop

08012328 <rmw_get_zero_initialized_init_options>:
 8012328:	b510      	push	{r4, lr}
 801232a:	2238      	movs	r2, #56	@ 0x38
 801232c:	4604      	mov	r4, r0
 801232e:	2100      	movs	r1, #0
 8012330:	f004 f95e 	bl	80165f0 <memset>
 8012334:	f104 0010 	add.w	r0, r4, #16
 8012338:	f000 f806 	bl	8012348 <rmw_get_default_security_options>
 801233c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012340:	60e3      	str	r3, [r4, #12]
 8012342:	4620      	mov	r0, r4
 8012344:	bd10      	pop	{r4, pc}
 8012346:	bf00      	nop

08012348 <rmw_get_default_security_options>:
 8012348:	2200      	movs	r2, #0
 801234a:	7002      	strb	r2, [r0, #0]
 801234c:	6042      	str	r2, [r0, #4]
 801234e:	4770      	bx	lr

08012350 <rmw_subscription_content_filter_options_fini>:
 8012350:	b1b0      	cbz	r0, 8012380 <rmw_subscription_content_filter_options_fini+0x30>
 8012352:	b538      	push	{r3, r4, r5, lr}
 8012354:	4604      	mov	r4, r0
 8012356:	4608      	mov	r0, r1
 8012358:	460d      	mov	r5, r1
 801235a:	f7f8 f977 	bl	800a64c <rcutils_allocator_is_valid>
 801235e:	b168      	cbz	r0, 801237c <rmw_subscription_content_filter_options_fini+0x2c>
 8012360:	6820      	ldr	r0, [r4, #0]
 8012362:	b120      	cbz	r0, 801236e <rmw_subscription_content_filter_options_fini+0x1e>
 8012364:	686b      	ldr	r3, [r5, #4]
 8012366:	6929      	ldr	r1, [r5, #16]
 8012368:	4798      	blx	r3
 801236a:	2300      	movs	r3, #0
 801236c:	6023      	str	r3, [r4, #0]
 801236e:	1d20      	adds	r0, r4, #4
 8012370:	f003 fc2e 	bl	8015bd0 <rcutils_string_array_fini>
 8012374:	3800      	subs	r0, #0
 8012376:	bf18      	it	ne
 8012378:	2001      	movne	r0, #1
 801237a:	bd38      	pop	{r3, r4, r5, pc}
 801237c:	200b      	movs	r0, #11
 801237e:	bd38      	pop	{r3, r4, r5, pc}
 8012380:	200b      	movs	r0, #11
 8012382:	4770      	bx	lr

08012384 <rmw_get_default_subscription_options>:
 8012384:	2200      	movs	r2, #0
 8012386:	e9c0 2200 	strd	r2, r2, [r0]
 801238a:	6082      	str	r2, [r0, #8]
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop

08012390 <rmw_time_equal>:
 8012390:	b4f0      	push	{r4, r5, r6, r7}
 8012392:	b084      	sub	sp, #16
 8012394:	ac04      	add	r4, sp, #16
 8012396:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801239a:	4603      	mov	r3, r0
 801239c:	4924      	ldr	r1, [pc, #144]	@ (8012430 <rmw_time_equal+0xa0>)
 801239e:	9e03      	ldr	r6, [sp, #12]
 80123a0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80123a4:	2202      	movs	r2, #2
 80123a6:	4299      	cmp	r1, r3
 80123a8:	41aa      	sbcs	r2, r5
 80123aa:	d330      	bcc.n	801240e <rmw_time_equal+0x7e>
 80123ac:	4c21      	ldr	r4, [pc, #132]	@ (8012434 <rmw_time_equal+0xa4>)
 80123ae:	fba3 3204 	umull	r3, r2, r3, r4
 80123b2:	fb04 2205 	mla	r2, r4, r5, r2
 80123b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80123ba:	43dd      	mvns	r5, r3
 80123bc:	1a8c      	subs	r4, r1, r2
 80123be:	4285      	cmp	r5, r0
 80123c0:	41b4      	sbcs	r4, r6
 80123c2:	d332      	bcc.n	801242a <rmw_time_equal+0x9a>
 80123c4:	eb10 0c03 	adds.w	ip, r0, r3
 80123c8:	eb42 0106 	adc.w	r1, r2, r6
 80123cc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80123d0:	4817      	ldr	r0, [pc, #92]	@ (8012430 <rmw_time_equal+0xa0>)
 80123d2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80123d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80123d6:	2202      	movs	r2, #2
 80123d8:	4298      	cmp	r0, r3
 80123da:	41b2      	sbcs	r2, r6
 80123dc:	d31c      	bcc.n	8012418 <rmw_time_equal+0x88>
 80123de:	4c15      	ldr	r4, [pc, #84]	@ (8012434 <rmw_time_equal+0xa4>)
 80123e0:	fba3 3204 	umull	r3, r2, r3, r4
 80123e4:	fb04 2206 	mla	r2, r4, r6, r2
 80123e8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80123ec:	43de      	mvns	r6, r3
 80123ee:	1a84      	subs	r4, r0, r2
 80123f0:	42ae      	cmp	r6, r5
 80123f2:	41bc      	sbcs	r4, r7
 80123f4:	d315      	bcc.n	8012422 <rmw_time_equal+0x92>
 80123f6:	195b      	adds	r3, r3, r5
 80123f8:	eb42 0207 	adc.w	r2, r2, r7
 80123fc:	428a      	cmp	r2, r1
 80123fe:	bf08      	it	eq
 8012400:	4563      	cmpeq	r3, ip
 8012402:	bf0c      	ite	eq
 8012404:	2001      	moveq	r0, #1
 8012406:	2000      	movne	r0, #0
 8012408:	b004      	add	sp, #16
 801240a:	bcf0      	pop	{r4, r5, r6, r7}
 801240c:	4770      	bx	lr
 801240e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012412:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012416:	e7d9      	b.n	80123cc <rmw_time_equal+0x3c>
 8012418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801241c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012420:	e7ec      	b.n	80123fc <rmw_time_equal+0x6c>
 8012422:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012426:	4602      	mov	r2, r0
 8012428:	e7e8      	b.n	80123fc <rmw_time_equal+0x6c>
 801242a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801242e:	e7cd      	b.n	80123cc <rmw_time_equal+0x3c>
 8012430:	25c17d04 	.word	0x25c17d04
 8012434:	3b9aca00 	.word	0x3b9aca00

08012438 <rmw_time_total_nsec>:
 8012438:	b470      	push	{r4, r5, r6}
 801243a:	b085      	sub	sp, #20
 801243c:	ac04      	add	r4, sp, #16
 801243e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012442:	4603      	mov	r3, r0
 8012444:	4912      	ldr	r1, [pc, #72]	@ (8012490 <rmw_time_total_nsec+0x58>)
 8012446:	9e03      	ldr	r6, [sp, #12]
 8012448:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801244c:	2202      	movs	r2, #2
 801244e:	4299      	cmp	r1, r3
 8012450:	41aa      	sbcs	r2, r5
 8012452:	d311      	bcc.n	8012478 <rmw_time_total_nsec+0x40>
 8012454:	4c0f      	ldr	r4, [pc, #60]	@ (8012494 <rmw_time_total_nsec+0x5c>)
 8012456:	fba3 3204 	umull	r3, r2, r3, r4
 801245a:	fb04 2205 	mla	r2, r4, r5, r2
 801245e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012462:	43dd      	mvns	r5, r3
 8012464:	1a8c      	subs	r4, r1, r2
 8012466:	4285      	cmp	r5, r0
 8012468:	41b4      	sbcs	r4, r6
 801246a:	d30c      	bcc.n	8012486 <rmw_time_total_nsec+0x4e>
 801246c:	1818      	adds	r0, r3, r0
 801246e:	eb42 0106 	adc.w	r1, r2, r6
 8012472:	b005      	add	sp, #20
 8012474:	bc70      	pop	{r4, r5, r6}
 8012476:	4770      	bx	lr
 8012478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801247c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012480:	b005      	add	sp, #20
 8012482:	bc70      	pop	{r4, r5, r6}
 8012484:	4770      	bx	lr
 8012486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801248a:	b005      	add	sp, #20
 801248c:	bc70      	pop	{r4, r5, r6}
 801248e:	4770      	bx	lr
 8012490:	25c17d04 	.word	0x25c17d04
 8012494:	3b9aca00 	.word	0x3b9aca00

08012498 <rmw_get_zero_initialized_message_info>:
 8012498:	b510      	push	{r4, lr}
 801249a:	2240      	movs	r2, #64	@ 0x40
 801249c:	4604      	mov	r4, r0
 801249e:	2100      	movs	r1, #0
 80124a0:	f004 f8a6 	bl	80165f0 <memset>
 80124a4:	4620      	mov	r0, r4
 80124a6:	bd10      	pop	{r4, pc}

080124a8 <rmw_validate_full_topic_name>:
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d057      	beq.n	801255c <rmw_validate_full_topic_name+0xb4>
 80124ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b0:	460d      	mov	r5, r1
 80124b2:	2900      	cmp	r1, #0
 80124b4:	d054      	beq.n	8012560 <rmw_validate_full_topic_name+0xb8>
 80124b6:	4616      	mov	r6, r2
 80124b8:	4604      	mov	r4, r0
 80124ba:	f7ed fe9b 	bl	80001f4 <strlen>
 80124be:	b148      	cbz	r0, 80124d4 <rmw_validate_full_topic_name+0x2c>
 80124c0:	7823      	ldrb	r3, [r4, #0]
 80124c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80124c4:	d00d      	beq.n	80124e2 <rmw_validate_full_topic_name+0x3a>
 80124c6:	2302      	movs	r3, #2
 80124c8:	602b      	str	r3, [r5, #0]
 80124ca:	b13e      	cbz	r6, 80124dc <rmw_validate_full_topic_name+0x34>
 80124cc:	2000      	movs	r0, #0
 80124ce:	6030      	str	r0, [r6, #0]
 80124d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d4:	2301      	movs	r3, #1
 80124d6:	602b      	str	r3, [r5, #0]
 80124d8:	2e00      	cmp	r6, #0
 80124da:	d1f7      	bne.n	80124cc <rmw_validate_full_topic_name+0x24>
 80124dc:	2000      	movs	r0, #0
 80124de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124e2:	1e43      	subs	r3, r0, #1
 80124e4:	5ce2      	ldrb	r2, [r4, r3]
 80124e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80124e8:	d03c      	beq.n	8012564 <rmw_validate_full_topic_name+0xbc>
 80124ea:	1e63      	subs	r3, r4, #1
 80124ec:	eb03 0800 	add.w	r8, r3, r0
 80124f0:	f1c4 0e01 	rsb	lr, r4, #1
 80124f4:	eb0e 0703 	add.w	r7, lr, r3
 80124f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80124fc:	f021 0220 	bic.w	r2, r1, #32
 8012500:	3a41      	subs	r2, #65	@ 0x41
 8012502:	2a19      	cmp	r2, #25
 8012504:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012508:	d90b      	bls.n	8012522 <rmw_validate_full_topic_name+0x7a>
 801250a:	295f      	cmp	r1, #95	@ 0x5f
 801250c:	d009      	beq.n	8012522 <rmw_validate_full_topic_name+0x7a>
 801250e:	f1bc 0f0a 	cmp.w	ip, #10
 8012512:	d906      	bls.n	8012522 <rmw_validate_full_topic_name+0x7a>
 8012514:	2304      	movs	r3, #4
 8012516:	602b      	str	r3, [r5, #0]
 8012518:	2e00      	cmp	r6, #0
 801251a:	d0df      	beq.n	80124dc <rmw_validate_full_topic_name+0x34>
 801251c:	6037      	str	r7, [r6, #0]
 801251e:	2000      	movs	r0, #0
 8012520:	e7d6      	b.n	80124d0 <rmw_validate_full_topic_name+0x28>
 8012522:	4543      	cmp	r3, r8
 8012524:	d1e6      	bne.n	80124f4 <rmw_validate_full_topic_name+0x4c>
 8012526:	4f1a      	ldr	r7, [pc, #104]	@ (8012590 <rmw_validate_full_topic_name+0xe8>)
 8012528:	2301      	movs	r3, #1
 801252a:	e004      	b.n	8012536 <rmw_validate_full_topic_name+0x8e>
 801252c:	4298      	cmp	r0, r3
 801252e:	f104 0401 	add.w	r4, r4, #1
 8012532:	d91c      	bls.n	801256e <rmw_validate_full_topic_name+0xc6>
 8012534:	4613      	mov	r3, r2
 8012536:	4298      	cmp	r0, r3
 8012538:	f103 0201 	add.w	r2, r3, #1
 801253c:	d0f6      	beq.n	801252c <rmw_validate_full_topic_name+0x84>
 801253e:	7821      	ldrb	r1, [r4, #0]
 8012540:	292f      	cmp	r1, #47	@ 0x2f
 8012542:	d1f3      	bne.n	801252c <rmw_validate_full_topic_name+0x84>
 8012544:	7861      	ldrb	r1, [r4, #1]
 8012546:	292f      	cmp	r1, #47	@ 0x2f
 8012548:	d01c      	beq.n	8012584 <rmw_validate_full_topic_name+0xdc>
 801254a:	5dc9      	ldrb	r1, [r1, r7]
 801254c:	0749      	lsls	r1, r1, #29
 801254e:	d5ed      	bpl.n	801252c <rmw_validate_full_topic_name+0x84>
 8012550:	2206      	movs	r2, #6
 8012552:	602a      	str	r2, [r5, #0]
 8012554:	2e00      	cmp	r6, #0
 8012556:	d0c1      	beq.n	80124dc <rmw_validate_full_topic_name+0x34>
 8012558:	6033      	str	r3, [r6, #0]
 801255a:	e7bf      	b.n	80124dc <rmw_validate_full_topic_name+0x34>
 801255c:	200b      	movs	r0, #11
 801255e:	4770      	bx	lr
 8012560:	200b      	movs	r0, #11
 8012562:	e7b5      	b.n	80124d0 <rmw_validate_full_topic_name+0x28>
 8012564:	2203      	movs	r2, #3
 8012566:	602a      	str	r2, [r5, #0]
 8012568:	2e00      	cmp	r6, #0
 801256a:	d1f5      	bne.n	8012558 <rmw_validate_full_topic_name+0xb0>
 801256c:	e7b6      	b.n	80124dc <rmw_validate_full_topic_name+0x34>
 801256e:	28f7      	cmp	r0, #247	@ 0xf7
 8012570:	d802      	bhi.n	8012578 <rmw_validate_full_topic_name+0xd0>
 8012572:	2000      	movs	r0, #0
 8012574:	6028      	str	r0, [r5, #0]
 8012576:	e7ab      	b.n	80124d0 <rmw_validate_full_topic_name+0x28>
 8012578:	2307      	movs	r3, #7
 801257a:	602b      	str	r3, [r5, #0]
 801257c:	2e00      	cmp	r6, #0
 801257e:	d0ad      	beq.n	80124dc <rmw_validate_full_topic_name+0x34>
 8012580:	23f6      	movs	r3, #246	@ 0xf6
 8012582:	e7e9      	b.n	8012558 <rmw_validate_full_topic_name+0xb0>
 8012584:	2205      	movs	r2, #5
 8012586:	602a      	str	r2, [r5, #0]
 8012588:	2e00      	cmp	r6, #0
 801258a:	d1e5      	bne.n	8012558 <rmw_validate_full_topic_name+0xb0>
 801258c:	e7a6      	b.n	80124dc <rmw_validate_full_topic_name+0x34>
 801258e:	bf00      	nop
 8012590:	0801821c 	.word	0x0801821c

08012594 <rmw_validate_namespace_with_size>:
 8012594:	b340      	cbz	r0, 80125e8 <rmw_validate_namespace_with_size+0x54>
 8012596:	b570      	push	{r4, r5, r6, lr}
 8012598:	4614      	mov	r4, r2
 801259a:	b0c2      	sub	sp, #264	@ 0x108
 801259c:	b332      	cbz	r2, 80125ec <rmw_validate_namespace_with_size+0x58>
 801259e:	2901      	cmp	r1, #1
 80125a0:	460d      	mov	r5, r1
 80125a2:	461e      	mov	r6, r3
 80125a4:	d102      	bne.n	80125ac <rmw_validate_namespace_with_size+0x18>
 80125a6:	7803      	ldrb	r3, [r0, #0]
 80125a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80125aa:	d012      	beq.n	80125d2 <rmw_validate_namespace_with_size+0x3e>
 80125ac:	aa01      	add	r2, sp, #4
 80125ae:	4669      	mov	r1, sp
 80125b0:	f7ff ff7a 	bl	80124a8 <rmw_validate_full_topic_name>
 80125b4:	b978      	cbnz	r0, 80125d6 <rmw_validate_namespace_with_size+0x42>
 80125b6:	9b00      	ldr	r3, [sp, #0]
 80125b8:	b14b      	cbz	r3, 80125ce <rmw_validate_namespace_with_size+0x3a>
 80125ba:	2b07      	cmp	r3, #7
 80125bc:	d007      	beq.n	80125ce <rmw_validate_namespace_with_size+0x3a>
 80125be:	1e5a      	subs	r2, r3, #1
 80125c0:	2a05      	cmp	r2, #5
 80125c2:	d82b      	bhi.n	801261c <rmw_validate_namespace_with_size+0x88>
 80125c4:	e8df f002 	tbb	[pc, r2]
 80125c8:	1e212427 	.word	0x1e212427
 80125cc:	141b      	.short	0x141b
 80125ce:	2df5      	cmp	r5, #245	@ 0xf5
 80125d0:	d803      	bhi.n	80125da <rmw_validate_namespace_with_size+0x46>
 80125d2:	2000      	movs	r0, #0
 80125d4:	6020      	str	r0, [r4, #0]
 80125d6:	b042      	add	sp, #264	@ 0x108
 80125d8:	bd70      	pop	{r4, r5, r6, pc}
 80125da:	2307      	movs	r3, #7
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	2e00      	cmp	r6, #0
 80125e0:	d0f9      	beq.n	80125d6 <rmw_validate_namespace_with_size+0x42>
 80125e2:	23f4      	movs	r3, #244	@ 0xf4
 80125e4:	6033      	str	r3, [r6, #0]
 80125e6:	e7f6      	b.n	80125d6 <rmw_validate_namespace_with_size+0x42>
 80125e8:	200b      	movs	r0, #11
 80125ea:	4770      	bx	lr
 80125ec:	200b      	movs	r0, #11
 80125ee:	e7f2      	b.n	80125d6 <rmw_validate_namespace_with_size+0x42>
 80125f0:	2306      	movs	r3, #6
 80125f2:	6023      	str	r3, [r4, #0]
 80125f4:	2e00      	cmp	r6, #0
 80125f6:	d0ee      	beq.n	80125d6 <rmw_validate_namespace_with_size+0x42>
 80125f8:	9b01      	ldr	r3, [sp, #4]
 80125fa:	6033      	str	r3, [r6, #0]
 80125fc:	e7eb      	b.n	80125d6 <rmw_validate_namespace_with_size+0x42>
 80125fe:	2305      	movs	r3, #5
 8012600:	6023      	str	r3, [r4, #0]
 8012602:	e7f7      	b.n	80125f4 <rmw_validate_namespace_with_size+0x60>
 8012604:	2304      	movs	r3, #4
 8012606:	6023      	str	r3, [r4, #0]
 8012608:	e7f4      	b.n	80125f4 <rmw_validate_namespace_with_size+0x60>
 801260a:	2303      	movs	r3, #3
 801260c:	6023      	str	r3, [r4, #0]
 801260e:	e7f1      	b.n	80125f4 <rmw_validate_namespace_with_size+0x60>
 8012610:	2302      	movs	r3, #2
 8012612:	6023      	str	r3, [r4, #0]
 8012614:	e7ee      	b.n	80125f4 <rmw_validate_namespace_with_size+0x60>
 8012616:	2301      	movs	r3, #1
 8012618:	6023      	str	r3, [r4, #0]
 801261a:	e7eb      	b.n	80125f4 <rmw_validate_namespace_with_size+0x60>
 801261c:	4a03      	ldr	r2, [pc, #12]	@ (801262c <rmw_validate_namespace_with_size+0x98>)
 801261e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012622:	a802      	add	r0, sp, #8
 8012624:	f7ff fcda 	bl	8011fdc <rcutils_snprintf>
 8012628:	2001      	movs	r0, #1
 801262a:	e7d4      	b.n	80125d6 <rmw_validate_namespace_with_size+0x42>
 801262c:	08017c24 	.word	0x08017c24

08012630 <rmw_validate_namespace>:
 8012630:	b168      	cbz	r0, 801264e <rmw_validate_namespace+0x1e>
 8012632:	b570      	push	{r4, r5, r6, lr}
 8012634:	460d      	mov	r5, r1
 8012636:	4616      	mov	r6, r2
 8012638:	4604      	mov	r4, r0
 801263a:	f7ed fddb 	bl	80001f4 <strlen>
 801263e:	4633      	mov	r3, r6
 8012640:	4601      	mov	r1, r0
 8012642:	462a      	mov	r2, r5
 8012644:	4620      	mov	r0, r4
 8012646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801264a:	f7ff bfa3 	b.w	8012594 <rmw_validate_namespace_with_size>
 801264e:	200b      	movs	r0, #11
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop

08012654 <rmw_namespace_validation_result_string>:
 8012654:	2807      	cmp	r0, #7
 8012656:	bf9a      	itte	ls
 8012658:	4b02      	ldrls	r3, [pc, #8]	@ (8012664 <rmw_namespace_validation_result_string+0x10>)
 801265a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801265e:	4802      	ldrhi	r0, [pc, #8]	@ (8012668 <rmw_namespace_validation_result_string+0x14>)
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	08017e1c 	.word	0x08017e1c
 8012668:	08017c74 	.word	0x08017c74

0801266c <rmw_validate_node_name>:
 801266c:	2800      	cmp	r0, #0
 801266e:	d03b      	beq.n	80126e8 <rmw_validate_node_name+0x7c>
 8012670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012674:	460d      	mov	r5, r1
 8012676:	2900      	cmp	r1, #0
 8012678:	d038      	beq.n	80126ec <rmw_validate_node_name+0x80>
 801267a:	4616      	mov	r6, r2
 801267c:	4604      	mov	r4, r0
 801267e:	f7ed fdb9 	bl	80001f4 <strlen>
 8012682:	b1e0      	cbz	r0, 80126be <rmw_validate_node_name+0x52>
 8012684:	1e63      	subs	r3, r4, #1
 8012686:	eb03 0800 	add.w	r8, r3, r0
 801268a:	f1c4 0101 	rsb	r1, r4, #1
 801268e:	18cf      	adds	r7, r1, r3
 8012690:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012694:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012698:	f02e 0c20 	bic.w	ip, lr, #32
 801269c:	2a09      	cmp	r2, #9
 801269e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80126a2:	d914      	bls.n	80126ce <rmw_validate_node_name+0x62>
 80126a4:	f1bc 0f19 	cmp.w	ip, #25
 80126a8:	d911      	bls.n	80126ce <rmw_validate_node_name+0x62>
 80126aa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80126ae:	d00e      	beq.n	80126ce <rmw_validate_node_name+0x62>
 80126b0:	2302      	movs	r3, #2
 80126b2:	602b      	str	r3, [r5, #0]
 80126b4:	b106      	cbz	r6, 80126b8 <rmw_validate_node_name+0x4c>
 80126b6:	6037      	str	r7, [r6, #0]
 80126b8:	2000      	movs	r0, #0
 80126ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126be:	2301      	movs	r3, #1
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	2e00      	cmp	r6, #0
 80126c4:	d0f8      	beq.n	80126b8 <rmw_validate_node_name+0x4c>
 80126c6:	2000      	movs	r0, #0
 80126c8:	6030      	str	r0, [r6, #0]
 80126ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ce:	4543      	cmp	r3, r8
 80126d0:	d1dd      	bne.n	801268e <rmw_validate_node_name+0x22>
 80126d2:	7822      	ldrb	r2, [r4, #0]
 80126d4:	4b0d      	ldr	r3, [pc, #52]	@ (801270c <rmw_validate_node_name+0xa0>)
 80126d6:	5cd3      	ldrb	r3, [r2, r3]
 80126d8:	f013 0304 	ands.w	r3, r3, #4
 80126dc:	d110      	bne.n	8012700 <rmw_validate_node_name+0x94>
 80126de:	28ff      	cmp	r0, #255	@ 0xff
 80126e0:	d806      	bhi.n	80126f0 <rmw_validate_node_name+0x84>
 80126e2:	602b      	str	r3, [r5, #0]
 80126e4:	4618      	mov	r0, r3
 80126e6:	e7e8      	b.n	80126ba <rmw_validate_node_name+0x4e>
 80126e8:	200b      	movs	r0, #11
 80126ea:	4770      	bx	lr
 80126ec:	200b      	movs	r0, #11
 80126ee:	e7e4      	b.n	80126ba <rmw_validate_node_name+0x4e>
 80126f0:	2204      	movs	r2, #4
 80126f2:	602a      	str	r2, [r5, #0]
 80126f4:	2e00      	cmp	r6, #0
 80126f6:	d0df      	beq.n	80126b8 <rmw_validate_node_name+0x4c>
 80126f8:	22fe      	movs	r2, #254	@ 0xfe
 80126fa:	6032      	str	r2, [r6, #0]
 80126fc:	4618      	mov	r0, r3
 80126fe:	e7dc      	b.n	80126ba <rmw_validate_node_name+0x4e>
 8012700:	2303      	movs	r3, #3
 8012702:	602b      	str	r3, [r5, #0]
 8012704:	2e00      	cmp	r6, #0
 8012706:	d1de      	bne.n	80126c6 <rmw_validate_node_name+0x5a>
 8012708:	e7d6      	b.n	80126b8 <rmw_validate_node_name+0x4c>
 801270a:	bf00      	nop
 801270c:	0801821c 	.word	0x0801821c

08012710 <rmw_node_name_validation_result_string>:
 8012710:	2804      	cmp	r0, #4
 8012712:	bf9a      	itte	ls
 8012714:	4b02      	ldrls	r3, [pc, #8]	@ (8012720 <rmw_node_name_validation_result_string+0x10>)
 8012716:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801271a:	4802      	ldrhi	r0, [pc, #8]	@ (8012724 <rmw_node_name_validation_result_string+0x14>)
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	08017f28 	.word	0x08017f28
 8012724:	08017e3c 	.word	0x08017e3c

08012728 <get_memory>:
 8012728:	4603      	mov	r3, r0
 801272a:	6840      	ldr	r0, [r0, #4]
 801272c:	b158      	cbz	r0, 8012746 <get_memory+0x1e>
 801272e:	6842      	ldr	r2, [r0, #4]
 8012730:	605a      	str	r2, [r3, #4]
 8012732:	b10a      	cbz	r2, 8012738 <get_memory+0x10>
 8012734:	2100      	movs	r1, #0
 8012736:	6011      	str	r1, [r2, #0]
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	6042      	str	r2, [r0, #4]
 801273c:	b102      	cbz	r2, 8012740 <get_memory+0x18>
 801273e:	6010      	str	r0, [r2, #0]
 8012740:	2200      	movs	r2, #0
 8012742:	6002      	str	r2, [r0, #0]
 8012744:	6018      	str	r0, [r3, #0]
 8012746:	4770      	bx	lr

08012748 <put_memory>:
 8012748:	680b      	ldr	r3, [r1, #0]
 801274a:	b10b      	cbz	r3, 8012750 <put_memory+0x8>
 801274c:	684a      	ldr	r2, [r1, #4]
 801274e:	605a      	str	r2, [r3, #4]
 8012750:	684a      	ldr	r2, [r1, #4]
 8012752:	b102      	cbz	r2, 8012756 <put_memory+0xe>
 8012754:	6013      	str	r3, [r2, #0]
 8012756:	6803      	ldr	r3, [r0, #0]
 8012758:	428b      	cmp	r3, r1
 801275a:	6843      	ldr	r3, [r0, #4]
 801275c:	bf08      	it	eq
 801275e:	6002      	streq	r2, [r0, #0]
 8012760:	604b      	str	r3, [r1, #4]
 8012762:	b103      	cbz	r3, 8012766 <put_memory+0x1e>
 8012764:	6019      	str	r1, [r3, #0]
 8012766:	2300      	movs	r3, #0
 8012768:	600b      	str	r3, [r1, #0]
 801276a:	6041      	str	r1, [r0, #4]
 801276c:	4770      	bx	lr
 801276e:	bf00      	nop

08012770 <rmw_destroy_client>:
 8012770:	b570      	push	{r4, r5, r6, lr}
 8012772:	b128      	cbz	r0, 8012780 <rmw_destroy_client+0x10>
 8012774:	4604      	mov	r4, r0
 8012776:	6800      	ldr	r0, [r0, #0]
 8012778:	460d      	mov	r5, r1
 801277a:	f7f8 fd0f 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 801277e:	b910      	cbnz	r0, 8012786 <rmw_destroy_client+0x16>
 8012780:	2401      	movs	r4, #1
 8012782:	4620      	mov	r0, r4
 8012784:	bd70      	pop	{r4, r5, r6, pc}
 8012786:	6863      	ldr	r3, [r4, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d0f9      	beq.n	8012780 <rmw_destroy_client+0x10>
 801278c:	2d00      	cmp	r5, #0
 801278e:	d0f7      	beq.n	8012780 <rmw_destroy_client+0x10>
 8012790:	6828      	ldr	r0, [r5, #0]
 8012792:	f7f8 fd03 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 8012796:	2800      	cmp	r0, #0
 8012798:	d0f2      	beq.n	8012780 <rmw_destroy_client+0x10>
 801279a:	686e      	ldr	r6, [r5, #4]
 801279c:	2e00      	cmp	r6, #0
 801279e:	d0ef      	beq.n	8012780 <rmw_destroy_client+0x10>
 80127a0:	6864      	ldr	r4, [r4, #4]
 80127a2:	6932      	ldr	r2, [r6, #16]
 80127a4:	6920      	ldr	r0, [r4, #16]
 80127a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80127aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80127ae:	6819      	ldr	r1, [r3, #0]
 80127b0:	f002 f94a 	bl	8014a48 <uxr_buffer_cancel_data>
 80127b4:	4602      	mov	r2, r0
 80127b6:	6920      	ldr	r0, [r4, #16]
 80127b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80127bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80127c0:	f7f8 fc6c 	bl	800b09c <run_xrce_session>
 80127c4:	6920      	ldr	r0, [r4, #16]
 80127c6:	6932      	ldr	r2, [r6, #16]
 80127c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80127cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80127d0:	6819      	ldr	r1, [r3, #0]
 80127d2:	f7f9 ffc3 	bl	800c75c <uxr_buffer_delete_entity>
 80127d6:	4602      	mov	r2, r0
 80127d8:	6920      	ldr	r0, [r4, #16]
 80127da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80127de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80127e2:	f7f8 fc5b 	bl	800b09c <run_xrce_session>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	4628      	mov	r0, r5
 80127ea:	bf14      	ite	ne
 80127ec:	2400      	movne	r4, #0
 80127ee:	2402      	moveq	r4, #2
 80127f0:	f7f8 fb3c 	bl	800ae6c <rmw_uxrce_fini_client_memory>
 80127f4:	e7c5      	b.n	8012782 <rmw_destroy_client+0x12>
 80127f6:	bf00      	nop

080127f8 <rmw_get_implementation_identifier>:
 80127f8:	4b01      	ldr	r3, [pc, #4]	@ (8012800 <rmw_get_implementation_identifier+0x8>)
 80127fa:	6818      	ldr	r0, [r3, #0]
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	08017f54 	.word	0x08017f54

08012804 <rmw_init_options_init>:
 8012804:	b084      	sub	sp, #16
 8012806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012808:	b083      	sub	sp, #12
 801280a:	ad09      	add	r5, sp, #36	@ 0x24
 801280c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012810:	b130      	cbz	r0, 8012820 <rmw_init_options_init+0x1c>
 8012812:	4604      	mov	r4, r0
 8012814:	4628      	mov	r0, r5
 8012816:	f7f7 ff19 	bl	800a64c <rcutils_allocator_is_valid>
 801281a:	b108      	cbz	r0, 8012820 <rmw_init_options_init+0x1c>
 801281c:	68a6      	ldr	r6, [r4, #8]
 801281e:	b12e      	cbz	r6, 801282c <rmw_init_options_init+0x28>
 8012820:	200b      	movs	r0, #11
 8012822:	b003      	add	sp, #12
 8012824:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012828:	b004      	add	sp, #16
 801282a:	4770      	bx	lr
 801282c:	2200      	movs	r2, #0
 801282e:	2300      	movs	r3, #0
 8012830:	e9c4 2300 	strd	r2, r3, [r4]
 8012834:	4b20      	ldr	r3, [pc, #128]	@ (80128b8 <rmw_init_options_init+0xb4>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	60a3      	str	r3, [r4, #8]
 801283a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801283c:	f104 0c20 	add.w	ip, r4, #32
 8012840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012844:	466f      	mov	r7, sp
 8012846:	682b      	ldr	r3, [r5, #0]
 8012848:	f8cc 3000 	str.w	r3, [ip]
 801284c:	4638      	mov	r0, r7
 801284e:	61e6      	str	r6, [r4, #28]
 8012850:	60e6      	str	r6, [r4, #12]
 8012852:	f7ff fd79 	bl	8012348 <rmw_get_default_security_options>
 8012856:	e897 0003 	ldmia.w	r7, {r0, r1}
 801285a:	f104 0310 	add.w	r3, r4, #16
 801285e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012862:	2203      	movs	r2, #3
 8012864:	4815      	ldr	r0, [pc, #84]	@ (80128bc <rmw_init_options_init+0xb8>)
 8012866:	4916      	ldr	r1, [pc, #88]	@ (80128c0 <rmw_init_options_init+0xbc>)
 8012868:	7626      	strb	r6, [r4, #24]
 801286a:	f7f8 fa3f 	bl	800acec <rmw_uxrce_init_init_options_impl_memory>
 801286e:	4813      	ldr	r0, [pc, #76]	@ (80128bc <rmw_init_options_init+0xb8>)
 8012870:	f7ff ff5a 	bl	8012728 <get_memory>
 8012874:	b1f0      	cbz	r0, 80128b4 <rmw_init_options_init+0xb0>
 8012876:	4a13      	ldr	r2, [pc, #76]	@ (80128c4 <rmw_init_options_init+0xc0>)
 8012878:	6883      	ldr	r3, [r0, #8]
 801287a:	6851      	ldr	r1, [r2, #4]
 801287c:	7810      	ldrb	r0, [r2, #0]
 801287e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012880:	7418      	strb	r0, [r3, #16]
 8012882:	6159      	str	r1, [r3, #20]
 8012884:	68d1      	ldr	r1, [r2, #12]
 8012886:	61d9      	str	r1, [r3, #28]
 8012888:	6911      	ldr	r1, [r2, #16]
 801288a:	6219      	str	r1, [r3, #32]
 801288c:	6951      	ldr	r1, [r2, #20]
 801288e:	6892      	ldr	r2, [r2, #8]
 8012890:	619a      	str	r2, [r3, #24]
 8012892:	6259      	str	r1, [r3, #36]	@ 0x24
 8012894:	f7fb fbc0 	bl	800e018 <uxr_nanos>
 8012898:	f003 fbf4 	bl	8016084 <srand>
 801289c:	f003 fc20 	bl	80160e0 <rand>
 80128a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80128a2:	6298      	str	r0, [r3, #40]	@ 0x28
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d0f9      	beq.n	801289c <rmw_init_options_init+0x98>
 80128a8:	2000      	movs	r0, #0
 80128aa:	b003      	add	sp, #12
 80128ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128b0:	b004      	add	sp, #16
 80128b2:	4770      	bx	lr
 80128b4:	2001      	movs	r0, #1
 80128b6:	e7b4      	b.n	8012822 <rmw_init_options_init+0x1e>
 80128b8:	08017f54 	.word	0x08017f54
 80128bc:	2000dc7c 	.word	0x2000dc7c
 80128c0:	20009518 	.word	0x20009518
 80128c4:	200093a4 	.word	0x200093a4

080128c8 <rmw_init_options_copy>:
 80128c8:	b570      	push	{r4, r5, r6, lr}
 80128ca:	b088      	sub	sp, #32
 80128cc:	b160      	cbz	r0, 80128e8 <rmw_init_options_copy+0x20>
 80128ce:	460d      	mov	r5, r1
 80128d0:	b151      	cbz	r1, 80128e8 <rmw_init_options_copy+0x20>
 80128d2:	4604      	mov	r4, r0
 80128d4:	6880      	ldr	r0, [r0, #8]
 80128d6:	b128      	cbz	r0, 80128e4 <rmw_init_options_copy+0x1c>
 80128d8:	4b33      	ldr	r3, [pc, #204]	@ (80129a8 <rmw_init_options_copy+0xe0>)
 80128da:	6819      	ldr	r1, [r3, #0]
 80128dc:	f7ed fc80 	bl	80001e0 <strcmp>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d154      	bne.n	801298e <rmw_init_options_copy+0xc6>
 80128e4:	68ab      	ldr	r3, [r5, #8]
 80128e6:	b11b      	cbz	r3, 80128f0 <rmw_init_options_copy+0x28>
 80128e8:	240b      	movs	r4, #11
 80128ea:	4620      	mov	r0, r4
 80128ec:	b008      	add	sp, #32
 80128ee:	bd70      	pop	{r4, r5, r6, pc}
 80128f0:	4623      	mov	r3, r4
 80128f2:	462a      	mov	r2, r5
 80128f4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80128f8:	f8d3 c000 	ldr.w	ip, [r3]
 80128fc:	6858      	ldr	r0, [r3, #4]
 80128fe:	6899      	ldr	r1, [r3, #8]
 8012900:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012904:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012908:	3310      	adds	r3, #16
 801290a:	42b3      	cmp	r3, r6
 801290c:	f8c2 c000 	str.w	ip, [r2]
 8012910:	6050      	str	r0, [r2, #4]
 8012912:	6091      	str	r1, [r2, #8]
 8012914:	f102 0210 	add.w	r2, r2, #16
 8012918:	d1ee      	bne.n	80128f8 <rmw_init_options_copy+0x30>
 801291a:	6819      	ldr	r1, [r3, #0]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	6053      	str	r3, [r2, #4]
 8012920:	6011      	str	r1, [r2, #0]
 8012922:	f104 0e20 	add.w	lr, r4, #32
 8012926:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801292a:	f10d 0c0c 	add.w	ip, sp, #12
 801292e:	4666      	mov	r6, ip
 8012930:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012934:	f8de 3000 	ldr.w	r3, [lr]
 8012938:	f8cc 3000 	str.w	r3, [ip]
 801293c:	4630      	mov	r0, r6
 801293e:	f7f7 fe85 	bl	800a64c <rcutils_allocator_is_valid>
 8012942:	2800      	cmp	r0, #0
 8012944:	d0d0      	beq.n	80128e8 <rmw_init_options_copy+0x20>
 8012946:	ab08      	add	r3, sp, #32
 8012948:	e913 0003 	ldmdb	r3, {r0, r1}
 801294c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012950:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012954:	69e0      	ldr	r0, [r4, #28]
 8012956:	f7ff fb6d 	bl	8012034 <rcutils_strdup>
 801295a:	61e8      	str	r0, [r5, #28]
 801295c:	69e3      	ldr	r3, [r4, #28]
 801295e:	b103      	cbz	r3, 8012962 <rmw_init_options_copy+0x9a>
 8012960:	b1f8      	cbz	r0, 80129a2 <rmw_init_options_copy+0xda>
 8012962:	4812      	ldr	r0, [pc, #72]	@ (80129ac <rmw_init_options_copy+0xe4>)
 8012964:	f7ff fee0 	bl	8012728 <get_memory>
 8012968:	b1a8      	cbz	r0, 8012996 <rmw_init_options_copy+0xce>
 801296a:	6883      	ldr	r3, [r0, #8]
 801296c:	636b      	str	r3, [r5, #52]	@ 0x34
 801296e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012970:	f102 0c10 	add.w	ip, r2, #16
 8012974:	f103 0510 	add.w	r5, r3, #16
 8012978:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801297e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012982:	2400      	movs	r4, #0
 8012984:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012988:	4620      	mov	r0, r4
 801298a:	b008      	add	sp, #32
 801298c:	bd70      	pop	{r4, r5, r6, pc}
 801298e:	240c      	movs	r4, #12
 8012990:	4620      	mov	r0, r4
 8012992:	b008      	add	sp, #32
 8012994:	bd70      	pop	{r4, r5, r6, pc}
 8012996:	9b04      	ldr	r3, [sp, #16]
 8012998:	9907      	ldr	r1, [sp, #28]
 801299a:	69e8      	ldr	r0, [r5, #28]
 801299c:	4798      	blx	r3
 801299e:	2401      	movs	r4, #1
 80129a0:	e7a3      	b.n	80128ea <rmw_init_options_copy+0x22>
 80129a2:	240a      	movs	r4, #10
 80129a4:	e7a1      	b.n	80128ea <rmw_init_options_copy+0x22>
 80129a6:	bf00      	nop
 80129a8:	08017f54 	.word	0x08017f54
 80129ac:	2000dc7c 	.word	0x2000dc7c

080129b0 <rmw_init_options_fini>:
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d041      	beq.n	8012a38 <rmw_init_options_fini+0x88>
 80129b4:	b510      	push	{r4, lr}
 80129b6:	4604      	mov	r4, r0
 80129b8:	b08e      	sub	sp, #56	@ 0x38
 80129ba:	3020      	adds	r0, #32
 80129bc:	f7f7 fe46 	bl	800a64c <rcutils_allocator_is_valid>
 80129c0:	b380      	cbz	r0, 8012a24 <rmw_init_options_fini+0x74>
 80129c2:	68a0      	ldr	r0, [r4, #8]
 80129c4:	b120      	cbz	r0, 80129d0 <rmw_init_options_fini+0x20>
 80129c6:	4b1e      	ldr	r3, [pc, #120]	@ (8012a40 <rmw_init_options_fini+0x90>)
 80129c8:	6819      	ldr	r1, [r3, #0]
 80129ca:	f7ed fc09 	bl	80001e0 <strcmp>
 80129ce:	bb88      	cbnz	r0, 8012a34 <rmw_init_options_fini+0x84>
 80129d0:	4b1c      	ldr	r3, [pc, #112]	@ (8012a44 <rmw_init_options_fini+0x94>)
 80129d2:	6819      	ldr	r1, [r3, #0]
 80129d4:	b351      	cbz	r1, 8012a2c <rmw_init_options_fini+0x7c>
 80129d6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80129d8:	e001      	b.n	80129de <rmw_init_options_fini+0x2e>
 80129da:	6849      	ldr	r1, [r1, #4]
 80129dc:	b331      	cbz	r1, 8012a2c <rmw_init_options_fini+0x7c>
 80129de:	688b      	ldr	r3, [r1, #8]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d1fa      	bne.n	80129da <rmw_init_options_fini+0x2a>
 80129e4:	4817      	ldr	r0, [pc, #92]	@ (8012a44 <rmw_init_options_fini+0x94>)
 80129e6:	f7ff feaf 	bl	8012748 <put_memory>
 80129ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80129ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80129ee:	69e0      	ldr	r0, [r4, #28]
 80129f0:	4798      	blx	r3
 80129f2:	4668      	mov	r0, sp
 80129f4:	f7ff fc98 	bl	8012328 <rmw_get_zero_initialized_init_options>
 80129f8:	46ee      	mov	lr, sp
 80129fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129fe:	46a4      	mov	ip, r4
 8012a00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012a18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	4618      	mov	r0, r3
 8012a20:	b00e      	add	sp, #56	@ 0x38
 8012a22:	bd10      	pop	{r4, pc}
 8012a24:	230b      	movs	r3, #11
 8012a26:	4618      	mov	r0, r3
 8012a28:	b00e      	add	sp, #56	@ 0x38
 8012a2a:	bd10      	pop	{r4, pc}
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	4618      	mov	r0, r3
 8012a30:	b00e      	add	sp, #56	@ 0x38
 8012a32:	bd10      	pop	{r4, pc}
 8012a34:	230c      	movs	r3, #12
 8012a36:	e7f2      	b.n	8012a1e <rmw_init_options_fini+0x6e>
 8012a38:	230b      	movs	r3, #11
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	08017f54 	.word	0x08017f54
 8012a44:	2000dc7c 	.word	0x2000dc7c

08012a48 <rmw_init>:
 8012a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a4c:	b083      	sub	sp, #12
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	f000 80d3 	beq.w	8012bfa <rmw_init+0x1b2>
 8012a54:	460e      	mov	r6, r1
 8012a56:	2900      	cmp	r1, #0
 8012a58:	f000 80cf 	beq.w	8012bfa <rmw_init+0x1b2>
 8012a5c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012a5e:	4605      	mov	r5, r0
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f000 80ca 	beq.w	8012bfa <rmw_init+0x1b2>
 8012a66:	4b78      	ldr	r3, [pc, #480]	@ (8012c48 <rmw_init+0x200>)
 8012a68:	6880      	ldr	r0, [r0, #8]
 8012a6a:	681f      	ldr	r7, [r3, #0]
 8012a6c:	b128      	cbz	r0, 8012a7a <rmw_init+0x32>
 8012a6e:	4639      	mov	r1, r7
 8012a70:	f7ed fbb6 	bl	80001e0 <strcmp>
 8012a74:	2800      	cmp	r0, #0
 8012a76:	f040 80ca 	bne.w	8012c0e <rmw_init+0x1c6>
 8012a7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012a7e:	4c73      	ldr	r4, [pc, #460]	@ (8012c4c <rmw_init+0x204>)
 8012a80:	4973      	ldr	r1, [pc, #460]	@ (8012c50 <rmw_init+0x208>)
 8012a82:	4874      	ldr	r0, [pc, #464]	@ (8012c54 <rmw_init+0x20c>)
 8012a84:	60b7      	str	r7, [r6, #8]
 8012a86:	e9c6 2300 	strd	r2, r3, [r6]
 8012a8a:	68eb      	ldr	r3, [r5, #12]
 8012a8c:	64b3      	str	r3, [r6, #72]	@ 0x48
 8012a8e:	2201      	movs	r2, #1
 8012a90:	f7f8 f8cc 	bl	800ac2c <rmw_uxrce_init_session_memory>
 8012a94:	4620      	mov	r0, r4
 8012a96:	4970      	ldr	r1, [pc, #448]	@ (8012c58 <rmw_init+0x210>)
 8012a98:	2204      	movs	r2, #4
 8012a9a:	f7f8 f907 	bl	800acac <rmw_uxrce_init_static_input_buffer_memory>
 8012a9e:	f04f 0800 	mov.w	r8, #0
 8012aa2:	486c      	ldr	r0, [pc, #432]	@ (8012c54 <rmw_init+0x20c>)
 8012aa4:	f884 800d 	strb.w	r8, [r4, #13]
 8012aa8:	f7ff fe3e 	bl	8012728 <get_memory>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	f000 80a9 	beq.w	8012c04 <rmw_init+0x1bc>
 8012ab2:	6884      	ldr	r4, [r0, #8]
 8012ab4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8012ab6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8012ab8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012abc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012ac0:	9101      	str	r1, [sp, #4]
 8012ac2:	6a00      	ldr	r0, [r0, #32]
 8012ac4:	9000      	str	r0, [sp, #0]
 8012ac6:	f104 0910 	add.w	r9, r4, #16
 8012aca:	4661      	mov	r1, ip
 8012acc:	4648      	mov	r0, r9
 8012ace:	f001 f9f3 	bl	8013eb8 <uxr_set_custom_transport_callbacks>
 8012ad2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8012ad6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012ada:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8012ade:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8012ae2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8012ae6:	495d      	ldr	r1, [pc, #372]	@ (8012c5c <rmw_init+0x214>)
 8012ae8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8012aec:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8012af0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8012af4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8012af8:	4859      	ldr	r0, [pc, #356]	@ (8012c60 <rmw_init+0x218>)
 8012afa:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8012afe:	2201      	movs	r2, #1
 8012b00:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8012b02:	f7f8 f873 	bl	800abec <rmw_uxrce_init_node_memory>
 8012b06:	4957      	ldr	r1, [pc, #348]	@ (8012c64 <rmw_init+0x21c>)
 8012b08:	4857      	ldr	r0, [pc, #348]	@ (8012c68 <rmw_init+0x220>)
 8012b0a:	2205      	movs	r2, #5
 8012b0c:	f7f8 f84e 	bl	800abac <rmw_uxrce_init_subscription_memory>
 8012b10:	4956      	ldr	r1, [pc, #344]	@ (8012c6c <rmw_init+0x224>)
 8012b12:	4857      	ldr	r0, [pc, #348]	@ (8012c70 <rmw_init+0x228>)
 8012b14:	220a      	movs	r2, #10
 8012b16:	f7f8 f829 	bl	800ab6c <rmw_uxrce_init_publisher_memory>
 8012b1a:	4956      	ldr	r1, [pc, #344]	@ (8012c74 <rmw_init+0x22c>)
 8012b1c:	4856      	ldr	r0, [pc, #344]	@ (8012c78 <rmw_init+0x230>)
 8012b1e:	2201      	movs	r2, #1
 8012b20:	f7f7 ffe4 	bl	800aaec <rmw_uxrce_init_service_memory>
 8012b24:	4955      	ldr	r1, [pc, #340]	@ (8012c7c <rmw_init+0x234>)
 8012b26:	4856      	ldr	r0, [pc, #344]	@ (8012c80 <rmw_init+0x238>)
 8012b28:	2201      	movs	r2, #1
 8012b2a:	f7f7 ffff 	bl	800ab2c <rmw_uxrce_init_client_memory>
 8012b2e:	4955      	ldr	r1, [pc, #340]	@ (8012c84 <rmw_init+0x23c>)
 8012b30:	4855      	ldr	r0, [pc, #340]	@ (8012c88 <rmw_init+0x240>)
 8012b32:	220f      	movs	r2, #15
 8012b34:	f7f8 f89a 	bl	800ac6c <rmw_uxrce_init_topic_memory>
 8012b38:	4954      	ldr	r1, [pc, #336]	@ (8012c8c <rmw_init+0x244>)
 8012b3a:	4855      	ldr	r0, [pc, #340]	@ (8012c90 <rmw_init+0x248>)
 8012b3c:	2203      	movs	r2, #3
 8012b3e:	f7f8 f8d5 	bl	800acec <rmw_uxrce_init_init_options_impl_memory>
 8012b42:	4954      	ldr	r1, [pc, #336]	@ (8012c94 <rmw_init+0x24c>)
 8012b44:	4854      	ldr	r0, [pc, #336]	@ (8012c98 <rmw_init+0x250>)
 8012b46:	2204      	movs	r2, #4
 8012b48:	f7f8 f8f0 	bl	800ad2c <rmw_uxrce_init_wait_set_memory>
 8012b4c:	4953      	ldr	r1, [pc, #332]	@ (8012c9c <rmw_init+0x254>)
 8012b4e:	4854      	ldr	r0, [pc, #336]	@ (8012ca0 <rmw_init+0x258>)
 8012b50:	2204      	movs	r2, #4
 8012b52:	f7f8 f90b 	bl	800ad6c <rmw_uxrce_init_guard_condition_memory>
 8012b56:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8012b58:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8012b5a:	4642      	mov	r2, r8
 8012b5c:	f000 fd9e 	bl	801369c <rmw_uxrce_transport_init>
 8012b60:	4607      	mov	r7, r0
 8012b62:	2800      	cmp	r0, #0
 8012b64:	d158      	bne.n	8012c18 <rmw_init+0x1d0>
 8012b66:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012b68:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8012b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b6e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8012b72:	4628      	mov	r0, r5
 8012b74:	f7fa f8b4 	bl	800cce0 <uxr_init_session>
 8012b78:	494a      	ldr	r1, [pc, #296]	@ (8012ca4 <rmw_init+0x25c>)
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	f7fa f8d3 	bl	800cd28 <uxr_set_topic_callback>
 8012b82:	4949      	ldr	r1, [pc, #292]	@ (8012ca8 <rmw_init+0x260>)
 8012b84:	463a      	mov	r2, r7
 8012b86:	4628      	mov	r0, r5
 8012b88:	f7fa f8ca 	bl	800cd20 <uxr_set_status_callback>
 8012b8c:	4947      	ldr	r1, [pc, #284]	@ (8012cac <rmw_init+0x264>)
 8012b8e:	463a      	mov	r2, r7
 8012b90:	4628      	mov	r0, r5
 8012b92:	f7fa f8cd 	bl	800cd30 <uxr_set_request_callback>
 8012b96:	4946      	ldr	r1, [pc, #280]	@ (8012cb0 <rmw_init+0x268>)
 8012b98:	463a      	mov	r2, r7
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	f7fa f8cc 	bl	800cd38 <uxr_set_reply_callback>
 8012ba0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012ba4:	2304      	movs	r3, #4
 8012ba6:	0092      	lsls	r2, r2, #2
 8012ba8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8012bac:	4628      	mov	r0, r5
 8012bae:	f7fa f901 	bl	800cdb4 <uxr_create_input_reliable_stream>
 8012bb2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012bb6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8012bba:	0092      	lsls	r2, r2, #2
 8012bbc:	2304      	movs	r3, #4
 8012bbe:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	f7fa f8ce 	bl	800cd64 <uxr_create_output_reliable_stream>
 8012bc8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8012bcc:	4628      	mov	r0, r5
 8012bce:	f7fa f8eb 	bl	800cda8 <uxr_create_input_best_effort_stream>
 8012bd2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8012bd6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8012bda:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012bde:	3114      	adds	r1, #20
 8012be0:	4628      	mov	r0, r5
 8012be2:	f7fa f8ad 	bl	800cd40 <uxr_create_output_best_effort_stream>
 8012be6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8012bea:	4628      	mov	r0, r5
 8012bec:	f7fa fe38 	bl	800d860 <uxr_create_session>
 8012bf0:	b1f8      	cbz	r0, 8012c32 <rmw_init+0x1ea>
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	b003      	add	sp, #12
 8012bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bfa:	270b      	movs	r7, #11
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	b003      	add	sp, #12
 8012c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c04:	2701      	movs	r7, #1
 8012c06:	4638      	mov	r0, r7
 8012c08:	b003      	add	sp, #12
 8012c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c0e:	270c      	movs	r7, #12
 8012c10:	4638      	mov	r0, r7
 8012c12:	b003      	add	sp, #12
 8012c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c18:	4648      	mov	r0, r9
 8012c1a:	f001 f98f 	bl	8013f3c <uxr_close_custom_transport>
 8012c1e:	480d      	ldr	r0, [pc, #52]	@ (8012c54 <rmw_init+0x20c>)
 8012c20:	4621      	mov	r1, r4
 8012c22:	f7ff fd91 	bl	8012748 <put_memory>
 8012c26:	4638      	mov	r0, r7
 8012c28:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8012c2c:	b003      	add	sp, #12
 8012c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c32:	4648      	mov	r0, r9
 8012c34:	f001 f982 	bl	8013f3c <uxr_close_custom_transport>
 8012c38:	4806      	ldr	r0, [pc, #24]	@ (8012c54 <rmw_init+0x20c>)
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	f7ff fd84 	bl	8012748 <put_memory>
 8012c40:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8012c42:	2701      	movs	r7, #1
 8012c44:	e7d5      	b.n	8012bf2 <rmw_init+0x1aa>
 8012c46:	bf00      	nop
 8012c48:	08017f54 	.word	0x08017f54
 8012c4c:	2000dccc 	.word	0x2000dccc
 8012c50:	20009f78 	.word	0x20009f78
 8012c54:	2000dcbc 	.word	0x2000dcbc
 8012c58:	2000b520 	.word	0x2000b520
 8012c5c:	2000959c 	.word	0x2000959c
 8012c60:	2000dc8c 	.word	0x2000dc8c
 8012c64:	2000d620 	.word	0x2000d620
 8012c68:	2000dcdc 	.word	0x2000dcdc
 8012c6c:	20009640 	.word	0x20009640
 8012c70:	2000dc9c 	.word	0x2000dc9c
 8012c74:	20009eb0 	.word	0x20009eb0
 8012c78:	2000dcac 	.word	0x2000dcac
 8012c7c:	200093d0 	.word	0x200093d0
 8012c80:	200093c0 	.word	0x200093c0
 8012c84:	2000da58 	.word	0x2000da58
 8012c88:	2000dcec 	.word	0x2000dcec
 8012c8c:	20009518 	.word	0x20009518
 8012c90:	2000dc7c 	.word	0x2000dc7c
 8012c94:	2000dbfc 	.word	0x2000dbfc
 8012c98:	2000dcfc 	.word	0x2000dcfc
 8012c9c:	20009498 	.word	0x20009498
 8012ca0:	2000dc6c 	.word	0x2000dc6c
 8012ca4:	08015c29 	.word	0x08015c29
 8012ca8:	08015c21 	.word	0x08015c21
 8012cac:	08015cc1 	.word	0x08015cc1
 8012cb0:	08015d5d 	.word	0x08015d5d

08012cb4 <rmw_context_fini>:
 8012cb4:	4b17      	ldr	r3, [pc, #92]	@ (8012d14 <rmw_context_fini+0x60>)
 8012cb6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8012cb8:	b570      	push	{r4, r5, r6, lr}
 8012cba:	681c      	ldr	r4, [r3, #0]
 8012cbc:	4605      	mov	r5, r0
 8012cbe:	b334      	cbz	r4, 8012d0e <rmw_context_fini+0x5a>
 8012cc0:	2600      	movs	r6, #0
 8012cc2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012cc6:	6902      	ldr	r2, [r0, #16]
 8012cc8:	428a      	cmp	r2, r1
 8012cca:	d018      	beq.n	8012cfe <rmw_context_fini+0x4a>
 8012ccc:	2c00      	cmp	r4, #0
 8012cce:	d1f8      	bne.n	8012cc2 <rmw_context_fini+0xe>
 8012cd0:	b189      	cbz	r1, 8012cf6 <rmw_context_fini+0x42>
 8012cd2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8012cd6:	789b      	ldrb	r3, [r3, #2]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8012cde:	bf14      	ite	ne
 8012ce0:	210a      	movne	r1, #10
 8012ce2:	2100      	moveq	r1, #0
 8012ce4:	f7fa fd94 	bl	800d810 <uxr_delete_session_retries>
 8012ce8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012cea:	f7f8 f85f 	bl	800adac <rmw_uxrce_fini_session_memory>
 8012cee:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012cf0:	3010      	adds	r0, #16
 8012cf2:	f001 f923 	bl	8013f3c <uxr_close_custom_transport>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	bd70      	pop	{r4, r5, r6, pc}
 8012cfe:	3018      	adds	r0, #24
 8012d00:	f000 f90e 	bl	8012f20 <rmw_destroy_node>
 8012d04:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012d06:	4606      	mov	r6, r0
 8012d08:	2c00      	cmp	r4, #0
 8012d0a:	d1da      	bne.n	8012cc2 <rmw_context_fini+0xe>
 8012d0c:	e7e0      	b.n	8012cd0 <rmw_context_fini+0x1c>
 8012d0e:	4626      	mov	r6, r4
 8012d10:	e7de      	b.n	8012cd0 <rmw_context_fini+0x1c>
 8012d12:	bf00      	nop
 8012d14:	2000dc8c 	.word	0x2000dc8c

08012d18 <create_topic>:
 8012d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d1c:	4605      	mov	r5, r0
 8012d1e:	b084      	sub	sp, #16
 8012d20:	4822      	ldr	r0, [pc, #136]	@ (8012dac <create_topic+0x94>)
 8012d22:	460f      	mov	r7, r1
 8012d24:	4616      	mov	r6, r2
 8012d26:	f7ff fcff 	bl	8012728 <get_memory>
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d039      	beq.n	8012da4 <create_topic+0x8c>
 8012d30:	692b      	ldr	r3, [r5, #16]
 8012d32:	6884      	ldr	r4, [r0, #8]
 8012d34:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8012db4 <create_topic+0x9c>
 8012d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012d3c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012d40:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8012d44:	1c42      	adds	r2, r0, #1
 8012d46:	2102      	movs	r1, #2
 8012d48:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8012d4c:	f7f9 ff08 	bl	800cb60 <uxr_object_id>
 8012d50:	223c      	movs	r2, #60	@ 0x3c
 8012d52:	6120      	str	r0, [r4, #16]
 8012d54:	4641      	mov	r1, r8
 8012d56:	4638      	mov	r0, r7
 8012d58:	f7f8 fa06 	bl	800b168 <generate_topic_name>
 8012d5c:	b1f0      	cbz	r0, 8012d9c <create_topic+0x84>
 8012d5e:	4f14      	ldr	r7, [pc, #80]	@ (8012db0 <create_topic+0x98>)
 8012d60:	4630      	mov	r0, r6
 8012d62:	2264      	movs	r2, #100	@ 0x64
 8012d64:	4639      	mov	r1, r7
 8012d66:	f7f8 f9cf 	bl	800b108 <generate_type_name>
 8012d6a:	b1b8      	cbz	r0, 8012d9c <create_topic+0x84>
 8012d6c:	6928      	ldr	r0, [r5, #16]
 8012d6e:	2306      	movs	r3, #6
 8012d70:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012d74:	f8cd 8000 	str.w	r8, [sp]
 8012d78:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012d7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d80:	6811      	ldr	r1, [r2, #0]
 8012d82:	696b      	ldr	r3, [r5, #20]
 8012d84:	6922      	ldr	r2, [r4, #16]
 8012d86:	f7f9 fd67 	bl	800c858 <uxr_buffer_create_topic_bin>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	6928      	ldr	r0, [r5, #16]
 8012d8e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012d92:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012d96:	f7f8 f981 	bl	800b09c <run_xrce_session>
 8012d9a:	b918      	cbnz	r0, 8012da4 <create_topic+0x8c>
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f7f8 f87b 	bl	800ae98 <rmw_uxrce_fini_topic_memory>
 8012da2:	2400      	movs	r4, #0
 8012da4:	4620      	mov	r0, r4
 8012da6:	b004      	add	sp, #16
 8012da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dac:	2000dcec 	.word	0x2000dcec
 8012db0:	2000ddd8 	.word	0x2000ddd8
 8012db4:	2000dd9c 	.word	0x2000dd9c

08012db8 <destroy_topic>:
 8012db8:	b538      	push	{r3, r4, r5, lr}
 8012dba:	6985      	ldr	r5, [r0, #24]
 8012dbc:	b1d5      	cbz	r5, 8012df4 <destroy_topic+0x3c>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	6928      	ldr	r0, [r5, #16]
 8012dc2:	6922      	ldr	r2, [r4, #16]
 8012dc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012dc8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012dcc:	6819      	ldr	r1, [r3, #0]
 8012dce:	f7f9 fcc5 	bl	800c75c <uxr_buffer_delete_entity>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	6928      	ldr	r0, [r5, #16]
 8012dd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012dda:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012dde:	f7f8 f95d 	bl	800b09c <run_xrce_session>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	4620      	mov	r0, r4
 8012de6:	bf14      	ite	ne
 8012de8:	2400      	movne	r4, #0
 8012dea:	2402      	moveq	r4, #2
 8012dec:	f7f8 f854 	bl	800ae98 <rmw_uxrce_fini_topic_memory>
 8012df0:	4620      	mov	r0, r4
 8012df2:	bd38      	pop	{r3, r4, r5, pc}
 8012df4:	2401      	movs	r4, #1
 8012df6:	4620      	mov	r0, r4
 8012df8:	bd38      	pop	{r3, r4, r5, pc}
 8012dfa:	bf00      	nop

08012dfc <create_node>:
 8012dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e00:	b083      	sub	sp, #12
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d05f      	beq.n	8012ec6 <create_node+0xca>
 8012e06:	4606      	mov	r6, r0
 8012e08:	4835      	ldr	r0, [pc, #212]	@ (8012ee0 <create_node+0xe4>)
 8012e0a:	460f      	mov	r7, r1
 8012e0c:	4690      	mov	r8, r2
 8012e0e:	461d      	mov	r5, r3
 8012e10:	f7ff fc8a 	bl	8012728 <get_memory>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	d056      	beq.n	8012ec6 <create_node+0xca>
 8012e18:	6884      	ldr	r4, [r0, #8]
 8012e1a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012e1c:	6123      	str	r3, [r4, #16]
 8012e1e:	f7ff fceb 	bl	80127f8 <rmw_get_implementation_identifier>
 8012e22:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8012e26:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012e2a:	f8c4 9020 	str.w	r9, [r4, #32]
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f7ed f9e0 	bl	80001f4 <strlen>
 8012e34:	1c42      	adds	r2, r0, #1
 8012e36:	2a3c      	cmp	r2, #60	@ 0x3c
 8012e38:	f104 0518 	add.w	r5, r4, #24
 8012e3c:	d840      	bhi.n	8012ec0 <create_node+0xc4>
 8012e3e:	4648      	mov	r0, r9
 8012e40:	4631      	mov	r1, r6
 8012e42:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8012e46:	f003 fc9c 	bl	8016782 <memcpy>
 8012e4a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8012e4e:	4638      	mov	r0, r7
 8012e50:	f7ed f9d0 	bl	80001f4 <strlen>
 8012e54:	1c42      	adds	r2, r0, #1
 8012e56:	2a3c      	cmp	r2, #60	@ 0x3c
 8012e58:	d832      	bhi.n	8012ec0 <create_node+0xc4>
 8012e5a:	4639      	mov	r1, r7
 8012e5c:	4648      	mov	r0, r9
 8012e5e:	f003 fc90 	bl	8016782 <memcpy>
 8012e62:	6923      	ldr	r3, [r4, #16]
 8012e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012e68:	2101      	movs	r1, #1
 8012e6a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8012e6e:	1842      	adds	r2, r0, r1
 8012e70:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8012e74:	f7f9 fe74 	bl	800cb60 <uxr_object_id>
 8012e78:	6160      	str	r0, [r4, #20]
 8012e7a:	783b      	ldrb	r3, [r7, #0]
 8012e7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e7e:	d127      	bne.n	8012ed0 <create_node+0xd4>
 8012e80:	787b      	ldrb	r3, [r7, #1]
 8012e82:	bb2b      	cbnz	r3, 8012ed0 <create_node+0xd4>
 8012e84:	4a17      	ldr	r2, [pc, #92]	@ (8012ee4 <create_node+0xe8>)
 8012e86:	4818      	ldr	r0, [pc, #96]	@ (8012ee8 <create_node+0xec>)
 8012e88:	4633      	mov	r3, r6
 8012e8a:	213c      	movs	r1, #60	@ 0x3c
 8012e8c:	f003 fad6 	bl	801643c <sniprintf>
 8012e90:	6920      	ldr	r0, [r4, #16]
 8012e92:	4915      	ldr	r1, [pc, #84]	@ (8012ee8 <create_node+0xec>)
 8012e94:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012e98:	9100      	str	r1, [sp, #0]
 8012e9a:	2106      	movs	r1, #6
 8012e9c:	9101      	str	r1, [sp, #4]
 8012e9e:	6811      	ldr	r1, [r2, #0]
 8012ea0:	6962      	ldr	r2, [r4, #20]
 8012ea2:	fa1f f388 	uxth.w	r3, r8
 8012ea6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012eaa:	f7f9 fca3 	bl	800c7f4 <uxr_buffer_create_participant_bin>
 8012eae:	4602      	mov	r2, r0
 8012eb0:	6920      	ldr	r0, [r4, #16]
 8012eb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012eb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012eba:	f7f8 f8ef 	bl	800b09c <run_xrce_session>
 8012ebe:	b918      	cbnz	r0, 8012ec8 <create_node+0xcc>
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	f7f7 ff79 	bl	800adb8 <rmw_uxrce_fini_node_memory>
 8012ec6:	2500      	movs	r5, #0
 8012ec8:	4628      	mov	r0, r5
 8012eca:	b003      	add	sp, #12
 8012ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ed0:	4a06      	ldr	r2, [pc, #24]	@ (8012eec <create_node+0xf0>)
 8012ed2:	9600      	str	r6, [sp, #0]
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	213c      	movs	r1, #60	@ 0x3c
 8012ed8:	4803      	ldr	r0, [pc, #12]	@ (8012ee8 <create_node+0xec>)
 8012eda:	f003 faaf 	bl	801643c <sniprintf>
 8012ede:	e7d7      	b.n	8012e90 <create_node+0x94>
 8012ee0:	2000dc8c 	.word	0x2000dc8c
 8012ee4:	080177b4 	.word	0x080177b4
 8012ee8:	2000de3c 	.word	0x2000de3c
 8012eec:	08017aa4 	.word	0x08017aa4

08012ef0 <rmw_create_node>:
 8012ef0:	b199      	cbz	r1, 8012f1a <rmw_create_node+0x2a>
 8012ef2:	780b      	ldrb	r3, [r1, #0]
 8012ef4:	468c      	mov	ip, r1
 8012ef6:	b183      	cbz	r3, 8012f1a <rmw_create_node+0x2a>
 8012ef8:	b410      	push	{r4}
 8012efa:	4614      	mov	r4, r2
 8012efc:	b14a      	cbz	r2, 8012f12 <rmw_create_node+0x22>
 8012efe:	7813      	ldrb	r3, [r2, #0]
 8012f00:	b13b      	cbz	r3, 8012f12 <rmw_create_node+0x22>
 8012f02:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8012f04:	4603      	mov	r3, r0
 8012f06:	4621      	mov	r1, r4
 8012f08:	4660      	mov	r0, ip
 8012f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f0e:	f7ff bf75 	b.w	8012dfc <create_node>
 8012f12:	2000      	movs	r0, #0
 8012f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f18:	4770      	bx	lr
 8012f1a:	2000      	movs	r0, #0
 8012f1c:	4770      	bx	lr
 8012f1e:	bf00      	nop

08012f20 <rmw_destroy_node>:
 8012f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f22:	b328      	cbz	r0, 8012f70 <rmw_destroy_node+0x50>
 8012f24:	4607      	mov	r7, r0
 8012f26:	6800      	ldr	r0, [r0, #0]
 8012f28:	b120      	cbz	r0, 8012f34 <rmw_destroy_node+0x14>
 8012f2a:	4b36      	ldr	r3, [pc, #216]	@ (8013004 <rmw_destroy_node+0xe4>)
 8012f2c:	6819      	ldr	r1, [r3, #0]
 8012f2e:	f7ed f957 	bl	80001e0 <strcmp>
 8012f32:	b9e8      	cbnz	r0, 8012f70 <rmw_destroy_node+0x50>
 8012f34:	687d      	ldr	r5, [r7, #4]
 8012f36:	b1dd      	cbz	r5, 8012f70 <rmw_destroy_node+0x50>
 8012f38:	4b33      	ldr	r3, [pc, #204]	@ (8013008 <rmw_destroy_node+0xe8>)
 8012f3a:	681c      	ldr	r4, [r3, #0]
 8012f3c:	2c00      	cmp	r4, #0
 8012f3e:	d05f      	beq.n	8013000 <rmw_destroy_node+0xe0>
 8012f40:	2600      	movs	r6, #0
 8012f42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012f46:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8012f4a:	429d      	cmp	r5, r3
 8012f4c:	d013      	beq.n	8012f76 <rmw_destroy_node+0x56>
 8012f4e:	2c00      	cmp	r4, #0
 8012f50:	d1f7      	bne.n	8012f42 <rmw_destroy_node+0x22>
 8012f52:	4b2e      	ldr	r3, [pc, #184]	@ (801300c <rmw_destroy_node+0xec>)
 8012f54:	681c      	ldr	r4, [r3, #0]
 8012f56:	b1c4      	cbz	r4, 8012f8a <rmw_destroy_node+0x6a>
 8012f58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012f5c:	6a0b      	ldr	r3, [r1, #32]
 8012f5e:	429d      	cmp	r5, r3
 8012f60:	d1f9      	bne.n	8012f56 <rmw_destroy_node+0x36>
 8012f62:	317c      	adds	r1, #124	@ 0x7c
 8012f64:	4638      	mov	r0, r7
 8012f66:	f000 fae5 	bl	8013534 <rmw_destroy_subscription>
 8012f6a:	2801      	cmp	r0, #1
 8012f6c:	4606      	mov	r6, r0
 8012f6e:	d1f2      	bne.n	8012f56 <rmw_destroy_node+0x36>
 8012f70:	2601      	movs	r6, #1
 8012f72:	4630      	mov	r0, r6
 8012f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f76:	3184      	adds	r1, #132	@ 0x84
 8012f78:	4638      	mov	r0, r7
 8012f7a:	f7f7 fd65 	bl	800aa48 <rmw_destroy_publisher>
 8012f7e:	2801      	cmp	r0, #1
 8012f80:	4606      	mov	r6, r0
 8012f82:	d0f5      	beq.n	8012f70 <rmw_destroy_node+0x50>
 8012f84:	2c00      	cmp	r4, #0
 8012f86:	d1dc      	bne.n	8012f42 <rmw_destroy_node+0x22>
 8012f88:	e7e3      	b.n	8012f52 <rmw_destroy_node+0x32>
 8012f8a:	4b21      	ldr	r3, [pc, #132]	@ (8013010 <rmw_destroy_node+0xf0>)
 8012f8c:	681c      	ldr	r4, [r3, #0]
 8012f8e:	b16c      	cbz	r4, 8012fac <rmw_destroy_node+0x8c>
 8012f90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012f94:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012f96:	429d      	cmp	r5, r3
 8012f98:	d1f9      	bne.n	8012f8e <rmw_destroy_node+0x6e>
 8012f9a:	317c      	adds	r1, #124	@ 0x7c
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	f000 f993 	bl	80132c8 <rmw_destroy_service>
 8012fa2:	2801      	cmp	r0, #1
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	d0e3      	beq.n	8012f70 <rmw_destroy_node+0x50>
 8012fa8:	2c00      	cmp	r4, #0
 8012faa:	d1f1      	bne.n	8012f90 <rmw_destroy_node+0x70>
 8012fac:	4b19      	ldr	r3, [pc, #100]	@ (8013014 <rmw_destroy_node+0xf4>)
 8012fae:	681c      	ldr	r4, [r3, #0]
 8012fb0:	b16c      	cbz	r4, 8012fce <rmw_destroy_node+0xae>
 8012fb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012fb6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8012fb8:	429d      	cmp	r5, r3
 8012fba:	d1f9      	bne.n	8012fb0 <rmw_destroy_node+0x90>
 8012fbc:	317c      	adds	r1, #124	@ 0x7c
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	f7ff fbd6 	bl	8012770 <rmw_destroy_client>
 8012fc4:	2801      	cmp	r0, #1
 8012fc6:	4606      	mov	r6, r0
 8012fc8:	d0d2      	beq.n	8012f70 <rmw_destroy_node+0x50>
 8012fca:	2c00      	cmp	r4, #0
 8012fcc:	d1f1      	bne.n	8012fb2 <rmw_destroy_node+0x92>
 8012fce:	6928      	ldr	r0, [r5, #16]
 8012fd0:	696a      	ldr	r2, [r5, #20]
 8012fd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012fd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fda:	6819      	ldr	r1, [r3, #0]
 8012fdc:	f7f9 fbbe 	bl	800c75c <uxr_buffer_delete_entity>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	6928      	ldr	r0, [r5, #16]
 8012fe4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012fe8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012fec:	f7f8 f856 	bl	800b09c <run_xrce_session>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	bf08      	it	eq
 8012ff4:	2602      	moveq	r6, #2
 8012ff6:	4638      	mov	r0, r7
 8012ff8:	f7f7 fede 	bl	800adb8 <rmw_uxrce_fini_node_memory>
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013000:	4626      	mov	r6, r4
 8013002:	e7a6      	b.n	8012f52 <rmw_destroy_node+0x32>
 8013004:	08017f54 	.word	0x08017f54
 8013008:	2000dc9c 	.word	0x2000dc9c
 801300c:	2000dcdc 	.word	0x2000dcdc
 8013010:	2000dcac 	.word	0x2000dcac
 8013014:	200093c0 	.word	0x200093c0

08013018 <rmw_node_get_graph_guard_condition>:
 8013018:	6843      	ldr	r3, [r0, #4]
 801301a:	6918      	ldr	r0, [r3, #16]
 801301c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop

08013024 <rmw_send_request>:
 8013024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013028:	4604      	mov	r4, r0
 801302a:	6800      	ldr	r0, [r0, #0]
 801302c:	b08b      	sub	sp, #44	@ 0x2c
 801302e:	460e      	mov	r6, r1
 8013030:	4615      	mov	r5, r2
 8013032:	b128      	cbz	r0, 8013040 <rmw_send_request+0x1c>
 8013034:	4b21      	ldr	r3, [pc, #132]	@ (80130bc <rmw_send_request+0x98>)
 8013036:	6819      	ldr	r1, [r3, #0]
 8013038:	f7ed f8d2 	bl	80001e0 <strcmp>
 801303c:	2800      	cmp	r0, #0
 801303e:	d139      	bne.n	80130b4 <rmw_send_request+0x90>
 8013040:	6864      	ldr	r4, [r4, #4]
 8013042:	6963      	ldr	r3, [r4, #20]
 8013044:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	4798      	blx	r3
 801304c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013050:	4630      	mov	r0, r6
 8013052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013056:	4798      	blx	r3
 8013058:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801305c:	9000      	str	r0, [sp, #0]
 801305e:	6922      	ldr	r2, [r4, #16]
 8013060:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013062:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013066:	ab02      	add	r3, sp, #8
 8013068:	f7fb f876 	bl	800e158 <uxr_prepare_output_stream>
 801306c:	2700      	movs	r7, #0
 801306e:	6028      	str	r0, [r5, #0]
 8013070:	606f      	str	r7, [r5, #4]
 8013072:	b198      	cbz	r0, 801309c <rmw_send_request+0x78>
 8013074:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013078:	a902      	add	r1, sp, #8
 801307a:	4630      	mov	r0, r6
 801307c:	4798      	blx	r3
 801307e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013082:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013086:	2b01      	cmp	r3, #1
 8013088:	d00c      	beq.n	80130a4 <rmw_send_request+0x80>
 801308a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801308c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013090:	f7fa fa76 	bl	800d580 <uxr_run_session_until_confirm_delivery>
 8013094:	4638      	mov	r0, r7
 8013096:	b00b      	add	sp, #44	@ 0x2c
 8013098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801309c:	2001      	movs	r0, #1
 801309e:	b00b      	add	sp, #44	@ 0x2c
 80130a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130a8:	f7f9 feaa 	bl	800ce00 <uxr_flash_output_streams>
 80130ac:	4638      	mov	r0, r7
 80130ae:	b00b      	add	sp, #44	@ 0x2c
 80130b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130b4:	200c      	movs	r0, #12
 80130b6:	b00b      	add	sp, #44	@ 0x2c
 80130b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130bc:	08017f54 	.word	0x08017f54

080130c0 <rmw_take_request>:
 80130c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130c4:	4605      	mov	r5, r0
 80130c6:	6800      	ldr	r0, [r0, #0]
 80130c8:	b089      	sub	sp, #36	@ 0x24
 80130ca:	460c      	mov	r4, r1
 80130cc:	4690      	mov	r8, r2
 80130ce:	461e      	mov	r6, r3
 80130d0:	b128      	cbz	r0, 80130de <rmw_take_request+0x1e>
 80130d2:	4b28      	ldr	r3, [pc, #160]	@ (8013174 <rmw_take_request+0xb4>)
 80130d4:	6819      	ldr	r1, [r3, #0]
 80130d6:	f7ed f883 	bl	80001e0 <strcmp>
 80130da:	2800      	cmp	r0, #0
 80130dc:	d146      	bne.n	801316c <rmw_take_request+0xac>
 80130de:	b10e      	cbz	r6, 80130e4 <rmw_take_request+0x24>
 80130e0:	2300      	movs	r3, #0
 80130e2:	7033      	strb	r3, [r6, #0]
 80130e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80130e8:	f7f7 ff5a 	bl	800afa0 <rmw_uxrce_clean_expired_static_input_buffer>
 80130ec:	4648      	mov	r0, r9
 80130ee:	f7f7 ff2f 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 80130f2:	4607      	mov	r7, r0
 80130f4:	b3b0      	cbz	r0, 8013164 <rmw_take_request+0xa4>
 80130f6:	6885      	ldr	r5, [r0, #8]
 80130f8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80130fc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013100:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013104:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013108:	7423      	strb	r3, [r4, #16]
 801310a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801310e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013112:	74e2      	strb	r2, [r4, #19]
 8013114:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013118:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801311c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013120:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013124:	61e1      	str	r1, [r4, #28]
 8013126:	6162      	str	r2, [r4, #20]
 8013128:	61a3      	str	r3, [r4, #24]
 801312a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	4798      	blx	r3
 8013132:	6844      	ldr	r4, [r0, #4]
 8013134:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013138:	f105 0110 	add.w	r1, r5, #16
 801313c:	4668      	mov	r0, sp
 801313e:	f7f9 fa9d 	bl	800c67c <ucdr_init_buffer>
 8013142:	68e3      	ldr	r3, [r4, #12]
 8013144:	4641      	mov	r1, r8
 8013146:	4668      	mov	r0, sp
 8013148:	4798      	blx	r3
 801314a:	4639      	mov	r1, r7
 801314c:	4604      	mov	r4, r0
 801314e:	480a      	ldr	r0, [pc, #40]	@ (8013178 <rmw_take_request+0xb8>)
 8013150:	f7ff fafa 	bl	8012748 <put_memory>
 8013154:	b106      	cbz	r6, 8013158 <rmw_take_request+0x98>
 8013156:	7034      	strb	r4, [r6, #0]
 8013158:	f084 0001 	eor.w	r0, r4, #1
 801315c:	b2c0      	uxtb	r0, r0
 801315e:	b009      	add	sp, #36	@ 0x24
 8013160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013164:	2001      	movs	r0, #1
 8013166:	b009      	add	sp, #36	@ 0x24
 8013168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801316c:	200c      	movs	r0, #12
 801316e:	b009      	add	sp, #36	@ 0x24
 8013170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013174:	08017f54 	.word	0x08017f54
 8013178:	2000dccc 	.word	0x2000dccc

0801317c <rmw_send_response>:
 801317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801317e:	4605      	mov	r5, r0
 8013180:	6800      	ldr	r0, [r0, #0]
 8013182:	b091      	sub	sp, #68	@ 0x44
 8013184:	460c      	mov	r4, r1
 8013186:	4616      	mov	r6, r2
 8013188:	b128      	cbz	r0, 8013196 <rmw_send_response+0x1a>
 801318a:	4b29      	ldr	r3, [pc, #164]	@ (8013230 <rmw_send_response+0xb4>)
 801318c:	6819      	ldr	r1, [r3, #0]
 801318e:	f7ed f827 	bl	80001e0 <strcmp>
 8013192:	2800      	cmp	r0, #0
 8013194:	d141      	bne.n	801321a <rmw_send_response+0x9e>
 8013196:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801319a:	9306      	str	r3, [sp, #24]
 801319c:	4623      	mov	r3, r4
 801319e:	9207      	str	r2, [sp, #28]
 80131a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131a4:	686d      	ldr	r5, [r5, #4]
 80131a6:	789b      	ldrb	r3, [r3, #2]
 80131a8:	68a1      	ldr	r1, [r4, #8]
 80131aa:	f88d 2017 	strb.w	r2, [sp, #23]
 80131ae:	f88d 3016 	strb.w	r3, [sp, #22]
 80131b2:	68e2      	ldr	r2, [r4, #12]
 80131b4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80131b8:	6860      	ldr	r0, [r4, #4]
 80131ba:	f8ad 3014 	strh.w	r3, [sp, #20]
 80131be:	ab02      	add	r3, sp, #8
 80131c0:	c307      	stmia	r3!, {r0, r1, r2}
 80131c2:	696b      	ldr	r3, [r5, #20]
 80131c4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	4798      	blx	r3
 80131ca:	6844      	ldr	r4, [r0, #4]
 80131cc:	4630      	mov	r0, r6
 80131ce:	6923      	ldr	r3, [r4, #16]
 80131d0:	4798      	blx	r3
 80131d2:	f100 0318 	add.w	r3, r0, #24
 80131d6:	6938      	ldr	r0, [r7, #16]
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	692a      	ldr	r2, [r5, #16]
 80131dc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80131de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80131e2:	ab08      	add	r3, sp, #32
 80131e4:	f7fa ffb8 	bl	800e158 <uxr_prepare_output_stream>
 80131e8:	b910      	cbnz	r0, 80131f0 <rmw_send_response+0x74>
 80131ea:	2001      	movs	r0, #1
 80131ec:	b011      	add	sp, #68	@ 0x44
 80131ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131f0:	a902      	add	r1, sp, #8
 80131f2:	a808      	add	r0, sp, #32
 80131f4:	f7fc f8e8 	bl	800f3c8 <uxr_serialize_SampleIdentity>
 80131f8:	68a3      	ldr	r3, [r4, #8]
 80131fa:	a908      	add	r1, sp, #32
 80131fc:	4630      	mov	r0, r6
 80131fe:	4798      	blx	r3
 8013200:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013204:	6938      	ldr	r0, [r7, #16]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d00a      	beq.n	8013220 <rmw_send_response+0xa4>
 801320a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801320c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013210:	f7fa f9b6 	bl	800d580 <uxr_run_session_until_confirm_delivery>
 8013214:	2000      	movs	r0, #0
 8013216:	b011      	add	sp, #68	@ 0x44
 8013218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801321a:	200c      	movs	r0, #12
 801321c:	b011      	add	sp, #68	@ 0x44
 801321e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013224:	f7f9 fdec 	bl	800ce00 <uxr_flash_output_streams>
 8013228:	2000      	movs	r0, #0
 801322a:	b011      	add	sp, #68	@ 0x44
 801322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322e:	bf00      	nop
 8013230:	08017f54 	.word	0x08017f54

08013234 <rmw_take_response>:
 8013234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013238:	4604      	mov	r4, r0
 801323a:	6800      	ldr	r0, [r0, #0]
 801323c:	b088      	sub	sp, #32
 801323e:	4688      	mov	r8, r1
 8013240:	4617      	mov	r7, r2
 8013242:	461d      	mov	r5, r3
 8013244:	b120      	cbz	r0, 8013250 <rmw_take_response+0x1c>
 8013246:	4b1e      	ldr	r3, [pc, #120]	@ (80132c0 <rmw_take_response+0x8c>)
 8013248:	6819      	ldr	r1, [r3, #0]
 801324a:	f7ec ffc9 	bl	80001e0 <strcmp>
 801324e:	bb78      	cbnz	r0, 80132b0 <rmw_take_response+0x7c>
 8013250:	b10d      	cbz	r5, 8013256 <rmw_take_response+0x22>
 8013252:	2300      	movs	r3, #0
 8013254:	702b      	strb	r3, [r5, #0]
 8013256:	6864      	ldr	r4, [r4, #4]
 8013258:	f7f7 fea2 	bl	800afa0 <rmw_uxrce_clean_expired_static_input_buffer>
 801325c:	4620      	mov	r0, r4
 801325e:	f7f7 fe77 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013262:	4606      	mov	r6, r0
 8013264:	b340      	cbz	r0, 80132b8 <rmw_take_response+0x84>
 8013266:	6963      	ldr	r3, [r4, #20]
 8013268:	6884      	ldr	r4, [r0, #8]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013270:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013274:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013278:	4798      	blx	r3
 801327a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801327e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013282:	f104 0110 	add.w	r1, r4, #16
 8013286:	4668      	mov	r0, sp
 8013288:	f7f9 f9f8 	bl	800c67c <ucdr_init_buffer>
 801328c:	4639      	mov	r1, r7
 801328e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013292:	4668      	mov	r0, sp
 8013294:	4798      	blx	r3
 8013296:	4631      	mov	r1, r6
 8013298:	4604      	mov	r4, r0
 801329a:	480a      	ldr	r0, [pc, #40]	@ (80132c4 <rmw_take_response+0x90>)
 801329c:	f7ff fa54 	bl	8012748 <put_memory>
 80132a0:	b105      	cbz	r5, 80132a4 <rmw_take_response+0x70>
 80132a2:	702c      	strb	r4, [r5, #0]
 80132a4:	f084 0001 	eor.w	r0, r4, #1
 80132a8:	b2c0      	uxtb	r0, r0
 80132aa:	b008      	add	sp, #32
 80132ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b0:	200c      	movs	r0, #12
 80132b2:	b008      	add	sp, #32
 80132b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b8:	2001      	movs	r0, #1
 80132ba:	b008      	add	sp, #32
 80132bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c0:	08017f54 	.word	0x08017f54
 80132c4:	2000dccc 	.word	0x2000dccc

080132c8 <rmw_destroy_service>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	b128      	cbz	r0, 80132d8 <rmw_destroy_service+0x10>
 80132cc:	4604      	mov	r4, r0
 80132ce:	6800      	ldr	r0, [r0, #0]
 80132d0:	460d      	mov	r5, r1
 80132d2:	f7f7 ff63 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 80132d6:	b910      	cbnz	r0, 80132de <rmw_destroy_service+0x16>
 80132d8:	2401      	movs	r4, #1
 80132da:	4620      	mov	r0, r4
 80132dc:	bd70      	pop	{r4, r5, r6, pc}
 80132de:	6863      	ldr	r3, [r4, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d0f9      	beq.n	80132d8 <rmw_destroy_service+0x10>
 80132e4:	2d00      	cmp	r5, #0
 80132e6:	d0f7      	beq.n	80132d8 <rmw_destroy_service+0x10>
 80132e8:	6828      	ldr	r0, [r5, #0]
 80132ea:	f7f7 ff57 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 80132ee:	2800      	cmp	r0, #0
 80132f0:	d0f2      	beq.n	80132d8 <rmw_destroy_service+0x10>
 80132f2:	686e      	ldr	r6, [r5, #4]
 80132f4:	2e00      	cmp	r6, #0
 80132f6:	d0ef      	beq.n	80132d8 <rmw_destroy_service+0x10>
 80132f8:	6864      	ldr	r4, [r4, #4]
 80132fa:	6932      	ldr	r2, [r6, #16]
 80132fc:	6920      	ldr	r0, [r4, #16]
 80132fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013302:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013306:	6819      	ldr	r1, [r3, #0]
 8013308:	f001 fb9e 	bl	8014a48 <uxr_buffer_cancel_data>
 801330c:	4602      	mov	r2, r0
 801330e:	6920      	ldr	r0, [r4, #16]
 8013310:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013314:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013318:	f7f7 fec0 	bl	800b09c <run_xrce_session>
 801331c:	6920      	ldr	r0, [r4, #16]
 801331e:	6932      	ldr	r2, [r6, #16]
 8013320:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013324:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013328:	6819      	ldr	r1, [r3, #0]
 801332a:	f7f9 fa17 	bl	800c75c <uxr_buffer_delete_entity>
 801332e:	4602      	mov	r2, r0
 8013330:	6920      	ldr	r0, [r4, #16]
 8013332:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013336:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801333a:	f7f7 feaf 	bl	800b09c <run_xrce_session>
 801333e:	2800      	cmp	r0, #0
 8013340:	4628      	mov	r0, r5
 8013342:	bf14      	ite	ne
 8013344:	2400      	movne	r4, #0
 8013346:	2402      	moveq	r4, #2
 8013348:	f7f7 fd7a 	bl	800ae40 <rmw_uxrce_fini_service_memory>
 801334c:	e7c5      	b.n	80132da <rmw_destroy_service+0x12>
 801334e:	bf00      	nop

08013350 <rmw_create_subscription>:
 8013350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	b08d      	sub	sp, #52	@ 0x34
 8013356:	2800      	cmp	r0, #0
 8013358:	f000 80d1 	beq.w	80134fe <rmw_create_subscription+0x1ae>
 801335c:	460e      	mov	r6, r1
 801335e:	2900      	cmp	r1, #0
 8013360:	f000 80cd 	beq.w	80134fe <rmw_create_subscription+0x1ae>
 8013364:	4604      	mov	r4, r0
 8013366:	6800      	ldr	r0, [r0, #0]
 8013368:	4615      	mov	r5, r2
 801336a:	4698      	mov	r8, r3
 801336c:	f7f7 ff16 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 8013370:	2800      	cmp	r0, #0
 8013372:	f000 80c4 	beq.w	80134fe <rmw_create_subscription+0x1ae>
 8013376:	2d00      	cmp	r5, #0
 8013378:	f000 80c1 	beq.w	80134fe <rmw_create_subscription+0x1ae>
 801337c:	782b      	ldrb	r3, [r5, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	f000 80bd 	beq.w	80134fe <rmw_create_subscription+0x1ae>
 8013384:	f1b8 0f00 	cmp.w	r8, #0
 8013388:	f000 80b9 	beq.w	80134fe <rmw_create_subscription+0x1ae>
 801338c:	485e      	ldr	r0, [pc, #376]	@ (8013508 <rmw_create_subscription+0x1b8>)
 801338e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013392:	f7ff f9c9 	bl	8012728 <get_memory>
 8013396:	4604      	mov	r4, r0
 8013398:	2800      	cmp	r0, #0
 801339a:	f000 80b1 	beq.w	8013500 <rmw_create_subscription+0x1b0>
 801339e:	6887      	ldr	r7, [r0, #8]
 80133a0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80133a4:	f7ff fa28 	bl	80127f8 <rmw_get_implementation_identifier>
 80133a8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80133ac:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80133ae:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80133b2:	4628      	mov	r0, r5
 80133b4:	f7ec ff1e 	bl	80001f4 <strlen>
 80133b8:	3001      	adds	r0, #1
 80133ba:	283c      	cmp	r0, #60	@ 0x3c
 80133bc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80133c0:	f200 8096 	bhi.w	80134f0 <rmw_create_subscription+0x1a0>
 80133c4:	4a51      	ldr	r2, [pc, #324]	@ (801350c <rmw_create_subscription+0x1bc>)
 80133c6:	462b      	mov	r3, r5
 80133c8:	213c      	movs	r1, #60	@ 0x3c
 80133ca:	4650      	mov	r0, sl
 80133cc:	f003 f836 	bl	801643c <sniprintf>
 80133d0:	4641      	mov	r1, r8
 80133d2:	f8c7 9020 	str.w	r9, [r7, #32]
 80133d6:	2250      	movs	r2, #80	@ 0x50
 80133d8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80133dc:	f003 f9d1 	bl	8016782 <memcpy>
 80133e0:	494b      	ldr	r1, [pc, #300]	@ (8013510 <rmw_create_subscription+0x1c0>)
 80133e2:	4630      	mov	r0, r6
 80133e4:	f7f7 fee8 	bl	800b1b8 <get_message_typesupport_handle>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	f000 8081 	beq.w	80134f0 <rmw_create_subscription+0x1a0>
 80133ee:	6842      	ldr	r2, [r0, #4]
 80133f0:	61ba      	str	r2, [r7, #24]
 80133f2:	2a00      	cmp	r2, #0
 80133f4:	d07c      	beq.n	80134f0 <rmw_create_subscription+0x1a0>
 80133f6:	4629      	mov	r1, r5
 80133f8:	4643      	mov	r3, r8
 80133fa:	4648      	mov	r0, r9
 80133fc:	f7ff fc8c 	bl	8012d18 <create_topic>
 8013400:	61f8      	str	r0, [r7, #28]
 8013402:	2800      	cmp	r0, #0
 8013404:	d078      	beq.n	80134f8 <rmw_create_subscription+0x1a8>
 8013406:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801340a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801340e:	2104      	movs	r1, #4
 8013410:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8013414:	1c42      	adds	r2, r0, #1
 8013416:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801341a:	f7f9 fba1 	bl	800cb60 <uxr_object_id>
 801341e:	6138      	str	r0, [r7, #16]
 8013420:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013424:	2506      	movs	r5, #6
 8013426:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801342a:	9500      	str	r5, [sp, #0]
 801342c:	6819      	ldr	r1, [r3, #0]
 801342e:	693a      	ldr	r2, [r7, #16]
 8013430:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013434:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013438:	f7f9 fa74 	bl	800c924 <uxr_buffer_create_subscriber_bin>
 801343c:	4602      	mov	r2, r0
 801343e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013442:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013446:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801344a:	f7f7 fe27 	bl	800b09c <run_xrce_session>
 801344e:	2800      	cmp	r0, #0
 8013450:	d04e      	beq.n	80134f0 <rmw_create_subscription+0x1a0>
 8013452:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801345a:	4629      	mov	r1, r5
 801345c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8013460:	1c42      	adds	r2, r0, #1
 8013462:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8013466:	f7f9 fb7b 	bl	800cb60 <uxr_object_id>
 801346a:	ae08      	add	r6, sp, #32
 801346c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	6178      	str	r0, [r7, #20]
 8013474:	4641      	mov	r1, r8
 8013476:	4630      	mov	r0, r6
 8013478:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801347c:	9305      	str	r3, [sp, #20]
 801347e:	f7f7 fe29 	bl	800b0d4 <convert_qos_profile>
 8013482:	9503      	str	r5, [sp, #12]
 8013484:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013488:	9b05      	ldr	r3, [sp, #20]
 801348a:	9001      	str	r0, [sp, #4]
 801348c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013490:	691b      	ldr	r3, [r3, #16]
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8013498:	f8db 1000 	ldr.w	r1, [fp]
 801349c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80134a0:	f7f9 fae6 	bl	800ca70 <uxr_buffer_create_datareader_bin>
 80134a4:	4602      	mov	r2, r0
 80134a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80134aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80134ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80134b2:	f7f7 fdf3 	bl	800b09c <run_xrce_session>
 80134b6:	b1d8      	cbz	r0, 80134f0 <rmw_create_subscription+0x1a0>
 80134b8:	f898 3008 	ldrb.w	r3, [r8, #8]
 80134bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80134c0:	2b02      	cmp	r3, #2
 80134c2:	bf0c      	ite	eq
 80134c4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80134c8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80134cc:	9307      	str	r3, [sp, #28]
 80134ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80134d2:	2200      	movs	r2, #0
 80134d4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80134d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80134da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	697a      	ldr	r2, [r7, #20]
 80134e2:	9b07      	ldr	r3, [sp, #28]
 80134e4:	6809      	ldr	r1, [r1, #0]
 80134e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134ea:	f001 fa73 	bl	80149d4 <uxr_buffer_request_data>
 80134ee:	e007      	b.n	8013500 <rmw_create_subscription+0x1b0>
 80134f0:	69f8      	ldr	r0, [r7, #28]
 80134f2:	b108      	cbz	r0, 80134f8 <rmw_create_subscription+0x1a8>
 80134f4:	f7f7 fcd0 	bl	800ae98 <rmw_uxrce_fini_topic_memory>
 80134f8:	4620      	mov	r0, r4
 80134fa:	f7f7 fc8b 	bl	800ae14 <rmw_uxrce_fini_subscription_memory>
 80134fe:	2400      	movs	r4, #0
 8013500:	4620      	mov	r0, r4
 8013502:	b00d      	add	sp, #52	@ 0x34
 8013504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013508:	2000dcdc 	.word	0x2000dcdc
 801350c:	080177b4 	.word	0x080177b4
 8013510:	08017780 	.word	0x08017780

08013514 <rmw_subscription_get_actual_qos>:
 8013514:	b150      	cbz	r0, 801352c <rmw_subscription_get_actual_qos+0x18>
 8013516:	b508      	push	{r3, lr}
 8013518:	460b      	mov	r3, r1
 801351a:	b149      	cbz	r1, 8013530 <rmw_subscription_get_actual_qos+0x1c>
 801351c:	6841      	ldr	r1, [r0, #4]
 801351e:	2250      	movs	r2, #80	@ 0x50
 8013520:	3128      	adds	r1, #40	@ 0x28
 8013522:	4618      	mov	r0, r3
 8013524:	f003 f92d 	bl	8016782 <memcpy>
 8013528:	2000      	movs	r0, #0
 801352a:	bd08      	pop	{r3, pc}
 801352c:	200b      	movs	r0, #11
 801352e:	4770      	bx	lr
 8013530:	200b      	movs	r0, #11
 8013532:	bd08      	pop	{r3, pc}

08013534 <rmw_destroy_subscription>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	b128      	cbz	r0, 8013544 <rmw_destroy_subscription+0x10>
 8013538:	4604      	mov	r4, r0
 801353a:	6800      	ldr	r0, [r0, #0]
 801353c:	460d      	mov	r5, r1
 801353e:	f7f7 fe2d 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 8013542:	b910      	cbnz	r0, 801354a <rmw_destroy_subscription+0x16>
 8013544:	2401      	movs	r4, #1
 8013546:	4620      	mov	r0, r4
 8013548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801354a:	6863      	ldr	r3, [r4, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d0f9      	beq.n	8013544 <rmw_destroy_subscription+0x10>
 8013550:	2d00      	cmp	r5, #0
 8013552:	d0f7      	beq.n	8013544 <rmw_destroy_subscription+0x10>
 8013554:	6828      	ldr	r0, [r5, #0]
 8013556:	f7f7 fe21 	bl	800b19c <is_uxrce_rmw_identifier_valid>
 801355a:	2800      	cmp	r0, #0
 801355c:	d0f2      	beq.n	8013544 <rmw_destroy_subscription+0x10>
 801355e:	686c      	ldr	r4, [r5, #4]
 8013560:	2c00      	cmp	r4, #0
 8013562:	d0ef      	beq.n	8013544 <rmw_destroy_subscription+0x10>
 8013564:	6a26      	ldr	r6, [r4, #32]
 8013566:	6962      	ldr	r2, [r4, #20]
 8013568:	6930      	ldr	r0, [r6, #16]
 801356a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801356e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013572:	6819      	ldr	r1, [r3, #0]
 8013574:	f001 fa68 	bl	8014a48 <uxr_buffer_cancel_data>
 8013578:	4602      	mov	r2, r0
 801357a:	6930      	ldr	r0, [r6, #16]
 801357c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013580:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013584:	f7f7 fd8a 	bl	800b09c <run_xrce_session>
 8013588:	69e0      	ldr	r0, [r4, #28]
 801358a:	f7ff fc15 	bl	8012db8 <destroy_topic>
 801358e:	6a23      	ldr	r3, [r4, #32]
 8013590:	6962      	ldr	r2, [r4, #20]
 8013592:	6918      	ldr	r0, [r3, #16]
 8013594:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013598:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801359c:	6819      	ldr	r1, [r3, #0]
 801359e:	f7f9 f8dd 	bl	800c75c <uxr_buffer_delete_entity>
 80135a2:	6a23      	ldr	r3, [r4, #32]
 80135a4:	6922      	ldr	r2, [r4, #16]
 80135a6:	691b      	ldr	r3, [r3, #16]
 80135a8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80135ac:	4604      	mov	r4, r0
 80135ae:	6809      	ldr	r1, [r1, #0]
 80135b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80135b4:	f7f9 f8d2 	bl	800c75c <uxr_buffer_delete_entity>
 80135b8:	6937      	ldr	r7, [r6, #16]
 80135ba:	4622      	mov	r2, r4
 80135bc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80135c0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80135c4:	4604      	mov	r4, r0
 80135c6:	4638      	mov	r0, r7
 80135c8:	f7f7 fd68 	bl	800b09c <run_xrce_session>
 80135cc:	6936      	ldr	r6, [r6, #16]
 80135ce:	4622      	mov	r2, r4
 80135d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80135d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80135d8:	4604      	mov	r4, r0
 80135da:	4630      	mov	r0, r6
 80135dc:	f7f7 fd5e 	bl	800b09c <run_xrce_session>
 80135e0:	b12c      	cbz	r4, 80135ee <rmw_destroy_subscription+0xba>
 80135e2:	b120      	cbz	r0, 80135ee <rmw_destroy_subscription+0xba>
 80135e4:	2400      	movs	r4, #0
 80135e6:	4628      	mov	r0, r5
 80135e8:	f7f7 fc14 	bl	800ae14 <rmw_uxrce_fini_subscription_memory>
 80135ec:	e7ab      	b.n	8013546 <rmw_destroy_subscription+0x12>
 80135ee:	2402      	movs	r4, #2
 80135f0:	e7f9      	b.n	80135e6 <rmw_destroy_subscription+0xb2>
 80135f2:	bf00      	nop

080135f4 <rmw_take_with_info>:
 80135f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135f6:	4604      	mov	r4, r0
 80135f8:	6800      	ldr	r0, [r0, #0]
 80135fa:	b089      	sub	sp, #36	@ 0x24
 80135fc:	460f      	mov	r7, r1
 80135fe:	4615      	mov	r5, r2
 8013600:	b128      	cbz	r0, 801360e <rmw_take_with_info+0x1a>
 8013602:	4b24      	ldr	r3, [pc, #144]	@ (8013694 <rmw_take_with_info+0xa0>)
 8013604:	6819      	ldr	r1, [r3, #0]
 8013606:	f7ec fdeb 	bl	80001e0 <strcmp>
 801360a:	2800      	cmp	r0, #0
 801360c:	d13e      	bne.n	801368c <rmw_take_with_info+0x98>
 801360e:	b305      	cbz	r5, 8013652 <rmw_take_with_info+0x5e>
 8013610:	6864      	ldr	r4, [r4, #4]
 8013612:	2300      	movs	r3, #0
 8013614:	702b      	strb	r3, [r5, #0]
 8013616:	f7f7 fcc3 	bl	800afa0 <rmw_uxrce_clean_expired_static_input_buffer>
 801361a:	4620      	mov	r0, r4
 801361c:	f7f7 fc98 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013620:	4606      	mov	r6, r0
 8013622:	b1f0      	cbz	r0, 8013662 <rmw_take_with_info+0x6e>
 8013624:	6881      	ldr	r1, [r0, #8]
 8013626:	4668      	mov	r0, sp
 8013628:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801362c:	3110      	adds	r1, #16
 801362e:	f7f9 f825 	bl	800c67c <ucdr_init_buffer>
 8013632:	69a3      	ldr	r3, [r4, #24]
 8013634:	4639      	mov	r1, r7
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	4668      	mov	r0, sp
 801363a:	4798      	blx	r3
 801363c:	4631      	mov	r1, r6
 801363e:	4604      	mov	r4, r0
 8013640:	4815      	ldr	r0, [pc, #84]	@ (8013698 <rmw_take_with_info+0xa4>)
 8013642:	f7ff f881 	bl	8012748 <put_memory>
 8013646:	702c      	strb	r4, [r5, #0]
 8013648:	f084 0001 	eor.w	r0, r4, #1
 801364c:	b2c0      	uxtb	r0, r0
 801364e:	b009      	add	sp, #36	@ 0x24
 8013650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013652:	6864      	ldr	r4, [r4, #4]
 8013654:	f7f7 fca4 	bl	800afa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013658:	4620      	mov	r0, r4
 801365a:	f7f7 fc79 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 801365e:	4605      	mov	r5, r0
 8013660:	b910      	cbnz	r0, 8013668 <rmw_take_with_info+0x74>
 8013662:	2001      	movs	r0, #1
 8013664:	b009      	add	sp, #36	@ 0x24
 8013666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013668:	68a9      	ldr	r1, [r5, #8]
 801366a:	4668      	mov	r0, sp
 801366c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013670:	3110      	adds	r1, #16
 8013672:	f7f9 f803 	bl	800c67c <ucdr_init_buffer>
 8013676:	69a3      	ldr	r3, [r4, #24]
 8013678:	4639      	mov	r1, r7
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	4668      	mov	r0, sp
 801367e:	4798      	blx	r3
 8013680:	4629      	mov	r1, r5
 8013682:	4604      	mov	r4, r0
 8013684:	4804      	ldr	r0, [pc, #16]	@ (8013698 <rmw_take_with_info+0xa4>)
 8013686:	f7ff f85f 	bl	8012748 <put_memory>
 801368a:	e7dd      	b.n	8013648 <rmw_take_with_info+0x54>
 801368c:	200c      	movs	r0, #12
 801368e:	b009      	add	sp, #36	@ 0x24
 8013690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013692:	bf00      	nop
 8013694:	08017f54 	.word	0x08017f54
 8013698:	2000dccc 	.word	0x2000dccc

0801369c <rmw_uxrce_transport_init>:
 801369c:	b508      	push	{r3, lr}
 801369e:	b108      	cbz	r0, 80136a4 <rmw_uxrce_transport_init+0x8>
 80136a0:	f100 0210 	add.w	r2, r0, #16
 80136a4:	b139      	cbz	r1, 80136b6 <rmw_uxrce_transport_init+0x1a>
 80136a6:	6949      	ldr	r1, [r1, #20]
 80136a8:	4610      	mov	r0, r2
 80136aa:	f000 fc13 	bl	8013ed4 <uxr_init_custom_transport>
 80136ae:	f080 0001 	eor.w	r0, r0, #1
 80136b2:	b2c0      	uxtb	r0, r0
 80136b4:	bd08      	pop	{r3, pc}
 80136b6:	4b04      	ldr	r3, [pc, #16]	@ (80136c8 <rmw_uxrce_transport_init+0x2c>)
 80136b8:	4610      	mov	r0, r2
 80136ba:	6859      	ldr	r1, [r3, #4]
 80136bc:	f000 fc0a 	bl	8013ed4 <uxr_init_custom_transport>
 80136c0:	f080 0001 	eor.w	r0, r0, #1
 80136c4:	b2c0      	uxtb	r0, r0
 80136c6:	bd08      	pop	{r3, pc}
 80136c8:	200093a4 	.word	0x200093a4

080136cc <rmw_wait>:
 80136cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136d0:	b089      	sub	sp, #36	@ 0x24
 80136d2:	4605      	mov	r5, r0
 80136d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80136d6:	460e      	mov	r6, r1
 80136d8:	4698      	mov	r8, r3
 80136da:	4691      	mov	r9, r2
 80136dc:	2a00      	cmp	r2, #0
 80136de:	f000 810a 	beq.w	80138f6 <rmw_wait+0x22a>
 80136e2:	b16c      	cbz	r4, 8013700 <rmw_wait+0x34>
 80136e4:	4bae      	ldr	r3, [pc, #696]	@ (80139a0 <rmw_wait+0x2d4>)
 80136e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136e8:	af04      	add	r7, sp, #16
 80136ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80136ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80136f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80136f6:	f7fe fe4b 	bl	8012390 <rmw_time_equal>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	f000 8127 	beq.w	801394e <rmw_wait+0x282>
 8013700:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013704:	f7f7 fc4c 	bl	800afa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013708:	4ba6      	ldr	r3, [pc, #664]	@ (80139a4 <rmw_wait+0x2d8>)
 801370a:	681c      	ldr	r4, [r3, #0]
 801370c:	b14c      	cbz	r4, 8013722 <rmw_wait+0x56>
 801370e:	4623      	mov	r3, r4
 8013710:	2100      	movs	r1, #0
 8013712:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013716:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801371a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1f7      	bne.n	8013712 <rmw_wait+0x46>
 8013722:	f1b9 0f00 	cmp.w	r9, #0
 8013726:	d011      	beq.n	801374c <rmw_wait+0x80>
 8013728:	f8d9 1000 	ldr.w	r1, [r9]
 801372c:	b171      	cbz	r1, 801374c <rmw_wait+0x80>
 801372e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013732:	2300      	movs	r3, #0
 8013734:	2001      	movs	r0, #1
 8013736:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801373a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801373c:	6912      	ldr	r2, [r2, #16]
 801373e:	3301      	adds	r3, #1
 8013740:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013744:	4299      	cmp	r1, r3
 8013746:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801374a:	d1f4      	bne.n	8013736 <rmw_wait+0x6a>
 801374c:	f1b8 0f00 	cmp.w	r8, #0
 8013750:	d011      	beq.n	8013776 <rmw_wait+0xaa>
 8013752:	f8d8 1000 	ldr.w	r1, [r8]
 8013756:	b171      	cbz	r1, 8013776 <rmw_wait+0xaa>
 8013758:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801375c:	2300      	movs	r3, #0
 801375e:	2001      	movs	r0, #1
 8013760:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013764:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013766:	6912      	ldr	r2, [r2, #16]
 8013768:	3301      	adds	r3, #1
 801376a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801376e:	4299      	cmp	r1, r3
 8013770:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013774:	d1f4      	bne.n	8013760 <rmw_wait+0x94>
 8013776:	b185      	cbz	r5, 801379a <rmw_wait+0xce>
 8013778:	6829      	ldr	r1, [r5, #0]
 801377a:	b171      	cbz	r1, 801379a <rmw_wait+0xce>
 801377c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013780:	2300      	movs	r3, #0
 8013782:	2001      	movs	r0, #1
 8013784:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013788:	6a12      	ldr	r2, [r2, #32]
 801378a:	6912      	ldr	r2, [r2, #16]
 801378c:	3301      	adds	r3, #1
 801378e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013792:	4299      	cmp	r1, r3
 8013794:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013798:	d1f4      	bne.n	8013784 <rmw_wait+0xb8>
 801379a:	b34c      	cbz	r4, 80137f0 <rmw_wait+0x124>
 801379c:	4622      	mov	r2, r4
 801379e:	2300      	movs	r3, #0
 80137a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80137a4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80137a8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80137ac:	440b      	add	r3, r1
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	2a00      	cmp	r2, #0
 80137b2:	d1f5      	bne.n	80137a0 <rmw_wait+0xd4>
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f000 8084 	beq.w	80138c2 <rmw_wait+0x1f6>
 80137ba:	1c7a      	adds	r2, r7, #1
 80137bc:	d00d      	beq.n	80137da <rmw_wait+0x10e>
 80137be:	ee07 7a90 	vmov	s15, r7
 80137c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80137c6:	ee07 3a90 	vmov	s15, r3
 80137ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80137d2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80137d6:	ee17 7a90 	vmov	r7, s15
 80137da:	68a0      	ldr	r0, [r4, #8]
 80137dc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80137e0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	f040 8090 	bne.w	801390a <rmw_wait+0x23e>
 80137ea:	6864      	ldr	r4, [r4, #4]
 80137ec:	2c00      	cmp	r4, #0
 80137ee:	d1f4      	bne.n	80137da <rmw_wait+0x10e>
 80137f0:	f1b9 0f00 	cmp.w	r9, #0
 80137f4:	f000 80bc 	beq.w	8013970 <rmw_wait+0x2a4>
 80137f8:	f8d9 7000 	ldr.w	r7, [r9]
 80137fc:	2f00      	cmp	r7, #0
 80137fe:	f000 808e 	beq.w	801391e <rmw_wait+0x252>
 8013802:	2400      	movs	r4, #0
 8013804:	4627      	mov	r7, r4
 8013806:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801380a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801380e:	f7f7 fb9f 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013812:	2800      	cmp	r0, #0
 8013814:	d05f      	beq.n	80138d6 <rmw_wait+0x20a>
 8013816:	f8d9 3000 	ldr.w	r3, [r9]
 801381a:	3401      	adds	r4, #1
 801381c:	42a3      	cmp	r3, r4
 801381e:	f04f 0701 	mov.w	r7, #1
 8013822:	d8f0      	bhi.n	8013806 <rmw_wait+0x13a>
 8013824:	f1b8 0f00 	cmp.w	r8, #0
 8013828:	d012      	beq.n	8013850 <rmw_wait+0x184>
 801382a:	f8d8 3000 	ldr.w	r3, [r8]
 801382e:	b17b      	cbz	r3, 8013850 <rmw_wait+0x184>
 8013830:	2400      	movs	r4, #0
 8013832:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013836:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801383a:	f7f7 fb89 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 801383e:	2800      	cmp	r0, #0
 8013840:	d051      	beq.n	80138e6 <rmw_wait+0x21a>
 8013842:	f8d8 3000 	ldr.w	r3, [r8]
 8013846:	3401      	adds	r4, #1
 8013848:	42a3      	cmp	r3, r4
 801384a:	f04f 0701 	mov.w	r7, #1
 801384e:	d8f0      	bhi.n	8013832 <rmw_wait+0x166>
 8013850:	b1dd      	cbz	r5, 801388a <rmw_wait+0x1be>
 8013852:	682b      	ldr	r3, [r5, #0]
 8013854:	b1cb      	cbz	r3, 801388a <rmw_wait+0x1be>
 8013856:	2400      	movs	r4, #0
 8013858:	686b      	ldr	r3, [r5, #4]
 801385a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801385e:	f7f7 fb77 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013862:	b158      	cbz	r0, 801387c <rmw_wait+0x1b0>
 8013864:	682b      	ldr	r3, [r5, #0]
 8013866:	3401      	adds	r4, #1
 8013868:	42a3      	cmp	r3, r4
 801386a:	d969      	bls.n	8013940 <rmw_wait+0x274>
 801386c:	686b      	ldr	r3, [r5, #4]
 801386e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013872:	2701      	movs	r7, #1
 8013874:	f7f7 fb6c 	bl	800af50 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013878:	2800      	cmp	r0, #0
 801387a:	d1f3      	bne.n	8013864 <rmw_wait+0x198>
 801387c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013880:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013884:	3401      	adds	r4, #1
 8013886:	42a3      	cmp	r3, r4
 8013888:	d8e6      	bhi.n	8013858 <rmw_wait+0x18c>
 801388a:	b1a6      	cbz	r6, 80138b6 <rmw_wait+0x1ea>
 801388c:	6834      	ldr	r4, [r6, #0]
 801388e:	b194      	cbz	r4, 80138b6 <rmw_wait+0x1ea>
 8013890:	2300      	movs	r3, #0
 8013892:	461d      	mov	r5, r3
 8013894:	e004      	b.n	80138a0 <rmw_wait+0x1d4>
 8013896:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801389a:	3301      	adds	r3, #1
 801389c:	42a3      	cmp	r3, r4
 801389e:	d00a      	beq.n	80138b6 <rmw_wait+0x1ea>
 80138a0:	6870      	ldr	r0, [r6, #4]
 80138a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80138a6:	7c0a      	ldrb	r2, [r1, #16]
 80138a8:	2a00      	cmp	r2, #0
 80138aa:	d0f4      	beq.n	8013896 <rmw_wait+0x1ca>
 80138ac:	3301      	adds	r3, #1
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	740d      	strb	r5, [r1, #16]
 80138b2:	4617      	mov	r7, r2
 80138b4:	d1f4      	bne.n	80138a0 <rmw_wait+0x1d4>
 80138b6:	2f00      	cmp	r7, #0
 80138b8:	d03e      	beq.n	8013938 <rmw_wait+0x26c>
 80138ba:	2000      	movs	r0, #0
 80138bc:	b009      	add	sp, #36	@ 0x24
 80138be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138c2:	68a0      	ldr	r0, [r4, #8]
 80138c4:	2100      	movs	r1, #0
 80138c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138ca:	f7f9 fe1f 	bl	800d50c <uxr_run_session_timeout>
 80138ce:	6864      	ldr	r4, [r4, #4]
 80138d0:	2c00      	cmp	r4, #0
 80138d2:	d1f6      	bne.n	80138c2 <rmw_wait+0x1f6>
 80138d4:	e78c      	b.n	80137f0 <rmw_wait+0x124>
 80138d6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80138da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80138de:	3401      	adds	r4, #1
 80138e0:	42a3      	cmp	r3, r4
 80138e2:	d890      	bhi.n	8013806 <rmw_wait+0x13a>
 80138e4:	e79e      	b.n	8013824 <rmw_wait+0x158>
 80138e6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80138ea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80138ee:	3401      	adds	r4, #1
 80138f0:	429c      	cmp	r4, r3
 80138f2:	d39e      	bcc.n	8013832 <rmw_wait+0x166>
 80138f4:	e7ac      	b.n	8013850 <rmw_wait+0x184>
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f47f aef3 	bne.w	80136e2 <rmw_wait+0x16>
 80138fc:	2800      	cmp	r0, #0
 80138fe:	f47f aef0 	bne.w	80136e2 <rmw_wait+0x16>
 8013902:	2900      	cmp	r1, #0
 8013904:	f47f aeed 	bne.w	80136e2 <rmw_wait+0x16>
 8013908:	e7d7      	b.n	80138ba <rmw_wait+0x1ee>
 801390a:	4639      	mov	r1, r7
 801390c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013910:	f7f9 fe16 	bl	800d540 <uxr_run_session_until_data>
 8013914:	6864      	ldr	r4, [r4, #4]
 8013916:	2c00      	cmp	r4, #0
 8013918:	f47f af5f 	bne.w	80137da <rmw_wait+0x10e>
 801391c:	e768      	b.n	80137f0 <rmw_wait+0x124>
 801391e:	f1b8 0f00 	cmp.w	r8, #0
 8013922:	d032      	beq.n	801398a <rmw_wait+0x2be>
 8013924:	f8d8 3000 	ldr.w	r3, [r8]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d181      	bne.n	8013830 <rmw_wait+0x164>
 801392c:	461f      	mov	r7, r3
 801392e:	2d00      	cmp	r5, #0
 8013930:	d18f      	bne.n	8013852 <rmw_wait+0x186>
 8013932:	462f      	mov	r7, r5
 8013934:	2e00      	cmp	r6, #0
 8013936:	d1a9      	bne.n	801388c <rmw_wait+0x1c0>
 8013938:	2002      	movs	r0, #2
 801393a:	b009      	add	sp, #36	@ 0x24
 801393c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013940:	2e00      	cmp	r6, #0
 8013942:	d0ba      	beq.n	80138ba <rmw_wait+0x1ee>
 8013944:	6834      	ldr	r4, [r6, #0]
 8013946:	2701      	movs	r7, #1
 8013948:	2c00      	cmp	r4, #0
 801394a:	d1a1      	bne.n	8013890 <rmw_wait+0x1c4>
 801394c:	e7b5      	b.n	80138ba <rmw_wait+0x1ee>
 801394e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013952:	f7fe fd71 	bl	8012438 <rmw_time_total_nsec>
 8013956:	2300      	movs	r3, #0
 8013958:	4a13      	ldr	r2, [pc, #76]	@ (80139a8 <rmw_wait+0x2dc>)
 801395a:	f7ed f84f 	bl	80009fc <__aeabi_uldivmod>
 801395e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013962:	f171 0300 	sbcs.w	r3, r1, #0
 8013966:	4607      	mov	r7, r0
 8013968:	bfa8      	it	ge
 801396a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801396e:	e6c9      	b.n	8013704 <rmw_wait+0x38>
 8013970:	f1b8 0f00 	cmp.w	r8, #0
 8013974:	d009      	beq.n	801398a <rmw_wait+0x2be>
 8013976:	f8d8 3000 	ldr.w	r3, [r8]
 801397a:	464f      	mov	r7, r9
 801397c:	2b00      	cmp	r3, #0
 801397e:	f47f af57 	bne.w	8013830 <rmw_wait+0x164>
 8013982:	2d00      	cmp	r5, #0
 8013984:	f47f af65 	bne.w	8013852 <rmw_wait+0x186>
 8013988:	e7d3      	b.n	8013932 <rmw_wait+0x266>
 801398a:	b17d      	cbz	r5, 80139ac <rmw_wait+0x2e0>
 801398c:	682b      	ldr	r3, [r5, #0]
 801398e:	4647      	mov	r7, r8
 8013990:	2b00      	cmp	r3, #0
 8013992:	f47f af60 	bne.w	8013856 <rmw_wait+0x18a>
 8013996:	2e00      	cmp	r6, #0
 8013998:	f47f af78 	bne.w	801388c <rmw_wait+0x1c0>
 801399c:	e7cc      	b.n	8013938 <rmw_wait+0x26c>
 801399e:	bf00      	nop
 80139a0:	08017598 	.word	0x08017598
 80139a4:	2000dcbc 	.word	0x2000dcbc
 80139a8:	000f4240 	.word	0x000f4240
 80139ac:	2e00      	cmp	r6, #0
 80139ae:	d0c3      	beq.n	8013938 <rmw_wait+0x26c>
 80139b0:	6834      	ldr	r4, [r6, #0]
 80139b2:	462f      	mov	r7, r5
 80139b4:	2c00      	cmp	r4, #0
 80139b6:	f47f af6b 	bne.w	8013890 <rmw_wait+0x1c4>
 80139ba:	e7bd      	b.n	8013938 <rmw_wait+0x26c>

080139bc <rmw_create_wait_set>:
 80139bc:	b508      	push	{r3, lr}
 80139be:	4803      	ldr	r0, [pc, #12]	@ (80139cc <rmw_create_wait_set+0x10>)
 80139c0:	f7fe feb2 	bl	8012728 <get_memory>
 80139c4:	b108      	cbz	r0, 80139ca <rmw_create_wait_set+0xe>
 80139c6:	6880      	ldr	r0, [r0, #8]
 80139c8:	3010      	adds	r0, #16
 80139ca:	bd08      	pop	{r3, pc}
 80139cc:	2000dcfc 	.word	0x2000dcfc

080139d0 <rmw_destroy_wait_set>:
 80139d0:	b508      	push	{r3, lr}
 80139d2:	4b08      	ldr	r3, [pc, #32]	@ (80139f4 <rmw_destroy_wait_set+0x24>)
 80139d4:	6819      	ldr	r1, [r3, #0]
 80139d6:	b911      	cbnz	r1, 80139de <rmw_destroy_wait_set+0xe>
 80139d8:	e00a      	b.n	80139f0 <rmw_destroy_wait_set+0x20>
 80139da:	6849      	ldr	r1, [r1, #4]
 80139dc:	b141      	cbz	r1, 80139f0 <rmw_destroy_wait_set+0x20>
 80139de:	688b      	ldr	r3, [r1, #8]
 80139e0:	3310      	adds	r3, #16
 80139e2:	4298      	cmp	r0, r3
 80139e4:	d1f9      	bne.n	80139da <rmw_destroy_wait_set+0xa>
 80139e6:	4803      	ldr	r0, [pc, #12]	@ (80139f4 <rmw_destroy_wait_set+0x24>)
 80139e8:	f7fe feae 	bl	8012748 <put_memory>
 80139ec:	2000      	movs	r0, #0
 80139ee:	bd08      	pop	{r3, pc}
 80139f0:	2001      	movs	r0, #1
 80139f2:	bd08      	pop	{r3, pc}
 80139f4:	2000dcfc 	.word	0x2000dcfc

080139f8 <rmw_uros_epoch_nanos>:
 80139f8:	4b05      	ldr	r3, [pc, #20]	@ (8013a10 <rmw_uros_epoch_nanos+0x18>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	b123      	cbz	r3, 8013a08 <rmw_uros_epoch_nanos+0x10>
 80139fe:	6898      	ldr	r0, [r3, #8]
 8013a00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a04:	f7f9 b9f2 	b.w	800cdec <uxr_epoch_nanos>
 8013a08:	2000      	movs	r0, #0
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	4770      	bx	lr
 8013a0e:	bf00      	nop
 8013a10:	2000dcbc 	.word	0x2000dcbc

08013a14 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a18:	6805      	ldr	r5, [r0, #0]
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	460e      	mov	r6, r1
 8013a20:	f7ec fbde 	bl	80001e0 <strcmp>
 8013a24:	b1c8      	cbz	r0, 8013a5a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013a26:	4b11      	ldr	r3, [pc, #68]	@ (8013a6c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	429d      	cmp	r5, r3
 8013a2c:	d112      	bne.n	8013a54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013a2e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013a32:	f8d8 4000 	ldr.w	r4, [r8]
 8013a36:	b16c      	cbz	r4, 8013a54 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013a38:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013a3c:	2700      	movs	r7, #0
 8013a3e:	3d04      	subs	r5, #4
 8013a40:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013a44:	4631      	mov	r1, r6
 8013a46:	f7ec fbcb 	bl	80001e0 <strcmp>
 8013a4a:	00bb      	lsls	r3, r7, #2
 8013a4c:	b140      	cbz	r0, 8013a60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013a4e:	3701      	adds	r7, #1
 8013a50:	42bc      	cmp	r4, r7
 8013a52:	d1f5      	bne.n	8013a40 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013a54:	2000      	movs	r0, #0
 8013a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a68:	58d3      	ldr	r3, [r2, r3]
 8013a6a:	4718      	bx	r3
 8013a6c:	200002a0 	.word	0x200002a0

08013a70 <rover_msgs__msg__ControllerMsg__init>:
 8013a70:	3800      	subs	r0, #0
 8013a72:	bf18      	it	ne
 8013a74:	2001      	movne	r0, #1
 8013a76:	4770      	bx	lr

08013a78 <rover_msgs__msg__ControllerMsg__fini>:
 8013a78:	4770      	bx	lr
 8013a7a:	bf00      	nop

08013a7c <rover_msgs__msg__EncoderMsg__init>:
 8013a7c:	3800      	subs	r0, #0
 8013a7e:	bf18      	it	ne
 8013a80:	2001      	movne	r0, #1
 8013a82:	4770      	bx	lr

08013a84 <rover_msgs__msg__EncoderMsg__fini>:
 8013a84:	4770      	bx	lr
 8013a86:	bf00      	nop

08013a88 <ucdr_serialize_endian_array_char>:
 8013a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	461f      	mov	r7, r3
 8013a90:	4605      	mov	r5, r0
 8013a92:	4690      	mov	r8, r2
 8013a94:	f7f8 fd9e 	bl	800c5d4 <ucdr_check_buffer_available_for>
 8013a98:	b9e0      	cbnz	r0, 8013ad4 <ucdr_serialize_endian_array_char+0x4c>
 8013a9a:	463e      	mov	r6, r7
 8013a9c:	e009      	b.n	8013ab2 <ucdr_serialize_endian_array_char+0x2a>
 8013a9e:	68a8      	ldr	r0, [r5, #8]
 8013aa0:	f002 fe6f 	bl	8016782 <memcpy>
 8013aa4:	68ab      	ldr	r3, [r5, #8]
 8013aa6:	6928      	ldr	r0, [r5, #16]
 8013aa8:	4423      	add	r3, r4
 8013aaa:	4420      	add	r0, r4
 8013aac:	1b36      	subs	r6, r6, r4
 8013aae:	60ab      	str	r3, [r5, #8]
 8013ab0:	6128      	str	r0, [r5, #16]
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f7f8 fe14 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 8013abc:	1bb9      	subs	r1, r7, r6
 8013abe:	4441      	add	r1, r8
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	d1ea      	bne.n	8013a9e <ucdr_serialize_endian_array_char+0x16>
 8013ac8:	2301      	movs	r3, #1
 8013aca:	7da8      	ldrb	r0, [r5, #22]
 8013acc:	756b      	strb	r3, [r5, #21]
 8013ace:	4058      	eors	r0, r3
 8013ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad4:	463a      	mov	r2, r7
 8013ad6:	68a8      	ldr	r0, [r5, #8]
 8013ad8:	4641      	mov	r1, r8
 8013ada:	f002 fe52 	bl	8016782 <memcpy>
 8013ade:	68aa      	ldr	r2, [r5, #8]
 8013ae0:	692b      	ldr	r3, [r5, #16]
 8013ae2:	443a      	add	r2, r7
 8013ae4:	443b      	add	r3, r7
 8013ae6:	60aa      	str	r2, [r5, #8]
 8013ae8:	612b      	str	r3, [r5, #16]
 8013aea:	e7ed      	b.n	8013ac8 <ucdr_serialize_endian_array_char+0x40>

08013aec <ucdr_deserialize_endian_array_char>:
 8013aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af0:	4619      	mov	r1, r3
 8013af2:	461f      	mov	r7, r3
 8013af4:	4605      	mov	r5, r0
 8013af6:	4690      	mov	r8, r2
 8013af8:	f7f8 fd6c 	bl	800c5d4 <ucdr_check_buffer_available_for>
 8013afc:	b9e0      	cbnz	r0, 8013b38 <ucdr_deserialize_endian_array_char+0x4c>
 8013afe:	463e      	mov	r6, r7
 8013b00:	e009      	b.n	8013b16 <ucdr_deserialize_endian_array_char+0x2a>
 8013b02:	68a9      	ldr	r1, [r5, #8]
 8013b04:	f002 fe3d 	bl	8016782 <memcpy>
 8013b08:	68ab      	ldr	r3, [r5, #8]
 8013b0a:	6928      	ldr	r0, [r5, #16]
 8013b0c:	4423      	add	r3, r4
 8013b0e:	4420      	add	r0, r4
 8013b10:	1b36      	subs	r6, r6, r4
 8013b12:	60ab      	str	r3, [r5, #8]
 8013b14:	6128      	str	r0, [r5, #16]
 8013b16:	2201      	movs	r2, #1
 8013b18:	4631      	mov	r1, r6
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	f7f8 fde2 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 8013b20:	4604      	mov	r4, r0
 8013b22:	1bb8      	subs	r0, r7, r6
 8013b24:	4440      	add	r0, r8
 8013b26:	4622      	mov	r2, r4
 8013b28:	2c00      	cmp	r4, #0
 8013b2a:	d1ea      	bne.n	8013b02 <ucdr_deserialize_endian_array_char+0x16>
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	7da8      	ldrb	r0, [r5, #22]
 8013b30:	756b      	strb	r3, [r5, #21]
 8013b32:	4058      	eors	r0, r3
 8013b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b38:	463a      	mov	r2, r7
 8013b3a:	68a9      	ldr	r1, [r5, #8]
 8013b3c:	4640      	mov	r0, r8
 8013b3e:	f002 fe20 	bl	8016782 <memcpy>
 8013b42:	68aa      	ldr	r2, [r5, #8]
 8013b44:	692b      	ldr	r3, [r5, #16]
 8013b46:	443a      	add	r2, r7
 8013b48:	443b      	add	r3, r7
 8013b4a:	60aa      	str	r2, [r5, #8]
 8013b4c:	612b      	str	r3, [r5, #16]
 8013b4e:	e7ed      	b.n	8013b2c <ucdr_deserialize_endian_array_char+0x40>

08013b50 <ucdr_serialize_array_uint8_t>:
 8013b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b54:	4688      	mov	r8, r1
 8013b56:	4611      	mov	r1, r2
 8013b58:	4617      	mov	r7, r2
 8013b5a:	4605      	mov	r5, r0
 8013b5c:	f7f8 fd3a 	bl	800c5d4 <ucdr_check_buffer_available_for>
 8013b60:	b9e0      	cbnz	r0, 8013b9c <ucdr_serialize_array_uint8_t+0x4c>
 8013b62:	463e      	mov	r6, r7
 8013b64:	e009      	b.n	8013b7a <ucdr_serialize_array_uint8_t+0x2a>
 8013b66:	68a8      	ldr	r0, [r5, #8]
 8013b68:	f002 fe0b 	bl	8016782 <memcpy>
 8013b6c:	68aa      	ldr	r2, [r5, #8]
 8013b6e:	692b      	ldr	r3, [r5, #16]
 8013b70:	4422      	add	r2, r4
 8013b72:	4423      	add	r3, r4
 8013b74:	1b36      	subs	r6, r6, r4
 8013b76:	60aa      	str	r2, [r5, #8]
 8013b78:	612b      	str	r3, [r5, #16]
 8013b7a:	4631      	mov	r1, r6
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f7f8 fdb0 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 8013b84:	1bb9      	subs	r1, r7, r6
 8013b86:	4441      	add	r1, r8
 8013b88:	4604      	mov	r4, r0
 8013b8a:	4602      	mov	r2, r0
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d1ea      	bne.n	8013b66 <ucdr_serialize_array_uint8_t+0x16>
 8013b90:	2301      	movs	r3, #1
 8013b92:	7da8      	ldrb	r0, [r5, #22]
 8013b94:	756b      	strb	r3, [r5, #21]
 8013b96:	4058      	eors	r0, r3
 8013b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b9c:	463a      	mov	r2, r7
 8013b9e:	68a8      	ldr	r0, [r5, #8]
 8013ba0:	4641      	mov	r1, r8
 8013ba2:	f002 fdee 	bl	8016782 <memcpy>
 8013ba6:	68aa      	ldr	r2, [r5, #8]
 8013ba8:	692b      	ldr	r3, [r5, #16]
 8013baa:	443a      	add	r2, r7
 8013bac:	443b      	add	r3, r7
 8013bae:	60aa      	str	r2, [r5, #8]
 8013bb0:	612b      	str	r3, [r5, #16]
 8013bb2:	e7ed      	b.n	8013b90 <ucdr_serialize_array_uint8_t+0x40>

08013bb4 <ucdr_serialize_endian_array_uint8_t>:
 8013bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb8:	4619      	mov	r1, r3
 8013bba:	461f      	mov	r7, r3
 8013bbc:	4605      	mov	r5, r0
 8013bbe:	4690      	mov	r8, r2
 8013bc0:	f7f8 fd08 	bl	800c5d4 <ucdr_check_buffer_available_for>
 8013bc4:	b9e0      	cbnz	r0, 8013c00 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013bc6:	463e      	mov	r6, r7
 8013bc8:	e009      	b.n	8013bde <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013bca:	68a8      	ldr	r0, [r5, #8]
 8013bcc:	f002 fdd9 	bl	8016782 <memcpy>
 8013bd0:	68ab      	ldr	r3, [r5, #8]
 8013bd2:	6928      	ldr	r0, [r5, #16]
 8013bd4:	4423      	add	r3, r4
 8013bd6:	4420      	add	r0, r4
 8013bd8:	1b36      	subs	r6, r6, r4
 8013bda:	60ab      	str	r3, [r5, #8]
 8013bdc:	6128      	str	r0, [r5, #16]
 8013bde:	4631      	mov	r1, r6
 8013be0:	2201      	movs	r2, #1
 8013be2:	4628      	mov	r0, r5
 8013be4:	f7f8 fd7e 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 8013be8:	1bb9      	subs	r1, r7, r6
 8013bea:	4441      	add	r1, r8
 8013bec:	4604      	mov	r4, r0
 8013bee:	4602      	mov	r2, r0
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d1ea      	bne.n	8013bca <ucdr_serialize_endian_array_uint8_t+0x16>
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	7da8      	ldrb	r0, [r5, #22]
 8013bf8:	756b      	strb	r3, [r5, #21]
 8013bfa:	4058      	eors	r0, r3
 8013bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c00:	463a      	mov	r2, r7
 8013c02:	68a8      	ldr	r0, [r5, #8]
 8013c04:	4641      	mov	r1, r8
 8013c06:	f002 fdbc 	bl	8016782 <memcpy>
 8013c0a:	68aa      	ldr	r2, [r5, #8]
 8013c0c:	692b      	ldr	r3, [r5, #16]
 8013c0e:	443a      	add	r2, r7
 8013c10:	443b      	add	r3, r7
 8013c12:	60aa      	str	r2, [r5, #8]
 8013c14:	612b      	str	r3, [r5, #16]
 8013c16:	e7ed      	b.n	8013bf4 <ucdr_serialize_endian_array_uint8_t+0x40>

08013c18 <ucdr_deserialize_array_uint8_t>:
 8013c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1c:	4688      	mov	r8, r1
 8013c1e:	4611      	mov	r1, r2
 8013c20:	4617      	mov	r7, r2
 8013c22:	4605      	mov	r5, r0
 8013c24:	f7f8 fcd6 	bl	800c5d4 <ucdr_check_buffer_available_for>
 8013c28:	b9e0      	cbnz	r0, 8013c64 <ucdr_deserialize_array_uint8_t+0x4c>
 8013c2a:	463e      	mov	r6, r7
 8013c2c:	e009      	b.n	8013c42 <ucdr_deserialize_array_uint8_t+0x2a>
 8013c2e:	68a9      	ldr	r1, [r5, #8]
 8013c30:	f002 fda7 	bl	8016782 <memcpy>
 8013c34:	68aa      	ldr	r2, [r5, #8]
 8013c36:	692b      	ldr	r3, [r5, #16]
 8013c38:	4422      	add	r2, r4
 8013c3a:	4423      	add	r3, r4
 8013c3c:	1b36      	subs	r6, r6, r4
 8013c3e:	60aa      	str	r2, [r5, #8]
 8013c40:	612b      	str	r3, [r5, #16]
 8013c42:	2201      	movs	r2, #1
 8013c44:	4631      	mov	r1, r6
 8013c46:	4628      	mov	r0, r5
 8013c48:	f7f8 fd4c 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	1bb8      	subs	r0, r7, r6
 8013c50:	4440      	add	r0, r8
 8013c52:	4622      	mov	r2, r4
 8013c54:	2c00      	cmp	r4, #0
 8013c56:	d1ea      	bne.n	8013c2e <ucdr_deserialize_array_uint8_t+0x16>
 8013c58:	2301      	movs	r3, #1
 8013c5a:	7da8      	ldrb	r0, [r5, #22]
 8013c5c:	756b      	strb	r3, [r5, #21]
 8013c5e:	4058      	eors	r0, r3
 8013c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c64:	463a      	mov	r2, r7
 8013c66:	68a9      	ldr	r1, [r5, #8]
 8013c68:	4640      	mov	r0, r8
 8013c6a:	f002 fd8a 	bl	8016782 <memcpy>
 8013c6e:	68aa      	ldr	r2, [r5, #8]
 8013c70:	692b      	ldr	r3, [r5, #16]
 8013c72:	443a      	add	r2, r7
 8013c74:	443b      	add	r3, r7
 8013c76:	60aa      	str	r2, [r5, #8]
 8013c78:	612b      	str	r3, [r5, #16]
 8013c7a:	e7ed      	b.n	8013c58 <ucdr_deserialize_array_uint8_t+0x40>

08013c7c <ucdr_deserialize_endian_array_uint8_t>:
 8013c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c80:	4619      	mov	r1, r3
 8013c82:	461f      	mov	r7, r3
 8013c84:	4605      	mov	r5, r0
 8013c86:	4690      	mov	r8, r2
 8013c88:	f7f8 fca4 	bl	800c5d4 <ucdr_check_buffer_available_for>
 8013c8c:	b9e0      	cbnz	r0, 8013cc8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013c8e:	463e      	mov	r6, r7
 8013c90:	e009      	b.n	8013ca6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013c92:	68a9      	ldr	r1, [r5, #8]
 8013c94:	f002 fd75 	bl	8016782 <memcpy>
 8013c98:	68ab      	ldr	r3, [r5, #8]
 8013c9a:	6928      	ldr	r0, [r5, #16]
 8013c9c:	4423      	add	r3, r4
 8013c9e:	4420      	add	r0, r4
 8013ca0:	1b36      	subs	r6, r6, r4
 8013ca2:	60ab      	str	r3, [r5, #8]
 8013ca4:	6128      	str	r0, [r5, #16]
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	4631      	mov	r1, r6
 8013caa:	4628      	mov	r0, r5
 8013cac:	f7f8 fd1a 	bl	800c6e4 <ucdr_check_final_buffer_behavior_array>
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	1bb8      	subs	r0, r7, r6
 8013cb4:	4440      	add	r0, r8
 8013cb6:	4622      	mov	r2, r4
 8013cb8:	2c00      	cmp	r4, #0
 8013cba:	d1ea      	bne.n	8013c92 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	7da8      	ldrb	r0, [r5, #22]
 8013cc0:	756b      	strb	r3, [r5, #21]
 8013cc2:	4058      	eors	r0, r3
 8013cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cc8:	463a      	mov	r2, r7
 8013cca:	68a9      	ldr	r1, [r5, #8]
 8013ccc:	4640      	mov	r0, r8
 8013cce:	f002 fd58 	bl	8016782 <memcpy>
 8013cd2:	68aa      	ldr	r2, [r5, #8]
 8013cd4:	692b      	ldr	r3, [r5, #16]
 8013cd6:	443a      	add	r2, r7
 8013cd8:	443b      	add	r3, r7
 8013cda:	60aa      	str	r2, [r5, #8]
 8013cdc:	612b      	str	r3, [r5, #16]
 8013cde:	e7ed      	b.n	8013cbc <ucdr_deserialize_endian_array_uint8_t+0x40>

08013ce0 <ucdr_serialize_sequence_char>:
 8013ce0:	b570      	push	{r4, r5, r6, lr}
 8013ce2:	4615      	mov	r5, r2
 8013ce4:	460e      	mov	r6, r1
 8013ce6:	7d01      	ldrb	r1, [r0, #20]
 8013ce8:	4604      	mov	r4, r0
 8013cea:	f7f7 fea1 	bl	800ba30 <ucdr_serialize_endian_uint32_t>
 8013cee:	b90d      	cbnz	r5, 8013cf4 <ucdr_serialize_sequence_char+0x14>
 8013cf0:	2001      	movs	r0, #1
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}
 8013cf4:	7d21      	ldrb	r1, [r4, #20]
 8013cf6:	462b      	mov	r3, r5
 8013cf8:	4632      	mov	r2, r6
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d00:	f7ff bec2 	b.w	8013a88 <ucdr_serialize_endian_array_char>

08013d04 <ucdr_deserialize_sequence_char>:
 8013d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d08:	461d      	mov	r5, r3
 8013d0a:	4616      	mov	r6, r2
 8013d0c:	460f      	mov	r7, r1
 8013d0e:	461a      	mov	r2, r3
 8013d10:	7d01      	ldrb	r1, [r0, #20]
 8013d12:	4604      	mov	r4, r0
 8013d14:	f7f7 ffb4 	bl	800bc80 <ucdr_deserialize_endian_uint32_t>
 8013d18:	682b      	ldr	r3, [r5, #0]
 8013d1a:	429e      	cmp	r6, r3
 8013d1c:	bf3c      	itt	cc
 8013d1e:	2201      	movcc	r2, #1
 8013d20:	75a2      	strbcc	r2, [r4, #22]
 8013d22:	b913      	cbnz	r3, 8013d2a <ucdr_deserialize_sequence_char+0x26>
 8013d24:	2001      	movs	r0, #1
 8013d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d2a:	7d21      	ldrb	r1, [r4, #20]
 8013d2c:	463a      	mov	r2, r7
 8013d2e:	4620      	mov	r0, r4
 8013d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d34:	f7ff beda 	b.w	8013aec <ucdr_deserialize_endian_array_char>

08013d38 <ucdr_serialize_sequence_uint8_t>:
 8013d38:	b570      	push	{r4, r5, r6, lr}
 8013d3a:	4615      	mov	r5, r2
 8013d3c:	460e      	mov	r6, r1
 8013d3e:	7d01      	ldrb	r1, [r0, #20]
 8013d40:	4604      	mov	r4, r0
 8013d42:	f7f7 fe75 	bl	800ba30 <ucdr_serialize_endian_uint32_t>
 8013d46:	b90d      	cbnz	r5, 8013d4c <ucdr_serialize_sequence_uint8_t+0x14>
 8013d48:	2001      	movs	r0, #1
 8013d4a:	bd70      	pop	{r4, r5, r6, pc}
 8013d4c:	7d21      	ldrb	r1, [r4, #20]
 8013d4e:	462b      	mov	r3, r5
 8013d50:	4632      	mov	r2, r6
 8013d52:	4620      	mov	r0, r4
 8013d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d58:	f7ff bf2c 	b.w	8013bb4 <ucdr_serialize_endian_array_uint8_t>

08013d5c <ucdr_deserialize_sequence_uint8_t>:
 8013d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d60:	461d      	mov	r5, r3
 8013d62:	4616      	mov	r6, r2
 8013d64:	460f      	mov	r7, r1
 8013d66:	461a      	mov	r2, r3
 8013d68:	7d01      	ldrb	r1, [r0, #20]
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	f7f7 ff88 	bl	800bc80 <ucdr_deserialize_endian_uint32_t>
 8013d70:	682b      	ldr	r3, [r5, #0]
 8013d72:	429e      	cmp	r6, r3
 8013d74:	bf3c      	itt	cc
 8013d76:	2201      	movcc	r2, #1
 8013d78:	75a2      	strbcc	r2, [r4, #22]
 8013d7a:	b913      	cbnz	r3, 8013d82 <ucdr_deserialize_sequence_uint8_t+0x26>
 8013d7c:	2001      	movs	r0, #1
 8013d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d82:	7d21      	ldrb	r1, [r4, #20]
 8013d84:	463a      	mov	r2, r7
 8013d86:	4620      	mov	r0, r4
 8013d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8c:	f7ff bf76 	b.w	8013c7c <ucdr_deserialize_endian_array_uint8_t>

08013d90 <ucdr_serialize_string>:
 8013d90:	b510      	push	{r4, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	4604      	mov	r4, r0
 8013d96:	4608      	mov	r0, r1
 8013d98:	9101      	str	r1, [sp, #4]
 8013d9a:	f7ec fa2b 	bl	80001f4 <strlen>
 8013d9e:	9901      	ldr	r1, [sp, #4]
 8013da0:	1c42      	adds	r2, r0, #1
 8013da2:	4620      	mov	r0, r4
 8013da4:	b002      	add	sp, #8
 8013da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013daa:	f7ff bf99 	b.w	8013ce0 <ucdr_serialize_sequence_char>
 8013dae:	bf00      	nop

08013db0 <ucdr_deserialize_string>:
 8013db0:	b500      	push	{lr}
 8013db2:	b083      	sub	sp, #12
 8013db4:	ab01      	add	r3, sp, #4
 8013db6:	f7ff ffa5 	bl	8013d04 <ucdr_deserialize_sequence_char>
 8013dba:	b003      	add	sp, #12
 8013dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08013dc0 <get_custom_error>:
 8013dc0:	4b01      	ldr	r3, [pc, #4]	@ (8013dc8 <get_custom_error+0x8>)
 8013dc2:	7818      	ldrb	r0, [r3, #0]
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	2000de78 	.word	0x2000de78

08013dcc <recv_custom_msg>:
 8013dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd0:	4693      	mov	fp, r2
 8013dd2:	b089      	sub	sp, #36	@ 0x24
 8013dd4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013dd8:	9305      	str	r3, [sp, #20]
 8013dda:	468a      	mov	sl, r1
 8013ddc:	2100      	movs	r1, #0
 8013dde:	4604      	mov	r4, r0
 8013de0:	f88d 101e 	strb.w	r1, [sp, #30]
 8013de4:	b322      	cbz	r2, 8013e30 <recv_custom_msg+0x64>
 8013de6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013dea:	f10d 081f 	add.w	r8, sp, #31
 8013dee:	af05      	add	r7, sp, #20
 8013df0:	f10d 061e 	add.w	r6, sp, #30
 8013df4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013df8:	e002      	b.n	8013e00 <recv_custom_msg+0x34>
 8013dfa:	9b05      	ldr	r3, [sp, #20]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	dd0f      	ble.n	8013e20 <recv_custom_msg+0x54>
 8013e00:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013e04:	4623      	mov	r3, r4
 8013e06:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013e0a:	e9cd 5600 	strd	r5, r6, [sp]
 8013e0e:	4622      	mov	r2, r4
 8013e10:	4648      	mov	r0, r9
 8013e12:	f001 f92d 	bl	8015070 <uxr_read_framed_msg>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d0ef      	beq.n	8013dfa <recv_custom_msg+0x2e>
 8013e1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013e1e:	b1b3      	cbz	r3, 8013e4e <recv_custom_msg+0x82>
 8013e20:	4b0f      	ldr	r3, [pc, #60]	@ (8013e60 <recv_custom_msg+0x94>)
 8013e22:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013e26:	701a      	strb	r2, [r3, #0]
 8013e28:	2000      	movs	r0, #0
 8013e2a:	b009      	add	sp, #36	@ 0x24
 8013e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e30:	f10d 021f 	add.w	r2, sp, #31
 8013e34:	9200      	str	r2, [sp, #0]
 8013e36:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e3e:	4601      	mov	r1, r0
 8013e40:	47a8      	blx	r5
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d0ec      	beq.n	8013e20 <recv_custom_msg+0x54>
 8013e46:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d1e8      	bne.n	8013e20 <recv_custom_msg+0x54>
 8013e4e:	f8cb 0000 	str.w	r0, [fp]
 8013e52:	2001      	movs	r0, #1
 8013e54:	f8ca 4000 	str.w	r4, [sl]
 8013e58:	b009      	add	sp, #36	@ 0x24
 8013e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5e:	bf00      	nop
 8013e60:	2000de78 	.word	0x2000de78

08013e64 <send_custom_msg>:
 8013e64:	b530      	push	{r4, r5, lr}
 8013e66:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8013e6a:	b087      	sub	sp, #28
 8013e6c:	4615      	mov	r5, r2
 8013e6e:	b974      	cbnz	r4, 8013e8e <send_custom_msg+0x2a>
 8013e70:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8013e74:	f10d 0317 	add.w	r3, sp, #23
 8013e78:	47a0      	blx	r4
 8013e7a:	b108      	cbz	r0, 8013e80 <send_custom_msg+0x1c>
 8013e7c:	42a8      	cmp	r0, r5
 8013e7e:	d015      	beq.n	8013eac <send_custom_msg+0x48>
 8013e80:	4b0c      	ldr	r3, [pc, #48]	@ (8013eb4 <send_custom_msg+0x50>)
 8013e82:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013e86:	701a      	strb	r2, [r3, #0]
 8013e88:	2000      	movs	r0, #0
 8013e8a:	b007      	add	sp, #28
 8013e8c:	bd30      	pop	{r4, r5, pc}
 8013e8e:	460b      	mov	r3, r1
 8013e90:	2200      	movs	r2, #0
 8013e92:	f10d 0117 	add.w	r1, sp, #23
 8013e96:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013ea0:	9500      	str	r5, [sp, #0]
 8013ea2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013ea6:	f000 feeb 	bl	8014c80 <uxr_write_framed_msg>
 8013eaa:	e7e6      	b.n	8013e7a <send_custom_msg+0x16>
 8013eac:	2001      	movs	r0, #1
 8013eae:	b007      	add	sp, #28
 8013eb0:	bd30      	pop	{r4, r5, pc}
 8013eb2:	bf00      	nop
 8013eb4:	2000de78 	.word	0x2000de78

08013eb8 <uxr_set_custom_transport_callbacks>:
 8013eb8:	b410      	push	{r4}
 8013eba:	9c01      	ldr	r4, [sp, #4]
 8013ebc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8013ec0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013ec4:	9b02      	ldr	r3, [sp, #8]
 8013ec6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ece:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8013ed2:	4770      	bx	lr

08013ed4 <uxr_init_custom_transport>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013eda:	b303      	cbz	r3, 8013f1e <uxr_init_custom_transport+0x4a>
 8013edc:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	b1e2      	cbz	r2, 8013f1e <uxr_init_custom_transport+0x4a>
 8013ee4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013ee8:	b1ca      	cbz	r2, 8013f1e <uxr_init_custom_transport+0x4a>
 8013eea:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013eee:	b1b2      	cbz	r2, 8013f1e <uxr_init_custom_transport+0x4a>
 8013ef0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013ef4:	4798      	blx	r3
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	b188      	cbz	r0, 8013f1e <uxr_init_custom_transport+0x4a>
 8013efa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013efe:	b98b      	cbnz	r3, 8013f24 <uxr_init_custom_transport+0x50>
 8013f00:	490b      	ldr	r1, [pc, #44]	@ (8013f30 <uxr_init_custom_transport+0x5c>)
 8013f02:	4b0c      	ldr	r3, [pc, #48]	@ (8013f34 <uxr_init_custom_transport+0x60>)
 8013f04:	4a0c      	ldr	r2, [pc, #48]	@ (8013f38 <uxr_init_custom_transport+0x64>)
 8013f06:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013f0e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013f12:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013f16:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	bd38      	pop	{r3, r4, r5, pc}
 8013f1e:	2500      	movs	r5, #0
 8013f20:	4628      	mov	r0, r5
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
 8013f24:	2100      	movs	r1, #0
 8013f26:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013f2a:	f000 fea3 	bl	8014c74 <uxr_init_framing_io>
 8013f2e:	e7e7      	b.n	8013f00 <uxr_init_custom_transport+0x2c>
 8013f30:	08013e65 	.word	0x08013e65
 8013f34:	08013dcd 	.word	0x08013dcd
 8013f38:	08013dc1 	.word	0x08013dc1

08013f3c <uxr_close_custom_transport>:
 8013f3c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013f40:	4718      	bx	r3
 8013f42:	bf00      	nop

08013f44 <uxr_init_input_best_effort_stream>:
 8013f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f48:	8003      	strh	r3, [r0, #0]
 8013f4a:	4770      	bx	lr

08013f4c <uxr_reset_input_best_effort_stream>:
 8013f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f50:	8003      	strh	r3, [r0, #0]
 8013f52:	4770      	bx	lr

08013f54 <uxr_receive_best_effort_message>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4604      	mov	r4, r0
 8013f58:	8800      	ldrh	r0, [r0, #0]
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	f000 fe72 	bl	8014c44 <uxr_seq_num_cmp>
 8013f60:	4603      	mov	r3, r0
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013f68:	bfb8      	it	lt
 8013f6a:	8025      	strhlt	r5, [r4, #0]
 8013f6c:	bd38      	pop	{r3, r4, r5, pc}
 8013f6e:	bf00      	nop

08013f70 <on_full_input_buffer>:
 8013f70:	b570      	push	{r4, r5, r6, lr}
 8013f72:	4605      	mov	r5, r0
 8013f74:	460c      	mov	r4, r1
 8013f76:	682b      	ldr	r3, [r5, #0]
 8013f78:	6809      	ldr	r1, [r1, #0]
 8013f7a:	8920      	ldrh	r0, [r4, #8]
 8013f7c:	6862      	ldr	r2, [r4, #4]
 8013f7e:	fbb2 f2f0 	udiv	r2, r2, r0
 8013f82:	eba3 0c01 	sub.w	ip, r3, r1
 8013f86:	fbbc fcf2 	udiv	ip, ip, r2
 8013f8a:	f10c 0c01 	add.w	ip, ip, #1
 8013f8e:	fa1f f38c 	uxth.w	r3, ip
 8013f92:	fbb3 f6f0 	udiv	r6, r3, r0
 8013f96:	fb00 3316 	mls	r3, r0, r6, r3
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	fb02 f303 	mul.w	r3, r2, r3
 8013fa0:	1d18      	adds	r0, r3, #4
 8013fa2:	4408      	add	r0, r1
 8013fa4:	7d26      	ldrb	r6, [r4, #20]
 8013fa6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013faa:	b116      	cbz	r6, 8013fb2 <on_full_input_buffer+0x42>
 8013fac:	2600      	movs	r6, #0
 8013fae:	f840 6c04 	str.w	r6, [r0, #-4]
 8013fb2:	2a03      	cmp	r2, #3
 8013fb4:	d801      	bhi.n	8013fba <on_full_input_buffer+0x4a>
 8013fb6:	2001      	movs	r0, #1
 8013fb8:	bd70      	pop	{r4, r5, r6, pc}
 8013fba:	3308      	adds	r3, #8
 8013fbc:	4419      	add	r1, r3
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	692b      	ldr	r3, [r5, #16]
 8013fc2:	3a04      	subs	r2, #4
 8013fc4:	f7f8 fb52 	bl	800c66c <ucdr_init_buffer_origin>
 8013fc8:	4628      	mov	r0, r5
 8013fca:	4903      	ldr	r1, [pc, #12]	@ (8013fd8 <on_full_input_buffer+0x68>)
 8013fcc:	4622      	mov	r2, r4
 8013fce:	f7f8 fb29 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	bd70      	pop	{r4, r5, r6, pc}
 8013fd6:	bf00      	nop
 8013fd8:	08013f71 	.word	0x08013f71

08013fdc <uxr_init_input_reliable_stream>:
 8013fdc:	b500      	push	{lr}
 8013fde:	e9c0 1200 	strd	r1, r2, [r0]
 8013fe2:	f04f 0e00 	mov.w	lr, #0
 8013fe6:	9a01      	ldr	r2, [sp, #4]
 8013fe8:	8103      	strh	r3, [r0, #8]
 8013fea:	6102      	str	r2, [r0, #16]
 8013fec:	f880 e014 	strb.w	lr, [r0, #20]
 8013ff0:	b1d3      	cbz	r3, 8014028 <uxr_init_input_reliable_stream+0x4c>
 8013ff2:	f8c1 e000 	str.w	lr, [r1]
 8013ff6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013ffa:	f1bc 0f01 	cmp.w	ip, #1
 8013ffe:	d913      	bls.n	8014028 <uxr_init_input_reliable_stream+0x4c>
 8014000:	2301      	movs	r3, #1
 8014002:	fbb3 f1fc 	udiv	r1, r3, ip
 8014006:	fb0c 3111 	mls	r1, ip, r1, r3
 801400a:	b289      	uxth	r1, r1
 801400c:	6842      	ldr	r2, [r0, #4]
 801400e:	fbb2 f2fc 	udiv	r2, r2, ip
 8014012:	fb01 f202 	mul.w	r2, r1, r2
 8014016:	6801      	ldr	r1, [r0, #0]
 8014018:	f841 e002 	str.w	lr, [r1, r2]
 801401c:	3301      	adds	r3, #1
 801401e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014022:	b29b      	uxth	r3, r3
 8014024:	459c      	cmp	ip, r3
 8014026:	d8ec      	bhi.n	8014002 <uxr_init_input_reliable_stream+0x26>
 8014028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801402c:	60c3      	str	r3, [r0, #12]
 801402e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014032:	bf00      	nop

08014034 <uxr_reset_input_reliable_stream>:
 8014034:	8901      	ldrh	r1, [r0, #8]
 8014036:	b1e9      	cbz	r1, 8014074 <uxr_reset_input_reliable_stream+0x40>
 8014038:	f04f 0c00 	mov.w	ip, #0
 801403c:	b500      	push	{lr}
 801403e:	4663      	mov	r3, ip
 8014040:	46e6      	mov	lr, ip
 8014042:	fbb3 f2f1 	udiv	r2, r3, r1
 8014046:	fb01 3312 	mls	r3, r1, r2, r3
 801404a:	b29b      	uxth	r3, r3
 801404c:	6842      	ldr	r2, [r0, #4]
 801404e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014052:	fb02 f303 	mul.w	r3, r2, r3
 8014056:	6802      	ldr	r2, [r0, #0]
 8014058:	f842 e003 	str.w	lr, [r2, r3]
 801405c:	f10c 0c01 	add.w	ip, ip, #1
 8014060:	8901      	ldrh	r1, [r0, #8]
 8014062:	fa1f f38c 	uxth.w	r3, ip
 8014066:	4299      	cmp	r1, r3
 8014068:	d8eb      	bhi.n	8014042 <uxr_reset_input_reliable_stream+0xe>
 801406a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801406e:	60c3      	str	r3, [r0, #12]
 8014070:	f85d fb04 	ldr.w	pc, [sp], #4
 8014074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014078:	60c3      	str	r3, [r0, #12]
 801407a:	4770      	bx	lr

0801407c <uxr_receive_reliable_message>:
 801407c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014080:	4604      	mov	r4, r0
 8014082:	460d      	mov	r5, r1
 8014084:	8901      	ldrh	r1, [r0, #8]
 8014086:	8980      	ldrh	r0, [r0, #12]
 8014088:	4690      	mov	r8, r2
 801408a:	461f      	mov	r7, r3
 801408c:	f000 fdd2 	bl	8014c34 <uxr_seq_num_add>
 8014090:	4629      	mov	r1, r5
 8014092:	4606      	mov	r6, r0
 8014094:	89a0      	ldrh	r0, [r4, #12]
 8014096:	f000 fdd5 	bl	8014c44 <uxr_seq_num_cmp>
 801409a:	2800      	cmp	r0, #0
 801409c:	db0a      	blt.n	80140b4 <uxr_receive_reliable_message+0x38>
 801409e:	2600      	movs	r6, #0
 80140a0:	89e0      	ldrh	r0, [r4, #14]
 80140a2:	4629      	mov	r1, r5
 80140a4:	f000 fdce 	bl	8014c44 <uxr_seq_num_cmp>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	da00      	bge.n	80140ae <uxr_receive_reliable_message+0x32>
 80140ac:	81e5      	strh	r5, [r4, #14]
 80140ae:	4630      	mov	r0, r6
 80140b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140b4:	4630      	mov	r0, r6
 80140b6:	4629      	mov	r1, r5
 80140b8:	f000 fdc4 	bl	8014c44 <uxr_seq_num_cmp>
 80140bc:	2800      	cmp	r0, #0
 80140be:	dbee      	blt.n	801409e <uxr_receive_reliable_message+0x22>
 80140c0:	6923      	ldr	r3, [r4, #16]
 80140c2:	4640      	mov	r0, r8
 80140c4:	4798      	blx	r3
 80140c6:	2101      	movs	r1, #1
 80140c8:	4681      	mov	r9, r0
 80140ca:	89a0      	ldrh	r0, [r4, #12]
 80140cc:	f000 fdb2 	bl	8014c34 <uxr_seq_num_add>
 80140d0:	f1b9 0f00 	cmp.w	r9, #0
 80140d4:	d101      	bne.n	80140da <uxr_receive_reliable_message+0x5e>
 80140d6:	4285      	cmp	r5, r0
 80140d8:	d047      	beq.n	801416a <uxr_receive_reliable_message+0xee>
 80140da:	8922      	ldrh	r2, [r4, #8]
 80140dc:	fbb5 f0f2 	udiv	r0, r5, r2
 80140e0:	fb02 5010 	mls	r0, r2, r0, r5
 80140e4:	b280      	uxth	r0, r0
 80140e6:	6863      	ldr	r3, [r4, #4]
 80140e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80140ec:	fb00 f303 	mul.w	r3, r0, r3
 80140f0:	6820      	ldr	r0, [r4, #0]
 80140f2:	3304      	adds	r3, #4
 80140f4:	4418      	add	r0, r3
 80140f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d1cf      	bne.n	801409e <uxr_receive_reliable_message+0x22>
 80140fe:	4641      	mov	r1, r8
 8014100:	463a      	mov	r2, r7
 8014102:	f002 fb3e 	bl	8016782 <memcpy>
 8014106:	8921      	ldrh	r1, [r4, #8]
 8014108:	fbb5 f2f1 	udiv	r2, r5, r1
 801410c:	fb01 5212 	mls	r2, r1, r2, r5
 8014110:	b292      	uxth	r2, r2
 8014112:	6863      	ldr	r3, [r4, #4]
 8014114:	fbb3 f3f1 	udiv	r3, r3, r1
 8014118:	fb02 f303 	mul.w	r3, r2, r3
 801411c:	6822      	ldr	r2, [r4, #0]
 801411e:	50d7      	str	r7, [r2, r3]
 8014120:	9a08      	ldr	r2, [sp, #32]
 8014122:	2301      	movs	r3, #1
 8014124:	7013      	strb	r3, [r2, #0]
 8014126:	f1b9 0f00 	cmp.w	r9, #0
 801412a:	d0b8      	beq.n	801409e <uxr_receive_reliable_message+0x22>
 801412c:	89a6      	ldrh	r6, [r4, #12]
 801412e:	4630      	mov	r0, r6
 8014130:	2101      	movs	r1, #1
 8014132:	f000 fd7f 	bl	8014c34 <uxr_seq_num_add>
 8014136:	8922      	ldrh	r2, [r4, #8]
 8014138:	6863      	ldr	r3, [r4, #4]
 801413a:	fbb3 f3f2 	udiv	r3, r3, r2
 801413e:	4606      	mov	r6, r0
 8014140:	fbb0 f0f2 	udiv	r0, r0, r2
 8014144:	fb02 6010 	mls	r0, r2, r0, r6
 8014148:	b280      	uxth	r0, r0
 801414a:	fb00 f303 	mul.w	r3, r0, r3
 801414e:	6820      	ldr	r0, [r4, #0]
 8014150:	3304      	adds	r3, #4
 8014152:	4418      	add	r0, r3
 8014154:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d0a0      	beq.n	801409e <uxr_receive_reliable_message+0x22>
 801415c:	6923      	ldr	r3, [r4, #16]
 801415e:	4798      	blx	r3
 8014160:	2802      	cmp	r0, #2
 8014162:	d008      	beq.n	8014176 <uxr_receive_reliable_message+0xfa>
 8014164:	2801      	cmp	r0, #1
 8014166:	d0e2      	beq.n	801412e <uxr_receive_reliable_message+0xb2>
 8014168:	e799      	b.n	801409e <uxr_receive_reliable_message+0x22>
 801416a:	9b08      	ldr	r3, [sp, #32]
 801416c:	81a5      	strh	r5, [r4, #12]
 801416e:	2601      	movs	r6, #1
 8014170:	f883 9000 	strb.w	r9, [r3]
 8014174:	e794      	b.n	80140a0 <uxr_receive_reliable_message+0x24>
 8014176:	2601      	movs	r6, #1
 8014178:	e792      	b.n	80140a0 <uxr_receive_reliable_message+0x24>
 801417a:	bf00      	nop

0801417c <uxr_next_input_reliable_buffer_available>:
 801417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014180:	4604      	mov	r4, r0
 8014182:	460f      	mov	r7, r1
 8014184:	8980      	ldrh	r0, [r0, #12]
 8014186:	2101      	movs	r1, #1
 8014188:	4690      	mov	r8, r2
 801418a:	f000 fd53 	bl	8014c34 <uxr_seq_num_add>
 801418e:	8922      	ldrh	r2, [r4, #8]
 8014190:	fbb0 f6f2 	udiv	r6, r0, r2
 8014194:	fb02 0616 	mls	r6, r2, r6, r0
 8014198:	b2b6      	uxth	r6, r6
 801419a:	6863      	ldr	r3, [r4, #4]
 801419c:	fbb3 f3f2 	udiv	r3, r3, r2
 80141a0:	fb06 f303 	mul.w	r3, r6, r3
 80141a4:	6826      	ldr	r6, [r4, #0]
 80141a6:	3304      	adds	r3, #4
 80141a8:	441e      	add	r6, r3
 80141aa:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80141ae:	f1b9 0f00 	cmp.w	r9, #0
 80141b2:	d023      	beq.n	80141fc <uxr_next_input_reliable_buffer_available+0x80>
 80141b4:	6923      	ldr	r3, [r4, #16]
 80141b6:	4605      	mov	r5, r0
 80141b8:	4630      	mov	r0, r6
 80141ba:	4798      	blx	r3
 80141bc:	4682      	mov	sl, r0
 80141be:	b300      	cbz	r0, 8014202 <uxr_next_input_reliable_buffer_available+0x86>
 80141c0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80141c4:	2101      	movs	r1, #1
 80141c6:	4650      	mov	r0, sl
 80141c8:	f000 fd34 	bl	8014c34 <uxr_seq_num_add>
 80141cc:	8921      	ldrh	r1, [r4, #8]
 80141ce:	fbb0 f2f1 	udiv	r2, r0, r1
 80141d2:	4682      	mov	sl, r0
 80141d4:	fb01 0212 	mls	r2, r1, r2, r0
 80141d8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80141dc:	b292      	uxth	r2, r2
 80141de:	fbb3 f3f1 	udiv	r3, r3, r1
 80141e2:	fb02 f303 	mul.w	r3, r2, r3
 80141e6:	3304      	adds	r3, #4
 80141e8:	4418      	add	r0, r3
 80141ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80141ee:	b12b      	cbz	r3, 80141fc <uxr_next_input_reliable_buffer_available+0x80>
 80141f0:	6923      	ldr	r3, [r4, #16]
 80141f2:	4798      	blx	r3
 80141f4:	2802      	cmp	r0, #2
 80141f6:	d01b      	beq.n	8014230 <uxr_next_input_reliable_buffer_available+0xb4>
 80141f8:	2801      	cmp	r0, #1
 80141fa:	d0e3      	beq.n	80141c4 <uxr_next_input_reliable_buffer_available+0x48>
 80141fc:	2000      	movs	r0, #0
 80141fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014202:	464a      	mov	r2, r9
 8014204:	4631      	mov	r1, r6
 8014206:	4638      	mov	r0, r7
 8014208:	f7f8 fa38 	bl	800c67c <ucdr_init_buffer>
 801420c:	8921      	ldrh	r1, [r4, #8]
 801420e:	fbb5 f2f1 	udiv	r2, r5, r1
 8014212:	fb01 5212 	mls	r2, r1, r2, r5
 8014216:	b292      	uxth	r2, r2
 8014218:	6863      	ldr	r3, [r4, #4]
 801421a:	fbb3 f3f1 	udiv	r3, r3, r1
 801421e:	fb02 f303 	mul.w	r3, r2, r3
 8014222:	6822      	ldr	r2, [r4, #0]
 8014224:	f842 a003 	str.w	sl, [r2, r3]
 8014228:	2001      	movs	r0, #1
 801422a:	81a5      	strh	r5, [r4, #12]
 801422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014230:	8920      	ldrh	r0, [r4, #8]
 8014232:	fbb5 f3f0 	udiv	r3, r5, r0
 8014236:	fb00 5513 	mls	r5, r0, r3, r5
 801423a:	b2ad      	uxth	r5, r5
 801423c:	6863      	ldr	r3, [r4, #4]
 801423e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014242:	fb03 f505 	mul.w	r5, r3, r5
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	2000      	movs	r0, #0
 801424a:	5158      	str	r0, [r3, r5]
 801424c:	eb06 0108 	add.w	r1, r6, r8
 8014250:	eba9 0208 	sub.w	r2, r9, r8
 8014254:	4638      	mov	r0, r7
 8014256:	f7f8 fa11 	bl	800c67c <ucdr_init_buffer>
 801425a:	4638      	mov	r0, r7
 801425c:	4903      	ldr	r1, [pc, #12]	@ (801426c <uxr_next_input_reliable_buffer_available+0xf0>)
 801425e:	4622      	mov	r2, r4
 8014260:	f7f8 f9e0 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 8014264:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014268:	2001      	movs	r0, #1
 801426a:	e7c8      	b.n	80141fe <uxr_next_input_reliable_buffer_available+0x82>
 801426c:	08013f71 	.word	0x08013f71

08014270 <uxr_process_heartbeat>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	4611      	mov	r1, r2
 8014274:	4604      	mov	r4, r0
 8014276:	89c0      	ldrh	r0, [r0, #14]
 8014278:	4615      	mov	r5, r2
 801427a:	f000 fce3 	bl	8014c44 <uxr_seq_num_cmp>
 801427e:	2800      	cmp	r0, #0
 8014280:	bfb8      	it	lt
 8014282:	81e5      	strhlt	r5, [r4, #14]
 8014284:	bd38      	pop	{r3, r4, r5, pc}
 8014286:	bf00      	nop

08014288 <uxr_compute_acknack>:
 8014288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801428c:	8903      	ldrh	r3, [r0, #8]
 801428e:	8985      	ldrh	r5, [r0, #12]
 8014290:	4604      	mov	r4, r0
 8014292:	460e      	mov	r6, r1
 8014294:	b1d3      	cbz	r3, 80142cc <uxr_compute_acknack+0x44>
 8014296:	4628      	mov	r0, r5
 8014298:	2701      	movs	r7, #1
 801429a:	e003      	b.n	80142a4 <uxr_compute_acknack+0x1c>
 801429c:	4567      	cmp	r7, ip
 801429e:	d215      	bcs.n	80142cc <uxr_compute_acknack+0x44>
 80142a0:	89a0      	ldrh	r0, [r4, #12]
 80142a2:	3701      	adds	r7, #1
 80142a4:	b2b9      	uxth	r1, r7
 80142a6:	f000 fcc5 	bl	8014c34 <uxr_seq_num_add>
 80142aa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142ae:	fbb0 f3fc 	udiv	r3, r0, ip
 80142b2:	fb0c 0313 	mls	r3, ip, r3, r0
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80142bc:	fbb3 f3fc 	udiv	r3, r3, ip
 80142c0:	fb02 f303 	mul.w	r3, r2, r3
 80142c4:	58cb      	ldr	r3, [r1, r3]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d1e8      	bne.n	801429c <uxr_compute_acknack+0x14>
 80142ca:	4605      	mov	r5, r0
 80142cc:	8035      	strh	r5, [r6, #0]
 80142ce:	2101      	movs	r1, #1
 80142d0:	4628      	mov	r0, r5
 80142d2:	89e7      	ldrh	r7, [r4, #14]
 80142d4:	f000 fcb2 	bl	8014c3c <uxr_seq_num_sub>
 80142d8:	4601      	mov	r1, r0
 80142da:	4638      	mov	r0, r7
 80142dc:	f000 fcae 	bl	8014c3c <uxr_seq_num_sub>
 80142e0:	4605      	mov	r5, r0
 80142e2:	b318      	cbz	r0, 801432c <uxr_compute_acknack+0xa4>
 80142e4:	f04f 0900 	mov.w	r9, #0
 80142e8:	464f      	mov	r7, r9
 80142ea:	f04f 0801 	mov.w	r8, #1
 80142ee:	fa1f f189 	uxth.w	r1, r9
 80142f2:	8830      	ldrh	r0, [r6, #0]
 80142f4:	f000 fc9e 	bl	8014c34 <uxr_seq_num_add>
 80142f8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142fc:	fbb0 f3fc 	udiv	r3, r0, ip
 8014300:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014304:	fb03 001c 	mls	r0, r3, ip, r0
 8014308:	b283      	uxth	r3, r0
 801430a:	fbb2 f2fc 	udiv	r2, r2, ip
 801430e:	fb02 f303 	mul.w	r3, r2, r3
 8014312:	fa08 f209 	lsl.w	r2, r8, r9
 8014316:	58cb      	ldr	r3, [r1, r3]
 8014318:	f109 0901 	add.w	r9, r9, #1
 801431c:	b90b      	cbnz	r3, 8014322 <uxr_compute_acknack+0x9a>
 801431e:	4317      	orrs	r7, r2
 8014320:	b2bf      	uxth	r7, r7
 8014322:	454d      	cmp	r5, r9
 8014324:	d1e3      	bne.n	80142ee <uxr_compute_acknack+0x66>
 8014326:	4638      	mov	r0, r7
 8014328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801432c:	4607      	mov	r7, r0
 801432e:	4638      	mov	r0, r7
 8014330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014334 <uxr_init_output_best_effort_stream>:
 8014334:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014338:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801433c:	6001      	str	r1, [r0, #0]
 801433e:	7303      	strb	r3, [r0, #12]
 8014340:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014344:	4770      	bx	lr
 8014346:	bf00      	nop

08014348 <uxr_reset_output_best_effort_stream>:
 8014348:	7b02      	ldrb	r2, [r0, #12]
 801434a:	6042      	str	r2, [r0, #4]
 801434c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014350:	81c3      	strh	r3, [r0, #14]
 8014352:	4770      	bx	lr

08014354 <uxr_prepare_best_effort_buffer_to_write>:
 8014354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014356:	4604      	mov	r4, r0
 8014358:	b083      	sub	sp, #12
 801435a:	6840      	ldr	r0, [r0, #4]
 801435c:	460d      	mov	r5, r1
 801435e:	4616      	mov	r6, r2
 8014360:	f7f9 fe3a 	bl	800dfd8 <uxr_submessage_padding>
 8014364:	6863      	ldr	r3, [r4, #4]
 8014366:	4418      	add	r0, r3
 8014368:	68a3      	ldr	r3, [r4, #8]
 801436a:	1942      	adds	r2, r0, r5
 801436c:	4293      	cmp	r3, r2
 801436e:	bf2c      	ite	cs
 8014370:	2701      	movcs	r7, #1
 8014372:	2700      	movcc	r7, #0
 8014374:	d202      	bcs.n	801437c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014376:	4638      	mov	r0, r7
 8014378:	b003      	add	sp, #12
 801437a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801437c:	9000      	str	r0, [sp, #0]
 801437e:	6821      	ldr	r1, [r4, #0]
 8014380:	4630      	mov	r0, r6
 8014382:	2300      	movs	r3, #0
 8014384:	f7f8 f968 	bl	800c658 <ucdr_init_buffer_origin_offset>
 8014388:	6861      	ldr	r1, [r4, #4]
 801438a:	4638      	mov	r0, r7
 801438c:	4429      	add	r1, r5
 801438e:	6061      	str	r1, [r4, #4]
 8014390:	b003      	add	sp, #12
 8014392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014394 <uxr_prepare_best_effort_buffer_to_send>:
 8014394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014398:	4604      	mov	r4, r0
 801439a:	461d      	mov	r5, r3
 801439c:	6840      	ldr	r0, [r0, #4]
 801439e:	7b23      	ldrb	r3, [r4, #12]
 80143a0:	4298      	cmp	r0, r3
 80143a2:	bf8c      	ite	hi
 80143a4:	2601      	movhi	r6, #1
 80143a6:	2600      	movls	r6, #0
 80143a8:	d802      	bhi.n	80143b0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80143aa:	4630      	mov	r0, r6
 80143ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b0:	4688      	mov	r8, r1
 80143b2:	89e0      	ldrh	r0, [r4, #14]
 80143b4:	2101      	movs	r1, #1
 80143b6:	4617      	mov	r7, r2
 80143b8:	f000 fc3c 	bl	8014c34 <uxr_seq_num_add>
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	81e0      	strh	r0, [r4, #14]
 80143c0:	8028      	strh	r0, [r5, #0]
 80143c2:	f8c8 3000 	str.w	r3, [r8]
 80143c6:	6863      	ldr	r3, [r4, #4]
 80143c8:	603b      	str	r3, [r7, #0]
 80143ca:	7b23      	ldrb	r3, [r4, #12]
 80143cc:	6063      	str	r3, [r4, #4]
 80143ce:	4630      	mov	r0, r6
 80143d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143d4 <on_full_output_buffer>:
 80143d4:	b538      	push	{r3, r4, r5, lr}
 80143d6:	6802      	ldr	r2, [r0, #0]
 80143d8:	460c      	mov	r4, r1
 80143da:	6809      	ldr	r1, [r1, #0]
 80143dc:	8923      	ldrh	r3, [r4, #8]
 80143de:	eba2 0c01 	sub.w	ip, r2, r1
 80143e2:	6862      	ldr	r2, [r4, #4]
 80143e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80143e8:	fbbc fcf2 	udiv	ip, ip, r2
 80143ec:	f10c 0c01 	add.w	ip, ip, #1
 80143f0:	fa1f fc8c 	uxth.w	ip, ip
 80143f4:	fbbc fef3 	udiv	lr, ip, r3
 80143f8:	fb03 c31e 	mls	r3, r3, lr, ip
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	fb02 f303 	mul.w	r3, r2, r3
 8014402:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014406:	58ca      	ldr	r2, [r1, r3]
 8014408:	4463      	add	r3, ip
 801440a:	eba2 020c 	sub.w	r2, r2, ip
 801440e:	3308      	adds	r3, #8
 8014410:	4605      	mov	r5, r0
 8014412:	4419      	add	r1, r3
 8014414:	3a04      	subs	r2, #4
 8014416:	6903      	ldr	r3, [r0, #16]
 8014418:	f7f8 f928 	bl	800c66c <ucdr_init_buffer_origin>
 801441c:	4628      	mov	r0, r5
 801441e:	4903      	ldr	r1, [pc, #12]	@ (801442c <on_full_output_buffer+0x58>)
 8014420:	4622      	mov	r2, r4
 8014422:	f7f8 f8ff 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 8014426:	2000      	movs	r0, #0
 8014428:	bd38      	pop	{r3, r4, r5, pc}
 801442a:	bf00      	nop
 801442c:	080143d5 	.word	0x080143d5

08014430 <uxr_init_output_reliable_stream>:
 8014430:	b410      	push	{r4}
 8014432:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014436:	8103      	strh	r3, [r0, #8]
 8014438:	e9c0 1200 	strd	r1, r2, [r0]
 801443c:	f880 c00c 	strb.w	ip, [r0, #12]
 8014440:	b1d3      	cbz	r3, 8014478 <uxr_init_output_reliable_stream+0x48>
 8014442:	f8c1 c000 	str.w	ip, [r1]
 8014446:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801444a:	f1bc 0f01 	cmp.w	ip, #1
 801444e:	d913      	bls.n	8014478 <uxr_init_output_reliable_stream+0x48>
 8014450:	2301      	movs	r3, #1
 8014452:	fbb3 f1fc 	udiv	r1, r3, ip
 8014456:	fb0c 3111 	mls	r1, ip, r1, r3
 801445a:	b289      	uxth	r1, r1
 801445c:	6842      	ldr	r2, [r0, #4]
 801445e:	6804      	ldr	r4, [r0, #0]
 8014460:	fbb2 f2fc 	udiv	r2, r2, ip
 8014464:	fb01 f202 	mul.w	r2, r1, r2
 8014468:	7b01      	ldrb	r1, [r0, #12]
 801446a:	50a1      	str	r1, [r4, r2]
 801446c:	3301      	adds	r3, #1
 801446e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014472:	b29b      	uxth	r3, r3
 8014474:	459c      	cmp	ip, r3
 8014476:	d8ec      	bhi.n	8014452 <uxr_init_output_reliable_stream+0x22>
 8014478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801447c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014480:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014484:	4905      	ldr	r1, [pc, #20]	@ (801449c <uxr_init_output_reliable_stream+0x6c>)
 8014486:	f85d 4b04 	ldr.w	r4, [sp], #4
 801448a:	f8c0 100e 	str.w	r1, [r0, #14]
 801448e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014492:	2300      	movs	r3, #0
 8014494:	8242      	strh	r2, [r0, #18]
 8014496:	8403      	strh	r3, [r0, #32]
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop
 801449c:	ffff0000 	.word	0xffff0000

080144a0 <uxr_reset_output_reliable_stream>:
 80144a0:	8901      	ldrh	r1, [r0, #8]
 80144a2:	b1b1      	cbz	r1, 80144d2 <uxr_reset_output_reliable_stream+0x32>
 80144a4:	f04f 0c00 	mov.w	ip, #0
 80144a8:	4663      	mov	r3, ip
 80144aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80144ae:	fb01 3312 	mls	r3, r1, r2, r3
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	6842      	ldr	r2, [r0, #4]
 80144b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80144ba:	6801      	ldr	r1, [r0, #0]
 80144bc:	fb02 f303 	mul.w	r3, r2, r3
 80144c0:	7b02      	ldrb	r2, [r0, #12]
 80144c2:	50ca      	str	r2, [r1, r3]
 80144c4:	f10c 0c01 	add.w	ip, ip, #1
 80144c8:	8901      	ldrh	r1, [r0, #8]
 80144ca:	fa1f f38c 	uxth.w	r3, ip
 80144ce:	4299      	cmp	r1, r3
 80144d0:	d8eb      	bhi.n	80144aa <uxr_reset_output_reliable_stream+0xa>
 80144d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144da:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80144de:	4904      	ldr	r1, [pc, #16]	@ (80144f0 <uxr_reset_output_reliable_stream+0x50>)
 80144e0:	f8c0 100e 	str.w	r1, [r0, #14]
 80144e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144e8:	2300      	movs	r3, #0
 80144ea:	8242      	strh	r2, [r0, #18]
 80144ec:	8403      	strh	r3, [r0, #32]
 80144ee:	4770      	bx	lr
 80144f0:	ffff0000 	.word	0xffff0000

080144f4 <uxr_prepare_reliable_buffer_to_write>:
 80144f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f8:	4604      	mov	r4, r0
 80144fa:	b091      	sub	sp, #68	@ 0x44
 80144fc:	8900      	ldrh	r0, [r0, #8]
 80144fe:	89e6      	ldrh	r6, [r4, #14]
 8014500:	6823      	ldr	r3, [r4, #0]
 8014502:	9204      	str	r2, [sp, #16]
 8014504:	fbb6 f2f0 	udiv	r2, r6, r0
 8014508:	fb00 6212 	mls	r2, r0, r2, r6
 801450c:	b292      	uxth	r2, r2
 801450e:	6865      	ldr	r5, [r4, #4]
 8014510:	fbb5 f5f0 	udiv	r5, r5, r0
 8014514:	fb05 3202 	mla	r2, r5, r2, r3
 8014518:	3204      	adds	r2, #4
 801451a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801451e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014522:	9203      	str	r2, [sp, #12]
 8014524:	468b      	mov	fp, r1
 8014526:	1f2f      	subs	r7, r5, #4
 8014528:	2800      	cmp	r0, #0
 801452a:	f000 814c 	beq.w	80147c6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801452e:	f04f 0c00 	mov.w	ip, #0
 8014532:	46e2      	mov	sl, ip
 8014534:	4661      	mov	r1, ip
 8014536:	fbb1 f2f0 	udiv	r2, r1, r0
 801453a:	fb00 1212 	mls	r2, r0, r2, r1
 801453e:	b292      	uxth	r2, r2
 8014540:	fb05 f202 	mul.w	r2, r5, r2
 8014544:	f10c 0c01 	add.w	ip, ip, #1
 8014548:	589a      	ldr	r2, [r3, r2]
 801454a:	454a      	cmp	r2, r9
 801454c:	bf08      	it	eq
 801454e:	f10a 0a01 	addeq.w	sl, sl, #1
 8014552:	fa1f f18c 	uxth.w	r1, ip
 8014556:	bf08      	it	eq
 8014558:	fa1f fa8a 	uxtheq.w	sl, sl
 801455c:	4281      	cmp	r1, r0
 801455e:	d3ea      	bcc.n	8014536 <uxr_prepare_reliable_buffer_to_write+0x42>
 8014560:	4640      	mov	r0, r8
 8014562:	2104      	movs	r1, #4
 8014564:	f8cd a014 	str.w	sl, [sp, #20]
 8014568:	f7f8 f88c 	bl	800c684 <ucdr_alignment>
 801456c:	4480      	add	r8, r0
 801456e:	eb08 020b 	add.w	r2, r8, fp
 8014572:	42ba      	cmp	r2, r7
 8014574:	f240 80cd 	bls.w	8014712 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014578:	7b22      	ldrb	r2, [r4, #12]
 801457a:	445a      	add	r2, fp
 801457c:	42ba      	cmp	r2, r7
 801457e:	f240 80b5 	bls.w	80146ec <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014582:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014586:	33fc      	adds	r3, #252	@ 0xfc
 8014588:	b2ba      	uxth	r2, r7
 801458a:	4413      	add	r3, r2
 801458c:	b29b      	uxth	r3, r3
 801458e:	fb0a f903 	mul.w	r9, sl, r3
 8014592:	45d9      	cmp	r9, fp
 8014594:	9305      	str	r3, [sp, #20]
 8014596:	9306      	str	r3, [sp, #24]
 8014598:	f0c0 80b7 	bcc.w	801470a <uxr_prepare_reliable_buffer_to_write+0x216>
 801459c:	f108 0304 	add.w	r3, r8, #4
 80145a0:	42bb      	cmp	r3, r7
 80145a2:	f080 80db 	bcs.w	801475c <uxr_prepare_reliable_buffer_to_write+0x268>
 80145a6:	f1a2 0904 	sub.w	r9, r2, #4
 80145aa:	eba9 0908 	sub.w	r9, r9, r8
 80145ae:	9b05      	ldr	r3, [sp, #20]
 80145b0:	fa1f f989 	uxth.w	r9, r9
 80145b4:	ebab 0b09 	sub.w	fp, fp, r9
 80145b8:	fbbb f2f3 	udiv	r2, fp, r3
 80145bc:	fb03 b312 	mls	r3, r3, r2, fp
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	f000 80c8 	beq.w	8014756 <uxr_prepare_reliable_buffer_to_write+0x262>
 80145c6:	3201      	adds	r2, #1
 80145c8:	b292      	uxth	r2, r2
 80145ca:	9306      	str	r3, [sp, #24]
 80145cc:	4552      	cmp	r2, sl
 80145ce:	f200 809c 	bhi.w	801470a <uxr_prepare_reliable_buffer_to_write+0x216>
 80145d2:	f10d 0b20 	add.w	fp, sp, #32
 80145d6:	2a00      	cmp	r2, #0
 80145d8:	d042      	beq.n	8014660 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80145da:	f8cd 801c 	str.w	r8, [sp, #28]
 80145de:	f04f 0a00 	mov.w	sl, #0
 80145e2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80145e6:	9505      	str	r5, [sp, #20]
 80145e8:	f10d 0b20 	add.w	fp, sp, #32
 80145ec:	4615      	mov	r5, r2
 80145ee:	e000      	b.n	80145f2 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80145f0:	46c1      	mov	r9, r8
 80145f2:	8920      	ldrh	r0, [r4, #8]
 80145f4:	fbb6 f2f0 	udiv	r2, r6, r0
 80145f8:	fb00 6112 	mls	r1, r0, r2, r6
 80145fc:	b28a      	uxth	r2, r1
 80145fe:	6863      	ldr	r3, [r4, #4]
 8014600:	fbb3 f1f0 	udiv	r1, r3, r0
 8014604:	6823      	ldr	r3, [r4, #0]
 8014606:	fb02 f101 	mul.w	r1, r2, r1
 801460a:	3104      	adds	r1, #4
 801460c:	4419      	add	r1, r3
 801460e:	4658      	mov	r0, fp
 8014610:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8014614:	9200      	str	r2, [sp, #0]
 8014616:	2300      	movs	r3, #0
 8014618:	463a      	mov	r2, r7
 801461a:	f7f8 f81d 	bl	800c658 <ucdr_init_buffer_origin_offset>
 801461e:	464a      	mov	r2, r9
 8014620:	2300      	movs	r3, #0
 8014622:	210d      	movs	r1, #13
 8014624:	4658      	mov	r0, fp
 8014626:	f7f9 fc97 	bl	800df58 <uxr_buffer_submessage_header>
 801462a:	8921      	ldrh	r1, [r4, #8]
 801462c:	fbb6 f2f1 	udiv	r2, r6, r1
 8014630:	fb01 6212 	mls	r2, r1, r2, r6
 8014634:	b292      	uxth	r2, r2
 8014636:	6863      	ldr	r3, [r4, #4]
 8014638:	fbb3 f3f1 	udiv	r3, r3, r1
 801463c:	fb02 f303 	mul.w	r3, r2, r3
 8014640:	6822      	ldr	r2, [r4, #0]
 8014642:	4630      	mov	r0, r6
 8014644:	50d7      	str	r7, [r2, r3]
 8014646:	2101      	movs	r1, #1
 8014648:	f000 faf4 	bl	8014c34 <uxr_seq_num_add>
 801464c:	f10a 0a01 	add.w	sl, sl, #1
 8014650:	fa1f f38a 	uxth.w	r3, sl
 8014654:	429d      	cmp	r5, r3
 8014656:	4606      	mov	r6, r0
 8014658:	d8ca      	bhi.n	80145f0 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801465a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801465e:	9d05      	ldr	r5, [sp, #20]
 8014660:	8920      	ldrh	r0, [r4, #8]
 8014662:	fbb6 f3f0 	udiv	r3, r6, r0
 8014666:	fb00 6313 	mls	r3, r0, r3, r6
 801466a:	b299      	uxth	r1, r3
 801466c:	6863      	ldr	r3, [r4, #4]
 801466e:	fbb3 f3f0 	udiv	r3, r3, r0
 8014672:	fb01 f303 	mul.w	r3, r1, r3
 8014676:	6821      	ldr	r1, [r4, #0]
 8014678:	3304      	adds	r3, #4
 801467a:	4419      	add	r1, r3
 801467c:	463a      	mov	r2, r7
 801467e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014682:	9000      	str	r0, [sp, #0]
 8014684:	2300      	movs	r3, #0
 8014686:	4658      	mov	r0, fp
 8014688:	f7f7 ffe6 	bl	800c658 <ucdr_init_buffer_origin_offset>
 801468c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014690:	4658      	mov	r0, fp
 8014692:	fa1f f289 	uxth.w	r2, r9
 8014696:	2302      	movs	r3, #2
 8014698:	210d      	movs	r1, #13
 801469a:	f7f9 fc5d 	bl	800df58 <uxr_buffer_submessage_header>
 801469e:	9b03      	ldr	r3, [sp, #12]
 80146a0:	8927      	ldrh	r7, [r4, #8]
 80146a2:	7b20      	ldrb	r0, [r4, #12]
 80146a4:	f108 0104 	add.w	r1, r8, #4
 80146a8:	440b      	add	r3, r1
 80146aa:	4619      	mov	r1, r3
 80146ac:	fbb6 f3f7 	udiv	r3, r6, r7
 80146b0:	fb07 6313 	mls	r3, r7, r3, r6
 80146b4:	f1a5 0208 	sub.w	r2, r5, #8
 80146b8:	b29d      	uxth	r5, r3
 80146ba:	3004      	adds	r0, #4
 80146bc:	6863      	ldr	r3, [r4, #4]
 80146be:	fbb3 f3f7 	udiv	r3, r3, r7
 80146c2:	fb05 f303 	mul.w	r3, r5, r3
 80146c6:	6825      	ldr	r5, [r4, #0]
 80146c8:	4448      	add	r0, r9
 80146ca:	50e8      	str	r0, [r5, r3]
 80146cc:	9d04      	ldr	r5, [sp, #16]
 80146ce:	eba2 0208 	sub.w	r2, r2, r8
 80146d2:	4628      	mov	r0, r5
 80146d4:	f7f7 ffd2 	bl	800c67c <ucdr_init_buffer>
 80146d8:	4628      	mov	r0, r5
 80146da:	493c      	ldr	r1, [pc, #240]	@ (80147cc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80146dc:	4622      	mov	r2, r4
 80146de:	f7f7 ffa1 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 80146e2:	2001      	movs	r0, #1
 80146e4:	81e6      	strh	r6, [r4, #14]
 80146e6:	b011      	add	sp, #68	@ 0x44
 80146e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ec:	2101      	movs	r1, #1
 80146ee:	89e0      	ldrh	r0, [r4, #14]
 80146f0:	f000 faa0 	bl	8014c34 <uxr_seq_num_add>
 80146f4:	8921      	ldrh	r1, [r4, #8]
 80146f6:	4605      	mov	r5, r0
 80146f8:	8a60      	ldrh	r0, [r4, #18]
 80146fa:	f000 fa9b 	bl	8014c34 <uxr_seq_num_add>
 80146fe:	4601      	mov	r1, r0
 8014700:	4628      	mov	r0, r5
 8014702:	f000 fa9f 	bl	8014c44 <uxr_seq_num_cmp>
 8014706:	2800      	cmp	r0, #0
 8014708:	dd42      	ble.n	8014790 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801470a:	2000      	movs	r0, #0
 801470c:	b011      	add	sp, #68	@ 0x44
 801470e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014712:	8921      	ldrh	r1, [r4, #8]
 8014714:	8a60      	ldrh	r0, [r4, #18]
 8014716:	9205      	str	r2, [sp, #20]
 8014718:	f000 fa8c 	bl	8014c34 <uxr_seq_num_add>
 801471c:	4601      	mov	r1, r0
 801471e:	4630      	mov	r0, r6
 8014720:	f000 fa90 	bl	8014c44 <uxr_seq_num_cmp>
 8014724:	2800      	cmp	r0, #0
 8014726:	9a05      	ldr	r2, [sp, #20]
 8014728:	dcef      	bgt.n	801470a <uxr_prepare_reliable_buffer_to_write+0x216>
 801472a:	8927      	ldrh	r7, [r4, #8]
 801472c:	fbb6 f3f7 	udiv	r3, r6, r7
 8014730:	fb07 6313 	mls	r3, r7, r3, r6
 8014734:	b29d      	uxth	r5, r3
 8014736:	6863      	ldr	r3, [r4, #4]
 8014738:	6824      	ldr	r4, [r4, #0]
 801473a:	fbb3 f3f7 	udiv	r3, r3, r7
 801473e:	fb05 f303 	mul.w	r3, r5, r3
 8014742:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014746:	50e2      	str	r2, [r4, r3]
 8014748:	2300      	movs	r3, #0
 801474a:	f8cd 8000 	str.w	r8, [sp]
 801474e:	f7f7 ff83 	bl	800c658 <ucdr_init_buffer_origin_offset>
 8014752:	2001      	movs	r0, #1
 8014754:	e7da      	b.n	801470c <uxr_prepare_reliable_buffer_to_write+0x218>
 8014756:	b293      	uxth	r3, r2
 8014758:	461a      	mov	r2, r3
 801475a:	e737      	b.n	80145cc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801475c:	4630      	mov	r0, r6
 801475e:	2101      	movs	r1, #1
 8014760:	9207      	str	r2, [sp, #28]
 8014762:	f000 fa67 	bl	8014c34 <uxr_seq_num_add>
 8014766:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801476a:	fbb0 f1fc 	udiv	r1, r0, ip
 801476e:	fb0c 0111 	mls	r1, ip, r1, r0
 8014772:	4606      	mov	r6, r0
 8014774:	b288      	uxth	r0, r1
 8014776:	6863      	ldr	r3, [r4, #4]
 8014778:	fbb3 f1fc 	udiv	r1, r3, ip
 801477c:	6823      	ldr	r3, [r4, #0]
 801477e:	9a07      	ldr	r2, [sp, #28]
 8014780:	fb00 f101 	mul.w	r1, r0, r1
 8014784:	3104      	adds	r1, #4
 8014786:	440b      	add	r3, r1
 8014788:	9303      	str	r3, [sp, #12]
 801478a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801478e:	e70a      	b.n	80145a6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014790:	8921      	ldrh	r1, [r4, #8]
 8014792:	fbb5 f3f1 	udiv	r3, r5, r1
 8014796:	fb01 5313 	mls	r3, r1, r3, r5
 801479a:	b29a      	uxth	r2, r3
 801479c:	6863      	ldr	r3, [r4, #4]
 801479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80147a2:	6821      	ldr	r1, [r4, #0]
 80147a4:	9804      	ldr	r0, [sp, #16]
 80147a6:	fb02 f303 	mul.w	r3, r2, r3
 80147aa:	3304      	adds	r3, #4
 80147ac:	7b22      	ldrb	r2, [r4, #12]
 80147ae:	4419      	add	r1, r3
 80147b0:	445a      	add	r2, fp
 80147b2:	f841 2c04 	str.w	r2, [r1, #-4]
 80147b6:	7b23      	ldrb	r3, [r4, #12]
 80147b8:	9300      	str	r3, [sp, #0]
 80147ba:	2300      	movs	r3, #0
 80147bc:	f7f7 ff4c 	bl	800c658 <ucdr_init_buffer_origin_offset>
 80147c0:	81e5      	strh	r5, [r4, #14]
 80147c2:	2001      	movs	r0, #1
 80147c4:	e7a2      	b.n	801470c <uxr_prepare_reliable_buffer_to_write+0x218>
 80147c6:	4682      	mov	sl, r0
 80147c8:	e6ca      	b.n	8014560 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80147ca:	bf00      	nop
 80147cc:	080143d5 	.word	0x080143d5

080147d0 <uxr_prepare_next_reliable_buffer_to_send>:
 80147d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d2:	4604      	mov	r4, r0
 80147d4:	460f      	mov	r7, r1
 80147d6:	8a00      	ldrh	r0, [r0, #16]
 80147d8:	2101      	movs	r1, #1
 80147da:	4616      	mov	r6, r2
 80147dc:	461d      	mov	r5, r3
 80147de:	f000 fa29 	bl	8014c34 <uxr_seq_num_add>
 80147e2:	8028      	strh	r0, [r5, #0]
 80147e4:	8922      	ldrh	r2, [r4, #8]
 80147e6:	fbb0 f3f2 	udiv	r3, r0, r2
 80147ea:	fb02 0c13 	mls	ip, r2, r3, r0
 80147ee:	fa1f fc8c 	uxth.w	ip, ip
 80147f2:	6863      	ldr	r3, [r4, #4]
 80147f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80147f8:	fb0c fc03 	mul.w	ip, ip, r3
 80147fc:	6823      	ldr	r3, [r4, #0]
 80147fe:	89e1      	ldrh	r1, [r4, #14]
 8014800:	f10c 0c04 	add.w	ip, ip, #4
 8014804:	4463      	add	r3, ip
 8014806:	603b      	str	r3, [r7, #0]
 8014808:	6823      	ldr	r3, [r4, #0]
 801480a:	449c      	add	ip, r3
 801480c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014810:	6033      	str	r3, [r6, #0]
 8014812:	f000 fa17 	bl	8014c44 <uxr_seq_num_cmp>
 8014816:	2800      	cmp	r0, #0
 8014818:	dd01      	ble.n	801481e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801481a:	2000      	movs	r0, #0
 801481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801481e:	7b23      	ldrb	r3, [r4, #12]
 8014820:	6832      	ldr	r2, [r6, #0]
 8014822:	429a      	cmp	r2, r3
 8014824:	d9f9      	bls.n	801481a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014826:	8a61      	ldrh	r1, [r4, #18]
 8014828:	8a20      	ldrh	r0, [r4, #16]
 801482a:	f000 fa07 	bl	8014c3c <uxr_seq_num_sub>
 801482e:	8923      	ldrh	r3, [r4, #8]
 8014830:	4283      	cmp	r3, r0
 8014832:	d0f2      	beq.n	801481a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014834:	8828      	ldrh	r0, [r5, #0]
 8014836:	89e3      	ldrh	r3, [r4, #14]
 8014838:	8220      	strh	r0, [r4, #16]
 801483a:	4298      	cmp	r0, r3
 801483c:	d001      	beq.n	8014842 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801483e:	2001      	movs	r0, #1
 8014840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014842:	2101      	movs	r1, #1
 8014844:	f000 f9f6 	bl	8014c34 <uxr_seq_num_add>
 8014848:	81e0      	strh	r0, [r4, #14]
 801484a:	2001      	movs	r0, #1
 801484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801484e:	bf00      	nop

08014850 <uxr_update_output_stream_heartbeat_timestamp>:
 8014850:	b570      	push	{r4, r5, r6, lr}
 8014852:	8a01      	ldrh	r1, [r0, #16]
 8014854:	4604      	mov	r4, r0
 8014856:	8a40      	ldrh	r0, [r0, #18]
 8014858:	4615      	mov	r5, r2
 801485a:	461e      	mov	r6, r3
 801485c:	f000 f9f2 	bl	8014c44 <uxr_seq_num_cmp>
 8014860:	2800      	cmp	r0, #0
 8014862:	db07      	blt.n	8014874 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014868:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801486c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014870:	2000      	movs	r0, #0
 8014872:	bd70      	pop	{r4, r5, r6, pc}
 8014874:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014878:	b940      	cbnz	r0, 801488c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801487a:	2301      	movs	r3, #1
 801487c:	f884 3020 	strb.w	r3, [r4, #32]
 8014880:	3564      	adds	r5, #100	@ 0x64
 8014882:	f146 0600 	adc.w	r6, r6, #0
 8014886:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801488a:	bd70      	pop	{r4, r5, r6, pc}
 801488c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014890:	4295      	cmp	r5, r2
 8014892:	eb76 0303 	sbcs.w	r3, r6, r3
 8014896:	bfa5      	ittet	ge
 8014898:	3001      	addge	r0, #1
 801489a:	f884 0020 	strbge.w	r0, [r4, #32]
 801489e:	2000      	movlt	r0, #0
 80148a0:	2001      	movge	r0, #1
 80148a2:	e7ed      	b.n	8014880 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080148a4 <uxr_begin_output_nack_buffer_it>:
 80148a4:	8a40      	ldrh	r0, [r0, #18]
 80148a6:	4770      	bx	lr

080148a8 <uxr_next_reliable_nack_buffer_to_send>:
 80148a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ac:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80148b0:	b082      	sub	sp, #8
 80148b2:	f1b8 0f00 	cmp.w	r8, #0
 80148b6:	d011      	beq.n	80148dc <uxr_next_reliable_nack_buffer_to_send+0x34>
 80148b8:	4604      	mov	r4, r0
 80148ba:	8818      	ldrh	r0, [r3, #0]
 80148bc:	460e      	mov	r6, r1
 80148be:	4617      	mov	r7, r2
 80148c0:	461d      	mov	r5, r3
 80148c2:	2101      	movs	r1, #1
 80148c4:	f000 f9b6 	bl	8014c34 <uxr_seq_num_add>
 80148c8:	8028      	strh	r0, [r5, #0]
 80148ca:	8a21      	ldrh	r1, [r4, #16]
 80148cc:	f000 f9ba 	bl	8014c44 <uxr_seq_num_cmp>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	dd07      	ble.n	80148e4 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 80148d4:	f04f 0800 	mov.w	r8, #0
 80148d8:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80148dc:	4640      	mov	r0, r8
 80148de:	b002      	add	sp, #8
 80148e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148e4:	8921      	ldrh	r1, [r4, #8]
 80148e6:	8828      	ldrh	r0, [r5, #0]
 80148e8:	6823      	ldr	r3, [r4, #0]
 80148ea:	fbb0 f2f1 	udiv	r2, r0, r1
 80148ee:	fb01 0c12 	mls	ip, r1, r2, r0
 80148f2:	fa1f f28c 	uxth.w	r2, ip
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	6863      	ldr	r3, [r4, #4]
 80148fa:	fbb3 fcf1 	udiv	ip, r3, r1
 80148fe:	9b01      	ldr	r3, [sp, #4]
 8014900:	fb02 fc0c 	mul.w	ip, r2, ip
 8014904:	f10c 0c04 	add.w	ip, ip, #4
 8014908:	4463      	add	r3, ip
 801490a:	6033      	str	r3, [r6, #0]
 801490c:	6823      	ldr	r3, [r4, #0]
 801490e:	4463      	add	r3, ip
 8014910:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014914:	603b      	str	r3, [r7, #0]
 8014916:	7b22      	ldrb	r2, [r4, #12]
 8014918:	429a      	cmp	r2, r3
 801491a:	d0d2      	beq.n	80148c2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801491c:	4640      	mov	r0, r8
 801491e:	b002      	add	sp, #8
 8014920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014924 <uxr_process_acknack>:
 8014924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014926:	4604      	mov	r4, r0
 8014928:	460e      	mov	r6, r1
 801492a:	4610      	mov	r0, r2
 801492c:	2101      	movs	r1, #1
 801492e:	f000 f985 	bl	8014c3c <uxr_seq_num_sub>
 8014932:	8a61      	ldrh	r1, [r4, #18]
 8014934:	f000 f982 	bl	8014c3c <uxr_seq_num_sub>
 8014938:	b1c0      	cbz	r0, 801496c <uxr_process_acknack+0x48>
 801493a:	4605      	mov	r5, r0
 801493c:	2700      	movs	r7, #0
 801493e:	2101      	movs	r1, #1
 8014940:	8a60      	ldrh	r0, [r4, #18]
 8014942:	f000 f977 	bl	8014c34 <uxr_seq_num_add>
 8014946:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801494a:	fbb0 f1fc 	udiv	r1, r0, ip
 801494e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014952:	fb0c 0111 	mls	r1, ip, r1, r0
 8014956:	b289      	uxth	r1, r1
 8014958:	3701      	adds	r7, #1
 801495a:	fbb3 f3fc 	udiv	r3, r3, ip
 801495e:	fb01 f303 	mul.w	r3, r1, r3
 8014962:	42bd      	cmp	r5, r7
 8014964:	7b21      	ldrb	r1, [r4, #12]
 8014966:	8260      	strh	r0, [r4, #18]
 8014968:	50d1      	str	r1, [r2, r3]
 801496a:	d1e8      	bne.n	801493e <uxr_process_acknack+0x1a>
 801496c:	3e00      	subs	r6, #0
 801496e:	f04f 0300 	mov.w	r3, #0
 8014972:	bf18      	it	ne
 8014974:	2601      	movne	r6, #1
 8014976:	f884 3020 	strb.w	r3, [r4, #32]
 801497a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014980 <uxr_is_output_up_to_date>:
 8014980:	8a01      	ldrh	r1, [r0, #16]
 8014982:	8a40      	ldrh	r0, [r0, #18]
 8014984:	b508      	push	{r3, lr}
 8014986:	f000 f95d 	bl	8014c44 <uxr_seq_num_cmp>
 801498a:	fab0 f080 	clz	r0, r0
 801498e:	0940      	lsrs	r0, r0, #5
 8014990:	bd08      	pop	{r3, pc}
 8014992:	bf00      	nop

08014994 <get_available_free_slots>:
 8014994:	8902      	ldrh	r2, [r0, #8]
 8014996:	b1da      	cbz	r2, 80149d0 <get_available_free_slots+0x3c>
 8014998:	b530      	push	{r4, r5, lr}
 801499a:	2100      	movs	r1, #0
 801499c:	6843      	ldr	r3, [r0, #4]
 801499e:	6805      	ldr	r5, [r0, #0]
 80149a0:	7b04      	ldrb	r4, [r0, #12]
 80149a2:	fbb3 fef2 	udiv	lr, r3, r2
 80149a6:	4608      	mov	r0, r1
 80149a8:	460b      	mov	r3, r1
 80149aa:	fbb3 fcf2 	udiv	ip, r3, r2
 80149ae:	fb02 331c 	mls	r3, r2, ip, r3
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	fb0e f303 	mul.w	r3, lr, r3
 80149b8:	3101      	adds	r1, #1
 80149ba:	f855 c003 	ldr.w	ip, [r5, r3]
 80149be:	4564      	cmp	r4, ip
 80149c0:	bf08      	it	eq
 80149c2:	3001      	addeq	r0, #1
 80149c4:	b28b      	uxth	r3, r1
 80149c6:	bf08      	it	eq
 80149c8:	b280      	uxtheq	r0, r0
 80149ca:	4293      	cmp	r3, r2
 80149cc:	d3ed      	bcc.n	80149aa <get_available_free_slots+0x16>
 80149ce:	bd30      	pop	{r4, r5, pc}
 80149d0:	4610      	mov	r0, r2
 80149d2:	4770      	bx	lr

080149d4 <uxr_buffer_request_data>:
 80149d4:	b530      	push	{r4, r5, lr}
 80149d6:	b095      	sub	sp, #84	@ 0x54
 80149d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80149dc:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80149de:	9303      	str	r3, [sp, #12]
 80149e0:	2200      	movs	r2, #0
 80149e2:	2d00      	cmp	r5, #0
 80149e4:	bf14      	ite	ne
 80149e6:	2101      	movne	r1, #1
 80149e8:	4611      	moveq	r1, r2
 80149ea:	4604      	mov	r4, r0
 80149ec:	f88d 301c 	strb.w	r3, [sp, #28]
 80149f0:	f88d 201d 	strb.w	r2, [sp, #29]
 80149f4:	f88d 201e 	strb.w	r2, [sp, #30]
 80149f8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80149fc:	d021      	beq.n	8014a42 <uxr_buffer_request_data+0x6e>
 80149fe:	682a      	ldr	r2, [r5, #0]
 8014a00:	686b      	ldr	r3, [r5, #4]
 8014a02:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8014a06:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014a0a:	2210      	movs	r2, #16
 8014a0c:	2308      	movs	r3, #8
 8014a0e:	2100      	movs	r1, #0
 8014a10:	e9cd 3100 	strd	r3, r1, [sp]
 8014a14:	4620      	mov	r0, r4
 8014a16:	9905      	ldr	r1, [sp, #20]
 8014a18:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a1a:	f7f8 ffff 	bl	800da1c <uxr_prepare_stream_to_write_submessage>
 8014a1e:	b918      	cbnz	r0, 8014a28 <uxr_buffer_request_data+0x54>
 8014a20:	4604      	mov	r4, r0
 8014a22:	4620      	mov	r0, r4
 8014a24:	b015      	add	sp, #84	@ 0x54
 8014a26:	bd30      	pop	{r4, r5, pc}
 8014a28:	9904      	ldr	r1, [sp, #16]
 8014a2a:	aa06      	add	r2, sp, #24
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	f7f9 f92b 	bl	800dc88 <uxr_init_base_object_request>
 8014a32:	a906      	add	r1, sp, #24
 8014a34:	4604      	mov	r4, r0
 8014a36:	a80c      	add	r0, sp, #48	@ 0x30
 8014a38:	f7fa fc26 	bl	800f288 <uxr_serialize_READ_DATA_Payload>
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	b015      	add	sp, #84	@ 0x54
 8014a40:	bd30      	pop	{r4, r5, pc}
 8014a42:	2208      	movs	r2, #8
 8014a44:	e7e2      	b.n	8014a0c <uxr_buffer_request_data+0x38>
 8014a46:	bf00      	nop

08014a48 <uxr_buffer_cancel_data>:
 8014a48:	b510      	push	{r4, lr}
 8014a4a:	b094      	sub	sp, #80	@ 0x50
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	9202      	str	r2, [sp, #8]
 8014a50:	9205      	str	r2, [sp, #20]
 8014a52:	9301      	str	r3, [sp, #4]
 8014a54:	2201      	movs	r2, #1
 8014a56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a5a:	f88d 301e 	strb.w	r3, [sp, #30]
 8014a5e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8014a62:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014a66:	2308      	movs	r3, #8
 8014a68:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	2210      	movs	r2, #16
 8014a70:	ab0c      	add	r3, sp, #48	@ 0x30
 8014a72:	4604      	mov	r4, r0
 8014a74:	9103      	str	r1, [sp, #12]
 8014a76:	f7f8 ffd1 	bl	800da1c <uxr_prepare_stream_to_write_submessage>
 8014a7a:	b918      	cbnz	r0, 8014a84 <uxr_buffer_cancel_data+0x3c>
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	4620      	mov	r0, r4
 8014a80:	b014      	add	sp, #80	@ 0x50
 8014a82:	bd10      	pop	{r4, pc}
 8014a84:	9905      	ldr	r1, [sp, #20]
 8014a86:	aa06      	add	r2, sp, #24
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f7f9 f8fd 	bl	800dc88 <uxr_init_base_object_request>
 8014a8e:	a906      	add	r1, sp, #24
 8014a90:	4604      	mov	r4, r0
 8014a92:	a80c      	add	r0, sp, #48	@ 0x30
 8014a94:	f7fa fbf8 	bl	800f288 <uxr_serialize_READ_DATA_Payload>
 8014a98:	4620      	mov	r0, r4
 8014a9a:	b014      	add	sp, #80	@ 0x50
 8014a9c:	bd10      	pop	{r4, pc}
 8014a9e:	bf00      	nop

08014aa0 <read_submessage_format>:
 8014aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aa4:	b095      	sub	sp, #84	@ 0x54
 8014aa6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8014aaa:	b113      	cbz	r3, 8014ab2 <read_submessage_format+0x12>
 8014aac:	b015      	add	sp, #84	@ 0x54
 8014aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ab2:	460c      	mov	r4, r1
 8014ab4:	4615      	mov	r5, r2
 8014ab6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014aba:	4607      	mov	r7, r0
 8014abc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8014abe:	9004      	str	r0, [sp, #16]
 8014ac0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014ac2:	9005      	str	r0, [sp, #20]
 8014ac4:	1a52      	subs	r2, r2, r1
 8014ac6:	a80c      	add	r0, sp, #48	@ 0x30
 8014ac8:	4699      	mov	r9, r3
 8014aca:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8014ace:	f7f7 fdd5 	bl	800c67c <ucdr_init_buffer>
 8014ad2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014ad6:	a80c      	add	r0, sp, #48	@ 0x30
 8014ad8:	f7f7 fda4 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 8014adc:	69e2      	ldr	r2, [r4, #28]
 8014ade:	b19a      	cbz	r2, 8014b08 <read_submessage_format+0x68>
 8014ae0:	f1b8 0f07 	cmp.w	r8, #7
 8014ae4:	f882 9014 	strb.w	r9, [r2, #20]
 8014ae8:	d040      	beq.n	8014b6c <read_submessage_format+0xcc>
 8014aea:	f1b8 0f08 	cmp.w	r8, #8
 8014aee:	d02e      	beq.n	8014b4e <read_submessage_format+0xae>
 8014af0:	f1b8 0f06 	cmp.w	r8, #6
 8014af4:	d011      	beq.n	8014b1a <read_submessage_format+0x7a>
 8014af6:	2301      	movs	r3, #1
 8014af8:	7513      	strb	r3, [r2, #20]
 8014afa:	4629      	mov	r1, r5
 8014afc:	4620      	mov	r0, r4
 8014afe:	f7f7 fe0d 	bl	800c71c <ucdr_advance_buffer>
 8014b02:	b015      	add	sp, #84	@ 0x54
 8014b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b08:	f1b8 0f07 	cmp.w	r8, #7
 8014b0c:	d02e      	beq.n	8014b6c <read_submessage_format+0xcc>
 8014b0e:	f1b8 0f08 	cmp.w	r8, #8
 8014b12:	d01c      	beq.n	8014b4e <read_submessage_format+0xae>
 8014b14:	f1b8 0f06 	cmp.w	r8, #6
 8014b18:	d1ef      	bne.n	8014afa <read_submessage_format+0x5a>
 8014b1a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8014b1e:	f1b8 0f00 	cmp.w	r8, #0
 8014b22:	d011      	beq.n	8014b48 <read_submessage_format+0xa8>
 8014b24:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b26:	e9cd 3500 	strd	r3, r5, [sp]
 8014b2a:	2306      	movs	r3, #6
 8014b2c:	f88d 3016 	strb.w	r3, [sp, #22]
 8014b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014b34:	9302      	str	r3, [sp, #8]
 8014b36:	4632      	mov	r2, r6
 8014b38:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	47c0      	blx	r8
 8014b40:	2301      	movs	r3, #1
 8014b42:	69e2      	ldr	r2, [r4, #28]
 8014b44:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014b48:	2a00      	cmp	r2, #0
 8014b4a:	d1d4      	bne.n	8014af6 <read_submessage_format+0x56>
 8014b4c:	e7d5      	b.n	8014afa <read_submessage_format+0x5a>
 8014b4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d0f8      	beq.n	8014b48 <read_submessage_format+0xa8>
 8014b56:	a906      	add	r1, sp, #24
 8014b58:	a80c      	add	r0, sp, #48	@ 0x30
 8014b5a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014b5e:	f7fa fc59 	bl	800f414 <uxr_deserialize_SampleIdentity>
 8014b62:	b9a0      	cbnz	r0, 8014b8e <read_submessage_format+0xee>
 8014b64:	69e2      	ldr	r2, [r4, #28]
 8014b66:	2a00      	cmp	r2, #0
 8014b68:	d1c5      	bne.n	8014af6 <read_submessage_format+0x56>
 8014b6a:	e7c6      	b.n	8014afa <read_submessage_format+0x5a>
 8014b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014b70:	b13b      	cbz	r3, 8014b82 <read_submessage_format+0xe2>
 8014b72:	a906      	add	r1, sp, #24
 8014b74:	a80c      	add	r0, sp, #48	@ 0x30
 8014b76:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014b7a:	f7fa f91f 	bl	800edbc <uxr_deserialize_BaseObjectRequest>
 8014b7e:	bb60      	cbnz	r0, 8014bda <read_submessage_format+0x13a>
 8014b80:	69e2      	ldr	r2, [r4, #28]
 8014b82:	68a3      	ldr	r3, [r4, #8]
 8014b84:	442b      	add	r3, r5
 8014b86:	60a3      	str	r3, [r4, #8]
 8014b88:	2a00      	cmp	r2, #0
 8014b8a:	d1b4      	bne.n	8014af6 <read_submessage_format+0x56>
 8014b8c:	e7b5      	b.n	8014afa <read_submessage_format+0x5a>
 8014b8e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014b92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014b94:	1a52      	subs	r2, r2, r1
 8014b96:	eba8 0803 	sub.w	r8, r8, r3
 8014b9a:	a80c      	add	r0, sp, #48	@ 0x30
 8014b9c:	f7f7 fd6e 	bl	800c67c <ucdr_init_buffer>
 8014ba0:	44a8      	add	r8, r5
 8014ba2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014ba6:	a80c      	add	r0, sp, #48	@ 0x30
 8014ba8:	f7f7 fd3c 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 8014bac:	fa1f f888 	uxth.w	r8, r8
 8014bb0:	ab0c      	add	r3, sp, #48	@ 0x30
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	f8cd 8004 	str.w	r8, [sp, #4]
 8014bb8:	2108      	movs	r1, #8
 8014bba:	f88d 1016 	strb.w	r1, [sp, #22]
 8014bbe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8014bc2:	9102      	str	r1, [sp, #8]
 8014bc4:	ab06      	add	r3, sp, #24
 8014bc6:	4632      	mov	r2, r6
 8014bc8:	9905      	ldr	r1, [sp, #20]
 8014bca:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8014bce:	4638      	mov	r0, r7
 8014bd0:	47b0      	blx	r6
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014bd8:	e7c4      	b.n	8014b64 <read_submessage_format+0xc4>
 8014bda:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8014bde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014be0:	1a52      	subs	r2, r2, r1
 8014be2:	a80c      	add	r0, sp, #48	@ 0x30
 8014be4:	eba8 0803 	sub.w	r8, r8, r3
 8014be8:	f7f7 fd48 	bl	800c67c <ucdr_init_buffer>
 8014bec:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014bf0:	a80c      	add	r0, sp, #48	@ 0x30
 8014bf2:	f7f7 fd17 	bl	800c624 <ucdr_set_on_full_buffer_callback>
 8014bf6:	ab0c      	add	r3, sp, #48	@ 0x30
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014bfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c02:	44a8      	add	r8, r5
 8014c04:	fa1f f888 	uxth.w	r8, r8
 8014c08:	f8cd 8004 	str.w	r8, [sp, #4]
 8014c0c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014c10:	2107      	movs	r1, #7
 8014c12:	f88d 1016 	strb.w	r1, [sp, #22]
 8014c16:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8014c1a:	9102      	str	r1, [sp, #8]
 8014c1c:	4632      	mov	r2, r6
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8014c24:	9905      	ldr	r1, [sp, #20]
 8014c26:	4638      	mov	r0, r7
 8014c28:	47b0      	blx	r6
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014c30:	e7a6      	b.n	8014b80 <read_submessage_format+0xe0>
 8014c32:	bf00      	nop

08014c34 <uxr_seq_num_add>:
 8014c34:	4408      	add	r0, r1
 8014c36:	b280      	uxth	r0, r0
 8014c38:	4770      	bx	lr
 8014c3a:	bf00      	nop

08014c3c <uxr_seq_num_sub>:
 8014c3c:	1a40      	subs	r0, r0, r1
 8014c3e:	b280      	uxth	r0, r0
 8014c40:	4770      	bx	lr
 8014c42:	bf00      	nop

08014c44 <uxr_seq_num_cmp>:
 8014c44:	4288      	cmp	r0, r1
 8014c46:	d011      	beq.n	8014c6c <uxr_seq_num_cmp+0x28>
 8014c48:	d309      	bcc.n	8014c5e <uxr_seq_num_cmp+0x1a>
 8014c4a:	4288      	cmp	r0, r1
 8014c4c:	d910      	bls.n	8014c70 <uxr_seq_num_cmp+0x2c>
 8014c4e:	1a40      	subs	r0, r0, r1
 8014c50:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014c54:	bfd4      	ite	le
 8014c56:	2001      	movle	r0, #1
 8014c58:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014c5c:	4770      	bx	lr
 8014c5e:	1a0b      	subs	r3, r1, r0
 8014c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014c64:	daf1      	bge.n	8014c4a <uxr_seq_num_cmp+0x6>
 8014c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c6a:	4770      	bx	lr
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	4770      	bx	lr
 8014c70:	2001      	movs	r0, #1
 8014c72:	4770      	bx	lr

08014c74 <uxr_init_framing_io>:
 8014c74:	2300      	movs	r3, #0
 8014c76:	7041      	strb	r1, [r0, #1]
 8014c78:	7003      	strb	r3, [r0, #0]
 8014c7a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop

08014c80 <uxr_write_framed_msg>:
 8014c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c84:	4617      	mov	r7, r2
 8014c86:	7842      	ldrb	r2, [r0, #1]
 8014c88:	b083      	sub	sp, #12
 8014c8a:	460e      	mov	r6, r1
 8014c8c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014c90:	469a      	mov	sl, r3
 8014c92:	2901      	cmp	r1, #1
 8014c94:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014c98:	4604      	mov	r4, r0
 8014c9a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014c9e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014ca2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014ca6:	f240 8137 	bls.w	8014f18 <uxr_write_framed_msg+0x298>
 8014caa:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014cae:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014cb2:	2901      	cmp	r1, #1
 8014cb4:	f04f 0202 	mov.w	r2, #2
 8014cb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cbc:	f240 808f 	bls.w	8014dde <uxr_write_framed_msg+0x15e>
 8014cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cc2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014cc6:	b2dd      	uxtb	r5, r3
 8014cc8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014ccc:	2203      	movs	r2, #3
 8014cce:	2901      	cmp	r1, #1
 8014cd0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cd4:	f240 809a 	bls.w	8014e0c <uxr_write_framed_msg+0x18c>
 8014cd8:	18a1      	adds	r1, r4, r2
 8014cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cdc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014ce0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014ce4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014ce8:	3201      	adds	r2, #1
 8014cea:	2801      	cmp	r0, #1
 8014cec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cf0:	f240 80a0 	bls.w	8014e34 <uxr_write_framed_msg+0x1b4>
 8014cf4:	18a0      	adds	r0, r4, r2
 8014cf6:	3201      	adds	r2, #1
 8014cf8:	b2d2      	uxtb	r2, r2
 8014cfa:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014cfe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	f000 80a9 	beq.w	8014e5a <uxr_write_framed_msg+0x1da>
 8014d08:	f04f 0900 	mov.w	r9, #0
 8014d0c:	46c8      	mov	r8, r9
 8014d0e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014d12:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014d16:	2901      	cmp	r1, #1
 8014d18:	f240 80c3 	bls.w	8014ea2 <uxr_write_framed_msg+0x222>
 8014d1c:	2a29      	cmp	r2, #41	@ 0x29
 8014d1e:	f200 809f 	bhi.w	8014e60 <uxr_write_framed_msg+0x1e0>
 8014d22:	18a1      	adds	r1, r4, r2
 8014d24:	3201      	adds	r2, #1
 8014d26:	b2d2      	uxtb	r2, r2
 8014d28:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014d2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d30:	ea89 0303 	eor.w	r3, r9, r3
 8014d34:	498c      	ldr	r1, [pc, #560]	@ (8014f68 <uxr_write_framed_msg+0x2e8>)
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	f108 0801 	add.w	r8, r8, #1
 8014d3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d40:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014d44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d46:	4543      	cmp	r3, r8
 8014d48:	d8e1      	bhi.n	8014d0e <uxr_write_framed_msg+0x8e>
 8014d4a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014d4e:	fa5f f889 	uxtb.w	r8, r9
 8014d52:	9301      	str	r3, [sp, #4]
 8014d54:	f04f 0900 	mov.w	r9, #0
 8014d58:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014d5c:	fa5f f18a 	uxtb.w	r1, sl
 8014d60:	2901      	cmp	r1, #1
 8014d62:	d921      	bls.n	8014da8 <uxr_write_framed_msg+0x128>
 8014d64:	2a29      	cmp	r2, #41	@ 0x29
 8014d66:	f240 80af 	bls.w	8014ec8 <uxr_write_framed_msg+0x248>
 8014d6a:	2500      	movs	r5, #0
 8014d6c:	e000      	b.n	8014d70 <uxr_write_framed_msg+0xf0>
 8014d6e:	b160      	cbz	r0, 8014d8a <uxr_write_framed_msg+0x10a>
 8014d70:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014d74:	1b52      	subs	r2, r2, r5
 8014d76:	465b      	mov	r3, fp
 8014d78:	4421      	add	r1, r4
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	47b0      	blx	r6
 8014d7e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014d82:	4405      	add	r5, r0
 8014d84:	4295      	cmp	r5, r2
 8014d86:	d3f2      	bcc.n	8014d6e <uxr_write_framed_msg+0xee>
 8014d88:	d003      	beq.n	8014d92 <uxr_write_framed_msg+0x112>
 8014d8a:	2000      	movs	r0, #0
 8014d8c:	b003      	add	sp, #12
 8014d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d92:	fa5f f18a 	uxtb.w	r1, sl
 8014d96:	f04f 0300 	mov.w	r3, #0
 8014d9a:	2901      	cmp	r1, #1
 8014d9c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014da0:	f04f 0200 	mov.w	r2, #0
 8014da4:	f200 8090 	bhi.w	8014ec8 <uxr_write_framed_msg+0x248>
 8014da8:	1c51      	adds	r1, r2, #1
 8014daa:	b2c9      	uxtb	r1, r1
 8014dac:	2929      	cmp	r1, #41	@ 0x29
 8014dae:	d8dc      	bhi.n	8014d6a <uxr_write_framed_msg+0xea>
 8014db0:	18a5      	adds	r5, r4, r2
 8014db2:	4421      	add	r1, r4
 8014db4:	3202      	adds	r2, #2
 8014db6:	f088 0820 	eor.w	r8, r8, #32
 8014dba:	4648      	mov	r0, r9
 8014dbc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014dc0:	b2d2      	uxtb	r2, r2
 8014dc2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014dc6:	f04f 0901 	mov.w	r9, #1
 8014dca:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014dce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	f040 8085 	bne.w	8014ee2 <uxr_write_framed_msg+0x262>
 8014dd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014ddc:	e7bc      	b.n	8014d58 <uxr_write_framed_msg+0xd8>
 8014dde:	4611      	mov	r1, r2
 8014de0:	f04f 0c03 	mov.w	ip, #3
 8014de4:	2204      	movs	r2, #4
 8014de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014de8:	4421      	add	r1, r4
 8014dea:	b2dd      	uxtb	r5, r3
 8014dec:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014df0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014df4:	44a4      	add	ip, r4
 8014df6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014dfa:	f080 0020 	eor.w	r0, r0, #32
 8014dfe:	2901      	cmp	r1, #1
 8014e00:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014e04:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e08:	f63f af66 	bhi.w	8014cd8 <uxr_write_framed_msg+0x58>
 8014e0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e0e:	18a0      	adds	r0, r4, r2
 8014e10:	f085 0520 	eor.w	r5, r5, #32
 8014e14:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014e1c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014e20:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014e24:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014e28:	3202      	adds	r2, #2
 8014e2a:	2801      	cmp	r0, #1
 8014e2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e30:	f63f af60 	bhi.w	8014cf4 <uxr_write_framed_msg+0x74>
 8014e34:	1c50      	adds	r0, r2, #1
 8014e36:	18a5      	adds	r5, r4, r2
 8014e38:	fa54 f080 	uxtab	r0, r4, r0
 8014e3c:	3202      	adds	r2, #2
 8014e3e:	f081 0120 	eor.w	r1, r1, #32
 8014e42:	b2d2      	uxtb	r2, r2
 8014e44:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e48:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014e4c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014e50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	f47f af57 	bne.w	8014d08 <uxr_write_framed_msg+0x88>
 8014e5a:	9301      	str	r3, [sp, #4]
 8014e5c:	4698      	mov	r8, r3
 8014e5e:	e779      	b.n	8014d54 <uxr_write_framed_msg+0xd4>
 8014e60:	2500      	movs	r5, #0
 8014e62:	e001      	b.n	8014e68 <uxr_write_framed_msg+0x1e8>
 8014e64:	2800      	cmp	r0, #0
 8014e66:	d090      	beq.n	8014d8a <uxr_write_framed_msg+0x10a>
 8014e68:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014e6c:	1b52      	subs	r2, r2, r5
 8014e6e:	465b      	mov	r3, fp
 8014e70:	4421      	add	r1, r4
 8014e72:	4638      	mov	r0, r7
 8014e74:	47b0      	blx	r6
 8014e76:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014e7a:	4405      	add	r5, r0
 8014e7c:	4295      	cmp	r5, r2
 8014e7e:	d3f1      	bcc.n	8014e64 <uxr_write_framed_msg+0x1e4>
 8014e80:	d183      	bne.n	8014d8a <uxr_write_framed_msg+0x10a>
 8014e82:	f04f 0300 	mov.w	r3, #0
 8014e86:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014e8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e8c:	4543      	cmp	r3, r8
 8014e8e:	d964      	bls.n	8014f5a <uxr_write_framed_msg+0x2da>
 8014e90:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014e94:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014e98:	2901      	cmp	r1, #1
 8014e9a:	f04f 0200 	mov.w	r2, #0
 8014e9e:	f63f af3d 	bhi.w	8014d1c <uxr_write_framed_msg+0x9c>
 8014ea2:	1c51      	adds	r1, r2, #1
 8014ea4:	b2c9      	uxtb	r1, r1
 8014ea6:	2929      	cmp	r1, #41	@ 0x29
 8014ea8:	d8da      	bhi.n	8014e60 <uxr_write_framed_msg+0x1e0>
 8014eaa:	18a0      	adds	r0, r4, r2
 8014eac:	4421      	add	r1, r4
 8014eae:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014eb2:	3202      	adds	r2, #2
 8014eb4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014eb8:	b2d2      	uxtb	r2, r2
 8014eba:	f083 0020 	eor.w	r0, r3, #32
 8014ebe:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014ec2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ec6:	e733      	b.n	8014d30 <uxr_write_framed_msg+0xb0>
 8014ec8:	18a1      	adds	r1, r4, r2
 8014eca:	3201      	adds	r2, #1
 8014ecc:	4648      	mov	r0, r9
 8014ece:	b2d2      	uxtb	r2, r2
 8014ed0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014ed4:	f04f 0901 	mov.w	r9, #1
 8014ed8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014edc:	2800      	cmp	r0, #0
 8014ede:	f43f af7b 	beq.w	8014dd8 <uxr_write_framed_msg+0x158>
 8014ee2:	2500      	movs	r5, #0
 8014ee4:	e002      	b.n	8014eec <uxr_write_framed_msg+0x26c>
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	f43f af4f 	beq.w	8014d8a <uxr_write_framed_msg+0x10a>
 8014eec:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014ef0:	1b52      	subs	r2, r2, r5
 8014ef2:	465b      	mov	r3, fp
 8014ef4:	4421      	add	r1, r4
 8014ef6:	4638      	mov	r0, r7
 8014ef8:	47b0      	blx	r6
 8014efa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014efe:	4405      	add	r5, r0
 8014f00:	4295      	cmp	r5, r2
 8014f02:	d3f0      	bcc.n	8014ee6 <uxr_write_framed_msg+0x266>
 8014f04:	f47f af41 	bne.w	8014d8a <uxr_write_framed_msg+0x10a>
 8014f08:	2300      	movs	r3, #0
 8014f0a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f10:	b298      	uxth	r0, r3
 8014f12:	b003      	add	sp, #12
 8014f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f18:	217d      	movs	r1, #125	@ 0x7d
 8014f1a:	f082 0220 	eor.w	r2, r2, #32
 8014f1e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014f22:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014f26:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014f2a:	2901      	cmp	r1, #1
 8014f2c:	f04f 0203 	mov.w	r2, #3
 8014f30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f34:	d804      	bhi.n	8014f40 <uxr_write_framed_msg+0x2c0>
 8014f36:	4611      	mov	r1, r2
 8014f38:	f04f 0c04 	mov.w	ip, #4
 8014f3c:	2205      	movs	r2, #5
 8014f3e:	e752      	b.n	8014de6 <uxr_write_framed_msg+0x166>
 8014f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f42:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014f46:	b2dd      	uxtb	r5, r3
 8014f48:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014f4c:	2204      	movs	r2, #4
 8014f4e:	2901      	cmp	r1, #1
 8014f50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f54:	f63f aec0 	bhi.w	8014cd8 <uxr_write_framed_msg+0x58>
 8014f58:	e758      	b.n	8014e0c <uxr_write_framed_msg+0x18c>
 8014f5a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014f5e:	fa5f f889 	uxtb.w	r8, r9
 8014f62:	9301      	str	r3, [sp, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	e6f5      	b.n	8014d54 <uxr_write_framed_msg+0xd4>
 8014f68:	08017f70 	.word	0x08017f70

08014f6c <uxr_framing_read_transport>:
 8014f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f70:	4604      	mov	r4, r0
 8014f72:	b083      	sub	sp, #12
 8014f74:	461f      	mov	r7, r3
 8014f76:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014f7a:	4689      	mov	r9, r1
 8014f7c:	4692      	mov	sl, r2
 8014f7e:	f7f9 f831 	bl	800dfe4 <uxr_millis>
 8014f82:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014f86:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014f8a:	42b3      	cmp	r3, r6
 8014f8c:	4680      	mov	r8, r0
 8014f8e:	d061      	beq.n	8015054 <uxr_framing_read_transport+0xe8>
 8014f90:	d81c      	bhi.n	8014fcc <uxr_framing_read_transport+0x60>
 8014f92:	1e75      	subs	r5, r6, #1
 8014f94:	1aed      	subs	r5, r5, r3
 8014f96:	b2ed      	uxtb	r5, r5
 8014f98:	2600      	movs	r6, #0
 8014f9a:	455d      	cmp	r5, fp
 8014f9c:	d81f      	bhi.n	8014fde <uxr_framing_read_transport+0x72>
 8014f9e:	19ab      	adds	r3, r5, r6
 8014fa0:	455b      	cmp	r3, fp
 8014fa2:	bf84      	itt	hi
 8014fa4:	ebab 0605 	subhi.w	r6, fp, r5
 8014fa8:	b2f6      	uxtbhi	r6, r6
 8014faa:	b9ed      	cbnz	r5, 8014fe8 <uxr_framing_read_transport+0x7c>
 8014fac:	f04f 0b00 	mov.w	fp, #0
 8014fb0:	f7f9 f818 	bl	800dfe4 <uxr_millis>
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	eba0 0808 	sub.w	r8, r0, r8
 8014fba:	eba3 0308 	sub.w	r3, r3, r8
 8014fbe:	4658      	mov	r0, fp
 8014fc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014fc4:	603b      	str	r3, [r7, #0]
 8014fc6:	b003      	add	sp, #12
 8014fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fcc:	2e00      	cmp	r6, #0
 8014fce:	d049      	beq.n	8015064 <uxr_framing_read_transport+0xf8>
 8014fd0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014fd4:	b2ed      	uxtb	r5, r5
 8014fd6:	3e01      	subs	r6, #1
 8014fd8:	455d      	cmp	r5, fp
 8014fda:	b2f6      	uxtb	r6, r6
 8014fdc:	d9df      	bls.n	8014f9e <uxr_framing_read_transport+0x32>
 8014fde:	fa5f f58b 	uxtb.w	r5, fp
 8014fe2:	2600      	movs	r6, #0
 8014fe4:	2d00      	cmp	r5, #0
 8014fe6:	d0e1      	beq.n	8014fac <uxr_framing_read_transport+0x40>
 8014fe8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014fec:	3102      	adds	r1, #2
 8014fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ff0:	9300      	str	r3, [sp, #0]
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	4421      	add	r1, r4
 8014ff6:	462a      	mov	r2, r5
 8014ff8:	4650      	mov	r0, sl
 8014ffa:	47c8      	blx	r9
 8014ffc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015000:	4a1a      	ldr	r2, [pc, #104]	@ (801506c <uxr_framing_read_transport+0x100>)
 8015002:	4403      	add	r3, r0
 8015004:	0859      	lsrs	r1, r3, #1
 8015006:	fba2 2101 	umull	r2, r1, r2, r1
 801500a:	0889      	lsrs	r1, r1, #2
 801500c:	222a      	movs	r2, #42	@ 0x2a
 801500e:	fb02 3111 	mls	r1, r2, r1, r3
 8015012:	4683      	mov	fp, r0
 8015014:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015018:	2800      	cmp	r0, #0
 801501a:	d0c7      	beq.n	8014fac <uxr_framing_read_transport+0x40>
 801501c:	42a8      	cmp	r0, r5
 801501e:	d1c7      	bne.n	8014fb0 <uxr_framing_read_transport+0x44>
 8015020:	2e00      	cmp	r6, #0
 8015022:	d0c5      	beq.n	8014fb0 <uxr_framing_read_transport+0x44>
 8015024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	3102      	adds	r1, #2
 801502a:	4632      	mov	r2, r6
 801502c:	4421      	add	r1, r4
 801502e:	2300      	movs	r3, #0
 8015030:	4650      	mov	r0, sl
 8015032:	47c8      	blx	r9
 8015034:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015038:	4a0c      	ldr	r2, [pc, #48]	@ (801506c <uxr_framing_read_transport+0x100>)
 801503a:	180b      	adds	r3, r1, r0
 801503c:	0859      	lsrs	r1, r3, #1
 801503e:	fba2 1201 	umull	r1, r2, r2, r1
 8015042:	0892      	lsrs	r2, r2, #2
 8015044:	212a      	movs	r1, #42	@ 0x2a
 8015046:	fb01 3312 	mls	r3, r1, r2, r3
 801504a:	eb00 0b05 	add.w	fp, r0, r5
 801504e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015052:	e7ad      	b.n	8014fb0 <uxr_framing_read_transport+0x44>
 8015054:	2600      	movs	r6, #0
 8015056:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801505a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801505c:	d9bf      	bls.n	8014fde <uxr_framing_read_transport+0x72>
 801505e:	2102      	movs	r1, #2
 8015060:	2529      	movs	r5, #41	@ 0x29
 8015062:	e7c4      	b.n	8014fee <uxr_framing_read_transport+0x82>
 8015064:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015068:	b2ed      	uxtb	r5, r5
 801506a:	e796      	b.n	8014f9a <uxr_framing_read_transport+0x2e>
 801506c:	30c30c31 	.word	0x30c30c31

08015070 <uxr_read_framed_msg>:
 8015070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015074:	461e      	mov	r6, r3
 8015076:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801507a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801507e:	429d      	cmp	r5, r3
 8015080:	b083      	sub	sp, #12
 8015082:	4604      	mov	r4, r0
 8015084:	4688      	mov	r8, r1
 8015086:	4691      	mov	r9, r2
 8015088:	f000 8188 	beq.w	801539c <uxr_read_framed_msg+0x32c>
 801508c:	7823      	ldrb	r3, [r4, #0]
 801508e:	4dc1      	ldr	r5, [pc, #772]	@ (8015394 <uxr_read_framed_msg+0x324>)
 8015090:	4fc1      	ldr	r7, [pc, #772]	@ (8015398 <uxr_read_framed_msg+0x328>)
 8015092:	2b07      	cmp	r3, #7
 8015094:	d8fd      	bhi.n	8015092 <uxr_read_framed_msg+0x22>
 8015096:	e8df f013 	tbh	[pc, r3, lsl #1]
 801509a:	0115      	.short	0x0115
 801509c:	00d600f6 	.word	0x00d600f6
 80150a0:	009000b9 	.word	0x009000b9
 80150a4:	0030004d 	.word	0x0030004d
 80150a8:	0008      	.short	0x0008
 80150aa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80150ae:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80150b2:	4299      	cmp	r1, r3
 80150b4:	f000 814a 	beq.w	801534c <uxr_read_framed_msg+0x2dc>
 80150b8:	18e2      	adds	r2, r4, r3
 80150ba:	7892      	ldrb	r2, [r2, #2]
 80150bc:	2a7d      	cmp	r2, #125	@ 0x7d
 80150be:	f000 8199 	beq.w	80153f4 <uxr_read_framed_msg+0x384>
 80150c2:	3301      	adds	r3, #1
 80150c4:	0858      	lsrs	r0, r3, #1
 80150c6:	fba5 1000 	umull	r1, r0, r5, r0
 80150ca:	0880      	lsrs	r0, r0, #2
 80150cc:	212a      	movs	r1, #42	@ 0x2a
 80150ce:	fb01 3310 	mls	r3, r1, r0, r3
 80150d2:	2a7e      	cmp	r2, #126	@ 0x7e
 80150d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150d8:	f000 8252 	beq.w	8015580 <uxr_read_framed_msg+0x510>
 80150dc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80150de:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80150e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	2200      	movs	r2, #0
 80150e8:	4299      	cmp	r1, r3
 80150ea:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80150ec:	7022      	strb	r2, [r4, #0]
 80150ee:	f000 8179 	beq.w	80153e4 <uxr_read_framed_msg+0x374>
 80150f2:	2000      	movs	r0, #0
 80150f4:	b003      	add	sp, #12
 80150f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150fa:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80150fe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015102:	4299      	cmp	r1, r3
 8015104:	f000 8131 	beq.w	801536a <uxr_read_framed_msg+0x2fa>
 8015108:	18e2      	adds	r2, r4, r3
 801510a:	7890      	ldrb	r0, [r2, #2]
 801510c:	287d      	cmp	r0, #125	@ 0x7d
 801510e:	f000 8190 	beq.w	8015432 <uxr_read_framed_msg+0x3c2>
 8015112:	3301      	adds	r3, #1
 8015114:	085a      	lsrs	r2, r3, #1
 8015116:	fba5 1202 	umull	r1, r2, r5, r2
 801511a:	0892      	lsrs	r2, r2, #2
 801511c:	212a      	movs	r1, #42	@ 0x2a
 801511e:	fb01 3312 	mls	r3, r1, r2, r3
 8015122:	287e      	cmp	r0, #126	@ 0x7e
 8015124:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015128:	f000 821a 	beq.w	8015560 <uxr_read_framed_msg+0x4f0>
 801512c:	2307      	movs	r3, #7
 801512e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015130:	7023      	strb	r3, [r4, #0]
 8015132:	e7ae      	b.n	8015092 <uxr_read_framed_msg+0x22>
 8015134:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015136:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801513a:	459e      	cmp	lr, r3
 801513c:	d938      	bls.n	80151b0 <uxr_read_framed_msg+0x140>
 801513e:	ee07 8a90 	vmov	s15, r8
 8015142:	212a      	movs	r1, #42	@ 0x2a
 8015144:	e020      	b.n	8015188 <uxr_read_framed_msg+0x118>
 8015146:	f89b c002 	ldrb.w	ip, [fp, #2]
 801514a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801514e:	f000 80d4 	beq.w	80152fa <uxr_read_framed_msg+0x28a>
 8015152:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015156:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801515a:	f000 8219 	beq.w	8015590 <uxr_read_framed_msg+0x520>
 801515e:	f806 c003 	strb.w	ip, [r6, r3]
 8015162:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015166:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015168:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801516c:	ea8a 000c 	eor.w	r0, sl, ip
 8015170:	b2c0      	uxtb	r0, r0
 8015172:	3301      	adds	r3, #1
 8015174:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015178:	b29b      	uxth	r3, r3
 801517a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801517e:	4573      	cmp	r3, lr
 8015180:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015182:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015184:	f080 8120 	bcs.w	80153c8 <uxr_read_framed_msg+0x358>
 8015188:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801518c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015190:	f100 0c01 	add.w	ip, r0, #1
 8015194:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015198:	fba5 8202 	umull	r8, r2, r5, r2
 801519c:	0892      	lsrs	r2, r2, #2
 801519e:	4582      	cmp	sl, r0
 80151a0:	eb04 0b00 	add.w	fp, r4, r0
 80151a4:	fb01 c212 	mls	r2, r1, r2, ip
 80151a8:	d1cd      	bne.n	8015146 <uxr_read_framed_msg+0xd6>
 80151aa:	ee17 8a90 	vmov	r8, s15
 80151ae:	459e      	cmp	lr, r3
 80151b0:	f040 8111 	bne.w	80153d6 <uxr_read_framed_msg+0x366>
 80151b4:	2306      	movs	r3, #6
 80151b6:	7023      	strb	r3, [r4, #0]
 80151b8:	e76b      	b.n	8015092 <uxr_read_framed_msg+0x22>
 80151ba:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80151be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80151c2:	4298      	cmp	r0, r3
 80151c4:	f000 80c2 	beq.w	801534c <uxr_read_framed_msg+0x2dc>
 80151c8:	18e2      	adds	r2, r4, r3
 80151ca:	7891      	ldrb	r1, [r2, #2]
 80151cc:	297d      	cmp	r1, #125	@ 0x7d
 80151ce:	f000 814c 	beq.w	801546a <uxr_read_framed_msg+0x3fa>
 80151d2:	3301      	adds	r3, #1
 80151d4:	085a      	lsrs	r2, r3, #1
 80151d6:	fba5 0202 	umull	r0, r2, r5, r2
 80151da:	0892      	lsrs	r2, r2, #2
 80151dc:	202a      	movs	r0, #42	@ 0x2a
 80151de:	fb00 3312 	mls	r3, r0, r2, r3
 80151e2:	297e      	cmp	r1, #126	@ 0x7e
 80151e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80151e8:	f000 81ca 	beq.w	8015580 <uxr_read_framed_msg+0x510>
 80151ec:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80151ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80151f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	2000      	movs	r0, #0
 80151f8:	428b      	cmp	r3, r1
 80151fa:	8623      	strh	r3, [r4, #48]	@ 0x30
 80151fc:	8660      	strh	r0, [r4, #50]	@ 0x32
 80151fe:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8015200:	f240 80df 	bls.w	80153c2 <uxr_read_framed_msg+0x352>
 8015204:	7020      	strb	r0, [r4, #0]
 8015206:	b003      	add	sp, #12
 8015208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015210:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015214:	4299      	cmp	r1, r3
 8015216:	f000 80a8 	beq.w	801536a <uxr_read_framed_msg+0x2fa>
 801521a:	18e2      	adds	r2, r4, r3
 801521c:	7890      	ldrb	r0, [r2, #2]
 801521e:	287d      	cmp	r0, #125	@ 0x7d
 8015220:	f000 8164 	beq.w	80154ec <uxr_read_framed_msg+0x47c>
 8015224:	3301      	adds	r3, #1
 8015226:	085a      	lsrs	r2, r3, #1
 8015228:	fba5 1202 	umull	r1, r2, r5, r2
 801522c:	0892      	lsrs	r2, r2, #2
 801522e:	212a      	movs	r1, #42	@ 0x2a
 8015230:	fb01 3312 	mls	r3, r1, r2, r3
 8015234:	287e      	cmp	r0, #126	@ 0x7e
 8015236:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801523a:	f000 8191 	beq.w	8015560 <uxr_read_framed_msg+0x4f0>
 801523e:	2304      	movs	r3, #4
 8015240:	8620      	strh	r0, [r4, #48]	@ 0x30
 8015242:	7023      	strb	r3, [r4, #0]
 8015244:	e725      	b.n	8015092 <uxr_read_framed_msg+0x22>
 8015246:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801524a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801524e:	4290      	cmp	r0, r2
 8015250:	f000 80b3 	beq.w	80153ba <uxr_read_framed_msg+0x34a>
 8015254:	18a3      	adds	r3, r4, r2
 8015256:	7899      	ldrb	r1, [r3, #2]
 8015258:	297d      	cmp	r1, #125	@ 0x7d
 801525a:	f000 8164 	beq.w	8015526 <uxr_read_framed_msg+0x4b6>
 801525e:	3201      	adds	r2, #1
 8015260:	0850      	lsrs	r0, r2, #1
 8015262:	fba5 3000 	umull	r3, r0, r5, r0
 8015266:	0880      	lsrs	r0, r0, #2
 8015268:	232a      	movs	r3, #42	@ 0x2a
 801526a:	fb03 2210 	mls	r2, r3, r0, r2
 801526e:	297e      	cmp	r1, #126	@ 0x7e
 8015270:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015274:	f000 8188 	beq.w	8015588 <uxr_read_framed_msg+0x518>
 8015278:	7863      	ldrb	r3, [r4, #1]
 801527a:	428b      	cmp	r3, r1
 801527c:	bf0c      	ite	eq
 801527e:	2303      	moveq	r3, #3
 8015280:	2300      	movne	r3, #0
 8015282:	7023      	strb	r3, [r4, #0]
 8015284:	e705      	b.n	8015092 <uxr_read_framed_msg+0x22>
 8015286:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801528a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801528e:	2200      	movs	r2, #0
 8015290:	4299      	cmp	r1, r3
 8015292:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8015296:	d06c      	beq.n	8015372 <uxr_read_framed_msg+0x302>
 8015298:	18e2      	adds	r2, r4, r3
 801529a:	7890      	ldrb	r0, [r2, #2]
 801529c:	287d      	cmp	r0, #125	@ 0x7d
 801529e:	f000 8101 	beq.w	80154a4 <uxr_read_framed_msg+0x434>
 80152a2:	3301      	adds	r3, #1
 80152a4:	085a      	lsrs	r2, r3, #1
 80152a6:	fba5 1202 	umull	r1, r2, r5, r2
 80152aa:	0892      	lsrs	r2, r2, #2
 80152ac:	212a      	movs	r1, #42	@ 0x2a
 80152ae:	fb01 3312 	mls	r3, r1, r2, r3
 80152b2:	287e      	cmp	r0, #126	@ 0x7e
 80152b4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80152b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80152bc:	d059      	beq.n	8015372 <uxr_read_framed_msg+0x302>
 80152be:	2302      	movs	r3, #2
 80152c0:	7023      	strb	r3, [r4, #0]
 80152c2:	e6e6      	b.n	8015092 <uxr_read_framed_msg+0x22>
 80152c4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80152c8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80152cc:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80152d0:	1c51      	adds	r1, r2, #1
 80152d2:	084b      	lsrs	r3, r1, #1
 80152d4:	fba5 c303 	umull	ip, r3, r5, r3
 80152d8:	089b      	lsrs	r3, r3, #2
 80152da:	fb0e 1313 	mls	r3, lr, r3, r1
 80152de:	4592      	cmp	sl, r2
 80152e0:	eb04 0002 	add.w	r0, r4, r2
 80152e4:	b2da      	uxtb	r2, r3
 80152e6:	f43f af04 	beq.w	80150f2 <uxr_read_framed_msg+0x82>
 80152ea:	7883      	ldrb	r3, [r0, #2]
 80152ec:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80152f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80152f2:	d1ed      	bne.n	80152d0 <uxr_read_framed_msg+0x260>
 80152f4:	2301      	movs	r3, #1
 80152f6:	7023      	strb	r3, [r4, #0]
 80152f8:	e6cb      	b.n	8015092 <uxr_read_framed_msg+0x22>
 80152fa:	f100 0c01 	add.w	ip, r0, #1
 80152fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015302:	fba5 8202 	umull	r8, r2, r5, r2
 8015306:	0892      	lsrs	r2, r2, #2
 8015308:	fb01 c212 	mls	r2, r1, r2, ip
 801530c:	eb04 0c02 	add.w	ip, r4, r2
 8015310:	b2d2      	uxtb	r2, r2
 8015312:	4592      	cmp	sl, r2
 8015314:	f100 0002 	add.w	r0, r0, #2
 8015318:	f43f af47 	beq.w	80151aa <uxr_read_framed_msg+0x13a>
 801531c:	0842      	lsrs	r2, r0, #1
 801531e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8015322:	fba5 8202 	umull	r8, r2, r5, r2
 8015326:	0892      	lsrs	r2, r2, #2
 8015328:	fb01 0012 	mls	r0, r1, r2, r0
 801532c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8015330:	f08a 0c20 	eor.w	ip, sl, #32
 8015334:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8015338:	f47f af11 	bne.w	801515e <uxr_read_framed_msg+0xee>
 801533c:	459e      	cmp	lr, r3
 801533e:	ee17 8a90 	vmov	r8, s15
 8015342:	f43f af37 	beq.w	80151b4 <uxr_read_framed_msg+0x144>
 8015346:	2301      	movs	r3, #1
 8015348:	7023      	strb	r3, [r4, #0]
 801534a:	e6a2      	b.n	8015092 <uxr_read_framed_msg+0x22>
 801534c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	2301      	movs	r3, #1
 8015352:	9301      	str	r3, [sp, #4]
 8015354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015356:	464a      	mov	r2, r9
 8015358:	4641      	mov	r1, r8
 801535a:	4620      	mov	r0, r4
 801535c:	f7ff fe06 	bl	8014f6c <uxr_framing_read_transport>
 8015360:	2800      	cmp	r0, #0
 8015362:	f43f aec6 	beq.w	80150f2 <uxr_read_framed_msg+0x82>
 8015366:	7823      	ldrb	r3, [r4, #0]
 8015368:	e693      	b.n	8015092 <uxr_read_framed_msg+0x22>
 801536a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801536c:	9300      	str	r3, [sp, #0]
 801536e:	2302      	movs	r3, #2
 8015370:	e7ef      	b.n	8015352 <uxr_read_framed_msg+0x2e2>
 8015372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	2304      	movs	r3, #4
 8015378:	9301      	str	r3, [sp, #4]
 801537a:	464a      	mov	r2, r9
 801537c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801537e:	4641      	mov	r1, r8
 8015380:	4620      	mov	r0, r4
 8015382:	f7ff fdf3 	bl	8014f6c <uxr_framing_read_transport>
 8015386:	2800      	cmp	r0, #0
 8015388:	d1ed      	bne.n	8015366 <uxr_read_framed_msg+0x2f6>
 801538a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801538e:	2b7e      	cmp	r3, #126	@ 0x7e
 8015390:	d0e9      	beq.n	8015366 <uxr_read_framed_msg+0x2f6>
 8015392:	e6ae      	b.n	80150f2 <uxr_read_framed_msg+0x82>
 8015394:	30c30c31 	.word	0x30c30c31
 8015398:	08017f70 	.word	0x08017f70
 801539c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	2305      	movs	r3, #5
 80153a2:	9301      	str	r3, [sp, #4]
 80153a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153a6:	f7ff fde1 	bl	8014f6c <uxr_framing_read_transport>
 80153aa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80153ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80153b2:	429a      	cmp	r2, r3
 80153b4:	f43f ae9d 	beq.w	80150f2 <uxr_read_framed_msg+0x82>
 80153b8:	e668      	b.n	801508c <uxr_read_framed_msg+0x1c>
 80153ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153bc:	9300      	str	r3, [sp, #0]
 80153be:	2303      	movs	r3, #3
 80153c0:	e7c7      	b.n	8015352 <uxr_read_framed_msg+0x2e2>
 80153c2:	2305      	movs	r3, #5
 80153c4:	7023      	strb	r3, [r4, #0]
 80153c6:	e664      	b.n	8015092 <uxr_read_framed_msg+0x22>
 80153c8:	ee17 8a90 	vmov	r8, s15
 80153cc:	f43f aef2 	beq.w	80151b4 <uxr_read_framed_msg+0x144>
 80153d0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80153d4:	d08e      	beq.n	80152f4 <uxr_read_framed_msg+0x284>
 80153d6:	ebae 0303 	sub.w	r3, lr, r3
 80153da:	3302      	adds	r3, #2
 80153dc:	9301      	str	r3, [sp, #4]
 80153de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	e7b7      	b.n	8015354 <uxr_read_framed_msg+0x2e4>
 80153e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80153e6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80153ea:	7013      	strb	r3, [r2, #0]
 80153ec:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80153ee:	b003      	add	sp, #12
 80153f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f4:	f103 0c01 	add.w	ip, r3, #1
 80153f8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80153fc:	fba5 0202 	umull	r0, r2, r5, r2
 8015400:	0892      	lsrs	r2, r2, #2
 8015402:	202a      	movs	r0, #42	@ 0x2a
 8015404:	fb00 c212 	mls	r2, r0, r2, ip
 8015408:	fa5f fc82 	uxtb.w	ip, r2
 801540c:	4561      	cmp	r1, ip
 801540e:	d09d      	beq.n	801534c <uxr_read_framed_msg+0x2dc>
 8015410:	3302      	adds	r3, #2
 8015412:	4422      	add	r2, r4
 8015414:	0859      	lsrs	r1, r3, #1
 8015416:	7892      	ldrb	r2, [r2, #2]
 8015418:	fba5 c101 	umull	ip, r1, r5, r1
 801541c:	0889      	lsrs	r1, r1, #2
 801541e:	fb00 3311 	mls	r3, r0, r1, r3
 8015422:	2a7e      	cmp	r2, #126	@ 0x7e
 8015424:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015428:	f000 80aa 	beq.w	8015580 <uxr_read_framed_msg+0x510>
 801542c:	f082 0220 	eor.w	r2, r2, #32
 8015430:	e654      	b.n	80150dc <uxr_read_framed_msg+0x6c>
 8015432:	1c58      	adds	r0, r3, #1
 8015434:	0842      	lsrs	r2, r0, #1
 8015436:	fba5 c202 	umull	ip, r2, r5, r2
 801543a:	0892      	lsrs	r2, r2, #2
 801543c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015440:	fb0c 0212 	mls	r2, ip, r2, r0
 8015444:	b2d0      	uxtb	r0, r2
 8015446:	4281      	cmp	r1, r0
 8015448:	d08f      	beq.n	801536a <uxr_read_framed_msg+0x2fa>
 801544a:	4422      	add	r2, r4
 801544c:	3302      	adds	r3, #2
 801544e:	7890      	ldrb	r0, [r2, #2]
 8015450:	085a      	lsrs	r2, r3, #1
 8015452:	fba5 1202 	umull	r1, r2, r5, r2
 8015456:	0892      	lsrs	r2, r2, #2
 8015458:	fb0c 3312 	mls	r3, ip, r2, r3
 801545c:	287e      	cmp	r0, #126	@ 0x7e
 801545e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015462:	d07d      	beq.n	8015560 <uxr_read_framed_msg+0x4f0>
 8015464:	f080 0020 	eor.w	r0, r0, #32
 8015468:	e660      	b.n	801512c <uxr_read_framed_msg+0xbc>
 801546a:	1c59      	adds	r1, r3, #1
 801546c:	084a      	lsrs	r2, r1, #1
 801546e:	fba5 c202 	umull	ip, r2, r5, r2
 8015472:	0892      	lsrs	r2, r2, #2
 8015474:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015478:	fb0c 1212 	mls	r2, ip, r2, r1
 801547c:	b2d1      	uxtb	r1, r2
 801547e:	4288      	cmp	r0, r1
 8015480:	f43f af64 	beq.w	801534c <uxr_read_framed_msg+0x2dc>
 8015484:	4422      	add	r2, r4
 8015486:	3302      	adds	r3, #2
 8015488:	7891      	ldrb	r1, [r2, #2]
 801548a:	085a      	lsrs	r2, r3, #1
 801548c:	fba5 0202 	umull	r0, r2, r5, r2
 8015490:	0892      	lsrs	r2, r2, #2
 8015492:	fb0c 3312 	mls	r3, ip, r2, r3
 8015496:	297e      	cmp	r1, #126	@ 0x7e
 8015498:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801549c:	d070      	beq.n	8015580 <uxr_read_framed_msg+0x510>
 801549e:	f081 0120 	eor.w	r1, r1, #32
 80154a2:	e6a3      	b.n	80151ec <uxr_read_framed_msg+0x17c>
 80154a4:	f103 0c01 	add.w	ip, r3, #1
 80154a8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80154ac:	fba5 0202 	umull	r0, r2, r5, r2
 80154b0:	0892      	lsrs	r2, r2, #2
 80154b2:	202a      	movs	r0, #42	@ 0x2a
 80154b4:	fb00 c212 	mls	r2, r0, r2, ip
 80154b8:	fa5f fc82 	uxtb.w	ip, r2
 80154bc:	4561      	cmp	r1, ip
 80154be:	f43f af58 	beq.w	8015372 <uxr_read_framed_msg+0x302>
 80154c2:	4422      	add	r2, r4
 80154c4:	3302      	adds	r3, #2
 80154c6:	7891      	ldrb	r1, [r2, #2]
 80154c8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80154cc:	085a      	lsrs	r2, r3, #1
 80154ce:	fba5 c202 	umull	ip, r2, r5, r2
 80154d2:	0892      	lsrs	r2, r2, #2
 80154d4:	fb00 3312 	mls	r3, r0, r2, r3
 80154d8:	297e      	cmp	r1, #126	@ 0x7e
 80154da:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154de:	f43f af48 	beq.w	8015372 <uxr_read_framed_msg+0x302>
 80154e2:	f081 0120 	eor.w	r1, r1, #32
 80154e6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80154ea:	e6e8      	b.n	80152be <uxr_read_framed_msg+0x24e>
 80154ec:	1c58      	adds	r0, r3, #1
 80154ee:	0842      	lsrs	r2, r0, #1
 80154f0:	fba5 c202 	umull	ip, r2, r5, r2
 80154f4:	0892      	lsrs	r2, r2, #2
 80154f6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80154fa:	fb0c 0212 	mls	r2, ip, r2, r0
 80154fe:	b2d0      	uxtb	r0, r2
 8015500:	4281      	cmp	r1, r0
 8015502:	f43f af32 	beq.w	801536a <uxr_read_framed_msg+0x2fa>
 8015506:	4422      	add	r2, r4
 8015508:	3302      	adds	r3, #2
 801550a:	7890      	ldrb	r0, [r2, #2]
 801550c:	085a      	lsrs	r2, r3, #1
 801550e:	fba5 1202 	umull	r1, r2, r5, r2
 8015512:	0892      	lsrs	r2, r2, #2
 8015514:	fb0c 3312 	mls	r3, ip, r2, r3
 8015518:	287e      	cmp	r0, #126	@ 0x7e
 801551a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801551e:	d01f      	beq.n	8015560 <uxr_read_framed_msg+0x4f0>
 8015520:	f080 0020 	eor.w	r0, r0, #32
 8015524:	e68b      	b.n	801523e <uxr_read_framed_msg+0x1ce>
 8015526:	1c51      	adds	r1, r2, #1
 8015528:	084b      	lsrs	r3, r1, #1
 801552a:	fba5 c303 	umull	ip, r3, r5, r3
 801552e:	089b      	lsrs	r3, r3, #2
 8015530:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015534:	fb0c 1313 	mls	r3, ip, r3, r1
 8015538:	b2d9      	uxtb	r1, r3
 801553a:	4288      	cmp	r0, r1
 801553c:	f43f af3d 	beq.w	80153ba <uxr_read_framed_msg+0x34a>
 8015540:	3202      	adds	r2, #2
 8015542:	4423      	add	r3, r4
 8015544:	0850      	lsrs	r0, r2, #1
 8015546:	789b      	ldrb	r3, [r3, #2]
 8015548:	fba5 1000 	umull	r1, r0, r5, r0
 801554c:	0880      	lsrs	r0, r0, #2
 801554e:	fb0c 2210 	mls	r2, ip, r0, r2
 8015552:	2b7e      	cmp	r3, #126	@ 0x7e
 8015554:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015558:	d016      	beq.n	8015588 <uxr_read_framed_msg+0x518>
 801555a:	f083 0120 	eor.w	r1, r3, #32
 801555e:	e68b      	b.n	8015278 <uxr_read_framed_msg+0x208>
 8015560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015562:	9300      	str	r3, [sp, #0]
 8015564:	2302      	movs	r3, #2
 8015566:	9301      	str	r3, [sp, #4]
 8015568:	464a      	mov	r2, r9
 801556a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801556c:	4641      	mov	r1, r8
 801556e:	4620      	mov	r0, r4
 8015570:	f7ff fcfc 	bl	8014f6c <uxr_framing_read_transport>
 8015574:	2800      	cmp	r0, #0
 8015576:	f47f aef6 	bne.w	8015366 <uxr_read_framed_msg+0x2f6>
 801557a:	2301      	movs	r3, #1
 801557c:	7023      	strb	r3, [r4, #0]
 801557e:	e588      	b.n	8015092 <uxr_read_framed_msg+0x22>
 8015580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015582:	9300      	str	r3, [sp, #0]
 8015584:	2301      	movs	r3, #1
 8015586:	e7ee      	b.n	8015566 <uxr_read_framed_msg+0x4f6>
 8015588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801558a:	9300      	str	r3, [sp, #0]
 801558c:	2303      	movs	r3, #3
 801558e:	e7ea      	b.n	8015566 <uxr_read_framed_msg+0x4f6>
 8015590:	ee17 8a90 	vmov	r8, s15
 8015594:	e6ae      	b.n	80152f4 <uxr_read_framed_msg+0x284>
 8015596:	bf00      	nop

08015598 <rcl_get_default_domain_id>:
 8015598:	b530      	push	{r4, r5, lr}
 801559a:	b083      	sub	sp, #12
 801559c:	2300      	movs	r3, #0
 801559e:	9300      	str	r3, [sp, #0]
 80155a0:	b1d0      	cbz	r0, 80155d8 <rcl_get_default_domain_id+0x40>
 80155a2:	4604      	mov	r4, r0
 80155a4:	4669      	mov	r1, sp
 80155a6:	4815      	ldr	r0, [pc, #84]	@ (80155fc <rcl_get_default_domain_id+0x64>)
 80155a8:	f7fc fc12 	bl	8011dd0 <rcutils_get_env>
 80155ac:	4602      	mov	r2, r0
 80155ae:	b110      	cbz	r0, 80155b6 <rcl_get_default_domain_id+0x1e>
 80155b0:	2001      	movs	r0, #1
 80155b2:	b003      	add	sp, #12
 80155b4:	bd30      	pop	{r4, r5, pc}
 80155b6:	9b00      	ldr	r3, [sp, #0]
 80155b8:	b18b      	cbz	r3, 80155de <rcl_get_default_domain_id+0x46>
 80155ba:	7818      	ldrb	r0, [r3, #0]
 80155bc:	2800      	cmp	r0, #0
 80155be:	d0f8      	beq.n	80155b2 <rcl_get_default_domain_id+0x1a>
 80155c0:	a901      	add	r1, sp, #4
 80155c2:	4618      	mov	r0, r3
 80155c4:	9201      	str	r2, [sp, #4]
 80155c6:	f000 fe6d 	bl	80162a4 <strtoul>
 80155ca:	4605      	mov	r5, r0
 80155cc:	b150      	cbz	r0, 80155e4 <rcl_get_default_domain_id+0x4c>
 80155ce:	1c43      	adds	r3, r0, #1
 80155d0:	d00d      	beq.n	80155ee <rcl_get_default_domain_id+0x56>
 80155d2:	6025      	str	r5, [r4, #0]
 80155d4:	2000      	movs	r0, #0
 80155d6:	e7ec      	b.n	80155b2 <rcl_get_default_domain_id+0x1a>
 80155d8:	200b      	movs	r0, #11
 80155da:	b003      	add	sp, #12
 80155dc:	bd30      	pop	{r4, r5, pc}
 80155de:	4618      	mov	r0, r3
 80155e0:	b003      	add	sp, #12
 80155e2:	bd30      	pop	{r4, r5, pc}
 80155e4:	9b01      	ldr	r3, [sp, #4]
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d0f2      	beq.n	80155d2 <rcl_get_default_domain_id+0x3a>
 80155ec:	e7e0      	b.n	80155b0 <rcl_get_default_domain_id+0x18>
 80155ee:	f001 f893 	bl	8016718 <__errno>
 80155f2:	6803      	ldr	r3, [r0, #0]
 80155f4:	2b22      	cmp	r3, #34	@ 0x22
 80155f6:	d1ec      	bne.n	80155d2 <rcl_get_default_domain_id+0x3a>
 80155f8:	e7da      	b.n	80155b0 <rcl_get_default_domain_id+0x18>
 80155fa:	bf00      	nop
 80155fc:	08018170 	.word	0x08018170

08015600 <rcl_expand_topic_name>:
 8015600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	b08b      	sub	sp, #44	@ 0x2c
 8015606:	9306      	str	r3, [sp, #24]
 8015608:	2800      	cmp	r0, #0
 801560a:	f000 80ad 	beq.w	8015768 <rcl_expand_topic_name+0x168>
 801560e:	460e      	mov	r6, r1
 8015610:	2900      	cmp	r1, #0
 8015612:	f000 80a9 	beq.w	8015768 <rcl_expand_topic_name+0x168>
 8015616:	4617      	mov	r7, r2
 8015618:	2a00      	cmp	r2, #0
 801561a:	f000 80a5 	beq.w	8015768 <rcl_expand_topic_name+0x168>
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 80a2 	beq.w	8015768 <rcl_expand_topic_name+0x168>
 8015624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015626:	2b00      	cmp	r3, #0
 8015628:	f000 809e 	beq.w	8015768 <rcl_expand_topic_name+0x168>
 801562c:	2200      	movs	r2, #0
 801562e:	a909      	add	r1, sp, #36	@ 0x24
 8015630:	4680      	mov	r8, r0
 8015632:	f000 f9fb 	bl	8015a2c <rcl_validate_topic_name>
 8015636:	4604      	mov	r4, r0
 8015638:	2800      	cmp	r0, #0
 801563a:	f040 8096 	bne.w	801576a <rcl_expand_topic_name+0x16a>
 801563e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015640:	2b00      	cmp	r3, #0
 8015642:	f040 809a 	bne.w	801577a <rcl_expand_topic_name+0x17a>
 8015646:	4602      	mov	r2, r0
 8015648:	a909      	add	r1, sp, #36	@ 0x24
 801564a:	4630      	mov	r0, r6
 801564c:	f7fd f80e 	bl	801266c <rmw_validate_node_name>
 8015650:	2800      	cmp	r0, #0
 8015652:	f040 808e 	bne.w	8015772 <rcl_expand_topic_name+0x172>
 8015656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015658:	2a00      	cmp	r2, #0
 801565a:	f040 8093 	bne.w	8015784 <rcl_expand_topic_name+0x184>
 801565e:	a909      	add	r1, sp, #36	@ 0x24
 8015660:	4638      	mov	r0, r7
 8015662:	f7fc ffe5 	bl	8012630 <rmw_validate_namespace>
 8015666:	2800      	cmp	r0, #0
 8015668:	f040 8083 	bne.w	8015772 <rcl_expand_topic_name+0x172>
 801566c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801566e:	2c00      	cmp	r4, #0
 8015670:	f040 80ed 	bne.w	801584e <rcl_expand_topic_name+0x24e>
 8015674:	217b      	movs	r1, #123	@ 0x7b
 8015676:	4640      	mov	r0, r8
 8015678:	f000 ffc2 	bl	8016600 <strchr>
 801567c:	f898 3000 	ldrb.w	r3, [r8]
 8015680:	2b2f      	cmp	r3, #47	@ 0x2f
 8015682:	4605      	mov	r5, r0
 8015684:	f000 809e 	beq.w	80157c4 <rcl_expand_topic_name+0x1c4>
 8015688:	2b7e      	cmp	r3, #126	@ 0x7e
 801568a:	f040 80a2 	bne.w	80157d2 <rcl_expand_topic_name+0x1d2>
 801568e:	4638      	mov	r0, r7
 8015690:	f7ea fdb0 	bl	80001f4 <strlen>
 8015694:	4a82      	ldr	r2, [pc, #520]	@ (80158a0 <rcl_expand_topic_name+0x2a0>)
 8015696:	4b83      	ldr	r3, [pc, #524]	@ (80158a4 <rcl_expand_topic_name+0x2a4>)
 8015698:	2801      	cmp	r0, #1
 801569a:	bf18      	it	ne
 801569c:	4613      	movne	r3, r2
 801569e:	9302      	str	r3, [sp, #8]
 80156a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80156a8:	f108 0301 	add.w	r3, r8, #1
 80156ac:	9305      	str	r3, [sp, #20]
 80156ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80156b2:	9301      	str	r3, [sp, #4]
 80156b4:	ab14      	add	r3, sp, #80	@ 0x50
 80156b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156b8:	f7fc fba2 	bl	8011e00 <rcutils_format_string_limit>
 80156bc:	4682      	mov	sl, r0
 80156be:	2800      	cmp	r0, #0
 80156c0:	f000 80c7 	beq.w	8015852 <rcl_expand_topic_name+0x252>
 80156c4:	2d00      	cmp	r5, #0
 80156c6:	f000 80a2 	beq.w	801580e <rcl_expand_topic_name+0x20e>
 80156ca:	217b      	movs	r1, #123	@ 0x7b
 80156cc:	f000 ff98 	bl	8016600 <strchr>
 80156d0:	46d1      	mov	r9, sl
 80156d2:	4605      	mov	r5, r0
 80156d4:	9407      	str	r4, [sp, #28]
 80156d6:	46d3      	mov	fp, sl
 80156d8:	464c      	mov	r4, r9
 80156da:	2d00      	cmp	r5, #0
 80156dc:	f000 80be 	beq.w	801585c <rcl_expand_topic_name+0x25c>
 80156e0:	217d      	movs	r1, #125	@ 0x7d
 80156e2:	4620      	mov	r0, r4
 80156e4:	f000 ff8c 	bl	8016600 <strchr>
 80156e8:	eba0 0905 	sub.w	r9, r0, r5
 80156ec:	f109 0a01 	add.w	sl, r9, #1
 80156f0:	486d      	ldr	r0, [pc, #436]	@ (80158a8 <rcl_expand_topic_name+0x2a8>)
 80156f2:	4652      	mov	r2, sl
 80156f4:	4629      	mov	r1, r5
 80156f6:	f000 ff90 	bl	801661a <strncmp>
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d067      	beq.n	80157ce <rcl_expand_topic_name+0x1ce>
 80156fe:	486b      	ldr	r0, [pc, #428]	@ (80158ac <rcl_expand_topic_name+0x2ac>)
 8015700:	4652      	mov	r2, sl
 8015702:	4629      	mov	r1, r5
 8015704:	f000 ff89 	bl	801661a <strncmp>
 8015708:	b130      	cbz	r0, 8015718 <rcl_expand_topic_name+0x118>
 801570a:	4869      	ldr	r0, [pc, #420]	@ (80158b0 <rcl_expand_topic_name+0x2b0>)
 801570c:	4652      	mov	r2, sl
 801570e:	4629      	mov	r1, r5
 8015710:	f000 ff83 	bl	801661a <strncmp>
 8015714:	2800      	cmp	r0, #0
 8015716:	d137      	bne.n	8015788 <rcl_expand_topic_name+0x188>
 8015718:	46b9      	mov	r9, r7
 801571a:	ab16      	add	r3, sp, #88	@ 0x58
 801571c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015720:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015724:	ab14      	add	r3, sp, #80	@ 0x50
 8015726:	4628      	mov	r0, r5
 8015728:	cb0c      	ldmia	r3, {r2, r3}
 801572a:	4651      	mov	r1, sl
 801572c:	f7fc fca4 	bl	8012078 <rcutils_strndup>
 8015730:	4605      	mov	r5, r0
 8015732:	2800      	cmp	r0, #0
 8015734:	f000 809c 	beq.w	8015870 <rcl_expand_topic_name+0x270>
 8015738:	464a      	mov	r2, r9
 801573a:	4620      	mov	r0, r4
 801573c:	ab14      	add	r3, sp, #80	@ 0x50
 801573e:	4629      	mov	r1, r5
 8015740:	f7fc fb98 	bl	8011e74 <rcutils_repl_str>
 8015744:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015746:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015748:	4604      	mov	r4, r0
 801574a:	4628      	mov	r0, r5
 801574c:	4798      	blx	r3
 801574e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015750:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015752:	4658      	mov	r0, fp
 8015754:	4798      	blx	r3
 8015756:	2c00      	cmp	r4, #0
 8015758:	d07b      	beq.n	8015852 <rcl_expand_topic_name+0x252>
 801575a:	217b      	movs	r1, #123	@ 0x7b
 801575c:	4620      	mov	r0, r4
 801575e:	f000 ff4f 	bl	8016600 <strchr>
 8015762:	46a3      	mov	fp, r4
 8015764:	4605      	mov	r5, r0
 8015766:	e7b8      	b.n	80156da <rcl_expand_topic_name+0xda>
 8015768:	240b      	movs	r4, #11
 801576a:	4620      	mov	r0, r4
 801576c:	b00b      	add	sp, #44	@ 0x2c
 801576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015772:	f7f9 ff07 	bl	800f584 <rcl_convert_rmw_ret_to_rcl_ret>
 8015776:	4604      	mov	r4, r0
 8015778:	e7f7      	b.n	801576a <rcl_expand_topic_name+0x16a>
 801577a:	2467      	movs	r4, #103	@ 0x67
 801577c:	4620      	mov	r0, r4
 801577e:	b00b      	add	sp, #44	@ 0x2c
 8015780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015784:	24c9      	movs	r4, #201	@ 0xc9
 8015786:	e7f0      	b.n	801576a <rcl_expand_topic_name+0x16a>
 8015788:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801578c:	9806      	ldr	r0, [sp, #24]
 801578e:	1c69      	adds	r1, r5, #1
 8015790:	f7fc fd8c 	bl	80122ac <rcutils_string_map_getn>
 8015794:	4681      	mov	r9, r0
 8015796:	2800      	cmp	r0, #0
 8015798:	d1bf      	bne.n	801571a <rcl_expand_topic_name+0x11a>
 801579a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801579c:	aa16      	add	r2, sp, #88	@ 0x58
 801579e:	6018      	str	r0, [r3, #0]
 80157a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80157a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80157a6:	ab14      	add	r3, sp, #80	@ 0x50
 80157a8:	cb0c      	ldmia	r3, {r2, r3}
 80157aa:	4651      	mov	r1, sl
 80157ac:	4628      	mov	r0, r5
 80157ae:	f7fc fc63 	bl	8012078 <rcutils_strndup>
 80157b2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157b6:	4798      	blx	r3
 80157b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157ba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157bc:	4658      	mov	r0, fp
 80157be:	2469      	movs	r4, #105	@ 0x69
 80157c0:	4798      	blx	r3
 80157c2:	e7d2      	b.n	801576a <rcl_expand_topic_name+0x16a>
 80157c4:	2800      	cmp	r0, #0
 80157c6:	d05b      	beq.n	8015880 <rcl_expand_topic_name+0x280>
 80157c8:	46c1      	mov	r9, r8
 80157ca:	46a2      	mov	sl, r4
 80157cc:	e782      	b.n	80156d4 <rcl_expand_topic_name+0xd4>
 80157ce:	46b1      	mov	r9, r6
 80157d0:	e7a3      	b.n	801571a <rcl_expand_topic_name+0x11a>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	d1f8      	bne.n	80157c8 <rcl_expand_topic_name+0x1c8>
 80157d6:	4638      	mov	r0, r7
 80157d8:	f7ea fd0c 	bl	80001f4 <strlen>
 80157dc:	4a35      	ldr	r2, [pc, #212]	@ (80158b4 <rcl_expand_topic_name+0x2b4>)
 80157de:	4b36      	ldr	r3, [pc, #216]	@ (80158b8 <rcl_expand_topic_name+0x2b8>)
 80157e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80157e4:	2801      	cmp	r0, #1
 80157e6:	bf18      	it	ne
 80157e8:	4613      	movne	r3, r2
 80157ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80157ee:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80157f2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80157f4:	9703      	str	r7, [sp, #12]
 80157f6:	9200      	str	r2, [sp, #0]
 80157f8:	ab14      	add	r3, sp, #80	@ 0x50
 80157fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80157fc:	f7fc fb00 	bl	8011e00 <rcutils_format_string_limit>
 8015800:	4682      	mov	sl, r0
 8015802:	4653      	mov	r3, sl
 8015804:	b32b      	cbz	r3, 8015852 <rcl_expand_topic_name+0x252>
 8015806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015808:	f8c3 a000 	str.w	sl, [r3]
 801580c:	e7ad      	b.n	801576a <rcl_expand_topic_name+0x16a>
 801580e:	f89a 3000 	ldrb.w	r3, [sl]
 8015812:	2b2f      	cmp	r3, #47	@ 0x2f
 8015814:	d0f7      	beq.n	8015806 <rcl_expand_topic_name+0x206>
 8015816:	4638      	mov	r0, r7
 8015818:	f7ea fcec 	bl	80001f4 <strlen>
 801581c:	4a25      	ldr	r2, [pc, #148]	@ (80158b4 <rcl_expand_topic_name+0x2b4>)
 801581e:	4b26      	ldr	r3, [pc, #152]	@ (80158b8 <rcl_expand_topic_name+0x2b8>)
 8015820:	f8cd a010 	str.w	sl, [sp, #16]
 8015824:	2801      	cmp	r0, #1
 8015826:	bf18      	it	ne
 8015828:	4613      	movne	r3, r2
 801582a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801582e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8015832:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015834:	9703      	str	r7, [sp, #12]
 8015836:	9200      	str	r2, [sp, #0]
 8015838:	ab14      	add	r3, sp, #80	@ 0x50
 801583a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801583c:	f7fc fae0 	bl	8011e00 <rcutils_format_string_limit>
 8015840:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015842:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015844:	4605      	mov	r5, r0
 8015846:	4650      	mov	r0, sl
 8015848:	4798      	blx	r3
 801584a:	46aa      	mov	sl, r5
 801584c:	e7d9      	b.n	8015802 <rcl_expand_topic_name+0x202>
 801584e:	24ca      	movs	r4, #202	@ 0xca
 8015850:	e78b      	b.n	801576a <rcl_expand_topic_name+0x16a>
 8015852:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015854:	2300      	movs	r3, #0
 8015856:	6013      	str	r3, [r2, #0]
 8015858:	240a      	movs	r4, #10
 801585a:	e786      	b.n	801576a <rcl_expand_topic_name+0x16a>
 801585c:	465b      	mov	r3, fp
 801585e:	9c07      	ldr	r4, [sp, #28]
 8015860:	46da      	mov	sl, fp
 8015862:	2b00      	cmp	r3, #0
 8015864:	d1d3      	bne.n	801580e <rcl_expand_topic_name+0x20e>
 8015866:	f898 3000 	ldrb.w	r3, [r8]
 801586a:	2b2f      	cmp	r3, #47	@ 0x2f
 801586c:	d0cb      	beq.n	8015806 <rcl_expand_topic_name+0x206>
 801586e:	e7b2      	b.n	80157d6 <rcl_expand_topic_name+0x1d6>
 8015870:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8015874:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015876:	6015      	str	r5, [r2, #0]
 8015878:	4658      	mov	r0, fp
 801587a:	4798      	blx	r3
 801587c:	240a      	movs	r4, #10
 801587e:	e774      	b.n	801576a <rcl_expand_topic_name+0x16a>
 8015880:	ab17      	add	r3, sp, #92	@ 0x5c
 8015882:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015886:	e88d 0003 	stmia.w	sp, {r0, r1}
 801588a:	ab14      	add	r3, sp, #80	@ 0x50
 801588c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801588e:	4640      	mov	r0, r8
 8015890:	f7fc fbd0 	bl	8012034 <rcutils_strdup>
 8015894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015896:	2800      	cmp	r0, #0
 8015898:	6018      	str	r0, [r3, #0]
 801589a:	bf08      	it	eq
 801589c:	240a      	moveq	r4, #10
 801589e:	e764      	b.n	801576a <rcl_expand_topic_name+0x16a>
 80158a0:	08018180 	.word	0x08018180
 80158a4:	080177b0 	.word	0x080177b0
 80158a8:	08018188 	.word	0x08018188
 80158ac:	08018190 	.word	0x08018190
 80158b0:	08018198 	.word	0x08018198
 80158b4:	08017aa4 	.word	0x08017aa4
 80158b8:	080177c0 	.word	0x080177c0

080158bc <rcl_get_default_topic_name_substitutions>:
 80158bc:	2800      	cmp	r0, #0
 80158be:	bf0c      	ite	eq
 80158c0:	200b      	moveq	r0, #11
 80158c2:	2000      	movne	r0, #0
 80158c4:	4770      	bx	lr
 80158c6:	bf00      	nop

080158c8 <rcl_get_zero_initialized_guard_condition>:
 80158c8:	4a03      	ldr	r2, [pc, #12]	@ (80158d8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80158ca:	4603      	mov	r3, r0
 80158cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80158d4:	4618      	mov	r0, r3
 80158d6:	4770      	bx	lr
 80158d8:	080181a4 	.word	0x080181a4

080158dc <rcl_guard_condition_init_from_rmw>:
 80158dc:	b082      	sub	sp, #8
 80158de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158e2:	b086      	sub	sp, #24
 80158e4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80158e8:	4604      	mov	r4, r0
 80158ea:	f84c 3f04 	str.w	r3, [ip, #4]!
 80158ee:	460e      	mov	r6, r1
 80158f0:	4617      	mov	r7, r2
 80158f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158f6:	f10d 0e04 	add.w	lr, sp, #4
 80158fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80158fe:	f8dc 3000 	ldr.w	r3, [ip]
 8015902:	f8ce 3000 	str.w	r3, [lr]
 8015906:	a801      	add	r0, sp, #4
 8015908:	f7f4 fea0 	bl	800a64c <rcutils_allocator_is_valid>
 801590c:	b350      	cbz	r0, 8015964 <rcl_guard_condition_init_from_rmw+0x88>
 801590e:	b34c      	cbz	r4, 8015964 <rcl_guard_condition_init_from_rmw+0x88>
 8015910:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015914:	f1b8 0f00 	cmp.w	r8, #0
 8015918:	d11e      	bne.n	8015958 <rcl_guard_condition_init_from_rmw+0x7c>
 801591a:	b31f      	cbz	r7, 8015964 <rcl_guard_condition_init_from_rmw+0x88>
 801591c:	4638      	mov	r0, r7
 801591e:	f7f9 fe4f 	bl	800f5c0 <rcl_context_is_valid>
 8015922:	b328      	cbz	r0, 8015970 <rcl_guard_condition_init_from_rmw+0x94>
 8015924:	9b01      	ldr	r3, [sp, #4]
 8015926:	9905      	ldr	r1, [sp, #20]
 8015928:	201c      	movs	r0, #28
 801592a:	4798      	blx	r3
 801592c:	4605      	mov	r5, r0
 801592e:	6060      	str	r0, [r4, #4]
 8015930:	b358      	cbz	r0, 801598a <rcl_guard_condition_init_from_rmw+0xae>
 8015932:	b1fe      	cbz	r6, 8015974 <rcl_guard_condition_init_from_rmw+0x98>
 8015934:	6006      	str	r6, [r0, #0]
 8015936:	f880 8004 	strb.w	r8, [r0, #4]
 801593a:	ac01      	add	r4, sp, #4
 801593c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801593e:	f105 0c08 	add.w	ip, r5, #8
 8015942:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015946:	6823      	ldr	r3, [r4, #0]
 8015948:	f8cc 3000 	str.w	r3, [ip]
 801594c:	2000      	movs	r0, #0
 801594e:	b006      	add	sp, #24
 8015950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015954:	b002      	add	sp, #8
 8015956:	4770      	bx	lr
 8015958:	2064      	movs	r0, #100	@ 0x64
 801595a:	b006      	add	sp, #24
 801595c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015960:	b002      	add	sp, #8
 8015962:	4770      	bx	lr
 8015964:	200b      	movs	r0, #11
 8015966:	b006      	add	sp, #24
 8015968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801596c:	b002      	add	sp, #8
 801596e:	4770      	bx	lr
 8015970:	2065      	movs	r0, #101	@ 0x65
 8015972:	e7f2      	b.n	801595a <rcl_guard_condition_init_from_rmw+0x7e>
 8015974:	6838      	ldr	r0, [r7, #0]
 8015976:	3028      	adds	r0, #40	@ 0x28
 8015978:	f000 fa3a 	bl	8015df0 <rmw_create_guard_condition>
 801597c:	6028      	str	r0, [r5, #0]
 801597e:	6865      	ldr	r5, [r4, #4]
 8015980:	682e      	ldr	r6, [r5, #0]
 8015982:	b126      	cbz	r6, 801598e <rcl_guard_condition_init_from_rmw+0xb2>
 8015984:	2301      	movs	r3, #1
 8015986:	712b      	strb	r3, [r5, #4]
 8015988:	e7d7      	b.n	801593a <rcl_guard_condition_init_from_rmw+0x5e>
 801598a:	200a      	movs	r0, #10
 801598c:	e7e5      	b.n	801595a <rcl_guard_condition_init_from_rmw+0x7e>
 801598e:	4628      	mov	r0, r5
 8015990:	9b02      	ldr	r3, [sp, #8]
 8015992:	9905      	ldr	r1, [sp, #20]
 8015994:	4798      	blx	r3
 8015996:	6066      	str	r6, [r4, #4]
 8015998:	2001      	movs	r0, #1
 801599a:	e7de      	b.n	801595a <rcl_guard_condition_init_from_rmw+0x7e>

0801599c <rcl_guard_condition_fini>:
 801599c:	b570      	push	{r4, r5, r6, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	b1f0      	cbz	r0, 80159e0 <rcl_guard_condition_fini+0x44>
 80159a2:	6843      	ldr	r3, [r0, #4]
 80159a4:	4604      	mov	r4, r0
 80159a6:	b163      	cbz	r3, 80159c2 <rcl_guard_condition_fini+0x26>
 80159a8:	6818      	ldr	r0, [r3, #0]
 80159aa:	68de      	ldr	r6, [r3, #12]
 80159ac:	6999      	ldr	r1, [r3, #24]
 80159ae:	b160      	cbz	r0, 80159ca <rcl_guard_condition_fini+0x2e>
 80159b0:	791d      	ldrb	r5, [r3, #4]
 80159b2:	b965      	cbnz	r5, 80159ce <rcl_guard_condition_fini+0x32>
 80159b4:	4618      	mov	r0, r3
 80159b6:	47b0      	blx	r6
 80159b8:	2300      	movs	r3, #0
 80159ba:	4628      	mov	r0, r5
 80159bc:	6063      	str	r3, [r4, #4]
 80159be:	b002      	add	sp, #8
 80159c0:	bd70      	pop	{r4, r5, r6, pc}
 80159c2:	461d      	mov	r5, r3
 80159c4:	4628      	mov	r0, r5
 80159c6:	b002      	add	sp, #8
 80159c8:	bd70      	pop	{r4, r5, r6, pc}
 80159ca:	4605      	mov	r5, r0
 80159cc:	e7f2      	b.n	80159b4 <rcl_guard_condition_fini+0x18>
 80159ce:	9101      	str	r1, [sp, #4]
 80159d0:	f000 fa22 	bl	8015e18 <rmw_destroy_guard_condition>
 80159d4:	1e05      	subs	r5, r0, #0
 80159d6:	6863      	ldr	r3, [r4, #4]
 80159d8:	9901      	ldr	r1, [sp, #4]
 80159da:	bf18      	it	ne
 80159dc:	2501      	movne	r5, #1
 80159de:	e7e9      	b.n	80159b4 <rcl_guard_condition_fini+0x18>
 80159e0:	250b      	movs	r5, #11
 80159e2:	4628      	mov	r0, r5
 80159e4:	b002      	add	sp, #8
 80159e6:	bd70      	pop	{r4, r5, r6, pc}

080159e8 <rcl_guard_condition_get_default_options>:
 80159e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ea:	b087      	sub	sp, #28
 80159ec:	4606      	mov	r6, r0
 80159ee:	4668      	mov	r0, sp
 80159f0:	f7f4 fe1e 	bl	800a630 <rcutils_get_default_allocator>
 80159f4:	4b09      	ldr	r3, [pc, #36]	@ (8015a1c <rcl_guard_condition_get_default_options+0x34>)
 80159f6:	46ee      	mov	lr, sp
 80159f8:	469c      	mov	ip, r3
 80159fa:	461d      	mov	r5, r3
 80159fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a06:	4634      	mov	r4, r6
 8015a08:	f8de 7000 	ldr.w	r7, [lr]
 8015a0c:	f8cc 7000 	str.w	r7, [ip]
 8015a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a12:	4630      	mov	r0, r6
 8015a14:	6027      	str	r7, [r4, #0]
 8015a16:	b007      	add	sp, #28
 8015a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a1a:	bf00      	nop
 8015a1c:	2000de7c 	.word	0x2000de7c

08015a20 <rcl_guard_condition_get_rmw_handle>:
 8015a20:	b110      	cbz	r0, 8015a28 <rcl_guard_condition_get_rmw_handle+0x8>
 8015a22:	6840      	ldr	r0, [r0, #4]
 8015a24:	b100      	cbz	r0, 8015a28 <rcl_guard_condition_get_rmw_handle+0x8>
 8015a26:	6800      	ldr	r0, [r0, #0]
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop

08015a2c <rcl_validate_topic_name>:
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d07a      	beq.n	8015b26 <rcl_validate_topic_name+0xfa>
 8015a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a34:	460e      	mov	r6, r1
 8015a36:	2900      	cmp	r1, #0
 8015a38:	d07c      	beq.n	8015b34 <rcl_validate_topic_name+0x108>
 8015a3a:	4617      	mov	r7, r2
 8015a3c:	4605      	mov	r5, r0
 8015a3e:	f7ea fbd9 	bl	80001f4 <strlen>
 8015a42:	b1b0      	cbz	r0, 8015a72 <rcl_validate_topic_name+0x46>
 8015a44:	f895 9000 	ldrb.w	r9, [r5]
 8015a48:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015bcc <rcl_validate_topic_name+0x1a0>
 8015a4c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015a50:	f013 0304 	ands.w	r3, r3, #4
 8015a54:	d169      	bne.n	8015b2a <rcl_validate_topic_name+0xfe>
 8015a56:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015a5a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015a5e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015a60:	d10e      	bne.n	8015a80 <rcl_validate_topic_name+0x54>
 8015a62:	2202      	movs	r2, #2
 8015a64:	6032      	str	r2, [r6, #0]
 8015a66:	b36f      	cbz	r7, 8015ac4 <rcl_validate_topic_name+0x98>
 8015a68:	f8c7 8000 	str.w	r8, [r7]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a72:	2301      	movs	r3, #1
 8015a74:	6033      	str	r3, [r6, #0]
 8015a76:	b32f      	cbz	r7, 8015ac4 <rcl_validate_topic_name+0x98>
 8015a78:	2000      	movs	r0, #0
 8015a7a:	6038      	str	r0, [r7, #0]
 8015a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a80:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015a84:	461c      	mov	r4, r3
 8015a86:	4619      	mov	r1, r3
 8015a88:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015a8c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015a90:	f1be 0f09 	cmp.w	lr, #9
 8015a94:	d919      	bls.n	8015aca <rcl_validate_topic_name+0x9e>
 8015a96:	f022 0e20 	bic.w	lr, r2, #32
 8015a9a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015a9e:	f1be 0f19 	cmp.w	lr, #25
 8015aa2:	d912      	bls.n	8015aca <rcl_validate_topic_name+0x9e>
 8015aa4:	2a5f      	cmp	r2, #95	@ 0x5f
 8015aa6:	d019      	beq.n	8015adc <rcl_validate_topic_name+0xb0>
 8015aa8:	2a2f      	cmp	r2, #47	@ 0x2f
 8015aaa:	d051      	beq.n	8015b50 <rcl_validate_topic_name+0x124>
 8015aac:	2a7e      	cmp	r2, #126	@ 0x7e
 8015aae:	d048      	beq.n	8015b42 <rcl_validate_topic_name+0x116>
 8015ab0:	2a7b      	cmp	r2, #123	@ 0x7b
 8015ab2:	d054      	beq.n	8015b5e <rcl_validate_topic_name+0x132>
 8015ab4:	2a7d      	cmp	r2, #125	@ 0x7d
 8015ab6:	d161      	bne.n	8015b7c <rcl_validate_topic_name+0x150>
 8015ab8:	2c00      	cmp	r4, #0
 8015aba:	d155      	bne.n	8015b68 <rcl_validate_topic_name+0x13c>
 8015abc:	2305      	movs	r3, #5
 8015abe:	6033      	str	r3, [r6, #0]
 8015ac0:	b107      	cbz	r7, 8015ac4 <rcl_validate_topic_name+0x98>
 8015ac2:	6039      	str	r1, [r7, #0]
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015aca:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015ace:	0752      	lsls	r2, r2, #29
 8015ad0:	d504      	bpl.n	8015adc <rcl_validate_topic_name+0xb0>
 8015ad2:	b11c      	cbz	r4, 8015adc <rcl_validate_topic_name+0xb0>
 8015ad4:	b111      	cbz	r1, 8015adc <rcl_validate_topic_name+0xb0>
 8015ad6:	1e4a      	subs	r2, r1, #1
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d02d      	beq.n	8015b38 <rcl_validate_topic_name+0x10c>
 8015adc:	3101      	adds	r1, #1
 8015ade:	4288      	cmp	r0, r1
 8015ae0:	d1d2      	bne.n	8015a88 <rcl_validate_topic_name+0x5c>
 8015ae2:	2c00      	cmp	r4, #0
 8015ae4:	d145      	bne.n	8015b72 <rcl_validate_topic_name+0x146>
 8015ae6:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015aea:	d04f      	beq.n	8015b8c <rcl_validate_topic_name+0x160>
 8015aec:	4620      	mov	r0, r4
 8015aee:	2301      	movs	r3, #1
 8015af0:	e006      	b.n	8015b00 <rcl_validate_topic_name+0xd4>
 8015af2:	428b      	cmp	r3, r1
 8015af4:	f105 0501 	add.w	r5, r5, #1
 8015af8:	f103 0201 	add.w	r2, r3, #1
 8015afc:	d236      	bcs.n	8015b6c <rcl_validate_topic_name+0x140>
 8015afe:	4613      	mov	r3, r2
 8015b00:	4580      	cmp	r8, r0
 8015b02:	f100 0001 	add.w	r0, r0, #1
 8015b06:	d0f4      	beq.n	8015af2 <rcl_validate_topic_name+0xc6>
 8015b08:	782a      	ldrb	r2, [r5, #0]
 8015b0a:	2a2f      	cmp	r2, #47	@ 0x2f
 8015b0c:	d1f1      	bne.n	8015af2 <rcl_validate_topic_name+0xc6>
 8015b0e:	786a      	ldrb	r2, [r5, #1]
 8015b10:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015b14:	0754      	lsls	r4, r2, #29
 8015b16:	d5ec      	bpl.n	8015af2 <rcl_validate_topic_name+0xc6>
 8015b18:	2204      	movs	r2, #4
 8015b1a:	6032      	str	r2, [r6, #0]
 8015b1c:	2f00      	cmp	r7, #0
 8015b1e:	d0d1      	beq.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b20:	603b      	str	r3, [r7, #0]
 8015b22:	2000      	movs	r0, #0
 8015b24:	e7aa      	b.n	8015a7c <rcl_validate_topic_name+0x50>
 8015b26:	200b      	movs	r0, #11
 8015b28:	4770      	bx	lr
 8015b2a:	2304      	movs	r3, #4
 8015b2c:	6033      	str	r3, [r6, #0]
 8015b2e:	2f00      	cmp	r7, #0
 8015b30:	d1a2      	bne.n	8015a78 <rcl_validate_topic_name+0x4c>
 8015b32:	e7c7      	b.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b34:	200b      	movs	r0, #11
 8015b36:	e7a1      	b.n	8015a7c <rcl_validate_topic_name+0x50>
 8015b38:	2309      	movs	r3, #9
 8015b3a:	6033      	str	r3, [r6, #0]
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	d1c0      	bne.n	8015ac2 <rcl_validate_topic_name+0x96>
 8015b40:	e7c0      	b.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b42:	2900      	cmp	r1, #0
 8015b44:	d0ca      	beq.n	8015adc <rcl_validate_topic_name+0xb0>
 8015b46:	2306      	movs	r3, #6
 8015b48:	6033      	str	r3, [r6, #0]
 8015b4a:	2f00      	cmp	r7, #0
 8015b4c:	d1b9      	bne.n	8015ac2 <rcl_validate_topic_name+0x96>
 8015b4e:	e7b9      	b.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b50:	2c00      	cmp	r4, #0
 8015b52:	d0c3      	beq.n	8015adc <rcl_validate_topic_name+0xb0>
 8015b54:	2308      	movs	r3, #8
 8015b56:	6033      	str	r3, [r6, #0]
 8015b58:	2f00      	cmp	r7, #0
 8015b5a:	d1b2      	bne.n	8015ac2 <rcl_validate_topic_name+0x96>
 8015b5c:	e7b2      	b.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b5e:	2c00      	cmp	r4, #0
 8015b60:	d1f8      	bne.n	8015b54 <rcl_validate_topic_name+0x128>
 8015b62:	460b      	mov	r3, r1
 8015b64:	2401      	movs	r4, #1
 8015b66:	e7b9      	b.n	8015adc <rcl_validate_topic_name+0xb0>
 8015b68:	2400      	movs	r4, #0
 8015b6a:	e7b7      	b.n	8015adc <rcl_validate_topic_name+0xb0>
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	6030      	str	r0, [r6, #0]
 8015b70:	e784      	b.n	8015a7c <rcl_validate_topic_name+0x50>
 8015b72:	2205      	movs	r2, #5
 8015b74:	6032      	str	r2, [r6, #0]
 8015b76:	2f00      	cmp	r7, #0
 8015b78:	d1d2      	bne.n	8015b20 <rcl_validate_topic_name+0xf4>
 8015b7a:	e7a3      	b.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b7c:	2c00      	cmp	r4, #0
 8015b7e:	bf14      	ite	ne
 8015b80:	2308      	movne	r3, #8
 8015b82:	2303      	moveq	r3, #3
 8015b84:	6033      	str	r3, [r6, #0]
 8015b86:	2f00      	cmp	r7, #0
 8015b88:	d19b      	bne.n	8015ac2 <rcl_validate_topic_name+0x96>
 8015b8a:	e79b      	b.n	8015ac4 <rcl_validate_topic_name+0x98>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	e00a      	b.n	8015ba6 <rcl_validate_topic_name+0x17a>
 8015b90:	2c01      	cmp	r4, #1
 8015b92:	d013      	beq.n	8015bbc <rcl_validate_topic_name+0x190>
 8015b94:	4299      	cmp	r1, r3
 8015b96:	f104 0401 	add.w	r4, r4, #1
 8015b9a:	f105 0501 	add.w	r5, r5, #1
 8015b9e:	f103 0201 	add.w	r2, r3, #1
 8015ba2:	d9e3      	bls.n	8015b6c <rcl_validate_topic_name+0x140>
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	45a0      	cmp	r8, r4
 8015ba8:	d0f4      	beq.n	8015b94 <rcl_validate_topic_name+0x168>
 8015baa:	782a      	ldrb	r2, [r5, #0]
 8015bac:	2a2f      	cmp	r2, #47	@ 0x2f
 8015bae:	d1ef      	bne.n	8015b90 <rcl_validate_topic_name+0x164>
 8015bb0:	786a      	ldrb	r2, [r5, #1]
 8015bb2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015bb6:	0752      	lsls	r2, r2, #29
 8015bb8:	d5ec      	bpl.n	8015b94 <rcl_validate_topic_name+0x168>
 8015bba:	e7ad      	b.n	8015b18 <rcl_validate_topic_name+0xec>
 8015bbc:	2307      	movs	r3, #7
 8015bbe:	6033      	str	r3, [r6, #0]
 8015bc0:	2f00      	cmp	r7, #0
 8015bc2:	f43f af7f 	beq.w	8015ac4 <rcl_validate_topic_name+0x98>
 8015bc6:	603c      	str	r4, [r7, #0]
 8015bc8:	2000      	movs	r0, #0
 8015bca:	e757      	b.n	8015a7c <rcl_validate_topic_name+0x50>
 8015bcc:	0801821c 	.word	0x0801821c

08015bd0 <rcutils_string_array_fini>:
 8015bd0:	b320      	cbz	r0, 8015c1c <rcutils_string_array_fini+0x4c>
 8015bd2:	b570      	push	{r4, r5, r6, lr}
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	6840      	ldr	r0, [r0, #4]
 8015bd8:	b1d8      	cbz	r0, 8015c12 <rcutils_string_array_fini+0x42>
 8015bda:	f104 0008 	add.w	r0, r4, #8
 8015bde:	f7f4 fd35 	bl	800a64c <rcutils_allocator_is_valid>
 8015be2:	b1b8      	cbz	r0, 8015c14 <rcutils_string_array_fini+0x44>
 8015be4:	6823      	ldr	r3, [r4, #0]
 8015be6:	b1bb      	cbz	r3, 8015c18 <rcutils_string_array_fini+0x48>
 8015be8:	2500      	movs	r5, #0
 8015bea:	6860      	ldr	r0, [r4, #4]
 8015bec:	462e      	mov	r6, r5
 8015bee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015bf2:	68e3      	ldr	r3, [r4, #12]
 8015bf4:	69a1      	ldr	r1, [r4, #24]
 8015bf6:	4798      	blx	r3
 8015bf8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015bfc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015c00:	3501      	adds	r5, #1
 8015c02:	429d      	cmp	r5, r3
 8015c04:	d3f3      	bcc.n	8015bee <rcutils_string_array_fini+0x1e>
 8015c06:	68e3      	ldr	r3, [r4, #12]
 8015c08:	69a1      	ldr	r1, [r4, #24]
 8015c0a:	4798      	blx	r3
 8015c0c:	2000      	movs	r0, #0
 8015c0e:	e9c4 0000 	strd	r0, r0, [r4]
 8015c12:	bd70      	pop	{r4, r5, r6, pc}
 8015c14:	200b      	movs	r0, #11
 8015c16:	bd70      	pop	{r4, r5, r6, pc}
 8015c18:	6860      	ldr	r0, [r4, #4]
 8015c1a:	e7f4      	b.n	8015c06 <rcutils_string_array_fini+0x36>
 8015c1c:	200b      	movs	r0, #11
 8015c1e:	4770      	bx	lr

08015c20 <on_status>:
 8015c20:	b082      	sub	sp, #8
 8015c22:	b002      	add	sp, #8
 8015c24:	4770      	bx	lr
 8015c26:	bf00      	nop

08015c28 <on_topic>:
 8015c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2c:	4a22      	ldr	r2, [pc, #136]	@ (8015cb8 <on_topic+0x90>)
 8015c2e:	b094      	sub	sp, #80	@ 0x50
 8015c30:	6812      	ldr	r2, [r2, #0]
 8015c32:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015c34:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015c38:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015c3c:	b3c2      	cbz	r2, 8015cb0 <on_topic+0x88>
 8015c3e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015c42:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015c46:	e001      	b.n	8015c4c <on_topic+0x24>
 8015c48:	6852      	ldr	r2, [r2, #4]
 8015c4a:	b38a      	cbz	r2, 8015cb0 <on_topic+0x88>
 8015c4c:	6894      	ldr	r4, [r2, #8]
 8015c4e:	8aa3      	ldrh	r3, [r4, #20]
 8015c50:	428b      	cmp	r3, r1
 8015c52:	d1f9      	bne.n	8015c48 <on_topic+0x20>
 8015c54:	7da3      	ldrb	r3, [r4, #22]
 8015c56:	4283      	cmp	r3, r0
 8015c58:	d1f6      	bne.n	8015c48 <on_topic+0x20>
 8015c5a:	2248      	movs	r2, #72	@ 0x48
 8015c5c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015c60:	4668      	mov	r0, sp
 8015c62:	f000 fd8e 	bl	8016782 <memcpy>
 8015c66:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015c6a:	cb0c      	ldmia	r3, {r2, r3}
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	f7f5 f91f 	bl	800aeb0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c72:	4607      	mov	r7, r0
 8015c74:	b1e0      	cbz	r0, 8015cb0 <on_topic+0x88>
 8015c76:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015c7a:	4632      	mov	r2, r6
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	f108 0110 	add.w	r1, r8, #16
 8015c82:	f7fd ffc9 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 8015c86:	b930      	cbnz	r0, 8015c96 <on_topic+0x6e>
 8015c88:	480c      	ldr	r0, [pc, #48]	@ (8015cbc <on_topic+0x94>)
 8015c8a:	4639      	mov	r1, r7
 8015c8c:	b014      	add	sp, #80	@ 0x50
 8015c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c92:	f7fc bd59 	b.w	8012748 <put_memory>
 8015c96:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015c9a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015c9e:	f7fd feab 	bl	80139f8 <rmw_uros_epoch_nanos>
 8015ca2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015ca6:	2305      	movs	r3, #5
 8015ca8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015cac:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015cb0:	b014      	add	sp, #80	@ 0x50
 8015cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cb6:	bf00      	nop
 8015cb8:	2000dcdc 	.word	0x2000dcdc
 8015cbc:	2000dccc 	.word	0x2000dccc

08015cc0 <on_request>:
 8015cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc4:	4823      	ldr	r0, [pc, #140]	@ (8015d54 <on_request+0x94>)
 8015cc6:	b094      	sub	sp, #80	@ 0x50
 8015cc8:	6800      	ldr	r0, [r0, #0]
 8015cca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015ccc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015cd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d03b      	beq.n	8015d4e <on_request+0x8e>
 8015cd6:	461d      	mov	r5, r3
 8015cd8:	e001      	b.n	8015cde <on_request+0x1e>
 8015cda:	6840      	ldr	r0, [r0, #4]
 8015cdc:	b3b8      	cbz	r0, 8015d4e <on_request+0x8e>
 8015cde:	6884      	ldr	r4, [r0, #8]
 8015ce0:	8b21      	ldrh	r1, [r4, #24]
 8015ce2:	4291      	cmp	r1, r2
 8015ce4:	d1f9      	bne.n	8015cda <on_request+0x1a>
 8015ce6:	2248      	movs	r2, #72	@ 0x48
 8015ce8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015cec:	4668      	mov	r0, sp
 8015cee:	f000 fd48 	bl	8016782 <memcpy>
 8015cf2:	f104 0320 	add.w	r3, r4, #32
 8015cf6:	cb0c      	ldmia	r3, {r2, r3}
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	f7f5 f8d9 	bl	800aeb0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015cfe:	4680      	mov	r8, r0
 8015d00:	b328      	cbz	r0, 8015d4e <on_request+0x8e>
 8015d02:	4638      	mov	r0, r7
 8015d04:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015d08:	4632      	mov	r2, r6
 8015d0a:	f107 0110 	add.w	r1, r7, #16
 8015d0e:	f7fd ff83 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 8015d12:	b930      	cbnz	r0, 8015d22 <on_request+0x62>
 8015d14:	4810      	ldr	r0, [pc, #64]	@ (8015d58 <on_request+0x98>)
 8015d16:	4641      	mov	r1, r8
 8015d18:	b014      	add	sp, #80	@ 0x50
 8015d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d1e:	f7fc bd13 	b.w	8012748 <put_memory>
 8015d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d24:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015d28:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015d2c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015d30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015d38:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015d3c:	f7fd fe5c 	bl	80139f8 <rmw_uros_epoch_nanos>
 8015d40:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015d44:	2303      	movs	r3, #3
 8015d46:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015d4a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015d4e:	b014      	add	sp, #80	@ 0x50
 8015d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d54:	2000dcac 	.word	0x2000dcac
 8015d58:	2000dccc 	.word	0x2000dccc

08015d5c <on_reply>:
 8015d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d60:	4821      	ldr	r0, [pc, #132]	@ (8015de8 <on_reply+0x8c>)
 8015d62:	b094      	sub	sp, #80	@ 0x50
 8015d64:	6800      	ldr	r0, [r0, #0]
 8015d66:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015d68:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015d6c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015d6e:	b3b8      	cbz	r0, 8015de0 <on_reply+0x84>
 8015d70:	461d      	mov	r5, r3
 8015d72:	e001      	b.n	8015d78 <on_reply+0x1c>
 8015d74:	6840      	ldr	r0, [r0, #4]
 8015d76:	b398      	cbz	r0, 8015de0 <on_reply+0x84>
 8015d78:	6884      	ldr	r4, [r0, #8]
 8015d7a:	8b21      	ldrh	r1, [r4, #24]
 8015d7c:	4291      	cmp	r1, r2
 8015d7e:	d1f9      	bne.n	8015d74 <on_reply+0x18>
 8015d80:	2248      	movs	r2, #72	@ 0x48
 8015d82:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015d86:	4668      	mov	r0, sp
 8015d88:	f000 fcfb 	bl	8016782 <memcpy>
 8015d8c:	f104 0320 	add.w	r3, r4, #32
 8015d90:	cb0c      	ldmia	r3, {r2, r3}
 8015d92:	4620      	mov	r0, r4
 8015d94:	f7f5 f88c 	bl	800aeb0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015d98:	4680      	mov	r8, r0
 8015d9a:	b308      	cbz	r0, 8015de0 <on_reply+0x84>
 8015d9c:	4638      	mov	r0, r7
 8015d9e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015da2:	4632      	mov	r2, r6
 8015da4:	f107 0110 	add.w	r1, r7, #16
 8015da8:	f7fd ff36 	bl	8013c18 <ucdr_deserialize_array_uint8_t>
 8015dac:	b930      	cbnz	r0, 8015dbc <on_reply+0x60>
 8015dae:	480f      	ldr	r0, [pc, #60]	@ (8015dec <on_reply+0x90>)
 8015db0:	4641      	mov	r1, r8
 8015db2:	b014      	add	sp, #80	@ 0x50
 8015db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015db8:	f7fc bcc6 	b.w	8012748 <put_memory>
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015dc2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015dc6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015dca:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015dce:	f7fd fe13 	bl	80139f8 <rmw_uros_epoch_nanos>
 8015dd2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015dd6:	2304      	movs	r3, #4
 8015dd8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ddc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015de0:	b014      	add	sp, #80	@ 0x50
 8015de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de6:	bf00      	nop
 8015de8:	200093c0 	.word	0x200093c0
 8015dec:	2000dccc 	.word	0x2000dccc

08015df0 <rmw_create_guard_condition>:
 8015df0:	b538      	push	{r3, r4, r5, lr}
 8015df2:	4605      	mov	r5, r0
 8015df4:	4807      	ldr	r0, [pc, #28]	@ (8015e14 <rmw_create_guard_condition+0x24>)
 8015df6:	f7fc fc97 	bl	8012728 <get_memory>
 8015dfa:	b148      	cbz	r0, 8015e10 <rmw_create_guard_condition+0x20>
 8015dfc:	6884      	ldr	r4, [r0, #8]
 8015dfe:	2300      	movs	r3, #0
 8015e00:	7423      	strb	r3, [r4, #16]
 8015e02:	61e5      	str	r5, [r4, #28]
 8015e04:	f7fc fcf8 	bl	80127f8 <rmw_get_implementation_identifier>
 8015e08:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015e0c:	f104 0014 	add.w	r0, r4, #20
 8015e10:	bd38      	pop	{r3, r4, r5, pc}
 8015e12:	bf00      	nop
 8015e14:	2000dc6c 	.word	0x2000dc6c

08015e18 <rmw_destroy_guard_condition>:
 8015e18:	b508      	push	{r3, lr}
 8015e1a:	4b08      	ldr	r3, [pc, #32]	@ (8015e3c <rmw_destroy_guard_condition+0x24>)
 8015e1c:	6819      	ldr	r1, [r3, #0]
 8015e1e:	b911      	cbnz	r1, 8015e26 <rmw_destroy_guard_condition+0xe>
 8015e20:	e00a      	b.n	8015e38 <rmw_destroy_guard_condition+0x20>
 8015e22:	6849      	ldr	r1, [r1, #4]
 8015e24:	b141      	cbz	r1, 8015e38 <rmw_destroy_guard_condition+0x20>
 8015e26:	688b      	ldr	r3, [r1, #8]
 8015e28:	3314      	adds	r3, #20
 8015e2a:	4298      	cmp	r0, r3
 8015e2c:	d1f9      	bne.n	8015e22 <rmw_destroy_guard_condition+0xa>
 8015e2e:	4803      	ldr	r0, [pc, #12]	@ (8015e3c <rmw_destroy_guard_condition+0x24>)
 8015e30:	f7fc fc8a 	bl	8012748 <put_memory>
 8015e34:	2000      	movs	r0, #0
 8015e36:	bd08      	pop	{r3, pc}
 8015e38:	2001      	movs	r0, #1
 8015e3a:	bd08      	pop	{r3, pc}
 8015e3c:	2000dc6c 	.word	0x2000dc6c

08015e40 <calloc>:
 8015e40:	4b02      	ldr	r3, [pc, #8]	@ (8015e4c <calloc+0xc>)
 8015e42:	460a      	mov	r2, r1
 8015e44:	4601      	mov	r1, r0
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	f000 b802 	b.w	8015e50 <_calloc_r>
 8015e4c:	200002b4 	.word	0x200002b4

08015e50 <_calloc_r>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	fba1 5402 	umull	r5, r4, r1, r2
 8015e56:	b93c      	cbnz	r4, 8015e68 <_calloc_r+0x18>
 8015e58:	4629      	mov	r1, r5
 8015e5a:	f000 f887 	bl	8015f6c <_malloc_r>
 8015e5e:	4606      	mov	r6, r0
 8015e60:	b928      	cbnz	r0, 8015e6e <_calloc_r+0x1e>
 8015e62:	2600      	movs	r6, #0
 8015e64:	4630      	mov	r0, r6
 8015e66:	bd70      	pop	{r4, r5, r6, pc}
 8015e68:	220c      	movs	r2, #12
 8015e6a:	6002      	str	r2, [r0, #0]
 8015e6c:	e7f9      	b.n	8015e62 <_calloc_r+0x12>
 8015e6e:	462a      	mov	r2, r5
 8015e70:	4621      	mov	r1, r4
 8015e72:	f000 fbbd 	bl	80165f0 <memset>
 8015e76:	e7f5      	b.n	8015e64 <_calloc_r+0x14>

08015e78 <getenv>:
 8015e78:	b507      	push	{r0, r1, r2, lr}
 8015e7a:	4b04      	ldr	r3, [pc, #16]	@ (8015e8c <getenv+0x14>)
 8015e7c:	4601      	mov	r1, r0
 8015e7e:	aa01      	add	r2, sp, #4
 8015e80:	6818      	ldr	r0, [r3, #0]
 8015e82:	f000 f805 	bl	8015e90 <_findenv_r>
 8015e86:	b003      	add	sp, #12
 8015e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e8c:	200002b4 	.word	0x200002b4

08015e90 <_findenv_r>:
 8015e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e94:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015f04 <_findenv_r+0x74>
 8015e98:	4606      	mov	r6, r0
 8015e9a:	4689      	mov	r9, r1
 8015e9c:	4617      	mov	r7, r2
 8015e9e:	f000 fc9d 	bl	80167dc <__env_lock>
 8015ea2:	f8da 4000 	ldr.w	r4, [sl]
 8015ea6:	b134      	cbz	r4, 8015eb6 <_findenv_r+0x26>
 8015ea8:	464b      	mov	r3, r9
 8015eaa:	4698      	mov	r8, r3
 8015eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015eb0:	b13a      	cbz	r2, 8015ec2 <_findenv_r+0x32>
 8015eb2:	2a3d      	cmp	r2, #61	@ 0x3d
 8015eb4:	d1f9      	bne.n	8015eaa <_findenv_r+0x1a>
 8015eb6:	4630      	mov	r0, r6
 8015eb8:	f000 fc96 	bl	80167e8 <__env_unlock>
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec2:	eba8 0809 	sub.w	r8, r8, r9
 8015ec6:	46a3      	mov	fp, r4
 8015ec8:	f854 0b04 	ldr.w	r0, [r4], #4
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d0f2      	beq.n	8015eb6 <_findenv_r+0x26>
 8015ed0:	4642      	mov	r2, r8
 8015ed2:	4649      	mov	r1, r9
 8015ed4:	f000 fba1 	bl	801661a <strncmp>
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	d1f4      	bne.n	8015ec6 <_findenv_r+0x36>
 8015edc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015ee0:	eb03 0508 	add.w	r5, r3, r8
 8015ee4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015ee8:	2b3d      	cmp	r3, #61	@ 0x3d
 8015eea:	d1ec      	bne.n	8015ec6 <_findenv_r+0x36>
 8015eec:	f8da 3000 	ldr.w	r3, [sl]
 8015ef0:	ebab 0303 	sub.w	r3, fp, r3
 8015ef4:	109b      	asrs	r3, r3, #2
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	603b      	str	r3, [r7, #0]
 8015efa:	f000 fc75 	bl	80167e8 <__env_unlock>
 8015efe:	1c68      	adds	r0, r5, #1
 8015f00:	e7dd      	b.n	8015ebe <_findenv_r+0x2e>
 8015f02:	bf00      	nop
 8015f04:	20000044 	.word	0x20000044

08015f08 <malloc>:
 8015f08:	4b02      	ldr	r3, [pc, #8]	@ (8015f14 <malloc+0xc>)
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	6818      	ldr	r0, [r3, #0]
 8015f0e:	f000 b82d 	b.w	8015f6c <_malloc_r>
 8015f12:	bf00      	nop
 8015f14:	200002b4 	.word	0x200002b4

08015f18 <free>:
 8015f18:	4b02      	ldr	r3, [pc, #8]	@ (8015f24 <free+0xc>)
 8015f1a:	4601      	mov	r1, r0
 8015f1c:	6818      	ldr	r0, [r3, #0]
 8015f1e:	f000 bc69 	b.w	80167f4 <_free_r>
 8015f22:	bf00      	nop
 8015f24:	200002b4 	.word	0x200002b4

08015f28 <sbrk_aligned>:
 8015f28:	b570      	push	{r4, r5, r6, lr}
 8015f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8015f68 <sbrk_aligned+0x40>)
 8015f2c:	460c      	mov	r4, r1
 8015f2e:	6831      	ldr	r1, [r6, #0]
 8015f30:	4605      	mov	r5, r0
 8015f32:	b911      	cbnz	r1, 8015f3a <sbrk_aligned+0x12>
 8015f34:	f000 fbce 	bl	80166d4 <_sbrk_r>
 8015f38:	6030      	str	r0, [r6, #0]
 8015f3a:	4621      	mov	r1, r4
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	f000 fbc9 	bl	80166d4 <_sbrk_r>
 8015f42:	1c43      	adds	r3, r0, #1
 8015f44:	d103      	bne.n	8015f4e <sbrk_aligned+0x26>
 8015f46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	bd70      	pop	{r4, r5, r6, pc}
 8015f4e:	1cc4      	adds	r4, r0, #3
 8015f50:	f024 0403 	bic.w	r4, r4, #3
 8015f54:	42a0      	cmp	r0, r4
 8015f56:	d0f8      	beq.n	8015f4a <sbrk_aligned+0x22>
 8015f58:	1a21      	subs	r1, r4, r0
 8015f5a:	4628      	mov	r0, r5
 8015f5c:	f000 fbba 	bl	80166d4 <_sbrk_r>
 8015f60:	3001      	adds	r0, #1
 8015f62:	d1f2      	bne.n	8015f4a <sbrk_aligned+0x22>
 8015f64:	e7ef      	b.n	8015f46 <sbrk_aligned+0x1e>
 8015f66:	bf00      	nop
 8015f68:	2000de90 	.word	0x2000de90

08015f6c <_malloc_r>:
 8015f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f70:	1ccd      	adds	r5, r1, #3
 8015f72:	f025 0503 	bic.w	r5, r5, #3
 8015f76:	3508      	adds	r5, #8
 8015f78:	2d0c      	cmp	r5, #12
 8015f7a:	bf38      	it	cc
 8015f7c:	250c      	movcc	r5, #12
 8015f7e:	2d00      	cmp	r5, #0
 8015f80:	4606      	mov	r6, r0
 8015f82:	db01      	blt.n	8015f88 <_malloc_r+0x1c>
 8015f84:	42a9      	cmp	r1, r5
 8015f86:	d904      	bls.n	8015f92 <_malloc_r+0x26>
 8015f88:	230c      	movs	r3, #12
 8015f8a:	6033      	str	r3, [r6, #0]
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016068 <_malloc_r+0xfc>
 8015f96:	f000 f869 	bl	801606c <__malloc_lock>
 8015f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8015f9e:	461c      	mov	r4, r3
 8015fa0:	bb44      	cbnz	r4, 8015ff4 <_malloc_r+0x88>
 8015fa2:	4629      	mov	r1, r5
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	f7ff ffbf 	bl	8015f28 <sbrk_aligned>
 8015faa:	1c43      	adds	r3, r0, #1
 8015fac:	4604      	mov	r4, r0
 8015fae:	d158      	bne.n	8016062 <_malloc_r+0xf6>
 8015fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8015fb4:	4627      	mov	r7, r4
 8015fb6:	2f00      	cmp	r7, #0
 8015fb8:	d143      	bne.n	8016042 <_malloc_r+0xd6>
 8015fba:	2c00      	cmp	r4, #0
 8015fbc:	d04b      	beq.n	8016056 <_malloc_r+0xea>
 8015fbe:	6823      	ldr	r3, [r4, #0]
 8015fc0:	4639      	mov	r1, r7
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	eb04 0903 	add.w	r9, r4, r3
 8015fc8:	f000 fb84 	bl	80166d4 <_sbrk_r>
 8015fcc:	4581      	cmp	r9, r0
 8015fce:	d142      	bne.n	8016056 <_malloc_r+0xea>
 8015fd0:	6821      	ldr	r1, [r4, #0]
 8015fd2:	1a6d      	subs	r5, r5, r1
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	f7ff ffa6 	bl	8015f28 <sbrk_aligned>
 8015fdc:	3001      	adds	r0, #1
 8015fde:	d03a      	beq.n	8016056 <_malloc_r+0xea>
 8015fe0:	6823      	ldr	r3, [r4, #0]
 8015fe2:	442b      	add	r3, r5
 8015fe4:	6023      	str	r3, [r4, #0]
 8015fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8015fea:	685a      	ldr	r2, [r3, #4]
 8015fec:	bb62      	cbnz	r2, 8016048 <_malloc_r+0xdc>
 8015fee:	f8c8 7000 	str.w	r7, [r8]
 8015ff2:	e00f      	b.n	8016014 <_malloc_r+0xa8>
 8015ff4:	6822      	ldr	r2, [r4, #0]
 8015ff6:	1b52      	subs	r2, r2, r5
 8015ff8:	d420      	bmi.n	801603c <_malloc_r+0xd0>
 8015ffa:	2a0b      	cmp	r2, #11
 8015ffc:	d917      	bls.n	801602e <_malloc_r+0xc2>
 8015ffe:	1961      	adds	r1, r4, r5
 8016000:	42a3      	cmp	r3, r4
 8016002:	6025      	str	r5, [r4, #0]
 8016004:	bf18      	it	ne
 8016006:	6059      	strne	r1, [r3, #4]
 8016008:	6863      	ldr	r3, [r4, #4]
 801600a:	bf08      	it	eq
 801600c:	f8c8 1000 	streq.w	r1, [r8]
 8016010:	5162      	str	r2, [r4, r5]
 8016012:	604b      	str	r3, [r1, #4]
 8016014:	4630      	mov	r0, r6
 8016016:	f000 f82f 	bl	8016078 <__malloc_unlock>
 801601a:	f104 000b 	add.w	r0, r4, #11
 801601e:	1d23      	adds	r3, r4, #4
 8016020:	f020 0007 	bic.w	r0, r0, #7
 8016024:	1ac2      	subs	r2, r0, r3
 8016026:	bf1c      	itt	ne
 8016028:	1a1b      	subne	r3, r3, r0
 801602a:	50a3      	strne	r3, [r4, r2]
 801602c:	e7af      	b.n	8015f8e <_malloc_r+0x22>
 801602e:	6862      	ldr	r2, [r4, #4]
 8016030:	42a3      	cmp	r3, r4
 8016032:	bf0c      	ite	eq
 8016034:	f8c8 2000 	streq.w	r2, [r8]
 8016038:	605a      	strne	r2, [r3, #4]
 801603a:	e7eb      	b.n	8016014 <_malloc_r+0xa8>
 801603c:	4623      	mov	r3, r4
 801603e:	6864      	ldr	r4, [r4, #4]
 8016040:	e7ae      	b.n	8015fa0 <_malloc_r+0x34>
 8016042:	463c      	mov	r4, r7
 8016044:	687f      	ldr	r7, [r7, #4]
 8016046:	e7b6      	b.n	8015fb6 <_malloc_r+0x4a>
 8016048:	461a      	mov	r2, r3
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	42a3      	cmp	r3, r4
 801604e:	d1fb      	bne.n	8016048 <_malloc_r+0xdc>
 8016050:	2300      	movs	r3, #0
 8016052:	6053      	str	r3, [r2, #4]
 8016054:	e7de      	b.n	8016014 <_malloc_r+0xa8>
 8016056:	230c      	movs	r3, #12
 8016058:	6033      	str	r3, [r6, #0]
 801605a:	4630      	mov	r0, r6
 801605c:	f000 f80c 	bl	8016078 <__malloc_unlock>
 8016060:	e794      	b.n	8015f8c <_malloc_r+0x20>
 8016062:	6005      	str	r5, [r0, #0]
 8016064:	e7d6      	b.n	8016014 <_malloc_r+0xa8>
 8016066:	bf00      	nop
 8016068:	2000de94 	.word	0x2000de94

0801606c <__malloc_lock>:
 801606c:	4801      	ldr	r0, [pc, #4]	@ (8016074 <__malloc_lock+0x8>)
 801606e:	f000 bb7e 	b.w	801676e <__retarget_lock_acquire_recursive>
 8016072:	bf00      	nop
 8016074:	2000dfd9 	.word	0x2000dfd9

08016078 <__malloc_unlock>:
 8016078:	4801      	ldr	r0, [pc, #4]	@ (8016080 <__malloc_unlock+0x8>)
 801607a:	f000 bb79 	b.w	8016770 <__retarget_lock_release_recursive>
 801607e:	bf00      	nop
 8016080:	2000dfd9 	.word	0x2000dfd9

08016084 <srand>:
 8016084:	b538      	push	{r3, r4, r5, lr}
 8016086:	4b10      	ldr	r3, [pc, #64]	@ (80160c8 <srand+0x44>)
 8016088:	681d      	ldr	r5, [r3, #0]
 801608a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801608c:	4604      	mov	r4, r0
 801608e:	b9b3      	cbnz	r3, 80160be <srand+0x3a>
 8016090:	2018      	movs	r0, #24
 8016092:	f7ff ff39 	bl	8015f08 <malloc>
 8016096:	4602      	mov	r2, r0
 8016098:	6328      	str	r0, [r5, #48]	@ 0x30
 801609a:	b920      	cbnz	r0, 80160a6 <srand+0x22>
 801609c:	4b0b      	ldr	r3, [pc, #44]	@ (80160cc <srand+0x48>)
 801609e:	480c      	ldr	r0, [pc, #48]	@ (80160d0 <srand+0x4c>)
 80160a0:	2146      	movs	r1, #70	@ 0x46
 80160a2:	f000 fb7d 	bl	80167a0 <__assert_func>
 80160a6:	490b      	ldr	r1, [pc, #44]	@ (80160d4 <srand+0x50>)
 80160a8:	4b0b      	ldr	r3, [pc, #44]	@ (80160d8 <srand+0x54>)
 80160aa:	e9c0 1300 	strd	r1, r3, [r0]
 80160ae:	4b0b      	ldr	r3, [pc, #44]	@ (80160dc <srand+0x58>)
 80160b0:	6083      	str	r3, [r0, #8]
 80160b2:	230b      	movs	r3, #11
 80160b4:	8183      	strh	r3, [r0, #12]
 80160b6:	2100      	movs	r1, #0
 80160b8:	2001      	movs	r0, #1
 80160ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80160be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80160c0:	2200      	movs	r2, #0
 80160c2:	611c      	str	r4, [r3, #16]
 80160c4:	615a      	str	r2, [r3, #20]
 80160c6:	bd38      	pop	{r3, r4, r5, pc}
 80160c8:	200002b4 	.word	0x200002b4
 80160cc:	080181ac 	.word	0x080181ac
 80160d0:	080181c3 	.word	0x080181c3
 80160d4:	abcd330e 	.word	0xabcd330e
 80160d8:	e66d1234 	.word	0xe66d1234
 80160dc:	0005deec 	.word	0x0005deec

080160e0 <rand>:
 80160e0:	4b16      	ldr	r3, [pc, #88]	@ (801613c <rand+0x5c>)
 80160e2:	b510      	push	{r4, lr}
 80160e4:	681c      	ldr	r4, [r3, #0]
 80160e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160e8:	b9b3      	cbnz	r3, 8016118 <rand+0x38>
 80160ea:	2018      	movs	r0, #24
 80160ec:	f7ff ff0c 	bl	8015f08 <malloc>
 80160f0:	4602      	mov	r2, r0
 80160f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80160f4:	b920      	cbnz	r0, 8016100 <rand+0x20>
 80160f6:	4b12      	ldr	r3, [pc, #72]	@ (8016140 <rand+0x60>)
 80160f8:	4812      	ldr	r0, [pc, #72]	@ (8016144 <rand+0x64>)
 80160fa:	2152      	movs	r1, #82	@ 0x52
 80160fc:	f000 fb50 	bl	80167a0 <__assert_func>
 8016100:	4911      	ldr	r1, [pc, #68]	@ (8016148 <rand+0x68>)
 8016102:	4b12      	ldr	r3, [pc, #72]	@ (801614c <rand+0x6c>)
 8016104:	e9c0 1300 	strd	r1, r3, [r0]
 8016108:	4b11      	ldr	r3, [pc, #68]	@ (8016150 <rand+0x70>)
 801610a:	6083      	str	r3, [r0, #8]
 801610c:	230b      	movs	r3, #11
 801610e:	8183      	strh	r3, [r0, #12]
 8016110:	2100      	movs	r1, #0
 8016112:	2001      	movs	r0, #1
 8016114:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016118:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801611a:	480e      	ldr	r0, [pc, #56]	@ (8016154 <rand+0x74>)
 801611c:	690b      	ldr	r3, [r1, #16]
 801611e:	694c      	ldr	r4, [r1, #20]
 8016120:	4a0d      	ldr	r2, [pc, #52]	@ (8016158 <rand+0x78>)
 8016122:	4358      	muls	r0, r3
 8016124:	fb02 0004 	mla	r0, r2, r4, r0
 8016128:	fba3 3202 	umull	r3, r2, r3, r2
 801612c:	3301      	adds	r3, #1
 801612e:	eb40 0002 	adc.w	r0, r0, r2
 8016132:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016136:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801613a:	bd10      	pop	{r4, pc}
 801613c:	200002b4 	.word	0x200002b4
 8016140:	080181ac 	.word	0x080181ac
 8016144:	080181c3 	.word	0x080181c3
 8016148:	abcd330e 	.word	0xabcd330e
 801614c:	e66d1234 	.word	0xe66d1234
 8016150:	0005deec 	.word	0x0005deec
 8016154:	5851f42d 	.word	0x5851f42d
 8016158:	4c957f2d 	.word	0x4c957f2d

0801615c <realloc>:
 801615c:	4b02      	ldr	r3, [pc, #8]	@ (8016168 <realloc+0xc>)
 801615e:	460a      	mov	r2, r1
 8016160:	4601      	mov	r1, r0
 8016162:	6818      	ldr	r0, [r3, #0]
 8016164:	f000 b802 	b.w	801616c <_realloc_r>
 8016168:	200002b4 	.word	0x200002b4

0801616c <_realloc_r>:
 801616c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016170:	4680      	mov	r8, r0
 8016172:	4615      	mov	r5, r2
 8016174:	460c      	mov	r4, r1
 8016176:	b921      	cbnz	r1, 8016182 <_realloc_r+0x16>
 8016178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801617c:	4611      	mov	r1, r2
 801617e:	f7ff bef5 	b.w	8015f6c <_malloc_r>
 8016182:	b92a      	cbnz	r2, 8016190 <_realloc_r+0x24>
 8016184:	f000 fb36 	bl	80167f4 <_free_r>
 8016188:	2400      	movs	r4, #0
 801618a:	4620      	mov	r0, r4
 801618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016190:	f000 fb7a 	bl	8016888 <_malloc_usable_size_r>
 8016194:	4285      	cmp	r5, r0
 8016196:	4606      	mov	r6, r0
 8016198:	d802      	bhi.n	80161a0 <_realloc_r+0x34>
 801619a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801619e:	d8f4      	bhi.n	801618a <_realloc_r+0x1e>
 80161a0:	4629      	mov	r1, r5
 80161a2:	4640      	mov	r0, r8
 80161a4:	f7ff fee2 	bl	8015f6c <_malloc_r>
 80161a8:	4607      	mov	r7, r0
 80161aa:	2800      	cmp	r0, #0
 80161ac:	d0ec      	beq.n	8016188 <_realloc_r+0x1c>
 80161ae:	42b5      	cmp	r5, r6
 80161b0:	462a      	mov	r2, r5
 80161b2:	4621      	mov	r1, r4
 80161b4:	bf28      	it	cs
 80161b6:	4632      	movcs	r2, r6
 80161b8:	f000 fae3 	bl	8016782 <memcpy>
 80161bc:	4621      	mov	r1, r4
 80161be:	4640      	mov	r0, r8
 80161c0:	f000 fb18 	bl	80167f4 <_free_r>
 80161c4:	463c      	mov	r4, r7
 80161c6:	e7e0      	b.n	801618a <_realloc_r+0x1e>

080161c8 <_strtoul_l.constprop.0>:
 80161c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161cc:	4e34      	ldr	r6, [pc, #208]	@ (80162a0 <_strtoul_l.constprop.0+0xd8>)
 80161ce:	4686      	mov	lr, r0
 80161d0:	460d      	mov	r5, r1
 80161d2:	4628      	mov	r0, r5
 80161d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161d8:	5d37      	ldrb	r7, [r6, r4]
 80161da:	f017 0708 	ands.w	r7, r7, #8
 80161de:	d1f8      	bne.n	80161d2 <_strtoul_l.constprop.0+0xa>
 80161e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80161e2:	d12f      	bne.n	8016244 <_strtoul_l.constprop.0+0x7c>
 80161e4:	782c      	ldrb	r4, [r5, #0]
 80161e6:	2701      	movs	r7, #1
 80161e8:	1c85      	adds	r5, r0, #2
 80161ea:	f033 0010 	bics.w	r0, r3, #16
 80161ee:	d109      	bne.n	8016204 <_strtoul_l.constprop.0+0x3c>
 80161f0:	2c30      	cmp	r4, #48	@ 0x30
 80161f2:	d12c      	bne.n	801624e <_strtoul_l.constprop.0+0x86>
 80161f4:	7828      	ldrb	r0, [r5, #0]
 80161f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80161fa:	2858      	cmp	r0, #88	@ 0x58
 80161fc:	d127      	bne.n	801624e <_strtoul_l.constprop.0+0x86>
 80161fe:	786c      	ldrb	r4, [r5, #1]
 8016200:	2310      	movs	r3, #16
 8016202:	3502      	adds	r5, #2
 8016204:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016208:	2600      	movs	r6, #0
 801620a:	fbb8 f8f3 	udiv	r8, r8, r3
 801620e:	fb03 f908 	mul.w	r9, r3, r8
 8016212:	ea6f 0909 	mvn.w	r9, r9
 8016216:	4630      	mov	r0, r6
 8016218:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801621c:	f1bc 0f09 	cmp.w	ip, #9
 8016220:	d81c      	bhi.n	801625c <_strtoul_l.constprop.0+0x94>
 8016222:	4664      	mov	r4, ip
 8016224:	42a3      	cmp	r3, r4
 8016226:	dd2a      	ble.n	801627e <_strtoul_l.constprop.0+0xb6>
 8016228:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801622c:	d007      	beq.n	801623e <_strtoul_l.constprop.0+0x76>
 801622e:	4580      	cmp	r8, r0
 8016230:	d322      	bcc.n	8016278 <_strtoul_l.constprop.0+0xb0>
 8016232:	d101      	bne.n	8016238 <_strtoul_l.constprop.0+0x70>
 8016234:	45a1      	cmp	r9, r4
 8016236:	db1f      	blt.n	8016278 <_strtoul_l.constprop.0+0xb0>
 8016238:	fb00 4003 	mla	r0, r0, r3, r4
 801623c:	2601      	movs	r6, #1
 801623e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016242:	e7e9      	b.n	8016218 <_strtoul_l.constprop.0+0x50>
 8016244:	2c2b      	cmp	r4, #43	@ 0x2b
 8016246:	bf04      	itt	eq
 8016248:	782c      	ldrbeq	r4, [r5, #0]
 801624a:	1c85      	addeq	r5, r0, #2
 801624c:	e7cd      	b.n	80161ea <_strtoul_l.constprop.0+0x22>
 801624e:	2b00      	cmp	r3, #0
 8016250:	d1d8      	bne.n	8016204 <_strtoul_l.constprop.0+0x3c>
 8016252:	2c30      	cmp	r4, #48	@ 0x30
 8016254:	bf0c      	ite	eq
 8016256:	2308      	moveq	r3, #8
 8016258:	230a      	movne	r3, #10
 801625a:	e7d3      	b.n	8016204 <_strtoul_l.constprop.0+0x3c>
 801625c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016260:	f1bc 0f19 	cmp.w	ip, #25
 8016264:	d801      	bhi.n	801626a <_strtoul_l.constprop.0+0xa2>
 8016266:	3c37      	subs	r4, #55	@ 0x37
 8016268:	e7dc      	b.n	8016224 <_strtoul_l.constprop.0+0x5c>
 801626a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801626e:	f1bc 0f19 	cmp.w	ip, #25
 8016272:	d804      	bhi.n	801627e <_strtoul_l.constprop.0+0xb6>
 8016274:	3c57      	subs	r4, #87	@ 0x57
 8016276:	e7d5      	b.n	8016224 <_strtoul_l.constprop.0+0x5c>
 8016278:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801627c:	e7df      	b.n	801623e <_strtoul_l.constprop.0+0x76>
 801627e:	1c73      	adds	r3, r6, #1
 8016280:	d106      	bne.n	8016290 <_strtoul_l.constprop.0+0xc8>
 8016282:	2322      	movs	r3, #34	@ 0x22
 8016284:	f8ce 3000 	str.w	r3, [lr]
 8016288:	4630      	mov	r0, r6
 801628a:	b932      	cbnz	r2, 801629a <_strtoul_l.constprop.0+0xd2>
 801628c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016290:	b107      	cbz	r7, 8016294 <_strtoul_l.constprop.0+0xcc>
 8016292:	4240      	negs	r0, r0
 8016294:	2a00      	cmp	r2, #0
 8016296:	d0f9      	beq.n	801628c <_strtoul_l.constprop.0+0xc4>
 8016298:	b106      	cbz	r6, 801629c <_strtoul_l.constprop.0+0xd4>
 801629a:	1e69      	subs	r1, r5, #1
 801629c:	6011      	str	r1, [r2, #0]
 801629e:	e7f5      	b.n	801628c <_strtoul_l.constprop.0+0xc4>
 80162a0:	0801821c 	.word	0x0801821c

080162a4 <strtoul>:
 80162a4:	4613      	mov	r3, r2
 80162a6:	460a      	mov	r2, r1
 80162a8:	4601      	mov	r1, r0
 80162aa:	4802      	ldr	r0, [pc, #8]	@ (80162b4 <strtoul+0x10>)
 80162ac:	6800      	ldr	r0, [r0, #0]
 80162ae:	f7ff bf8b 	b.w	80161c8 <_strtoul_l.constprop.0>
 80162b2:	bf00      	nop
 80162b4:	200002b4 	.word	0x200002b4

080162b8 <std>:
 80162b8:	2300      	movs	r3, #0
 80162ba:	b510      	push	{r4, lr}
 80162bc:	4604      	mov	r4, r0
 80162be:	e9c0 3300 	strd	r3, r3, [r0]
 80162c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162c6:	6083      	str	r3, [r0, #8]
 80162c8:	8181      	strh	r1, [r0, #12]
 80162ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80162cc:	81c2      	strh	r2, [r0, #14]
 80162ce:	6183      	str	r3, [r0, #24]
 80162d0:	4619      	mov	r1, r3
 80162d2:	2208      	movs	r2, #8
 80162d4:	305c      	adds	r0, #92	@ 0x5c
 80162d6:	f000 f98b 	bl	80165f0 <memset>
 80162da:	4b0d      	ldr	r3, [pc, #52]	@ (8016310 <std+0x58>)
 80162dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80162de:	4b0d      	ldr	r3, [pc, #52]	@ (8016314 <std+0x5c>)
 80162e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80162e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016318 <std+0x60>)
 80162e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80162e6:	4b0d      	ldr	r3, [pc, #52]	@ (801631c <std+0x64>)
 80162e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80162ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016320 <std+0x68>)
 80162ec:	6224      	str	r4, [r4, #32]
 80162ee:	429c      	cmp	r4, r3
 80162f0:	d006      	beq.n	8016300 <std+0x48>
 80162f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80162f6:	4294      	cmp	r4, r2
 80162f8:	d002      	beq.n	8016300 <std+0x48>
 80162fa:	33d0      	adds	r3, #208	@ 0xd0
 80162fc:	429c      	cmp	r4, r3
 80162fe:	d105      	bne.n	801630c <std+0x54>
 8016300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016308:	f000 ba30 	b.w	801676c <__retarget_lock_init_recursive>
 801630c:	bd10      	pop	{r4, pc}
 801630e:	bf00      	nop
 8016310:	080164a5 	.word	0x080164a5
 8016314:	080164c7 	.word	0x080164c7
 8016318:	080164ff 	.word	0x080164ff
 801631c:	08016523 	.word	0x08016523
 8016320:	2000de98 	.word	0x2000de98

08016324 <stdio_exit_handler>:
 8016324:	4a02      	ldr	r2, [pc, #8]	@ (8016330 <stdio_exit_handler+0xc>)
 8016326:	4903      	ldr	r1, [pc, #12]	@ (8016334 <stdio_exit_handler+0x10>)
 8016328:	4803      	ldr	r0, [pc, #12]	@ (8016338 <stdio_exit_handler+0x14>)
 801632a:	f000 b869 	b.w	8016400 <_fwalk_sglue>
 801632e:	bf00      	nop
 8016330:	200002a8 	.word	0x200002a8
 8016334:	08016f6d 	.word	0x08016f6d
 8016338:	200002b8 	.word	0x200002b8

0801633c <cleanup_stdio>:
 801633c:	6841      	ldr	r1, [r0, #4]
 801633e:	4b0c      	ldr	r3, [pc, #48]	@ (8016370 <cleanup_stdio+0x34>)
 8016340:	4299      	cmp	r1, r3
 8016342:	b510      	push	{r4, lr}
 8016344:	4604      	mov	r4, r0
 8016346:	d001      	beq.n	801634c <cleanup_stdio+0x10>
 8016348:	f000 fe10 	bl	8016f6c <_fflush_r>
 801634c:	68a1      	ldr	r1, [r4, #8]
 801634e:	4b09      	ldr	r3, [pc, #36]	@ (8016374 <cleanup_stdio+0x38>)
 8016350:	4299      	cmp	r1, r3
 8016352:	d002      	beq.n	801635a <cleanup_stdio+0x1e>
 8016354:	4620      	mov	r0, r4
 8016356:	f000 fe09 	bl	8016f6c <_fflush_r>
 801635a:	68e1      	ldr	r1, [r4, #12]
 801635c:	4b06      	ldr	r3, [pc, #24]	@ (8016378 <cleanup_stdio+0x3c>)
 801635e:	4299      	cmp	r1, r3
 8016360:	d004      	beq.n	801636c <cleanup_stdio+0x30>
 8016362:	4620      	mov	r0, r4
 8016364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016368:	f000 be00 	b.w	8016f6c <_fflush_r>
 801636c:	bd10      	pop	{r4, pc}
 801636e:	bf00      	nop
 8016370:	2000de98 	.word	0x2000de98
 8016374:	2000df00 	.word	0x2000df00
 8016378:	2000df68 	.word	0x2000df68

0801637c <global_stdio_init.part.0>:
 801637c:	b510      	push	{r4, lr}
 801637e:	4b0b      	ldr	r3, [pc, #44]	@ (80163ac <global_stdio_init.part.0+0x30>)
 8016380:	4c0b      	ldr	r4, [pc, #44]	@ (80163b0 <global_stdio_init.part.0+0x34>)
 8016382:	4a0c      	ldr	r2, [pc, #48]	@ (80163b4 <global_stdio_init.part.0+0x38>)
 8016384:	601a      	str	r2, [r3, #0]
 8016386:	4620      	mov	r0, r4
 8016388:	2200      	movs	r2, #0
 801638a:	2104      	movs	r1, #4
 801638c:	f7ff ff94 	bl	80162b8 <std>
 8016390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016394:	2201      	movs	r2, #1
 8016396:	2109      	movs	r1, #9
 8016398:	f7ff ff8e 	bl	80162b8 <std>
 801639c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80163a0:	2202      	movs	r2, #2
 80163a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163a6:	2112      	movs	r1, #18
 80163a8:	f7ff bf86 	b.w	80162b8 <std>
 80163ac:	2000dfd0 	.word	0x2000dfd0
 80163b0:	2000de98 	.word	0x2000de98
 80163b4:	08016325 	.word	0x08016325

080163b8 <__sfp_lock_acquire>:
 80163b8:	4801      	ldr	r0, [pc, #4]	@ (80163c0 <__sfp_lock_acquire+0x8>)
 80163ba:	f000 b9d8 	b.w	801676e <__retarget_lock_acquire_recursive>
 80163be:	bf00      	nop
 80163c0:	2000dfda 	.word	0x2000dfda

080163c4 <__sfp_lock_release>:
 80163c4:	4801      	ldr	r0, [pc, #4]	@ (80163cc <__sfp_lock_release+0x8>)
 80163c6:	f000 b9d3 	b.w	8016770 <__retarget_lock_release_recursive>
 80163ca:	bf00      	nop
 80163cc:	2000dfda 	.word	0x2000dfda

080163d0 <__sinit>:
 80163d0:	b510      	push	{r4, lr}
 80163d2:	4604      	mov	r4, r0
 80163d4:	f7ff fff0 	bl	80163b8 <__sfp_lock_acquire>
 80163d8:	6a23      	ldr	r3, [r4, #32]
 80163da:	b11b      	cbz	r3, 80163e4 <__sinit+0x14>
 80163dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163e0:	f7ff bff0 	b.w	80163c4 <__sfp_lock_release>
 80163e4:	4b04      	ldr	r3, [pc, #16]	@ (80163f8 <__sinit+0x28>)
 80163e6:	6223      	str	r3, [r4, #32]
 80163e8:	4b04      	ldr	r3, [pc, #16]	@ (80163fc <__sinit+0x2c>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d1f5      	bne.n	80163dc <__sinit+0xc>
 80163f0:	f7ff ffc4 	bl	801637c <global_stdio_init.part.0>
 80163f4:	e7f2      	b.n	80163dc <__sinit+0xc>
 80163f6:	bf00      	nop
 80163f8:	0801633d 	.word	0x0801633d
 80163fc:	2000dfd0 	.word	0x2000dfd0

08016400 <_fwalk_sglue>:
 8016400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016404:	4607      	mov	r7, r0
 8016406:	4688      	mov	r8, r1
 8016408:	4614      	mov	r4, r2
 801640a:	2600      	movs	r6, #0
 801640c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016410:	f1b9 0901 	subs.w	r9, r9, #1
 8016414:	d505      	bpl.n	8016422 <_fwalk_sglue+0x22>
 8016416:	6824      	ldr	r4, [r4, #0]
 8016418:	2c00      	cmp	r4, #0
 801641a:	d1f7      	bne.n	801640c <_fwalk_sglue+0xc>
 801641c:	4630      	mov	r0, r6
 801641e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016422:	89ab      	ldrh	r3, [r5, #12]
 8016424:	2b01      	cmp	r3, #1
 8016426:	d907      	bls.n	8016438 <_fwalk_sglue+0x38>
 8016428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801642c:	3301      	adds	r3, #1
 801642e:	d003      	beq.n	8016438 <_fwalk_sglue+0x38>
 8016430:	4629      	mov	r1, r5
 8016432:	4638      	mov	r0, r7
 8016434:	47c0      	blx	r8
 8016436:	4306      	orrs	r6, r0
 8016438:	3568      	adds	r5, #104	@ 0x68
 801643a:	e7e9      	b.n	8016410 <_fwalk_sglue+0x10>

0801643c <sniprintf>:
 801643c:	b40c      	push	{r2, r3}
 801643e:	b530      	push	{r4, r5, lr}
 8016440:	4b17      	ldr	r3, [pc, #92]	@ (80164a0 <sniprintf+0x64>)
 8016442:	1e0c      	subs	r4, r1, #0
 8016444:	681d      	ldr	r5, [r3, #0]
 8016446:	b09d      	sub	sp, #116	@ 0x74
 8016448:	da08      	bge.n	801645c <sniprintf+0x20>
 801644a:	238b      	movs	r3, #139	@ 0x8b
 801644c:	602b      	str	r3, [r5, #0]
 801644e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016452:	b01d      	add	sp, #116	@ 0x74
 8016454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016458:	b002      	add	sp, #8
 801645a:	4770      	bx	lr
 801645c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016460:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016464:	bf14      	ite	ne
 8016466:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801646a:	4623      	moveq	r3, r4
 801646c:	9304      	str	r3, [sp, #16]
 801646e:	9307      	str	r3, [sp, #28]
 8016470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016474:	9002      	str	r0, [sp, #8]
 8016476:	9006      	str	r0, [sp, #24]
 8016478:	f8ad 3016 	strh.w	r3, [sp, #22]
 801647c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801647e:	ab21      	add	r3, sp, #132	@ 0x84
 8016480:	a902      	add	r1, sp, #8
 8016482:	4628      	mov	r0, r5
 8016484:	9301      	str	r3, [sp, #4]
 8016486:	f000 fa63 	bl	8016950 <_svfiprintf_r>
 801648a:	1c43      	adds	r3, r0, #1
 801648c:	bfbc      	itt	lt
 801648e:	238b      	movlt	r3, #139	@ 0x8b
 8016490:	602b      	strlt	r3, [r5, #0]
 8016492:	2c00      	cmp	r4, #0
 8016494:	d0dd      	beq.n	8016452 <sniprintf+0x16>
 8016496:	9b02      	ldr	r3, [sp, #8]
 8016498:	2200      	movs	r2, #0
 801649a:	701a      	strb	r2, [r3, #0]
 801649c:	e7d9      	b.n	8016452 <sniprintf+0x16>
 801649e:	bf00      	nop
 80164a0:	200002b4 	.word	0x200002b4

080164a4 <__sread>:
 80164a4:	b510      	push	{r4, lr}
 80164a6:	460c      	mov	r4, r1
 80164a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164ac:	f000 f900 	bl	80166b0 <_read_r>
 80164b0:	2800      	cmp	r0, #0
 80164b2:	bfab      	itete	ge
 80164b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80164b6:	89a3      	ldrhlt	r3, [r4, #12]
 80164b8:	181b      	addge	r3, r3, r0
 80164ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80164be:	bfac      	ite	ge
 80164c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80164c2:	81a3      	strhlt	r3, [r4, #12]
 80164c4:	bd10      	pop	{r4, pc}

080164c6 <__swrite>:
 80164c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164ca:	461f      	mov	r7, r3
 80164cc:	898b      	ldrh	r3, [r1, #12]
 80164ce:	05db      	lsls	r3, r3, #23
 80164d0:	4605      	mov	r5, r0
 80164d2:	460c      	mov	r4, r1
 80164d4:	4616      	mov	r6, r2
 80164d6:	d505      	bpl.n	80164e4 <__swrite+0x1e>
 80164d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164dc:	2302      	movs	r3, #2
 80164de:	2200      	movs	r2, #0
 80164e0:	f000 f8d4 	bl	801668c <_lseek_r>
 80164e4:	89a3      	ldrh	r3, [r4, #12]
 80164e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80164ee:	81a3      	strh	r3, [r4, #12]
 80164f0:	4632      	mov	r2, r6
 80164f2:	463b      	mov	r3, r7
 80164f4:	4628      	mov	r0, r5
 80164f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164fa:	f000 b8fb 	b.w	80166f4 <_write_r>

080164fe <__sseek>:
 80164fe:	b510      	push	{r4, lr}
 8016500:	460c      	mov	r4, r1
 8016502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016506:	f000 f8c1 	bl	801668c <_lseek_r>
 801650a:	1c43      	adds	r3, r0, #1
 801650c:	89a3      	ldrh	r3, [r4, #12]
 801650e:	bf15      	itete	ne
 8016510:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801651a:	81a3      	strheq	r3, [r4, #12]
 801651c:	bf18      	it	ne
 801651e:	81a3      	strhne	r3, [r4, #12]
 8016520:	bd10      	pop	{r4, pc}

08016522 <__sclose>:
 8016522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016526:	f000 b8a1 	b.w	801666c <_close_r>

0801652a <_vsniprintf_r>:
 801652a:	b530      	push	{r4, r5, lr}
 801652c:	4614      	mov	r4, r2
 801652e:	2c00      	cmp	r4, #0
 8016530:	b09b      	sub	sp, #108	@ 0x6c
 8016532:	4605      	mov	r5, r0
 8016534:	461a      	mov	r2, r3
 8016536:	da05      	bge.n	8016544 <_vsniprintf_r+0x1a>
 8016538:	238b      	movs	r3, #139	@ 0x8b
 801653a:	6003      	str	r3, [r0, #0]
 801653c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016540:	b01b      	add	sp, #108	@ 0x6c
 8016542:	bd30      	pop	{r4, r5, pc}
 8016544:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016548:	f8ad 300c 	strh.w	r3, [sp, #12]
 801654c:	bf14      	ite	ne
 801654e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016552:	4623      	moveq	r3, r4
 8016554:	9302      	str	r3, [sp, #8]
 8016556:	9305      	str	r3, [sp, #20]
 8016558:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801655c:	9100      	str	r1, [sp, #0]
 801655e:	9104      	str	r1, [sp, #16]
 8016560:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016564:	4669      	mov	r1, sp
 8016566:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016568:	f000 f9f2 	bl	8016950 <_svfiprintf_r>
 801656c:	1c43      	adds	r3, r0, #1
 801656e:	bfbc      	itt	lt
 8016570:	238b      	movlt	r3, #139	@ 0x8b
 8016572:	602b      	strlt	r3, [r5, #0]
 8016574:	2c00      	cmp	r4, #0
 8016576:	d0e3      	beq.n	8016540 <_vsniprintf_r+0x16>
 8016578:	9b00      	ldr	r3, [sp, #0]
 801657a:	2200      	movs	r2, #0
 801657c:	701a      	strb	r2, [r3, #0]
 801657e:	e7df      	b.n	8016540 <_vsniprintf_r+0x16>

08016580 <vsniprintf>:
 8016580:	b507      	push	{r0, r1, r2, lr}
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	4613      	mov	r3, r2
 8016586:	460a      	mov	r2, r1
 8016588:	4601      	mov	r1, r0
 801658a:	4803      	ldr	r0, [pc, #12]	@ (8016598 <vsniprintf+0x18>)
 801658c:	6800      	ldr	r0, [r0, #0]
 801658e:	f7ff ffcc 	bl	801652a <_vsniprintf_r>
 8016592:	b003      	add	sp, #12
 8016594:	f85d fb04 	ldr.w	pc, [sp], #4
 8016598:	200002b4 	.word	0x200002b4

0801659c <memcmp>:
 801659c:	b510      	push	{r4, lr}
 801659e:	3901      	subs	r1, #1
 80165a0:	4402      	add	r2, r0
 80165a2:	4290      	cmp	r0, r2
 80165a4:	d101      	bne.n	80165aa <memcmp+0xe>
 80165a6:	2000      	movs	r0, #0
 80165a8:	e005      	b.n	80165b6 <memcmp+0x1a>
 80165aa:	7803      	ldrb	r3, [r0, #0]
 80165ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80165b0:	42a3      	cmp	r3, r4
 80165b2:	d001      	beq.n	80165b8 <memcmp+0x1c>
 80165b4:	1b18      	subs	r0, r3, r4
 80165b6:	bd10      	pop	{r4, pc}
 80165b8:	3001      	adds	r0, #1
 80165ba:	e7f2      	b.n	80165a2 <memcmp+0x6>

080165bc <memmove>:
 80165bc:	4288      	cmp	r0, r1
 80165be:	b510      	push	{r4, lr}
 80165c0:	eb01 0402 	add.w	r4, r1, r2
 80165c4:	d902      	bls.n	80165cc <memmove+0x10>
 80165c6:	4284      	cmp	r4, r0
 80165c8:	4623      	mov	r3, r4
 80165ca:	d807      	bhi.n	80165dc <memmove+0x20>
 80165cc:	1e43      	subs	r3, r0, #1
 80165ce:	42a1      	cmp	r1, r4
 80165d0:	d008      	beq.n	80165e4 <memmove+0x28>
 80165d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165da:	e7f8      	b.n	80165ce <memmove+0x12>
 80165dc:	4402      	add	r2, r0
 80165de:	4601      	mov	r1, r0
 80165e0:	428a      	cmp	r2, r1
 80165e2:	d100      	bne.n	80165e6 <memmove+0x2a>
 80165e4:	bd10      	pop	{r4, pc}
 80165e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165ee:	e7f7      	b.n	80165e0 <memmove+0x24>

080165f0 <memset>:
 80165f0:	4402      	add	r2, r0
 80165f2:	4603      	mov	r3, r0
 80165f4:	4293      	cmp	r3, r2
 80165f6:	d100      	bne.n	80165fa <memset+0xa>
 80165f8:	4770      	bx	lr
 80165fa:	f803 1b01 	strb.w	r1, [r3], #1
 80165fe:	e7f9      	b.n	80165f4 <memset+0x4>

08016600 <strchr>:
 8016600:	b2c9      	uxtb	r1, r1
 8016602:	4603      	mov	r3, r0
 8016604:	4618      	mov	r0, r3
 8016606:	f813 2b01 	ldrb.w	r2, [r3], #1
 801660a:	b112      	cbz	r2, 8016612 <strchr+0x12>
 801660c:	428a      	cmp	r2, r1
 801660e:	d1f9      	bne.n	8016604 <strchr+0x4>
 8016610:	4770      	bx	lr
 8016612:	2900      	cmp	r1, #0
 8016614:	bf18      	it	ne
 8016616:	2000      	movne	r0, #0
 8016618:	4770      	bx	lr

0801661a <strncmp>:
 801661a:	b510      	push	{r4, lr}
 801661c:	b16a      	cbz	r2, 801663a <strncmp+0x20>
 801661e:	3901      	subs	r1, #1
 8016620:	1884      	adds	r4, r0, r2
 8016622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016626:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801662a:	429a      	cmp	r2, r3
 801662c:	d103      	bne.n	8016636 <strncmp+0x1c>
 801662e:	42a0      	cmp	r0, r4
 8016630:	d001      	beq.n	8016636 <strncmp+0x1c>
 8016632:	2a00      	cmp	r2, #0
 8016634:	d1f5      	bne.n	8016622 <strncmp+0x8>
 8016636:	1ad0      	subs	r0, r2, r3
 8016638:	bd10      	pop	{r4, pc}
 801663a:	4610      	mov	r0, r2
 801663c:	e7fc      	b.n	8016638 <strncmp+0x1e>

0801663e <strstr>:
 801663e:	780a      	ldrb	r2, [r1, #0]
 8016640:	b570      	push	{r4, r5, r6, lr}
 8016642:	b96a      	cbnz	r2, 8016660 <strstr+0x22>
 8016644:	bd70      	pop	{r4, r5, r6, pc}
 8016646:	429a      	cmp	r2, r3
 8016648:	d109      	bne.n	801665e <strstr+0x20>
 801664a:	460c      	mov	r4, r1
 801664c:	4605      	mov	r5, r0
 801664e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016652:	2b00      	cmp	r3, #0
 8016654:	d0f6      	beq.n	8016644 <strstr+0x6>
 8016656:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801665a:	429e      	cmp	r6, r3
 801665c:	d0f7      	beq.n	801664e <strstr+0x10>
 801665e:	3001      	adds	r0, #1
 8016660:	7803      	ldrb	r3, [r0, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d1ef      	bne.n	8016646 <strstr+0x8>
 8016666:	4618      	mov	r0, r3
 8016668:	e7ec      	b.n	8016644 <strstr+0x6>
	...

0801666c <_close_r>:
 801666c:	b538      	push	{r3, r4, r5, lr}
 801666e:	4d06      	ldr	r5, [pc, #24]	@ (8016688 <_close_r+0x1c>)
 8016670:	2300      	movs	r3, #0
 8016672:	4604      	mov	r4, r0
 8016674:	4608      	mov	r0, r1
 8016676:	602b      	str	r3, [r5, #0]
 8016678:	f7ec f92c 	bl	80028d4 <_close>
 801667c:	1c43      	adds	r3, r0, #1
 801667e:	d102      	bne.n	8016686 <_close_r+0x1a>
 8016680:	682b      	ldr	r3, [r5, #0]
 8016682:	b103      	cbz	r3, 8016686 <_close_r+0x1a>
 8016684:	6023      	str	r3, [r4, #0]
 8016686:	bd38      	pop	{r3, r4, r5, pc}
 8016688:	2000dfd4 	.word	0x2000dfd4

0801668c <_lseek_r>:
 801668c:	b538      	push	{r3, r4, r5, lr}
 801668e:	4d07      	ldr	r5, [pc, #28]	@ (80166ac <_lseek_r+0x20>)
 8016690:	4604      	mov	r4, r0
 8016692:	4608      	mov	r0, r1
 8016694:	4611      	mov	r1, r2
 8016696:	2200      	movs	r2, #0
 8016698:	602a      	str	r2, [r5, #0]
 801669a:	461a      	mov	r2, r3
 801669c:	f7ec f941 	bl	8002922 <_lseek>
 80166a0:	1c43      	adds	r3, r0, #1
 80166a2:	d102      	bne.n	80166aa <_lseek_r+0x1e>
 80166a4:	682b      	ldr	r3, [r5, #0]
 80166a6:	b103      	cbz	r3, 80166aa <_lseek_r+0x1e>
 80166a8:	6023      	str	r3, [r4, #0]
 80166aa:	bd38      	pop	{r3, r4, r5, pc}
 80166ac:	2000dfd4 	.word	0x2000dfd4

080166b0 <_read_r>:
 80166b0:	b538      	push	{r3, r4, r5, lr}
 80166b2:	4d07      	ldr	r5, [pc, #28]	@ (80166d0 <_read_r+0x20>)
 80166b4:	4604      	mov	r4, r0
 80166b6:	4608      	mov	r0, r1
 80166b8:	4611      	mov	r1, r2
 80166ba:	2200      	movs	r2, #0
 80166bc:	602a      	str	r2, [r5, #0]
 80166be:	461a      	mov	r2, r3
 80166c0:	f7ec f8cf 	bl	8002862 <_read>
 80166c4:	1c43      	adds	r3, r0, #1
 80166c6:	d102      	bne.n	80166ce <_read_r+0x1e>
 80166c8:	682b      	ldr	r3, [r5, #0]
 80166ca:	b103      	cbz	r3, 80166ce <_read_r+0x1e>
 80166cc:	6023      	str	r3, [r4, #0]
 80166ce:	bd38      	pop	{r3, r4, r5, pc}
 80166d0:	2000dfd4 	.word	0x2000dfd4

080166d4 <_sbrk_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4d06      	ldr	r5, [pc, #24]	@ (80166f0 <_sbrk_r+0x1c>)
 80166d8:	2300      	movs	r3, #0
 80166da:	4604      	mov	r4, r0
 80166dc:	4608      	mov	r0, r1
 80166de:	602b      	str	r3, [r5, #0]
 80166e0:	f7ec f92c 	bl	800293c <_sbrk>
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	d102      	bne.n	80166ee <_sbrk_r+0x1a>
 80166e8:	682b      	ldr	r3, [r5, #0]
 80166ea:	b103      	cbz	r3, 80166ee <_sbrk_r+0x1a>
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	2000dfd4 	.word	0x2000dfd4

080166f4 <_write_r>:
 80166f4:	b538      	push	{r3, r4, r5, lr}
 80166f6:	4d07      	ldr	r5, [pc, #28]	@ (8016714 <_write_r+0x20>)
 80166f8:	4604      	mov	r4, r0
 80166fa:	4608      	mov	r0, r1
 80166fc:	4611      	mov	r1, r2
 80166fe:	2200      	movs	r2, #0
 8016700:	602a      	str	r2, [r5, #0]
 8016702:	461a      	mov	r2, r3
 8016704:	f7ec f8ca 	bl	800289c <_write>
 8016708:	1c43      	adds	r3, r0, #1
 801670a:	d102      	bne.n	8016712 <_write_r+0x1e>
 801670c:	682b      	ldr	r3, [r5, #0]
 801670e:	b103      	cbz	r3, 8016712 <_write_r+0x1e>
 8016710:	6023      	str	r3, [r4, #0]
 8016712:	bd38      	pop	{r3, r4, r5, pc}
 8016714:	2000dfd4 	.word	0x2000dfd4

08016718 <__errno>:
 8016718:	4b01      	ldr	r3, [pc, #4]	@ (8016720 <__errno+0x8>)
 801671a:	6818      	ldr	r0, [r3, #0]
 801671c:	4770      	bx	lr
 801671e:	bf00      	nop
 8016720:	200002b4 	.word	0x200002b4

08016724 <__libc_init_array>:
 8016724:	b570      	push	{r4, r5, r6, lr}
 8016726:	4d0d      	ldr	r5, [pc, #52]	@ (801675c <__libc_init_array+0x38>)
 8016728:	4c0d      	ldr	r4, [pc, #52]	@ (8016760 <__libc_init_array+0x3c>)
 801672a:	1b64      	subs	r4, r4, r5
 801672c:	10a4      	asrs	r4, r4, #2
 801672e:	2600      	movs	r6, #0
 8016730:	42a6      	cmp	r6, r4
 8016732:	d109      	bne.n	8016748 <__libc_init_array+0x24>
 8016734:	4d0b      	ldr	r5, [pc, #44]	@ (8016764 <__libc_init_array+0x40>)
 8016736:	4c0c      	ldr	r4, [pc, #48]	@ (8016768 <__libc_init_array+0x44>)
 8016738:	f000 fef6 	bl	8017528 <_init>
 801673c:	1b64      	subs	r4, r4, r5
 801673e:	10a4      	asrs	r4, r4, #2
 8016740:	2600      	movs	r6, #0
 8016742:	42a6      	cmp	r6, r4
 8016744:	d105      	bne.n	8016752 <__libc_init_array+0x2e>
 8016746:	bd70      	pop	{r4, r5, r6, pc}
 8016748:	f855 3b04 	ldr.w	r3, [r5], #4
 801674c:	4798      	blx	r3
 801674e:	3601      	adds	r6, #1
 8016750:	e7ee      	b.n	8016730 <__libc_init_array+0xc>
 8016752:	f855 3b04 	ldr.w	r3, [r5], #4
 8016756:	4798      	blx	r3
 8016758:	3601      	adds	r6, #1
 801675a:	e7f2      	b.n	8016742 <__libc_init_array+0x1e>
 801675c:	08018394 	.word	0x08018394
 8016760:	08018394 	.word	0x08018394
 8016764:	08018394 	.word	0x08018394
 8016768:	080183a0 	.word	0x080183a0

0801676c <__retarget_lock_init_recursive>:
 801676c:	4770      	bx	lr

0801676e <__retarget_lock_acquire_recursive>:
 801676e:	4770      	bx	lr

08016770 <__retarget_lock_release_recursive>:
 8016770:	4770      	bx	lr

08016772 <strcpy>:
 8016772:	4603      	mov	r3, r0
 8016774:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016778:	f803 2b01 	strb.w	r2, [r3], #1
 801677c:	2a00      	cmp	r2, #0
 801677e:	d1f9      	bne.n	8016774 <strcpy+0x2>
 8016780:	4770      	bx	lr

08016782 <memcpy>:
 8016782:	440a      	add	r2, r1
 8016784:	4291      	cmp	r1, r2
 8016786:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801678a:	d100      	bne.n	801678e <memcpy+0xc>
 801678c:	4770      	bx	lr
 801678e:	b510      	push	{r4, lr}
 8016790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016798:	4291      	cmp	r1, r2
 801679a:	d1f9      	bne.n	8016790 <memcpy+0xe>
 801679c:	bd10      	pop	{r4, pc}
	...

080167a0 <__assert_func>:
 80167a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167a2:	4614      	mov	r4, r2
 80167a4:	461a      	mov	r2, r3
 80167a6:	4b09      	ldr	r3, [pc, #36]	@ (80167cc <__assert_func+0x2c>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	4605      	mov	r5, r0
 80167ac:	68d8      	ldr	r0, [r3, #12]
 80167ae:	b954      	cbnz	r4, 80167c6 <__assert_func+0x26>
 80167b0:	4b07      	ldr	r3, [pc, #28]	@ (80167d0 <__assert_func+0x30>)
 80167b2:	461c      	mov	r4, r3
 80167b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167b8:	9100      	str	r1, [sp, #0]
 80167ba:	462b      	mov	r3, r5
 80167bc:	4905      	ldr	r1, [pc, #20]	@ (80167d4 <__assert_func+0x34>)
 80167be:	f000 fbfd 	bl	8016fbc <fiprintf>
 80167c2:	f000 fc0d 	bl	8016fe0 <abort>
 80167c6:	4b04      	ldr	r3, [pc, #16]	@ (80167d8 <__assert_func+0x38>)
 80167c8:	e7f4      	b.n	80167b4 <__assert_func+0x14>
 80167ca:	bf00      	nop
 80167cc:	200002b4 	.word	0x200002b4
 80167d0:	08018357 	.word	0x08018357
 80167d4:	08018329 	.word	0x08018329
 80167d8:	0801831c 	.word	0x0801831c

080167dc <__env_lock>:
 80167dc:	4801      	ldr	r0, [pc, #4]	@ (80167e4 <__env_lock+0x8>)
 80167de:	f7ff bfc6 	b.w	801676e <__retarget_lock_acquire_recursive>
 80167e2:	bf00      	nop
 80167e4:	2000dfd8 	.word	0x2000dfd8

080167e8 <__env_unlock>:
 80167e8:	4801      	ldr	r0, [pc, #4]	@ (80167f0 <__env_unlock+0x8>)
 80167ea:	f7ff bfc1 	b.w	8016770 <__retarget_lock_release_recursive>
 80167ee:	bf00      	nop
 80167f0:	2000dfd8 	.word	0x2000dfd8

080167f4 <_free_r>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	4605      	mov	r5, r0
 80167f8:	2900      	cmp	r1, #0
 80167fa:	d041      	beq.n	8016880 <_free_r+0x8c>
 80167fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016800:	1f0c      	subs	r4, r1, #4
 8016802:	2b00      	cmp	r3, #0
 8016804:	bfb8      	it	lt
 8016806:	18e4      	addlt	r4, r4, r3
 8016808:	f7ff fc30 	bl	801606c <__malloc_lock>
 801680c:	4a1d      	ldr	r2, [pc, #116]	@ (8016884 <_free_r+0x90>)
 801680e:	6813      	ldr	r3, [r2, #0]
 8016810:	b933      	cbnz	r3, 8016820 <_free_r+0x2c>
 8016812:	6063      	str	r3, [r4, #4]
 8016814:	6014      	str	r4, [r2, #0]
 8016816:	4628      	mov	r0, r5
 8016818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801681c:	f7ff bc2c 	b.w	8016078 <__malloc_unlock>
 8016820:	42a3      	cmp	r3, r4
 8016822:	d908      	bls.n	8016836 <_free_r+0x42>
 8016824:	6820      	ldr	r0, [r4, #0]
 8016826:	1821      	adds	r1, r4, r0
 8016828:	428b      	cmp	r3, r1
 801682a:	bf01      	itttt	eq
 801682c:	6819      	ldreq	r1, [r3, #0]
 801682e:	685b      	ldreq	r3, [r3, #4]
 8016830:	1809      	addeq	r1, r1, r0
 8016832:	6021      	streq	r1, [r4, #0]
 8016834:	e7ed      	b.n	8016812 <_free_r+0x1e>
 8016836:	461a      	mov	r2, r3
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	b10b      	cbz	r3, 8016840 <_free_r+0x4c>
 801683c:	42a3      	cmp	r3, r4
 801683e:	d9fa      	bls.n	8016836 <_free_r+0x42>
 8016840:	6811      	ldr	r1, [r2, #0]
 8016842:	1850      	adds	r0, r2, r1
 8016844:	42a0      	cmp	r0, r4
 8016846:	d10b      	bne.n	8016860 <_free_r+0x6c>
 8016848:	6820      	ldr	r0, [r4, #0]
 801684a:	4401      	add	r1, r0
 801684c:	1850      	adds	r0, r2, r1
 801684e:	4283      	cmp	r3, r0
 8016850:	6011      	str	r1, [r2, #0]
 8016852:	d1e0      	bne.n	8016816 <_free_r+0x22>
 8016854:	6818      	ldr	r0, [r3, #0]
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	6053      	str	r3, [r2, #4]
 801685a:	4408      	add	r0, r1
 801685c:	6010      	str	r0, [r2, #0]
 801685e:	e7da      	b.n	8016816 <_free_r+0x22>
 8016860:	d902      	bls.n	8016868 <_free_r+0x74>
 8016862:	230c      	movs	r3, #12
 8016864:	602b      	str	r3, [r5, #0]
 8016866:	e7d6      	b.n	8016816 <_free_r+0x22>
 8016868:	6820      	ldr	r0, [r4, #0]
 801686a:	1821      	adds	r1, r4, r0
 801686c:	428b      	cmp	r3, r1
 801686e:	bf04      	itt	eq
 8016870:	6819      	ldreq	r1, [r3, #0]
 8016872:	685b      	ldreq	r3, [r3, #4]
 8016874:	6063      	str	r3, [r4, #4]
 8016876:	bf04      	itt	eq
 8016878:	1809      	addeq	r1, r1, r0
 801687a:	6021      	streq	r1, [r4, #0]
 801687c:	6054      	str	r4, [r2, #4]
 801687e:	e7ca      	b.n	8016816 <_free_r+0x22>
 8016880:	bd38      	pop	{r3, r4, r5, pc}
 8016882:	bf00      	nop
 8016884:	2000de94 	.word	0x2000de94

08016888 <_malloc_usable_size_r>:
 8016888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801688c:	1f18      	subs	r0, r3, #4
 801688e:	2b00      	cmp	r3, #0
 8016890:	bfbc      	itt	lt
 8016892:	580b      	ldrlt	r3, [r1, r0]
 8016894:	18c0      	addlt	r0, r0, r3
 8016896:	4770      	bx	lr

08016898 <__ssputs_r>:
 8016898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801689c:	688e      	ldr	r6, [r1, #8]
 801689e:	461f      	mov	r7, r3
 80168a0:	42be      	cmp	r6, r7
 80168a2:	680b      	ldr	r3, [r1, #0]
 80168a4:	4682      	mov	sl, r0
 80168a6:	460c      	mov	r4, r1
 80168a8:	4690      	mov	r8, r2
 80168aa:	d82d      	bhi.n	8016908 <__ssputs_r+0x70>
 80168ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80168b4:	d026      	beq.n	8016904 <__ssputs_r+0x6c>
 80168b6:	6965      	ldr	r5, [r4, #20]
 80168b8:	6909      	ldr	r1, [r1, #16]
 80168ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168be:	eba3 0901 	sub.w	r9, r3, r1
 80168c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80168c6:	1c7b      	adds	r3, r7, #1
 80168c8:	444b      	add	r3, r9
 80168ca:	106d      	asrs	r5, r5, #1
 80168cc:	429d      	cmp	r5, r3
 80168ce:	bf38      	it	cc
 80168d0:	461d      	movcc	r5, r3
 80168d2:	0553      	lsls	r3, r2, #21
 80168d4:	d527      	bpl.n	8016926 <__ssputs_r+0x8e>
 80168d6:	4629      	mov	r1, r5
 80168d8:	f7ff fb48 	bl	8015f6c <_malloc_r>
 80168dc:	4606      	mov	r6, r0
 80168de:	b360      	cbz	r0, 801693a <__ssputs_r+0xa2>
 80168e0:	6921      	ldr	r1, [r4, #16]
 80168e2:	464a      	mov	r2, r9
 80168e4:	f7ff ff4d 	bl	8016782 <memcpy>
 80168e8:	89a3      	ldrh	r3, [r4, #12]
 80168ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80168ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80168f2:	81a3      	strh	r3, [r4, #12]
 80168f4:	6126      	str	r6, [r4, #16]
 80168f6:	6165      	str	r5, [r4, #20]
 80168f8:	444e      	add	r6, r9
 80168fa:	eba5 0509 	sub.w	r5, r5, r9
 80168fe:	6026      	str	r6, [r4, #0]
 8016900:	60a5      	str	r5, [r4, #8]
 8016902:	463e      	mov	r6, r7
 8016904:	42be      	cmp	r6, r7
 8016906:	d900      	bls.n	801690a <__ssputs_r+0x72>
 8016908:	463e      	mov	r6, r7
 801690a:	6820      	ldr	r0, [r4, #0]
 801690c:	4632      	mov	r2, r6
 801690e:	4641      	mov	r1, r8
 8016910:	f7ff fe54 	bl	80165bc <memmove>
 8016914:	68a3      	ldr	r3, [r4, #8]
 8016916:	1b9b      	subs	r3, r3, r6
 8016918:	60a3      	str	r3, [r4, #8]
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	4433      	add	r3, r6
 801691e:	6023      	str	r3, [r4, #0]
 8016920:	2000      	movs	r0, #0
 8016922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016926:	462a      	mov	r2, r5
 8016928:	f7ff fc20 	bl	801616c <_realloc_r>
 801692c:	4606      	mov	r6, r0
 801692e:	2800      	cmp	r0, #0
 8016930:	d1e0      	bne.n	80168f4 <__ssputs_r+0x5c>
 8016932:	6921      	ldr	r1, [r4, #16]
 8016934:	4650      	mov	r0, sl
 8016936:	f7ff ff5d 	bl	80167f4 <_free_r>
 801693a:	230c      	movs	r3, #12
 801693c:	f8ca 3000 	str.w	r3, [sl]
 8016940:	89a3      	ldrh	r3, [r4, #12]
 8016942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016946:	81a3      	strh	r3, [r4, #12]
 8016948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801694c:	e7e9      	b.n	8016922 <__ssputs_r+0x8a>
	...

08016950 <_svfiprintf_r>:
 8016950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016954:	4698      	mov	r8, r3
 8016956:	898b      	ldrh	r3, [r1, #12]
 8016958:	061b      	lsls	r3, r3, #24
 801695a:	b09d      	sub	sp, #116	@ 0x74
 801695c:	4607      	mov	r7, r0
 801695e:	460d      	mov	r5, r1
 8016960:	4614      	mov	r4, r2
 8016962:	d510      	bpl.n	8016986 <_svfiprintf_r+0x36>
 8016964:	690b      	ldr	r3, [r1, #16]
 8016966:	b973      	cbnz	r3, 8016986 <_svfiprintf_r+0x36>
 8016968:	2140      	movs	r1, #64	@ 0x40
 801696a:	f7ff faff 	bl	8015f6c <_malloc_r>
 801696e:	6028      	str	r0, [r5, #0]
 8016970:	6128      	str	r0, [r5, #16]
 8016972:	b930      	cbnz	r0, 8016982 <_svfiprintf_r+0x32>
 8016974:	230c      	movs	r3, #12
 8016976:	603b      	str	r3, [r7, #0]
 8016978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801697c:	b01d      	add	sp, #116	@ 0x74
 801697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016982:	2340      	movs	r3, #64	@ 0x40
 8016984:	616b      	str	r3, [r5, #20]
 8016986:	2300      	movs	r3, #0
 8016988:	9309      	str	r3, [sp, #36]	@ 0x24
 801698a:	2320      	movs	r3, #32
 801698c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016990:	f8cd 800c 	str.w	r8, [sp, #12]
 8016994:	2330      	movs	r3, #48	@ 0x30
 8016996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016b34 <_svfiprintf_r+0x1e4>
 801699a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801699e:	f04f 0901 	mov.w	r9, #1
 80169a2:	4623      	mov	r3, r4
 80169a4:	469a      	mov	sl, r3
 80169a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169aa:	b10a      	cbz	r2, 80169b0 <_svfiprintf_r+0x60>
 80169ac:	2a25      	cmp	r2, #37	@ 0x25
 80169ae:	d1f9      	bne.n	80169a4 <_svfiprintf_r+0x54>
 80169b0:	ebba 0b04 	subs.w	fp, sl, r4
 80169b4:	d00b      	beq.n	80169ce <_svfiprintf_r+0x7e>
 80169b6:	465b      	mov	r3, fp
 80169b8:	4622      	mov	r2, r4
 80169ba:	4629      	mov	r1, r5
 80169bc:	4638      	mov	r0, r7
 80169be:	f7ff ff6b 	bl	8016898 <__ssputs_r>
 80169c2:	3001      	adds	r0, #1
 80169c4:	f000 80a7 	beq.w	8016b16 <_svfiprintf_r+0x1c6>
 80169c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80169ca:	445a      	add	r2, fp
 80169cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80169ce:	f89a 3000 	ldrb.w	r3, [sl]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	f000 809f 	beq.w	8016b16 <_svfiprintf_r+0x1c6>
 80169d8:	2300      	movs	r3, #0
 80169da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169e2:	f10a 0a01 	add.w	sl, sl, #1
 80169e6:	9304      	str	r3, [sp, #16]
 80169e8:	9307      	str	r3, [sp, #28]
 80169ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80169ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80169f0:	4654      	mov	r4, sl
 80169f2:	2205      	movs	r2, #5
 80169f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169f8:	484e      	ldr	r0, [pc, #312]	@ (8016b34 <_svfiprintf_r+0x1e4>)
 80169fa:	f7e9 fc09 	bl	8000210 <memchr>
 80169fe:	9a04      	ldr	r2, [sp, #16]
 8016a00:	b9d8      	cbnz	r0, 8016a3a <_svfiprintf_r+0xea>
 8016a02:	06d0      	lsls	r0, r2, #27
 8016a04:	bf44      	itt	mi
 8016a06:	2320      	movmi	r3, #32
 8016a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a0c:	0711      	lsls	r1, r2, #28
 8016a0e:	bf44      	itt	mi
 8016a10:	232b      	movmi	r3, #43	@ 0x2b
 8016a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a16:	f89a 3000 	ldrb.w	r3, [sl]
 8016a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a1c:	d015      	beq.n	8016a4a <_svfiprintf_r+0xfa>
 8016a1e:	9a07      	ldr	r2, [sp, #28]
 8016a20:	4654      	mov	r4, sl
 8016a22:	2000      	movs	r0, #0
 8016a24:	f04f 0c0a 	mov.w	ip, #10
 8016a28:	4621      	mov	r1, r4
 8016a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a2e:	3b30      	subs	r3, #48	@ 0x30
 8016a30:	2b09      	cmp	r3, #9
 8016a32:	d94b      	bls.n	8016acc <_svfiprintf_r+0x17c>
 8016a34:	b1b0      	cbz	r0, 8016a64 <_svfiprintf_r+0x114>
 8016a36:	9207      	str	r2, [sp, #28]
 8016a38:	e014      	b.n	8016a64 <_svfiprintf_r+0x114>
 8016a3a:	eba0 0308 	sub.w	r3, r0, r8
 8016a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8016a42:	4313      	orrs	r3, r2
 8016a44:	9304      	str	r3, [sp, #16]
 8016a46:	46a2      	mov	sl, r4
 8016a48:	e7d2      	b.n	80169f0 <_svfiprintf_r+0xa0>
 8016a4a:	9b03      	ldr	r3, [sp, #12]
 8016a4c:	1d19      	adds	r1, r3, #4
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	9103      	str	r1, [sp, #12]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	bfbb      	ittet	lt
 8016a56:	425b      	neglt	r3, r3
 8016a58:	f042 0202 	orrlt.w	r2, r2, #2
 8016a5c:	9307      	strge	r3, [sp, #28]
 8016a5e:	9307      	strlt	r3, [sp, #28]
 8016a60:	bfb8      	it	lt
 8016a62:	9204      	strlt	r2, [sp, #16]
 8016a64:	7823      	ldrb	r3, [r4, #0]
 8016a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a68:	d10a      	bne.n	8016a80 <_svfiprintf_r+0x130>
 8016a6a:	7863      	ldrb	r3, [r4, #1]
 8016a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a6e:	d132      	bne.n	8016ad6 <_svfiprintf_r+0x186>
 8016a70:	9b03      	ldr	r3, [sp, #12]
 8016a72:	1d1a      	adds	r2, r3, #4
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	9203      	str	r2, [sp, #12]
 8016a78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016a7c:	3402      	adds	r4, #2
 8016a7e:	9305      	str	r3, [sp, #20]
 8016a80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016b44 <_svfiprintf_r+0x1f4>
 8016a84:	7821      	ldrb	r1, [r4, #0]
 8016a86:	2203      	movs	r2, #3
 8016a88:	4650      	mov	r0, sl
 8016a8a:	f7e9 fbc1 	bl	8000210 <memchr>
 8016a8e:	b138      	cbz	r0, 8016aa0 <_svfiprintf_r+0x150>
 8016a90:	9b04      	ldr	r3, [sp, #16]
 8016a92:	eba0 000a 	sub.w	r0, r0, sl
 8016a96:	2240      	movs	r2, #64	@ 0x40
 8016a98:	4082      	lsls	r2, r0
 8016a9a:	4313      	orrs	r3, r2
 8016a9c:	3401      	adds	r4, #1
 8016a9e:	9304      	str	r3, [sp, #16]
 8016aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aa4:	4824      	ldr	r0, [pc, #144]	@ (8016b38 <_svfiprintf_r+0x1e8>)
 8016aa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016aaa:	2206      	movs	r2, #6
 8016aac:	f7e9 fbb0 	bl	8000210 <memchr>
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d036      	beq.n	8016b22 <_svfiprintf_r+0x1d2>
 8016ab4:	4b21      	ldr	r3, [pc, #132]	@ (8016b3c <_svfiprintf_r+0x1ec>)
 8016ab6:	bb1b      	cbnz	r3, 8016b00 <_svfiprintf_r+0x1b0>
 8016ab8:	9b03      	ldr	r3, [sp, #12]
 8016aba:	3307      	adds	r3, #7
 8016abc:	f023 0307 	bic.w	r3, r3, #7
 8016ac0:	3308      	adds	r3, #8
 8016ac2:	9303      	str	r3, [sp, #12]
 8016ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ac6:	4433      	add	r3, r6
 8016ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016aca:	e76a      	b.n	80169a2 <_svfiprintf_r+0x52>
 8016acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ad0:	460c      	mov	r4, r1
 8016ad2:	2001      	movs	r0, #1
 8016ad4:	e7a8      	b.n	8016a28 <_svfiprintf_r+0xd8>
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	3401      	adds	r4, #1
 8016ada:	9305      	str	r3, [sp, #20]
 8016adc:	4619      	mov	r1, r3
 8016ade:	f04f 0c0a 	mov.w	ip, #10
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ae8:	3a30      	subs	r2, #48	@ 0x30
 8016aea:	2a09      	cmp	r2, #9
 8016aec:	d903      	bls.n	8016af6 <_svfiprintf_r+0x1a6>
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d0c6      	beq.n	8016a80 <_svfiprintf_r+0x130>
 8016af2:	9105      	str	r1, [sp, #20]
 8016af4:	e7c4      	b.n	8016a80 <_svfiprintf_r+0x130>
 8016af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8016afa:	4604      	mov	r4, r0
 8016afc:	2301      	movs	r3, #1
 8016afe:	e7f0      	b.n	8016ae2 <_svfiprintf_r+0x192>
 8016b00:	ab03      	add	r3, sp, #12
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	462a      	mov	r2, r5
 8016b06:	4b0e      	ldr	r3, [pc, #56]	@ (8016b40 <_svfiprintf_r+0x1f0>)
 8016b08:	a904      	add	r1, sp, #16
 8016b0a:	4638      	mov	r0, r7
 8016b0c:	f3af 8000 	nop.w
 8016b10:	1c42      	adds	r2, r0, #1
 8016b12:	4606      	mov	r6, r0
 8016b14:	d1d6      	bne.n	8016ac4 <_svfiprintf_r+0x174>
 8016b16:	89ab      	ldrh	r3, [r5, #12]
 8016b18:	065b      	lsls	r3, r3, #25
 8016b1a:	f53f af2d 	bmi.w	8016978 <_svfiprintf_r+0x28>
 8016b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b20:	e72c      	b.n	801697c <_svfiprintf_r+0x2c>
 8016b22:	ab03      	add	r3, sp, #12
 8016b24:	9300      	str	r3, [sp, #0]
 8016b26:	462a      	mov	r2, r5
 8016b28:	4b05      	ldr	r3, [pc, #20]	@ (8016b40 <_svfiprintf_r+0x1f0>)
 8016b2a:	a904      	add	r1, sp, #16
 8016b2c:	4638      	mov	r0, r7
 8016b2e:	f000 f879 	bl	8016c24 <_printf_i>
 8016b32:	e7ed      	b.n	8016b10 <_svfiprintf_r+0x1c0>
 8016b34:	08018358 	.word	0x08018358
 8016b38:	08018362 	.word	0x08018362
 8016b3c:	00000000 	.word	0x00000000
 8016b40:	08016899 	.word	0x08016899
 8016b44:	0801835e 	.word	0x0801835e

08016b48 <_printf_common>:
 8016b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b4c:	4616      	mov	r6, r2
 8016b4e:	4698      	mov	r8, r3
 8016b50:	688a      	ldr	r2, [r1, #8]
 8016b52:	690b      	ldr	r3, [r1, #16]
 8016b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016b58:	4293      	cmp	r3, r2
 8016b5a:	bfb8      	it	lt
 8016b5c:	4613      	movlt	r3, r2
 8016b5e:	6033      	str	r3, [r6, #0]
 8016b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016b64:	4607      	mov	r7, r0
 8016b66:	460c      	mov	r4, r1
 8016b68:	b10a      	cbz	r2, 8016b6e <_printf_common+0x26>
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	6033      	str	r3, [r6, #0]
 8016b6e:	6823      	ldr	r3, [r4, #0]
 8016b70:	0699      	lsls	r1, r3, #26
 8016b72:	bf42      	ittt	mi
 8016b74:	6833      	ldrmi	r3, [r6, #0]
 8016b76:	3302      	addmi	r3, #2
 8016b78:	6033      	strmi	r3, [r6, #0]
 8016b7a:	6825      	ldr	r5, [r4, #0]
 8016b7c:	f015 0506 	ands.w	r5, r5, #6
 8016b80:	d106      	bne.n	8016b90 <_printf_common+0x48>
 8016b82:	f104 0a19 	add.w	sl, r4, #25
 8016b86:	68e3      	ldr	r3, [r4, #12]
 8016b88:	6832      	ldr	r2, [r6, #0]
 8016b8a:	1a9b      	subs	r3, r3, r2
 8016b8c:	42ab      	cmp	r3, r5
 8016b8e:	dc26      	bgt.n	8016bde <_printf_common+0x96>
 8016b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016b94:	6822      	ldr	r2, [r4, #0]
 8016b96:	3b00      	subs	r3, #0
 8016b98:	bf18      	it	ne
 8016b9a:	2301      	movne	r3, #1
 8016b9c:	0692      	lsls	r2, r2, #26
 8016b9e:	d42b      	bmi.n	8016bf8 <_printf_common+0xb0>
 8016ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016ba4:	4641      	mov	r1, r8
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	47c8      	blx	r9
 8016baa:	3001      	adds	r0, #1
 8016bac:	d01e      	beq.n	8016bec <_printf_common+0xa4>
 8016bae:	6823      	ldr	r3, [r4, #0]
 8016bb0:	6922      	ldr	r2, [r4, #16]
 8016bb2:	f003 0306 	and.w	r3, r3, #6
 8016bb6:	2b04      	cmp	r3, #4
 8016bb8:	bf02      	ittt	eq
 8016bba:	68e5      	ldreq	r5, [r4, #12]
 8016bbc:	6833      	ldreq	r3, [r6, #0]
 8016bbe:	1aed      	subeq	r5, r5, r3
 8016bc0:	68a3      	ldr	r3, [r4, #8]
 8016bc2:	bf0c      	ite	eq
 8016bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bc8:	2500      	movne	r5, #0
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	bfc4      	itt	gt
 8016bce:	1a9b      	subgt	r3, r3, r2
 8016bd0:	18ed      	addgt	r5, r5, r3
 8016bd2:	2600      	movs	r6, #0
 8016bd4:	341a      	adds	r4, #26
 8016bd6:	42b5      	cmp	r5, r6
 8016bd8:	d11a      	bne.n	8016c10 <_printf_common+0xc8>
 8016bda:	2000      	movs	r0, #0
 8016bdc:	e008      	b.n	8016bf0 <_printf_common+0xa8>
 8016bde:	2301      	movs	r3, #1
 8016be0:	4652      	mov	r2, sl
 8016be2:	4641      	mov	r1, r8
 8016be4:	4638      	mov	r0, r7
 8016be6:	47c8      	blx	r9
 8016be8:	3001      	adds	r0, #1
 8016bea:	d103      	bne.n	8016bf4 <_printf_common+0xac>
 8016bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf4:	3501      	adds	r5, #1
 8016bf6:	e7c6      	b.n	8016b86 <_printf_common+0x3e>
 8016bf8:	18e1      	adds	r1, r4, r3
 8016bfa:	1c5a      	adds	r2, r3, #1
 8016bfc:	2030      	movs	r0, #48	@ 0x30
 8016bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016c02:	4422      	add	r2, r4
 8016c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016c0c:	3302      	adds	r3, #2
 8016c0e:	e7c7      	b.n	8016ba0 <_printf_common+0x58>
 8016c10:	2301      	movs	r3, #1
 8016c12:	4622      	mov	r2, r4
 8016c14:	4641      	mov	r1, r8
 8016c16:	4638      	mov	r0, r7
 8016c18:	47c8      	blx	r9
 8016c1a:	3001      	adds	r0, #1
 8016c1c:	d0e6      	beq.n	8016bec <_printf_common+0xa4>
 8016c1e:	3601      	adds	r6, #1
 8016c20:	e7d9      	b.n	8016bd6 <_printf_common+0x8e>
	...

08016c24 <_printf_i>:
 8016c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c28:	7e0f      	ldrb	r7, [r1, #24]
 8016c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016c2c:	2f78      	cmp	r7, #120	@ 0x78
 8016c2e:	4691      	mov	r9, r2
 8016c30:	4680      	mov	r8, r0
 8016c32:	460c      	mov	r4, r1
 8016c34:	469a      	mov	sl, r3
 8016c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016c3a:	d807      	bhi.n	8016c4c <_printf_i+0x28>
 8016c3c:	2f62      	cmp	r7, #98	@ 0x62
 8016c3e:	d80a      	bhi.n	8016c56 <_printf_i+0x32>
 8016c40:	2f00      	cmp	r7, #0
 8016c42:	f000 80d2 	beq.w	8016dea <_printf_i+0x1c6>
 8016c46:	2f58      	cmp	r7, #88	@ 0x58
 8016c48:	f000 80b9 	beq.w	8016dbe <_printf_i+0x19a>
 8016c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016c54:	e03a      	b.n	8016ccc <_printf_i+0xa8>
 8016c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016c5a:	2b15      	cmp	r3, #21
 8016c5c:	d8f6      	bhi.n	8016c4c <_printf_i+0x28>
 8016c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8016c64 <_printf_i+0x40>)
 8016c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c64:	08016cbd 	.word	0x08016cbd
 8016c68:	08016cd1 	.word	0x08016cd1
 8016c6c:	08016c4d 	.word	0x08016c4d
 8016c70:	08016c4d 	.word	0x08016c4d
 8016c74:	08016c4d 	.word	0x08016c4d
 8016c78:	08016c4d 	.word	0x08016c4d
 8016c7c:	08016cd1 	.word	0x08016cd1
 8016c80:	08016c4d 	.word	0x08016c4d
 8016c84:	08016c4d 	.word	0x08016c4d
 8016c88:	08016c4d 	.word	0x08016c4d
 8016c8c:	08016c4d 	.word	0x08016c4d
 8016c90:	08016dd1 	.word	0x08016dd1
 8016c94:	08016cfb 	.word	0x08016cfb
 8016c98:	08016d8b 	.word	0x08016d8b
 8016c9c:	08016c4d 	.word	0x08016c4d
 8016ca0:	08016c4d 	.word	0x08016c4d
 8016ca4:	08016df3 	.word	0x08016df3
 8016ca8:	08016c4d 	.word	0x08016c4d
 8016cac:	08016cfb 	.word	0x08016cfb
 8016cb0:	08016c4d 	.word	0x08016c4d
 8016cb4:	08016c4d 	.word	0x08016c4d
 8016cb8:	08016d93 	.word	0x08016d93
 8016cbc:	6833      	ldr	r3, [r6, #0]
 8016cbe:	1d1a      	adds	r2, r3, #4
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	6032      	str	r2, [r6, #0]
 8016cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016ccc:	2301      	movs	r3, #1
 8016cce:	e09d      	b.n	8016e0c <_printf_i+0x1e8>
 8016cd0:	6833      	ldr	r3, [r6, #0]
 8016cd2:	6820      	ldr	r0, [r4, #0]
 8016cd4:	1d19      	adds	r1, r3, #4
 8016cd6:	6031      	str	r1, [r6, #0]
 8016cd8:	0606      	lsls	r6, r0, #24
 8016cda:	d501      	bpl.n	8016ce0 <_printf_i+0xbc>
 8016cdc:	681d      	ldr	r5, [r3, #0]
 8016cde:	e003      	b.n	8016ce8 <_printf_i+0xc4>
 8016ce0:	0645      	lsls	r5, r0, #25
 8016ce2:	d5fb      	bpl.n	8016cdc <_printf_i+0xb8>
 8016ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016ce8:	2d00      	cmp	r5, #0
 8016cea:	da03      	bge.n	8016cf4 <_printf_i+0xd0>
 8016cec:	232d      	movs	r3, #45	@ 0x2d
 8016cee:	426d      	negs	r5, r5
 8016cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016cf4:	4859      	ldr	r0, [pc, #356]	@ (8016e5c <_printf_i+0x238>)
 8016cf6:	230a      	movs	r3, #10
 8016cf8:	e011      	b.n	8016d1e <_printf_i+0xfa>
 8016cfa:	6821      	ldr	r1, [r4, #0]
 8016cfc:	6833      	ldr	r3, [r6, #0]
 8016cfe:	0608      	lsls	r0, r1, #24
 8016d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8016d04:	d402      	bmi.n	8016d0c <_printf_i+0xe8>
 8016d06:	0649      	lsls	r1, r1, #25
 8016d08:	bf48      	it	mi
 8016d0a:	b2ad      	uxthmi	r5, r5
 8016d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8016d0e:	4853      	ldr	r0, [pc, #332]	@ (8016e5c <_printf_i+0x238>)
 8016d10:	6033      	str	r3, [r6, #0]
 8016d12:	bf14      	ite	ne
 8016d14:	230a      	movne	r3, #10
 8016d16:	2308      	moveq	r3, #8
 8016d18:	2100      	movs	r1, #0
 8016d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016d1e:	6866      	ldr	r6, [r4, #4]
 8016d20:	60a6      	str	r6, [r4, #8]
 8016d22:	2e00      	cmp	r6, #0
 8016d24:	bfa2      	ittt	ge
 8016d26:	6821      	ldrge	r1, [r4, #0]
 8016d28:	f021 0104 	bicge.w	r1, r1, #4
 8016d2c:	6021      	strge	r1, [r4, #0]
 8016d2e:	b90d      	cbnz	r5, 8016d34 <_printf_i+0x110>
 8016d30:	2e00      	cmp	r6, #0
 8016d32:	d04b      	beq.n	8016dcc <_printf_i+0x1a8>
 8016d34:	4616      	mov	r6, r2
 8016d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8016d3e:	5dc7      	ldrb	r7, [r0, r7]
 8016d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016d44:	462f      	mov	r7, r5
 8016d46:	42bb      	cmp	r3, r7
 8016d48:	460d      	mov	r5, r1
 8016d4a:	d9f4      	bls.n	8016d36 <_printf_i+0x112>
 8016d4c:	2b08      	cmp	r3, #8
 8016d4e:	d10b      	bne.n	8016d68 <_printf_i+0x144>
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	07df      	lsls	r7, r3, #31
 8016d54:	d508      	bpl.n	8016d68 <_printf_i+0x144>
 8016d56:	6923      	ldr	r3, [r4, #16]
 8016d58:	6861      	ldr	r1, [r4, #4]
 8016d5a:	4299      	cmp	r1, r3
 8016d5c:	bfde      	ittt	le
 8016d5e:	2330      	movle	r3, #48	@ 0x30
 8016d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016d64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016d68:	1b92      	subs	r2, r2, r6
 8016d6a:	6122      	str	r2, [r4, #16]
 8016d6c:	f8cd a000 	str.w	sl, [sp]
 8016d70:	464b      	mov	r3, r9
 8016d72:	aa03      	add	r2, sp, #12
 8016d74:	4621      	mov	r1, r4
 8016d76:	4640      	mov	r0, r8
 8016d78:	f7ff fee6 	bl	8016b48 <_printf_common>
 8016d7c:	3001      	adds	r0, #1
 8016d7e:	d14a      	bne.n	8016e16 <_printf_i+0x1f2>
 8016d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d84:	b004      	add	sp, #16
 8016d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d8a:	6823      	ldr	r3, [r4, #0]
 8016d8c:	f043 0320 	orr.w	r3, r3, #32
 8016d90:	6023      	str	r3, [r4, #0]
 8016d92:	4833      	ldr	r0, [pc, #204]	@ (8016e60 <_printf_i+0x23c>)
 8016d94:	2778      	movs	r7, #120	@ 0x78
 8016d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016d9a:	6823      	ldr	r3, [r4, #0]
 8016d9c:	6831      	ldr	r1, [r6, #0]
 8016d9e:	061f      	lsls	r7, r3, #24
 8016da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8016da4:	d402      	bmi.n	8016dac <_printf_i+0x188>
 8016da6:	065f      	lsls	r7, r3, #25
 8016da8:	bf48      	it	mi
 8016daa:	b2ad      	uxthmi	r5, r5
 8016dac:	6031      	str	r1, [r6, #0]
 8016dae:	07d9      	lsls	r1, r3, #31
 8016db0:	bf44      	itt	mi
 8016db2:	f043 0320 	orrmi.w	r3, r3, #32
 8016db6:	6023      	strmi	r3, [r4, #0]
 8016db8:	b11d      	cbz	r5, 8016dc2 <_printf_i+0x19e>
 8016dba:	2310      	movs	r3, #16
 8016dbc:	e7ac      	b.n	8016d18 <_printf_i+0xf4>
 8016dbe:	4827      	ldr	r0, [pc, #156]	@ (8016e5c <_printf_i+0x238>)
 8016dc0:	e7e9      	b.n	8016d96 <_printf_i+0x172>
 8016dc2:	6823      	ldr	r3, [r4, #0]
 8016dc4:	f023 0320 	bic.w	r3, r3, #32
 8016dc8:	6023      	str	r3, [r4, #0]
 8016dca:	e7f6      	b.n	8016dba <_printf_i+0x196>
 8016dcc:	4616      	mov	r6, r2
 8016dce:	e7bd      	b.n	8016d4c <_printf_i+0x128>
 8016dd0:	6833      	ldr	r3, [r6, #0]
 8016dd2:	6825      	ldr	r5, [r4, #0]
 8016dd4:	6961      	ldr	r1, [r4, #20]
 8016dd6:	1d18      	adds	r0, r3, #4
 8016dd8:	6030      	str	r0, [r6, #0]
 8016dda:	062e      	lsls	r6, r5, #24
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	d501      	bpl.n	8016de4 <_printf_i+0x1c0>
 8016de0:	6019      	str	r1, [r3, #0]
 8016de2:	e002      	b.n	8016dea <_printf_i+0x1c6>
 8016de4:	0668      	lsls	r0, r5, #25
 8016de6:	d5fb      	bpl.n	8016de0 <_printf_i+0x1bc>
 8016de8:	8019      	strh	r1, [r3, #0]
 8016dea:	2300      	movs	r3, #0
 8016dec:	6123      	str	r3, [r4, #16]
 8016dee:	4616      	mov	r6, r2
 8016df0:	e7bc      	b.n	8016d6c <_printf_i+0x148>
 8016df2:	6833      	ldr	r3, [r6, #0]
 8016df4:	1d1a      	adds	r2, r3, #4
 8016df6:	6032      	str	r2, [r6, #0]
 8016df8:	681e      	ldr	r6, [r3, #0]
 8016dfa:	6862      	ldr	r2, [r4, #4]
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	4630      	mov	r0, r6
 8016e00:	f7e9 fa06 	bl	8000210 <memchr>
 8016e04:	b108      	cbz	r0, 8016e0a <_printf_i+0x1e6>
 8016e06:	1b80      	subs	r0, r0, r6
 8016e08:	6060      	str	r0, [r4, #4]
 8016e0a:	6863      	ldr	r3, [r4, #4]
 8016e0c:	6123      	str	r3, [r4, #16]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016e14:	e7aa      	b.n	8016d6c <_printf_i+0x148>
 8016e16:	6923      	ldr	r3, [r4, #16]
 8016e18:	4632      	mov	r2, r6
 8016e1a:	4649      	mov	r1, r9
 8016e1c:	4640      	mov	r0, r8
 8016e1e:	47d0      	blx	sl
 8016e20:	3001      	adds	r0, #1
 8016e22:	d0ad      	beq.n	8016d80 <_printf_i+0x15c>
 8016e24:	6823      	ldr	r3, [r4, #0]
 8016e26:	079b      	lsls	r3, r3, #30
 8016e28:	d413      	bmi.n	8016e52 <_printf_i+0x22e>
 8016e2a:	68e0      	ldr	r0, [r4, #12]
 8016e2c:	9b03      	ldr	r3, [sp, #12]
 8016e2e:	4298      	cmp	r0, r3
 8016e30:	bfb8      	it	lt
 8016e32:	4618      	movlt	r0, r3
 8016e34:	e7a6      	b.n	8016d84 <_printf_i+0x160>
 8016e36:	2301      	movs	r3, #1
 8016e38:	4632      	mov	r2, r6
 8016e3a:	4649      	mov	r1, r9
 8016e3c:	4640      	mov	r0, r8
 8016e3e:	47d0      	blx	sl
 8016e40:	3001      	adds	r0, #1
 8016e42:	d09d      	beq.n	8016d80 <_printf_i+0x15c>
 8016e44:	3501      	adds	r5, #1
 8016e46:	68e3      	ldr	r3, [r4, #12]
 8016e48:	9903      	ldr	r1, [sp, #12]
 8016e4a:	1a5b      	subs	r3, r3, r1
 8016e4c:	42ab      	cmp	r3, r5
 8016e4e:	dcf2      	bgt.n	8016e36 <_printf_i+0x212>
 8016e50:	e7eb      	b.n	8016e2a <_printf_i+0x206>
 8016e52:	2500      	movs	r5, #0
 8016e54:	f104 0619 	add.w	r6, r4, #25
 8016e58:	e7f5      	b.n	8016e46 <_printf_i+0x222>
 8016e5a:	bf00      	nop
 8016e5c:	08018369 	.word	0x08018369
 8016e60:	0801837a 	.word	0x0801837a

08016e64 <__sflush_r>:
 8016e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6c:	0716      	lsls	r6, r2, #28
 8016e6e:	4605      	mov	r5, r0
 8016e70:	460c      	mov	r4, r1
 8016e72:	d454      	bmi.n	8016f1e <__sflush_r+0xba>
 8016e74:	684b      	ldr	r3, [r1, #4]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	dc02      	bgt.n	8016e80 <__sflush_r+0x1c>
 8016e7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	dd48      	ble.n	8016f12 <__sflush_r+0xae>
 8016e80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016e82:	2e00      	cmp	r6, #0
 8016e84:	d045      	beq.n	8016f12 <__sflush_r+0xae>
 8016e86:	2300      	movs	r3, #0
 8016e88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016e8c:	682f      	ldr	r7, [r5, #0]
 8016e8e:	6a21      	ldr	r1, [r4, #32]
 8016e90:	602b      	str	r3, [r5, #0]
 8016e92:	d030      	beq.n	8016ef6 <__sflush_r+0x92>
 8016e94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	0759      	lsls	r1, r3, #29
 8016e9a:	d505      	bpl.n	8016ea8 <__sflush_r+0x44>
 8016e9c:	6863      	ldr	r3, [r4, #4]
 8016e9e:	1ad2      	subs	r2, r2, r3
 8016ea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016ea2:	b10b      	cbz	r3, 8016ea8 <__sflush_r+0x44>
 8016ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016ea6:	1ad2      	subs	r2, r2, r3
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016eac:	6a21      	ldr	r1, [r4, #32]
 8016eae:	4628      	mov	r0, r5
 8016eb0:	47b0      	blx	r6
 8016eb2:	1c43      	adds	r3, r0, #1
 8016eb4:	89a3      	ldrh	r3, [r4, #12]
 8016eb6:	d106      	bne.n	8016ec6 <__sflush_r+0x62>
 8016eb8:	6829      	ldr	r1, [r5, #0]
 8016eba:	291d      	cmp	r1, #29
 8016ebc:	d82b      	bhi.n	8016f16 <__sflush_r+0xb2>
 8016ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8016f68 <__sflush_r+0x104>)
 8016ec0:	410a      	asrs	r2, r1
 8016ec2:	07d6      	lsls	r6, r2, #31
 8016ec4:	d427      	bmi.n	8016f16 <__sflush_r+0xb2>
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	6062      	str	r2, [r4, #4]
 8016eca:	04d9      	lsls	r1, r3, #19
 8016ecc:	6922      	ldr	r2, [r4, #16]
 8016ece:	6022      	str	r2, [r4, #0]
 8016ed0:	d504      	bpl.n	8016edc <__sflush_r+0x78>
 8016ed2:	1c42      	adds	r2, r0, #1
 8016ed4:	d101      	bne.n	8016eda <__sflush_r+0x76>
 8016ed6:	682b      	ldr	r3, [r5, #0]
 8016ed8:	b903      	cbnz	r3, 8016edc <__sflush_r+0x78>
 8016eda:	6560      	str	r0, [r4, #84]	@ 0x54
 8016edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ede:	602f      	str	r7, [r5, #0]
 8016ee0:	b1b9      	cbz	r1, 8016f12 <__sflush_r+0xae>
 8016ee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ee6:	4299      	cmp	r1, r3
 8016ee8:	d002      	beq.n	8016ef0 <__sflush_r+0x8c>
 8016eea:	4628      	mov	r0, r5
 8016eec:	f7ff fc82 	bl	80167f4 <_free_r>
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ef4:	e00d      	b.n	8016f12 <__sflush_r+0xae>
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	4628      	mov	r0, r5
 8016efa:	47b0      	blx	r6
 8016efc:	4602      	mov	r2, r0
 8016efe:	1c50      	adds	r0, r2, #1
 8016f00:	d1c9      	bne.n	8016e96 <__sflush_r+0x32>
 8016f02:	682b      	ldr	r3, [r5, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d0c6      	beq.n	8016e96 <__sflush_r+0x32>
 8016f08:	2b1d      	cmp	r3, #29
 8016f0a:	d001      	beq.n	8016f10 <__sflush_r+0xac>
 8016f0c:	2b16      	cmp	r3, #22
 8016f0e:	d11e      	bne.n	8016f4e <__sflush_r+0xea>
 8016f10:	602f      	str	r7, [r5, #0]
 8016f12:	2000      	movs	r0, #0
 8016f14:	e022      	b.n	8016f5c <__sflush_r+0xf8>
 8016f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f1a:	b21b      	sxth	r3, r3
 8016f1c:	e01b      	b.n	8016f56 <__sflush_r+0xf2>
 8016f1e:	690f      	ldr	r7, [r1, #16]
 8016f20:	2f00      	cmp	r7, #0
 8016f22:	d0f6      	beq.n	8016f12 <__sflush_r+0xae>
 8016f24:	0793      	lsls	r3, r2, #30
 8016f26:	680e      	ldr	r6, [r1, #0]
 8016f28:	bf08      	it	eq
 8016f2a:	694b      	ldreq	r3, [r1, #20]
 8016f2c:	600f      	str	r7, [r1, #0]
 8016f2e:	bf18      	it	ne
 8016f30:	2300      	movne	r3, #0
 8016f32:	eba6 0807 	sub.w	r8, r6, r7
 8016f36:	608b      	str	r3, [r1, #8]
 8016f38:	f1b8 0f00 	cmp.w	r8, #0
 8016f3c:	dde9      	ble.n	8016f12 <__sflush_r+0xae>
 8016f3e:	6a21      	ldr	r1, [r4, #32]
 8016f40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016f42:	4643      	mov	r3, r8
 8016f44:	463a      	mov	r2, r7
 8016f46:	4628      	mov	r0, r5
 8016f48:	47b0      	blx	r6
 8016f4a:	2800      	cmp	r0, #0
 8016f4c:	dc08      	bgt.n	8016f60 <__sflush_r+0xfc>
 8016f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f56:	81a3      	strh	r3, [r4, #12]
 8016f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f60:	4407      	add	r7, r0
 8016f62:	eba8 0800 	sub.w	r8, r8, r0
 8016f66:	e7e7      	b.n	8016f38 <__sflush_r+0xd4>
 8016f68:	dfbffffe 	.word	0xdfbffffe

08016f6c <_fflush_r>:
 8016f6c:	b538      	push	{r3, r4, r5, lr}
 8016f6e:	690b      	ldr	r3, [r1, #16]
 8016f70:	4605      	mov	r5, r0
 8016f72:	460c      	mov	r4, r1
 8016f74:	b913      	cbnz	r3, 8016f7c <_fflush_r+0x10>
 8016f76:	2500      	movs	r5, #0
 8016f78:	4628      	mov	r0, r5
 8016f7a:	bd38      	pop	{r3, r4, r5, pc}
 8016f7c:	b118      	cbz	r0, 8016f86 <_fflush_r+0x1a>
 8016f7e:	6a03      	ldr	r3, [r0, #32]
 8016f80:	b90b      	cbnz	r3, 8016f86 <_fflush_r+0x1a>
 8016f82:	f7ff fa25 	bl	80163d0 <__sinit>
 8016f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d0f3      	beq.n	8016f76 <_fflush_r+0xa>
 8016f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016f90:	07d0      	lsls	r0, r2, #31
 8016f92:	d404      	bmi.n	8016f9e <_fflush_r+0x32>
 8016f94:	0599      	lsls	r1, r3, #22
 8016f96:	d402      	bmi.n	8016f9e <_fflush_r+0x32>
 8016f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f9a:	f7ff fbe8 	bl	801676e <__retarget_lock_acquire_recursive>
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f7ff ff5f 	bl	8016e64 <__sflush_r>
 8016fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016fa8:	07da      	lsls	r2, r3, #31
 8016faa:	4605      	mov	r5, r0
 8016fac:	d4e4      	bmi.n	8016f78 <_fflush_r+0xc>
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	059b      	lsls	r3, r3, #22
 8016fb2:	d4e1      	bmi.n	8016f78 <_fflush_r+0xc>
 8016fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016fb6:	f7ff fbdb 	bl	8016770 <__retarget_lock_release_recursive>
 8016fba:	e7dd      	b.n	8016f78 <_fflush_r+0xc>

08016fbc <fiprintf>:
 8016fbc:	b40e      	push	{r1, r2, r3}
 8016fbe:	b503      	push	{r0, r1, lr}
 8016fc0:	4601      	mov	r1, r0
 8016fc2:	ab03      	add	r3, sp, #12
 8016fc4:	4805      	ldr	r0, [pc, #20]	@ (8016fdc <fiprintf+0x20>)
 8016fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fca:	6800      	ldr	r0, [r0, #0]
 8016fcc:	9301      	str	r3, [sp, #4]
 8016fce:	f000 f837 	bl	8017040 <_vfiprintf_r>
 8016fd2:	b002      	add	sp, #8
 8016fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fd8:	b003      	add	sp, #12
 8016fda:	4770      	bx	lr
 8016fdc:	200002b4 	.word	0x200002b4

08016fe0 <abort>:
 8016fe0:	b508      	push	{r3, lr}
 8016fe2:	2006      	movs	r0, #6
 8016fe4:	f000 fa00 	bl	80173e8 <raise>
 8016fe8:	2001      	movs	r0, #1
 8016fea:	f7eb fc2f 	bl	800284c <_exit>

08016fee <__sfputc_r>:
 8016fee:	6893      	ldr	r3, [r2, #8]
 8016ff0:	3b01      	subs	r3, #1
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	b410      	push	{r4}
 8016ff6:	6093      	str	r3, [r2, #8]
 8016ff8:	da08      	bge.n	801700c <__sfputc_r+0x1e>
 8016ffa:	6994      	ldr	r4, [r2, #24]
 8016ffc:	42a3      	cmp	r3, r4
 8016ffe:	db01      	blt.n	8017004 <__sfputc_r+0x16>
 8017000:	290a      	cmp	r1, #10
 8017002:	d103      	bne.n	801700c <__sfputc_r+0x1e>
 8017004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017008:	f000 b932 	b.w	8017270 <__swbuf_r>
 801700c:	6813      	ldr	r3, [r2, #0]
 801700e:	1c58      	adds	r0, r3, #1
 8017010:	6010      	str	r0, [r2, #0]
 8017012:	7019      	strb	r1, [r3, #0]
 8017014:	4608      	mov	r0, r1
 8017016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801701a:	4770      	bx	lr

0801701c <__sfputs_r>:
 801701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701e:	4606      	mov	r6, r0
 8017020:	460f      	mov	r7, r1
 8017022:	4614      	mov	r4, r2
 8017024:	18d5      	adds	r5, r2, r3
 8017026:	42ac      	cmp	r4, r5
 8017028:	d101      	bne.n	801702e <__sfputs_r+0x12>
 801702a:	2000      	movs	r0, #0
 801702c:	e007      	b.n	801703e <__sfputs_r+0x22>
 801702e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017032:	463a      	mov	r2, r7
 8017034:	4630      	mov	r0, r6
 8017036:	f7ff ffda 	bl	8016fee <__sfputc_r>
 801703a:	1c43      	adds	r3, r0, #1
 801703c:	d1f3      	bne.n	8017026 <__sfputs_r+0xa>
 801703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017040 <_vfiprintf_r>:
 8017040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	460d      	mov	r5, r1
 8017046:	b09d      	sub	sp, #116	@ 0x74
 8017048:	4614      	mov	r4, r2
 801704a:	4698      	mov	r8, r3
 801704c:	4606      	mov	r6, r0
 801704e:	b118      	cbz	r0, 8017058 <_vfiprintf_r+0x18>
 8017050:	6a03      	ldr	r3, [r0, #32]
 8017052:	b90b      	cbnz	r3, 8017058 <_vfiprintf_r+0x18>
 8017054:	f7ff f9bc 	bl	80163d0 <__sinit>
 8017058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801705a:	07d9      	lsls	r1, r3, #31
 801705c:	d405      	bmi.n	801706a <_vfiprintf_r+0x2a>
 801705e:	89ab      	ldrh	r3, [r5, #12]
 8017060:	059a      	lsls	r2, r3, #22
 8017062:	d402      	bmi.n	801706a <_vfiprintf_r+0x2a>
 8017064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017066:	f7ff fb82 	bl	801676e <__retarget_lock_acquire_recursive>
 801706a:	89ab      	ldrh	r3, [r5, #12]
 801706c:	071b      	lsls	r3, r3, #28
 801706e:	d501      	bpl.n	8017074 <_vfiprintf_r+0x34>
 8017070:	692b      	ldr	r3, [r5, #16]
 8017072:	b99b      	cbnz	r3, 801709c <_vfiprintf_r+0x5c>
 8017074:	4629      	mov	r1, r5
 8017076:	4630      	mov	r0, r6
 8017078:	f000 f938 	bl	80172ec <__swsetup_r>
 801707c:	b170      	cbz	r0, 801709c <_vfiprintf_r+0x5c>
 801707e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017080:	07dc      	lsls	r4, r3, #31
 8017082:	d504      	bpl.n	801708e <_vfiprintf_r+0x4e>
 8017084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017088:	b01d      	add	sp, #116	@ 0x74
 801708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708e:	89ab      	ldrh	r3, [r5, #12]
 8017090:	0598      	lsls	r0, r3, #22
 8017092:	d4f7      	bmi.n	8017084 <_vfiprintf_r+0x44>
 8017094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017096:	f7ff fb6b 	bl	8016770 <__retarget_lock_release_recursive>
 801709a:	e7f3      	b.n	8017084 <_vfiprintf_r+0x44>
 801709c:	2300      	movs	r3, #0
 801709e:	9309      	str	r3, [sp, #36]	@ 0x24
 80170a0:	2320      	movs	r3, #32
 80170a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80170aa:	2330      	movs	r3, #48	@ 0x30
 80170ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801725c <_vfiprintf_r+0x21c>
 80170b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170b4:	f04f 0901 	mov.w	r9, #1
 80170b8:	4623      	mov	r3, r4
 80170ba:	469a      	mov	sl, r3
 80170bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170c0:	b10a      	cbz	r2, 80170c6 <_vfiprintf_r+0x86>
 80170c2:	2a25      	cmp	r2, #37	@ 0x25
 80170c4:	d1f9      	bne.n	80170ba <_vfiprintf_r+0x7a>
 80170c6:	ebba 0b04 	subs.w	fp, sl, r4
 80170ca:	d00b      	beq.n	80170e4 <_vfiprintf_r+0xa4>
 80170cc:	465b      	mov	r3, fp
 80170ce:	4622      	mov	r2, r4
 80170d0:	4629      	mov	r1, r5
 80170d2:	4630      	mov	r0, r6
 80170d4:	f7ff ffa2 	bl	801701c <__sfputs_r>
 80170d8:	3001      	adds	r0, #1
 80170da:	f000 80a7 	beq.w	801722c <_vfiprintf_r+0x1ec>
 80170de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170e0:	445a      	add	r2, fp
 80170e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80170e4:	f89a 3000 	ldrb.w	r3, [sl]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	f000 809f 	beq.w	801722c <_vfiprintf_r+0x1ec>
 80170ee:	2300      	movs	r3, #0
 80170f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80170f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170f8:	f10a 0a01 	add.w	sl, sl, #1
 80170fc:	9304      	str	r3, [sp, #16]
 80170fe:	9307      	str	r3, [sp, #28]
 8017100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017104:	931a      	str	r3, [sp, #104]	@ 0x68
 8017106:	4654      	mov	r4, sl
 8017108:	2205      	movs	r2, #5
 801710a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801710e:	4853      	ldr	r0, [pc, #332]	@ (801725c <_vfiprintf_r+0x21c>)
 8017110:	f7e9 f87e 	bl	8000210 <memchr>
 8017114:	9a04      	ldr	r2, [sp, #16]
 8017116:	b9d8      	cbnz	r0, 8017150 <_vfiprintf_r+0x110>
 8017118:	06d1      	lsls	r1, r2, #27
 801711a:	bf44      	itt	mi
 801711c:	2320      	movmi	r3, #32
 801711e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017122:	0713      	lsls	r3, r2, #28
 8017124:	bf44      	itt	mi
 8017126:	232b      	movmi	r3, #43	@ 0x2b
 8017128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801712c:	f89a 3000 	ldrb.w	r3, [sl]
 8017130:	2b2a      	cmp	r3, #42	@ 0x2a
 8017132:	d015      	beq.n	8017160 <_vfiprintf_r+0x120>
 8017134:	9a07      	ldr	r2, [sp, #28]
 8017136:	4654      	mov	r4, sl
 8017138:	2000      	movs	r0, #0
 801713a:	f04f 0c0a 	mov.w	ip, #10
 801713e:	4621      	mov	r1, r4
 8017140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017144:	3b30      	subs	r3, #48	@ 0x30
 8017146:	2b09      	cmp	r3, #9
 8017148:	d94b      	bls.n	80171e2 <_vfiprintf_r+0x1a2>
 801714a:	b1b0      	cbz	r0, 801717a <_vfiprintf_r+0x13a>
 801714c:	9207      	str	r2, [sp, #28]
 801714e:	e014      	b.n	801717a <_vfiprintf_r+0x13a>
 8017150:	eba0 0308 	sub.w	r3, r0, r8
 8017154:	fa09 f303 	lsl.w	r3, r9, r3
 8017158:	4313      	orrs	r3, r2
 801715a:	9304      	str	r3, [sp, #16]
 801715c:	46a2      	mov	sl, r4
 801715e:	e7d2      	b.n	8017106 <_vfiprintf_r+0xc6>
 8017160:	9b03      	ldr	r3, [sp, #12]
 8017162:	1d19      	adds	r1, r3, #4
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	9103      	str	r1, [sp, #12]
 8017168:	2b00      	cmp	r3, #0
 801716a:	bfbb      	ittet	lt
 801716c:	425b      	neglt	r3, r3
 801716e:	f042 0202 	orrlt.w	r2, r2, #2
 8017172:	9307      	strge	r3, [sp, #28]
 8017174:	9307      	strlt	r3, [sp, #28]
 8017176:	bfb8      	it	lt
 8017178:	9204      	strlt	r2, [sp, #16]
 801717a:	7823      	ldrb	r3, [r4, #0]
 801717c:	2b2e      	cmp	r3, #46	@ 0x2e
 801717e:	d10a      	bne.n	8017196 <_vfiprintf_r+0x156>
 8017180:	7863      	ldrb	r3, [r4, #1]
 8017182:	2b2a      	cmp	r3, #42	@ 0x2a
 8017184:	d132      	bne.n	80171ec <_vfiprintf_r+0x1ac>
 8017186:	9b03      	ldr	r3, [sp, #12]
 8017188:	1d1a      	adds	r2, r3, #4
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	9203      	str	r2, [sp, #12]
 801718e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017192:	3402      	adds	r4, #2
 8017194:	9305      	str	r3, [sp, #20]
 8017196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801726c <_vfiprintf_r+0x22c>
 801719a:	7821      	ldrb	r1, [r4, #0]
 801719c:	2203      	movs	r2, #3
 801719e:	4650      	mov	r0, sl
 80171a0:	f7e9 f836 	bl	8000210 <memchr>
 80171a4:	b138      	cbz	r0, 80171b6 <_vfiprintf_r+0x176>
 80171a6:	9b04      	ldr	r3, [sp, #16]
 80171a8:	eba0 000a 	sub.w	r0, r0, sl
 80171ac:	2240      	movs	r2, #64	@ 0x40
 80171ae:	4082      	lsls	r2, r0
 80171b0:	4313      	orrs	r3, r2
 80171b2:	3401      	adds	r4, #1
 80171b4:	9304      	str	r3, [sp, #16]
 80171b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171ba:	4829      	ldr	r0, [pc, #164]	@ (8017260 <_vfiprintf_r+0x220>)
 80171bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171c0:	2206      	movs	r2, #6
 80171c2:	f7e9 f825 	bl	8000210 <memchr>
 80171c6:	2800      	cmp	r0, #0
 80171c8:	d03f      	beq.n	801724a <_vfiprintf_r+0x20a>
 80171ca:	4b26      	ldr	r3, [pc, #152]	@ (8017264 <_vfiprintf_r+0x224>)
 80171cc:	bb1b      	cbnz	r3, 8017216 <_vfiprintf_r+0x1d6>
 80171ce:	9b03      	ldr	r3, [sp, #12]
 80171d0:	3307      	adds	r3, #7
 80171d2:	f023 0307 	bic.w	r3, r3, #7
 80171d6:	3308      	adds	r3, #8
 80171d8:	9303      	str	r3, [sp, #12]
 80171da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171dc:	443b      	add	r3, r7
 80171de:	9309      	str	r3, [sp, #36]	@ 0x24
 80171e0:	e76a      	b.n	80170b8 <_vfiprintf_r+0x78>
 80171e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80171e6:	460c      	mov	r4, r1
 80171e8:	2001      	movs	r0, #1
 80171ea:	e7a8      	b.n	801713e <_vfiprintf_r+0xfe>
 80171ec:	2300      	movs	r3, #0
 80171ee:	3401      	adds	r4, #1
 80171f0:	9305      	str	r3, [sp, #20]
 80171f2:	4619      	mov	r1, r3
 80171f4:	f04f 0c0a 	mov.w	ip, #10
 80171f8:	4620      	mov	r0, r4
 80171fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171fe:	3a30      	subs	r2, #48	@ 0x30
 8017200:	2a09      	cmp	r2, #9
 8017202:	d903      	bls.n	801720c <_vfiprintf_r+0x1cc>
 8017204:	2b00      	cmp	r3, #0
 8017206:	d0c6      	beq.n	8017196 <_vfiprintf_r+0x156>
 8017208:	9105      	str	r1, [sp, #20]
 801720a:	e7c4      	b.n	8017196 <_vfiprintf_r+0x156>
 801720c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017210:	4604      	mov	r4, r0
 8017212:	2301      	movs	r3, #1
 8017214:	e7f0      	b.n	80171f8 <_vfiprintf_r+0x1b8>
 8017216:	ab03      	add	r3, sp, #12
 8017218:	9300      	str	r3, [sp, #0]
 801721a:	462a      	mov	r2, r5
 801721c:	4b12      	ldr	r3, [pc, #72]	@ (8017268 <_vfiprintf_r+0x228>)
 801721e:	a904      	add	r1, sp, #16
 8017220:	4630      	mov	r0, r6
 8017222:	f3af 8000 	nop.w
 8017226:	4607      	mov	r7, r0
 8017228:	1c78      	adds	r0, r7, #1
 801722a:	d1d6      	bne.n	80171da <_vfiprintf_r+0x19a>
 801722c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801722e:	07d9      	lsls	r1, r3, #31
 8017230:	d405      	bmi.n	801723e <_vfiprintf_r+0x1fe>
 8017232:	89ab      	ldrh	r3, [r5, #12]
 8017234:	059a      	lsls	r2, r3, #22
 8017236:	d402      	bmi.n	801723e <_vfiprintf_r+0x1fe>
 8017238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801723a:	f7ff fa99 	bl	8016770 <__retarget_lock_release_recursive>
 801723e:	89ab      	ldrh	r3, [r5, #12]
 8017240:	065b      	lsls	r3, r3, #25
 8017242:	f53f af1f 	bmi.w	8017084 <_vfiprintf_r+0x44>
 8017246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017248:	e71e      	b.n	8017088 <_vfiprintf_r+0x48>
 801724a:	ab03      	add	r3, sp, #12
 801724c:	9300      	str	r3, [sp, #0]
 801724e:	462a      	mov	r2, r5
 8017250:	4b05      	ldr	r3, [pc, #20]	@ (8017268 <_vfiprintf_r+0x228>)
 8017252:	a904      	add	r1, sp, #16
 8017254:	4630      	mov	r0, r6
 8017256:	f7ff fce5 	bl	8016c24 <_printf_i>
 801725a:	e7e4      	b.n	8017226 <_vfiprintf_r+0x1e6>
 801725c:	08018358 	.word	0x08018358
 8017260:	08018362 	.word	0x08018362
 8017264:	00000000 	.word	0x00000000
 8017268:	0801701d 	.word	0x0801701d
 801726c:	0801835e 	.word	0x0801835e

08017270 <__swbuf_r>:
 8017270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017272:	460e      	mov	r6, r1
 8017274:	4614      	mov	r4, r2
 8017276:	4605      	mov	r5, r0
 8017278:	b118      	cbz	r0, 8017282 <__swbuf_r+0x12>
 801727a:	6a03      	ldr	r3, [r0, #32]
 801727c:	b90b      	cbnz	r3, 8017282 <__swbuf_r+0x12>
 801727e:	f7ff f8a7 	bl	80163d0 <__sinit>
 8017282:	69a3      	ldr	r3, [r4, #24]
 8017284:	60a3      	str	r3, [r4, #8]
 8017286:	89a3      	ldrh	r3, [r4, #12]
 8017288:	071a      	lsls	r2, r3, #28
 801728a:	d501      	bpl.n	8017290 <__swbuf_r+0x20>
 801728c:	6923      	ldr	r3, [r4, #16]
 801728e:	b943      	cbnz	r3, 80172a2 <__swbuf_r+0x32>
 8017290:	4621      	mov	r1, r4
 8017292:	4628      	mov	r0, r5
 8017294:	f000 f82a 	bl	80172ec <__swsetup_r>
 8017298:	b118      	cbz	r0, 80172a2 <__swbuf_r+0x32>
 801729a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801729e:	4638      	mov	r0, r7
 80172a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a2:	6823      	ldr	r3, [r4, #0]
 80172a4:	6922      	ldr	r2, [r4, #16]
 80172a6:	1a98      	subs	r0, r3, r2
 80172a8:	6963      	ldr	r3, [r4, #20]
 80172aa:	b2f6      	uxtb	r6, r6
 80172ac:	4283      	cmp	r3, r0
 80172ae:	4637      	mov	r7, r6
 80172b0:	dc05      	bgt.n	80172be <__swbuf_r+0x4e>
 80172b2:	4621      	mov	r1, r4
 80172b4:	4628      	mov	r0, r5
 80172b6:	f7ff fe59 	bl	8016f6c <_fflush_r>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	d1ed      	bne.n	801729a <__swbuf_r+0x2a>
 80172be:	68a3      	ldr	r3, [r4, #8]
 80172c0:	3b01      	subs	r3, #1
 80172c2:	60a3      	str	r3, [r4, #8]
 80172c4:	6823      	ldr	r3, [r4, #0]
 80172c6:	1c5a      	adds	r2, r3, #1
 80172c8:	6022      	str	r2, [r4, #0]
 80172ca:	701e      	strb	r6, [r3, #0]
 80172cc:	6962      	ldr	r2, [r4, #20]
 80172ce:	1c43      	adds	r3, r0, #1
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d004      	beq.n	80172de <__swbuf_r+0x6e>
 80172d4:	89a3      	ldrh	r3, [r4, #12]
 80172d6:	07db      	lsls	r3, r3, #31
 80172d8:	d5e1      	bpl.n	801729e <__swbuf_r+0x2e>
 80172da:	2e0a      	cmp	r6, #10
 80172dc:	d1df      	bne.n	801729e <__swbuf_r+0x2e>
 80172de:	4621      	mov	r1, r4
 80172e0:	4628      	mov	r0, r5
 80172e2:	f7ff fe43 	bl	8016f6c <_fflush_r>
 80172e6:	2800      	cmp	r0, #0
 80172e8:	d0d9      	beq.n	801729e <__swbuf_r+0x2e>
 80172ea:	e7d6      	b.n	801729a <__swbuf_r+0x2a>

080172ec <__swsetup_r>:
 80172ec:	b538      	push	{r3, r4, r5, lr}
 80172ee:	4b29      	ldr	r3, [pc, #164]	@ (8017394 <__swsetup_r+0xa8>)
 80172f0:	4605      	mov	r5, r0
 80172f2:	6818      	ldr	r0, [r3, #0]
 80172f4:	460c      	mov	r4, r1
 80172f6:	b118      	cbz	r0, 8017300 <__swsetup_r+0x14>
 80172f8:	6a03      	ldr	r3, [r0, #32]
 80172fa:	b90b      	cbnz	r3, 8017300 <__swsetup_r+0x14>
 80172fc:	f7ff f868 	bl	80163d0 <__sinit>
 8017300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017304:	0719      	lsls	r1, r3, #28
 8017306:	d422      	bmi.n	801734e <__swsetup_r+0x62>
 8017308:	06da      	lsls	r2, r3, #27
 801730a:	d407      	bmi.n	801731c <__swsetup_r+0x30>
 801730c:	2209      	movs	r2, #9
 801730e:	602a      	str	r2, [r5, #0]
 8017310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017314:	81a3      	strh	r3, [r4, #12]
 8017316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801731a:	e033      	b.n	8017384 <__swsetup_r+0x98>
 801731c:	0758      	lsls	r0, r3, #29
 801731e:	d512      	bpl.n	8017346 <__swsetup_r+0x5a>
 8017320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017322:	b141      	cbz	r1, 8017336 <__swsetup_r+0x4a>
 8017324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017328:	4299      	cmp	r1, r3
 801732a:	d002      	beq.n	8017332 <__swsetup_r+0x46>
 801732c:	4628      	mov	r0, r5
 801732e:	f7ff fa61 	bl	80167f4 <_free_r>
 8017332:	2300      	movs	r3, #0
 8017334:	6363      	str	r3, [r4, #52]	@ 0x34
 8017336:	89a3      	ldrh	r3, [r4, #12]
 8017338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801733c:	81a3      	strh	r3, [r4, #12]
 801733e:	2300      	movs	r3, #0
 8017340:	6063      	str	r3, [r4, #4]
 8017342:	6923      	ldr	r3, [r4, #16]
 8017344:	6023      	str	r3, [r4, #0]
 8017346:	89a3      	ldrh	r3, [r4, #12]
 8017348:	f043 0308 	orr.w	r3, r3, #8
 801734c:	81a3      	strh	r3, [r4, #12]
 801734e:	6923      	ldr	r3, [r4, #16]
 8017350:	b94b      	cbnz	r3, 8017366 <__swsetup_r+0x7a>
 8017352:	89a3      	ldrh	r3, [r4, #12]
 8017354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801735c:	d003      	beq.n	8017366 <__swsetup_r+0x7a>
 801735e:	4621      	mov	r1, r4
 8017360:	4628      	mov	r0, r5
 8017362:	f000 f883 	bl	801746c <__smakebuf_r>
 8017366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801736a:	f013 0201 	ands.w	r2, r3, #1
 801736e:	d00a      	beq.n	8017386 <__swsetup_r+0x9a>
 8017370:	2200      	movs	r2, #0
 8017372:	60a2      	str	r2, [r4, #8]
 8017374:	6962      	ldr	r2, [r4, #20]
 8017376:	4252      	negs	r2, r2
 8017378:	61a2      	str	r2, [r4, #24]
 801737a:	6922      	ldr	r2, [r4, #16]
 801737c:	b942      	cbnz	r2, 8017390 <__swsetup_r+0xa4>
 801737e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017382:	d1c5      	bne.n	8017310 <__swsetup_r+0x24>
 8017384:	bd38      	pop	{r3, r4, r5, pc}
 8017386:	0799      	lsls	r1, r3, #30
 8017388:	bf58      	it	pl
 801738a:	6962      	ldrpl	r2, [r4, #20]
 801738c:	60a2      	str	r2, [r4, #8]
 801738e:	e7f4      	b.n	801737a <__swsetup_r+0x8e>
 8017390:	2000      	movs	r0, #0
 8017392:	e7f7      	b.n	8017384 <__swsetup_r+0x98>
 8017394:	200002b4 	.word	0x200002b4

08017398 <_raise_r>:
 8017398:	291f      	cmp	r1, #31
 801739a:	b538      	push	{r3, r4, r5, lr}
 801739c:	4605      	mov	r5, r0
 801739e:	460c      	mov	r4, r1
 80173a0:	d904      	bls.n	80173ac <_raise_r+0x14>
 80173a2:	2316      	movs	r3, #22
 80173a4:	6003      	str	r3, [r0, #0]
 80173a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173aa:	bd38      	pop	{r3, r4, r5, pc}
 80173ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80173ae:	b112      	cbz	r2, 80173b6 <_raise_r+0x1e>
 80173b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173b4:	b94b      	cbnz	r3, 80173ca <_raise_r+0x32>
 80173b6:	4628      	mov	r0, r5
 80173b8:	f000 f830 	bl	801741c <_getpid_r>
 80173bc:	4622      	mov	r2, r4
 80173be:	4601      	mov	r1, r0
 80173c0:	4628      	mov	r0, r5
 80173c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173c6:	f000 b817 	b.w	80173f8 <_kill_r>
 80173ca:	2b01      	cmp	r3, #1
 80173cc:	d00a      	beq.n	80173e4 <_raise_r+0x4c>
 80173ce:	1c59      	adds	r1, r3, #1
 80173d0:	d103      	bne.n	80173da <_raise_r+0x42>
 80173d2:	2316      	movs	r3, #22
 80173d4:	6003      	str	r3, [r0, #0]
 80173d6:	2001      	movs	r0, #1
 80173d8:	e7e7      	b.n	80173aa <_raise_r+0x12>
 80173da:	2100      	movs	r1, #0
 80173dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80173e0:	4620      	mov	r0, r4
 80173e2:	4798      	blx	r3
 80173e4:	2000      	movs	r0, #0
 80173e6:	e7e0      	b.n	80173aa <_raise_r+0x12>

080173e8 <raise>:
 80173e8:	4b02      	ldr	r3, [pc, #8]	@ (80173f4 <raise+0xc>)
 80173ea:	4601      	mov	r1, r0
 80173ec:	6818      	ldr	r0, [r3, #0]
 80173ee:	f7ff bfd3 	b.w	8017398 <_raise_r>
 80173f2:	bf00      	nop
 80173f4:	200002b4 	.word	0x200002b4

080173f8 <_kill_r>:
 80173f8:	b538      	push	{r3, r4, r5, lr}
 80173fa:	4d07      	ldr	r5, [pc, #28]	@ (8017418 <_kill_r+0x20>)
 80173fc:	2300      	movs	r3, #0
 80173fe:	4604      	mov	r4, r0
 8017400:	4608      	mov	r0, r1
 8017402:	4611      	mov	r1, r2
 8017404:	602b      	str	r3, [r5, #0]
 8017406:	f7eb fa11 	bl	800282c <_kill>
 801740a:	1c43      	adds	r3, r0, #1
 801740c:	d102      	bne.n	8017414 <_kill_r+0x1c>
 801740e:	682b      	ldr	r3, [r5, #0]
 8017410:	b103      	cbz	r3, 8017414 <_kill_r+0x1c>
 8017412:	6023      	str	r3, [r4, #0]
 8017414:	bd38      	pop	{r3, r4, r5, pc}
 8017416:	bf00      	nop
 8017418:	2000dfd4 	.word	0x2000dfd4

0801741c <_getpid_r>:
 801741c:	f7eb b9fe 	b.w	800281c <_getpid>

08017420 <__swhatbuf_r>:
 8017420:	b570      	push	{r4, r5, r6, lr}
 8017422:	460c      	mov	r4, r1
 8017424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017428:	2900      	cmp	r1, #0
 801742a:	b096      	sub	sp, #88	@ 0x58
 801742c:	4615      	mov	r5, r2
 801742e:	461e      	mov	r6, r3
 8017430:	da0d      	bge.n	801744e <__swhatbuf_r+0x2e>
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017438:	f04f 0100 	mov.w	r1, #0
 801743c:	bf14      	ite	ne
 801743e:	2340      	movne	r3, #64	@ 0x40
 8017440:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017444:	2000      	movs	r0, #0
 8017446:	6031      	str	r1, [r6, #0]
 8017448:	602b      	str	r3, [r5, #0]
 801744a:	b016      	add	sp, #88	@ 0x58
 801744c:	bd70      	pop	{r4, r5, r6, pc}
 801744e:	466a      	mov	r2, sp
 8017450:	f000 f848 	bl	80174e4 <_fstat_r>
 8017454:	2800      	cmp	r0, #0
 8017456:	dbec      	blt.n	8017432 <__swhatbuf_r+0x12>
 8017458:	9901      	ldr	r1, [sp, #4]
 801745a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801745e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017462:	4259      	negs	r1, r3
 8017464:	4159      	adcs	r1, r3
 8017466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801746a:	e7eb      	b.n	8017444 <__swhatbuf_r+0x24>

0801746c <__smakebuf_r>:
 801746c:	898b      	ldrh	r3, [r1, #12]
 801746e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017470:	079d      	lsls	r5, r3, #30
 8017472:	4606      	mov	r6, r0
 8017474:	460c      	mov	r4, r1
 8017476:	d507      	bpl.n	8017488 <__smakebuf_r+0x1c>
 8017478:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801747c:	6023      	str	r3, [r4, #0]
 801747e:	6123      	str	r3, [r4, #16]
 8017480:	2301      	movs	r3, #1
 8017482:	6163      	str	r3, [r4, #20]
 8017484:	b003      	add	sp, #12
 8017486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017488:	ab01      	add	r3, sp, #4
 801748a:	466a      	mov	r2, sp
 801748c:	f7ff ffc8 	bl	8017420 <__swhatbuf_r>
 8017490:	9f00      	ldr	r7, [sp, #0]
 8017492:	4605      	mov	r5, r0
 8017494:	4639      	mov	r1, r7
 8017496:	4630      	mov	r0, r6
 8017498:	f7fe fd68 	bl	8015f6c <_malloc_r>
 801749c:	b948      	cbnz	r0, 80174b2 <__smakebuf_r+0x46>
 801749e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174a2:	059a      	lsls	r2, r3, #22
 80174a4:	d4ee      	bmi.n	8017484 <__smakebuf_r+0x18>
 80174a6:	f023 0303 	bic.w	r3, r3, #3
 80174aa:	f043 0302 	orr.w	r3, r3, #2
 80174ae:	81a3      	strh	r3, [r4, #12]
 80174b0:	e7e2      	b.n	8017478 <__smakebuf_r+0xc>
 80174b2:	89a3      	ldrh	r3, [r4, #12]
 80174b4:	6020      	str	r0, [r4, #0]
 80174b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174ba:	81a3      	strh	r3, [r4, #12]
 80174bc:	9b01      	ldr	r3, [sp, #4]
 80174be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80174c2:	b15b      	cbz	r3, 80174dc <__smakebuf_r+0x70>
 80174c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174c8:	4630      	mov	r0, r6
 80174ca:	f000 f81d 	bl	8017508 <_isatty_r>
 80174ce:	b128      	cbz	r0, 80174dc <__smakebuf_r+0x70>
 80174d0:	89a3      	ldrh	r3, [r4, #12]
 80174d2:	f023 0303 	bic.w	r3, r3, #3
 80174d6:	f043 0301 	orr.w	r3, r3, #1
 80174da:	81a3      	strh	r3, [r4, #12]
 80174dc:	89a3      	ldrh	r3, [r4, #12]
 80174de:	431d      	orrs	r5, r3
 80174e0:	81a5      	strh	r5, [r4, #12]
 80174e2:	e7cf      	b.n	8017484 <__smakebuf_r+0x18>

080174e4 <_fstat_r>:
 80174e4:	b538      	push	{r3, r4, r5, lr}
 80174e6:	4d07      	ldr	r5, [pc, #28]	@ (8017504 <_fstat_r+0x20>)
 80174e8:	2300      	movs	r3, #0
 80174ea:	4604      	mov	r4, r0
 80174ec:	4608      	mov	r0, r1
 80174ee:	4611      	mov	r1, r2
 80174f0:	602b      	str	r3, [r5, #0]
 80174f2:	f7eb f9fb 	bl	80028ec <_fstat>
 80174f6:	1c43      	adds	r3, r0, #1
 80174f8:	d102      	bne.n	8017500 <_fstat_r+0x1c>
 80174fa:	682b      	ldr	r3, [r5, #0]
 80174fc:	b103      	cbz	r3, 8017500 <_fstat_r+0x1c>
 80174fe:	6023      	str	r3, [r4, #0]
 8017500:	bd38      	pop	{r3, r4, r5, pc}
 8017502:	bf00      	nop
 8017504:	2000dfd4 	.word	0x2000dfd4

08017508 <_isatty_r>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	4d06      	ldr	r5, [pc, #24]	@ (8017524 <_isatty_r+0x1c>)
 801750c:	2300      	movs	r3, #0
 801750e:	4604      	mov	r4, r0
 8017510:	4608      	mov	r0, r1
 8017512:	602b      	str	r3, [r5, #0]
 8017514:	f7eb f9fa 	bl	800290c <_isatty>
 8017518:	1c43      	adds	r3, r0, #1
 801751a:	d102      	bne.n	8017522 <_isatty_r+0x1a>
 801751c:	682b      	ldr	r3, [r5, #0]
 801751e:	b103      	cbz	r3, 8017522 <_isatty_r+0x1a>
 8017520:	6023      	str	r3, [r4, #0]
 8017522:	bd38      	pop	{r3, r4, r5, pc}
 8017524:	2000dfd4 	.word	0x2000dfd4

08017528 <_init>:
 8017528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801752a:	bf00      	nop
 801752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801752e:	bc08      	pop	{r3}
 8017530:	469e      	mov	lr, r3
 8017532:	4770      	bx	lr

08017534 <_fini>:
 8017534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017536:	bf00      	nop
 8017538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801753a:	bc08      	pop	{r3}
 801753c:	469e      	mov	lr, r3
 801753e:	4770      	bx	lr
