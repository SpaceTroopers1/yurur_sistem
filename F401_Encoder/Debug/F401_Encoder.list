
F401_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012698  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08012838  08012838  00013838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013290  08013290  000150cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013290  08013290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013298  08013298  000150cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013298  08013298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801329c  0801329c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  080132a0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd50  200000d0  0801336c  000150d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000de20  0801336c  00015e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000150cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cad9  00000000  00000000  000150fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec0  00000000  00000000  00031bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c0  00000000  00000000  000373e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000089c3  00000000  00000000  000387a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d33b  00000000  00000000  00041163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4fe8  00000000  00000000  0005e49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  00103486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b0  00000000  00000000  00103524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012820 	.word	0x08012820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	08012820 	.word	0x08012820

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800064c:	f006 fb2e 	bl	8006cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000650:	4b5a      	ldr	r3, [pc, #360]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000658:	f000 f986 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800065c:	4b58      	ldr	r3, [pc, #352]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8090 	bne.w	800078a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d01e      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000670:	2208      	movs	r2, #8
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2b00      	cmp	r3, #0
 8000680:	d015      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f023 0307 	bic.w	r3, r3, #7
 8000688:	3308      	adds	r3, #8
 800068a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d06a      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
 80006b4:	4b43      	ldr	r3, [pc, #268]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d865      	bhi.n	800078a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <pvPortMallocMicroROS+0x188>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c8:	e004      	b.n	80006d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d903      	bls.n	80006e6 <pvPortMallocMicroROS+0xa6>
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1f1      	bne.n	80006ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e6:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <pvPortMallocMicroROS+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d04c      	beq.n	800078a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2208      	movs	r2, #8
 80006f6:	4413      	add	r3, r2
 80006f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	2308      	movs	r3, #8
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	429a      	cmp	r2, r3
 8000710:	d920      	bls.n	8000754 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	f383 8811 	msr	BASEPRI, r3
 800072c:	f3bf 8f6f 	isb	sy
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	613b      	str	r3, [r7, #16]
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f000 f96c 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d203      	bcs.n	8000776 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <pvPortMallocMicroROS+0x18c>)
 8000774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <pvPortMallocMicroROS+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800078a:	f006 fa9d 	bl	8006cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80007b0:	69fb      	ldr	r3, [r7, #28]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003cf4 	.word	0x20003cf4
 80007c0:	20003d00 	.word	0x20003d00
 80007c4:	20003cf8 	.word	0x20003cf8
 80007c8:	20003cec 	.word	0x20003cec
 80007cc:	20003cfc 	.word	0x20003cfc

080007d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d04a      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e2:	2308      	movs	r3, #8
 80007e4:	425b      	negs	r3, r3
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4013      	ands	r3, r2
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <vPortFreeMicroROS+0x46>
	__asm volatile
 80007fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000802:	f383 8811 	msr	BASEPRI, r3
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	60fb      	str	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	e7fd      	b.n	8000812 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00b      	beq.n	8000836 <vPortFreeMicroROS+0x66>
	__asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	60bb      	str	r3, [r7, #8]
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <vPortFreeMicroROS+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f006 fa26 	bl	8006cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	@ (8000884 <vPortFreeMicroROS+0xb4>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f006 fa28 	bl	8006cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003d00 	.word	0x20003d00
 8000884:	20003cf8 	.word	0x20003cf8

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003d00 	.word	0x20003d00

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f006 f9ed 	bl	8006cac <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feb4 	bl	8000640 <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f011 f89e 	bl	8011a46 <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff60 	bl	80007d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f006 f9da 	bl	8006cc8 <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f006 f9c0 	bl	8006cac <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe82 	bl	8000640 <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f006 f9b6 	bl	8006cc8 <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	200000ec 	.word	0x200000ec
 8000a18:	20003cec 	.word	0x20003cec
 8000a1c:	20003cf4 	.word	0x20003cf4
 8000a20:	20003cfc 	.word	0x20003cfc
 8000a24:	20003cf8 	.word	0x20003cf8
 8000a28:	20003d00 	.word	0x20003d00

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003cec 	.word	0x20003cec
 8000adc:	20003cf4 	.word	0x20003cf4

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f001 fa9a 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f82c 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 fac8 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f000 fa9e 	bl	8001030 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000af4:	f000 fa72 	bl	8000fdc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000af8:	f000 f8be 	bl	8000c78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000afc:	f000 f918 	bl	8000d30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b00:	f000 f96e 	bl	8000de0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b04:	f000 fa1c 	bl	8000f40 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000b08:	f000 f888 	bl	8000c1c <MX_I2C1_Init>
  MX_TIM4_Init();
 8000b0c:	f000 f9c0 	bl	8000e90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <main+0x54>)
 8000b12:	f002 ffd3 	bl	8003abc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b16:	f004 ffab 	bl	8005a70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Microros, NULL, &defaultTask_attributes);
 8000b1a:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <main+0x58>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <main+0x5c>)
 8000b20:	f004 fff0 	bl	8005b04 <osThreadNew>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <main+0x60>)
 8000b28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b2a:	f004 ffc5 	bl	8005ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2e:	bf00      	nop
 8000b30:	e7fd      	b.n	8000b2e <main+0x4e>
 8000b32:	bf00      	nop
 8000b34:	20003e78 	.word	0x20003e78
 8000b38:	08012884 	.word	0x08012884
 8000b3c:	080012c9 	.word	0x080012c9
 8000b40:	20003fc8 	.word	0x20003fc8

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	@ 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	@ 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f010 feae 	bl	80118b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a28      	ldr	r2, [pc, #160]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <SystemClock_Config+0xd0>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b90:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bac:	2310      	movs	r3, #16
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bbc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fa8c 	bl	80030ec <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bda:	f000 fbff 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2302      	movs	r3, #2
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 fcee 	bl	80035dc <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c06:	f000 fbe9 	bl	80013dc <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3750      	adds	r7, #80	@ 0x50
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <MX_I2C1_Init+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c28:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <MX_I2C1_Init+0x58>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_I2C1_Init+0x50>)
 8000c5a:	f002 f903 	bl	8002e64 <HAL_I2C_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c64:	f000 fbba 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20003d04 	.word	0x20003d04
 8000c70:	40005400 	.word	0x40005400
 8000c74:	000186a0 	.word	0x000186a0

08000c78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	@ 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	@ 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f010 fe14 	bl	80118b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c94:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000c96:	4a25      	ldr	r2, [pc, #148]	@ (8000d2c <MX_TIM1_Init+0xb4>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000ca8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000cbc:	2280      	movs	r2, #128	@ 0x80
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480f      	ldr	r0, [pc, #60]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000cec:	f002 ff48 	bl	8003b80 <HAL_TIM_Encoder_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000cf6:	f000 fb71 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000d08:	f003 fb9a 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d12:	f000 fb63 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000d16:	213c      	movs	r1, #60	@ 0x3c
 8000d18:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <MX_TIM1_Init+0xb0>)
 8000d1a:	f002 ffd7 	bl	8003ccc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20003d58 	.word	0x20003d58
 8000d2c:	40010000 	.word	0x40010000

08000d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	@ 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2224      	movs	r2, #36	@ 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f010 fdb8 	bl	80118b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480f      	ldr	r0, [pc, #60]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000da0:	f002 feee 	bl	8003b80 <HAL_TIM_Encoder_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000daa:	f000 fb17 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000dbc:	f003 fb40 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 fb09 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000dca:	213c      	movs	r1, #60	@ 0x3c
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <MX_TIM2_Init+0xac>)
 8000dce:	f002 ff7d 	bl	8003ccc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	@ 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20003da0 	.word	0x20003da0

08000de0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2224      	movs	r2, #36	@ 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f010 fd60 	bl	80118b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <MX_TIM3_Init+0xac>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e1e:	2280      	movs	r2, #128	@ 0x80
 8000e20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e4e:	f002 fe97 	bl	8003b80 <HAL_TIM_Encoder_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f000 fac0 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4807      	ldr	r0, [pc, #28]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e6a:	f003 fae9 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e74:	f000 fab2 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e78:	213c      	movs	r1, #60	@ 0x3c
 8000e7a:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <MX_TIM3_Init+0xa8>)
 8000e7c:	f002 ff26 	bl	8003ccc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3730      	adds	r7, #48	@ 0x30
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20003de8 	.word	0x20003de8
 8000e8c:	40000400 	.word	0x40000400

08000e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	@ 0x30
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2224      	movs	r2, #36	@ 0x24
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f010 fd08 	bl	80118b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eac:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <MX_TIM4_Init+0xac>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eea:	2301      	movs	r3, #1
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000efe:	f002 fe3f 	bl	8003b80 <HAL_TIM_Encoder_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f000 fa68 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000f1a:	f003 fa91 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f24:	f000 fa5a 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f28:	213c      	movs	r1, #60	@ 0x3c
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM4_Init+0xa8>)
 8000f2c:	f002 fece 	bl	8003ccc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	@ 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20003e30 	.word	0x20003e30
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <MX_TIM5_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f64:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8000f68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f72:	22c8      	movs	r2, #200	@ 0xc8
 8000f74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f82:	4814      	ldr	r0, [pc, #80]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000f84:	f002 fd4a 	bl	8003a1c <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 fa25 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000fa0:	f003 f812 	bl	8003fc8 <HAL_TIM_ConfigClockSource>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f000 fa17 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_TIM5_Init+0x94>)
 8000fbc:	f003 fa40 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000fc6:	f000 fa09 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20003e78 	.word	0x20003e78
 8000fd8:	40000c00 	.word	0x40000c00

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	@ (800102c <MX_USART2_UART_Init+0x50>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_USART2_UART_Init+0x4c>)
 8001014:	f003 fa96 	bl	8004544 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101e:	f000 f9dd 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20003ec0 	.word	0x20003ec0
 800102c:	40004400 	.word	0x40004400

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <MX_DMA_Init+0x4c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <MX_DMA_Init+0x4c>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <MX_DMA_Init+0x4c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2105      	movs	r1, #5
 8001056:	2010      	movs	r0, #16
 8001058:	f001 f92d 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800105c:	2010      	movs	r0, #16
 800105e:	f001 f946 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2105      	movs	r1, #5
 8001066:	2011      	movs	r0, #17
 8001068:	f001 f925 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800106c:	2011      	movs	r0, #17
 800106e:	f001 f93e 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <MX_GPIO_Init+0xf8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a36      	ldr	r2, [pc, #216]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b34      	ldr	r3, [pc, #208]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b30      	ldr	r3, [pc, #192]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a28      	ldr	r2, [pc, #160]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <MX_GPIO_Init+0xf8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2120      	movs	r1, #32
 800110a:	481c      	ldr	r0, [pc, #112]	@ (800117c <MX_GPIO_Init+0xfc>)
 800110c:	f001 fe90 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2180      	movs	r1, #128	@ 0x80
 8001114:	481a      	ldr	r0, [pc, #104]	@ (8001180 <MX_GPIO_Init+0x100>)
 8001116:	f001 fe8b 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001120:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4813      	ldr	r0, [pc, #76]	@ (8001180 <MX_GPIO_Init+0x100>)
 8001132:	f001 fcf9 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001136:	2320      	movs	r3, #32
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <MX_GPIO_Init+0xfc>)
 800114e:	f001 fceb 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001152:	2380      	movs	r3, #128	@ 0x80
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_GPIO_Init+0x100>)
 800116a:	f001 fcdd 	bl	8002b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020800 	.word	0x40020800

08001184 <read_encoder_angular_velocity>:
rover_msgs__msg__EncoderMsg encodermsg;
rcl_subscription_t subscriber;
uint8_t light;


void read_encoder_angular_velocity(encoder_data *motor,TIM_HandleTypeDef *htim,int delay){
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	motor->timer_counter = __HAL_TIM_GET_COUNTER(htim);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]

				 int change = motor->last_counter_value - motor->timer_counter;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]


			  	  if(change > 60000){
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80011ae:	4293      	cmp	r3, r2
 80011b0:	dd06      	ble.n	80011c0 <read_encoder_angular_velocity+0x3c>
			  		motor->angular_velocity = -change + max_bits;// tekerlekteki açısal hızı veriyor olması lazım
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80011b8:	33ff      	adds	r3, #255	@ 0xff
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e010      	b.n	80011e2 <read_encoder_angular_velocity+0x5e>
			  	  }
			  	  else if (change < -60000){
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <read_encoder_angular_velocity+0xb8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	da05      	bge.n	80011d4 <read_encoder_angular_velocity+0x50>
			  		motor->angular_velocity = -change - max_bits;
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <read_encoder_angular_velocity+0xbc>)
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e006      	b.n	80011e2 <read_encoder_angular_velocity+0x5e>
			  	  }
			  	  else{
			  		motor->angular_velocity = (motor->timer_counter - motor->last_counter_value);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	601a      	str	r2, [r3, #0]
			  	  }
	motor->angular_velocity *= 1000/delay;// geçen süreye bölmece
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	fb91 f2f2 	sdiv	r2, r1, r2
 80011f0:	fb03 f202 	mul.w	r2, r3, r2
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	601a      	str	r2, [r3, #0]
	motor->angular_velocity /=6;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <read_encoder_angular_velocity+0xc0>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	17db      	asrs	r3, r3, #31
 8001204:	1ad2      	subs	r2, r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]
	motor->angular_velocity *= 16; motor->angular_velocity /= 100;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	011a      	lsls	r2, r3, #4
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <read_encoder_angular_velocity+0xc4>)
 800121a:	fb82 1203 	smull	r1, r2, r2, r3
 800121e:	1152      	asrs	r2, r2, #5
 8001220:	17db      	asrs	r3, r3, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]
	motor->last_counter_value = motor->timer_counter;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	609a      	str	r2, [r3, #8]
}
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	ffff15a0 	.word	0xffff15a0
 8001240:	ffff0001 	.word	0xffff0001
 8001244:	2aaaaaab 	.word	0x2aaaaaab
 8001248:	51eb851f 	.word	0x51eb851f

0800124c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a11      	ldr	r2, [pc, #68]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d11b      	bne.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x4a>
		read_encoder_angular_velocity(&m1,&htim1, delay);//motor 1
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4910      	ldr	r1, [pc, #64]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001266:	4811      	ldr	r0, [pc, #68]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001268:	f7ff ff8c 	bl	8001184 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&m2, &htim2, delay);//motor 2
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	490f      	ldr	r1, [pc, #60]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001274:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001276:	f7ff ff85 	bl	8001184 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&m3,&htim3, delay);//motor 3
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001282:	480e      	ldr	r0, [pc, #56]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001284:	f7ff ff7e 	bl	8001184 <read_encoder_angular_velocity>
		read_encoder_angular_velocity(&m4, &htim4, delay);//motor 4
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001292:	f7ff ff77 	bl	8001184 <read_encoder_angular_velocity>


	}


}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40000c00 	.word	0x40000c00
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20003d58 	.word	0x20003d58
 80012ac:	20003fcc 	.word	0x20003fcc
 80012b0:	20003da0 	.word	0x20003da0
 80012b4:	20003fd8 	.word	0x20003fd8
 80012b8:	20003de8 	.word	0x20003de8
 80012bc:	20003fe4 	.word	0x20003fe4
 80012c0:	20003e30 	.word	0x20003e30
 80012c4:	20003ff0 	.word	0x20003ff0

080012c8 <Microros>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Microros */
void Microros(void *argument)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b0cc      	sub	sp, #304	@ 0x130
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80012d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012d6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  rmw_uros_set_custom_transport(
 80012d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <Microros+0xd0>)
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <Microros+0xd4>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <Microros+0xd8>)
 80012e2:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <Microros+0xdc>)
 80012e4:	4930      	ldr	r1, [pc, #192]	@ (80013a8 <Microros+0xe0>)
 80012e6:	2001      	movs	r0, #1
 80012e8:	f007 fd86 	bl	8008df8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80012ec:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80012f0:	4618      	mov	r0, r3
 80012f2:	f007 fb71 	bl	80089d8 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <Microros+0xe4>)
 80012f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <Microros+0xe8>)
 80012fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001302:	4b2c      	ldr	r3, [pc, #176]	@ (80013b4 <Microros+0xec>)
 8001304:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001308:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <Microros+0xf0>)
 800130a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	      rcl_publisher_t publisher;
	      rcl_node_t nodepub;


	      allocator = rcl_get_default_allocator();
 800130e:	463b      	mov	r3, r7
 8001310:	4618      	mov	r0, r3
 8001312:	f007 fb6f 	bl	80089f4 <rcutils_get_default_allocator>
 8001316:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800131a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800131e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	6023      	str	r3, [r4, #0]

	      	    // create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 800132c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001330:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	f007 fa88 	bl	800884c <rclc_support_init>

	      	    // create node
	      rclc_node_init_default(&nodepub, "encoder_node", "", &support);
 800133c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001340:	f107 0020 	add.w	r0, r7, #32
 8001344:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <Microros+0xf4>)
 8001346:	491e      	ldr	r1, [pc, #120]	@ (80013c0 <Microros+0xf8>)
 8001348:	f007 face 	bl	80088e8 <rclc_node_init_default>
	      	      &executor, &subscriber, &submsg,
	      	      &subscription_callback_controller, ON_NEW_DATA);
*/

	      	    // create subscription
	      rclc_publisher_init_default(
 800134c:	f008 f998 	bl	8009680 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>
 8001350:	4602      	mov	r2, r0
 8001352:	f107 0120 	add.w	r1, r7, #32
 8001356:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <Microros+0xfc>)
 800135c:	f007 fb00 	bl	8008960 <rclc_publisher_init_default>
	          &publisher,
	          &nodepub,
	          ROSIDL_GET_MSG_TYPE_SUPPORT(rover_msgs, msg, EncoderMsg),
	          "encoder");
	  for(;;){
		encodermsg.m1 = m1.angular_velocity;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <Microros+0x100>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <Microros+0x104>)
 8001366:	6013      	str	r3, [r2, #0]
	   encodermsg.m2 =m2.angular_velocity;
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <Microros+0x108>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <Microros+0x104>)
 800136e:	6053      	str	r3, [r2, #4]
		encodermsg.m3 =m3.angular_velocity;
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <Microros+0x10c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <Microros+0x104>)
 8001376:	6093      	str	r3, [r2, #8]
		encodermsg.m4 =m4.angular_velocity;
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <Microros+0x110>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <Microros+0x104>)
 800137e:	60d3      	str	r3, [r2, #12]
		//rclc_executor_spin_some(&executor,100);
		rcl_publish(&publisher, &encodermsg, NULL);
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	2200      	movs	r2, #0
 8001386:	4911      	ldr	r1, [pc, #68]	@ (80013cc <Microros+0x104>)
 8001388:	4618      	mov	r0, r3
 800138a:	f007 fa3b 	bl	8008804 <rcl_publish>



	    osDelay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f004 fc4a 	bl	8005c28 <osDelay>
		encodermsg.m1 = m1.angular_velocity;
 8001394:	bf00      	nop
 8001396:	e7e3      	b.n	8001360 <Microros+0x98>
 8001398:	08001f21 	.word	0x08001f21
 800139c:	08001eb9 	.word	0x08001eb9
 80013a0:	08001e99 	.word	0x08001e99
 80013a4:	08001e6d 	.word	0x08001e6d
 80013a8:	20003ec0 	.word	0x20003ec0
 80013ac:	080013e9 	.word	0x080013e9
 80013b0:	0800142d 	.word	0x0800142d
 80013b4:	08001465 	.word	0x08001465
 80013b8:	080014d1 	.word	0x080014d1
 80013bc:	08012844 	.word	0x08012844
 80013c0:	08012848 	.word	0x08012848
 80013c4:	08012858 	.word	0x08012858
 80013c8:	20003fcc 	.word	0x20003fcc
 80013cc:	20003ffc 	.word	0x20003ffc
 80013d0:	20003fd8 	.word	0x20003fd8
 80013d4:	20003fe4 	.word	0x20003fe4
 80013d8:	20003ff0 	.word	0x20003ff0

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <microros_allocate+0x3c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <microros_allocate+0x3c>)
 8001400:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <microros_allocate+0x40>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <microros_allocate+0x40>)
 8001410:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff f914 	bl	8000640 <pvPortMallocMicroROS>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20004018 	.word	0x20004018
 8001428:	2000401c 	.word	0x2000401c

0800142c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fa23 	bl	8000888 <getBlockSize>
 8001442:	4603      	mov	r3, r0
 8001444:	4a06      	ldr	r2, [pc, #24]	@ (8001460 <microros_deallocate+0x34>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <microros_deallocate+0x34>)
 800144e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f9bd 	bl	80007d0 <vPortFreeMicroROS>
  }
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000401c 	.word	0x2000401c

08001464 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <microros_reallocate+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <microros_reallocate+0x64>)
 800147e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <microros_reallocate+0x68>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	4413      	add	r3, r2
 800148a:	461a      	mov	r2, r3
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <microros_reallocate+0x68>)
 800148e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7ff f8d2 	bl	8000640 <pvPortMallocMicroROS>
 800149c:	4603      	mov	r3, r0
 800149e:	e00e      	b.n	80014be <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff f9f1 	bl	8000888 <getBlockSize>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <microros_reallocate+0x68>)
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <microros_reallocate+0x68>)
 80014b2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff fa04 	bl	80008c4 <pvPortReallocMicroROS>
 80014bc:	4603      	mov	r3, r0
  }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20004018 	.word	0x20004018
 80014cc:	2000401c 	.word	0x2000401c

080014d0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001518 <microros_zero_allocate+0x48>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <microros_zero_allocate+0x48>)
 80014ee:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	4a08      	ldr	r2, [pc, #32]	@ (800151c <microros_zero_allocate+0x4c>)
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <microros_zero_allocate+0x4c>)
 8001502:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff fa09 	bl	800091e <pvPortCallocMicroROS>
 800150c:	4603      	mov	r3, r0
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20004018 	.word	0x20004018
 800151c:	2000401c 	.word	0x2000401c

08001520 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001536:	a320      	add	r3, pc, #128	@ (adr r3, 80015b8 <UTILS_NanosecondsToTimespec+0x98>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe feb8 	bl	80002b0 <__aeabi_ldivmod>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800154a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800154e:	a31a      	add	r3, pc, #104	@ (adr r3, 80015b8 <UTILS_NanosecondsToTimespec+0x98>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe feac 	bl	80002b0 <__aeabi_ldivmod>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da20      	bge.n	80015a6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a11      	ldr	r2, [pc, #68]	@ (80015b0 <UTILS_NanosecondsToTimespec+0x90>)
 800156a:	fb82 1203 	smull	r1, r2, r2, r3
 800156e:	1712      	asrs	r2, r2, #28
 8001570:	17db      	asrs	r3, r3, #31
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	17c8      	asrs	r0, r1, #31
 8001582:	460c      	mov	r4, r1
 8001584:	4605      	mov	r5, r0
 8001586:	ebb2 0804 	subs.w	r8, r2, r4
 800158a:	eb63 0905 	sbc.w	r9, r3, r5
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	4906      	ldr	r1, [pc, #24]	@ (80015b4 <UTILS_NanosecondsToTimespec+0x94>)
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	441a      	add	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
    }
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015b0:	44b82fa1 	.word	0x44b82fa1
 80015b4:	3b9aca00 	.word	0x3b9aca00
 80015b8:	3b9aca00 	.word	0x3b9aca00
 80015bc:	00000000 	.word	0x00000000

080015c0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80015c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c4:	b08e      	sub	sp, #56	@ 0x38
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80015ca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80015cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80015d0:	2300      	movs	r3, #0
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80015e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fdea 	bl	80071c0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80015ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	61fa      	str	r2, [r7, #28]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	69b9      	ldr	r1, [r7, #24]
 80015fe:	000b      	movs	r3, r1
 8001600:	2200      	movs	r2, #0
 8001602:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001608:	2200      	movs	r2, #0
 800160a:	461c      	mov	r4, r3
 800160c:	4615      	mov	r5, r2
 800160e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001612:	1911      	adds	r1, r2, r4
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	416b      	adcs	r3, r5
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800161e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001622:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	f04f 0400 	mov.w	r4, #0
 800162e:	f04f 0500 	mov.w	r5, #0
 8001632:	015d      	lsls	r5, r3, #5
 8001634:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001638:	0154      	lsls	r4, r2, #5
 800163a:	4622      	mov	r2, r4
 800163c:	462b      	mov	r3, r5
 800163e:	ebb2 0800 	subs.w	r8, r2, r0
 8001642:	eb63 0901 	sbc.w	r9, r3, r1
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001652:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001656:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800165a:	4690      	mov	r8, r2
 800165c:	4699      	mov	r9, r3
 800165e:	eb18 0a00 	adds.w	sl, r8, r0
 8001662:	eb49 0b01 	adc.w	fp, r9, r1
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001672:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001676:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800167a:	ebb2 040a 	subs.w	r4, r2, sl
 800167e:	603c      	str	r4, [r7, #0]
 8001680:	eb63 030b 	sbc.w	r3, r3, fp
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800168a:	4623      	mov	r3, r4
 800168c:	181b      	adds	r3, r3, r0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	462b      	mov	r3, r5
 8001692:	eb41 0303 	adc.w	r3, r1, r3
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	6a3a      	ldr	r2, [r7, #32]
 800169a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800169e:	f7ff ff3f 	bl	8001520 <UTILS_NanosecondsToTimespec>

    return 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	3738      	adds	r7, #56	@ 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_MspInit+0x54>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <HAL_MspInit+0x54>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x54>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_MspInit+0x54>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_MspInit+0x54>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_MspInit+0x54>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	f06f 0001 	mvn.w	r0, #1
 80016f6:	f000 fdde 	bl	80022b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	@ (800178c <HAL_I2C_MspInit+0x84>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12c      	bne.n	8001784 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001746:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001758:	2304      	movs	r3, #4
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480c      	ldr	r0, [pc, #48]	@ (8001794 <HAL_I2C_MspInit+0x8c>)
 8001764:	f001 f9e0 	bl	8002b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001772:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001776:	6413      	str	r3, [r2, #64]	@ 0x40
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	@ 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40005400 	.word	0x40005400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b090      	sub	sp, #64	@ 0x40
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a80      	ldr	r2, [pc, #512]	@ (80019b8 <HAL_TIM_Encoder_MspInit+0x220>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d14d      	bne.n	8001856 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017be:	4b7f      	ldr	r3, [pc, #508]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a7e      	ldr	r2, [pc, #504]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b7c      	ldr	r3, [pc, #496]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017da:	4b78      	ldr	r3, [pc, #480]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a77      	ldr	r2, [pc, #476]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001804:	2301      	movs	r3, #1
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	486c      	ldr	r0, [pc, #432]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x228>)
 8001810:	f001 f98a 	bl	8002b28 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	2018      	movs	r0, #24
 800181a:	f000 fd4c 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800181e:	2018      	movs	r0, #24
 8001820:	f000 fd65 	bl	80022ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2105      	movs	r1, #5
 8001828:	2019      	movs	r0, #25
 800182a:	f000 fd44 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800182e:	2019      	movs	r0, #25
 8001830:	f000 fd5d 	bl	80022ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2105      	movs	r1, #5
 8001838:	201a      	movs	r0, #26
 800183a:	f000 fd3c 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800183e:	201a      	movs	r0, #26
 8001840:	f000 fd55 	bl	80022ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2105      	movs	r1, #5
 8001848:	201b      	movs	r0, #27
 800184a:	f000 fd34 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800184e:	201b      	movs	r0, #27
 8001850:	f000 fd4d 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001854:	e0ac      	b.n	80019b0 <HAL_TIM_Encoder_MspInit+0x218>
  else if(htim_encoder->Instance==TIM2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185e:	d134      	bne.n	80018ca <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	4b55      	ldr	r3, [pc, #340]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a54      	ldr	r2, [pc, #336]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b52      	ldr	r3, [pc, #328]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6313      	str	r3, [r2, #48]	@ 0x30
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001898:	2303      	movs	r3, #3
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a8:	2301      	movs	r3, #1
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4843      	ldr	r0, [pc, #268]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x228>)
 80018b4:	f001 f938 	bl	8002b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2105      	movs	r1, #5
 80018bc:	201c      	movs	r0, #28
 80018be:	f000 fcfa 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c2:	201c      	movs	r0, #28
 80018c4:	f000 fd13 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 80018c8:	e072      	b.n	80019b0 <HAL_TIM_Encoder_MspInit+0x218>
  else if(htim_encoder->Instance==TIM3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x22c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d134      	bne.n	800193e <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	4a37      	ldr	r2, [pc, #220]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e4:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190c:	23c0      	movs	r3, #192	@ 0xc0
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800191c:	2302      	movs	r3, #2
 800191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4826      	ldr	r0, [pc, #152]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x228>)
 8001928:	f001 f8fe 	bl	8002b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2105      	movs	r1, #5
 8001930:	201d      	movs	r0, #29
 8001932:	f000 fcc0 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001936:	201d      	movs	r0, #29
 8001938:	f000 fcd9 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 800193c:	e038      	b.n	80019b0 <HAL_TIM_Encoder_MspInit+0x218>
  else if(htim_encoder->Instance==TIM4)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a21      	ldr	r2, [pc, #132]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x230>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d133      	bne.n	80019b0 <HAL_TIM_Encoder_MspInit+0x218>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a1a      	ldr	r2, [pc, #104]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6413      	str	r3, [r2, #64]	@ 0x40
 8001958:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	@ 0x30
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x224>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001980:	23c0      	movs	r3, #192	@ 0xc0
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001990:	2302      	movs	r3, #2
 8001992:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	480c      	ldr	r0, [pc, #48]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x234>)
 800199c:	f001 f8c4 	bl	8002b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2105      	movs	r1, #5
 80019a4:	201e      	movs	r0, #30
 80019a6:	f000 fc86 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019aa:	201e      	movs	r0, #30
 80019ac:	f000 fc9f 	bl	80022ee <HAL_NVIC_EnableIRQ>
}
 80019b0:	bf00      	nop
 80019b2:	3740      	adds	r7, #64	@ 0x40
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d115      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2105      	movs	r1, #5
 8001a02:	2032      	movs	r0, #50	@ 0x32
 8001a04:	f000 fc57 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a08:	2032      	movs	r0, #50	@ 0x32
 8001a0a:	f000 fc70 	bl	80022ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40000c00 	.word	0x40000c00
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b74 <HAL_UART_MspInit+0x154>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	f040 8093 	bne.w	8001b6a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_UART_MspInit+0x158>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b78 <HAL_UART_MspInit+0x158>)
 8001a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a54:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <HAL_UART_MspInit+0x158>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <HAL_UART_MspInit+0x158>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4a43      	ldr	r2, [pc, #268]	@ (8001b78 <HAL_UART_MspInit+0x158>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a70:	4b41      	ldr	r3, [pc, #260]	@ (8001b78 <HAL_UART_MspInit+0x158>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4839      	ldr	r0, [pc, #228]	@ (8001b7c <HAL_UART_MspInit+0x15c>)
 8001a98:	f001 f846 	bl	8002b28 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001a9e:	4a39      	ldr	r2, [pc, #228]	@ (8001b84 <HAL_UART_MspInit+0x164>)
 8001aa0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001aa4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aa8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aaa:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001ab8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001abc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001abe:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001ad4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ad8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ae0:	4827      	ldr	r0, [pc, #156]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001ae2:	f000 fc1f 	bl	8002324 <HAL_DMA_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001aec:	f7ff fc76 	bl	80013dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001af4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001af6:	4a22      	ldr	r2, [pc, #136]	@ (8001b80 <HAL_UART_MspInit+0x160>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001afe:	4a23      	ldr	r2, [pc, #140]	@ (8001b8c <HAL_UART_MspInit+0x16c>)
 8001b00:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b08:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b36:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b3e:	4812      	ldr	r0, [pc, #72]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b40:	f000 fbf0 	bl	8002324 <HAL_DMA_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001b4a:	f7ff fc47 	bl	80013dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b54:	4a0c      	ldr	r2, [pc, #48]	@ (8001b88 <HAL_UART_MspInit+0x168>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	2026      	movs	r0, #38	@ 0x26
 8001b60:	f000 fba9 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b64:	2026      	movs	r0, #38	@ 0x26
 8001b66:	f000 fbc2 	bl	80022ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40004400 	.word	0x40004400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	20003f08 	.word	0x20003f08
 8001b84:	40026088 	.word	0x40026088
 8001b88:	20003f68 	.word	0x20003f68
 8001b8c:	400260a0 	.word	0x400260a0

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <NMI_Handler+0x4>

08001b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f000 fa79 	bl	80020c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bce:	f005 fc7b 	bl	80074c8 <xTaskGetSchedulerState>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bd8:	f006 fa76 	bl	80080c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <DMA1_Stream5_IRQHandler+0x10>)
 8001be6:	f000 fd35 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20003f08 	.word	0x20003f08

08001bf4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <DMA1_Stream6_IRQHandler+0x10>)
 8001bfa:	f000 fd2b 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20003f68 	.word	0x20003f68

08001c08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c0e:	f002 f8eb 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20003d58 	.word	0x20003d58

08001c1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c22:	f002 f8e1 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20003d58 	.word	0x20003d58

08001c30 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c36:	f002 f8d7 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20003d58 	.word	0x20003d58

08001c44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <TIM1_CC_IRQHandler+0x10>)
 8001c4a:	f002 f8cd 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20003d58 	.word	0x20003d58

08001c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <TIM2_IRQHandler+0x10>)
 8001c5e:	f002 f8c3 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20003da0 	.word	0x20003da0

08001c6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <TIM3_IRQHandler+0x10>)
 8001c72:	f002 f8b9 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20003de8 	.word	0x20003de8

08001c80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <TIM4_IRQHandler+0x10>)
 8001c86:	f002 f8af 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20003e30 	.word	0x20003e30

08001c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <USART2_IRQHandler+0x10>)
 8001c9a:	f002 fdb7 	bl	800480c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20003ec0 	.word	0x20003ec0

08001ca8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <TIM5_IRQHandler+0x10>)
 8001cae:	f002 f89b 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20003e78 	.word	0x20003e78

08001cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return 1;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_kill>:

int _kill(int pid, int sig)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cd6:	f00f fe81 	bl	80119dc <__errno>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2216      	movs	r2, #22
 8001cde:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_exit>:

void _exit (int status)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ffe7 	bl	8001ccc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cfe:	bf00      	nop
 8001d00:	e7fd      	b.n	8001cfe <_exit+0x12>

08001d02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e00a      	b.n	8001d2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d14:	f3af 8000 	nop.w
 8001d18:	4601      	mov	r1, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	60ba      	str	r2, [r7, #8]
 8001d20:	b2ca      	uxtb	r2, r1
 8001d22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dbf0      	blt.n	8001d14 <_read+0x12>
  }

  return len;
 8001d32:	687b      	ldr	r3, [r7, #4]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e009      	b.n	8001d62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	60ba      	str	r2, [r7, #8]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbf1      	blt.n	8001d4e <_write+0x12>
  }
  return len;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_close>:

int _close(int file)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_isatty>:

int _isatty(int file)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f00f fde6 	bl	80119dc <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20018000 	.word	0x20018000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	20004024 	.word	0x20004024
 8001e44:	2000de20 	.word	0x2000de20

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	@ (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001e7a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001e7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e80:	4904      	ldr	r1, [pc, #16]	@ (8001e94 <cubemx_transport_open+0x28>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f002 fc1e 	bl	80046c4 <HAL_UART_Receive_DMA>
    return true;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20004028 	.word	0x20004028

08001e98 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001ea6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f002 fc30 	bl	800470e <HAL_UART_DMAStop>
    return true;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001ecc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d11c      	bne.n	8001f14 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f002 fb7e 	bl	80045e4 <HAL_UART_Transmit_DMA>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001eec:	e002      	b.n	8001ef4 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f003 fe9a 	bl	8005c28 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <cubemx_transport_write+0x4e>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d1f3      	bne.n	8001eee <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <cubemx_transport_write+0x58>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	e002      	b.n	8001f16 <cubemx_transport_write+0x5e>
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001f14:	2300      	movs	r3, #0
    }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001f34:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3a:	b672      	cpsid	i
}
 8001f3c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <cubemx_transport_read+0x9c>)
 8001f4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f4e:	b662      	cpsie	i
}
 8001f50:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f003 fe65 	bl	8005c28 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <cubemx_transport_read+0xa0>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <cubemx_transport_read+0x9c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d103      	bne.n	8001f72 <cubemx_transport_read+0x52>
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbe3      	blt.n	8001f3a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001f76:	e011      	b.n	8001f9c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <cubemx_transport_read+0xa0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	440b      	add	r3, r1
 8001f82:	4910      	ldr	r1, [pc, #64]	@ (8001fc4 <cubemx_transport_read+0xa4>)
 8001f84:	5c8a      	ldrb	r2, [r1, r2]
 8001f86:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001f88:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <cubemx_transport_read+0xa0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f92:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc0 <cubemx_transport_read+0xa0>)
 8001f94:	6013      	str	r3, [r2, #0]
        wrote++;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <cubemx_transport_read+0xa0>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <cubemx_transport_read+0x9c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d003      	beq.n	8001fb0 <cubemx_transport_read+0x90>
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3e3      	bcc.n	8001f78 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000482c 	.word	0x2000482c
 8001fc0:	20004828 	.word	0x20004828
 8001fc4:	20004028 	.word	0x20004028

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002000 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fcc:	f7ff ff3c 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	@ (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	@ (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f00f fcf7 	bl	80119e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7fe fd71 	bl	8000ae0 <main>
  bx  lr    
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002000:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800200c:	080132a0 	.word	0x080132a0
  ldr r2, =_sbss
 8002010:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002014:	2000de20 	.word	0x2000de20

08002018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_Init+0x40>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <HAL_Init+0x40>)
 8002026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800202a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_Init+0x40>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a07      	ldr	r2, [pc, #28]	@ (800205c <HAL_Init+0x40>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 f92b 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	200f      	movs	r0, #15
 800204c:	f000 f808 	bl	8002060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7ff fb2e 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x54>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_InitTick+0x58>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	fbb3 f3f1 	udiv	r3, r3, r1
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f943 	bl	800230a <HAL_SYSTICK_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00e      	b.n	80020ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b0f      	cmp	r3, #15
 8002092:	d80a      	bhi.n	80020aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800209c:	f000 f90b 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a0:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <HAL_InitTick+0x5c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000010 	.word	0x20000010
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000010 	.word	0x20000010
 80020e4:	20004830 	.word	0x20004830

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20004830 	.word	0x20004830

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002132:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60d3      	str	r3, [r2, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	@ (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	@ (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	@ 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff feda 	bl	80020e8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e099      	b.n	8002474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002360:	e00f      	b.n	8002382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002362:	f7ff fec1 	bl	80020e8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b05      	cmp	r3, #5
 800236e:	d908      	bls.n	8002382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2203      	movs	r2, #3
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e078      	b.n	8002474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e8      	bne.n	8002362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <HAL_DMA_Init+0x158>)
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d107      	bne.n	80023ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	4313      	orrs	r3, r2
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0307 	bic.w	r3, r3, #7
 8002402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	2b04      	cmp	r3, #4
 8002414:	d117      	bne.n	8002446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb01 	bl	8002a30 <DMA_CheckFifoParam>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002442:	2301      	movs	r3, #1
 8002444:	e016      	b.n	8002474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fab8 	bl	80029c4 <DMA_CalcBaseAndBitshift>
 8002454:	4603      	mov	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	223f      	movs	r2, #63	@ 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f010803f 	.word	0xf010803f

08002480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Start_IT+0x26>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e040      	b.n	8002528 <HAL_DMA_Start_IT+0xa8>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d12f      	bne.n	800251a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa4a 	bl	8002968 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	223f      	movs	r2, #63	@ 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0216 	orr.w	r2, r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0208 	orr.w	r2, r2, #8
 8002506:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e005      	b.n	8002526 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800253e:	f7ff fdd3 	bl	80020e8 <HAL_GetTick>
 8002542:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d008      	beq.n	8002562 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2280      	movs	r2, #128	@ 0x80
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e052      	b.n	8002608 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0216 	bic.w	r2, r2, #22
 8002570:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002580:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_DMA_Abort+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0208 	bic.w	r2, r2, #8
 80025a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b2:	e013      	b.n	80025dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b4:	f7ff fd98 	bl	80020e8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d90c      	bls.n	80025dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e015      	b.n	8002608 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e4      	bne.n	80025b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	223f      	movs	r2, #63	@ 0x3f
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d004      	beq.n	800262e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00c      	b.n	8002648 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2205      	movs	r2, #5
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002660:	4b8e      	ldr	r3, [pc, #568]	@ (800289c <HAL_DMA_IRQHandler+0x248>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a8e      	ldr	r2, [pc, #568]	@ (80028a0 <HAL_DMA_IRQHandler+0x24c>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a9b      	lsrs	r3, r3, #10
 800266c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2208      	movs	r2, #8
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2208      	movs	r2, #8
 80026ae:	409a      	lsls	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	2201      	movs	r2, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f043 0202 	orr.w	r2, r3, #2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2204      	movs	r2, #4
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2204      	movs	r2, #4
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002724:	f043 0204 	orr.w	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	2210      	movs	r2, #16
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d043      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03c      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	2210      	movs	r2, #16
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d024      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e01f      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e016      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0208 	bic.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2220      	movs	r2, #32
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 808f 	beq.w	80028f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8087 	beq.w	80028f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	2220      	movs	r2, #32
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d136      	bne.n	800286c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0216 	bic.w	r2, r2, #22
 800280c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_DMA_IRQHandler+0x1da>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0208 	bic.w	r2, r2, #8
 800283c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	223f      	movs	r2, #63	@ 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285e:	2b00      	cmp	r3, #0
 8002860:	d07e      	beq.n	8002960 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
        }
        return;
 800286a:	e079      	b.n	8002960 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	2b00      	cmp	r3, #0
 800288e:	d031      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e02c      	b.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
 800289a:	bf00      	nop
 800289c:	20000008 	.word	0x20000008
 80028a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e01e      	b.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0210 	bic.w	r2, r2, #16
 80028d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d032      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2205      	movs	r2, #5
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3301      	adds	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	d307      	bcc.n	800293c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f2      	bne.n	8002920 <HAL_DMA_IRQHandler+0x2cc>
 800293a:	e000      	b.n	800293e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800293c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	e000      	b.n	8002962 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002960:	bf00      	nop
    }
  }
}
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002984:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d108      	bne.n	80029a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029a6:	e007      	b.n	80029b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b10      	subs	r3, #16
 80029d4:	4a14      	ldr	r2, [pc, #80]	@ (8002a28 <DMA_CalcBaseAndBitshift+0x64>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029de:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d909      	bls.n	8002a06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	1d1a      	adds	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a04:	e007      	b.n	8002a16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	aaaaaaab 	.word	0xaaaaaaab
 8002a2c:	080128c0 	.word	0x080128c0

08002a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11f      	bne.n	8002a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d856      	bhi.n	8002afe <DMA_CheckFifoParam+0xce>
 8002a50:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <DMA_CheckFifoParam+0x28>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a7b 	.word	0x08002a7b
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	08002aff 	.word	0x08002aff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d046      	beq.n	8002b02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e043      	b.n	8002b02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a82:	d140      	bne.n	8002b06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e03d      	b.n	8002b06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a92:	d121      	bne.n	8002ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d837      	bhi.n	8002b0a <DMA_CheckFifoParam+0xda>
 8002a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa0 <DMA_CheckFifoParam+0x70>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ab7 	.word	0x08002ab7
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002ac9 	.word	0x08002ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e030      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d025      	beq.n	8002b0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e022      	b.n	8002b0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad6:	e01c      	b.n	8002b12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d903      	bls.n	8002ae6 <DMA_CheckFifoParam+0xb6>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d003      	beq.n	8002aec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae4:	e018      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aea:	e015      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e00b      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002afe:	bf00      	nop
 8002b00:	e00a      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e008      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e006      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e004      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
    }
  } 
  
  return status; 
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	@ 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e159      	b.n	8002df8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f040 8148 	bne.w	8002df2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d005      	beq.n	8002b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d130      	bne.n	8002bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 0201 	and.w	r2, r3, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d017      	beq.n	8002c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d123      	bne.n	8002c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	220f      	movs	r2, #15
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	69b9      	ldr	r1, [r7, #24]
 8002c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0203 	and.w	r2, r3, #3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a2 	beq.w	8002df2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b57      	ldr	r3, [pc, #348]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	4a56      	ldr	r2, [pc, #344]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cbe:	4b54      	ldr	r3, [pc, #336]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cca:	4a52      	ldr	r2, [pc, #328]	@ (8002e14 <HAL_GPIO_Init+0x2ec>)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a49      	ldr	r2, [pc, #292]	@ (8002e18 <HAL_GPIO_Init+0x2f0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x202>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a48      	ldr	r2, [pc, #288]	@ (8002e1c <HAL_GPIO_Init+0x2f4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x1fe>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a47      	ldr	r2, [pc, #284]	@ (8002e20 <HAL_GPIO_Init+0x2f8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x1fa>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a46      	ldr	r2, [pc, #280]	@ (8002e24 <HAL_GPIO_Init+0x2fc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x1f6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a45      	ldr	r2, [pc, #276]	@ (8002e28 <HAL_GPIO_Init+0x300>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x1f2>
 8002d16:	2304      	movs	r3, #4
 8002d18:	e008      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e004      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e002      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_GPIO_Init+0x204>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f002 0203 	and.w	r2, r2, #3
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	4093      	lsls	r3, r2
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d3c:	4935      	ldr	r1, [pc, #212]	@ (8002e14 <HAL_GPIO_Init+0x2ec>)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	3302      	adds	r3, #2
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4a:	4b38      	ldr	r3, [pc, #224]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d74:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d98:	4a24      	ldr	r2, [pc, #144]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d9e:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dec:	4a0f      	ldr	r2, [pc, #60]	@ (8002e2c <HAL_GPIO_Init+0x304>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	f67f aea2 	bls.w	8002b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40020000 	.word	0x40020000
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	40020800 	.word	0x40020800
 8002e24:	40020c00 	.word	0x40020c00
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12b      	b.n	80030ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fc3c 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	@ 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f000 fd80 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_I2C_Init+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a80      	ldr	r2, [pc, #512]	@ (80030dc <HAL_I2C_Init+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e006      	b.n	8002ef6 <HAL_I2C_Init+0x92>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a7d      	ldr	r2, [pc, #500]	@ (80030e0 <HAL_I2C_Init+0x27c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0e7      	b.n	80030ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a78      	ldr	r2, [pc, #480]	@ (80030e4 <HAL_I2C_Init+0x280>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d802      	bhi.n	8002f38 <HAL_I2C_Init+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e009      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <HAL_I2C_Init+0x284>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	495c      	ldr	r1, [pc, #368]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d819      	bhi.n	8002fa0 <HAL_I2C_Init+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e59      	subs	r1, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f80:	400b      	ands	r3, r1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_I2C_Init+0x138>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	e051      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e04f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_I2C_Init+0x168>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_I2C_Init+0x18e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x196>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_I2C_Init+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e58      	subs	r0, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	fbb0 f3f3 	udiv	r3, r0, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800306e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6911      	ldr	r1, [r2, #16]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	000186a0 	.word	0x000186a0
 80030dc:	001e847f 	.word	0x001e847f
 80030e0:	003d08ff 	.word	0x003d08ff
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e267      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d075      	beq.n	80031f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800310a:	4b88      	ldr	r3, [pc, #544]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00c      	beq.n	8003130 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b85      	ldr	r3, [pc, #532]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800311e:	2b08      	cmp	r3, #8
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4b82      	ldr	r3, [pc, #520]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800312e:	d10b      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	4b7e      	ldr	r3, [pc, #504]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d05b      	beq.n	80031f4 <HAL_RCC_OscConfig+0x108>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d157      	bne.n	80031f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e242      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003150:	d106      	bne.n	8003160 <HAL_RCC_OscConfig+0x74>
 8003152:	4b76      	ldr	r3, [pc, #472]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a75      	ldr	r2, [pc, #468]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e01d      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x98>
 800316a:	4b70      	ldr	r3, [pc, #448]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6f      	ldr	r2, [pc, #444]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b6d      	ldr	r3, [pc, #436]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6c      	ldr	r2, [pc, #432]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003184:	4b69      	ldr	r3, [pc, #420]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a68      	ldr	r2, [pc, #416]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b66      	ldr	r3, [pc, #408]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a65      	ldr	r2, [pc, #404]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800319a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe ffa0 	bl	80020e8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe ff9c 	bl	80020e8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	@ 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e207      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b5b      	ldr	r3, [pc, #364]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0xc0>
 80031ca:	e014      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe ff8c 	bl	80020e8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe ff88 	bl	80020e8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	@ 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1f3      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	4b51      	ldr	r3, [pc, #324]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0xe8>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d063      	beq.n	80032ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003202:	4b4a      	ldr	r3, [pc, #296]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003216:	2b08      	cmp	r3, #8
 8003218:	d11c      	bne.n	8003254 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b44      	ldr	r3, [pc, #272]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	4b41      	ldr	r3, [pc, #260]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x152>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1c7      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4937      	ldr	r1, [pc, #220]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	e03a      	b.n	80032ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325c:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <HAL_RCC_OscConfig+0x244>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe ff41 	bl	80020e8 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326a:	f7fe ff3d 	bl	80020e8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1a8      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	4b2b      	ldr	r3, [pc, #172]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b28      	ldr	r3, [pc, #160]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4925      	ldr	r1, [pc, #148]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
 800329c:	e015      	b.n	80032ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_RCC_OscConfig+0x244>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe ff20 	bl	80020e8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ac:	f7fe ff1c 	bl	80020e8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e187      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d036      	beq.n	8003344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032de:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <HAL_RCC_OscConfig+0x248>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe ff00 	bl	80020e8 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe fefc 	bl	80020e8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e167      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_OscConfig+0x240>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x200>
 800330a:	e01b      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_OscConfig+0x248>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe fee9 	bl	80020e8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	e00e      	b.n	8003338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe fee5 	bl	80020e8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d907      	bls.n	8003338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e150      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
 800332c:	40023800 	.word	0x40023800
 8003330:	42470000 	.word	0x42470000
 8003334:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b88      	ldr	r3, [pc, #544]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ea      	bne.n	800331a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8097 	beq.w	8003480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b81      	ldr	r3, [pc, #516]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b7d      	ldr	r3, [pc, #500]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	4a7c      	ldr	r2, [pc, #496]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	@ 0x40
 8003372:	4b7a      	ldr	r3, [pc, #488]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b77      	ldr	r3, [pc, #476]	@ (8003560 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b74      	ldr	r3, [pc, #464]	@ (8003560 <HAL_RCC_OscConfig+0x474>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a73      	ldr	r2, [pc, #460]	@ (8003560 <HAL_RCC_OscConfig+0x474>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fea5 	bl	80020e8 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe fea1 	bl	80020e8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e10c      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003560 <HAL_RCC_OscConfig+0x474>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2ea>
 80033c8:	4b64      	ldr	r3, [pc, #400]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033cc:	4a63      	ldr	r2, [pc, #396]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x324>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x30c>
 80033de:	4b5f      	ldr	r3, [pc, #380]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	4a5e      	ldr	r2, [pc, #376]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ea:	4b5c      	ldr	r3, [pc, #368]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ee:	4a5b      	ldr	r2, [pc, #364]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x324>
 80033f8:	4b58      	ldr	r3, [pc, #352]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a57      	ldr	r2, [pc, #348]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
 8003404:	4b55      	ldr	r3, [pc, #340]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003408:	4a54      	ldr	r2, [pc, #336]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe fe66 	bl	80020e8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fe62 	bl	80020e8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0cb      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	4b49      	ldr	r3, [pc, #292]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RCC_OscConfig+0x334>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fe fe50 	bl	80020e8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe fe4c 	bl	80020e8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0b5      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003462:	4b3e      	ldr	r3, [pc, #248]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ee      	bne.n	800344c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b39      	ldr	r3, [pc, #228]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800347e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a1 	beq.w	80035cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348a:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d05c      	beq.n	8003550 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d141      	bne.n	8003522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fe20 	bl	80020e8 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fe1c 	bl	80020e8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e087      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b27      	ldr	r3, [pc, #156]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	491b      	ldr	r1, [pc, #108]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x478>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fdf5 	bl	80020e8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe fdf1 	bl	80020e8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e05c      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x416>
 8003520:	e054      	b.n	80035cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <HAL_RCC_OscConfig+0x478>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fdde 	bl	80020e8 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe fdda 	bl	80020e8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e045      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_RCC_OscConfig+0x470>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x444>
 800354e:	e03d      	b.n	80035cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e038      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
 8003564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003568:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <HAL_RCC_OscConfig+0x4ec>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d028      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d121      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d11a      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800359e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0cc      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b68      	ldr	r3, [pc, #416]	@ (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d90c      	bls.n	8003618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b65      	ldr	r3, [pc, #404]	@ (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b63      	ldr	r3, [pc, #396]	@ (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0b8      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b59      	ldr	r3, [pc, #356]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a58      	ldr	r2, [pc, #352]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800363a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003648:	4b53      	ldr	r3, [pc, #332]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a52      	ldr	r2, [pc, #328]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b50      	ldr	r3, [pc, #320]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	494d      	ldr	r1, [pc, #308]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d044      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b47      	ldr	r3, [pc, #284]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d119      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d003      	beq.n	800369a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	2b03      	cmp	r3, #3
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b3f      	ldr	r3, [pc, #252]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e067      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b37      	ldr	r3, [pc, #220]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4934      	ldr	r1, [pc, #208]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fe fd0c 	bl	80020e8 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fe fd08 	bl	80020e8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e04f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b25      	ldr	r3, [pc, #148]	@ (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d20c      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b22      	ldr	r3, [pc, #136]	@ (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e032      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003730:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4916      	ldr	r1, [pc, #88]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374e:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	490e      	ldr	r1, [pc, #56]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003762:	f000 f821 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8003766:	4602      	mov	r2, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	490a      	ldr	r1, [pc, #40]	@ (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	5ccb      	ldrb	r3, [r1, r3]
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a09      	ldr	r2, [pc, #36]	@ (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800377e:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fc6c 	bl	8002060 <HAL_InitTick>

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023c00 	.word	0x40023c00
 8003798:	40023800 	.word	0x40023800
 800379c:	080128a8 	.word	0x080128a8
 80037a0:	20000008 	.word	0x20000008
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b094      	sub	sp, #80	@ 0x50
 80037ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c0:	4b79      	ldr	r3, [pc, #484]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d00d      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x40>
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	f200 80e1 	bhi.w	8003994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x34>
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037da:	e0db      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b73      	ldr	r3, [pc, #460]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x204>)
 80037de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e0:	e0db      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037e2:	4b73      	ldr	r3, [pc, #460]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e6:	e0d8      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e8:	4b6f      	ldr	r3, [pc, #444]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037f2:	4b6d      	ldr	r3, [pc, #436]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d063      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fe:	4b6a      	ldr	r3, [pc, #424]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	2200      	movs	r2, #0
 8003806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003808:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
 8003812:	2300      	movs	r3, #0
 8003814:	637b      	str	r3, [r7, #52]	@ 0x34
 8003816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800381a:	4622      	mov	r2, r4
 800381c:	462b      	mov	r3, r5
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	0159      	lsls	r1, r3, #5
 8003828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382c:	0150      	lsls	r0, r2, #5
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4621      	mov	r1, r4
 8003834:	1a51      	subs	r1, r2, r1
 8003836:	6139      	str	r1, [r7, #16]
 8003838:	4629      	mov	r1, r5
 800383a:	eb63 0301 	sbc.w	r3, r3, r1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800384c:	4659      	mov	r1, fp
 800384e:	018b      	lsls	r3, r1, #6
 8003850:	4651      	mov	r1, sl
 8003852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003856:	4651      	mov	r1, sl
 8003858:	018a      	lsls	r2, r1, #6
 800385a:	4651      	mov	r1, sl
 800385c:	ebb2 0801 	subs.w	r8, r2, r1
 8003860:	4659      	mov	r1, fp
 8003862:	eb63 0901 	sbc.w	r9, r3, r1
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800387a:	4690      	mov	r8, r2
 800387c:	4699      	mov	r9, r3
 800387e:	4623      	mov	r3, r4
 8003880:	eb18 0303 	adds.w	r3, r8, r3
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	462b      	mov	r3, r5
 8003888:	eb49 0303 	adc.w	r3, r9, r3
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800389a:	4629      	mov	r1, r5
 800389c:	024b      	lsls	r3, r1, #9
 800389e:	4621      	mov	r1, r4
 80038a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038a4:	4621      	mov	r1, r4
 80038a6:	024a      	lsls	r2, r1, #9
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ae:	2200      	movs	r2, #0
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038b8:	f7fc fd4a 	bl	8000350 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c4:	e058      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b38      	ldr	r3, [pc, #224]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	2200      	movs	r2, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	4611      	mov	r1, r2
 80038d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
 80038dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038e0:	4642      	mov	r2, r8
 80038e2:	464b      	mov	r3, r9
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	0159      	lsls	r1, r3, #5
 80038ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f2:	0150      	lsls	r0, r2, #5
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4641      	mov	r1, r8
 80038fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80038fe:	4649      	mov	r1, r9
 8003900:	eb63 0b01 	sbc.w	fp, r3, r1
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003918:	ebb2 040a 	subs.w	r4, r2, sl
 800391c:	eb63 050b 	sbc.w	r5, r3, fp
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	00eb      	lsls	r3, r5, #3
 800392a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392e:	00e2      	lsls	r2, r4, #3
 8003930:	4614      	mov	r4, r2
 8003932:	461d      	mov	r5, r3
 8003934:	4643      	mov	r3, r8
 8003936:	18e3      	adds	r3, r4, r3
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	464b      	mov	r3, r9
 800393c:	eb45 0303 	adc.w	r3, r5, r3
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394e:	4629      	mov	r1, r5
 8003950:	028b      	lsls	r3, r1, #10
 8003952:	4621      	mov	r1, r4
 8003954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003958:	4621      	mov	r1, r4
 800395a:	028a      	lsls	r2, r1, #10
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	61fa      	str	r2, [r7, #28]
 8003968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396c:	f7fc fcf0 	bl	8000350 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	3301      	adds	r3, #1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003988:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800398a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003992:	e002      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800399c:	4618      	mov	r0, r3
 800399e:	3750      	adds	r7, #80	@ 0x50
 80039a0:	46bd      	mov	sp, r7
 80039a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	00f42400 	.word	0x00f42400
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008

080039cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d0:	f7ff fff0 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0a9b      	lsrs	r3, r3, #10
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	@ (80039f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	080128b8 	.word	0x080128b8

080039f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f8:	f7ff ffdc 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0b5b      	lsrs	r3, r3, #13
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4903      	ldr	r1, [pc, #12]	@ (8003a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	080128b8 	.word	0x080128b8

08003a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e041      	b.n	8003ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd ffc4 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 fba4 	bl	80041a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e044      	b.n	8003b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d010      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	e007      	b.n	8003b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000

08003b80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e097      	b.n	8003cc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fd fdf5 	bl	8001798 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 fae7 	bl	80041a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	4313      	orrs	r3, r2
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003c20:	f023 030c 	bic.w	r3, r3, #12
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	011a      	lsls	r2, r3, #4
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	031b      	lsls	r3, r3, #12
 8003c50:	4313      	orrs	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	4313      	orrs	r3, r2
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ce4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d110      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d102      	bne.n	8003d08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d02:	7b7b      	ldrb	r3, [r7, #13]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d001      	beq.n	8003d0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e069      	b.n	8003de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1c:	e031      	b.n	8003d82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d110      	bne.n	8003d46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d24:	7bbb      	ldrb	r3, [r7, #14]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d2a:	7b3b      	ldrb	r3, [r7, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e055      	b.n	8003de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d44:	e01d      	b.n	8003d82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d4c:	7bbb      	ldrb	r3, [r7, #14]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d58:	7b3b      	ldrb	r3, [r7, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e03e      	b.n	8003de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_TIM_Encoder_Start+0xc4>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d008      	beq.n	8003da0 <HAL_TIM_Encoder_Start+0xd4>
 8003d8e:	e00f      	b.n	8003db0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fb2b 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8003d9e:	e016      	b.n	8003dce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	2104      	movs	r1, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fb23 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8003dae:	e00e      	b.n	8003dce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fb1b 	bl	80043f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fb14 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8003dcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d020      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0202 	mvn.w	r2, #2
 8003e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f999 	bl	800416a <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f98b 	bl	8004156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f99c 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d020      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0204 	mvn.w	r2, #4
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f973 	bl	800416a <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f965 	bl	8004156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f976 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d020      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01b      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0208 	mvn.w	r2, #8
 8003eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f94d 	bl	800416a <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f93f 	bl	8004156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f950 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d020      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0210 	mvn.w	r2, #16
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f927 	bl	800416a <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f919 	bl	8004156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f92a 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0201 	mvn.w	r2, #1
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd f97c 	bl	800124c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00c      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fadc 	bl	8004530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00c      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8fb 	bl	8004192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0220 	mvn.w	r2, #32
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 faae 	bl	800451c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0b4      	b.n	800414e <HAL_TIM_ConfigClockSource+0x186>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800400a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401c:	d03e      	beq.n	800409c <HAL_TIM_ConfigClockSource+0xd4>
 800401e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004022:	f200 8087 	bhi.w	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402a:	f000 8086 	beq.w	800413a <HAL_TIM_ConfigClockSource+0x172>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004032:	d87f      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b70      	cmp	r3, #112	@ 0x70
 8004036:	d01a      	beq.n	800406e <HAL_TIM_ConfigClockSource+0xa6>
 8004038:	2b70      	cmp	r3, #112	@ 0x70
 800403a:	d87b      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b60      	cmp	r3, #96	@ 0x60
 800403e:	d050      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004040:	2b60      	cmp	r3, #96	@ 0x60
 8004042:	d877      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b50      	cmp	r3, #80	@ 0x50
 8004046:	d03c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004048:	2b50      	cmp	r3, #80	@ 0x50
 800404a:	d873      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d058      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x13a>
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	d86f      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b30      	cmp	r3, #48	@ 0x30
 8004056:	d064      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 8004058:	2b30      	cmp	r3, #48	@ 0x30
 800405a:	d86b      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b20      	cmp	r3, #32
 800405e:	d060      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	2b20      	cmp	r3, #32
 8004062:	d867      	bhi.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05c      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	2b10      	cmp	r3, #16
 800406a:	d05a      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x15a>
 800406c:	e062      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800407e:	f000 f999 	bl	80043b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004090:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	609a      	str	r2, [r3, #8]
      break;
 800409a:	e04f      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040ac:	f000 f982 	bl	80043b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040be:	609a      	str	r2, [r3, #8]
      break;
 80040c0:	e03c      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 f8f6 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2150      	movs	r1, #80	@ 0x50
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f94f 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 80040e0:	e02c      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 f915 	bl	800431e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2160      	movs	r1, #96	@ 0x60
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f93f 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004100:	e01c      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410e:	461a      	mov	r2, r3
 8004110:	f000 f8d6 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2140      	movs	r1, #64	@ 0x40
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f92f 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004120:	e00c      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f000 f926 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8004132:	e003      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      break;
 8004138:	e000      	b.n	800413c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800413a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3a      	ldr	r2, [pc, #232]	@ (80042a4 <TIM_Base_SetConfig+0xfc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00f      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d00b      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a37      	ldr	r2, [pc, #220]	@ (80042a8 <TIM_Base_SetConfig+0x100>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a36      	ldr	r2, [pc, #216]	@ (80042ac <TIM_Base_SetConfig+0x104>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a35      	ldr	r2, [pc, #212]	@ (80042b0 <TIM_Base_SetConfig+0x108>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2b      	ldr	r2, [pc, #172]	@ (80042a4 <TIM_Base_SetConfig+0xfc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01b      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004200:	d017      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a28      	ldr	r2, [pc, #160]	@ (80042a8 <TIM_Base_SetConfig+0x100>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a27      	ldr	r2, [pc, #156]	@ (80042ac <TIM_Base_SetConfig+0x104>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <TIM_Base_SetConfig+0x108>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a25      	ldr	r2, [pc, #148]	@ (80042b4 <TIM_Base_SetConfig+0x10c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a24      	ldr	r2, [pc, #144]	@ (80042b8 <TIM_Base_SetConfig+0x110>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a23      	ldr	r2, [pc, #140]	@ (80042bc <TIM_Base_SetConfig+0x114>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a0e      	ldr	r2, [pc, #56]	@ (80042a4 <TIM_Base_SetConfig+0xfc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d103      	bne.n	8004278 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]
  }
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800

080042c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 030a 	bic.w	r3, r3, #10
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431e:	b480      	push	{r7}
 8004320:	b087      	sub	sp, #28
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f023 0210 	bic.w	r2, r3, #16
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800435a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	f043 0307 	orr.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	43db      	mvns	r3, r3
 8004416:	401a      	ands	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e050      	b.n	80044fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a4:	d013      	beq.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a16      	ldr	r2, [pc, #88]	@ (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a15      	ldr	r2, [pc, #84]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a13      	ldr	r2, [pc, #76]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d10c      	bne.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40010000 	.word	0x40010000
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40014000 	.word	0x40014000

0800451c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e042      	b.n	80045dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fa58 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	@ 0x24
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 ffc9 	bl	8005520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800459c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	@ 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	4613      	mov	r3, r2
 80045f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d156      	bne.n	80046ac <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_UART_Transmit_DMA+0x26>
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e04f      	b.n	80046ae <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2221      	movs	r2, #33	@ 0x21
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004632:	4a21      	ldr	r2, [pc, #132]	@ (80046b8 <HAL_UART_Transmit_DMA+0xd4>)
 8004634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	4a20      	ldr	r2, [pc, #128]	@ (80046bc <HAL_UART_Transmit_DMA+0xd8>)
 800463c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	4a1f      	ldr	r2, [pc, #124]	@ (80046c0 <HAL_UART_Transmit_DMA+0xdc>)
 8004644:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	2200      	movs	r2, #0
 800464c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800464e:	f107 0308 	add.w	r3, r7, #8
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	461a      	mov	r2, r3
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	f7fd ff0b 	bl	8002480 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004672:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	617b      	str	r3, [r7, #20]
   return(result);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004694:	627a      	str	r2, [r7, #36]	@ 0x24
 8004696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	@ 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08004dad 	.word	0x08004dad
 80046bc:	08004e47 	.word	0x08004e47
 80046c0:	08004fcb 	.word	0x08004fcb

080046c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d112      	bne.n	8004704 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_UART_Receive_DMA+0x26>
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00b      	b.n	8004706 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fcb0 	bl	8005060 <UART_Start_Receive_DMA>
 8004700:	4603      	mov	r3, r0
 8004702:	e000      	b.n	8004706 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b090      	sub	sp, #64	@ 0x40
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004724:	2b80      	cmp	r3, #128	@ 0x80
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b21      	cmp	r3, #33	@ 0x21
 800473a:	d128      	bne.n	800478e <HAL_UART_DMAStop+0x80>
 800473c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d025      	beq.n	800478e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	623b      	str	r3, [r7, #32]
   return(result);
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004762:	633a      	str	r2, [r7, #48]	@ 0x30
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd fed4 	bl	8002530 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fd03 	bl	8005194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b22      	cmp	r3, #34	@ 0x22
 80047ae:	d128      	bne.n	8004802 <HAL_UART_DMAStop+0xf4>
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d025      	beq.n	8004802 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047d6:	61fa      	str	r2, [r7, #28]
 80047d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	617b      	str	r3, [r7, #20]
   return(result);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e5      	bne.n	80047b6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fd fe9a 	bl	8002530 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fcf1 	bl	80051e4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3740      	adds	r7, #64	@ 0x40
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0ba      	sub	sp, #232	@ 0xe8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800484a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_UART_IRQHandler+0x66>
 800485e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fd99 	bl	80053a2 <UART_Receive_IT>
      return;
 8004870:	e25b      	b.n	8004d2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80de 	beq.w	8004a38 <HAL_UART_IRQHandler+0x22c>
 800487c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80d1 	beq.w	8004a38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0xae>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_UART_IRQHandler+0xd2>
 80048c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	f043 0202 	orr.w	r2, r3, #2
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xf6>
 80048ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f043 0204 	orr.w	r2, r3, #4
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <HAL_UART_IRQHandler+0x126>
 800490e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800491a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	f043 0208 	orr.w	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 81f2 	beq.w	8004d20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_UART_IRQHandler+0x14e>
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fd24 	bl	80053a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_UART_IRQHandler+0x17a>
 800497e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d04f      	beq.n	8004a26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fc2c 	bl	80051e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d141      	bne.n	8004a1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3314      	adds	r3, #20
 80049a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1d9      	bne.n	800499a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d013      	beq.n	8004a16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bec <HAL_UART_IRQHandler+0x3e0>)
 80049f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd fe08 	bl	8002610 <HAL_DMA_Abort_IT>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a10:	4610      	mov	r0, r2
 8004a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e00e      	b.n	8004a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9b2 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e00a      	b.n	8004a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9ae 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	e006      	b.n	8004a34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9aa 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a32:	e175      	b.n	8004d20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	bf00      	nop
    return;
 8004a36:	e173      	b.n	8004d20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	f040 814f 	bne.w	8004ce0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8148 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8141 	beq.w	8004ce0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7e:	2b40      	cmp	r3, #64	@ 0x40
 8004a80:	f040 80b6 	bne.w	8004bf0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8145 	beq.w	8004d24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	f080 813e 	bcs.w	8004d24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aba:	f000 8088 	beq.w	8004bce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004aea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1d9      	bne.n	8004abe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e1      	bne.n	8004b0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e3      	bne.n	8004b46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e3      	bne.n	8004b8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fd fcb1 	bl	8002530 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8d5 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bea:	e09b      	b.n	8004d24 <HAL_UART_IRQHandler+0x518>
 8004bec:	080052ab 	.word	0x080052ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 808e 	beq.w	8004d28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8089 	beq.w	8004d28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e3      	bne.n	8004c16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e3      	bne.n	8004c4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0310 	bic.w	r3, r3, #16
 8004caa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cb8:	61fa      	str	r2, [r7, #28]
 8004cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	69b9      	ldr	r1, [r7, #24]
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e3      	bne.n	8004c94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f85b 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cde:	e023      	b.n	8004d28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_UART_IRQHandler+0x4f4>
 8004cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 faea 	bl	80052d2 <UART_Transmit_IT>
    return;
 8004cfe:	e014      	b.n	8004d2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <HAL_UART_IRQHandler+0x51e>
 8004d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fb2a 	bl	8005372 <UART_EndTransmit_IT>
    return;
 8004d1e:	e004      	b.n	8004d2a <HAL_UART_IRQHandler+0x51e>
    return;
 8004d20:	bf00      	nop
 8004d22:	e002      	b.n	8004d2a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d28:	bf00      	nop
  }
}
 8004d2a:	37e8      	adds	r7, #232	@ 0xe8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b090      	sub	sp, #64	@ 0x40
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d137      	bne.n	8004e38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	2200      	movs	r2, #0
 8004dcc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004de4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3314      	adds	r3, #20
 8004dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dee:	633a      	str	r2, [r7, #48]	@ 0x30
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e5      	bne.n	8004dce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e22:	61fa      	str	r2, [r7, #28]
 8004e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e5      	bne.n	8004e02 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e36:	e002      	b.n	8004e3e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004e38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004e3a:	f7ff ff79 	bl	8004d30 <HAL_UART_TxCpltCallback>
}
 8004e3e:	bf00      	nop
 8004e40:	3740      	adds	r7, #64	@ 0x40
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff ff75 	bl	8004d44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b09c      	sub	sp, #112	@ 0x70
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d172      	bne.n	8004f64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e80:	2200      	movs	r2, #0
 8004e82:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ea4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ea6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004eaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3314      	adds	r3, #20
 8004ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ed8:	647a      	str	r2, [r7, #68]	@ 0x44
 8004eda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e5      	bne.n	8004eb8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	623b      	str	r3, [r7, #32]
   return(result);
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f02:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d119      	bne.n	8004f64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0310 	bic.w	r3, r3, #16
 8004f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f50:	61fa      	str	r2, [r7, #28]
 8004f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	69b9      	ldr	r1, [r7, #24]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e5      	bne.n	8004f30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f66:	2200      	movs	r2, #0
 8004f68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d106      	bne.n	8004f80 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f76:	4619      	mov	r1, r3
 8004f78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f7a:	f7ff ff0b 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f7e:	e002      	b.n	8004f86 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004f80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f82:	f7ff fee9 	bl	8004d58 <HAL_UART_RxCpltCallback>
}
 8004f86:	bf00      	nop
 8004f88:	3770      	adds	r7, #112	@ 0x70
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d108      	bne.n	8004fbc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff feed 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fba:	e002      	b.n	8004fc2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff fed5 	bl	8004d6c <HAL_UART_RxHalfCpltCallback>
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b80      	cmp	r3, #128	@ 0x80
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b21      	cmp	r3, #33	@ 0x21
 8004ffc:	d108      	bne.n	8005010 <UART_DMAError+0x46>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800500a:	68b8      	ldr	r0, [r7, #8]
 800500c:	f000 f8c2 	bl	8005194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	bf0c      	ite	eq
 800501e:	2301      	moveq	r3, #1
 8005020:	2300      	movne	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b22      	cmp	r3, #34	@ 0x22
 8005030:	d108      	bne.n	8005044 <UART_DMAError+0x7a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800503e:	68b8      	ldr	r0, [r7, #8]
 8005040:	f000 f8d0 	bl	80051e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005048:	f043 0210 	orr.w	r2, r3, #16
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005050:	68b8      	ldr	r0, [r7, #8]
 8005052:	f7ff fe95 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b098      	sub	sp, #96	@ 0x60
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2222      	movs	r2, #34	@ 0x22
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508c:	4a3e      	ldr	r2, [pc, #248]	@ (8005188 <UART_Start_Receive_DMA+0x128>)
 800508e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005094:	4a3d      	ldr	r2, [pc, #244]	@ (800518c <UART_Start_Receive_DMA+0x12c>)
 8005096:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509c:	4a3c      	ldr	r2, [pc, #240]	@ (8005190 <UART_Start_Receive_DMA+0x130>)
 800509e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	2200      	movs	r2, #0
 80050a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050a8:	f107 0308 	add.w	r3, r7, #8
 80050ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f7fd f9de 	bl	8002480 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d019      	beq.n	8005116 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005102:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005104:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3314      	adds	r3, #20
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	657b      	str	r3, [r7, #84]	@ 0x54
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005136:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800513c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3314      	adds	r3, #20
 8005150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	617b      	str	r3, [r7, #20]
   return(result);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005160:	653b      	str	r3, [r7, #80]	@ 0x50
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800516a:	627a      	str	r2, [r7, #36]	@ 0x24
 800516c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6a39      	ldr	r1, [r7, #32]
 8005170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	61fb      	str	r3, [r7, #28]
   return(result);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3760      	adds	r7, #96	@ 0x60
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	08004e63 	.word	0x08004e63
 800518c:	08004f8f 	.word	0x08004f8f
 8005190:	08004fcb 	.word	0x08004fcb

08005194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	61ba      	str	r2, [r7, #24]
 80051be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6979      	ldr	r1, [r7, #20]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80051d8:	bf00      	nop
 80051da:	3724      	adds	r7, #36	@ 0x24
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b095      	sub	sp, #84	@ 0x54
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800520c:	643a      	str	r2, [r7, #64]	@ 0x40
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	2b01      	cmp	r3, #1
 800525a:	d119      	bne.n	8005290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	60bb      	str	r3, [r7, #8]
   return(result);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800527c:	61ba      	str	r2, [r7, #24]
 800527e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6979      	ldr	r1, [r7, #20]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	613b      	str	r3, [r7, #16]
   return(result);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800529e:	bf00      	nop
 80052a0:	3754      	adds	r7, #84	@ 0x54
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fd5b 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b21      	cmp	r3, #33	@ 0x21
 80052e4:	d13e      	bne.n	8005364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ee:	d114      	bne.n	800531a <UART_Transmit_IT+0x48>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d110      	bne.n	800531a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800530c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]
 8005318:	e008      	b.n	800532c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	1c59      	adds	r1, r3, #1
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6211      	str	r1, [r2, #32]
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4619      	mov	r1, r3
 800533a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10f      	bne.n	8005360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800534e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800535e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fccc 	bl	8004d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08c      	sub	sp, #48	@ 0x30
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b22      	cmp	r3, #34	@ 0x22
 80053b4:	f040 80ae 	bne.w	8005514 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c0:	d117      	bne.n	80053f2 <UART_Receive_IT+0x50>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d113      	bne.n	80053f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f0:	e026      	b.n	8005440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005404:	d007      	beq.n	8005416 <UART_Receive_IT+0x74>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <UART_Receive_IT+0x82>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e008      	b.n	8005436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005430:	b2da      	uxtb	r2, r3
 8005432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29b      	uxth	r3, r3
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4619      	mov	r1, r3
 800544e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005450:	2b00      	cmp	r3, #0
 8005452:	d15d      	bne.n	8005510 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0220 	bic.w	r2, r2, #32
 8005462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	2b01      	cmp	r3, #1
 8005498:	d135      	bne.n	8005506 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	613b      	str	r3, [r7, #16]
   return(result);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 0310 	bic.w	r3, r3, #16
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c0:	623a      	str	r2, [r7, #32]
 80054c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	6a3a      	ldr	r2, [r7, #32]
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d10a      	bne.n	80054f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fc48 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
 8005504:	e002      	b.n	800550c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7ff fc26 	bl	8004d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e002      	b.n	8005516 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e000      	b.n	8005516 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3730      	adds	r7, #48	@ 0x30
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005524:	b0c0      	sub	sp, #256	@ 0x100
 8005526:	af00      	add	r7, sp, #0
 8005528:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	68d9      	ldr	r1, [r3, #12]
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	ea40 0301 	orr.w	r3, r0, r1
 8005548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	431a      	orrs	r2, r3
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	431a      	orrs	r2, r3
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005578:	f021 010c 	bic.w	r1, r1, #12
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005586:	430b      	orrs	r3, r1
 8005588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	6999      	ldr	r1, [r3, #24]
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	ea40 0301 	orr.w	r3, r0, r1
 80055a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b8f      	ldr	r3, [pc, #572]	@ (80057ec <UART_SetConfig+0x2cc>)
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d005      	beq.n	80055c0 <UART_SetConfig+0xa0>
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b8d      	ldr	r3, [pc, #564]	@ (80057f0 <UART_SetConfig+0x2d0>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	d104      	bne.n	80055ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fa18 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 80055c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055c8:	e003      	b.n	80055d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ca:	f7fe f9ff 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 80055ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055dc:	f040 810c 	bne.w	80057f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055f2:	4622      	mov	r2, r4
 80055f4:	462b      	mov	r3, r5
 80055f6:	1891      	adds	r1, r2, r2
 80055f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055fa:	415b      	adcs	r3, r3
 80055fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005602:	4621      	mov	r1, r4
 8005604:	eb12 0801 	adds.w	r8, r2, r1
 8005608:	4629      	mov	r1, r5
 800560a:	eb43 0901 	adc.w	r9, r3, r1
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005622:	4690      	mov	r8, r2
 8005624:	4699      	mov	r9, r3
 8005626:	4623      	mov	r3, r4
 8005628:	eb18 0303 	adds.w	r3, r8, r3
 800562c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005630:	462b      	mov	r3, r5
 8005632:	eb49 0303 	adc.w	r3, r9, r3
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005646:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800564a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800564e:	460b      	mov	r3, r1
 8005650:	18db      	adds	r3, r3, r3
 8005652:	653b      	str	r3, [r7, #80]	@ 0x50
 8005654:	4613      	mov	r3, r2
 8005656:	eb42 0303 	adc.w	r3, r2, r3
 800565a:	657b      	str	r3, [r7, #84]	@ 0x54
 800565c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005664:	f7fa fe74 	bl	8000350 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b61      	ldr	r3, [pc, #388]	@ (80057f4 <UART_SetConfig+0x2d4>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011c      	lsls	r4, r3, #4
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005680:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005690:	415b      	adcs	r3, r3
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005698:	4641      	mov	r1, r8
 800569a:	eb12 0a01 	adds.w	sl, r2, r1
 800569e:	4649      	mov	r1, r9
 80056a0:	eb43 0b01 	adc.w	fp, r3, r1
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b8:	4692      	mov	sl, r2
 80056ba:	469b      	mov	fp, r3
 80056bc:	4643      	mov	r3, r8
 80056be:	eb1a 0303 	adds.w	r3, sl, r3
 80056c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c6:	464b      	mov	r3, r9
 80056c8:	eb4b 0303 	adc.w	r3, fp, r3
 80056cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056e4:	460b      	mov	r3, r1
 80056e6:	18db      	adds	r3, r3, r3
 80056e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ea:	4613      	mov	r3, r2
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056fa:	f7fa fe29 	bl	8000350 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4611      	mov	r1, r2
 8005704:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <UART_SetConfig+0x2d4>)
 8005706:	fba3 2301 	umull	r2, r3, r3, r1
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	2264      	movs	r2, #100	@ 0x64
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	1acb      	subs	r3, r1, r3
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800571a:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <UART_SetConfig+0x2d4>)
 800571c:	fba3 2302 	umull	r2, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005728:	441c      	add	r4, r3
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005734:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005744:	415b      	adcs	r3, r3
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800574c:	4641      	mov	r1, r8
 800574e:	1851      	adds	r1, r2, r1
 8005750:	6339      	str	r1, [r7, #48]	@ 0x30
 8005752:	4649      	mov	r1, r9
 8005754:	414b      	adcs	r3, r1
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005764:	4659      	mov	r1, fp
 8005766:	00cb      	lsls	r3, r1, #3
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576e:	4651      	mov	r1, sl
 8005770:	00ca      	lsls	r2, r1, #3
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	4603      	mov	r3, r0
 8005778:	4642      	mov	r2, r8
 800577a:	189b      	adds	r3, r3, r2
 800577c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005780:	464b      	mov	r3, r9
 8005782:	460a      	mov	r2, r1
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005798:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800579c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057b6:	f7fa fdcb 	bl	8000350 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	@ 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	3332      	adds	r3, #50	@ 0x32
 80057d2:	4a08      	ldr	r2, [pc, #32]	@ (80057f4 <UART_SetConfig+0x2d4>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 0207 	and.w	r2, r3, #7
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4422      	add	r2, r4
 80057e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e8:	e106      	b.n	80059f8 <UART_SetConfig+0x4d8>
 80057ea:	bf00      	nop
 80057ec:	40011000 	.word	0x40011000
 80057f0:	40011400 	.word	0x40011400
 80057f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005802:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800580a:	4642      	mov	r2, r8
 800580c:	464b      	mov	r3, r9
 800580e:	1891      	adds	r1, r2, r2
 8005810:	6239      	str	r1, [r7, #32]
 8005812:	415b      	adcs	r3, r3
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800581a:	4641      	mov	r1, r8
 800581c:	1854      	adds	r4, r2, r1
 800581e:	4649      	mov	r1, r9
 8005820:	eb43 0501 	adc.w	r5, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	00eb      	lsls	r3, r5, #3
 800582e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005832:	00e2      	lsls	r2, r4, #3
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	4643      	mov	r3, r8
 800583a:	18e3      	adds	r3, r4, r3
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005840:	464b      	mov	r3, r9
 8005842:	eb45 0303 	adc.w	r3, r5, r3
 8005846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005866:	4629      	mov	r1, r5
 8005868:	008b      	lsls	r3, r1, #2
 800586a:	4621      	mov	r1, r4
 800586c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005870:	4621      	mov	r1, r4
 8005872:	008a      	lsls	r2, r1, #2
 8005874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005878:	f7fa fd6a 	bl	8000350 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4b60      	ldr	r3, [pc, #384]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005882:	fba3 2302 	umull	r2, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	011c      	lsls	r4, r3, #4
 800588a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005894:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	61b9      	str	r1, [r7, #24]
 80058a4:	415b      	adcs	r3, r3
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ac:	4641      	mov	r1, r8
 80058ae:	1851      	adds	r1, r2, r1
 80058b0:	6139      	str	r1, [r7, #16]
 80058b2:	4649      	mov	r1, r9
 80058b4:	414b      	adcs	r3, r1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c4:	4659      	mov	r1, fp
 80058c6:	00cb      	lsls	r3, r1, #3
 80058c8:	4651      	mov	r1, sl
 80058ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ce:	4651      	mov	r1, sl
 80058d0:	00ca      	lsls	r2, r1, #3
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	4642      	mov	r2, r8
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058e0:	464b      	mov	r3, r9
 80058e2:	460a      	mov	r2, r1
 80058e4:	eb42 0303 	adc.w	r3, r2, r3
 80058e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005904:	4649      	mov	r1, r9
 8005906:	008b      	lsls	r3, r1, #2
 8005908:	4641      	mov	r1, r8
 800590a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590e:	4641      	mov	r1, r8
 8005910:	008a      	lsls	r2, r1, #2
 8005912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005916:	f7fa fd1b 	bl	8000350 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4611      	mov	r1, r2
 8005920:	4b38      	ldr	r3, [pc, #224]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005922:	fba3 2301 	umull	r2, r3, r3, r1
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2264      	movs	r2, #100	@ 0x64
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	1acb      	subs	r3, r1, r3
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	3332      	adds	r3, #50	@ 0x32
 8005934:	4a33      	ldr	r2, [pc, #204]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005940:	441c      	add	r4, r3
 8005942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005946:	2200      	movs	r2, #0
 8005948:	673b      	str	r3, [r7, #112]	@ 0x70
 800594a:	677a      	str	r2, [r7, #116]	@ 0x74
 800594c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	415b      	adcs	r3, r3
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005960:	4641      	mov	r1, r8
 8005962:	1851      	adds	r1, r2, r1
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	4649      	mov	r1, r9
 8005968:	414b      	adcs	r3, r1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005978:	4659      	mov	r1, fp
 800597a:	00cb      	lsls	r3, r1, #3
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005982:	4651      	mov	r1, sl
 8005984:	00ca      	lsls	r2, r1, #3
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	4603      	mov	r3, r0
 800598c:	4642      	mov	r2, r8
 800598e:	189b      	adds	r3, r3, r2
 8005990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005992:	464b      	mov	r3, r9
 8005994:	460a      	mov	r2, r1
 8005996:	eb42 0303 	adc.w	r3, r2, r3
 800599a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80059a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059b4:	4649      	mov	r1, r9
 80059b6:	008b      	lsls	r3, r1, #2
 80059b8:	4641      	mov	r1, r8
 80059ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059be:	4641      	mov	r1, r8
 80059c0:	008a      	lsls	r2, r1, #2
 80059c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059c6:	f7fa fcc3 	bl	8000350 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <UART_SetConfig+0x4e4>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	2164      	movs	r1, #100	@ 0x64
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	3332      	adds	r3, #50	@ 0x32
 80059e2:	4a08      	ldr	r2, [pc, #32]	@ (8005a04 <UART_SetConfig+0x4e4>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4422      	add	r2, r4
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059fe:	46bd      	mov	sp, r7
 8005a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a04:	51eb851f 	.word	0x51eb851f

08005a08 <__NVIC_SetPriority>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	6039      	str	r1, [r7, #0]
 8005a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	db0a      	blt.n	8005a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	490c      	ldr	r1, [pc, #48]	@ (8005a54 <__NVIC_SetPriority+0x4c>)
 8005a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a26:	0112      	lsls	r2, r2, #4
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a30:	e00a      	b.n	8005a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4908      	ldr	r1, [pc, #32]	@ (8005a58 <__NVIC_SetPriority+0x50>)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	3b04      	subs	r3, #4
 8005a40:	0112      	lsls	r2, r2, #4
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	440b      	add	r3, r1
 8005a46:	761a      	strb	r2, [r3, #24]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000e100 	.word	0xe000e100
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a60:	2100      	movs	r1, #0
 8005a62:	f06f 0004 	mvn.w	r0, #4
 8005a66:	f7ff ffcf 	bl	8005a08 <__NVIC_SetPriority>
#endif
}
 8005a6a:	bf00      	nop
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a76:	f3ef 8305 	mrs	r3, IPSR
 8005a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a82:	f06f 0305 	mvn.w	r3, #5
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	e00c      	b.n	8005aa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <osKernelInitialize+0x44>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a92:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <osKernelInitialize+0x44>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	e002      	b.n	8005aa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005aa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005aa4:	687b      	ldr	r3, [r7, #4]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20004834 	.word	0x20004834

08005ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005abe:	f3ef 8305 	mrs	r3, IPSR
 8005ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005aca:	f06f 0305 	mvn.w	r3, #5
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	e010      	b.n	8005af4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b00 <osKernelStart+0x48>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d109      	bne.n	8005aee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ada:	f7ff ffbf 	bl	8005a5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ade:	4b08      	ldr	r3, [pc, #32]	@ (8005b00 <osKernelStart+0x48>)
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ae4:	f001 f87a 	bl	8006bdc <vTaskStartScheduler>
      stat = osOK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	e002      	b.n	8005af4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005af4:	687b      	ldr	r3, [r7, #4]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20004834 	.word	0x20004834

08005b04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	@ 0x38
 8005b08:	af04      	add	r7, sp, #16
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b14:	f3ef 8305 	mrs	r3, IPSR
 8005b18:	617b      	str	r3, [r7, #20]
  return(result);
 8005b1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d17e      	bne.n	8005c1e <osThreadNew+0x11a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d07b      	beq.n	8005c1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b26:	2380      	movs	r3, #128	@ 0x80
 8005b28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b2a:	2318      	movs	r3, #24
 8005b2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d045      	beq.n	8005bca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <osThreadNew+0x48>
        name = attr->name;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <osThreadNew+0x6e>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b38      	cmp	r3, #56	@ 0x38
 8005b64:	d805      	bhi.n	8005b72 <osThreadNew+0x6e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <osThreadNew+0x72>
        return (NULL);
 8005b72:	2300      	movs	r3, #0
 8005b74:	e054      	b.n	8005c20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	089b      	lsrs	r3, r3, #2
 8005b84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00e      	beq.n	8005bac <osThreadNew+0xa8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b94:	d90a      	bls.n	8005bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <osThreadNew+0xa8>
        mem = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e010      	b.n	8005bce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <osThreadNew+0xca>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d108      	bne.n	8005bce <osThreadNew+0xca>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <osThreadNew+0xca>
          mem = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e001      	b.n	8005bce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d110      	bne.n	8005bf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bdc:	9202      	str	r2, [sp, #8]
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fe1a 	bl	8006824 <xTaskCreateStatic>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	e013      	b.n	8005c1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d110      	bne.n	8005c1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fe68 	bl	80068e4 <xTaskCreate>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <osThreadNew+0x11a>
            hTask = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c1e:	693b      	ldr	r3, [r7, #16]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3728      	adds	r7, #40	@ 0x28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c30:	f3ef 8305 	mrs	r3, IPSR
 8005c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <osDelay+0x1c>
    stat = osErrorISR;
 8005c3c:	f06f 0305 	mvn.w	r3, #5
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e007      	b.n	8005c54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 ff8e 	bl	8006b70 <vTaskDelay>
    }
  }

  return (stat);
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a07      	ldr	r2, [pc, #28]	@ (8005c8c <vApplicationGetIdleTaskMemory+0x2c>)
 8005c70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4a06      	ldr	r2, [pc, #24]	@ (8005c90 <vApplicationGetIdleTaskMemory+0x30>)
 8005c76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2280      	movs	r2, #128	@ 0x80
 8005c7c:	601a      	str	r2, [r3, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20004838 	.word	0x20004838
 8005c90:	20004894 	.word	0x20004894

08005c94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a07      	ldr	r2, [pc, #28]	@ (8005cc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ca4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4a06      	ldr	r2, [pc, #24]	@ (8005cc4 <vApplicationGetTimerTaskMemory+0x30>)
 8005caa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20004a94 	.word	0x20004a94
 8005cc4:	20004af0 	.word	0x20004af0

08005cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 0208 	add.w	r2, r3, #8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f103 0208 	add.w	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f103 0208 	add.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d80:	d103      	bne.n	8005d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e00c      	b.n	8005da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e002      	b.n	8005d98 <vListInsert+0x2e>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d2f6      	bcs.n	8005d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6892      	ldr	r2, [r2, #8]
 8005df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6852      	ldr	r2, [r2, #4]
 8005dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d103      	bne.n	8005e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	1e5a      	subs	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <xQueueGenericReset+0x2c>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60bb      	str	r3, [r7, #8]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e5c:	f002 f8a4 	bl	8007fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e68:	68f9      	ldr	r1, [r7, #12]
 8005e6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	68f9      	ldr	r1, [r7, #12]
 8005e90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	441a      	add	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	22ff      	movs	r2, #255	@ 0xff
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	22ff      	movs	r2, #255	@ 0xff
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d114      	bne.n	8005edc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01a      	beq.n	8005ef0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 f91a 	bl	80070f8 <xTaskRemoveFromEventList>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d012      	beq.n	8005ef0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <xQueueGenericReset+0xd0>)
 8005ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	e009      	b.n	8005ef0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3310      	adds	r3, #16
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fef1 	bl	8005cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3324      	adds	r3, #36	@ 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff feec 	bl	8005cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ef0:	f002 f88c 	bl	800800c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ef4:	2301      	movs	r3, #1
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08e      	sub	sp, #56	@ 0x38
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <xQueueGenericCreateStatic+0x56>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <xQueueGenericCreateStatic+0x5a>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <xQueueGenericCreateStatic+0x5c>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	623b      	str	r3, [r7, #32]
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <xQueueGenericCreateStatic+0x84>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueGenericCreateStatic+0x88>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueGenericCreateStatic+0x8a>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	61fb      	str	r3, [r7, #28]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005faa:	2350      	movs	r3, #80	@ 0x50
 8005fac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b50      	cmp	r3, #80	@ 0x50
 8005fb2:	d00b      	beq.n	8005fcc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	61bb      	str	r3, [r7, #24]
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	e7fd      	b.n	8005fc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00d      	beq.n	8005ff4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fe0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f805 	bl	8005ffe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3730      	adds	r7, #48	@ 0x30
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e002      	b.n	8006020 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800602c:	2101      	movs	r1, #1
 800602e:	69b8      	ldr	r0, [r7, #24]
 8006030:	f7ff fefe 	bl	8005e30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08e      	sub	sp, #56	@ 0x38
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006052:	2300      	movs	r3, #0
 8006054:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <xQueueGenericSend+0x34>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <xQueueGenericSend+0x42>
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <xQueueGenericSend+0x46>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xQueueGenericSend+0x48>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <xQueueGenericSend+0x64>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d103      	bne.n	80060b6 <xQueueGenericSend+0x72>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <xQueueGenericSend+0x76>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericSend+0x78>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <xQueueGenericSend+0x94>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060d8:	f001 f9f6 	bl	80074c8 <xTaskGetSchedulerState>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <xQueueGenericSend+0xa4>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <xQueueGenericSend+0xa8>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <xQueueGenericSend+0xaa>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <xQueueGenericSend+0xc6>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fb      	str	r3, [r7, #28]
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	e7fd      	b.n	8006106 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800610a:	f001 ff4d 	bl	8007fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <xQueueGenericSend+0xdc>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d129      	bne.n	8006174 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006126:	f000 fa0f 	bl	8006548 <prvCopyDataToQueue>
 800612a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d010      	beq.n	8006156 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	3324      	adds	r3, #36	@ 0x24
 8006138:	4618      	mov	r0, r3
 800613a:	f000 ffdd 	bl	80070f8 <xTaskRemoveFromEventList>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d013      	beq.n	800616c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006144:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <xQueueGenericSend+0x200>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	e00a      	b.n	800616c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800615c:	4b39      	ldr	r3, [pc, #228]	@ (8006244 <xQueueGenericSend+0x200>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800616c:	f001 ff4e 	bl	800800c <vPortExitCritical>
				return pdPASS;
 8006170:	2301      	movs	r3, #1
 8006172:	e063      	b.n	800623c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d103      	bne.n	8006182 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800617a:	f001 ff47 	bl	800800c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800617e:	2300      	movs	r3, #0
 8006180:	e05c      	b.n	800623c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4618      	mov	r0, r3
 800618e:	f001 f83f 	bl	8007210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006192:	2301      	movs	r3, #1
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006196:	f001 ff39 	bl	800800c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800619a:	f000 fd87 	bl	8006cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800619e:	f001 ff03 	bl	8007fa8 <vPortEnterCritical>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ae:	d103      	bne.n	80061b8 <xQueueGenericSend+0x174>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061be:	b25b      	sxtb	r3, r3
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061c4:	d103      	bne.n	80061ce <xQueueGenericSend+0x18a>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ce:	f001 ff1d 	bl	800800c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061d2:	1d3a      	adds	r2, r7, #4
 80061d4:	f107 0314 	add.w	r3, r7, #20
 80061d8:	4611      	mov	r1, r2
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f82e 	bl	800723c <xTaskCheckForTimeOut>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d124      	bne.n	8006230 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061e8:	f000 faa6 	bl	8006738 <prvIsQueueFull>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d018      	beq.n	8006224 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	3310      	adds	r3, #16
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4611      	mov	r1, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 ff2a 	bl	8007054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006202:	f000 fa31 	bl	8006668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006206:	f000 fd5f 	bl	8006cc8 <xTaskResumeAll>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	f47f af7c 	bne.w	800610a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006212:	4b0c      	ldr	r3, [pc, #48]	@ (8006244 <xQueueGenericSend+0x200>)
 8006214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	e772      	b.n	800610a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006226:	f000 fa1f 	bl	8006668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800622a:	f000 fd4d 	bl	8006cc8 <xTaskResumeAll>
 800622e:	e76c      	b.n	800610a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006232:	f000 fa19 	bl	8006668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006236:	f000 fd47 	bl	8006cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800623a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800623c:	4618      	mov	r0, r3
 800623e:	3738      	adds	r7, #56	@ 0x38
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b090      	sub	sp, #64	@ 0x40
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800625a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10b      	bne.n	8006278 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	e7fd      	b.n	8006274 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <xQueueGenericSendFromISR+0x3e>
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <xQueueGenericSendFromISR+0x42>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <xQueueGenericSendFromISR+0x44>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d103      	bne.n	80062b6 <xQueueGenericSendFromISR+0x6e>
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <xQueueGenericSendFromISR+0x72>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xQueueGenericSendFromISR+0x74>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10b      	bne.n	80062d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	623b      	str	r3, [r7, #32]
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062d8:	f001 ff46 	bl	8008168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062dc:	f3ef 8211 	mrs	r2, BASEPRI
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	61fa      	str	r2, [r7, #28]
 80062f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <xQueueGenericSendFromISR+0xc2>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d12f      	bne.n	800636a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006318:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006320:	f000 f912 	bl	8006548 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006324:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800632c:	d112      	bne.n	8006354 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	3324      	adds	r3, #36	@ 0x24
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fedc 	bl	80070f8 <xTaskRemoveFromEventList>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e007      	b.n	8006364 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006354:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006358:	3301      	adds	r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	b25a      	sxtb	r2, r3
 800635e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006364:	2301      	movs	r3, #1
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006368:	e001      	b.n	800636e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800636a:	2300      	movs	r3, #0
 800636c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800636e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006370:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006378:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800637a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800637c:	4618      	mov	r0, r3
 800637e:	3740      	adds	r7, #64	@ 0x40
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08c      	sub	sp, #48	@ 0x30
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <xQueueReceive+0x32>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	623b      	str	r3, [r7, #32]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <xQueueReceive+0x40>
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <xQueueReceive+0x44>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <xQueueReceive+0x46>
 80063c8:	2300      	movs	r3, #0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <xQueueReceive+0x62>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61fb      	str	r3, [r7, #28]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e6:	f001 f86f 	bl	80074c8 <xTaskGetSchedulerState>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <xQueueReceive+0x72>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <xQueueReceive+0x76>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <xQueueReceive+0x78>
 80063fa:	2300      	movs	r3, #0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <xQueueReceive+0x94>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	61bb      	str	r3, [r7, #24]
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	e7fd      	b.n	8006414 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006418:	f001 fdc6 	bl	8007fa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01f      	beq.n	8006468 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800642c:	f000 f8f6 	bl	800661c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	1e5a      	subs	r2, r3, #1
 8006434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	3310      	adds	r3, #16
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fe57 	bl	80070f8 <xTaskRemoveFromEventList>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006450:	4b3c      	ldr	r3, [pc, #240]	@ (8006544 <xQueueReceive+0x1c0>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006460:	f001 fdd4 	bl	800800c <vPortExitCritical>
				return pdPASS;
 8006464:	2301      	movs	r3, #1
 8006466:	e069      	b.n	800653c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800646e:	f001 fdcd 	bl	800800c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006472:	2300      	movs	r3, #0
 8006474:	e062      	b.n	800653c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800647c:	f107 0310 	add.w	r3, r7, #16
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fec5 	bl	8007210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006486:	2301      	movs	r3, #1
 8006488:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800648a:	f001 fdbf 	bl	800800c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800648e:	f000 fc0d 	bl	8006cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006492:	f001 fd89 	bl	8007fa8 <vPortEnterCritical>
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800649c:	b25b      	sxtb	r3, r3
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064a2:	d103      	bne.n	80064ac <xQueueReceive+0x128>
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064b8:	d103      	bne.n	80064c2 <xQueueReceive+0x13e>
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064c2:	f001 fda3 	bl	800800c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c6:	1d3a      	adds	r2, r7, #4
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 feb4 	bl	800723c <xTaskCheckForTimeOut>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d123      	bne.n	8006522 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064dc:	f000 f916 	bl	800670c <prvIsQueueEmpty>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d017      	beq.n	8006516 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	3324      	adds	r3, #36	@ 0x24
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fdb0 	bl	8007054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f6:	f000 f8b7 	bl	8006668 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064fa:	f000 fbe5 	bl	8006cc8 <xTaskResumeAll>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d189      	bne.n	8006418 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006504:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <xQueueReceive+0x1c0>)
 8006506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	e780      	b.n	8006418 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006518:	f000 f8a6 	bl	8006668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800651c:	f000 fbd4 	bl	8006cc8 <xTaskResumeAll>
 8006520:	e77a      	b.n	8006418 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006524:	f000 f8a0 	bl	8006668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006528:	f000 fbce 	bl	8006cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800652c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800652e:	f000 f8ed 	bl	800670c <prvIsQueueEmpty>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	f43f af6f 	beq.w	8006418 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800653a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800653c:	4618      	mov	r0, r3
 800653e:	3730      	adds	r7, #48	@ 0x30
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	e000ed04 	.word	0xe000ed04

08006548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d14d      	bne.n	800660a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 ffc6 	bl	8007504 <xTaskPriorityDisinherit>
 8006578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	609a      	str	r2, [r3, #8]
 8006580:	e043      	b.n	800660a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d119      	bne.n	80065bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6858      	ldr	r0, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	461a      	mov	r2, r3
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	f00b fa57 	bl	8011a46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	441a      	add	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d32b      	bcc.n	800660a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	e026      	b.n	800660a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68d8      	ldr	r0, [r3, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c4:	461a      	mov	r2, r3
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	f00b fa3d 	bl	8011a46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	425b      	negs	r3, r3
 80065d6:	441a      	add	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d207      	bcs.n	80065f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	425b      	negs	r3, r3
 80065f2:	441a      	add	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d105      	bne.n	800660a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3b01      	subs	r3, #1
 8006608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006612:	697b      	ldr	r3, [r7, #20]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d018      	beq.n	8006660 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006636:	441a      	add	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	429a      	cmp	r2, r3
 8006646:	d303      	bcc.n	8006650 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68d9      	ldr	r1, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	461a      	mov	r2, r3
 800665a:	6838      	ldr	r0, [r7, #0]
 800665c:	f00b f9f3 	bl	8011a46 <memcpy>
	}
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006670:	f001 fc9a 	bl	8007fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800667a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800667c:	e011      	b.n	80066a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d012      	beq.n	80066ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3324      	adds	r3, #36	@ 0x24
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fd34 	bl	80070f8 <xTaskRemoveFromEventList>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006696:	f000 fe35 	bl	8007304 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	3b01      	subs	r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dce9      	bgt.n	800667e <prvUnlockQueue+0x16>
 80066aa:	e000      	b.n	80066ae <prvUnlockQueue+0x46>
					break;
 80066ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	22ff      	movs	r2, #255	@ 0xff
 80066b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80066b6:	f001 fca9 	bl	800800c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ba:	f001 fc75 	bl	8007fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066c6:	e011      	b.n	80066ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d012      	beq.n	80066f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3310      	adds	r3, #16
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fd0f 	bl	80070f8 <xTaskRemoveFromEventList>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066e0:	f000 fe10 	bl	8007304 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dce9      	bgt.n	80066c8 <prvUnlockQueue+0x60>
 80066f4:	e000      	b.n	80066f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	22ff      	movs	r2, #255	@ 0xff
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006700:	f001 fc84 	bl	800800c <vPortExitCritical>
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006714:	f001 fc48 	bl	8007fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006720:	2301      	movs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e001      	b.n	800672a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800672a:	f001 fc6f 	bl	800800c <vPortExitCritical>

	return xReturn;
 800672e:	68fb      	ldr	r3, [r7, #12]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006740:	f001 fc32 	bl	8007fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674c:	429a      	cmp	r2, r3
 800674e:	d102      	bne.n	8006756 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e001      	b.n	800675a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800675a:	f001 fc57 	bl	800800c <vPortExitCritical>

	return xReturn;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e014      	b.n	80067a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006778:	4a0f      	ldr	r2, [pc, #60]	@ (80067b8 <vQueueAddToRegistry+0x50>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006784:	490c      	ldr	r1, [pc, #48]	@ (80067b8 <vQueueAddToRegistry+0x50>)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800678e:	4a0a      	ldr	r2, [pc, #40]	@ (80067b8 <vQueueAddToRegistry+0x50>)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4413      	add	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800679a:	e006      	b.n	80067aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b07      	cmp	r3, #7
 80067a6:	d9e7      	bls.n	8006778 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20004ef0 	.word	0x20004ef0

080067bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067cc:	f001 fbec 	bl	8007fa8 <vPortEnterCritical>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067d6:	b25b      	sxtb	r3, r3
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067dc:	d103      	bne.n	80067e6 <vQueueWaitForMessageRestricted+0x2a>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067f2:	d103      	bne.n	80067fc <vQueueWaitForMessageRestricted+0x40>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067fc:	f001 fc06 	bl	800800c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3324      	adds	r3, #36	@ 0x24
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fc45 	bl	80070a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006816:	6978      	ldr	r0, [r7, #20]
 8006818:	f7ff ff26 	bl	8006668 <prvUnlockQueue>
	}
 800681c:	bf00      	nop
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08e      	sub	sp, #56	@ 0x38
 8006828:	af04      	add	r7, sp, #16
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	623b      	str	r3, [r7, #32]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	61fb      	str	r3, [r7, #28]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800686e:	235c      	movs	r3, #92	@ 0x5c
 8006870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b5c      	cmp	r3, #92	@ 0x5c
 8006876:	d00b      	beq.n	8006890 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	61bb      	str	r3, [r7, #24]
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006890:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01e      	beq.n	80068d6 <xTaskCreateStatic+0xb2>
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01b      	beq.n	80068d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068b0:	2300      	movs	r3, #0
 80068b2:	9303      	str	r3, [sp, #12]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f850 	bl	800696e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068d0:	f000 f8de 	bl	8006a90 <prvAddNewTaskToReadyList>
 80068d4:	e001      	b.n	80068da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068da:	697b      	ldr	r3, [r7, #20]
	}
 80068dc:	4618      	mov	r0, r3
 80068de:	3728      	adds	r7, #40	@ 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08c      	sub	sp, #48	@ 0x30
 80068e8:	af04      	add	r7, sp, #16
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 fc77 	bl	80081ec <pvPortMalloc>
 80068fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00e      	beq.n	8006924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006906:	205c      	movs	r0, #92	@ 0x5c
 8006908:	f001 fc70 	bl	80081ec <pvPortMalloc>
 800690c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	631a      	str	r2, [r3, #48]	@ 0x30
 800691a:	e005      	b.n	8006928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800691c:	6978      	ldr	r0, [r7, #20]
 800691e:	f001 fd33 	bl	8008388 <vPortFree>
 8006922:	e001      	b.n	8006928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d017      	beq.n	800695e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006936:	88fa      	ldrh	r2, [r7, #6]
 8006938:	2300      	movs	r3, #0
 800693a:	9303      	str	r3, [sp, #12]
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	9302      	str	r3, [sp, #8]
 8006940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f80e 	bl	800696e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006952:	69f8      	ldr	r0, [r7, #28]
 8006954:	f000 f89c 	bl	8006a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006958:	2301      	movs	r3, #1
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	e002      	b.n	8006964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006964:	69bb      	ldr	r3, [r7, #24]
	}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b088      	sub	sp, #32
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	461a      	mov	r2, r3
 8006986:	21a5      	movs	r1, #165	@ 0xa5
 8006988:	f00a ff94 	bl	80118b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006996:	3b01      	subs	r3, #1
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f023 0307 	bic.w	r3, r3, #7
 80069a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	617b      	str	r3, [r7, #20]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01f      	beq.n	8006a0e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	e012      	b.n	80069fa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	7819      	ldrb	r1, [r3, #0]
 80069dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	3334      	adds	r3, #52	@ 0x34
 80069e4:	460a      	mov	r2, r1
 80069e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	3301      	adds	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	2b0f      	cmp	r3, #15
 80069fe:	d9e9      	bls.n	80069d4 <prvInitialiseNewTask+0x66>
 8006a00:	e000      	b.n	8006a04 <prvInitialiseNewTask+0x96>
			{
				break;
 8006a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a0c:	e003      	b.n	8006a16 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	2b37      	cmp	r3, #55	@ 0x37
 8006a1a:	d901      	bls.n	8006a20 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a1c:	2337      	movs	r3, #55	@ 0x37
 8006a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff f966 	bl	8005d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	3318      	adds	r3, #24
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff f961 	bl	8005d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	69b8      	ldr	r0, [r7, #24]
 8006a70:	f001 f966 	bl	8007d40 <pxPortInitialiseStack>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a86:	bf00      	nop
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a98:	f001 fa86 	bl	8007fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b54 <prvAddNewTaskToReadyList+0xc4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b54 <prvAddNewTaskToReadyList+0xc4>)
 8006aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b58 <prvAddNewTaskToReadyList+0xc8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006aae:	4a2a      	ldr	r2, [pc, #168]	@ (8006b58 <prvAddNewTaskToReadyList+0xc8>)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ab4:	4b27      	ldr	r3, [pc, #156]	@ (8006b54 <prvAddNewTaskToReadyList+0xc4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d110      	bne.n	8006ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006abc:	f000 fc46 	bl	800734c <prvInitialiseTaskLists>
 8006ac0:	e00d      	b.n	8006ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ac2:	4b26      	ldr	r3, [pc, #152]	@ (8006b5c <prvAddNewTaskToReadyList+0xcc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006aca:	4b23      	ldr	r3, [pc, #140]	@ (8006b58 <prvAddNewTaskToReadyList+0xc8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d802      	bhi.n	8006ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <prvAddNewTaskToReadyList+0xc8>)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ade:	4b20      	ldr	r3, [pc, #128]	@ (8006b60 <prvAddNewTaskToReadyList+0xd0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b60 <prvAddNewTaskToReadyList+0xd0>)
 8006ae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <prvAddNewTaskToReadyList+0xd0>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b64 <prvAddNewTaskToReadyList+0xd4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d903      	bls.n	8006b04 <prvAddNewTaskToReadyList+0x74>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	4a18      	ldr	r2, [pc, #96]	@ (8006b64 <prvAddNewTaskToReadyList+0xd4>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <prvAddNewTaskToReadyList+0xd8>)
 8006b12:	441a      	add	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7ff f901 	bl	8005d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b20:	f001 fa74 	bl	800800c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b24:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <prvAddNewTaskToReadyList+0xcc>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <prvAddNewTaskToReadyList+0xc8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d207      	bcs.n	8006b4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b6c <prvAddNewTaskToReadyList+0xdc>)
 8006b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20005404 	.word	0x20005404
 8006b58:	20004f30 	.word	0x20004f30
 8006b5c:	20005410 	.word	0x20005410
 8006b60:	20005420 	.word	0x20005420
 8006b64:	2000540c 	.word	0x2000540c
 8006b68:	20004f34 	.word	0x20004f34
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b82:	4b14      	ldr	r3, [pc, #80]	@ (8006bd4 <vTaskDelay+0x64>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <vTaskDelay+0x32>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60bb      	str	r3, [r7, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ba2:	f000 f883 	bl	8006cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fd1b 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bae:	f000 f88b 	bl	8006cc8 <xTaskResumeAll>
 8006bb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006bba:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <vTaskDelay+0x68>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	2000542c 	.word	0x2000542c
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	@ 0x28
 8006be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bea:	463a      	mov	r2, r7
 8006bec:	1d39      	adds	r1, r7, #4
 8006bee:	f107 0308 	add.w	r3, r7, #8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff f834 	bl	8005c60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	9202      	str	r2, [sp, #8]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	460a      	mov	r2, r1
 8006c0a:	4922      	ldr	r1, [pc, #136]	@ (8006c94 <vTaskStartScheduler+0xb8>)
 8006c0c:	4822      	ldr	r0, [pc, #136]	@ (8006c98 <vTaskStartScheduler+0xbc>)
 8006c0e:	f7ff fe09 	bl	8006824 <xTaskCreateStatic>
 8006c12:	4603      	mov	r3, r0
 8006c14:	4a21      	ldr	r2, [pc, #132]	@ (8006c9c <vTaskStartScheduler+0xc0>)
 8006c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c18:	4b20      	ldr	r3, [pc, #128]	@ (8006c9c <vTaskStartScheduler+0xc0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e001      	b.n	8006c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d102      	bne.n	8006c36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c30:	f000 fd2c 	bl	800768c <xTimerCreateTimerTask>
 8006c34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d116      	bne.n	8006c6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	613b      	str	r3, [r7, #16]
}
 8006c4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c50:	4b13      	ldr	r3, [pc, #76]	@ (8006ca0 <vTaskStartScheduler+0xc4>)
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c58:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <vTaskStartScheduler+0xc8>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c5e:	4b12      	ldr	r3, [pc, #72]	@ (8006ca8 <vTaskStartScheduler+0xcc>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c64:	f001 f8fc 	bl	8007e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c68:	e00f      	b.n	8006c8a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c70:	d10b      	bne.n	8006c8a <vTaskStartScheduler+0xae>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	60fb      	str	r3, [r7, #12]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <vTaskStartScheduler+0xaa>
}
 8006c8a:	bf00      	nop
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	08012860 	.word	0x08012860
 8006c98:	0800731d 	.word	0x0800731d
 8006c9c:	20005428 	.word	0x20005428
 8006ca0:	20005424 	.word	0x20005424
 8006ca4:	20005410 	.word	0x20005410
 8006ca8:	20005408 	.word	0x20005408

08006cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cb0:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <vTaskSuspendAll+0x18>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	4a03      	ldr	r2, [pc, #12]	@ (8006cc4 <vTaskSuspendAll+0x18>)
 8006cb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cba:	bf00      	nop
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	2000542c 	.word	0x2000542c

08006cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cd6:	4b42      	ldr	r3, [pc, #264]	@ (8006de0 <xTaskResumeAll+0x118>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	603b      	str	r3, [r7, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cf6:	f001 f957 	bl	8007fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cfa:	4b39      	ldr	r3, [pc, #228]	@ (8006de0 <xTaskResumeAll+0x118>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	4a37      	ldr	r2, [pc, #220]	@ (8006de0 <xTaskResumeAll+0x118>)
 8006d02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d04:	4b36      	ldr	r3, [pc, #216]	@ (8006de0 <xTaskResumeAll+0x118>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d162      	bne.n	8006dd2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d0c:	4b35      	ldr	r3, [pc, #212]	@ (8006de4 <xTaskResumeAll+0x11c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d05e      	beq.n	8006dd2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d14:	e02f      	b.n	8006d76 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d16:	4b34      	ldr	r3, [pc, #208]	@ (8006de8 <xTaskResumeAll+0x120>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3318      	adds	r3, #24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff f85a 	bl	8005ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff f855 	bl	8005ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d36:	4b2d      	ldr	r3, [pc, #180]	@ (8006dec <xTaskResumeAll+0x124>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d903      	bls.n	8006d46 <xTaskResumeAll+0x7e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	4a2a      	ldr	r2, [pc, #168]	@ (8006dec <xTaskResumeAll+0x124>)
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4a27      	ldr	r2, [pc, #156]	@ (8006df0 <xTaskResumeAll+0x128>)
 8006d54:	441a      	add	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f7fe ffe0 	bl	8005d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d66:	4b23      	ldr	r3, [pc, #140]	@ (8006df4 <xTaskResumeAll+0x12c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d70:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <xTaskResumeAll+0x130>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d76:	4b1c      	ldr	r3, [pc, #112]	@ (8006de8 <xTaskResumeAll+0x120>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1cb      	bne.n	8006d16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d84:	f000 fb80 	bl	8007488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d88:	4b1c      	ldr	r3, [pc, #112]	@ (8006dfc <xTaskResumeAll+0x134>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d010      	beq.n	8006db6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d94:	f000 f846 	bl	8006e24 <xTaskIncrementTick>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d9e:	4b16      	ldr	r3, [pc, #88]	@ (8006df8 <xTaskResumeAll+0x130>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f1      	bne.n	8006d94 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006db0:	4b12      	ldr	r3, [pc, #72]	@ (8006dfc <xTaskResumeAll+0x134>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006db6:	4b10      	ldr	r3, [pc, #64]	@ (8006df8 <xTaskResumeAll+0x130>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e00 <xTaskResumeAll+0x138>)
 8006dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dd2:	f001 f91b 	bl	800800c <vPortExitCritical>

	return xAlreadyYielded;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	2000542c 	.word	0x2000542c
 8006de4:	20005404 	.word	0x20005404
 8006de8:	200053c4 	.word	0x200053c4
 8006dec:	2000540c 	.word	0x2000540c
 8006df0:	20004f34 	.word	0x20004f34
 8006df4:	20004f30 	.word	0x20004f30
 8006df8:	20005418 	.word	0x20005418
 8006dfc:	20005414 	.word	0x20005414
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e0a:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <xTaskGetTickCount+0x1c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e10:	687b      	ldr	r3, [r7, #4]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20005408 	.word	0x20005408

08006e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f6c <xTaskIncrementTick+0x148>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f040 8090 	bne.w	8006f58 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e38:	4b4d      	ldr	r3, [pc, #308]	@ (8006f70 <xTaskIncrementTick+0x14c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e40:	4a4b      	ldr	r2, [pc, #300]	@ (8006f70 <xTaskIncrementTick+0x14c>)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d121      	bne.n	8006e90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e4c:	4b49      	ldr	r3, [pc, #292]	@ (8006f74 <xTaskIncrementTick+0x150>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	603b      	str	r3, [r7, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <xTaskIncrementTick+0x46>
 8006e6e:	4b41      	ldr	r3, [pc, #260]	@ (8006f74 <xTaskIncrementTick+0x150>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	4b40      	ldr	r3, [pc, #256]	@ (8006f78 <xTaskIncrementTick+0x154>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a3e      	ldr	r2, [pc, #248]	@ (8006f74 <xTaskIncrementTick+0x150>)
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f78 <xTaskIncrementTick+0x154>)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4b3e      	ldr	r3, [pc, #248]	@ (8006f7c <xTaskIncrementTick+0x158>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	4a3c      	ldr	r2, [pc, #240]	@ (8006f7c <xTaskIncrementTick+0x158>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	f000 fafc 	bl	8007488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e90:	4b3b      	ldr	r3, [pc, #236]	@ (8006f80 <xTaskIncrementTick+0x15c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d349      	bcc.n	8006f2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9a:	4b36      	ldr	r3, [pc, #216]	@ (8006f74 <xTaskIncrementTick+0x150>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea4:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <xTaskIncrementTick+0x15c>)
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006eaa:	601a      	str	r2, [r3, #0]
					break;
 8006eac:	e03f      	b.n	8006f2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eae:	4b31      	ldr	r3, [pc, #196]	@ (8006f74 <xTaskIncrementTick+0x150>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d203      	bcs.n	8006ece <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8006f80 <xTaskIncrementTick+0x15c>)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ecc:	e02f      	b.n	8006f2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe ff82 	bl	8005ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3318      	adds	r3, #24
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe ff79 	bl	8005ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eee:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <xTaskIncrementTick+0x160>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d903      	bls.n	8006efe <xTaskIncrementTick+0xda>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	4a22      	ldr	r2, [pc, #136]	@ (8006f84 <xTaskIncrementTick+0x160>)
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8006f88 <xTaskIncrementTick+0x164>)
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4619      	mov	r1, r3
 8006f14:	4610      	mov	r0, r2
 8006f16:	f7fe ff04 	bl	8005d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f8c <xTaskIncrementTick+0x168>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d3b8      	bcc.n	8006e9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f2c:	e7b5      	b.n	8006e9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f2e:	4b17      	ldr	r3, [pc, #92]	@ (8006f8c <xTaskIncrementTick+0x168>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f34:	4914      	ldr	r1, [pc, #80]	@ (8006f88 <xTaskIncrementTick+0x164>)
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d901      	bls.n	8006f4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006f46:	2301      	movs	r3, #1
 8006f48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f4a:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <xTaskIncrementTick+0x16c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006f52:	2301      	movs	r3, #1
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e004      	b.n	8006f62 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f58:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <xTaskIncrementTick+0x170>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8006f94 <xTaskIncrementTick+0x170>)
 8006f60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f62:	697b      	ldr	r3, [r7, #20]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000542c 	.word	0x2000542c
 8006f70:	20005408 	.word	0x20005408
 8006f74:	200053bc 	.word	0x200053bc
 8006f78:	200053c0 	.word	0x200053c0
 8006f7c:	2000541c 	.word	0x2000541c
 8006f80:	20005424 	.word	0x20005424
 8006f84:	2000540c 	.word	0x2000540c
 8006f88:	20004f34 	.word	0x20004f34
 8006f8c:	20004f30 	.word	0x20004f30
 8006f90:	20005418 	.word	0x20005418
 8006f94:	20005414 	.word	0x20005414

08006f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f9e:	4b28      	ldr	r3, [pc, #160]	@ (8007040 <vTaskSwitchContext+0xa8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fa6:	4b27      	ldr	r3, [pc, #156]	@ (8007044 <vTaskSwitchContext+0xac>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fac:	e042      	b.n	8007034 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006fae:	4b25      	ldr	r3, [pc, #148]	@ (8007044 <vTaskSwitchContext+0xac>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb4:	4b24      	ldr	r3, [pc, #144]	@ (8007048 <vTaskSwitchContext+0xb0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e011      	b.n	8006fe0 <vTaskSwitchContext+0x48>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <vTaskSwitchContext+0x42>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <vTaskSwitchContext+0x3e>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	491a      	ldr	r1, [pc, #104]	@ (800704c <vTaskSwitchContext+0xb4>)
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0e3      	beq.n	8006fbc <vTaskSwitchContext+0x24>
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4a13      	ldr	r2, [pc, #76]	@ (800704c <vTaskSwitchContext+0xb4>)
 8007000:	4413      	add	r3, r2
 8007002:	60bb      	str	r3, [r7, #8]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	3308      	adds	r3, #8
 8007016:	429a      	cmp	r2, r3
 8007018:	d104      	bne.n	8007024 <vTaskSwitchContext+0x8c>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	605a      	str	r2, [r3, #4]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	4a09      	ldr	r2, [pc, #36]	@ (8007050 <vTaskSwitchContext+0xb8>)
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	4a06      	ldr	r2, [pc, #24]	@ (8007048 <vTaskSwitchContext+0xb0>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6013      	str	r3, [r2, #0]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	2000542c 	.word	0x2000542c
 8007044:	20005418 	.word	0x20005418
 8007048:	2000540c 	.word	0x2000540c
 800704c:	20004f34 	.word	0x20004f34
 8007050:	20004f30 	.word	0x20004f30

08007054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	60fb      	str	r3, [r7, #12]
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800707c:	4b07      	ldr	r3, [pc, #28]	@ (800709c <vTaskPlaceOnEventList+0x48>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3318      	adds	r3, #24
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fe fe70 	bl	8005d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800708a:	2101      	movs	r1, #1
 800708c:	6838      	ldr	r0, [r7, #0]
 800708e:	f000 faa9 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20004f30 	.word	0x20004f30

080070a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	617b      	str	r3, [r7, #20]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070ca:	4b0a      	ldr	r3, [pc, #40]	@ (80070f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3318      	adds	r3, #24
 80070d0:	4619      	mov	r1, r3
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7fe fe25 	bl	8005d22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	68b8      	ldr	r0, [r7, #8]
 80070e8:	f000 fa7c 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
	}
 80070ec:	bf00      	nop
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20004f30 	.word	0x20004f30

080070f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	60fb      	str	r3, [r7, #12]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3318      	adds	r3, #24
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fe56 	bl	8005ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007130:	4b1d      	ldr	r3, [pc, #116]	@ (80071a8 <xTaskRemoveFromEventList+0xb0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d11d      	bne.n	8007174 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fe4d 	bl	8005ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007146:	4b19      	ldr	r3, [pc, #100]	@ (80071ac <xTaskRemoveFromEventList+0xb4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d903      	bls.n	8007156 <xTaskRemoveFromEventList+0x5e>
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	4a16      	ldr	r2, [pc, #88]	@ (80071ac <xTaskRemoveFromEventList+0xb4>)
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4a13      	ldr	r2, [pc, #76]	@ (80071b0 <xTaskRemoveFromEventList+0xb8>)
 8007164:	441a      	add	r2, r3
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3304      	adds	r3, #4
 800716a:	4619      	mov	r1, r3
 800716c:	4610      	mov	r0, r2
 800716e:	f7fe fdd8 	bl	8005d22 <vListInsertEnd>
 8007172:	e005      	b.n	8007180 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3318      	adds	r3, #24
 8007178:	4619      	mov	r1, r3
 800717a:	480e      	ldr	r0, [pc, #56]	@ (80071b4 <xTaskRemoveFromEventList+0xbc>)
 800717c:	f7fe fdd1 	bl	8005d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007184:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <xTaskRemoveFromEventList+0xc0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718a:	429a      	cmp	r2, r3
 800718c:	d905      	bls.n	800719a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800718e:	2301      	movs	r3, #1
 8007190:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <xTaskRemoveFromEventList+0xc4>)
 8007194:	2201      	movs	r2, #1
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e001      	b.n	800719e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800719e:	697b      	ldr	r3, [r7, #20]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	2000542c 	.word	0x2000542c
 80071ac:	2000540c 	.word	0x2000540c
 80071b0:	20004f34 	.word	0x20004f34
 80071b4:	200053c4 	.word	0x200053c4
 80071b8:	20004f30 	.word	0x20004f30
 80071bc:	20005418 	.word	0x20005418

080071c0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60fb      	str	r3, [r7, #12]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80071e6:	f000 fedf 	bl	8007fa8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071ea:	4b07      	ldr	r3, [pc, #28]	@ (8007208 <vTaskSetTimeOutState+0x48>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80071f2:	4b06      	ldr	r3, [pc, #24]	@ (800720c <vTaskSetTimeOutState+0x4c>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80071fa:	f000 ff07 	bl	800800c <vPortExitCritical>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2000541c 	.word	0x2000541c
 800720c:	20005408 	.word	0x20005408

08007210 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007218:	4b06      	ldr	r3, [pc, #24]	@ (8007234 <vTaskInternalSetTimeOutState+0x24>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007220:	4b05      	ldr	r3, [pc, #20]	@ (8007238 <vTaskInternalSetTimeOutState+0x28>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	2000541c 	.word	0x2000541c
 8007238:	20005408 	.word	0x20005408

0800723c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	613b      	str	r3, [r7, #16]
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	60fb      	str	r3, [r7, #12]
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	e7fd      	b.n	800727e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007282:	f000 fe91 	bl	8007fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007286:	4b1d      	ldr	r3, [pc, #116]	@ (80072fc <xTaskCheckForTimeOut+0xc0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800729e:	d102      	bne.n	80072a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	e023      	b.n	80072ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <xTaskCheckForTimeOut+0xc4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d007      	beq.n	80072c2 <xTaskCheckForTimeOut+0x86>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	e015      	b.n	80072ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d20b      	bcs.n	80072e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff99 	bl	8007210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	e004      	b.n	80072ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072ee:	f000 fe8d 	bl	800800c <vPortExitCritical>

	return xReturn;
 80072f2:	69fb      	ldr	r3, [r7, #28]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20005408 	.word	0x20005408
 8007300:	2000541c 	.word	0x2000541c

08007304 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007308:	4b03      	ldr	r3, [pc, #12]	@ (8007318 <vTaskMissedYield+0x14>)
 800730a:	2201      	movs	r2, #1
 800730c:	601a      	str	r2, [r3, #0]
}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	20005418 	.word	0x20005418

0800731c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007324:	f000 f852 	bl	80073cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007328:	4b06      	ldr	r3, [pc, #24]	@ (8007344 <prvIdleTask+0x28>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d9f9      	bls.n	8007324 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <prvIdleTask+0x2c>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007340:	e7f0      	b.n	8007324 <prvIdleTask+0x8>
 8007342:	bf00      	nop
 8007344:	20004f34 	.word	0x20004f34
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]
 8007356:	e00c      	b.n	8007372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4a12      	ldr	r2, [pc, #72]	@ (80073ac <prvInitialiseTaskLists+0x60>)
 8007364:	4413      	add	r3, r2
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fcae 	bl	8005cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3301      	adds	r3, #1
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b37      	cmp	r3, #55	@ 0x37
 8007376:	d9ef      	bls.n	8007358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007378:	480d      	ldr	r0, [pc, #52]	@ (80073b0 <prvInitialiseTaskLists+0x64>)
 800737a:	f7fe fca5 	bl	8005cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800737e:	480d      	ldr	r0, [pc, #52]	@ (80073b4 <prvInitialiseTaskLists+0x68>)
 8007380:	f7fe fca2 	bl	8005cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007384:	480c      	ldr	r0, [pc, #48]	@ (80073b8 <prvInitialiseTaskLists+0x6c>)
 8007386:	f7fe fc9f 	bl	8005cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800738a:	480c      	ldr	r0, [pc, #48]	@ (80073bc <prvInitialiseTaskLists+0x70>)
 800738c:	f7fe fc9c 	bl	8005cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007390:	480b      	ldr	r0, [pc, #44]	@ (80073c0 <prvInitialiseTaskLists+0x74>)
 8007392:	f7fe fc99 	bl	8005cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007396:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <prvInitialiseTaskLists+0x78>)
 8007398:	4a05      	ldr	r2, [pc, #20]	@ (80073b0 <prvInitialiseTaskLists+0x64>)
 800739a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <prvInitialiseTaskLists+0x7c>)
 800739e:	4a05      	ldr	r2, [pc, #20]	@ (80073b4 <prvInitialiseTaskLists+0x68>)
 80073a0:	601a      	str	r2, [r3, #0]
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20004f34 	.word	0x20004f34
 80073b0:	20005394 	.word	0x20005394
 80073b4:	200053a8 	.word	0x200053a8
 80073b8:	200053c4 	.word	0x200053c4
 80073bc:	200053d8 	.word	0x200053d8
 80073c0:	200053f0 	.word	0x200053f0
 80073c4:	200053bc 	.word	0x200053bc
 80073c8:	200053c0 	.word	0x200053c0

080073cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d2:	e019      	b.n	8007408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073d4:	f000 fde8 	bl	8007fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d8:	4b10      	ldr	r3, [pc, #64]	@ (800741c <prvCheckTasksWaitingTermination+0x50>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fcf9 	bl	8005ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <prvCheckTasksWaitingTermination+0x54>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007420 <prvCheckTasksWaitingTermination+0x54>)
 80073f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <prvCheckTasksWaitingTermination+0x58>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007424 <prvCheckTasksWaitingTermination+0x58>)
 80073fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073fe:	f000 fe05 	bl	800800c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f810 	bl	8007428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <prvCheckTasksWaitingTermination+0x58>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e1      	bne.n	80073d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200053d8 	.word	0x200053d8
 8007420:	20005404 	.word	0x20005404
 8007424:	200053ec 	.word	0x200053ec

08007428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007436:	2b00      	cmp	r3, #0
 8007438:	d108      	bne.n	800744c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	4618      	mov	r0, r3
 8007440:	f000 ffa2 	bl	8008388 <vPortFree>
				vPortFree( pxTCB );
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 ff9f 	bl	8008388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800744a:	e019      	b.n	8007480 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007452:	2b01      	cmp	r3, #1
 8007454:	d103      	bne.n	800745e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 ff96 	bl	8008388 <vPortFree>
	}
 800745c:	e010      	b.n	8007480 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007464:	2b02      	cmp	r3, #2
 8007466:	d00b      	beq.n	8007480 <prvDeleteTCB+0x58>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <prvDeleteTCB+0x54>
	}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <prvResetNextTaskUnblockTime+0x38>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007498:	4b0a      	ldr	r3, [pc, #40]	@ (80074c4 <prvResetNextTaskUnblockTime+0x3c>)
 800749a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800749e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074a0:	e008      	b.n	80074b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a2:	4b07      	ldr	r3, [pc, #28]	@ (80074c0 <prvResetNextTaskUnblockTime+0x38>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	4a04      	ldr	r2, [pc, #16]	@ (80074c4 <prvResetNextTaskUnblockTime+0x3c>)
 80074b2:	6013      	str	r3, [r2, #0]
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	200053bc 	.word	0x200053bc
 80074c4:	20005424 	.word	0x20005424

080074c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ce:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <xTaskGetSchedulerState+0x34>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074d6:	2301      	movs	r3, #1
 80074d8:	607b      	str	r3, [r7, #4]
 80074da:	e008      	b.n	80074ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074dc:	4b08      	ldr	r3, [pc, #32]	@ (8007500 <xTaskGetSchedulerState+0x38>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074e4:	2302      	movs	r3, #2
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	e001      	b.n	80074ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ea:	2300      	movs	r3, #0
 80074ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ee:	687b      	ldr	r3, [r7, #4]
	}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20005410 	.word	0x20005410
 8007500:	2000542c 	.word	0x2000542c

08007504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d058      	beq.n	80075cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800751a:	4b2f      	ldr	r3, [pc, #188]	@ (80075d8 <xTaskPriorityDisinherit+0xd4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	429a      	cmp	r2, r3
 8007522:	d00b      	beq.n	800753c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60fb      	str	r3, [r7, #12]
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	e7fd      	b.n	8007538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60bb      	str	r3, [r7, #8]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007560:	1e5a      	subs	r2, r3, #1
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756e:	429a      	cmp	r2, r3
 8007570:	d02c      	beq.n	80075cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007576:	2b00      	cmp	r3, #0
 8007578:	d128      	bne.n	80075cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3304      	adds	r3, #4
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fc2c 	bl	8005ddc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759c:	4b0f      	ldr	r3, [pc, #60]	@ (80075dc <xTaskPriorityDisinherit+0xd8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d903      	bls.n	80075ac <xTaskPriorityDisinherit+0xa8>
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	4a0c      	ldr	r2, [pc, #48]	@ (80075dc <xTaskPriorityDisinherit+0xd8>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <xTaskPriorityDisinherit+0xdc>)
 80075ba:	441a      	add	r2, r3
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f7fe fbad 	bl	8005d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075cc:	697b      	ldr	r3, [r7, #20]
	}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20004f30 	.word	0x20004f30
 80075dc:	2000540c 	.word	0x2000540c
 80075e0:	20004f34 	.word	0x20004f34

080075e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ee:	4b21      	ldr	r3, [pc, #132]	@ (8007674 <prvAddCurrentTaskToDelayedList+0x90>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f4:	4b20      	ldr	r3, [pc, #128]	@ (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fbee 	bl	8005ddc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007606:	d10a      	bne.n	800761e <prvAddCurrentTaskToDelayedList+0x3a>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800760e:	4b1a      	ldr	r3, [pc, #104]	@ (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4819      	ldr	r0, [pc, #100]	@ (800767c <prvAddCurrentTaskToDelayedList+0x98>)
 8007618:	f7fe fb83 	bl	8005d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800761c:	e026      	b.n	800766c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007626:	4b14      	ldr	r3, [pc, #80]	@ (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	d209      	bcs.n	800764a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007636:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4b0f      	ldr	r3, [pc, #60]	@ (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7fe fb91 	bl	8005d6a <vListInsert>
}
 8007648:	e010      	b.n	800766c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764a:	4b0e      	ldr	r3, [pc, #56]	@ (8007684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7fe fb87 	bl	8005d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800765c:	4b0a      	ldr	r3, [pc, #40]	@ (8007688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	d202      	bcs.n	800766c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007666:	4a08      	ldr	r2, [pc, #32]	@ (8007688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6013      	str	r3, [r2, #0]
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20005408 	.word	0x20005408
 8007678:	20004f30 	.word	0x20004f30
 800767c:	200053f0 	.word	0x200053f0
 8007680:	200053c0 	.word	0x200053c0
 8007684:	200053bc 	.word	0x200053bc
 8007688:	20005424 	.word	0x20005424

0800768c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	@ 0x28
 8007690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007696:	f000 fb13 	bl	8007cc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800769a:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <xTimerCreateTimerTask+0x84>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d021      	beq.n	80076e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076aa:	1d3a      	adds	r2, r7, #4
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	f107 030c 	add.w	r3, r7, #12
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe faed 	bl	8005c94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	9202      	str	r2, [sp, #8]
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	2302      	movs	r3, #2
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	2300      	movs	r3, #0
 80076ca:	460a      	mov	r2, r1
 80076cc:	4911      	ldr	r1, [pc, #68]	@ (8007714 <xTimerCreateTimerTask+0x88>)
 80076ce:	4812      	ldr	r0, [pc, #72]	@ (8007718 <xTimerCreateTimerTask+0x8c>)
 80076d0:	f7ff f8a8 	bl	8006824 <xTaskCreateStatic>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4a11      	ldr	r2, [pc, #68]	@ (800771c <xTimerCreateTimerTask+0x90>)
 80076d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076da:	4b10      	ldr	r3, [pc, #64]	@ (800771c <xTimerCreateTimerTask+0x90>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076e2:	2301      	movs	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	613b      	str	r3, [r7, #16]
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	e7fd      	b.n	8007700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007704:	697b      	ldr	r3, [r7, #20]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20005460 	.word	0x20005460
 8007714:	08012868 	.word	0x08012868
 8007718:	08007859 	.word	0x08007859
 800771c:	20005464 	.word	0x20005464

08007720 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	@ 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800772e:	2300      	movs	r3, #0
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xTimerGenericCommand+0x30>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	623b      	str	r3, [r7, #32]
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007750:	4b19      	ldr	r3, [pc, #100]	@ (80077b8 <xTimerGenericCommand+0x98>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02a      	beq.n	80077ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b05      	cmp	r3, #5
 8007768:	dc18      	bgt.n	800779c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800776a:	f7ff fead 	bl	80074c8 <xTaskGetSchedulerState>
 800776e:	4603      	mov	r3, r0
 8007770:	2b02      	cmp	r3, #2
 8007772:	d109      	bne.n	8007788 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007774:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <xTimerGenericCommand+0x98>)
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	f107 0110 	add.w	r1, r7, #16
 800777c:	2300      	movs	r3, #0
 800777e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007780:	f7fe fc60 	bl	8006044 <xQueueGenericSend>
 8007784:	6278      	str	r0, [r7, #36]	@ 0x24
 8007786:	e012      	b.n	80077ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007788:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <xTimerGenericCommand+0x98>)
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	f107 0110 	add.w	r1, r7, #16
 8007790:	2300      	movs	r3, #0
 8007792:	2200      	movs	r2, #0
 8007794:	f7fe fc56 	bl	8006044 <xQueueGenericSend>
 8007798:	6278      	str	r0, [r7, #36]	@ 0x24
 800779a:	e008      	b.n	80077ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800779c:	4b06      	ldr	r3, [pc, #24]	@ (80077b8 <xTimerGenericCommand+0x98>)
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	f107 0110 	add.w	r1, r7, #16
 80077a4:	2300      	movs	r3, #0
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	f7fe fd4e 	bl	8006248 <xQueueGenericSendFromISR>
 80077ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3728      	adds	r7, #40	@ 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20005460 	.word	0x20005460

080077bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c6:	4b23      	ldr	r3, [pc, #140]	@ (8007854 <prvProcessExpiredTimer+0x98>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe fb01 	bl	8005ddc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d023      	beq.n	8007830 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	18d1      	adds	r1, r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	6978      	ldr	r0, [r7, #20]
 80077f6:	f000 f8d5 	bl	80079a4 <prvInsertTimerInActiveList>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d020      	beq.n	8007842 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007800:	2300      	movs	r3, #0
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2300      	movs	r3, #0
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	2100      	movs	r1, #0
 800780a:	6978      	ldr	r0, [r7, #20]
 800780c:	f7ff ff88 	bl	8007720 <xTimerGenericCommand>
 8007810:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d114      	bne.n	8007842 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	60fb      	str	r3, [r7, #12]
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007836:	f023 0301 	bic.w	r3, r3, #1
 800783a:	b2da      	uxtb	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	6978      	ldr	r0, [r7, #20]
 8007848:	4798      	blx	r3
}
 800784a:	bf00      	nop
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20005458 	.word	0x20005458

08007858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007860:	f107 0308 	add.w	r3, r7, #8
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f859 	bl	800791c <prvGetNextExpireTime>
 800786a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f805 	bl	8007880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007876:	f000 f8d7 	bl	8007a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800787a:	bf00      	nop
 800787c:	e7f0      	b.n	8007860 <prvTimerTask+0x8>
	...

08007880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800788a:	f7ff fa0f 	bl	8006cac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f866 	bl	8007964 <prvSampleTimeNow>
 8007898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d130      	bne.n	8007902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <prvProcessTimerOrBlockTask+0x3c>
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d806      	bhi.n	80078bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078ae:	f7ff fa0b 	bl	8006cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ff81 	bl	80077bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ba:	e024      	b.n	8007906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d008      	beq.n	80078d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078c2:	4b13      	ldr	r3, [pc, #76]	@ (8007910 <prvProcessTimerOrBlockTask+0x90>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <prvProcessTimerOrBlockTask+0x50>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <prvProcessTimerOrBlockTask+0x52>
 80078d0:	2300      	movs	r3, #0
 80078d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007914 <prvProcessTimerOrBlockTask+0x94>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	f7fe ff6b 	bl	80067bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078e6:	f7ff f9ef 	bl	8006cc8 <xTaskResumeAll>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078f0:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <prvProcessTimerOrBlockTask+0x98>)
 80078f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
}
 8007900:	e001      	b.n	8007906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007902:	f7ff f9e1 	bl	8006cc8 <xTaskResumeAll>
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000545c 	.word	0x2000545c
 8007914:	20005460 	.word	0x20005460
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007924:	4b0e      	ldr	r3, [pc, #56]	@ (8007960 <prvGetNextExpireTime+0x44>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <prvGetNextExpireTime+0x16>
 800792e:	2201      	movs	r2, #1
 8007930:	e000      	b.n	8007934 <prvGetNextExpireTime+0x18>
 8007932:	2200      	movs	r2, #0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007940:	4b07      	ldr	r3, [pc, #28]	@ (8007960 <prvGetNextExpireTime+0x44>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	e001      	b.n	8007950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007950:	68fb      	ldr	r3, [r7, #12]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20005458 	.word	0x20005458

08007964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800796c:	f7ff fa4a 	bl	8006e04 <xTaskGetTickCount>
 8007970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007972:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <prvSampleTimeNow+0x3c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	429a      	cmp	r2, r3
 800797a:	d205      	bcs.n	8007988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800797c:	f000 f93a 	bl	8007bf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e002      	b.n	800798e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800798e:	4a04      	ldr	r2, [pc, #16]	@ (80079a0 <prvSampleTimeNow+0x3c>)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007994:	68fb      	ldr	r3, [r7, #12]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20005468 	.word	0x20005468

080079a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d812      	bhi.n	80079f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d302      	bcc.n	80079de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e01b      	b.n	8007a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079de:	4b10      	ldr	r3, [pc, #64]	@ (8007a20 <prvInsertTimerInActiveList+0x7c>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7fe f9be 	bl	8005d6a <vListInsert>
 80079ee:	e012      	b.n	8007a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d206      	bcs.n	8007a06 <prvInsertTimerInActiveList+0x62>
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d302      	bcc.n	8007a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e007      	b.n	8007a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a06:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <prvInsertTimerInActiveList+0x80>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fe f9aa 	bl	8005d6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a16:	697b      	ldr	r3, [r7, #20]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2000545c 	.word	0x2000545c
 8007a24:	20005458 	.word	0x20005458

08007a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	@ 0x38
 8007a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a2e:	e0ce      	b.n	8007bce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da19      	bge.n	8007a6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a36:	1d3b      	adds	r3, r7, #4
 8007a38:	3304      	adds	r3, #4
 8007a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	61fb      	str	r3, [r7, #28]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a60:	6850      	ldr	r0, [r2, #4]
 8007a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a64:	6892      	ldr	r2, [r2, #8]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f2c0 80ae 	blt.w	8007bce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	3304      	adds	r3, #4
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe f9aa 	bl	8005ddc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a88:	463b      	mov	r3, r7
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff ff6a 	bl	8007964 <prvSampleTimeNow>
 8007a90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	f200 8097 	bhi.w	8007bc8 <prvProcessReceivedCommands+0x1a0>
 8007a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <prvProcessReceivedCommands+0x78>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ac9 	.word	0x08007ac9
 8007aa4:	08007ac9 	.word	0x08007ac9
 8007aa8:	08007ac9 	.word	0x08007ac9
 8007aac:	08007b3f 	.word	0x08007b3f
 8007ab0:	08007b53 	.word	0x08007b53
 8007ab4:	08007b9f 	.word	0x08007b9f
 8007ab8:	08007ac9 	.word	0x08007ac9
 8007abc:	08007ac9 	.word	0x08007ac9
 8007ac0:	08007b3f 	.word	0x08007b3f
 8007ac4:	08007b53 	.word	0x08007b53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	18d1      	adds	r1, r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae8:	f7ff ff5c 	bl	80079a4 <prvInsertTimerInActiveList>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d06c      	beq.n	8007bcc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007af8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d061      	beq.n	8007bcc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	441a      	add	r2, r3
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b1a:	f7ff fe01 	bl	8007720 <xTimerGenericCommand>
 8007b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d152      	bne.n	8007bcc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	61bb      	str	r3, [r7, #24]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b44:	f023 0301 	bic.w	r3, r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b50:	e03d      	b.n	8007bce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10b      	bne.n	8007b8a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	617b      	str	r3, [r7, #20]
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	e7fd      	b.n	8007b86 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	18d1      	adds	r1, r2, r3
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b98:	f7ff ff04 	bl	80079a4 <prvInsertTimerInActiveList>
					break;
 8007b9c:	e017      	b.n	8007bce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007bac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bae:	f000 fbeb 	bl	8008388 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bb2:	e00c      	b.n	8007bce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bba:	f023 0301 	bic.w	r3, r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bc6:	e002      	b.n	8007bce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <prvProcessReceivedCommands+0x1a6>
					break;
 8007bcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bce:	4b08      	ldr	r3, [pc, #32]	@ (8007bf0 <prvProcessReceivedCommands+0x1c8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1d39      	adds	r1, r7, #4
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fbd4 	bl	8006384 <xQueueReceive>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f47f af26 	bne.w	8007a30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	3730      	adds	r7, #48	@ 0x30
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20005460 	.word	0x20005460

08007bf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bfa:	e049      	b.n	8007c90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb8 <prvSwitchTimerLists+0xc4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c06:	4b2c      	ldr	r3, [pc, #176]	@ (8007cb8 <prvSwitchTimerLists+0xc4>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe f8e1 	bl	8005ddc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d02f      	beq.n	8007c90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4413      	add	r3, r2
 8007c38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d90e      	bls.n	8007c60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb8 <prvSwitchTimerLists+0xc4>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4619      	mov	r1, r3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	f7fe f886 	bl	8005d6a <vListInsert>
 8007c5e:	e017      	b.n	8007c90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c60:	2300      	movs	r3, #0
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	2100      	movs	r1, #0
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fd58 	bl	8007720 <xTimerGenericCommand>
 8007c70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	603b      	str	r3, [r7, #0]
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c90:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <prvSwitchTimerLists+0xc4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1b0      	bne.n	8007bfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c9a:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <prvSwitchTimerLists+0xc4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ca0:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <prvSwitchTimerLists+0xc8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a04      	ldr	r2, [pc, #16]	@ (8007cb8 <prvSwitchTimerLists+0xc4>)
 8007ca6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ca8:	4a04      	ldr	r2, [pc, #16]	@ (8007cbc <prvSwitchTimerLists+0xc8>)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6013      	str	r3, [r2, #0]
}
 8007cae:	bf00      	nop
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20005458 	.word	0x20005458
 8007cbc:	2000545c 	.word	0x2000545c

08007cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cc6:	f000 f96f 	bl	8007fa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cca:	4b15      	ldr	r3, [pc, #84]	@ (8007d20 <prvCheckForValidListAndQueue+0x60>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d120      	bne.n	8007d14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cd2:	4814      	ldr	r0, [pc, #80]	@ (8007d24 <prvCheckForValidListAndQueue+0x64>)
 8007cd4:	f7fd fff8 	bl	8005cc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cd8:	4813      	ldr	r0, [pc, #76]	@ (8007d28 <prvCheckForValidListAndQueue+0x68>)
 8007cda:	f7fd fff5 	bl	8005cc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cde:	4b13      	ldr	r3, [pc, #76]	@ (8007d2c <prvCheckForValidListAndQueue+0x6c>)
 8007ce0:	4a10      	ldr	r2, [pc, #64]	@ (8007d24 <prvCheckForValidListAndQueue+0x64>)
 8007ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ce4:	4b12      	ldr	r3, [pc, #72]	@ (8007d30 <prvCheckForValidListAndQueue+0x70>)
 8007ce6:	4a10      	ldr	r2, [pc, #64]	@ (8007d28 <prvCheckForValidListAndQueue+0x68>)
 8007ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cea:	2300      	movs	r3, #0
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	4b11      	ldr	r3, [pc, #68]	@ (8007d34 <prvCheckForValidListAndQueue+0x74>)
 8007cf0:	4a11      	ldr	r2, [pc, #68]	@ (8007d38 <prvCheckForValidListAndQueue+0x78>)
 8007cf2:	2110      	movs	r1, #16
 8007cf4:	200a      	movs	r0, #10
 8007cf6:	f7fe f905 	bl	8005f04 <xQueueGenericCreateStatic>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4a08      	ldr	r2, [pc, #32]	@ (8007d20 <prvCheckForValidListAndQueue+0x60>)
 8007cfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d00:	4b07      	ldr	r3, [pc, #28]	@ (8007d20 <prvCheckForValidListAndQueue+0x60>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d08:	4b05      	ldr	r3, [pc, #20]	@ (8007d20 <prvCheckForValidListAndQueue+0x60>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	490b      	ldr	r1, [pc, #44]	@ (8007d3c <prvCheckForValidListAndQueue+0x7c>)
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fd2a 	bl	8006768 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d14:	f000 f97a 	bl	800800c <vPortExitCritical>
}
 8007d18:	bf00      	nop
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20005460 	.word	0x20005460
 8007d24:	20005430 	.word	0x20005430
 8007d28:	20005444 	.word	0x20005444
 8007d2c:	20005458 	.word	0x20005458
 8007d30:	2000545c 	.word	0x2000545c
 8007d34:	2000550c 	.word	0x2000550c
 8007d38:	2000546c 	.word	0x2000546c
 8007d3c:	08012870 	.word	0x08012870

08007d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3b04      	subs	r3, #4
 8007d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0201 	bic.w	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3b04      	subs	r3, #4
 8007d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d70:	4a0c      	ldr	r2, [pc, #48]	@ (8007da4 <pxPortInitialiseStack+0x64>)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3b14      	subs	r3, #20
 8007d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f06f 0202 	mvn.w	r2, #2
 8007d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3b20      	subs	r3, #32
 8007d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d96:	68fb      	ldr	r3, [r7, #12]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	08007da9 	.word	0x08007da9

08007da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007db2:	4b13      	ldr	r3, [pc, #76]	@ (8007e00 <prvTaskExitError+0x58>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dba:	d00b      	beq.n	8007dd4 <prvTaskExitError+0x2c>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	e7fd      	b.n	8007dd0 <prvTaskExitError+0x28>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	60bb      	str	r3, [r7, #8]
}
 8007de6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007de8:	bf00      	nop
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0fc      	beq.n	8007dea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000014 	.word	0x20000014
	...

08007e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e10:	4b07      	ldr	r3, [pc, #28]	@ (8007e30 <pxCurrentTCBConst2>)
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	f380 8809 	msr	PSP, r0
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8811 	msr	BASEPRI, r0
 8007e2a:	4770      	bx	lr
 8007e2c:	f3af 8000 	nop.w

08007e30 <pxCurrentTCBConst2>:
 8007e30:	20004f30 	.word	0x20004f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e38:	4808      	ldr	r0, [pc, #32]	@ (8007e5c <prvPortStartFirstTask+0x24>)
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f380 8808 	msr	MSP, r0
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8814 	msr	CONTROL, r0
 8007e4a:	b662      	cpsie	i
 8007e4c:	b661      	cpsie	f
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	df00      	svc	0
 8007e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e5a:	bf00      	nop
 8007e5c:	e000ed08 	.word	0xe000ed08

08007e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e66:	4b47      	ldr	r3, [pc, #284]	@ (8007f84 <xPortStartScheduler+0x124>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a47      	ldr	r2, [pc, #284]	@ (8007f88 <xPortStartScheduler+0x128>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10b      	bne.n	8007e88 <xPortStartScheduler+0x28>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	e7fd      	b.n	8007e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e88:	4b3e      	ldr	r3, [pc, #248]	@ (8007f84 <xPortStartScheduler+0x124>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f8c <xPortStartScheduler+0x12c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10b      	bne.n	8007eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	60fb      	str	r3, [r7, #12]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eaa:	4b39      	ldr	r3, [pc, #228]	@ (8007f90 <xPortStartScheduler+0x130>)
 8007eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	22ff      	movs	r2, #255	@ 0xff
 8007eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	4b31      	ldr	r3, [pc, #196]	@ (8007f94 <xPortStartScheduler+0x134>)
 8007ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007ed4:	2207      	movs	r2, #7
 8007ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ed8:	e009      	b.n	8007eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007eda:	4b2f      	ldr	r3, [pc, #188]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef6:	2b80      	cmp	r3, #128	@ 0x80
 8007ef8:	d0ef      	beq.n	8007eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007efa:	4b27      	ldr	r3, [pc, #156]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1c3 0307 	rsb	r3, r3, #7
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d00b      	beq.n	8007f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60bb      	str	r3, [r7, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	4a1c      	ldr	r2, [pc, #112]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f28:	4b1b      	ldr	r3, [pc, #108]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f30:	4a19      	ldr	r2, [pc, #100]	@ (8007f98 <xPortStartScheduler+0x138>)
 8007f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f3c:	4b17      	ldr	r3, [pc, #92]	@ (8007f9c <xPortStartScheduler+0x13c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a16      	ldr	r2, [pc, #88]	@ (8007f9c <xPortStartScheduler+0x13c>)
 8007f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f48:	4b14      	ldr	r3, [pc, #80]	@ (8007f9c <xPortStartScheduler+0x13c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a13      	ldr	r2, [pc, #76]	@ (8007f9c <xPortStartScheduler+0x13c>)
 8007f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f54:	f000 f8da 	bl	800810c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f58:	4b11      	ldr	r3, [pc, #68]	@ (8007fa0 <xPortStartScheduler+0x140>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f5e:	f000 f8f9 	bl	8008154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f62:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <xPortStartScheduler+0x144>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa4 <xPortStartScheduler+0x144>)
 8007f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f6e:	f7ff ff63 	bl	8007e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f72:	f7ff f811 	bl	8006f98 <vTaskSwitchContext>
	prvTaskExitError();
 8007f76:	f7ff ff17 	bl	8007da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed00 	.word	0xe000ed00
 8007f88:	410fc271 	.word	0x410fc271
 8007f8c:	410fc270 	.word	0x410fc270
 8007f90:	e000e400 	.word	0xe000e400
 8007f94:	2000555c 	.word	0x2000555c
 8007f98:	20005560 	.word	0x20005560
 8007f9c:	e000ed20 	.word	0xe000ed20
 8007fa0:	20000014 	.word	0x20000014
 8007fa4:	e000ef34 	.word	0xe000ef34

08007fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fc2:	4b10      	ldr	r3, [pc, #64]	@ (8008004 <vPortEnterCritical+0x5c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008004 <vPortEnterCritical+0x5c>)
 8007fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <vPortEnterCritical+0x5c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d110      	bne.n	8007ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <vPortEnterCritical+0x60>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00b      	beq.n	8007ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	603b      	str	r3, [r7, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	e7fd      	b.n	8007ff2 <vPortEnterCritical+0x4a>
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000014 	.word	0x20000014
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008012:	4b12      	ldr	r3, [pc, #72]	@ (800805c <vPortExitCritical+0x50>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <vPortExitCritical+0x26>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	607b      	str	r3, [r7, #4]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008032:	4b0a      	ldr	r3, [pc, #40]	@ (800805c <vPortExitCritical+0x50>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3b01      	subs	r3, #1
 8008038:	4a08      	ldr	r2, [pc, #32]	@ (800805c <vPortExitCritical+0x50>)
 800803a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800803c:	4b07      	ldr	r3, [pc, #28]	@ (800805c <vPortExitCritical+0x50>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <vPortExitCritical+0x44>
 8008044:	2300      	movs	r3, #0
 8008046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f383 8811 	msr	BASEPRI, r3
}
 800804e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20000014 	.word	0x20000014

08008060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008060:	f3ef 8009 	mrs	r0, PSP
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4b15      	ldr	r3, [pc, #84]	@ (80080c0 <pxCurrentTCBConst>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	f01e 0f10 	tst.w	lr, #16
 8008070:	bf08      	it	eq
 8008072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	6010      	str	r0, [r2, #0]
 800807c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008084:	f380 8811 	msr	BASEPRI, r0
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f7fe ff82 	bl	8006f98 <vTaskSwitchContext>
 8008094:	f04f 0000 	mov.w	r0, #0
 8008098:	f380 8811 	msr	BASEPRI, r0
 800809c:	bc09      	pop	{r0, r3}
 800809e:	6819      	ldr	r1, [r3, #0]
 80080a0:	6808      	ldr	r0, [r1, #0]
 80080a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a6:	f01e 0f10 	tst.w	lr, #16
 80080aa:	bf08      	it	eq
 80080ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080b0:	f380 8809 	msr	PSP, r0
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst>:
 80080c0:	20004f30 	.word	0x20004f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080e2:	f7fe fe9f 	bl	8006e24 <xTaskIncrementTick>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ec:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <xPortSysTickHandler+0x40>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f383 8811 	msr	BASEPRI, r3
}
 80080fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008110:	4b0b      	ldr	r3, [pc, #44]	@ (8008140 <vPortSetupTimerInterrupt+0x34>)
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008116:	4b0b      	ldr	r3, [pc, #44]	@ (8008144 <vPortSetupTimerInterrupt+0x38>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800811c:	4b0a      	ldr	r3, [pc, #40]	@ (8008148 <vPortSetupTimerInterrupt+0x3c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0a      	ldr	r2, [pc, #40]	@ (800814c <vPortSetupTimerInterrupt+0x40>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	4a09      	ldr	r2, [pc, #36]	@ (8008150 <vPortSetupTimerInterrupt+0x44>)
 800812a:	3b01      	subs	r3, #1
 800812c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800812e:	4b04      	ldr	r3, [pc, #16]	@ (8008140 <vPortSetupTimerInterrupt+0x34>)
 8008130:	2207      	movs	r2, #7
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	e000e010 	.word	0xe000e010
 8008144:	e000e018 	.word	0xe000e018
 8008148:	20000008 	.word	0x20000008
 800814c:	10624dd3 	.word	0x10624dd3
 8008150:	e000e014 	.word	0xe000e014

08008154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008164 <vPortEnableVFP+0x10>
 8008158:	6801      	ldr	r1, [r0, #0]
 800815a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800815e:	6001      	str	r1, [r0, #0]
 8008160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008162:	bf00      	nop
 8008164:	e000ed88 	.word	0xe000ed88

08008168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800816e:	f3ef 8305 	mrs	r3, IPSR
 8008172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b0f      	cmp	r3, #15
 8008178:	d915      	bls.n	80081a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800817a:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <vPortValidateInterruptPriority+0x74>)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008184:	4b16      	ldr	r3, [pc, #88]	@ (80081e0 <vPortValidateInterruptPriority+0x78>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	7afa      	ldrb	r2, [r7, #11]
 800818a:	429a      	cmp	r2, r3
 800818c:	d20b      	bcs.n	80081a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081a6:	4b0f      	ldr	r3, [pc, #60]	@ (80081e4 <vPortValidateInterruptPriority+0x7c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081ae:	4b0e      	ldr	r3, [pc, #56]	@ (80081e8 <vPortValidateInterruptPriority+0x80>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d90b      	bls.n	80081ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	603b      	str	r3, [r7, #0]
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	e7fd      	b.n	80081ca <vPortValidateInterruptPriority+0x62>
	}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	e000e3f0 	.word	0xe000e3f0
 80081e0:	2000555c 	.word	0x2000555c
 80081e4:	e000ed0c 	.word	0xe000ed0c
 80081e8:	20005560 	.word	0x20005560

080081ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	@ 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081f8:	f7fe fd58 	bl	8006cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008370 <pvPortMalloc+0x184>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008204:	f000 f924 	bl	8008450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008208:	4b5a      	ldr	r3, [pc, #360]	@ (8008374 <pvPortMalloc+0x188>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4013      	ands	r3, r2
 8008210:	2b00      	cmp	r3, #0
 8008212:	f040 8095 	bne.w	8008340 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01e      	beq.n	800825a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800821c:	2208      	movs	r2, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	2b00      	cmp	r3, #0
 800822c:	d015      	beq.n	800825a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f023 0307 	bic.w	r3, r3, #7
 8008234:	3308      	adds	r3, #8
 8008236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <pvPortMalloc+0x6e>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	617b      	str	r3, [r7, #20]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d06f      	beq.n	8008340 <pvPortMalloc+0x154>
 8008260:	4b45      	ldr	r3, [pc, #276]	@ (8008378 <pvPortMalloc+0x18c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	429a      	cmp	r2, r3
 8008268:	d86a      	bhi.n	8008340 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800826a:	4b44      	ldr	r3, [pc, #272]	@ (800837c <pvPortMalloc+0x190>)
 800826c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800826e:	4b43      	ldr	r3, [pc, #268]	@ (800837c <pvPortMalloc+0x190>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008274:	e004      	b.n	8008280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d903      	bls.n	8008292 <pvPortMalloc+0xa6>
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f1      	bne.n	8008276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008292:	4b37      	ldr	r3, [pc, #220]	@ (8008370 <pvPortMalloc+0x184>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008298:	429a      	cmp	r2, r3
 800829a:	d051      	beq.n	8008340 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2208      	movs	r2, #8
 80082a2:	4413      	add	r3, r2
 80082a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	1ad2      	subs	r2, r2, r3
 80082b6:	2308      	movs	r3, #8
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d920      	bls.n	8008300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4413      	add	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <pvPortMalloc+0xfc>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	613b      	str	r3, [r7, #16]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	1ad2      	subs	r2, r2, r3
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082fa:	69b8      	ldr	r0, [r7, #24]
 80082fc:	f000 f90a 	bl	8008514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008300:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <pvPortMalloc+0x18c>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	4a1b      	ldr	r2, [pc, #108]	@ (8008378 <pvPortMalloc+0x18c>)
 800830c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800830e:	4b1a      	ldr	r3, [pc, #104]	@ (8008378 <pvPortMalloc+0x18c>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b1b      	ldr	r3, [pc, #108]	@ (8008380 <pvPortMalloc+0x194>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d203      	bcs.n	8008322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800831a:	4b17      	ldr	r3, [pc, #92]	@ (8008378 <pvPortMalloc+0x18c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a18      	ldr	r2, [pc, #96]	@ (8008380 <pvPortMalloc+0x194>)
 8008320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	4b13      	ldr	r3, [pc, #76]	@ (8008374 <pvPortMalloc+0x188>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	431a      	orrs	r2, r3
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008336:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <pvPortMalloc+0x198>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <pvPortMalloc+0x198>)
 800833e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008340:	f7fe fcc2 	bl	8006cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <pvPortMalloc+0x17a>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60fb      	str	r3, [r7, #12]
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	e7fd      	b.n	8008362 <pvPortMalloc+0x176>
	return pvReturn;
 8008366:	69fb      	ldr	r3, [r7, #28]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3728      	adds	r7, #40	@ 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	2000916c 	.word	0x2000916c
 8008374:	20009180 	.word	0x20009180
 8008378:	20009170 	.word	0x20009170
 800837c:	20009164 	.word	0x20009164
 8008380:	20009174 	.word	0x20009174
 8008384:	20009178 	.word	0x20009178

08008388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d04f      	beq.n	800843a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800839a:	2308      	movs	r3, #8
 800839c:	425b      	negs	r3, r3
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4413      	add	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	4b25      	ldr	r3, [pc, #148]	@ (8008444 <vPortFree+0xbc>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <vPortFree+0x46>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	60fb      	str	r3, [r7, #12]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <vPortFree+0x66>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	60bb      	str	r3, [r7, #8]
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	e7fd      	b.n	80083ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	4b14      	ldr	r3, [pc, #80]	@ (8008444 <vPortFree+0xbc>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01e      	beq.n	800843a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11a      	bne.n	800843a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	4b0e      	ldr	r3, [pc, #56]	@ (8008444 <vPortFree+0xbc>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	43db      	mvns	r3, r3
 800840e:	401a      	ands	r2, r3
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008414:	f7fe fc4a 	bl	8006cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b0a      	ldr	r3, [pc, #40]	@ (8008448 <vPortFree+0xc0>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4413      	add	r3, r2
 8008422:	4a09      	ldr	r2, [pc, #36]	@ (8008448 <vPortFree+0xc0>)
 8008424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008426:	6938      	ldr	r0, [r7, #16]
 8008428:	f000 f874 	bl	8008514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800842c:	4b07      	ldr	r3, [pc, #28]	@ (800844c <vPortFree+0xc4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3301      	adds	r3, #1
 8008432:	4a06      	ldr	r2, [pc, #24]	@ (800844c <vPortFree+0xc4>)
 8008434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008436:	f7fe fc47 	bl	8006cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800843a:	bf00      	nop
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20009180 	.word	0x20009180
 8008448:	20009170 	.word	0x20009170
 800844c:	2000917c 	.word	0x2000917c

08008450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008456:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800845a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800845c:	4b27      	ldr	r3, [pc, #156]	@ (80084fc <prvHeapInit+0xac>)
 800845e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3307      	adds	r3, #7
 800846e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0307 	bic.w	r3, r3, #7
 8008476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	4a1f      	ldr	r2, [pc, #124]	@ (80084fc <prvHeapInit+0xac>)
 8008480:	4413      	add	r3, r2
 8008482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008488:	4a1d      	ldr	r2, [pc, #116]	@ (8008500 <prvHeapInit+0xb0>)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800848e:	4b1c      	ldr	r3, [pc, #112]	@ (8008500 <prvHeapInit+0xb0>)
 8008490:	2200      	movs	r2, #0
 8008492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	4413      	add	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800849c:	2208      	movs	r2, #8
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1a9b      	subs	r3, r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0307 	bic.w	r3, r3, #7
 80084aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a15      	ldr	r2, [pc, #84]	@ (8008504 <prvHeapInit+0xb4>)
 80084b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084b2:	4b14      	ldr	r3, [pc, #80]	@ (8008504 <prvHeapInit+0xb4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2200      	movs	r2, #0
 80084b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084ba:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <prvHeapInit+0xb4>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <prvHeapInit+0xb4>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008508 <prvHeapInit+0xb8>)
 80084de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	4a09      	ldr	r2, [pc, #36]	@ (800850c <prvHeapInit+0xbc>)
 80084e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084e8:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <prvHeapInit+0xc0>)
 80084ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80084ee:	601a      	str	r2, [r3, #0]
}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20005564 	.word	0x20005564
 8008500:	20009164 	.word	0x20009164
 8008504:	2000916c 	.word	0x2000916c
 8008508:	20009174 	.word	0x20009174
 800850c:	20009170 	.word	0x20009170
 8008510:	20009180 	.word	0x20009180

08008514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800851c:	4b28      	ldr	r3, [pc, #160]	@ (80085c0 <prvInsertBlockIntoFreeList+0xac>)
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	e002      	b.n	8008528 <prvInsertBlockIntoFreeList+0x14>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	429a      	cmp	r2, r3
 8008530:	d8f7      	bhi.n	8008522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d108      	bne.n	8008556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	441a      	add	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d118      	bne.n	800859c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b15      	ldr	r3, [pc, #84]	@ (80085c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d00d      	beq.n	8008592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	e008      	b.n	80085a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008592:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	e003      	b.n	80085a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d002      	beq.n	80085b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20009164 	.word	0x20009164
 80085c4:	2000916c 	.word	0x2000916c

080085c8 <rcl_get_zero_initialized_publisher>:
 80085c8:	4b01      	ldr	r3, [pc, #4]	@ (80085d0 <rcl_get_zero_initialized_publisher+0x8>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	080128c8 	.word	0x080128c8

080085d4 <rcl_publisher_init>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	b091      	sub	sp, #68	@ 0x44
 80085da:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80085dc:	b3d7      	cbz	r7, 8008654 <rcl_publisher_init+0x80>
 80085de:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 80085e2:	4604      	mov	r4, r0
 80085e4:	4648      	mov	r0, r9
 80085e6:	4688      	mov	r8, r1
 80085e8:	4616      	mov	r6, r2
 80085ea:	461d      	mov	r5, r3
 80085ec:	f000 fa10 	bl	8008a10 <rcutils_allocator_is_valid>
 80085f0:	b380      	cbz	r0, 8008654 <rcl_publisher_init+0x80>
 80085f2:	b37c      	cbz	r4, 8008654 <rcl_publisher_init+0x80>
 80085f4:	f8d4 a000 	ldr.w	sl, [r4]
 80085f8:	f1ba 0f00 	cmp.w	sl, #0
 80085fc:	d004      	beq.n	8008608 <rcl_publisher_init+0x34>
 80085fe:	2564      	movs	r5, #100	@ 0x64
 8008600:	4628      	mov	r0, r5
 8008602:	b011      	add	sp, #68	@ 0x44
 8008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008608:	4640      	mov	r0, r8
 800860a:	f005 fb8d 	bl	800dd28 <rcl_node_is_valid>
 800860e:	b330      	cbz	r0, 800865e <rcl_publisher_init+0x8a>
 8008610:	b306      	cbz	r6, 8008654 <rcl_publisher_init+0x80>
 8008612:	b1fd      	cbz	r5, 8008654 <rcl_publisher_init+0x80>
 8008614:	46ce      	mov	lr, r9
 8008616:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800861a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800861e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008622:	f8de 3000 	ldr.w	r3, [lr]
 8008626:	f8cc 3000 	str.w	r3, [ip]
 800862a:	f000 fa2d 	bl	8008a88 <rcutils_get_zero_initialized_string_map>
 800862e:	ab10      	add	r3, sp, #64	@ 0x40
 8008630:	4684      	mov	ip, r0
 8008632:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008636:	f8cd c020 	str.w	ip, [sp, #32]
 800863a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800863e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8008642:	4651      	mov	r1, sl
 8008644:	a808      	add	r0, sp, #32
 8008646:	f000 fa99 	bl	8008b7c <rcutils_string_map_init>
 800864a:	b150      	cbz	r0, 8008662 <rcl_publisher_init+0x8e>
 800864c:	280a      	cmp	r0, #10
 800864e:	d013      	beq.n	8008678 <rcl_publisher_init+0xa4>
 8008650:	2501      	movs	r5, #1
 8008652:	e7d5      	b.n	8008600 <rcl_publisher_init+0x2c>
 8008654:	250b      	movs	r5, #11
 8008656:	4628      	mov	r0, r5
 8008658:	b011      	add	sp, #68	@ 0x44
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	25c8      	movs	r5, #200	@ 0xc8
 8008660:	e7ce      	b.n	8008600 <rcl_publisher_init+0x2c>
 8008662:	a808      	add	r0, sp, #32
 8008664:	f004 ff96 	bl	800d594 <rcl_get_default_topic_name_substitutions>
 8008668:	4682      	mov	sl, r0
 800866a:	b138      	cbz	r0, 800867c <rcl_publisher_init+0xa8>
 800866c:	a808      	add	r0, sp, #32
 800866e:	f000 fac5 	bl	8008bfc <rcutils_string_map_fini>
 8008672:	f1ba 0f0a 	cmp.w	sl, #10
 8008676:	d1eb      	bne.n	8008650 <rcl_publisher_init+0x7c>
 8008678:	250a      	movs	r5, #10
 800867a:	e7c1      	b.n	8008600 <rcl_publisher_init+0x2c>
 800867c:	4640      	mov	r0, r8
 800867e:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008682:	f005 fb5b 	bl	800dd3c <rcl_node_get_name>
 8008686:	4682      	mov	sl, r0
 8008688:	4640      	mov	r0, r8
 800868a:	f005 fb5f 	bl	800dd4c <rcl_node_get_namespace>
 800868e:	4686      	mov	lr, r0
 8008690:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8008694:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8008698:	46ec      	mov	ip, sp
 800869a:	f8cd b014 	str.w	fp, [sp, #20]
 800869e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086a2:	f8d9 3000 	ldr.w	r3, [r9]
 80086a6:	f8cc 3000 	str.w	r3, [ip]
 80086aa:	4628      	mov	r0, r5
 80086ac:	4651      	mov	r1, sl
 80086ae:	4672      	mov	r2, lr
 80086b0:	ab08      	add	r3, sp, #32
 80086b2:	f004 fe09 	bl	800d2c8 <rcl_expand_topic_name>
 80086b6:	4605      	mov	r5, r0
 80086b8:	a808      	add	r0, sp, #32
 80086ba:	f000 fa9f 	bl	8008bfc <rcutils_string_map_fini>
 80086be:	b920      	cbnz	r0, 80086ca <rcl_publisher_init+0xf6>
 80086c0:	b15d      	cbz	r5, 80086da <rcl_publisher_init+0x106>
 80086c2:	2d67      	cmp	r5, #103	@ 0x67
 80086c4:	d002      	beq.n	80086cc <rcl_publisher_init+0xf8>
 80086c6:	2d69      	cmp	r5, #105	@ 0x69
 80086c8:	d05f      	beq.n	800878a <rcl_publisher_init+0x1b6>
 80086ca:	2501      	movs	r5, #1
 80086cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d096      	beq.n	8008600 <rcl_publisher_init+0x2c>
 80086d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80086d6:	4798      	blx	r3
 80086d8:	e792      	b.n	8008600 <rcl_publisher_init+0x2c>
 80086da:	4640      	mov	r0, r8
 80086dc:	f005 fb3e 	bl	800dd5c <rcl_node_get_options>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d0f2      	beq.n	80086ca <rcl_publisher_init+0xf6>
 80086e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e6:	f7f7 fd85 	bl	80001f4 <strlen>
 80086ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80086ee:	3001      	adds	r0, #1
 80086f0:	4798      	blx	r3
 80086f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086f4:	9107      	str	r1, [sp, #28]
 80086f6:	4681      	mov	r9, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	f7f7 fd7b 	bl	80001f4 <strlen>
 80086fe:	9907      	ldr	r1, [sp, #28]
 8008700:	1c42      	adds	r2, r0, #1
 8008702:	4648      	mov	r0, r9
 8008704:	f009 f99f 	bl	8011a46 <memcpy>
 8008708:	462a      	mov	r2, r5
 800870a:	4648      	mov	r0, r9
 800870c:	a90a      	add	r1, sp, #40	@ 0x28
 800870e:	f000 faed 	bl	8008cec <rmw_validate_full_topic_name>
 8008712:	2800      	cmp	r0, #0
 8008714:	d137      	bne.n	8008786 <rcl_publisher_init+0x1b2>
 8008716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008718:	2b00      	cmp	r3, #0
 800871a:	d138      	bne.n	800878e <rcl_publisher_init+0x1ba>
 800871c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800871e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008720:	20c0      	movs	r0, #192	@ 0xc0
 8008722:	4798      	blx	r3
 8008724:	6020      	str	r0, [r4, #0]
 8008726:	b3a0      	cbz	r0, 8008792 <rcl_publisher_init+0x1be>
 8008728:	4640      	mov	r0, r8
 800872a:	f005 fb1f 	bl	800dd6c <rcl_node_get_rmw_handle>
 800872e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	4631      	mov	r1, r6
 8008736:	463b      	mov	r3, r7
 8008738:	464a      	mov	r2, r9
 800873a:	6825      	ldr	r5, [r4, #0]
 800873c:	f000 fbd6 	bl	8008eec <rmw_create_publisher>
 8008740:	6821      	ldr	r1, [r4, #0]
 8008742:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 8008746:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 800874a:	b388      	cbz	r0, 80087b0 <rcl_publisher_init+0x1dc>
 800874c:	3168      	adds	r1, #104	@ 0x68
 800874e:	f000 fca7 	bl	80090a0 <rmw_publisher_get_actual_qos>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	4605      	mov	r5, r0
 8008756:	b9f0      	cbnz	r0, 8008796 <rcl_publisher_init+0x1c2>
 8008758:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800875c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 8008760:	4618      	mov	r0, r3
 8008762:	2268      	movs	r2, #104	@ 0x68
 8008764:	4639      	mov	r1, r7
 8008766:	f009 f96e 	bl	8011a46 <memcpy>
 800876a:	f8d8 2000 	ldr.w	r2, [r8]
 800876e:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 8008772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008774:	b110      	cbz	r0, 800877c <rcl_publisher_init+0x1a8>
 8008776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008778:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800877a:	4798      	blx	r3
 800877c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800877e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008780:	4648      	mov	r0, r9
 8008782:	4798      	blx	r3
 8008784:	e73c      	b.n	8008600 <rcl_publisher_init+0x2c>
 8008786:	2501      	movs	r5, #1
 8008788:	e7f3      	b.n	8008772 <rcl_publisher_init+0x19e>
 800878a:	2567      	movs	r5, #103	@ 0x67
 800878c:	e79e      	b.n	80086cc <rcl_publisher_init+0xf8>
 800878e:	2567      	movs	r5, #103	@ 0x67
 8008790:	e7ef      	b.n	8008772 <rcl_publisher_init+0x19e>
 8008792:	250a      	movs	r5, #10
 8008794:	e7ed      	b.n	8008772 <rcl_publisher_init+0x19e>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f5      	beq.n	8008786 <rcl_publisher_init+0x1b2>
 800879a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800879e:	b13b      	cbz	r3, 80087b0 <rcl_publisher_init+0x1dc>
 80087a0:	4640      	mov	r0, r8
 80087a2:	f005 fae3 	bl	800dd6c <rcl_node_get_rmw_handle>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 80087ac:	f000 fc86 	bl	80090bc <rmw_destroy_publisher>
 80087b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	4798      	blx	r3
 80087b8:	2300      	movs	r3, #0
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	2501      	movs	r5, #1
 80087be:	e7d8      	b.n	8008772 <rcl_publisher_init+0x19e>

080087c0 <rcl_publisher_get_default_options>:
 80087c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c2:	4f0e      	ldr	r7, [pc, #56]	@ (80087fc <rcl_publisher_get_default_options+0x3c>)
 80087c4:	490e      	ldr	r1, [pc, #56]	@ (8008800 <rcl_publisher_get_default_options+0x40>)
 80087c6:	b087      	sub	sp, #28
 80087c8:	4606      	mov	r6, r0
 80087ca:	2250      	movs	r2, #80	@ 0x50
 80087cc:	4638      	mov	r0, r7
 80087ce:	f009 f93a 	bl	8011a46 <memcpy>
 80087d2:	466c      	mov	r4, sp
 80087d4:	4668      	mov	r0, sp
 80087d6:	f000 f90d 	bl	80089f4 <rcutils_get_default_allocator>
 80087da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087dc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80087e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	f000 fa7f 	bl	8008ce8 <rmw_get_default_publisher_options>
 80087ea:	4639      	mov	r1, r7
 80087ec:	6678      	str	r0, [r7, #100]	@ 0x64
 80087ee:	2268      	movs	r2, #104	@ 0x68
 80087f0:	4630      	mov	r0, r6
 80087f2:	f009 f928 	bl	8011a46 <memcpy>
 80087f6:	4630      	mov	r0, r6
 80087f8:	b007      	add	sp, #28
 80087fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fc:	20009188 	.word	0x20009188
 8008800:	080128d0 	.word	0x080128d0

08008804 <rcl_publish>:
 8008804:	b1f8      	cbz	r0, 8008846 <rcl_publish+0x42>
 8008806:	6803      	ldr	r3, [r0, #0]
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4604      	mov	r4, r0
 800880c:	b1b3      	cbz	r3, 800883c <rcl_publish+0x38>
 800880e:	4616      	mov	r6, r2
 8008810:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8008814:	b192      	cbz	r2, 800883c <rcl_publish+0x38>
 8008816:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800881a:	460d      	mov	r5, r1
 800881c:	f004 fcea 	bl	800d1f4 <rcl_context_is_valid>
 8008820:	b160      	cbz	r0, 800883c <rcl_publish+0x38>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8008828:	b140      	cbz	r0, 800883c <rcl_publish+0x38>
 800882a:	b155      	cbz	r5, 8008842 <rcl_publish+0x3e>
 800882c:	4632      	mov	r2, r6
 800882e:	4629      	mov	r1, r5
 8008830:	f000 fafc 	bl	8008e2c <rmw_publish>
 8008834:	3800      	subs	r0, #0
 8008836:	bf18      	it	ne
 8008838:	2001      	movne	r0, #1
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008840:	bd70      	pop	{r4, r5, r6, pc}
 8008842:	200b      	movs	r0, #11
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800884a:	4770      	bx	lr

0800884c <rclc_support_init>:
 800884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	2800      	cmp	r0, #0
 8008854:	d042      	beq.n	80088dc <rclc_support_init+0x90>
 8008856:	461c      	mov	r4, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d03f      	beq.n	80088dc <rclc_support_init+0x90>
 800885c:	460f      	mov	r7, r1
 800885e:	4690      	mov	r8, r2
 8008860:	4606      	mov	r6, r0
 8008862:	f004 ffa7 	bl	800d7b4 <rcl_get_zero_initialized_init_options>
 8008866:	4603      	mov	r3, r0
 8008868:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800886c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	a805      	add	r0, sp, #20
 8008874:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008878:	f004 ff9e 	bl	800d7b8 <rcl_init_options_init>
 800887c:	4605      	mov	r5, r0
 800887e:	bb38      	cbnz	r0, 80088d0 <rclc_support_init+0x84>
 8008880:	f004 ff98 	bl	800d7b4 <rcl_get_zero_initialized_init_options>
 8008884:	4631      	mov	r1, r6
 8008886:	6030      	str	r0, [r6, #0]
 8008888:	a805      	add	r0, sp, #20
 800888a:	f005 f80b 	bl	800d8a4 <rcl_init_options_copy>
 800888e:	4605      	mov	r5, r0
 8008890:	b9c0      	cbnz	r0, 80088c4 <rclc_support_init+0x78>
 8008892:	ad02      	add	r5, sp, #8
 8008894:	4628      	mov	r0, r5
 8008896:	f004 fca3 	bl	800d1e0 <rcl_get_zero_initialized_context>
 800889a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800889e:	1d33      	adds	r3, r6, #4
 80088a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80088a4:	4632      	mov	r2, r6
 80088a6:	4641      	mov	r1, r8
 80088a8:	4638      	mov	r0, r7
 80088aa:	f004 fe79 	bl	800d5a0 <rcl_init>
 80088ae:	4605      	mov	r5, r0
 80088b0:	b940      	cbnz	r0, 80088c4 <rclc_support_init+0x78>
 80088b2:	60f4      	str	r4, [r6, #12]
 80088b4:	4622      	mov	r2, r4
 80088b6:	f106 0110 	add.w	r1, r6, #16
 80088ba:	2003      	movs	r0, #3
 80088bc:	f005 fba2 	bl	800e004 <rcl_clock_init>
 80088c0:	4605      	mov	r5, r0
 80088c2:	b108      	cbz	r0, 80088c8 <rclc_support_init+0x7c>
 80088c4:	f000 f8c8 	bl	8008a58 <rcutils_reset_error>
 80088c8:	a805      	add	r0, sp, #20
 80088ca:	f004 ffc7 	bl	800d85c <rcl_init_options_fini>
 80088ce:	b108      	cbz	r0, 80088d4 <rclc_support_init+0x88>
 80088d0:	f000 f8c2 	bl	8008a58 <rcutils_reset_error>
 80088d4:	4628      	mov	r0, r5
 80088d6:	b006      	add	sp, #24
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	250b      	movs	r5, #11
 80088de:	4628      	mov	r0, r5
 80088e0:	b006      	add	sp, #24
 80088e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e6:	bf00      	nop

080088e8 <rclc_node_init_default>:
 80088e8:	b3b8      	cbz	r0, 800895a <rclc_node_init_default+0x72>
 80088ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088ee:	460d      	mov	r5, r1
 80088f0:	b08f      	sub	sp, #60	@ 0x3c
 80088f2:	b329      	cbz	r1, 8008940 <rclc_node_init_default+0x58>
 80088f4:	4616      	mov	r6, r2
 80088f6:	b31a      	cbz	r2, 8008940 <rclc_node_init_default+0x58>
 80088f8:	461f      	mov	r7, r3
 80088fa:	b30b      	cbz	r3, 8008940 <rclc_node_init_default+0x58>
 80088fc:	f10d 0810 	add.w	r8, sp, #16
 8008900:	4604      	mov	r4, r0
 8008902:	4640      	mov	r0, r8
 8008904:	f005 f896 	bl	800da34 <rcl_get_zero_initialized_node>
 8008908:	e898 0003 	ldmia.w	r8, {r0, r1}
 800890c:	f10d 091c 	add.w	r9, sp, #28
 8008910:	e884 0003 	stmia.w	r4, {r0, r1}
 8008914:	4648      	mov	r0, r9
 8008916:	f005 fa2f 	bl	800dd78 <rcl_node_get_default_options>
 800891a:	4640      	mov	r0, r8
 800891c:	f005 f88a 	bl	800da34 <rcl_get_zero_initialized_node>
 8008920:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	f8cd 9000 	str.w	r9, [sp]
 800892a:	4632      	mov	r2, r6
 800892c:	e884 0003 	stmia.w	r4, {r0, r1}
 8008930:	4629      	mov	r1, r5
 8008932:	4620      	mov	r0, r4
 8008934:	f005 f888 	bl	800da48 <rcl_node_init>
 8008938:	b930      	cbnz	r0, 8008948 <rclc_node_init_default+0x60>
 800893a:	b00f      	add	sp, #60	@ 0x3c
 800893c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008940:	200b      	movs	r0, #11
 8008942:	b00f      	add	sp, #60	@ 0x3c
 8008944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008948:	9003      	str	r0, [sp, #12]
 800894a:	f000 f885 	bl	8008a58 <rcutils_reset_error>
 800894e:	f000 f883 	bl	8008a58 <rcutils_reset_error>
 8008952:	9803      	ldr	r0, [sp, #12]
 8008954:	b00f      	add	sp, #60	@ 0x3c
 8008956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895a:	200b      	movs	r0, #11
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop

08008960 <rclc_publisher_init_default>:
 8008960:	b368      	cbz	r0, 80089be <rclc_publisher_init_default+0x5e>
 8008962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	460d      	mov	r5, r1
 8008968:	b09e      	sub	sp, #120	@ 0x78
 800896a:	b321      	cbz	r1, 80089b6 <rclc_publisher_init_default+0x56>
 800896c:	4616      	mov	r6, r2
 800896e:	b312      	cbz	r2, 80089b6 <rclc_publisher_init_default+0x56>
 8008970:	461f      	mov	r7, r3
 8008972:	b303      	cbz	r3, 80089b6 <rclc_publisher_init_default+0x56>
 8008974:	4604      	mov	r4, r0
 8008976:	f7ff fe27 	bl	80085c8 <rcl_get_zero_initialized_publisher>
 800897a:	f10d 0810 	add.w	r8, sp, #16
 800897e:	6020      	str	r0, [r4, #0]
 8008980:	4640      	mov	r0, r8
 8008982:	f7ff ff1d 	bl	80087c0 <rcl_publisher_get_default_options>
 8008986:	490f      	ldr	r1, [pc, #60]	@ (80089c4 <rclc_publisher_init_default+0x64>)
 8008988:	2250      	movs	r2, #80	@ 0x50
 800898a:	4640      	mov	r0, r8
 800898c:	f009 f85b 	bl	8011a46 <memcpy>
 8008990:	f8cd 8000 	str.w	r8, [sp]
 8008994:	463b      	mov	r3, r7
 8008996:	4632      	mov	r2, r6
 8008998:	4629      	mov	r1, r5
 800899a:	4620      	mov	r0, r4
 800899c:	f7ff fe1a 	bl	80085d4 <rcl_publisher_init>
 80089a0:	b910      	cbnz	r0, 80089a8 <rclc_publisher_init_default+0x48>
 80089a2:	b01e      	add	sp, #120	@ 0x78
 80089a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a8:	9003      	str	r0, [sp, #12]
 80089aa:	f000 f855 	bl	8008a58 <rcutils_reset_error>
 80089ae:	9803      	ldr	r0, [sp, #12]
 80089b0:	b01e      	add	sp, #120	@ 0x78
 80089b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b6:	200b      	movs	r0, #11
 80089b8:	b01e      	add	sp, #120	@ 0x78
 80089ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089be:	200b      	movs	r0, #11
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	08012920 	.word	0x08012920

080089c8 <__default_zero_allocate>:
 80089c8:	f008 bbc6 	b.w	8011158 <calloc>

080089cc <__default_reallocate>:
 80089cc:	f008 bd52 	b.w	8011474 <realloc>

080089d0 <__default_deallocate>:
 80089d0:	f008 bc2e 	b.w	8011230 <free>

080089d4 <__default_allocate>:
 80089d4:	f008 bc24 	b.w	8011220 <malloc>

080089d8 <rcutils_get_zero_initialized_allocator>:
 80089d8:	b470      	push	{r4, r5, r6}
 80089da:	4d05      	ldr	r5, [pc, #20]	@ (80089f0 <rcutils_get_zero_initialized_allocator+0x18>)
 80089dc:	4606      	mov	r6, r0
 80089de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089e0:	4634      	mov	r4, r6
 80089e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	4630      	mov	r0, r6
 80089ea:	bc70      	pop	{r4, r5, r6}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	08012970 	.word	0x08012970

080089f4 <rcutils_get_default_allocator>:
 80089f4:	b470      	push	{r4, r5, r6}
 80089f6:	4d05      	ldr	r5, [pc, #20]	@ (8008a0c <rcutils_get_default_allocator+0x18>)
 80089f8:	4606      	mov	r6, r0
 80089fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089fc:	4634      	mov	r4, r6
 80089fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	4630      	mov	r0, r6
 8008a06:	bc70      	pop	{r4, r5, r6}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20000018 	.word	0x20000018

08008a10 <rcutils_allocator_is_valid>:
 8008a10:	b158      	cbz	r0, 8008a2a <rcutils_allocator_is_valid+0x1a>
 8008a12:	6803      	ldr	r3, [r0, #0]
 8008a14:	b143      	cbz	r3, 8008a28 <rcutils_allocator_is_valid+0x18>
 8008a16:	6843      	ldr	r3, [r0, #4]
 8008a18:	b133      	cbz	r3, 8008a28 <rcutils_allocator_is_valid+0x18>
 8008a1a:	68c3      	ldr	r3, [r0, #12]
 8008a1c:	b123      	cbz	r3, 8008a28 <rcutils_allocator_is_valid+0x18>
 8008a1e:	6880      	ldr	r0, [r0, #8]
 8008a20:	3800      	subs	r0, #0
 8008a22:	bf18      	it	ne
 8008a24:	2001      	movne	r0, #1
 8008a26:	4770      	bx	lr
 8008a28:	4618      	mov	r0, r3
 8008a2a:	4770      	bx	lr

08008a2c <rcutils_get_error_string>:
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <rcutils_get_error_string+0x1c>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b13b      	cbz	r3, 8008a42 <rcutils_get_error_string+0x16>
 8008a32:	4b06      	ldr	r3, [pc, #24]	@ (8008a4c <rcutils_get_error_string+0x20>)
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	b90a      	cbnz	r2, 8008a3c <rcutils_get_error_string+0x10>
 8008a38:	2201      	movs	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	4b04      	ldr	r3, [pc, #16]	@ (8008a50 <rcutils_get_error_string+0x24>)
 8008a3e:	7818      	ldrb	r0, [r3, #0]
 8008a40:	4770      	bx	lr
 8008a42:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <rcutils_get_error_string+0x28>)
 8008a44:	7818      	ldrb	r0, [r3, #0]
 8008a46:	4770      	bx	lr
 8008a48:	200091f0 	.word	0x200091f0
 8008a4c:	200091f1 	.word	0x200091f1
 8008a50:	20009458 	.word	0x20009458
 8008a54:	08012984 	.word	0x08012984

08008a58 <rcutils_reset_error>:
 8008a58:	b4d0      	push	{r4, r6, r7}
 8008a5a:	4a07      	ldr	r2, [pc, #28]	@ (8008a78 <rcutils_reset_error+0x20>)
 8008a5c:	4807      	ldr	r0, [pc, #28]	@ (8008a7c <rcutils_reset_error+0x24>)
 8008a5e:	4c08      	ldr	r4, [pc, #32]	@ (8008a80 <rcutils_reset_error+0x28>)
 8008a60:	4908      	ldr	r1, [pc, #32]	@ (8008a84 <rcutils_reset_error+0x2c>)
 8008a62:	2300      	movs	r3, #0
 8008a64:	2600      	movs	r6, #0
 8008a66:	2700      	movs	r7, #0
 8008a68:	8013      	strh	r3, [r2, #0]
 8008a6a:	7003      	strb	r3, [r0, #0]
 8008a6c:	e9c2 6702 	strd	r6, r7, [r2, #8]
 8008a70:	7023      	strb	r3, [r4, #0]
 8008a72:	700b      	strb	r3, [r1, #0]
 8008a74:	bcd0      	pop	{r4, r6, r7}
 8008a76:	4770      	bx	lr
 8008a78:	20009460 	.word	0x20009460
 8008a7c:	20009458 	.word	0x20009458
 8008a80:	200091f1 	.word	0x200091f1
 8008a84:	200091f0 	.word	0x200091f0

08008a88 <rcutils_get_zero_initialized_string_map>:
 8008a88:	4b01      	ldr	r3, [pc, #4]	@ (8008a90 <rcutils_get_zero_initialized_string_map+0x8>)
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	6018      	str	r0, [r3, #0]
 8008a8e:	4770      	bx	lr
 8008a90:	200091f4 	.word	0x200091f4

08008a94 <rcutils_string_map_reserve>:
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d061      	beq.n	8008b5c <rcutils_string_map_reserve+0xc8>
 8008a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	6805      	ldr	r5, [r0, #0]
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	b12d      	cbz	r5, 8008ab2 <rcutils_string_map_reserve+0x1e>
 8008aa6:	68eb      	ldr	r3, [r5, #12]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d906      	bls.n	8008aba <rcutils_string_map_reserve+0x26>
 8008aac:	461c      	mov	r4, r3
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	d1f9      	bne.n	8008aa6 <rcutils_string_map_reserve+0x12>
 8008ab2:	201f      	movs	r0, #31
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aba:	68ab      	ldr	r3, [r5, #8]
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d049      	beq.n	8008b54 <rcutils_string_map_reserve+0xc0>
 8008ac0:	6a2f      	ldr	r7, [r5, #32]
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	d035      	beq.n	8008b32 <rcutils_string_map_reserve+0x9e>
 8008ac6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008aca:	d245      	bcs.n	8008b58 <rcutils_string_map_reserve+0xc4>
 8008acc:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8008ad0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8008ad4:	6828      	ldr	r0, [r5, #0]
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	463a      	mov	r2, r7
 8008ada:	47c8      	blx	r9
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d03b      	beq.n	8008b58 <rcutils_string_map_reserve+0xc4>
 8008ae0:	6833      	ldr	r3, [r6, #0]
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	6018      	str	r0, [r3, #0]
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	6858      	ldr	r0, [r3, #4]
 8008aea:	47c8      	blx	r9
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d033      	beq.n	8008b58 <rcutils_string_map_reserve+0xc4>
 8008af0:	6835      	ldr	r5, [r6, #0]
 8008af2:	68ab      	ldr	r3, [r5, #8]
 8008af4:	6068      	str	r0, [r5, #4]
 8008af6:	42a3      	cmp	r3, r4
 8008af8:	d227      	bcs.n	8008b4a <rcutils_string_map_reserve+0xb6>
 8008afa:	682a      	ldr	r2, [r5, #0]
 8008afc:	eb00 0108 	add.w	r1, r0, r8
 8008b00:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8008b04:	428f      	cmp	r7, r1
 8008b06:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008b0a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8008b0e:	d203      	bcs.n	8008b18 <rcutils_string_map_reserve+0x84>
 8008b10:	eb02 0108 	add.w	r1, r2, r8
 8008b14:	428e      	cmp	r6, r1
 8008b16:	d323      	bcc.n	8008b60 <rcutils_string_map_reserve+0xcc>
 8008b18:	1ae3      	subs	r3, r4, r3
 8008b1a:	009a      	lsls	r2, r3, #2
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	2100      	movs	r1, #0
 8008b20:	9201      	str	r2, [sp, #4]
 8008b22:	f008 fec7 	bl	80118b4 <memset>
 8008b26:	9a01      	ldr	r2, [sp, #4]
 8008b28:	4630      	mov	r0, r6
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	f008 fec2 	bl	80118b4 <memset>
 8008b30:	e00b      	b.n	8008b4a <rcutils_string_map_reserve+0xb6>
 8008b32:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8008b36:	6828      	ldr	r0, [r5, #0]
 8008b38:	4639      	mov	r1, r7
 8008b3a:	47c0      	blx	r8
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	4639      	mov	r1, r7
 8008b40:	6858      	ldr	r0, [r3, #4]
 8008b42:	601c      	str	r4, [r3, #0]
 8008b44:	47c0      	blx	r8
 8008b46:	6835      	ldr	r5, [r6, #0]
 8008b48:	606c      	str	r4, [r5, #4]
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	60ac      	str	r4, [r5, #8]
 8008b4e:	b003      	add	sp, #12
 8008b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b54:	2000      	movs	r0, #0
 8008b56:	e7ad      	b.n	8008ab4 <rcutils_string_map_reserve+0x20>
 8008b58:	200a      	movs	r0, #10
 8008b5a:	e7ab      	b.n	8008ab4 <rcutils_string_map_reserve+0x20>
 8008b5c:	200b      	movs	r0, #11
 8008b5e:	4770      	bx	lr
 8008b60:	1f13      	subs	r3, r2, #4
 8008b62:	f1ac 0c04 	sub.w	ip, ip, #4
 8008b66:	4498      	add	r8, r3
 8008b68:	4460      	add	r0, ip
 8008b6a:	4462      	add	r2, ip
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f842 3f04 	str.w	r3, [r2, #4]!
 8008b72:	4542      	cmp	r2, r8
 8008b74:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b78:	d1f9      	bne.n	8008b6e <rcutils_string_map_reserve+0xda>
 8008b7a:	e7e6      	b.n	8008b4a <rcutils_string_map_reserve+0xb6>

08008b7c <rcutils_string_map_init>:
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b80:	460e      	mov	r6, r1
 8008b82:	a906      	add	r1, sp, #24
 8008b84:	e881 000c 	stmia.w	r1, {r2, r3}
 8008b88:	b380      	cbz	r0, 8008bec <rcutils_string_map_init+0x70>
 8008b8a:	6807      	ldr	r7, [r0, #0]
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	b12f      	cbz	r7, 8008b9c <rcutils_string_map_init+0x20>
 8008b90:	251e      	movs	r5, #30
 8008b92:	4628      	mov	r0, r5
 8008b94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b98:	b002      	add	sp, #8
 8008b9a:	4770      	bx	lr
 8008b9c:	a806      	add	r0, sp, #24
 8008b9e:	f7ff ff37 	bl	8008a10 <rcutils_allocator_is_valid>
 8008ba2:	b318      	cbz	r0, 8008bec <rcutils_string_map_init+0x70>
 8008ba4:	9b06      	ldr	r3, [sp, #24]
 8008ba6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ba8:	2024      	movs	r0, #36	@ 0x24
 8008baa:	4798      	blx	r3
 8008bac:	4605      	mov	r5, r0
 8008bae:	6020      	str	r0, [r4, #0]
 8008bb0:	b310      	cbz	r0, 8008bf8 <rcutils_string_map_init+0x7c>
 8008bb2:	f10d 0e18 	add.w	lr, sp, #24
 8008bb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008bba:	f105 0c10 	add.w	ip, r5, #16
 8008bbe:	e9c5 7700 	strd	r7, r7, [r5]
 8008bc2:	e9c5 7702 	strd	r7, r7, [r5, #8]
 8008bc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008bca:	f8de 3000 	ldr.w	r3, [lr]
 8008bce:	f8cc 3000 	str.w	r3, [ip]
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff ff5d 	bl	8008a94 <rcutils_string_map_reserve>
 8008bda:	4605      	mov	r5, r0
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d0d8      	beq.n	8008b92 <rcutils_string_map_init+0x16>
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	4798      	blx	r3
 8008be8:	6027      	str	r7, [r4, #0]
 8008bea:	e7d2      	b.n	8008b92 <rcutils_string_map_init+0x16>
 8008bec:	250b      	movs	r5, #11
 8008bee:	4628      	mov	r0, r5
 8008bf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bf4:	b002      	add	sp, #8
 8008bf6:	4770      	bx	lr
 8008bf8:	250a      	movs	r5, #10
 8008bfa:	e7ca      	b.n	8008b92 <rcutils_string_map_init+0x16>

08008bfc <rcutils_string_map_fini>:
 8008bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d039      	beq.n	8008c7a <rcutils_string_map_fini+0x7e>
 8008c06:	6804      	ldr	r4, [r0, #0]
 8008c08:	4606      	mov	r6, r0
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	d031      	beq.n	8008c72 <rcutils_string_map_fini+0x76>
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	b323      	cbz	r3, 8008c5c <rcutils_string_map_fini+0x60>
 8008c12:	2500      	movs	r5, #0
 8008c14:	6822      	ldr	r2, [r4, #0]
 8008c16:	46a8      	mov	r8, r5
 8008c18:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008c1c:	b1d8      	cbz	r0, 8008c56 <rcutils_string_map_fini+0x5a>
 8008c1e:	6a21      	ldr	r1, [r4, #32]
 8008c20:	6967      	ldr	r7, [r4, #20]
 8008c22:	9101      	str	r1, [sp, #4]
 8008c24:	47b8      	blx	r7
 8008c26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c2a:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8008c2e:	9901      	ldr	r1, [sp, #4]
 8008c30:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c34:	47b8      	blx	r7
 8008c36:	68e3      	ldr	r3, [r4, #12]
 8008c38:	6862      	ldr	r2, [r4, #4]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8008c40:	60e3      	str	r3, [r4, #12]
 8008c42:	6834      	ldr	r4, [r6, #0]
 8008c44:	68a3      	ldr	r3, [r4, #8]
 8008c46:	3501      	adds	r5, #1
 8008c48:	429d      	cmp	r5, r3
 8008c4a:	d207      	bcs.n	8008c5c <rcutils_string_map_fini+0x60>
 8008c4c:	6822      	ldr	r2, [r4, #0]
 8008c4e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1e3      	bne.n	8008c1e <rcutils_string_map_fini+0x22>
 8008c56:	3501      	adds	r5, #1
 8008c58:	429d      	cmp	r5, r3
 8008c5a:	d3dd      	bcc.n	8008c18 <rcutils_string_map_fini+0x1c>
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ff18 	bl	8008a94 <rcutils_string_map_reserve>
 8008c64:	4604      	mov	r4, r0
 8008c66:	b920      	cbnz	r0, 8008c72 <rcutils_string_map_fini+0x76>
 8008c68:	6830      	ldr	r0, [r6, #0]
 8008c6a:	6943      	ldr	r3, [r0, #20]
 8008c6c:	6a01      	ldr	r1, [r0, #32]
 8008c6e:	4798      	blx	r3
 8008c70:	6034      	str	r4, [r6, #0]
 8008c72:	4620      	mov	r0, r4
 8008c74:	b002      	add	sp, #8
 8008c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7a:	240b      	movs	r4, #11
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	b002      	add	sp, #8
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c84 <rcutils_string_map_getn>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	b308      	cbz	r0, 8008cd0 <rcutils_string_map_getn+0x4c>
 8008c8c:	6804      	ldr	r4, [r0, #0]
 8008c8e:	b304      	cbz	r4, 8008cd2 <rcutils_string_map_getn+0x4e>
 8008c90:	460d      	mov	r5, r1
 8008c92:	b1e9      	cbz	r1, 8008cd0 <rcutils_string_map_getn+0x4c>
 8008c94:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8008c98:	6827      	ldr	r7, [r4, #0]
 8008c9a:	f1b9 0f00 	cmp.w	r9, #0
 8008c9e:	d017      	beq.n	8008cd0 <rcutils_string_map_getn+0x4c>
 8008ca0:	4690      	mov	r8, r2
 8008ca2:	3f04      	subs	r7, #4
 8008ca4:	2600      	movs	r6, #0
 8008ca6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8008caa:	9101      	str	r1, [sp, #4]
 8008cac:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	3601      	adds	r6, #1
 8008cb4:	b151      	cbz	r1, 8008ccc <rcutils_string_map_getn+0x48>
 8008cb6:	f7f7 fa9d 	bl	80001f4 <strlen>
 8008cba:	4540      	cmp	r0, r8
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	9901      	ldr	r1, [sp, #4]
 8008cc0:	bf38      	it	cc
 8008cc2:	4642      	movcc	r2, r8
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f008 fe0a 	bl	80118de <strncmp>
 8008cca:	b130      	cbz	r0, 8008cda <rcutils_string_map_getn+0x56>
 8008ccc:	45b1      	cmp	r9, r6
 8008cce:	d1ea      	bne.n	8008ca6 <rcutils_string_map_getn+0x22>
 8008cd0:	2400      	movs	r4, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	b002      	add	sp, #8
 8008cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cda:	6863      	ldr	r3, [r4, #4]
 8008cdc:	f853 400a 	ldr.w	r4, [r3, sl]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	b002      	add	sp, #8
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ce8 <rmw_get_default_publisher_options>:
 8008ce8:	2000      	movs	r0, #0
 8008cea:	4770      	bx	lr

08008cec <rmw_validate_full_topic_name>:
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d062      	beq.n	8008db6 <rmw_validate_full_topic_name+0xca>
 8008cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d05f      	beq.n	8008dba <rmw_validate_full_topic_name+0xce>
 8008cfa:	4616      	mov	r6, r2
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	f7f7 fa79 	bl	80001f4 <strlen>
 8008d02:	b148      	cbz	r0, 8008d18 <rmw_validate_full_topic_name+0x2c>
 8008d04:	7823      	ldrb	r3, [r4, #0]
 8008d06:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d08:	d00d      	beq.n	8008d26 <rmw_validate_full_topic_name+0x3a>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	b13e      	cbz	r6, 8008d20 <rmw_validate_full_topic_name+0x34>
 8008d10:	2000      	movs	r0, #0
 8008d12:	6030      	str	r0, [r6, #0]
 8008d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d18:	2301      	movs	r3, #1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	d1f7      	bne.n	8008d10 <rmw_validate_full_topic_name+0x24>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d26:	1e47      	subs	r7, r0, #1
 8008d28:	5de3      	ldrb	r3, [r4, r7]
 8008d2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d2c:	d047      	beq.n	8008dbe <rmw_validate_full_topic_name+0xd2>
 8008d2e:	1e63      	subs	r3, r4, #1
 8008d30:	eb03 0900 	add.w	r9, r3, r0
 8008d34:	f1c4 0e01 	rsb	lr, r4, #1
 8008d38:	eb0e 0803 	add.w	r8, lr, r3
 8008d3c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008d40:	f021 0220 	bic.w	r2, r1, #32
 8008d44:	3a41      	subs	r2, #65	@ 0x41
 8008d46:	2a19      	cmp	r2, #25
 8008d48:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8008d4c:	d90c      	bls.n	8008d68 <rmw_validate_full_topic_name+0x7c>
 8008d4e:	295f      	cmp	r1, #95	@ 0x5f
 8008d50:	d00a      	beq.n	8008d68 <rmw_validate_full_topic_name+0x7c>
 8008d52:	f1bc 0f0a 	cmp.w	ip, #10
 8008d56:	d907      	bls.n	8008d68 <rmw_validate_full_topic_name+0x7c>
 8008d58:	2304      	movs	r3, #4
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	d0df      	beq.n	8008d20 <rmw_validate_full_topic_name+0x34>
 8008d60:	f8c6 8000 	str.w	r8, [r6]
 8008d64:	2000      	movs	r0, #0
 8008d66:	e7d5      	b.n	8008d14 <rmw_validate_full_topic_name+0x28>
 8008d68:	454b      	cmp	r3, r9
 8008d6a:	d1e5      	bne.n	8008d38 <rmw_validate_full_topic_name+0x4c>
 8008d6c:	f8df e084 	ldr.w	lr, [pc, #132]	@ 8008df4 <rmw_validate_full_topic_name+0x108>
 8008d70:	2300      	movs	r3, #0
 8008d72:	f107 0801 	add.w	r8, r7, #1
 8008d76:	e005      	b.n	8008d84 <rmw_validate_full_topic_name+0x98>
 8008d78:	4611      	mov	r1, r2
 8008d7a:	4288      	cmp	r0, r1
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	f104 0401 	add.w	r4, r4, #1
 8008d82:	d925      	bls.n	8008dd0 <rmw_validate_full_topic_name+0xe4>
 8008d84:	429f      	cmp	r7, r3
 8008d86:	f103 0201 	add.w	r2, r3, #1
 8008d8a:	d01e      	beq.n	8008dca <rmw_validate_full_topic_name+0xde>
 8008d8c:	7821      	ldrb	r1, [r4, #0]
 8008d8e:	292f      	cmp	r1, #47	@ 0x2f
 8008d90:	d1f2      	bne.n	8008d78 <rmw_validate_full_topic_name+0x8c>
 8008d92:	f894 c001 	ldrb.w	ip, [r4, #1]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	d024      	beq.n	8008dea <rmw_validate_full_topic_name+0xfe>
 8008da0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8008da4:	075b      	lsls	r3, r3, #29
 8008da6:	d5e8      	bpl.n	8008d7a <rmw_validate_full_topic_name+0x8e>
 8008da8:	2306      	movs	r3, #6
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	d0b7      	beq.n	8008d20 <rmw_validate_full_topic_name+0x34>
 8008db0:	6032      	str	r2, [r6, #0]
 8008db2:	2000      	movs	r0, #0
 8008db4:	e7ae      	b.n	8008d14 <rmw_validate_full_topic_name+0x28>
 8008db6:	200b      	movs	r0, #11
 8008db8:	4770      	bx	lr
 8008dba:	200b      	movs	r0, #11
 8008dbc:	e7aa      	b.n	8008d14 <rmw_validate_full_topic_name+0x28>
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	d0ac      	beq.n	8008d20 <rmw_validate_full_topic_name+0x34>
 8008dc6:	6037      	str	r7, [r6, #0]
 8008dc8:	e7aa      	b.n	8008d20 <rmw_validate_full_topic_name+0x34>
 8008dca:	4641      	mov	r1, r8
 8008dcc:	1c7a      	adds	r2, r7, #1
 8008dce:	e7d4      	b.n	8008d7a <rmw_validate_full_topic_name+0x8e>
 8008dd0:	28f7      	cmp	r0, #247	@ 0xf7
 8008dd2:	d802      	bhi.n	8008dda <rmw_validate_full_topic_name+0xee>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	6028      	str	r0, [r5, #0]
 8008dd8:	e79c      	b.n	8008d14 <rmw_validate_full_topic_name+0x28>
 8008dda:	2307      	movs	r3, #7
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	2e00      	cmp	r6, #0
 8008de0:	d09e      	beq.n	8008d20 <rmw_validate_full_topic_name+0x34>
 8008de2:	23f6      	movs	r3, #246	@ 0xf6
 8008de4:	6033      	str	r3, [r6, #0]
 8008de6:	2000      	movs	r0, #0
 8008de8:	e794      	b.n	8008d14 <rmw_validate_full_topic_name+0x28>
 8008dea:	2305      	movs	r3, #5
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	d1de      	bne.n	8008db0 <rmw_validate_full_topic_name+0xc4>
 8008df2:	e795      	b.n	8008d20 <rmw_validate_full_topic_name+0x34>
 8008df4:	08013120 	.word	0x08013120

08008df8 <rmw_uros_set_custom_transport>:
 8008df8:	b470      	push	{r4, r5, r6}
 8008dfa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8008dfe:	b162      	cbz	r2, 8008e1a <rmw_uros_set_custom_transport+0x22>
 8008e00:	b15b      	cbz	r3, 8008e1a <rmw_uros_set_custom_transport+0x22>
 8008e02:	b155      	cbz	r5, 8008e1a <rmw_uros_set_custom_transport+0x22>
 8008e04:	b14e      	cbz	r6, 8008e1a <rmw_uros_set_custom_transport+0x22>
 8008e06:	4c06      	ldr	r4, [pc, #24]	@ (8008e20 <rmw_uros_set_custom_transport+0x28>)
 8008e08:	7020      	strb	r0, [r4, #0]
 8008e0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008e0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008e12:	6166      	str	r6, [r4, #20]
 8008e14:	2000      	movs	r0, #0
 8008e16:	bc70      	pop	{r4, r5, r6}
 8008e18:	4770      	bx	lr
 8008e1a:	200b      	movs	r0, #11
 8008e1c:	bc70      	pop	{r4, r5, r6}
 8008e1e:	4770      	bx	lr
 8008e20:	20009470 	.word	0x20009470

08008e24 <flush_session>:
 8008e24:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8008e26:	f002 bb63 	b.w	800b4f0 <uxr_run_session_until_confirm_delivery>
 8008e2a:	bf00      	nop

08008e2c <rmw_publish>:
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d053      	beq.n	8008ed8 <rmw_publish+0xac>
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	460d      	mov	r5, r1
 8008e34:	b08e      	sub	sp, #56	@ 0x38
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d04b      	beq.n	8008ed2 <rmw_publish+0xa6>
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	6800      	ldr	r0, [r0, #0]
 8008e3e:	f000 fc05 	bl	800964c <is_uxrce_rmw_identifier_valid>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d045      	beq.n	8008ed2 <rmw_publish+0xa6>
 8008e46:	6866      	ldr	r6, [r4, #4]
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	d042      	beq.n	8008ed2 <rmw_publish+0xa6>
 8008e4c:	69b4      	ldr	r4, [r6, #24]
 8008e4e:	4628      	mov	r0, r5
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	4798      	blx	r3
 8008e54:	69f3      	ldr	r3, [r6, #28]
 8008e56:	9005      	str	r0, [sp, #20]
 8008e58:	b113      	cbz	r3, 8008e60 <rmw_publish+0x34>
 8008e5a:	a805      	add	r0, sp, #20
 8008e5c:	4798      	blx	r3
 8008e5e:	9805      	ldr	r0, [sp, #20]
 8008e60:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	9000      	str	r0, [sp, #0]
 8008e68:	6972      	ldr	r2, [r6, #20]
 8008e6a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8008e6c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8008e70:	ab06      	add	r3, sp, #24
 8008e72:	f003 f945 	bl	800c100 <uxr_prepare_output_stream>
 8008e76:	b1d8      	cbz	r0, 8008eb0 <rmw_publish+0x84>
 8008e78:	68a3      	ldr	r3, [r4, #8]
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	a906      	add	r1, sp, #24
 8008e7e:	4798      	blx	r3
 8008e80:	6a33      	ldr	r3, [r6, #32]
 8008e82:	4604      	mov	r4, r0
 8008e84:	b10b      	cbz	r3, 8008e8a <rmw_publish+0x5e>
 8008e86:	a806      	add	r0, sp, #24
 8008e88:	4798      	blx	r3
 8008e8a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008e94:	d022      	beq.n	8008edc <rmw_publish+0xb0>
 8008e96:	6918      	ldr	r0, [r3, #16]
 8008e98:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8008e9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008e9e:	f002 fb27 	bl	800b4f0 <uxr_run_session_until_confirm_delivery>
 8008ea2:	4020      	ands	r0, r4
 8008ea4:	b2c4      	uxtb	r4, r0
 8008ea6:	f084 0001 	eor.w	r0, r4, #1
 8008eaa:	b2c0      	uxtb	r0, r0
 8008eac:	b00e      	add	sp, #56	@ 0x38
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8008eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <rmw_publish+0xbc>)
 8008eb6:	6918      	ldr	r0, [r3, #16]
 8008eb8:	9b05      	ldr	r3, [sp, #20]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8008ec0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008ec4:	6972      	ldr	r2, [r6, #20]
 8008ec6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8008ec8:	ab06      	add	r3, sp, #24
 8008eca:	f003 f949 	bl	800c160 <uxr_prepare_output_stream_fragmented>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d1d2      	bne.n	8008e78 <rmw_publish+0x4c>
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	b00e      	add	sp, #56	@ 0x38
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	2001      	movs	r0, #1
 8008eda:	4770      	bx	lr
 8008edc:	6918      	ldr	r0, [r3, #16]
 8008ede:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008ee2:	f001 ff83 	bl	800adec <uxr_flash_output_streams>
 8008ee6:	e7de      	b.n	8008ea6 <rmw_publish+0x7a>
 8008ee8:	08008e25 	.word	0x08008e25

08008eec <rmw_create_publisher>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	b087      	sub	sp, #28
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f000 80c9 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008ef8:	460e      	mov	r6, r1
 8008efa:	2900      	cmp	r1, #0
 8008efc:	f000 80c5 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008f00:	4604      	mov	r4, r0
 8008f02:	6800      	ldr	r0, [r0, #0]
 8008f04:	4615      	mov	r5, r2
 8008f06:	4698      	mov	r8, r3
 8008f08:	f000 fba0 	bl	800964c <is_uxrce_rmw_identifier_valid>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f000 80bc 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	f000 80b9 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008f18:	782b      	ldrb	r3, [r5, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 80b5 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008f20:	f1b8 0f00 	cmp.w	r8, #0
 8008f24:	f000 80b1 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008f28:	485a      	ldr	r0, [pc, #360]	@ (8009094 <rmw_create_publisher+0x1a8>)
 8008f2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008f2e:	f005 fd19 	bl	800e964 <get_memory>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f000 80a9 	beq.w	800908a <rmw_create_publisher+0x19e>
 8008f38:	68c4      	ldr	r4, [r0, #12]
 8008f3a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8008f3e:	f005 fd35 	bl	800e9ac <rmw_get_implementation_identifier>
 8008f42:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8008f46:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8008f4a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f7f7 f950 	bl	80001f4 <strlen>
 8008f54:	3001      	adds	r0, #1
 8008f56:	283c      	cmp	r0, #60	@ 0x3c
 8008f58:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8008f5c:	f200 808e 	bhi.w	800907c <rmw_create_publisher+0x190>
 8008f60:	4a4d      	ldr	r2, [pc, #308]	@ (8009098 <rmw_create_publisher+0x1ac>)
 8008f62:	462b      	mov	r3, r5
 8008f64:	213c      	movs	r1, #60	@ 0x3c
 8008f66:	4650      	mov	r0, sl
 8008f68:	f008 fbf4 	bl	8011754 <sniprintf>
 8008f6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f70:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 8008f74:	4641      	mov	r1, r8
 8008f76:	2250      	movs	r2, #80	@ 0x50
 8008f78:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008f7c:	f008 fd63 	bl	8011a46 <memcpy>
 8008f80:	f898 3008 	ldrb.w	r3, [r8, #8]
 8008f84:	4945      	ldr	r1, [pc, #276]	@ (800909c <rmw_create_publisher+0x1b0>)
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f8c:	bf0c      	ite	eq
 8008f8e:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8008f92:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8008f96:	67a3      	str	r3, [r4, #120]	@ 0x78
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 fb62 	bl	8009668 <get_message_typesupport_handle>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d069      	beq.n	800907c <rmw_create_publisher+0x190>
 8008fa8:	6842      	ldr	r2, [r0, #4]
 8008faa:	61a2      	str	r2, [r4, #24]
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	d065      	beq.n	800907c <rmw_create_publisher+0x190>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4643      	mov	r3, r8
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f005 ff43 	bl	800ee40 <create_topic>
 8008fba:	6260      	str	r0, [r4, #36]	@ 0x24
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d061      	beq.n	8009084 <rmw_create_publisher+0x198>
 8008fc0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008fc4:	f241 5398 	movw	r3, #5528	@ 0x1598
 8008fc8:	2103      	movs	r1, #3
 8008fca:	5ad0      	ldrh	r0, [r2, r3]
 8008fcc:	1c45      	adds	r5, r0, #1
 8008fce:	52d5      	strh	r5, [r2, r3]
 8008fd0:	f001 fdc0 	bl	800ab54 <uxr_object_id>
 8008fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fd8:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008fdc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8008fe0:	6912      	ldr	r2, [r2, #16]
 8008fe2:	6120      	str	r0, [r4, #16]
 8008fe4:	f04f 0a06 	mov.w	sl, #6
 8008fe8:	f8cd a000 	str.w	sl, [sp]
 8008fec:	6819      	ldr	r1, [r3, #0]
 8008fee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008ff2:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 8008ff6:	6922      	ldr	r2, [r4, #16]
 8008ff8:	f001 fd06 	bl	800aa08 <uxr_buffer_create_publisher_bin>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009002:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009006:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800900a:	f000 fa9f 	bl	800954c <run_xrce_session>
 800900e:	b3a8      	cbz	r0, 800907c <rmw_create_publisher+0x190>
 8009010:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009014:	f241 539a 	movw	r3, #5530	@ 0x159a
 8009018:	2105      	movs	r1, #5
 800901a:	5ad0      	ldrh	r0, [r2, r3]
 800901c:	1c45      	adds	r5, r0, #1
 800901e:	52d5      	strh	r5, [r2, r3]
 8009020:	f001 fd98 	bl	800ab54 <uxr_object_id>
 8009024:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009028:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800902c:	6915      	ldr	r5, [r2, #16]
 800902e:	6160      	str	r0, [r4, #20]
 8009030:	ae04      	add	r6, sp, #16
 8009032:	4641      	mov	r1, r8
 8009034:	4630      	mov	r0, r6
 8009036:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800903a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800903e:	f000 faa1 	bl	8009584 <convert_qos_profile>
 8009042:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009046:	f8cd a00c 	str.w	sl, [sp, #12]
 800904a:	9001      	str	r0, [sp, #4]
 800904c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009050:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800905a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800905e:	f8d8 1000 	ldr.w	r1, [r8]
 8009062:	4628      	mov	r0, r5
 8009064:	f001 fcfe 	bl	800aa64 <uxr_buffer_create_datawriter_bin>
 8009068:	4602      	mov	r2, r0
 800906a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800906e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009072:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009076:	f000 fa69 	bl	800954c <run_xrce_session>
 800907a:	b938      	cbnz	r0, 800908c <rmw_create_publisher+0x1a0>
 800907c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800907e:	b108      	cbz	r0, 8009084 <rmw_create_publisher+0x198>
 8009080:	f000 fa0c 	bl	800949c <rmw_uxrce_fini_topic_memory>
 8009084:	4638      	mov	r0, r7
 8009086:	f000 f9b1 	bl	80093ec <rmw_uxrce_fini_publisher_memory>
 800908a:	2700      	movs	r7, #0
 800908c:	4638      	mov	r0, r7
 800908e:	b007      	add	sp, #28
 8009090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009094:	200094a0 	.word	0x200094a0
 8009098:	080129bc 	.word	0x080129bc
 800909c:	08012988 	.word	0x08012988

080090a0 <rmw_publisher_get_actual_qos>:
 80090a0:	b150      	cbz	r0, 80090b8 <rmw_publisher_get_actual_qos+0x18>
 80090a2:	b149      	cbz	r1, 80090b8 <rmw_publisher_get_actual_qos+0x18>
 80090a4:	b508      	push	{r3, lr}
 80090a6:	6843      	ldr	r3, [r0, #4]
 80090a8:	2250      	movs	r2, #80	@ 0x50
 80090aa:	4608      	mov	r0, r1
 80090ac:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80090b0:	f008 fcc9 	bl	8011a46 <memcpy>
 80090b4:	2000      	movs	r0, #0
 80090b6:	bd08      	pop	{r3, pc}
 80090b8:	200b      	movs	r0, #11
 80090ba:	4770      	bx	lr

080090bc <rmw_destroy_publisher>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	b128      	cbz	r0, 80090cc <rmw_destroy_publisher+0x10>
 80090c0:	4604      	mov	r4, r0
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	460d      	mov	r5, r1
 80090c6:	f000 fac1 	bl	800964c <is_uxrce_rmw_identifier_valid>
 80090ca:	b910      	cbnz	r0, 80090d2 <rmw_destroy_publisher+0x16>
 80090cc:	2401      	movs	r4, #1
 80090ce:	4620      	mov	r0, r4
 80090d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d2:	6863      	ldr	r3, [r4, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0f9      	beq.n	80090cc <rmw_destroy_publisher+0x10>
 80090d8:	2d00      	cmp	r5, #0
 80090da:	d0f7      	beq.n	80090cc <rmw_destroy_publisher+0x10>
 80090dc:	6828      	ldr	r0, [r5, #0]
 80090de:	f000 fab5 	bl	800964c <is_uxrce_rmw_identifier_valid>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d0f2      	beq.n	80090cc <rmw_destroy_publisher+0x10>
 80090e6:	686c      	ldr	r4, [r5, #4]
 80090e8:	2c00      	cmp	r4, #0
 80090ea:	d0ef      	beq.n	80090cc <rmw_destroy_publisher+0x10>
 80090ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80090ee:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80090f2:	f005 fef5 	bl	800eee0 <destroy_topic>
 80090f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80090fa:	6962      	ldr	r2, [r4, #20]
 80090fc:	6918      	ldr	r0, [r3, #16]
 80090fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009102:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	f001 fbcc 	bl	800a8a4 <uxr_buffer_delete_entity>
 800910c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	4603      	mov	r3, r0
 8009114:	6908      	ldr	r0, [r1, #16]
 8009116:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800911a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800911e:	6809      	ldr	r1, [r1, #0]
 8009120:	461c      	mov	r4, r3
 8009122:	f001 fbbf 	bl	800a8a4 <uxr_buffer_delete_entity>
 8009126:	4606      	mov	r6, r0
 8009128:	6938      	ldr	r0, [r7, #16]
 800912a:	4622      	mov	r2, r4
 800912c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009130:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009134:	f000 fa0a 	bl	800954c <run_xrce_session>
 8009138:	4604      	mov	r4, r0
 800913a:	6938      	ldr	r0, [r7, #16]
 800913c:	4632      	mov	r2, r6
 800913e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009142:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009146:	f000 fa01 	bl	800954c <run_xrce_session>
 800914a:	b12c      	cbz	r4, 8009158 <rmw_destroy_publisher+0x9c>
 800914c:	b120      	cbz	r0, 8009158 <rmw_destroy_publisher+0x9c>
 800914e:	2400      	movs	r4, #0
 8009150:	4628      	mov	r0, r5
 8009152:	f000 f94b 	bl	80093ec <rmw_uxrce_fini_publisher_memory>
 8009156:	e7ba      	b.n	80090ce <rmw_destroy_publisher+0x12>
 8009158:	2402      	movs	r4, #2
 800915a:	e7f9      	b.n	8009150 <rmw_destroy_publisher+0x94>

0800915c <rmw_uxrce_init_service_memory>:
 800915c:	b1b2      	cbz	r2, 800918c <rmw_uxrce_init_service_memory+0x30>
 800915e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009160:	7a07      	ldrb	r7, [r0, #8]
 8009162:	4605      	mov	r5, r0
 8009164:	b98f      	cbnz	r7, 800918a <rmw_uxrce_init_service_memory+0x2e>
 8009166:	e9c0 7700 	strd	r7, r7, [r0]
 800916a:	460c      	mov	r4, r1
 800916c:	23c8      	movs	r3, #200	@ 0xc8
 800916e:	2101      	movs	r1, #1
 8009170:	fb03 4602 	mla	r6, r3, r2, r4
 8009174:	60c3      	str	r3, [r0, #12]
 8009176:	7201      	strb	r1, [r0, #8]
 8009178:	4621      	mov	r1, r4
 800917a:	4628      	mov	r0, r5
 800917c:	f005 fc02 	bl	800e984 <put_memory>
 8009180:	60e4      	str	r4, [r4, #12]
 8009182:	f804 7bc8 	strb.w	r7, [r4], #200
 8009186:	42a6      	cmp	r6, r4
 8009188:	d1f6      	bne.n	8009178 <rmw_uxrce_init_service_memory+0x1c>
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop

08009190 <rmw_uxrce_init_client_memory>:
 8009190:	b1b2      	cbz	r2, 80091c0 <rmw_uxrce_init_client_memory+0x30>
 8009192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009194:	7a07      	ldrb	r7, [r0, #8]
 8009196:	4605      	mov	r5, r0
 8009198:	b98f      	cbnz	r7, 80091be <rmw_uxrce_init_client_memory+0x2e>
 800919a:	e9c0 7700 	strd	r7, r7, [r0]
 800919e:	460c      	mov	r4, r1
 80091a0:	23c8      	movs	r3, #200	@ 0xc8
 80091a2:	2101      	movs	r1, #1
 80091a4:	fb03 4602 	mla	r6, r3, r2, r4
 80091a8:	60c3      	str	r3, [r0, #12]
 80091aa:	7201      	strb	r1, [r0, #8]
 80091ac:	4621      	mov	r1, r4
 80091ae:	4628      	mov	r0, r5
 80091b0:	f005 fbe8 	bl	800e984 <put_memory>
 80091b4:	60e4      	str	r4, [r4, #12]
 80091b6:	f804 7bc8 	strb.w	r7, [r4], #200
 80091ba:	42a6      	cmp	r6, r4
 80091bc:	d1f6      	bne.n	80091ac <rmw_uxrce_init_client_memory+0x1c>
 80091be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop

080091c4 <rmw_uxrce_init_publisher_memory>:
 80091c4:	b1b2      	cbz	r2, 80091f4 <rmw_uxrce_init_publisher_memory+0x30>
 80091c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c8:	7a07      	ldrb	r7, [r0, #8]
 80091ca:	4605      	mov	r5, r0
 80091cc:	b98f      	cbnz	r7, 80091f2 <rmw_uxrce_init_publisher_memory+0x2e>
 80091ce:	e9c0 7700 	strd	r7, r7, [r0]
 80091d2:	460c      	mov	r4, r1
 80091d4:	23d8      	movs	r3, #216	@ 0xd8
 80091d6:	2101      	movs	r1, #1
 80091d8:	fb03 4602 	mla	r6, r3, r2, r4
 80091dc:	60c3      	str	r3, [r0, #12]
 80091de:	7201      	strb	r1, [r0, #8]
 80091e0:	4621      	mov	r1, r4
 80091e2:	4628      	mov	r0, r5
 80091e4:	f005 fbce 	bl	800e984 <put_memory>
 80091e8:	60e4      	str	r4, [r4, #12]
 80091ea:	f804 7bd8 	strb.w	r7, [r4], #216
 80091ee:	42a6      	cmp	r6, r4
 80091f0:	d1f6      	bne.n	80091e0 <rmw_uxrce_init_publisher_memory+0x1c>
 80091f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop

080091f8 <rmw_uxrce_init_subscription_memory>:
 80091f8:	b1b2      	cbz	r2, 8009228 <rmw_uxrce_init_subscription_memory+0x30>
 80091fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fc:	7a07      	ldrb	r7, [r0, #8]
 80091fe:	4605      	mov	r5, r0
 8009200:	b98f      	cbnz	r7, 8009226 <rmw_uxrce_init_subscription_memory+0x2e>
 8009202:	e9c0 7700 	strd	r7, r7, [r0]
 8009206:	460c      	mov	r4, r1
 8009208:	23d0      	movs	r3, #208	@ 0xd0
 800920a:	2101      	movs	r1, #1
 800920c:	fb03 4602 	mla	r6, r3, r2, r4
 8009210:	60c3      	str	r3, [r0, #12]
 8009212:	7201      	strb	r1, [r0, #8]
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f005 fbb4 	bl	800e984 <put_memory>
 800921c:	60e4      	str	r4, [r4, #12]
 800921e:	f804 7bd0 	strb.w	r7, [r4], #208
 8009222:	42a6      	cmp	r6, r4
 8009224:	d1f6      	bne.n	8009214 <rmw_uxrce_init_subscription_memory+0x1c>
 8009226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <rmw_uxrce_init_node_memory>:
 800922c:	b1b2      	cbz	r2, 800925c <rmw_uxrce_init_node_memory+0x30>
 800922e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009230:	7a07      	ldrb	r7, [r0, #8]
 8009232:	4605      	mov	r5, r0
 8009234:	b98f      	cbnz	r7, 800925a <rmw_uxrce_init_node_memory+0x2e>
 8009236:	e9c0 7700 	strd	r7, r7, [r0]
 800923a:	460c      	mov	r4, r1
 800923c:	23a4      	movs	r3, #164	@ 0xa4
 800923e:	2101      	movs	r1, #1
 8009240:	fb03 4602 	mla	r6, r3, r2, r4
 8009244:	60c3      	str	r3, [r0, #12]
 8009246:	7201      	strb	r1, [r0, #8]
 8009248:	4621      	mov	r1, r4
 800924a:	4628      	mov	r0, r5
 800924c:	f005 fb9a 	bl	800e984 <put_memory>
 8009250:	60e4      	str	r4, [r4, #12]
 8009252:	f804 7ba4 	strb.w	r7, [r4], #164
 8009256:	42a6      	cmp	r6, r4
 8009258:	d1f6      	bne.n	8009248 <rmw_uxrce_init_node_memory+0x1c>
 800925a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop

08009260 <rmw_uxrce_init_session_memory>:
 8009260:	b1d2      	cbz	r2, 8009298 <rmw_uxrce_init_session_memory+0x38>
 8009262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009266:	7a07      	ldrb	r7, [r0, #8]
 8009268:	4605      	mov	r5, r0
 800926a:	b99f      	cbnz	r7, 8009294 <rmw_uxrce_init_session_memory+0x34>
 800926c:	e9c0 7700 	strd	r7, r7, [r0]
 8009270:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 8009274:	460c      	mov	r4, r1
 8009276:	2101      	movs	r1, #1
 8009278:	fb03 4602 	mla	r6, r3, r2, r4
 800927c:	60c3      	str	r3, [r0, #12]
 800927e:	4698      	mov	r8, r3
 8009280:	7201      	strb	r1, [r0, #8]
 8009282:	4621      	mov	r1, r4
 8009284:	4628      	mov	r0, r5
 8009286:	f005 fb7d 	bl	800e984 <put_memory>
 800928a:	60e4      	str	r4, [r4, #12]
 800928c:	7027      	strb	r7, [r4, #0]
 800928e:	4444      	add	r4, r8
 8009290:	42a6      	cmp	r6, r4
 8009292:	d1f6      	bne.n	8009282 <rmw_uxrce_init_session_memory+0x22>
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop

0800929c <rmw_uxrce_init_topic_memory>:
 800929c:	b1c2      	cbz	r2, 80092d0 <rmw_uxrce_init_topic_memory+0x34>
 800929e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a0:	7a07      	ldrb	r7, [r0, #8]
 80092a2:	4606      	mov	r6, r0
 80092a4:	b99f      	cbnz	r7, 80092ce <rmw_uxrce_init_topic_memory+0x32>
 80092a6:	e9c0 7700 	strd	r7, r7, [r0]
 80092aa:	460c      	mov	r4, r1
 80092ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80092b0:	2101      	movs	r1, #1
 80092b2:	231c      	movs	r3, #28
 80092b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092b8:	7201      	strb	r1, [r0, #8]
 80092ba:	60c3      	str	r3, [r0, #12]
 80092bc:	4621      	mov	r1, r4
 80092be:	4630      	mov	r0, r6
 80092c0:	f005 fb60 	bl	800e984 <put_memory>
 80092c4:	60e4      	str	r4, [r4, #12]
 80092c6:	f804 7b1c 	strb.w	r7, [r4], #28
 80092ca:	42a5      	cmp	r5, r4
 80092cc:	d1f6      	bne.n	80092bc <rmw_uxrce_init_topic_memory+0x20>
 80092ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop

080092d4 <rmw_uxrce_init_static_input_buffer_memory>:
 80092d4:	b1d2      	cbz	r2, 800930c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 80092d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d8:	7a07      	ldrb	r7, [r0, #8]
 80092da:	4606      	mov	r6, r0
 80092dc:	b9af      	cbnz	r7, 800930a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 80092de:	e9c0 7700 	strd	r7, r7, [r0]
 80092e2:	460c      	mov	r4, r1
 80092e4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80092e8:	2101      	movs	r1, #1
 80092ea:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80092ee:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80092f2:	7201      	strb	r1, [r0, #8]
 80092f4:	60c3      	str	r3, [r0, #12]
 80092f6:	4621      	mov	r1, r4
 80092f8:	4630      	mov	r0, r6
 80092fa:	f005 fb43 	bl	800e984 <put_memory>
 80092fe:	60e4      	str	r4, [r4, #12]
 8009300:	7027      	strb	r7, [r4, #0]
 8009302:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8009306:	42a5      	cmp	r5, r4
 8009308:	d1f5      	bne.n	80092f6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <rmw_uxrce_init_init_options_impl_memory>:
 8009310:	b1b2      	cbz	r2, 8009340 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8009312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009314:	7a07      	ldrb	r7, [r0, #8]
 8009316:	4605      	mov	r5, r0
 8009318:	b98f      	cbnz	r7, 800933e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800931a:	e9c0 7700 	strd	r7, r7, [r0]
 800931e:	460c      	mov	r4, r1
 8009320:	232c      	movs	r3, #44	@ 0x2c
 8009322:	2101      	movs	r1, #1
 8009324:	fb03 4602 	mla	r6, r3, r2, r4
 8009328:	60c3      	str	r3, [r0, #12]
 800932a:	7201      	strb	r1, [r0, #8]
 800932c:	4621      	mov	r1, r4
 800932e:	4628      	mov	r0, r5
 8009330:	f005 fb28 	bl	800e984 <put_memory>
 8009334:	60e4      	str	r4, [r4, #12]
 8009336:	f804 7b2c 	strb.w	r7, [r4], #44
 800933a:	42a6      	cmp	r6, r4
 800933c:	d1f6      	bne.n	800932c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <rmw_uxrce_init_wait_set_memory>:
 8009344:	b1c2      	cbz	r2, 8009378 <rmw_uxrce_init_wait_set_memory+0x34>
 8009346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009348:	7a07      	ldrb	r7, [r0, #8]
 800934a:	4606      	mov	r6, r0
 800934c:	b99f      	cbnz	r7, 8009376 <rmw_uxrce_init_wait_set_memory+0x32>
 800934e:	e9c0 7700 	strd	r7, r7, [r0]
 8009352:	460c      	mov	r4, r1
 8009354:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009358:	2101      	movs	r1, #1
 800935a:	231c      	movs	r3, #28
 800935c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009360:	7201      	strb	r1, [r0, #8]
 8009362:	60c3      	str	r3, [r0, #12]
 8009364:	4621      	mov	r1, r4
 8009366:	4630      	mov	r0, r6
 8009368:	f005 fb0c 	bl	800e984 <put_memory>
 800936c:	60e4      	str	r4, [r4, #12]
 800936e:	f804 7b1c 	strb.w	r7, [r4], #28
 8009372:	42a5      	cmp	r5, r4
 8009374:	d1f6      	bne.n	8009364 <rmw_uxrce_init_wait_set_memory+0x20>
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop

0800937c <rmw_uxrce_init_guard_condition_memory>:
 800937c:	b1b2      	cbz	r2, 80093ac <rmw_uxrce_init_guard_condition_memory+0x30>
 800937e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009380:	7a07      	ldrb	r7, [r0, #8]
 8009382:	4605      	mov	r5, r0
 8009384:	b98f      	cbnz	r7, 80093aa <rmw_uxrce_init_guard_condition_memory+0x2e>
 8009386:	e9c0 7700 	strd	r7, r7, [r0]
 800938a:	460c      	mov	r4, r1
 800938c:	2320      	movs	r3, #32
 800938e:	2101      	movs	r1, #1
 8009390:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8009394:	7201      	strb	r1, [r0, #8]
 8009396:	60c3      	str	r3, [r0, #12]
 8009398:	4621      	mov	r1, r4
 800939a:	4628      	mov	r0, r5
 800939c:	f005 faf2 	bl	800e984 <put_memory>
 80093a0:	60e4      	str	r4, [r4, #12]
 80093a2:	f804 7b20 	strb.w	r7, [r4], #32
 80093a6:	42a6      	cmp	r6, r4
 80093a8:	d1f6      	bne.n	8009398 <rmw_uxrce_init_guard_condition_memory+0x1c>
 80093aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop

080093b0 <rmw_uxrce_fini_session_memory>:
 80093b0:	4601      	mov	r1, r0
 80093b2:	4801      	ldr	r0, [pc, #4]	@ (80093b8 <rmw_uxrce_fini_session_memory+0x8>)
 80093b4:	f005 bae6 	b.w	800e984 <put_memory>
 80093b8:	2000c638 	.word	0x2000c638

080093bc <rmw_uxrce_fini_node_memory>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4604      	mov	r4, r0
 80093c0:	6800      	ldr	r0, [r0, #0]
 80093c2:	b128      	cbz	r0, 80093d0 <rmw_uxrce_fini_node_memory+0x14>
 80093c4:	4b07      	ldr	r3, [pc, #28]	@ (80093e4 <rmw_uxrce_fini_node_memory+0x28>)
 80093c6:	6819      	ldr	r1, [r3, #0]
 80093c8:	f7f6 ff0a 	bl	80001e0 <strcmp>
 80093cc:	b940      	cbnz	r0, 80093e0 <rmw_uxrce_fini_node_memory+0x24>
 80093ce:	6020      	str	r0, [r4, #0]
 80093d0:	6861      	ldr	r1, [r4, #4]
 80093d2:	b129      	cbz	r1, 80093e0 <rmw_uxrce_fini_node_memory+0x24>
 80093d4:	2500      	movs	r5, #0
 80093d6:	4804      	ldr	r0, [pc, #16]	@ (80093e8 <rmw_uxrce_fini_node_memory+0x2c>)
 80093d8:	610d      	str	r5, [r1, #16]
 80093da:	f005 fad3 	bl	800e984 <put_memory>
 80093de:	6065      	str	r5, [r4, #4]
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	08012e94 	.word	0x08012e94
 80093e8:	2000c464 	.word	0x2000c464

080093ec <rmw_uxrce_fini_publisher_memory>:
 80093ec:	b510      	push	{r4, lr}
 80093ee:	4604      	mov	r4, r0
 80093f0:	6800      	ldr	r0, [r0, #0]
 80093f2:	b128      	cbz	r0, 8009400 <rmw_uxrce_fini_publisher_memory+0x14>
 80093f4:	4b06      	ldr	r3, [pc, #24]	@ (8009410 <rmw_uxrce_fini_publisher_memory+0x24>)
 80093f6:	6819      	ldr	r1, [r3, #0]
 80093f8:	f7f6 fef2 	bl	80001e0 <strcmp>
 80093fc:	b938      	cbnz	r0, 800940e <rmw_uxrce_fini_publisher_memory+0x22>
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	6861      	ldr	r1, [r4, #4]
 8009402:	b121      	cbz	r1, 800940e <rmw_uxrce_fini_publisher_memory+0x22>
 8009404:	4803      	ldr	r0, [pc, #12]	@ (8009414 <rmw_uxrce_fini_publisher_memory+0x28>)
 8009406:	f005 fabd 	bl	800e984 <put_memory>
 800940a:	2300      	movs	r3, #0
 800940c:	6063      	str	r3, [r4, #4]
 800940e:	bd10      	pop	{r4, pc}
 8009410:	08012e94 	.word	0x08012e94
 8009414:	200094a0 	.word	0x200094a0

08009418 <rmw_uxrce_fini_subscription_memory>:
 8009418:	b510      	push	{r4, lr}
 800941a:	4604      	mov	r4, r0
 800941c:	6800      	ldr	r0, [r0, #0]
 800941e:	b128      	cbz	r0, 800942c <rmw_uxrce_fini_subscription_memory+0x14>
 8009420:	4b06      	ldr	r3, [pc, #24]	@ (800943c <rmw_uxrce_fini_subscription_memory+0x24>)
 8009422:	6819      	ldr	r1, [r3, #0]
 8009424:	f7f6 fedc 	bl	80001e0 <strcmp>
 8009428:	b938      	cbnz	r0, 800943a <rmw_uxrce_fini_subscription_memory+0x22>
 800942a:	6020      	str	r0, [r4, #0]
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	b121      	cbz	r1, 800943a <rmw_uxrce_fini_subscription_memory+0x22>
 8009430:	4803      	ldr	r0, [pc, #12]	@ (8009440 <rmw_uxrce_fini_subscription_memory+0x28>)
 8009432:	f005 faa7 	bl	800e984 <put_memory>
 8009436:	2300      	movs	r3, #0
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	bd10      	pop	{r4, pc}
 800943c:	08012e94 	.word	0x08012e94
 8009440:	2000c6fc 	.word	0x2000c6fc

08009444 <rmw_uxrce_fini_service_memory>:
 8009444:	b510      	push	{r4, lr}
 8009446:	4604      	mov	r4, r0
 8009448:	6800      	ldr	r0, [r0, #0]
 800944a:	b128      	cbz	r0, 8009458 <rmw_uxrce_fini_service_memory+0x14>
 800944c:	4b06      	ldr	r3, [pc, #24]	@ (8009468 <rmw_uxrce_fini_service_memory+0x24>)
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	f7f6 fec6 	bl	80001e0 <strcmp>
 8009454:	b938      	cbnz	r0, 8009466 <rmw_uxrce_fini_service_memory+0x22>
 8009456:	6020      	str	r0, [r4, #0]
 8009458:	6861      	ldr	r1, [r4, #4]
 800945a:	b121      	cbz	r1, 8009466 <rmw_uxrce_fini_service_memory+0x22>
 800945c:	4803      	ldr	r0, [pc, #12]	@ (800946c <rmw_uxrce_fini_service_memory+0x28>)
 800945e:	f005 fa91 	bl	800e984 <put_memory>
 8009462:	2300      	movs	r3, #0
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	bd10      	pop	{r4, pc}
 8009468:	08012e94 	.word	0x08012e94
 800946c:	2000c6ec 	.word	0x2000c6ec

08009470 <rmw_uxrce_fini_client_memory>:
 8009470:	b510      	push	{r4, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	6800      	ldr	r0, [r0, #0]
 8009476:	b128      	cbz	r0, 8009484 <rmw_uxrce_fini_client_memory+0x14>
 8009478:	4b06      	ldr	r3, [pc, #24]	@ (8009494 <rmw_uxrce_fini_client_memory+0x24>)
 800947a:	6819      	ldr	r1, [r3, #0]
 800947c:	f7f6 feb0 	bl	80001e0 <strcmp>
 8009480:	b938      	cbnz	r0, 8009492 <rmw_uxrce_fini_client_memory+0x22>
 8009482:	6020      	str	r0, [r4, #0]
 8009484:	6861      	ldr	r1, [r4, #4]
 8009486:	b121      	cbz	r1, 8009492 <rmw_uxrce_fini_client_memory+0x22>
 8009488:	4803      	ldr	r0, [pc, #12]	@ (8009498 <rmw_uxrce_fini_client_memory+0x28>)
 800948a:	f005 fa7b 	bl	800e984 <put_memory>
 800948e:	2300      	movs	r3, #0
 8009490:	6063      	str	r3, [r4, #4]
 8009492:	bd10      	pop	{r4, pc}
 8009494:	08012e94 	.word	0x08012e94
 8009498:	20009d20 	.word	0x20009d20

0800949c <rmw_uxrce_fini_topic_memory>:
 800949c:	b510      	push	{r4, lr}
 800949e:	4601      	mov	r1, r0
 80094a0:	4604      	mov	r4, r0
 80094a2:	4803      	ldr	r0, [pc, #12]	@ (80094b0 <rmw_uxrce_fini_topic_memory+0x14>)
 80094a4:	f005 fa6e 	bl	800e984 <put_memory>
 80094a8:	2300      	movs	r3, #0
 80094aa:	61a3      	str	r3, [r4, #24]
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	bf00      	nop
 80094b0:	2000c628 	.word	0x2000c628

080094b4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80094b4:	b082      	sub	sp, #8
 80094b6:	b4f0      	push	{r4, r5, r6, r7}
 80094b8:	4923      	ldr	r1, [pc, #140]	@ (8009548 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80094ba:	ac04      	add	r4, sp, #16
 80094bc:	e884 000c 	stmia.w	r4, {r2, r3}
 80094c0:	680d      	ldr	r5, [r1, #0]
 80094c2:	9c05      	ldr	r4, [sp, #20]
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	d03d      	beq.n	8009544 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 80094c8:	462b      	mov	r3, r5
 80094ca:	2100      	movs	r1, #0
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80094d4:	4290      	cmp	r0, r2
 80094d6:	bf08      	it	eq
 80094d8:	3101      	addeq	r1, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f6      	bne.n	80094cc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80094de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d026      	beq.n	8009534 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 80094e6:	d906      	bls.n	80094f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d004      	beq.n	80094f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80094ec:	2100      	movs	r1, #0
 80094ee:	bcf0      	pop	{r4, r5, r6, r7}
 80094f0:	4608      	mov	r0, r1
 80094f2:	b002      	add	sp, #8
 80094f4:	4770      	bx	lr
 80094f6:	b304      	cbz	r4, 800953a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80094f8:	428c      	cmp	r4, r1
 80094fa:	d81e      	bhi.n	800953a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	d0f5      	beq.n	80094ec <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009500:	2100      	movs	r1, #0
 8009502:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009506:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800950a:	e002      	b.n	8009512 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800950c:	68ad      	ldr	r5, [r5, #8]
 800950e:	2d00      	cmp	r5, #0
 8009510:	d0ed      	beq.n	80094ee <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8009512:	68eb      	ldr	r3, [r5, #12]
 8009514:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8009518:	4290      	cmp	r0, r2
 800951a:	d1f7      	bne.n	800950c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800951c:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	42b2      	cmp	r2, r6
 8009526:	eb73 0407 	sbcs.w	r4, r3, r7
 800952a:	daef      	bge.n	800950c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800952c:	4616      	mov	r6, r2
 800952e:	461f      	mov	r7, r3
 8009530:	4629      	mov	r1, r5
 8009532:	e7eb      	b.n	800950c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8009534:	b10c      	cbz	r4, 800953a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8009536:	428c      	cmp	r4, r1
 8009538:	d9d8      	bls.n	80094ec <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800953a:	bcf0      	pop	{r4, r5, r6, r7}
 800953c:	4802      	ldr	r0, [pc, #8]	@ (8009548 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800953e:	b002      	add	sp, #8
 8009540:	f005 ba10 	b.w	800e964 <get_memory>
 8009544:	4629      	mov	r1, r5
 8009546:	e7ca      	b.n	80094de <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8009548:	20009490 	.word	0x20009490

0800954c <run_xrce_session>:
 800954c:	b510      	push	{r4, lr}
 800954e:	788c      	ldrb	r4, [r1, #2]
 8009550:	b086      	sub	sp, #24
 8009552:	2c01      	cmp	r4, #1
 8009554:	f8ad 200e 	strh.w	r2, [sp, #14]
 8009558:	d00c      	beq.n	8009574 <run_xrce_session+0x28>
 800955a:	4619      	mov	r1, r3
 800955c:	2301      	movs	r3, #1
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	f10d 020e 	add.w	r2, sp, #14
 8009564:	f10d 0317 	add.w	r3, sp, #23
 8009568:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800956c:	f001 ffe6 	bl	800b53c <uxr_run_session_until_all_status>
 8009570:	b006      	add	sp, #24
 8009572:	bd10      	pop	{r4, pc}
 8009574:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009578:	f001 fc38 	bl	800adec <uxr_flash_output_streams>
 800957c:	4620      	mov	r0, r4
 800957e:	b006      	add	sp, #24
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop

08009584 <convert_qos_profile>:
 8009584:	b430      	push	{r4, r5}
 8009586:	7a0d      	ldrb	r5, [r1, #8]
 8009588:	780c      	ldrb	r4, [r1, #0]
 800958a:	7a4a      	ldrb	r2, [r1, #9]
 800958c:	8889      	ldrh	r1, [r1, #4]
 800958e:	8081      	strh	r1, [r0, #4]
 8009590:	f1a5 0502 	sub.w	r5, r5, #2
 8009594:	f1a4 0402 	sub.w	r4, r4, #2
 8009598:	2a02      	cmp	r2, #2
 800959a:	fab5 f585 	clz	r5, r5
 800959e:	fab4 f484 	clz	r4, r4
 80095a2:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80095a6:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80095aa:	bf18      	it	ne
 80095ac:	2200      	movne	r2, #0
 80095ae:	7045      	strb	r5, [r0, #1]
 80095b0:	7084      	strb	r4, [r0, #2]
 80095b2:	7002      	strb	r2, [r0, #0]
 80095b4:	bc30      	pop	{r4, r5}
 80095b6:	4770      	bx	lr

080095b8 <generate_type_name>:
 80095b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ba:	2300      	movs	r3, #0
 80095bc:	700b      	strb	r3, [r1, #0]
 80095be:	6803      	ldr	r3, [r0, #0]
 80095c0:	b087      	sub	sp, #28
 80095c2:	4614      	mov	r4, r2
 80095c4:	b1d3      	cbz	r3, 80095fc <generate_type_name+0x44>
 80095c6:	4d0f      	ldr	r5, [pc, #60]	@ (8009604 <generate_type_name+0x4c>)
 80095c8:	462f      	mov	r7, r5
 80095ca:	4a0f      	ldr	r2, [pc, #60]	@ (8009608 <generate_type_name+0x50>)
 80095cc:	4e0f      	ldr	r6, [pc, #60]	@ (800960c <generate_type_name+0x54>)
 80095ce:	6840      	ldr	r0, [r0, #4]
 80095d0:	9004      	str	r0, [sp, #16]
 80095d2:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80095d6:	4608      	mov	r0, r1
 80095d8:	9205      	str	r2, [sp, #20]
 80095da:	9503      	str	r5, [sp, #12]
 80095dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009610 <generate_type_name+0x58>)
 80095de:	9700      	str	r7, [sp, #0]
 80095e0:	4621      	mov	r1, r4
 80095e2:	f008 f8b7 	bl	8011754 <sniprintf>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	db05      	blt.n	80095f6 <generate_type_name+0x3e>
 80095ea:	4284      	cmp	r4, r0
 80095ec:	bfd4      	ite	le
 80095ee:	2000      	movle	r0, #0
 80095f0:	2001      	movgt	r0, #1
 80095f2:	b007      	add	sp, #28
 80095f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f6:	2000      	movs	r0, #0
 80095f8:	b007      	add	sp, #28
 80095fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fc:	4b05      	ldr	r3, [pc, #20]	@ (8009614 <generate_type_name+0x5c>)
 80095fe:	4d01      	ldr	r5, [pc, #4]	@ (8009604 <generate_type_name+0x4c>)
 8009600:	461f      	mov	r7, r3
 8009602:	e7e2      	b.n	80095ca <generate_type_name+0x12>
 8009604:	080129ac 	.word	0x080129ac
 8009608:	080129c0 	.word	0x080129c0
 800960c:	080129c4 	.word	0x080129c4
 8009610:	080129b0 	.word	0x080129b0
 8009614:	08012c6c 	.word	0x08012c6c

08009618 <generate_topic_name>:
 8009618:	b510      	push	{r4, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	4b09      	ldr	r3, [pc, #36]	@ (8009644 <generate_topic_name+0x2c>)
 800961e:	9000      	str	r0, [sp, #0]
 8009620:	4614      	mov	r4, r2
 8009622:	4608      	mov	r0, r1
 8009624:	4611      	mov	r1, r2
 8009626:	4a08      	ldr	r2, [pc, #32]	@ (8009648 <generate_topic_name+0x30>)
 8009628:	f008 f894 	bl	8011754 <sniprintf>
 800962c:	2800      	cmp	r0, #0
 800962e:	db05      	blt.n	800963c <generate_topic_name+0x24>
 8009630:	4284      	cmp	r4, r0
 8009632:	bfd4      	ite	le
 8009634:	2000      	movle	r0, #0
 8009636:	2001      	movgt	r0, #1
 8009638:	b002      	add	sp, #8
 800963a:	bd10      	pop	{r4, pc}
 800963c:	2000      	movs	r0, #0
 800963e:	b002      	add	sp, #8
 8009640:	bd10      	pop	{r4, pc}
 8009642:	bf00      	nop
 8009644:	080129d0 	.word	0x080129d0
 8009648:	080129c8 	.word	0x080129c8

0800964c <is_uxrce_rmw_identifier_valid>:
 800964c:	b510      	push	{r4, lr}
 800964e:	4604      	mov	r4, r0
 8009650:	b140      	cbz	r0, 8009664 <is_uxrce_rmw_identifier_valid+0x18>
 8009652:	f005 f9ab 	bl	800e9ac <rmw_get_implementation_identifier>
 8009656:	4601      	mov	r1, r0
 8009658:	4620      	mov	r0, r4
 800965a:	f7f6 fdc1 	bl	80001e0 <strcmp>
 800965e:	fab0 f080 	clz	r0, r0
 8009662:	0940      	lsrs	r0, r0, #5
 8009664:	bd10      	pop	{r4, pc}
 8009666:	bf00      	nop

08009668 <get_message_typesupport_handle>:
 8009668:	6883      	ldr	r3, [r0, #8]
 800966a:	4718      	bx	r3

0800966c <get_message_typesupport_handle_function>:
 800966c:	b510      	push	{r4, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	6800      	ldr	r0, [r0, #0]
 8009672:	f7f6 fdb5 	bl	80001e0 <strcmp>
 8009676:	2800      	cmp	r0, #0
 8009678:	bf0c      	ite	eq
 800967a:	4620      	moveq	r0, r4
 800967c:	2000      	movne	r0, #0
 800967e:	bd10      	pop	{r4, pc}

08009680 <rosidl_typesupport_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 8009680:	f000 b8c2 	b.w	8009808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>

08009684 <get_serialized_size_rover_msgs__msg__EncoderMsg.part.0>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	2104      	movs	r1, #4
 8009688:	4604      	mov	r4, r0
 800968a:	f001 f89f 	bl	800a7cc <ucdr_alignment>
 800968e:	1d25      	adds	r5, r4, #4
 8009690:	4405      	add	r5, r0
 8009692:	4628      	mov	r0, r5
 8009694:	2104      	movs	r1, #4
 8009696:	f001 f899 	bl	800a7cc <ucdr_alignment>
 800969a:	1d06      	adds	r6, r0, #4
 800969c:	442e      	add	r6, r5
 800969e:	4630      	mov	r0, r6
 80096a0:	2104      	movs	r1, #4
 80096a2:	f001 f893 	bl	800a7cc <ucdr_alignment>
 80096a6:	1d05      	adds	r5, r0, #4
 80096a8:	442e      	add	r6, r5
 80096aa:	4630      	mov	r0, r6
 80096ac:	2104      	movs	r1, #4
 80096ae:	f001 f88d 	bl	800a7cc <ucdr_alignment>
 80096b2:	3004      	adds	r0, #4
 80096b4:	4406      	add	r6, r0
 80096b6:	4630      	mov	r0, r6
 80096b8:	2104      	movs	r1, #4
 80096ba:	f001 f887 	bl	800a7cc <ucdr_alignment>
 80096be:	1d05      	adds	r5, r0, #4
 80096c0:	4435      	add	r5, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	2104      	movs	r1, #4
 80096c6:	f001 f881 	bl	800a7cc <ucdr_alignment>
 80096ca:	3004      	adds	r0, #4
 80096cc:	4405      	add	r5, r0
 80096ce:	4628      	mov	r0, r5
 80096d0:	2104      	movs	r1, #4
 80096d2:	f001 f87b 	bl	800a7cc <ucdr_alignment>
 80096d6:	f1c4 0404 	rsb	r4, r4, #4
 80096da:	4420      	add	r0, r4
 80096dc:	4428      	add	r0, r5
 80096de:	bd70      	pop	{r4, r5, r6, pc}

080096e0 <get_serialized_size_rover_msgs__msg__EncoderMsg>:
 80096e0:	b110      	cbz	r0, 80096e8 <get_serialized_size_rover_msgs__msg__EncoderMsg+0x8>
 80096e2:	4608      	mov	r0, r1
 80096e4:	f7ff bfce 	b.w	8009684 <get_serialized_size_rover_msgs__msg__EncoderMsg.part.0>
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop

080096ec <_EncoderMsg__get_serialized_size>:
 80096ec:	b110      	cbz	r0, 80096f4 <_EncoderMsg__get_serialized_size+0x8>
 80096ee:	2000      	movs	r0, #0
 80096f0:	f7ff bfc8 	b.w	8009684 <get_serialized_size_rover_msgs__msg__EncoderMsg.part.0>
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop

080096f8 <_EncoderMsg__cdr_deserialize>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	460c      	mov	r4, r1
 80096fc:	b309      	cbz	r1, 8009742 <_EncoderMsg__cdr_deserialize+0x4a>
 80096fe:	4605      	mov	r5, r0
 8009700:	f000 ff7e 	bl	800a600 <ucdr_deserialize_int32_t>
 8009704:	1d21      	adds	r1, r4, #4
 8009706:	4628      	mov	r0, r5
 8009708:	f000 ff7a 	bl	800a600 <ucdr_deserialize_int32_t>
 800970c:	f104 0108 	add.w	r1, r4, #8
 8009710:	4628      	mov	r0, r5
 8009712:	f000 ff75 	bl	800a600 <ucdr_deserialize_int32_t>
 8009716:	f104 010c 	add.w	r1, r4, #12
 800971a:	4628      	mov	r0, r5
 800971c:	f000 ff70 	bl	800a600 <ucdr_deserialize_int32_t>
 8009720:	f104 0110 	add.w	r1, r4, #16
 8009724:	4628      	mov	r0, r5
 8009726:	f000 ff6b 	bl	800a600 <ucdr_deserialize_int32_t>
 800972a:	f104 0114 	add.w	r1, r4, #20
 800972e:	4628      	mov	r0, r5
 8009730:	f000 ff66 	bl	800a600 <ucdr_deserialize_int32_t>
 8009734:	f104 0118 	add.w	r1, r4, #24
 8009738:	4628      	mov	r0, r5
 800973a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800973e:	f000 bf5f 	b.w	800a600 <ucdr_deserialize_int32_t>
 8009742:	4608      	mov	r0, r1
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	bf00      	nop

08009748 <_EncoderMsg__cdr_serialize>:
 8009748:	b300      	cbz	r0, 800978c <_EncoderMsg__cdr_serialize+0x44>
 800974a:	b538      	push	{r3, r4, r5, lr}
 800974c:	460d      	mov	r5, r1
 800974e:	4604      	mov	r4, r0
 8009750:	6801      	ldr	r1, [r0, #0]
 8009752:	4628      	mov	r0, r5
 8009754:	f000 febc 	bl	800a4d0 <ucdr_serialize_int32_t>
 8009758:	6861      	ldr	r1, [r4, #4]
 800975a:	4628      	mov	r0, r5
 800975c:	f000 feb8 	bl	800a4d0 <ucdr_serialize_int32_t>
 8009760:	68a1      	ldr	r1, [r4, #8]
 8009762:	4628      	mov	r0, r5
 8009764:	f000 feb4 	bl	800a4d0 <ucdr_serialize_int32_t>
 8009768:	68e1      	ldr	r1, [r4, #12]
 800976a:	4628      	mov	r0, r5
 800976c:	f000 feb0 	bl	800a4d0 <ucdr_serialize_int32_t>
 8009770:	6921      	ldr	r1, [r4, #16]
 8009772:	4628      	mov	r0, r5
 8009774:	f000 feac 	bl	800a4d0 <ucdr_serialize_int32_t>
 8009778:	6961      	ldr	r1, [r4, #20]
 800977a:	4628      	mov	r0, r5
 800977c:	f000 fea8 	bl	800a4d0 <ucdr_serialize_int32_t>
 8009780:	69a1      	ldr	r1, [r4, #24]
 8009782:	4628      	mov	r0, r5
 8009784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009788:	f000 bea2 	b.w	800a4d0 <ucdr_serialize_int32_t>
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop

08009790 <max_serialized_size_rover_msgs__msg__EncoderMsg>:
 8009790:	2301      	movs	r3, #1
 8009792:	b570      	push	{r4, r5, r6, lr}
 8009794:	7003      	strb	r3, [r0, #0]
 8009796:	460c      	mov	r4, r1
 8009798:	4608      	mov	r0, r1
 800979a:	2104      	movs	r1, #4
 800979c:	f001 f816 	bl	800a7cc <ucdr_alignment>
 80097a0:	1d25      	adds	r5, r4, #4
 80097a2:	4405      	add	r5, r0
 80097a4:	4628      	mov	r0, r5
 80097a6:	2104      	movs	r1, #4
 80097a8:	f001 f810 	bl	800a7cc <ucdr_alignment>
 80097ac:	1d06      	adds	r6, r0, #4
 80097ae:	442e      	add	r6, r5
 80097b0:	4630      	mov	r0, r6
 80097b2:	2104      	movs	r1, #4
 80097b4:	f001 f80a 	bl	800a7cc <ucdr_alignment>
 80097b8:	1d05      	adds	r5, r0, #4
 80097ba:	442e      	add	r6, r5
 80097bc:	4630      	mov	r0, r6
 80097be:	2104      	movs	r1, #4
 80097c0:	f001 f804 	bl	800a7cc <ucdr_alignment>
 80097c4:	3004      	adds	r0, #4
 80097c6:	4406      	add	r6, r0
 80097c8:	4630      	mov	r0, r6
 80097ca:	2104      	movs	r1, #4
 80097cc:	f000 fffe 	bl	800a7cc <ucdr_alignment>
 80097d0:	1d05      	adds	r5, r0, #4
 80097d2:	4435      	add	r5, r6
 80097d4:	4628      	mov	r0, r5
 80097d6:	2104      	movs	r1, #4
 80097d8:	f000 fff8 	bl	800a7cc <ucdr_alignment>
 80097dc:	3004      	adds	r0, #4
 80097de:	4405      	add	r5, r0
 80097e0:	4628      	mov	r0, r5
 80097e2:	2104      	movs	r1, #4
 80097e4:	f000 fff2 	bl	800a7cc <ucdr_alignment>
 80097e8:	f1c4 0404 	rsb	r4, r4, #4
 80097ec:	4420      	add	r0, r4
 80097ee:	4428      	add	r0, r5
 80097f0:	bd70      	pop	{r4, r5, r6, pc}
 80097f2:	bf00      	nop

080097f4 <_EncoderMsg__max_serialized_size>:
 80097f4:	b500      	push	{lr}
 80097f6:	b083      	sub	sp, #12
 80097f8:	2100      	movs	r1, #0
 80097fa:	f10d 0007 	add.w	r0, sp, #7
 80097fe:	f7ff ffc7 	bl	8009790 <max_serialized_size_rover_msgs__msg__EncoderMsg>
 8009802:	b003      	add	sp, #12
 8009804:	f85d fb04 	ldr.w	pc, [sp], #4

08009808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg>:
 8009808:	4800      	ldr	r0, [pc, #0]	@ (800980c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rover_msgs__msg__EncoderMsg+0x4>)
 800980a:	4770      	bx	lr
 800980c:	2000002c 	.word	0x2000002c

08009810 <ucdr_serialize_bool>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	460d      	mov	r5, r1
 8009814:	2101      	movs	r1, #1
 8009816:	4604      	mov	r4, r0
 8009818:	f000 ff8e 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800981c:	b148      	cbz	r0, 8009832 <ucdr_serialize_bool+0x22>
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	701d      	strb	r5, [r3, #0]
 8009822:	68a2      	ldr	r2, [r4, #8]
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	3201      	adds	r2, #1
 8009828:	3301      	adds	r3, #1
 800982a:	2101      	movs	r1, #1
 800982c:	60a2      	str	r2, [r4, #8]
 800982e:	6123      	str	r3, [r4, #16]
 8009830:	7561      	strb	r1, [r4, #21]
 8009832:	7da0      	ldrb	r0, [r4, #22]
 8009834:	f080 0001 	eor.w	r0, r0, #1
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	bf00      	nop

0800983c <ucdr_deserialize_bool>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	460d      	mov	r5, r1
 8009840:	2101      	movs	r1, #1
 8009842:	4604      	mov	r4, r0
 8009844:	f000 ff78 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009848:	b168      	cbz	r0, 8009866 <ucdr_deserialize_bool+0x2a>
 800984a:	68a2      	ldr	r2, [r4, #8]
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009852:	3900      	subs	r1, #0
 8009854:	f103 0301 	add.w	r3, r3, #1
 8009858:	bf18      	it	ne
 800985a:	2101      	movne	r1, #1
 800985c:	2001      	movs	r0, #1
 800985e:	7029      	strb	r1, [r5, #0]
 8009860:	60a2      	str	r2, [r4, #8]
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	7560      	strb	r0, [r4, #21]
 8009866:	7da0      	ldrb	r0, [r4, #22]
 8009868:	f080 0001 	eor.w	r0, r0, #1
 800986c:	bd38      	pop	{r3, r4, r5, pc}
 800986e:	bf00      	nop

08009870 <ucdr_serialize_uint8_t>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	460d      	mov	r5, r1
 8009874:	2101      	movs	r1, #1
 8009876:	4604      	mov	r4, r0
 8009878:	f000 ff5e 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800987c:	b148      	cbz	r0, 8009892 <ucdr_serialize_uint8_t+0x22>
 800987e:	68a3      	ldr	r3, [r4, #8]
 8009880:	701d      	strb	r5, [r3, #0]
 8009882:	68a2      	ldr	r2, [r4, #8]
 8009884:	6923      	ldr	r3, [r4, #16]
 8009886:	3201      	adds	r2, #1
 8009888:	3301      	adds	r3, #1
 800988a:	2101      	movs	r1, #1
 800988c:	60a2      	str	r2, [r4, #8]
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	7561      	strb	r1, [r4, #21]
 8009892:	7da0      	ldrb	r0, [r4, #22]
 8009894:	f080 0001 	eor.w	r0, r0, #1
 8009898:	bd38      	pop	{r3, r4, r5, pc}
 800989a:	bf00      	nop

0800989c <ucdr_deserialize_uint8_t>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	460d      	mov	r5, r1
 80098a0:	2101      	movs	r1, #1
 80098a2:	4604      	mov	r4, r0
 80098a4:	f000 ff48 	bl	800a738 <ucdr_check_final_buffer_behavior>
 80098a8:	b150      	cbz	r0, 80098c0 <ucdr_deserialize_uint8_t+0x24>
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	702b      	strb	r3, [r5, #0]
 80098b0:	68a2      	ldr	r2, [r4, #8]
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	3201      	adds	r2, #1
 80098b6:	3301      	adds	r3, #1
 80098b8:	2101      	movs	r1, #1
 80098ba:	60a2      	str	r2, [r4, #8]
 80098bc:	6123      	str	r3, [r4, #16]
 80098be:	7561      	strb	r1, [r4, #21]
 80098c0:	7da0      	ldrb	r0, [r4, #22]
 80098c2:	f080 0001 	eor.w	r0, r0, #1
 80098c6:	bd38      	pop	{r3, r4, r5, pc}

080098c8 <ucdr_serialize_uint16_t>:
 80098c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	460b      	mov	r3, r1
 80098d0:	2102      	movs	r1, #2
 80098d2:	4604      	mov	r4, r0
 80098d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80098d8:	f000 ff80 	bl	800a7dc <ucdr_buffer_alignment>
 80098dc:	4601      	mov	r1, r0
 80098de:	4620      	mov	r0, r4
 80098e0:	7d67      	ldrb	r7, [r4, #21]
 80098e2:	f000 ffbf 	bl	800a864 <ucdr_advance_buffer>
 80098e6:	4620      	mov	r0, r4
 80098e8:	2102      	movs	r1, #2
 80098ea:	f000 ff19 	bl	800a720 <ucdr_check_buffer_available_for>
 80098ee:	bb78      	cbnz	r0, 8009950 <ucdr_serialize_uint16_t+0x88>
 80098f0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80098f4:	42b5      	cmp	r5, r6
 80098f6:	d926      	bls.n	8009946 <ucdr_serialize_uint16_t+0x7e>
 80098f8:	6922      	ldr	r2, [r4, #16]
 80098fa:	60a5      	str	r5, [r4, #8]
 80098fc:	1bad      	subs	r5, r5, r6
 80098fe:	442a      	add	r2, r5
 8009900:	f1c5 0802 	rsb	r8, r5, #2
 8009904:	6122      	str	r2, [r4, #16]
 8009906:	4641      	mov	r1, r8
 8009908:	4620      	mov	r0, r4
 800990a:	f000 ff15 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800990e:	2800      	cmp	r0, #0
 8009910:	d03b      	beq.n	800998a <ucdr_serialize_uint16_t+0xc2>
 8009912:	7d23      	ldrb	r3, [r4, #20]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d04a      	beq.n	80099ae <ucdr_serialize_uint16_t+0xe6>
 8009918:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800991c:	7033      	strb	r3, [r6, #0]
 800991e:	2d00      	cmp	r5, #0
 8009920:	d040      	beq.n	80099a4 <ucdr_serialize_uint16_t+0xdc>
 8009922:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009926:	7073      	strb	r3, [r6, #1]
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	68a2      	ldr	r2, [r4, #8]
 800992c:	7da0      	ldrb	r0, [r4, #22]
 800992e:	3302      	adds	r3, #2
 8009930:	1b5b      	subs	r3, r3, r5
 8009932:	4442      	add	r2, r8
 8009934:	2102      	movs	r1, #2
 8009936:	f080 0001 	eor.w	r0, r0, #1
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	60a2      	str	r2, [r4, #8]
 800993e:	7561      	strb	r1, [r4, #21]
 8009940:	b002      	add	sp, #8
 8009942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009946:	2102      	movs	r1, #2
 8009948:	4620      	mov	r0, r4
 800994a:	f000 fef5 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800994e:	b190      	cbz	r0, 8009976 <ucdr_serialize_uint16_t+0xae>
 8009950:	7d23      	ldrb	r3, [r4, #20]
 8009952:	2b01      	cmp	r3, #1
 8009954:	68a3      	ldr	r3, [r4, #8]
 8009956:	d014      	beq.n	8009982 <ucdr_serialize_uint16_t+0xba>
 8009958:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009964:	705a      	strb	r2, [r3, #1]
 8009966:	68a2      	ldr	r2, [r4, #8]
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	3202      	adds	r2, #2
 800996c:	3302      	adds	r3, #2
 800996e:	2102      	movs	r1, #2
 8009970:	60a2      	str	r2, [r4, #8]
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	7561      	strb	r1, [r4, #21]
 8009976:	7da0      	ldrb	r0, [r4, #22]
 8009978:	f080 0001 	eor.w	r0, r0, #1
 800997c:	b002      	add	sp, #8
 800997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009982:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009986:	801a      	strh	r2, [r3, #0]
 8009988:	e7ed      	b.n	8009966 <ucdr_serialize_uint16_t+0x9e>
 800998a:	68a2      	ldr	r2, [r4, #8]
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	7da0      	ldrb	r0, [r4, #22]
 8009990:	7567      	strb	r7, [r4, #21]
 8009992:	1b52      	subs	r2, r2, r5
 8009994:	1b5b      	subs	r3, r3, r5
 8009996:	f080 0001 	eor.w	r0, r0, #1
 800999a:	60a2      	str	r2, [r4, #8]
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	b002      	add	sp, #8
 80099a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	e7bc      	b.n	8009928 <ucdr_serialize_uint16_t+0x60>
 80099ae:	4630      	mov	r0, r6
 80099b0:	f10d 0606 	add.w	r6, sp, #6
 80099b4:	4631      	mov	r1, r6
 80099b6:	462a      	mov	r2, r5
 80099b8:	f008 f845 	bl	8011a46 <memcpy>
 80099bc:	68a0      	ldr	r0, [r4, #8]
 80099be:	4642      	mov	r2, r8
 80099c0:	1971      	adds	r1, r6, r5
 80099c2:	f008 f840 	bl	8011a46 <memcpy>
 80099c6:	e7af      	b.n	8009928 <ucdr_serialize_uint16_t+0x60>

080099c8 <ucdr_serialize_endian_uint16_t>:
 80099c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099cc:	b083      	sub	sp, #12
 80099ce:	460d      	mov	r5, r1
 80099d0:	2102      	movs	r1, #2
 80099d2:	4604      	mov	r4, r0
 80099d4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80099d8:	f000 ff00 	bl	800a7dc <ucdr_buffer_alignment>
 80099dc:	4601      	mov	r1, r0
 80099de:	4620      	mov	r0, r4
 80099e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80099e4:	f000 ff3e 	bl	800a864 <ucdr_advance_buffer>
 80099e8:	4620      	mov	r0, r4
 80099ea:	2102      	movs	r1, #2
 80099ec:	f000 fe98 	bl	800a720 <ucdr_check_buffer_available_for>
 80099f0:	bb70      	cbnz	r0, 8009a50 <ucdr_serialize_endian_uint16_t+0x88>
 80099f2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80099f6:	42be      	cmp	r6, r7
 80099f8:	d925      	bls.n	8009a46 <ucdr_serialize_endian_uint16_t+0x7e>
 80099fa:	6922      	ldr	r2, [r4, #16]
 80099fc:	60a6      	str	r6, [r4, #8]
 80099fe:	1bf6      	subs	r6, r6, r7
 8009a00:	4432      	add	r2, r6
 8009a02:	f1c6 0902 	rsb	r9, r6, #2
 8009a06:	6122      	str	r2, [r4, #16]
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 fe94 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d039      	beq.n	8009a88 <ucdr_serialize_endian_uint16_t+0xc0>
 8009a14:	2d01      	cmp	r5, #1
 8009a16:	d04a      	beq.n	8009aae <ucdr_serialize_endian_uint16_t+0xe6>
 8009a18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a1c:	703b      	strb	r3, [r7, #0]
 8009a1e:	2e00      	cmp	r6, #0
 8009a20:	d040      	beq.n	8009aa4 <ucdr_serialize_endian_uint16_t+0xdc>
 8009a22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009a26:	707b      	strb	r3, [r7, #1]
 8009a28:	6923      	ldr	r3, [r4, #16]
 8009a2a:	68a2      	ldr	r2, [r4, #8]
 8009a2c:	7da0      	ldrb	r0, [r4, #22]
 8009a2e:	3302      	adds	r3, #2
 8009a30:	1b9b      	subs	r3, r3, r6
 8009a32:	444a      	add	r2, r9
 8009a34:	2102      	movs	r1, #2
 8009a36:	f080 0001 	eor.w	r0, r0, #1
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	60a2      	str	r2, [r4, #8]
 8009a3e:	7561      	strb	r1, [r4, #21]
 8009a40:	b003      	add	sp, #12
 8009a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a46:	2102      	movs	r1, #2
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fe75 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009a4e:	b188      	cbz	r0, 8009a74 <ucdr_serialize_endian_uint16_t+0xac>
 8009a50:	2d01      	cmp	r5, #1
 8009a52:	68a3      	ldr	r3, [r4, #8]
 8009a54:	d014      	beq.n	8009a80 <ucdr_serialize_endian_uint16_t+0xb8>
 8009a56:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	68a3      	ldr	r3, [r4, #8]
 8009a5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a62:	705a      	strb	r2, [r3, #1]
 8009a64:	68a2      	ldr	r2, [r4, #8]
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	3202      	adds	r2, #2
 8009a6a:	3302      	adds	r3, #2
 8009a6c:	2102      	movs	r1, #2
 8009a6e:	60a2      	str	r2, [r4, #8]
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	7561      	strb	r1, [r4, #21]
 8009a74:	7da0      	ldrb	r0, [r4, #22]
 8009a76:	f080 0001 	eor.w	r0, r0, #1
 8009a7a:	b003      	add	sp, #12
 8009a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	e7ed      	b.n	8009a64 <ucdr_serialize_endian_uint16_t+0x9c>
 8009a88:	68a2      	ldr	r2, [r4, #8]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	7da0      	ldrb	r0, [r4, #22]
 8009a8e:	f884 8015 	strb.w	r8, [r4, #21]
 8009a92:	1b92      	subs	r2, r2, r6
 8009a94:	1b9b      	subs	r3, r3, r6
 8009a96:	f080 0001 	eor.w	r0, r0, #1
 8009a9a:	60a2      	str	r2, [r4, #8]
 8009a9c:	6123      	str	r3, [r4, #16]
 8009a9e:	b003      	add	sp, #12
 8009aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aa4:	68a3      	ldr	r3, [r4, #8]
 8009aa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	e7bc      	b.n	8009a28 <ucdr_serialize_endian_uint16_t+0x60>
 8009aae:	f10d 0506 	add.w	r5, sp, #6
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f007 ffc5 	bl	8011a46 <memcpy>
 8009abc:	68a0      	ldr	r0, [r4, #8]
 8009abe:	464a      	mov	r2, r9
 8009ac0:	19a9      	adds	r1, r5, r6
 8009ac2:	f007 ffc0 	bl	8011a46 <memcpy>
 8009ac6:	e7af      	b.n	8009a28 <ucdr_serialize_endian_uint16_t+0x60>

08009ac8 <ucdr_deserialize_uint16_t>:
 8009ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009acc:	460d      	mov	r5, r1
 8009ace:	2102      	movs	r1, #2
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	f000 fe83 	bl	800a7dc <ucdr_buffer_alignment>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009ade:	f000 fec1 	bl	800a864 <ucdr_advance_buffer>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	f000 fe1b 	bl	800a720 <ucdr_check_buffer_available_for>
 8009aea:	bb60      	cbnz	r0, 8009b46 <ucdr_deserialize_uint16_t+0x7e>
 8009aec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009af0:	42be      	cmp	r6, r7
 8009af2:	d923      	bls.n	8009b3c <ucdr_deserialize_uint16_t+0x74>
 8009af4:	6922      	ldr	r2, [r4, #16]
 8009af6:	60a6      	str	r6, [r4, #8]
 8009af8:	1bf6      	subs	r6, r6, r7
 8009afa:	4432      	add	r2, r6
 8009afc:	f1c6 0902 	rsb	r9, r6, #2
 8009b00:	6122      	str	r2, [r4, #16]
 8009b02:	4649      	mov	r1, r9
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fe17 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d034      	beq.n	8009b78 <ucdr_deserialize_uint16_t+0xb0>
 8009b0e:	7d23      	ldrb	r3, [r4, #20]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d042      	beq.n	8009b9a <ucdr_deserialize_uint16_t+0xd2>
 8009b14:	787b      	ldrb	r3, [r7, #1]
 8009b16:	702b      	strb	r3, [r5, #0]
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	d03a      	beq.n	8009b92 <ucdr_deserialize_uint16_t+0xca>
 8009b1c:	783b      	ldrb	r3, [r7, #0]
 8009b1e:	706b      	strb	r3, [r5, #1]
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	68a2      	ldr	r2, [r4, #8]
 8009b24:	7da0      	ldrb	r0, [r4, #22]
 8009b26:	2102      	movs	r1, #2
 8009b28:	3302      	adds	r3, #2
 8009b2a:	1b9b      	subs	r3, r3, r6
 8009b2c:	444a      	add	r2, r9
 8009b2e:	7561      	strb	r1, [r4, #21]
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	60a2      	str	r2, [r4, #8]
 8009b34:	f080 0001 	eor.w	r0, r0, #1
 8009b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3c:	2102      	movs	r1, #2
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 fdfa 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009b44:	b180      	cbz	r0, 8009b68 <ucdr_deserialize_uint16_t+0xa0>
 8009b46:	7d23      	ldrb	r3, [r4, #20]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	d011      	beq.n	8009b72 <ucdr_deserialize_uint16_t+0xaa>
 8009b4e:	785b      	ldrb	r3, [r3, #1]
 8009b50:	702b      	strb	r3, [r5, #0]
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	706b      	strb	r3, [r5, #1]
 8009b58:	68a2      	ldr	r2, [r4, #8]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	3202      	adds	r2, #2
 8009b5e:	3302      	adds	r3, #2
 8009b60:	2102      	movs	r1, #2
 8009b62:	60a2      	str	r2, [r4, #8]
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	7561      	strb	r1, [r4, #21]
 8009b68:	7da0      	ldrb	r0, [r4, #22]
 8009b6a:	f080 0001 	eor.w	r0, r0, #1
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	802b      	strh	r3, [r5, #0]
 8009b76:	e7ef      	b.n	8009b58 <ucdr_deserialize_uint16_t+0x90>
 8009b78:	68a2      	ldr	r2, [r4, #8]
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	7da0      	ldrb	r0, [r4, #22]
 8009b7e:	f884 8015 	strb.w	r8, [r4, #21]
 8009b82:	1b92      	subs	r2, r2, r6
 8009b84:	1b9b      	subs	r3, r3, r6
 8009b86:	60a2      	str	r2, [r4, #8]
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	f080 0001 	eor.w	r0, r0, #1
 8009b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	706b      	strb	r3, [r5, #1]
 8009b98:	e7c2      	b.n	8009b20 <ucdr_deserialize_uint16_t+0x58>
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f007 ff51 	bl	8011a46 <memcpy>
 8009ba4:	68a1      	ldr	r1, [r4, #8]
 8009ba6:	464a      	mov	r2, r9
 8009ba8:	19a8      	adds	r0, r5, r6
 8009baa:	f007 ff4c 	bl	8011a46 <memcpy>
 8009bae:	e7b7      	b.n	8009b20 <ucdr_deserialize_uint16_t+0x58>

08009bb0 <ucdr_deserialize_endian_uint16_t>:
 8009bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	2102      	movs	r1, #2
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4615      	mov	r5, r2
 8009bbc:	f000 fe0e 	bl	800a7dc <ucdr_buffer_alignment>
 8009bc0:	4601      	mov	r1, r0
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009bc8:	f000 fe4c 	bl	800a864 <ucdr_advance_buffer>
 8009bcc:	4620      	mov	r0, r4
 8009bce:	2102      	movs	r1, #2
 8009bd0:	f000 fda6 	bl	800a720 <ucdr_check_buffer_available_for>
 8009bd4:	bb70      	cbnz	r0, 8009c34 <ucdr_deserialize_endian_uint16_t+0x84>
 8009bd6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8009bda:	4547      	cmp	r7, r8
 8009bdc:	d925      	bls.n	8009c2a <ucdr_deserialize_endian_uint16_t+0x7a>
 8009bde:	6922      	ldr	r2, [r4, #16]
 8009be0:	60a7      	str	r7, [r4, #8]
 8009be2:	eba7 0708 	sub.w	r7, r7, r8
 8009be6:	443a      	add	r2, r7
 8009be8:	f1c7 0a02 	rsb	sl, r7, #2
 8009bec:	6122      	str	r2, [r4, #16]
 8009bee:	4651      	mov	r1, sl
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fda1 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d034      	beq.n	8009c64 <ucdr_deserialize_endian_uint16_t+0xb4>
 8009bfa:	2e01      	cmp	r6, #1
 8009bfc:	d043      	beq.n	8009c86 <ucdr_deserialize_endian_uint16_t+0xd6>
 8009bfe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009c02:	702b      	strb	r3, [r5, #0]
 8009c04:	2f00      	cmp	r7, #0
 8009c06:	d03a      	beq.n	8009c7e <ucdr_deserialize_endian_uint16_t+0xce>
 8009c08:	f898 3000 	ldrb.w	r3, [r8]
 8009c0c:	706b      	strb	r3, [r5, #1]
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	68a2      	ldr	r2, [r4, #8]
 8009c12:	7da0      	ldrb	r0, [r4, #22]
 8009c14:	2102      	movs	r1, #2
 8009c16:	3302      	adds	r3, #2
 8009c18:	1bdb      	subs	r3, r3, r7
 8009c1a:	4452      	add	r2, sl
 8009c1c:	7561      	strb	r1, [r4, #21]
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	60a2      	str	r2, [r4, #8]
 8009c22:	f080 0001 	eor.w	r0, r0, #1
 8009c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 fd83 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009c32:	b178      	cbz	r0, 8009c54 <ucdr_deserialize_endian_uint16_t+0xa4>
 8009c34:	2e01      	cmp	r6, #1
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	d011      	beq.n	8009c5e <ucdr_deserialize_endian_uint16_t+0xae>
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	702b      	strb	r3, [r5, #0]
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	706b      	strb	r3, [r5, #1]
 8009c44:	68a2      	ldr	r2, [r4, #8]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	3202      	adds	r2, #2
 8009c4a:	3302      	adds	r3, #2
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	60a2      	str	r2, [r4, #8]
 8009c50:	6123      	str	r3, [r4, #16]
 8009c52:	7561      	strb	r1, [r4, #21]
 8009c54:	7da0      	ldrb	r0, [r4, #22]
 8009c56:	f080 0001 	eor.w	r0, r0, #1
 8009c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	802b      	strh	r3, [r5, #0]
 8009c62:	e7ef      	b.n	8009c44 <ucdr_deserialize_endian_uint16_t+0x94>
 8009c64:	68a2      	ldr	r2, [r4, #8]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	7da0      	ldrb	r0, [r4, #22]
 8009c6a:	f884 9015 	strb.w	r9, [r4, #21]
 8009c6e:	1bd2      	subs	r2, r2, r7
 8009c70:	1bdb      	subs	r3, r3, r7
 8009c72:	60a2      	str	r2, [r4, #8]
 8009c74:	6123      	str	r3, [r4, #16]
 8009c76:	f080 0001 	eor.w	r0, r0, #1
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	706b      	strb	r3, [r5, #1]
 8009c84:	e7c3      	b.n	8009c0e <ucdr_deserialize_endian_uint16_t+0x5e>
 8009c86:	4641      	mov	r1, r8
 8009c88:	463a      	mov	r2, r7
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f007 fedb 	bl	8011a46 <memcpy>
 8009c90:	68a1      	ldr	r1, [r4, #8]
 8009c92:	4652      	mov	r2, sl
 8009c94:	19e8      	adds	r0, r5, r7
 8009c96:	f007 fed6 	bl	8011a46 <memcpy>
 8009c9a:	e7b8      	b.n	8009c0e <ucdr_deserialize_endian_uint16_t+0x5e>

08009c9c <ucdr_serialize_uint32_t>:
 8009c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	9101      	str	r1, [sp, #4]
 8009ca6:	2104      	movs	r1, #4
 8009ca8:	f000 fd98 	bl	800a7dc <ucdr_buffer_alignment>
 8009cac:	4601      	mov	r1, r0
 8009cae:	4620      	mov	r0, r4
 8009cb0:	7d67      	ldrb	r7, [r4, #21]
 8009cb2:	f000 fdd7 	bl	800a864 <ucdr_advance_buffer>
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	2104      	movs	r1, #4
 8009cba:	f000 fd31 	bl	800a720 <ucdr_check_buffer_available_for>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d139      	bne.n	8009d36 <ucdr_serialize_uint32_t+0x9a>
 8009cc2:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8009cc6:	42ae      	cmp	r6, r5
 8009cc8:	d930      	bls.n	8009d2c <ucdr_serialize_uint32_t+0x90>
 8009cca:	6922      	ldr	r2, [r4, #16]
 8009ccc:	60a6      	str	r6, [r4, #8]
 8009cce:	1b76      	subs	r6, r6, r5
 8009cd0:	4432      	add	r2, r6
 8009cd2:	f1c6 0804 	rsb	r8, r6, #4
 8009cd6:	6122      	str	r2, [r4, #16]
 8009cd8:	4641      	mov	r1, r8
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fd2c 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d04c      	beq.n	8009d7e <ucdr_serialize_uint32_t+0xe2>
 8009ce4:	7d23      	ldrb	r3, [r4, #20]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d063      	beq.n	8009db2 <ucdr_serialize_uint32_t+0x116>
 8009cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009cee:	702b      	strb	r3, [r5, #0]
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	d051      	beq.n	8009d98 <ucdr_serialize_uint32_t+0xfc>
 8009cf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009cf8:	706b      	strb	r3, [r5, #1]
 8009cfa:	2e01      	cmp	r6, #1
 8009cfc:	d050      	beq.n	8009da0 <ucdr_serialize_uint32_t+0x104>
 8009cfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009d02:	70ab      	strb	r3, [r5, #2]
 8009d04:	2e02      	cmp	r6, #2
 8009d06:	d04f      	beq.n	8009da8 <ucdr_serialize_uint32_t+0x10c>
 8009d08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009d0c:	70eb      	strb	r3, [r5, #3]
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	68a2      	ldr	r2, [r4, #8]
 8009d12:	7da0      	ldrb	r0, [r4, #22]
 8009d14:	3304      	adds	r3, #4
 8009d16:	1b9b      	subs	r3, r3, r6
 8009d18:	4442      	add	r2, r8
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	f080 0001 	eor.w	r0, r0, #1
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	60a2      	str	r2, [r4, #8]
 8009d24:	7561      	strb	r1, [r4, #21]
 8009d26:	b002      	add	sp, #8
 8009d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2c:	2104      	movs	r1, #4
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 fd02 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009d34:	b1d0      	cbz	r0, 8009d6c <ucdr_serialize_uint32_t+0xd0>
 8009d36:	7d23      	ldrb	r3, [r4, #20]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	d01c      	beq.n	8009d78 <ucdr_serialize_uint32_t+0xdc>
 8009d3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009d4a:	705a      	strb	r2, [r3, #1]
 8009d4c:	68a3      	ldr	r3, [r4, #8]
 8009d4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009d52:	709a      	strb	r2, [r3, #2]
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009d5a:	70da      	strb	r2, [r3, #3]
 8009d5c:	68a2      	ldr	r2, [r4, #8]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	3204      	adds	r2, #4
 8009d62:	3304      	adds	r3, #4
 8009d64:	2104      	movs	r1, #4
 8009d66:	60a2      	str	r2, [r4, #8]
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	7561      	strb	r1, [r4, #21]
 8009d6c:	7da0      	ldrb	r0, [r4, #22]
 8009d6e:	f080 0001 	eor.w	r0, r0, #1
 8009d72:	b002      	add	sp, #8
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	9a01      	ldr	r2, [sp, #4]
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	e7ee      	b.n	8009d5c <ucdr_serialize_uint32_t+0xc0>
 8009d7e:	68a2      	ldr	r2, [r4, #8]
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	7da0      	ldrb	r0, [r4, #22]
 8009d84:	7567      	strb	r7, [r4, #21]
 8009d86:	1b92      	subs	r2, r2, r6
 8009d88:	1b9b      	subs	r3, r3, r6
 8009d8a:	f080 0001 	eor.w	r0, r0, #1
 8009d8e:	60a2      	str	r2, [r4, #8]
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	b002      	add	sp, #8
 8009d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	68a3      	ldr	r3, [r4, #8]
 8009da2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	68a3      	ldr	r3, [r4, #8]
 8009daa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009dae:	701a      	strb	r2, [r3, #0]
 8009db0:	e7ad      	b.n	8009d0e <ucdr_serialize_uint32_t+0x72>
 8009db2:	4628      	mov	r0, r5
 8009db4:	ad01      	add	r5, sp, #4
 8009db6:	4629      	mov	r1, r5
 8009db8:	4632      	mov	r2, r6
 8009dba:	f007 fe44 	bl	8011a46 <memcpy>
 8009dbe:	68a0      	ldr	r0, [r4, #8]
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	19a9      	adds	r1, r5, r6
 8009dc4:	f007 fe3f 	bl	8011a46 <memcpy>
 8009dc8:	e7a1      	b.n	8009d0e <ucdr_serialize_uint32_t+0x72>
 8009dca:	bf00      	nop

08009dcc <ucdr_serialize_endian_uint32_t>:
 8009dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	9201      	str	r2, [sp, #4]
 8009dda:	f000 fcff 	bl	800a7dc <ucdr_buffer_alignment>
 8009dde:	4601      	mov	r1, r0
 8009de0:	4620      	mov	r0, r4
 8009de2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009de6:	f000 fd3d 	bl	800a864 <ucdr_advance_buffer>
 8009dea:	4620      	mov	r0, r4
 8009dec:	2104      	movs	r1, #4
 8009dee:	f000 fc97 	bl	800a720 <ucdr_check_buffer_available_for>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d138      	bne.n	8009e68 <ucdr_serialize_endian_uint32_t+0x9c>
 8009df6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009dfa:	42b7      	cmp	r7, r6
 8009dfc:	d92f      	bls.n	8009e5e <ucdr_serialize_endian_uint32_t+0x92>
 8009dfe:	6922      	ldr	r2, [r4, #16]
 8009e00:	60a7      	str	r7, [r4, #8]
 8009e02:	1bbf      	subs	r7, r7, r6
 8009e04:	443a      	add	r2, r7
 8009e06:	f1c7 0904 	rsb	r9, r7, #4
 8009e0a:	6122      	str	r2, [r4, #16]
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 fc92 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d04a      	beq.n	8009eae <ucdr_serialize_endian_uint32_t+0xe2>
 8009e18:	2d01      	cmp	r5, #1
 8009e1a:	d063      	beq.n	8009ee4 <ucdr_serialize_endian_uint32_t+0x118>
 8009e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009e20:	7033      	strb	r3, [r6, #0]
 8009e22:	2f00      	cmp	r7, #0
 8009e24:	d051      	beq.n	8009eca <ucdr_serialize_endian_uint32_t+0xfe>
 8009e26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009e2a:	7073      	strb	r3, [r6, #1]
 8009e2c:	2f01      	cmp	r7, #1
 8009e2e:	d050      	beq.n	8009ed2 <ucdr_serialize_endian_uint32_t+0x106>
 8009e30:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009e34:	70b3      	strb	r3, [r6, #2]
 8009e36:	2f02      	cmp	r7, #2
 8009e38:	d04f      	beq.n	8009eda <ucdr_serialize_endian_uint32_t+0x10e>
 8009e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009e3e:	70f3      	strb	r3, [r6, #3]
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	68a2      	ldr	r2, [r4, #8]
 8009e44:	7da0      	ldrb	r0, [r4, #22]
 8009e46:	3304      	adds	r3, #4
 8009e48:	1bdb      	subs	r3, r3, r7
 8009e4a:	444a      	add	r2, r9
 8009e4c:	2104      	movs	r1, #4
 8009e4e:	f080 0001 	eor.w	r0, r0, #1
 8009e52:	6123      	str	r3, [r4, #16]
 8009e54:	60a2      	str	r2, [r4, #8]
 8009e56:	7561      	strb	r1, [r4, #21]
 8009e58:	b003      	add	sp, #12
 8009e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e5e:	2104      	movs	r1, #4
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 fc69 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009e66:	b1c8      	cbz	r0, 8009e9c <ucdr_serialize_endian_uint32_t+0xd0>
 8009e68:	2d01      	cmp	r5, #1
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	d01c      	beq.n	8009ea8 <ucdr_serialize_endian_uint32_t+0xdc>
 8009e6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009e72:	701a      	strb	r2, [r3, #0]
 8009e74:	68a3      	ldr	r3, [r4, #8]
 8009e76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e7a:	705a      	strb	r2, [r3, #1]
 8009e7c:	68a3      	ldr	r3, [r4, #8]
 8009e7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009e82:	709a      	strb	r2, [r3, #2]
 8009e84:	68a3      	ldr	r3, [r4, #8]
 8009e86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009e8a:	70da      	strb	r2, [r3, #3]
 8009e8c:	68a2      	ldr	r2, [r4, #8]
 8009e8e:	6923      	ldr	r3, [r4, #16]
 8009e90:	3204      	adds	r2, #4
 8009e92:	3304      	adds	r3, #4
 8009e94:	2104      	movs	r1, #4
 8009e96:	60a2      	str	r2, [r4, #8]
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	7561      	strb	r1, [r4, #21]
 8009e9c:	7da0      	ldrb	r0, [r4, #22]
 8009e9e:	f080 0001 	eor.w	r0, r0, #1
 8009ea2:	b003      	add	sp, #12
 8009ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea8:	9a01      	ldr	r2, [sp, #4]
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e7ee      	b.n	8009e8c <ucdr_serialize_endian_uint32_t+0xc0>
 8009eae:	68a2      	ldr	r2, [r4, #8]
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	7da0      	ldrb	r0, [r4, #22]
 8009eb4:	f884 8015 	strb.w	r8, [r4, #21]
 8009eb8:	1bd2      	subs	r2, r2, r7
 8009eba:	1bdb      	subs	r3, r3, r7
 8009ebc:	f080 0001 	eor.w	r0, r0, #1
 8009ec0:	60a2      	str	r2, [r4, #8]
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	b003      	add	sp, #12
 8009ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	e7ad      	b.n	8009e40 <ucdr_serialize_endian_uint32_t+0x74>
 8009ee4:	ad01      	add	r5, sp, #4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	463a      	mov	r2, r7
 8009eea:	4630      	mov	r0, r6
 8009eec:	f007 fdab 	bl	8011a46 <memcpy>
 8009ef0:	68a0      	ldr	r0, [r4, #8]
 8009ef2:	464a      	mov	r2, r9
 8009ef4:	19e9      	adds	r1, r5, r7
 8009ef6:	f007 fda6 	bl	8011a46 <memcpy>
 8009efa:	e7a1      	b.n	8009e40 <ucdr_serialize_endian_uint32_t+0x74>

08009efc <ucdr_deserialize_uint32_t>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	460d      	mov	r5, r1
 8009f02:	2104      	movs	r1, #4
 8009f04:	4604      	mov	r4, r0
 8009f06:	f000 fc69 	bl	800a7dc <ucdr_buffer_alignment>
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009f12:	f000 fca7 	bl	800a864 <ucdr_advance_buffer>
 8009f16:	4620      	mov	r0, r4
 8009f18:	2104      	movs	r1, #4
 8009f1a:	f000 fc01 	bl	800a720 <ucdr_check_buffer_available_for>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d138      	bne.n	8009f94 <ucdr_deserialize_uint32_t+0x98>
 8009f22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009f26:	42b7      	cmp	r7, r6
 8009f28:	d92f      	bls.n	8009f8a <ucdr_deserialize_uint32_t+0x8e>
 8009f2a:	6922      	ldr	r2, [r4, #16]
 8009f2c:	60a7      	str	r7, [r4, #8]
 8009f2e:	1bbf      	subs	r7, r7, r6
 8009f30:	443a      	add	r2, r7
 8009f32:	f1c7 0904 	rsb	r9, r7, #4
 8009f36:	6122      	str	r2, [r4, #16]
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fbfc 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d046      	beq.n	8009fd2 <ucdr_deserialize_uint32_t+0xd6>
 8009f44:	7d23      	ldrb	r3, [r4, #20]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d05c      	beq.n	800a004 <ucdr_deserialize_uint32_t+0x108>
 8009f4a:	78f3      	ldrb	r3, [r6, #3]
 8009f4c:	702b      	strb	r3, [r5, #0]
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	d04c      	beq.n	8009fec <ucdr_deserialize_uint32_t+0xf0>
 8009f52:	78b3      	ldrb	r3, [r6, #2]
 8009f54:	706b      	strb	r3, [r5, #1]
 8009f56:	2f01      	cmp	r7, #1
 8009f58:	f105 0302 	add.w	r3, r5, #2
 8009f5c:	d04a      	beq.n	8009ff4 <ucdr_deserialize_uint32_t+0xf8>
 8009f5e:	7873      	ldrb	r3, [r6, #1]
 8009f60:	70ab      	strb	r3, [r5, #2]
 8009f62:	2f02      	cmp	r7, #2
 8009f64:	f105 0303 	add.w	r3, r5, #3
 8009f68:	d048      	beq.n	8009ffc <ucdr_deserialize_uint32_t+0x100>
 8009f6a:	7833      	ldrb	r3, [r6, #0]
 8009f6c:	70eb      	strb	r3, [r5, #3]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	68a2      	ldr	r2, [r4, #8]
 8009f72:	7da0      	ldrb	r0, [r4, #22]
 8009f74:	2104      	movs	r1, #4
 8009f76:	3304      	adds	r3, #4
 8009f78:	1bdb      	subs	r3, r3, r7
 8009f7a:	444a      	add	r2, r9
 8009f7c:	7561      	strb	r1, [r4, #21]
 8009f7e:	6123      	str	r3, [r4, #16]
 8009f80:	60a2      	str	r2, [r4, #8]
 8009f82:	f080 0001 	eor.w	r0, r0, #1
 8009f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8a:	2104      	movs	r1, #4
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 fbd3 	bl	800a738 <ucdr_check_final_buffer_behavior>
 8009f92:	b1b0      	cbz	r0, 8009fc2 <ucdr_deserialize_uint32_t+0xc6>
 8009f94:	7d23      	ldrb	r3, [r4, #20]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	68a3      	ldr	r3, [r4, #8]
 8009f9a:	d017      	beq.n	8009fcc <ucdr_deserialize_uint32_t+0xd0>
 8009f9c:	78db      	ldrb	r3, [r3, #3]
 8009f9e:	702b      	strb	r3, [r5, #0]
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	789b      	ldrb	r3, [r3, #2]
 8009fa4:	706b      	strb	r3, [r5, #1]
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	70ab      	strb	r3, [r5, #2]
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	70eb      	strb	r3, [r5, #3]
 8009fb2:	68a2      	ldr	r2, [r4, #8]
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	3204      	adds	r2, #4
 8009fb8:	3304      	adds	r3, #4
 8009fba:	2104      	movs	r1, #4
 8009fbc:	60a2      	str	r2, [r4, #8]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	7561      	strb	r1, [r4, #21]
 8009fc2:	7da0      	ldrb	r0, [r4, #22]
 8009fc4:	f080 0001 	eor.w	r0, r0, #1
 8009fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	602b      	str	r3, [r5, #0]
 8009fd0:	e7ef      	b.n	8009fb2 <ucdr_deserialize_uint32_t+0xb6>
 8009fd2:	68a2      	ldr	r2, [r4, #8]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	7da0      	ldrb	r0, [r4, #22]
 8009fd8:	f884 8015 	strb.w	r8, [r4, #21]
 8009fdc:	1bd2      	subs	r2, r2, r7
 8009fde:	1bdb      	subs	r3, r3, r7
 8009fe0:	60a2      	str	r2, [r4, #8]
 8009fe2:	6123      	str	r3, [r4, #16]
 8009fe4:	f080 0001 	eor.w	r0, r0, #1
 8009fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	789b      	ldrb	r3, [r3, #2]
 8009ff0:	706b      	strb	r3, [r5, #1]
 8009ff2:	1cab      	adds	r3, r5, #2
 8009ff4:	68a2      	ldr	r2, [r4, #8]
 8009ff6:	7852      	ldrb	r2, [r2, #1]
 8009ff8:	f803 2b01 	strb.w	r2, [r3], #1
 8009ffc:	68a2      	ldr	r2, [r4, #8]
 8009ffe:	7812      	ldrb	r2, [r2, #0]
 800a000:	701a      	strb	r2, [r3, #0]
 800a002:	e7b4      	b.n	8009f6e <ucdr_deserialize_uint32_t+0x72>
 800a004:	4631      	mov	r1, r6
 800a006:	463a      	mov	r2, r7
 800a008:	4628      	mov	r0, r5
 800a00a:	f007 fd1c 	bl	8011a46 <memcpy>
 800a00e:	68a1      	ldr	r1, [r4, #8]
 800a010:	464a      	mov	r2, r9
 800a012:	19e8      	adds	r0, r5, r7
 800a014:	f007 fd17 	bl	8011a46 <memcpy>
 800a018:	e7a9      	b.n	8009f6e <ucdr_deserialize_uint32_t+0x72>
 800a01a:	bf00      	nop

0800a01c <ucdr_deserialize_endian_uint32_t>:
 800a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	460e      	mov	r6, r1
 800a022:	2104      	movs	r1, #4
 800a024:	4604      	mov	r4, r0
 800a026:	4615      	mov	r5, r2
 800a028:	f000 fbd8 	bl	800a7dc <ucdr_buffer_alignment>
 800a02c:	4601      	mov	r1, r0
 800a02e:	4620      	mov	r0, r4
 800a030:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a034:	f000 fc16 	bl	800a864 <ucdr_advance_buffer>
 800a038:	4620      	mov	r0, r4
 800a03a:	2104      	movs	r1, #4
 800a03c:	f000 fb70 	bl	800a720 <ucdr_check_buffer_available_for>
 800a040:	2800      	cmp	r0, #0
 800a042:	d13c      	bne.n	800a0be <ucdr_deserialize_endian_uint32_t+0xa2>
 800a044:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a048:	42bb      	cmp	r3, r7
 800a04a:	d933      	bls.n	800a0b4 <ucdr_deserialize_endian_uint32_t+0x98>
 800a04c:	6922      	ldr	r2, [r4, #16]
 800a04e:	60a3      	str	r3, [r4, #8]
 800a050:	eba3 0807 	sub.w	r8, r3, r7
 800a054:	4442      	add	r2, r8
 800a056:	f1c8 0a04 	rsb	sl, r8, #4
 800a05a:	6122      	str	r2, [r4, #16]
 800a05c:	4651      	mov	r1, sl
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 fb6a 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a064:	2800      	cmp	r0, #0
 800a066:	d048      	beq.n	800a0fa <ucdr_deserialize_endian_uint32_t+0xde>
 800a068:	2e01      	cmp	r6, #1
 800a06a:	d061      	beq.n	800a130 <ucdr_deserialize_endian_uint32_t+0x114>
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	702b      	strb	r3, [r5, #0]
 800a070:	f1b8 0f00 	cmp.w	r8, #0
 800a074:	d050      	beq.n	800a118 <ucdr_deserialize_endian_uint32_t+0xfc>
 800a076:	78bb      	ldrb	r3, [r7, #2]
 800a078:	706b      	strb	r3, [r5, #1]
 800a07a:	f1b8 0f01 	cmp.w	r8, #1
 800a07e:	f105 0302 	add.w	r3, r5, #2
 800a082:	d04d      	beq.n	800a120 <ucdr_deserialize_endian_uint32_t+0x104>
 800a084:	787b      	ldrb	r3, [r7, #1]
 800a086:	70ab      	strb	r3, [r5, #2]
 800a088:	f1b8 0f02 	cmp.w	r8, #2
 800a08c:	f105 0303 	add.w	r3, r5, #3
 800a090:	d04a      	beq.n	800a128 <ucdr_deserialize_endian_uint32_t+0x10c>
 800a092:	783b      	ldrb	r3, [r7, #0]
 800a094:	70eb      	strb	r3, [r5, #3]
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	68a2      	ldr	r2, [r4, #8]
 800a09a:	7da0      	ldrb	r0, [r4, #22]
 800a09c:	2104      	movs	r1, #4
 800a09e:	3304      	adds	r3, #4
 800a0a0:	eba3 0308 	sub.w	r3, r3, r8
 800a0a4:	4452      	add	r2, sl
 800a0a6:	7561      	strb	r1, [r4, #21]
 800a0a8:	6123      	str	r3, [r4, #16]
 800a0aa:	60a2      	str	r2, [r4, #8]
 800a0ac:	f080 0001 	eor.w	r0, r0, #1
 800a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b4:	2104      	movs	r1, #4
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 fb3e 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a0bc:	b1a8      	cbz	r0, 800a0ea <ucdr_deserialize_endian_uint32_t+0xce>
 800a0be:	2e01      	cmp	r6, #1
 800a0c0:	68a3      	ldr	r3, [r4, #8]
 800a0c2:	d017      	beq.n	800a0f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800a0c4:	78db      	ldrb	r3, [r3, #3]
 800a0c6:	702b      	strb	r3, [r5, #0]
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	789b      	ldrb	r3, [r3, #2]
 800a0cc:	706b      	strb	r3, [r5, #1]
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	785b      	ldrb	r3, [r3, #1]
 800a0d2:	70ab      	strb	r3, [r5, #2]
 800a0d4:	68a3      	ldr	r3, [r4, #8]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	70eb      	strb	r3, [r5, #3]
 800a0da:	68a2      	ldr	r2, [r4, #8]
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	3204      	adds	r2, #4
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	60a2      	str	r2, [r4, #8]
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	7561      	strb	r1, [r4, #21]
 800a0ea:	7da0      	ldrb	r0, [r4, #22]
 800a0ec:	f080 0001 	eor.w	r0, r0, #1
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	e7ef      	b.n	800a0da <ucdr_deserialize_endian_uint32_t+0xbe>
 800a0fa:	68a2      	ldr	r2, [r4, #8]
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	7da0      	ldrb	r0, [r4, #22]
 800a100:	f884 9015 	strb.w	r9, [r4, #21]
 800a104:	eba2 0208 	sub.w	r2, r2, r8
 800a108:	eba3 0308 	sub.w	r3, r3, r8
 800a10c:	60a2      	str	r2, [r4, #8]
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	f080 0001 	eor.w	r0, r0, #1
 800a114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	789b      	ldrb	r3, [r3, #2]
 800a11c:	706b      	strb	r3, [r5, #1]
 800a11e:	1cab      	adds	r3, r5, #2
 800a120:	68a2      	ldr	r2, [r4, #8]
 800a122:	7852      	ldrb	r2, [r2, #1]
 800a124:	f803 2b01 	strb.w	r2, [r3], #1
 800a128:	68a2      	ldr	r2, [r4, #8]
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	e7b2      	b.n	800a096 <ucdr_deserialize_endian_uint32_t+0x7a>
 800a130:	4639      	mov	r1, r7
 800a132:	4642      	mov	r2, r8
 800a134:	4628      	mov	r0, r5
 800a136:	f007 fc86 	bl	8011a46 <memcpy>
 800a13a:	68a1      	ldr	r1, [r4, #8]
 800a13c:	4652      	mov	r2, sl
 800a13e:	eb05 0008 	add.w	r0, r5, r8
 800a142:	f007 fc80 	bl	8011a46 <memcpy>
 800a146:	e7a6      	b.n	800a096 <ucdr_deserialize_endian_uint32_t+0x7a>

0800a148 <ucdr_serialize_uint64_t>:
 800a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14c:	2108      	movs	r1, #8
 800a14e:	b082      	sub	sp, #8
 800a150:	4604      	mov	r4, r0
 800a152:	e9cd 2300 	strd	r2, r3, [sp]
 800a156:	f000 fb41 	bl	800a7dc <ucdr_buffer_alignment>
 800a15a:	4601      	mov	r1, r0
 800a15c:	4620      	mov	r0, r4
 800a15e:	7d67      	ldrb	r7, [r4, #21]
 800a160:	f000 fb80 	bl	800a864 <ucdr_advance_buffer>
 800a164:	4620      	mov	r0, r4
 800a166:	2108      	movs	r1, #8
 800a168:	f000 fada 	bl	800a720 <ucdr_check_buffer_available_for>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d14e      	bne.n	800a20e <ucdr_serialize_uint64_t+0xc6>
 800a170:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a174:	42b5      	cmp	r5, r6
 800a176:	d945      	bls.n	800a204 <ucdr_serialize_uint64_t+0xbc>
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	60a5      	str	r5, [r4, #8]
 800a17c:	1bad      	subs	r5, r5, r6
 800a17e:	442b      	add	r3, r5
 800a180:	f1c5 0808 	rsb	r8, r5, #8
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	4641      	mov	r1, r8
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fad5 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d074      	beq.n	800a27c <ucdr_serialize_uint64_t+0x134>
 800a192:	7d23      	ldrb	r3, [r4, #20]
 800a194:	2b01      	cmp	r3, #1
 800a196:	f000 809b 	beq.w	800a2d0 <ucdr_serialize_uint64_t+0x188>
 800a19a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a19e:	7033      	strb	r3, [r6, #0]
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	d078      	beq.n	800a296 <ucdr_serialize_uint64_t+0x14e>
 800a1a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a1a8:	7073      	strb	r3, [r6, #1]
 800a1aa:	2d01      	cmp	r5, #1
 800a1ac:	d077      	beq.n	800a29e <ucdr_serialize_uint64_t+0x156>
 800a1ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a1b2:	70b3      	strb	r3, [r6, #2]
 800a1b4:	2d02      	cmp	r5, #2
 800a1b6:	d076      	beq.n	800a2a6 <ucdr_serialize_uint64_t+0x15e>
 800a1b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a1bc:	70f3      	strb	r3, [r6, #3]
 800a1be:	2d03      	cmp	r5, #3
 800a1c0:	d075      	beq.n	800a2ae <ucdr_serialize_uint64_t+0x166>
 800a1c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a1c6:	7133      	strb	r3, [r6, #4]
 800a1c8:	2d04      	cmp	r5, #4
 800a1ca:	d074      	beq.n	800a2b6 <ucdr_serialize_uint64_t+0x16e>
 800a1cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a1d0:	7173      	strb	r3, [r6, #5]
 800a1d2:	2d05      	cmp	r5, #5
 800a1d4:	d073      	beq.n	800a2be <ucdr_serialize_uint64_t+0x176>
 800a1d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800a1da:	71b3      	strb	r3, [r6, #6]
 800a1dc:	2d06      	cmp	r5, #6
 800a1de:	d072      	beq.n	800a2c6 <ucdr_serialize_uint64_t+0x17e>
 800a1e0:	f89d 3000 	ldrb.w	r3, [sp]
 800a1e4:	71f3      	strb	r3, [r6, #7]
 800a1e6:	6923      	ldr	r3, [r4, #16]
 800a1e8:	68a2      	ldr	r2, [r4, #8]
 800a1ea:	7da0      	ldrb	r0, [r4, #22]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	1b5d      	subs	r5, r3, r5
 800a1f0:	4442      	add	r2, r8
 800a1f2:	2308      	movs	r3, #8
 800a1f4:	f080 0001 	eor.w	r0, r0, #1
 800a1f8:	6125      	str	r5, [r4, #16]
 800a1fa:	60a2      	str	r2, [r4, #8]
 800a1fc:	7563      	strb	r3, [r4, #21]
 800a1fe:	b002      	add	sp, #8
 800a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a204:	2108      	movs	r1, #8
 800a206:	4620      	mov	r0, r4
 800a208:	f000 fa96 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a20c:	b350      	cbz	r0, 800a264 <ucdr_serialize_uint64_t+0x11c>
 800a20e:	7d23      	ldrb	r3, [r4, #20]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d02d      	beq.n	800a270 <ucdr_serialize_uint64_t+0x128>
 800a214:	68a3      	ldr	r3, [r4, #8]
 800a216:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a21a:	701a      	strb	r2, [r3, #0]
 800a21c:	68a3      	ldr	r3, [r4, #8]
 800a21e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a222:	705a      	strb	r2, [r3, #1]
 800a224:	68a3      	ldr	r3, [r4, #8]
 800a226:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a22a:	709a      	strb	r2, [r3, #2]
 800a22c:	68a3      	ldr	r3, [r4, #8]
 800a22e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a232:	70da      	strb	r2, [r3, #3]
 800a234:	68a3      	ldr	r3, [r4, #8]
 800a236:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a23a:	711a      	strb	r2, [r3, #4]
 800a23c:	68a3      	ldr	r3, [r4, #8]
 800a23e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a242:	715a      	strb	r2, [r3, #5]
 800a244:	68a3      	ldr	r3, [r4, #8]
 800a246:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a24a:	719a      	strb	r2, [r3, #6]
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	f89d 2000 	ldrb.w	r2, [sp]
 800a252:	71da      	strb	r2, [r3, #7]
 800a254:	68a2      	ldr	r2, [r4, #8]
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	3208      	adds	r2, #8
 800a25a:	3308      	adds	r3, #8
 800a25c:	2108      	movs	r1, #8
 800a25e:	60a2      	str	r2, [r4, #8]
 800a260:	6123      	str	r3, [r4, #16]
 800a262:	7561      	strb	r1, [r4, #21]
 800a264:	7da0      	ldrb	r0, [r4, #22]
 800a266:	f080 0001 	eor.w	r0, r0, #1
 800a26a:	b002      	add	sp, #8
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	466b      	mov	r3, sp
 800a272:	cb03      	ldmia	r3!, {r0, r1}
 800a274:	68a3      	ldr	r3, [r4, #8]
 800a276:	6018      	str	r0, [r3, #0]
 800a278:	6059      	str	r1, [r3, #4]
 800a27a:	e7eb      	b.n	800a254 <ucdr_serialize_uint64_t+0x10c>
 800a27c:	68a2      	ldr	r2, [r4, #8]
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	7da0      	ldrb	r0, [r4, #22]
 800a282:	7567      	strb	r7, [r4, #21]
 800a284:	1b52      	subs	r2, r2, r5
 800a286:	f080 0001 	eor.w	r0, r0, #1
 800a28a:	1b5d      	subs	r5, r3, r5
 800a28c:	60a2      	str	r2, [r4, #8]
 800a28e:	6125      	str	r5, [r4, #16]
 800a290:	b002      	add	sp, #8
 800a292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	68a3      	ldr	r3, [r4, #8]
 800a2a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	68a3      	ldr	r3, [r4, #8]
 800a2b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	68a3      	ldr	r3, [r4, #8]
 800a2b8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a2c4:	701a      	strb	r2, [r3, #0]
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	f89d 2000 	ldrb.w	r2, [sp]
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	e78a      	b.n	800a1e6 <ucdr_serialize_uint64_t+0x9e>
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	466e      	mov	r6, sp
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	462a      	mov	r2, r5
 800a2d8:	f007 fbb5 	bl	8011a46 <memcpy>
 800a2dc:	68a0      	ldr	r0, [r4, #8]
 800a2de:	4642      	mov	r2, r8
 800a2e0:	1971      	adds	r1, r6, r5
 800a2e2:	f007 fbb0 	bl	8011a46 <memcpy>
 800a2e6:	e77e      	b.n	800a1e6 <ucdr_serialize_uint64_t+0x9e>

0800a2e8 <ucdr_serialize_int16_t>:
 800a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	2102      	movs	r1, #2
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a2f8:	f000 fa70 	bl	800a7dc <ucdr_buffer_alignment>
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	4620      	mov	r0, r4
 800a300:	7d67      	ldrb	r7, [r4, #21]
 800a302:	f000 faaf 	bl	800a864 <ucdr_advance_buffer>
 800a306:	4620      	mov	r0, r4
 800a308:	2102      	movs	r1, #2
 800a30a:	f000 fa09 	bl	800a720 <ucdr_check_buffer_available_for>
 800a30e:	bb78      	cbnz	r0, 800a370 <ucdr_serialize_int16_t+0x88>
 800a310:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800a314:	42b5      	cmp	r5, r6
 800a316:	d926      	bls.n	800a366 <ucdr_serialize_int16_t+0x7e>
 800a318:	6922      	ldr	r2, [r4, #16]
 800a31a:	60a5      	str	r5, [r4, #8]
 800a31c:	1bad      	subs	r5, r5, r6
 800a31e:	442a      	add	r2, r5
 800a320:	f1c5 0802 	rsb	r8, r5, #2
 800a324:	6122      	str	r2, [r4, #16]
 800a326:	4641      	mov	r1, r8
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fa05 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d03b      	beq.n	800a3aa <ucdr_serialize_int16_t+0xc2>
 800a332:	7d23      	ldrb	r3, [r4, #20]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d04a      	beq.n	800a3ce <ucdr_serialize_int16_t+0xe6>
 800a338:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a33c:	7033      	strb	r3, [r6, #0]
 800a33e:	2d00      	cmp	r5, #0
 800a340:	d040      	beq.n	800a3c4 <ucdr_serialize_int16_t+0xdc>
 800a342:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a346:	7073      	strb	r3, [r6, #1]
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	68a2      	ldr	r2, [r4, #8]
 800a34c:	7da0      	ldrb	r0, [r4, #22]
 800a34e:	3302      	adds	r3, #2
 800a350:	1b5b      	subs	r3, r3, r5
 800a352:	4442      	add	r2, r8
 800a354:	2102      	movs	r1, #2
 800a356:	f080 0001 	eor.w	r0, r0, #1
 800a35a:	6123      	str	r3, [r4, #16]
 800a35c:	60a2      	str	r2, [r4, #8]
 800a35e:	7561      	strb	r1, [r4, #21]
 800a360:	b002      	add	sp, #8
 800a362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a366:	2102      	movs	r1, #2
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 f9e5 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a36e:	b190      	cbz	r0, 800a396 <ucdr_serialize_int16_t+0xae>
 800a370:	7d23      	ldrb	r3, [r4, #20]
 800a372:	2b01      	cmp	r3, #1
 800a374:	68a3      	ldr	r3, [r4, #8]
 800a376:	d014      	beq.n	800a3a2 <ucdr_serialize_int16_t+0xba>
 800a378:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a37c:	701a      	strb	r2, [r3, #0]
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a384:	705a      	strb	r2, [r3, #1]
 800a386:	68a2      	ldr	r2, [r4, #8]
 800a388:	6923      	ldr	r3, [r4, #16]
 800a38a:	3202      	adds	r2, #2
 800a38c:	3302      	adds	r3, #2
 800a38e:	2102      	movs	r1, #2
 800a390:	60a2      	str	r2, [r4, #8]
 800a392:	6123      	str	r3, [r4, #16]
 800a394:	7561      	strb	r1, [r4, #21]
 800a396:	7da0      	ldrb	r0, [r4, #22]
 800a398:	f080 0001 	eor.w	r0, r0, #1
 800a39c:	b002      	add	sp, #8
 800a39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	e7ed      	b.n	800a386 <ucdr_serialize_int16_t+0x9e>
 800a3aa:	68a2      	ldr	r2, [r4, #8]
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	7da0      	ldrb	r0, [r4, #22]
 800a3b0:	7567      	strb	r7, [r4, #21]
 800a3b2:	1b52      	subs	r2, r2, r5
 800a3b4:	1b5b      	subs	r3, r3, r5
 800a3b6:	f080 0001 	eor.w	r0, r0, #1
 800a3ba:	60a2      	str	r2, [r4, #8]
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	b002      	add	sp, #8
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	68a3      	ldr	r3, [r4, #8]
 800a3c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3ca:	701a      	strb	r2, [r3, #0]
 800a3cc:	e7bc      	b.n	800a348 <ucdr_serialize_int16_t+0x60>
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f10d 0606 	add.w	r6, sp, #6
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	462a      	mov	r2, r5
 800a3d8:	f007 fb35 	bl	8011a46 <memcpy>
 800a3dc:	68a0      	ldr	r0, [r4, #8]
 800a3de:	4642      	mov	r2, r8
 800a3e0:	1971      	adds	r1, r6, r5
 800a3e2:	f007 fb30 	bl	8011a46 <memcpy>
 800a3e6:	e7af      	b.n	800a348 <ucdr_serialize_int16_t+0x60>

0800a3e8 <ucdr_deserialize_int16_t>:
 800a3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	f000 f9f3 	bl	800a7dc <ucdr_buffer_alignment>
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a3fe:	f000 fa31 	bl	800a864 <ucdr_advance_buffer>
 800a402:	4620      	mov	r0, r4
 800a404:	2102      	movs	r1, #2
 800a406:	f000 f98b 	bl	800a720 <ucdr_check_buffer_available_for>
 800a40a:	bb60      	cbnz	r0, 800a466 <ucdr_deserialize_int16_t+0x7e>
 800a40c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a410:	42be      	cmp	r6, r7
 800a412:	d923      	bls.n	800a45c <ucdr_deserialize_int16_t+0x74>
 800a414:	6922      	ldr	r2, [r4, #16]
 800a416:	60a6      	str	r6, [r4, #8]
 800a418:	1bf6      	subs	r6, r6, r7
 800a41a:	4432      	add	r2, r6
 800a41c:	f1c6 0902 	rsb	r9, r6, #2
 800a420:	6122      	str	r2, [r4, #16]
 800a422:	4649      	mov	r1, r9
 800a424:	4620      	mov	r0, r4
 800a426:	f000 f987 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d034      	beq.n	800a498 <ucdr_deserialize_int16_t+0xb0>
 800a42e:	7d23      	ldrb	r3, [r4, #20]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d042      	beq.n	800a4ba <ucdr_deserialize_int16_t+0xd2>
 800a434:	787b      	ldrb	r3, [r7, #1]
 800a436:	702b      	strb	r3, [r5, #0]
 800a438:	2e00      	cmp	r6, #0
 800a43a:	d03a      	beq.n	800a4b2 <ucdr_deserialize_int16_t+0xca>
 800a43c:	783b      	ldrb	r3, [r7, #0]
 800a43e:	706b      	strb	r3, [r5, #1]
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	68a2      	ldr	r2, [r4, #8]
 800a444:	7da0      	ldrb	r0, [r4, #22]
 800a446:	2102      	movs	r1, #2
 800a448:	3302      	adds	r3, #2
 800a44a:	1b9b      	subs	r3, r3, r6
 800a44c:	444a      	add	r2, r9
 800a44e:	7561      	strb	r1, [r4, #21]
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	60a2      	str	r2, [r4, #8]
 800a454:	f080 0001 	eor.w	r0, r0, #1
 800a458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a45c:	2102      	movs	r1, #2
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 f96a 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a464:	b180      	cbz	r0, 800a488 <ucdr_deserialize_int16_t+0xa0>
 800a466:	7d23      	ldrb	r3, [r4, #20]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	68a3      	ldr	r3, [r4, #8]
 800a46c:	d011      	beq.n	800a492 <ucdr_deserialize_int16_t+0xaa>
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	702b      	strb	r3, [r5, #0]
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	706b      	strb	r3, [r5, #1]
 800a478:	68a2      	ldr	r2, [r4, #8]
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	3202      	adds	r2, #2
 800a47e:	3302      	adds	r3, #2
 800a480:	2102      	movs	r1, #2
 800a482:	60a2      	str	r2, [r4, #8]
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	7561      	strb	r1, [r4, #21]
 800a488:	7da0      	ldrb	r0, [r4, #22]
 800a48a:	f080 0001 	eor.w	r0, r0, #1
 800a48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	802b      	strh	r3, [r5, #0]
 800a496:	e7ef      	b.n	800a478 <ucdr_deserialize_int16_t+0x90>
 800a498:	68a2      	ldr	r2, [r4, #8]
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	7da0      	ldrb	r0, [r4, #22]
 800a49e:	f884 8015 	strb.w	r8, [r4, #21]
 800a4a2:	1b92      	subs	r2, r2, r6
 800a4a4:	1b9b      	subs	r3, r3, r6
 800a4a6:	60a2      	str	r2, [r4, #8]
 800a4a8:	6123      	str	r3, [r4, #16]
 800a4aa:	f080 0001 	eor.w	r0, r0, #1
 800a4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	706b      	strb	r3, [r5, #1]
 800a4b8:	e7c2      	b.n	800a440 <ucdr_deserialize_int16_t+0x58>
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	4632      	mov	r2, r6
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f007 fac1 	bl	8011a46 <memcpy>
 800a4c4:	68a1      	ldr	r1, [r4, #8]
 800a4c6:	464a      	mov	r2, r9
 800a4c8:	19a8      	adds	r0, r5, r6
 800a4ca:	f007 fabc 	bl	8011a46 <memcpy>
 800a4ce:	e7b7      	b.n	800a440 <ucdr_deserialize_int16_t+0x58>

0800a4d0 <ucdr_serialize_int32_t>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	9101      	str	r1, [sp, #4]
 800a4da:	2104      	movs	r1, #4
 800a4dc:	f000 f97e 	bl	800a7dc <ucdr_buffer_alignment>
 800a4e0:	4601      	mov	r1, r0
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	7d67      	ldrb	r7, [r4, #21]
 800a4e6:	f000 f9bd 	bl	800a864 <ucdr_advance_buffer>
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	f000 f917 	bl	800a720 <ucdr_check_buffer_available_for>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d139      	bne.n	800a56a <ucdr_serialize_int32_t+0x9a>
 800a4f6:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800a4fa:	42ae      	cmp	r6, r5
 800a4fc:	d930      	bls.n	800a560 <ucdr_serialize_int32_t+0x90>
 800a4fe:	6922      	ldr	r2, [r4, #16]
 800a500:	60a6      	str	r6, [r4, #8]
 800a502:	1b76      	subs	r6, r6, r5
 800a504:	4432      	add	r2, r6
 800a506:	f1c6 0804 	rsb	r8, r6, #4
 800a50a:	6122      	str	r2, [r4, #16]
 800a50c:	4641      	mov	r1, r8
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 f912 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a514:	2800      	cmp	r0, #0
 800a516:	d04c      	beq.n	800a5b2 <ucdr_serialize_int32_t+0xe2>
 800a518:	7d23      	ldrb	r3, [r4, #20]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d063      	beq.n	800a5e6 <ucdr_serialize_int32_t+0x116>
 800a51e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a522:	702b      	strb	r3, [r5, #0]
 800a524:	2e00      	cmp	r6, #0
 800a526:	d051      	beq.n	800a5cc <ucdr_serialize_int32_t+0xfc>
 800a528:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a52c:	706b      	strb	r3, [r5, #1]
 800a52e:	2e01      	cmp	r6, #1
 800a530:	d050      	beq.n	800a5d4 <ucdr_serialize_int32_t+0x104>
 800a532:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a536:	70ab      	strb	r3, [r5, #2]
 800a538:	2e02      	cmp	r6, #2
 800a53a:	d04f      	beq.n	800a5dc <ucdr_serialize_int32_t+0x10c>
 800a53c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a540:	70eb      	strb	r3, [r5, #3]
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	68a2      	ldr	r2, [r4, #8]
 800a546:	7da0      	ldrb	r0, [r4, #22]
 800a548:	3304      	adds	r3, #4
 800a54a:	1b9b      	subs	r3, r3, r6
 800a54c:	4442      	add	r2, r8
 800a54e:	2104      	movs	r1, #4
 800a550:	f080 0001 	eor.w	r0, r0, #1
 800a554:	6123      	str	r3, [r4, #16]
 800a556:	60a2      	str	r2, [r4, #8]
 800a558:	7561      	strb	r1, [r4, #21]
 800a55a:	b002      	add	sp, #8
 800a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a560:	2104      	movs	r1, #4
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f8e8 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a568:	b1d0      	cbz	r0, 800a5a0 <ucdr_serialize_int32_t+0xd0>
 800a56a:	7d23      	ldrb	r3, [r4, #20]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	d01c      	beq.n	800a5ac <ucdr_serialize_int32_t+0xdc>
 800a572:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a576:	701a      	strb	r2, [r3, #0]
 800a578:	68a3      	ldr	r3, [r4, #8]
 800a57a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a57e:	705a      	strb	r2, [r3, #1]
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a586:	709a      	strb	r2, [r3, #2]
 800a588:	68a3      	ldr	r3, [r4, #8]
 800a58a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a58e:	70da      	strb	r2, [r3, #3]
 800a590:	68a2      	ldr	r2, [r4, #8]
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	3204      	adds	r2, #4
 800a596:	3304      	adds	r3, #4
 800a598:	2104      	movs	r1, #4
 800a59a:	60a2      	str	r2, [r4, #8]
 800a59c:	6123      	str	r3, [r4, #16]
 800a59e:	7561      	strb	r1, [r4, #21]
 800a5a0:	7da0      	ldrb	r0, [r4, #22]
 800a5a2:	f080 0001 	eor.w	r0, r0, #1
 800a5a6:	b002      	add	sp, #8
 800a5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ac:	9a01      	ldr	r2, [sp, #4]
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	e7ee      	b.n	800a590 <ucdr_serialize_int32_t+0xc0>
 800a5b2:	68a2      	ldr	r2, [r4, #8]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	7da0      	ldrb	r0, [r4, #22]
 800a5b8:	7567      	strb	r7, [r4, #21]
 800a5ba:	1b92      	subs	r2, r2, r6
 800a5bc:	1b9b      	subs	r3, r3, r6
 800a5be:	f080 0001 	eor.w	r0, r0, #1
 800a5c2:	60a2      	str	r2, [r4, #8]
 800a5c4:	6123      	str	r3, [r4, #16]
 800a5c6:	b002      	add	sp, #8
 800a5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	68a3      	ldr	r3, [r4, #8]
 800a5d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	e7ad      	b.n	800a542 <ucdr_serialize_int32_t+0x72>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	ad01      	add	r5, sp, #4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	f007 fa2a 	bl	8011a46 <memcpy>
 800a5f2:	68a0      	ldr	r0, [r4, #8]
 800a5f4:	4642      	mov	r2, r8
 800a5f6:	19a9      	adds	r1, r5, r6
 800a5f8:	f007 fa25 	bl	8011a46 <memcpy>
 800a5fc:	e7a1      	b.n	800a542 <ucdr_serialize_int32_t+0x72>
 800a5fe:	bf00      	nop

0800a600 <ucdr_deserialize_int32_t>:
 800a600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a604:	460d      	mov	r5, r1
 800a606:	2104      	movs	r1, #4
 800a608:	4604      	mov	r4, r0
 800a60a:	f000 f8e7 	bl	800a7dc <ucdr_buffer_alignment>
 800a60e:	4601      	mov	r1, r0
 800a610:	4620      	mov	r0, r4
 800a612:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a616:	f000 f925 	bl	800a864 <ucdr_advance_buffer>
 800a61a:	4620      	mov	r0, r4
 800a61c:	2104      	movs	r1, #4
 800a61e:	f000 f87f 	bl	800a720 <ucdr_check_buffer_available_for>
 800a622:	2800      	cmp	r0, #0
 800a624:	d138      	bne.n	800a698 <ucdr_deserialize_int32_t+0x98>
 800a626:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a62a:	42b7      	cmp	r7, r6
 800a62c:	d92f      	bls.n	800a68e <ucdr_deserialize_int32_t+0x8e>
 800a62e:	6922      	ldr	r2, [r4, #16]
 800a630:	60a7      	str	r7, [r4, #8]
 800a632:	1bbf      	subs	r7, r7, r6
 800a634:	443a      	add	r2, r7
 800a636:	f1c7 0904 	rsb	r9, r7, #4
 800a63a:	6122      	str	r2, [r4, #16]
 800a63c:	4649      	mov	r1, r9
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 f87a 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a644:	2800      	cmp	r0, #0
 800a646:	d046      	beq.n	800a6d6 <ucdr_deserialize_int32_t+0xd6>
 800a648:	7d23      	ldrb	r3, [r4, #20]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d05c      	beq.n	800a708 <ucdr_deserialize_int32_t+0x108>
 800a64e:	78f3      	ldrb	r3, [r6, #3]
 800a650:	702b      	strb	r3, [r5, #0]
 800a652:	2f00      	cmp	r7, #0
 800a654:	d04c      	beq.n	800a6f0 <ucdr_deserialize_int32_t+0xf0>
 800a656:	78b3      	ldrb	r3, [r6, #2]
 800a658:	706b      	strb	r3, [r5, #1]
 800a65a:	2f01      	cmp	r7, #1
 800a65c:	f105 0302 	add.w	r3, r5, #2
 800a660:	d04a      	beq.n	800a6f8 <ucdr_deserialize_int32_t+0xf8>
 800a662:	7873      	ldrb	r3, [r6, #1]
 800a664:	70ab      	strb	r3, [r5, #2]
 800a666:	2f02      	cmp	r7, #2
 800a668:	f105 0303 	add.w	r3, r5, #3
 800a66c:	d048      	beq.n	800a700 <ucdr_deserialize_int32_t+0x100>
 800a66e:	7833      	ldrb	r3, [r6, #0]
 800a670:	70eb      	strb	r3, [r5, #3]
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	68a2      	ldr	r2, [r4, #8]
 800a676:	7da0      	ldrb	r0, [r4, #22]
 800a678:	2104      	movs	r1, #4
 800a67a:	3304      	adds	r3, #4
 800a67c:	1bdb      	subs	r3, r3, r7
 800a67e:	444a      	add	r2, r9
 800a680:	7561      	strb	r1, [r4, #21]
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	60a2      	str	r2, [r4, #8]
 800a686:	f080 0001 	eor.w	r0, r0, #1
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	2104      	movs	r1, #4
 800a690:	4620      	mov	r0, r4
 800a692:	f000 f851 	bl	800a738 <ucdr_check_final_buffer_behavior>
 800a696:	b1b0      	cbz	r0, 800a6c6 <ucdr_deserialize_int32_t+0xc6>
 800a698:	7d23      	ldrb	r3, [r4, #20]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	68a3      	ldr	r3, [r4, #8]
 800a69e:	d017      	beq.n	800a6d0 <ucdr_deserialize_int32_t+0xd0>
 800a6a0:	78db      	ldrb	r3, [r3, #3]
 800a6a2:	702b      	strb	r3, [r5, #0]
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	789b      	ldrb	r3, [r3, #2]
 800a6a8:	706b      	strb	r3, [r5, #1]
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	70ab      	strb	r3, [r5, #2]
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	70eb      	strb	r3, [r5, #3]
 800a6b6:	68a2      	ldr	r2, [r4, #8]
 800a6b8:	6923      	ldr	r3, [r4, #16]
 800a6ba:	3204      	adds	r2, #4
 800a6bc:	3304      	adds	r3, #4
 800a6be:	2104      	movs	r1, #4
 800a6c0:	60a2      	str	r2, [r4, #8]
 800a6c2:	6123      	str	r3, [r4, #16]
 800a6c4:	7561      	strb	r1, [r4, #21]
 800a6c6:	7da0      	ldrb	r0, [r4, #22]
 800a6c8:	f080 0001 	eor.w	r0, r0, #1
 800a6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	e7ef      	b.n	800a6b6 <ucdr_deserialize_int32_t+0xb6>
 800a6d6:	68a2      	ldr	r2, [r4, #8]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	7da0      	ldrb	r0, [r4, #22]
 800a6dc:	f884 8015 	strb.w	r8, [r4, #21]
 800a6e0:	1bd2      	subs	r2, r2, r7
 800a6e2:	1bdb      	subs	r3, r3, r7
 800a6e4:	60a2      	str	r2, [r4, #8]
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	f080 0001 	eor.w	r0, r0, #1
 800a6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f0:	68a3      	ldr	r3, [r4, #8]
 800a6f2:	789b      	ldrb	r3, [r3, #2]
 800a6f4:	706b      	strb	r3, [r5, #1]
 800a6f6:	1cab      	adds	r3, r5, #2
 800a6f8:	68a2      	ldr	r2, [r4, #8]
 800a6fa:	7852      	ldrb	r2, [r2, #1]
 800a6fc:	f803 2b01 	strb.w	r2, [r3], #1
 800a700:	68a2      	ldr	r2, [r4, #8]
 800a702:	7812      	ldrb	r2, [r2, #0]
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	e7b4      	b.n	800a672 <ucdr_deserialize_int32_t+0x72>
 800a708:	4631      	mov	r1, r6
 800a70a:	463a      	mov	r2, r7
 800a70c:	4628      	mov	r0, r5
 800a70e:	f007 f99a 	bl	8011a46 <memcpy>
 800a712:	68a1      	ldr	r1, [r4, #8]
 800a714:	464a      	mov	r2, r9
 800a716:	19e8      	adds	r0, r5, r7
 800a718:	f007 f995 	bl	8011a46 <memcpy>
 800a71c:	e7a9      	b.n	800a672 <ucdr_deserialize_int32_t+0x72>
 800a71e:	bf00      	nop

0800a720 <ucdr_check_buffer_available_for>:
 800a720:	7d83      	ldrb	r3, [r0, #22]
 800a722:	b93b      	cbnz	r3, 800a734 <ucdr_check_buffer_available_for+0x14>
 800a724:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a728:	4419      	add	r1, r3
 800a72a:	4288      	cmp	r0, r1
 800a72c:	bf34      	ite	cc
 800a72e:	2000      	movcc	r0, #0
 800a730:	2001      	movcs	r0, #1
 800a732:	4770      	bx	lr
 800a734:	2000      	movs	r0, #0
 800a736:	4770      	bx	lr

0800a738 <ucdr_check_final_buffer_behavior>:
 800a738:	7d83      	ldrb	r3, [r0, #22]
 800a73a:	b943      	cbnz	r3, 800a74e <ucdr_check_final_buffer_behavior+0x16>
 800a73c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a740:	4291      	cmp	r1, r2
 800a742:	b510      	push	{r4, lr}
 800a744:	4604      	mov	r4, r0
 800a746:	d205      	bcs.n	800a754 <ucdr_check_final_buffer_behavior+0x1c>
 800a748:	2301      	movs	r3, #1
 800a74a:	4618      	mov	r0, r3
 800a74c:	bd10      	pop	{r4, pc}
 800a74e:	2300      	movs	r3, #0
 800a750:	4618      	mov	r0, r3
 800a752:	4770      	bx	lr
 800a754:	6982      	ldr	r2, [r0, #24]
 800a756:	b13a      	cbz	r2, 800a768 <ucdr_check_final_buffer_behavior+0x30>
 800a758:	69c1      	ldr	r1, [r0, #28]
 800a75a:	4790      	blx	r2
 800a75c:	f080 0301 	eor.w	r3, r0, #1
 800a760:	b2db      	uxtb	r3, r3
 800a762:	75a0      	strb	r0, [r4, #22]
 800a764:	4618      	mov	r0, r3
 800a766:	bd10      	pop	{r4, pc}
 800a768:	2001      	movs	r0, #1
 800a76a:	75a0      	strb	r0, [r4, #22]
 800a76c:	e7fa      	b.n	800a764 <ucdr_check_final_buffer_behavior+0x2c>
 800a76e:	bf00      	nop

0800a770 <ucdr_set_on_full_buffer_callback>:
 800a770:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop

0800a778 <ucdr_init_buffer_origin_offset_endian>:
 800a778:	b430      	push	{r4, r5}
 800a77a:	9c02      	ldr	r4, [sp, #8]
 800a77c:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800a780:	6001      	str	r1, [r0, #0]
 800a782:	440a      	add	r2, r1
 800a784:	60c3      	str	r3, [r0, #12]
 800a786:	4421      	add	r1, r4
 800a788:	441c      	add	r4, r3
 800a78a:	2300      	movs	r3, #0
 800a78c:	6104      	str	r4, [r0, #16]
 800a78e:	7505      	strb	r5, [r0, #20]
 800a790:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a794:	bc30      	pop	{r4, r5}
 800a796:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800a79a:	7543      	strb	r3, [r0, #21]
 800a79c:	7583      	strb	r3, [r0, #22]
 800a79e:	4770      	bx	lr

0800a7a0 <ucdr_init_buffer_origin_offset>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	9c04      	ldr	r4, [sp, #16]
 800a7a6:	9400      	str	r4, [sp, #0]
 800a7a8:	2401      	movs	r4, #1
 800a7aa:	9401      	str	r4, [sp, #4]
 800a7ac:	f7ff ffe4 	bl	800a778 <ucdr_init_buffer_origin_offset_endian>
 800a7b0:	b002      	add	sp, #8
 800a7b2:	bd10      	pop	{r4, pc}

0800a7b4 <ucdr_init_buffer_origin>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	2400      	movs	r4, #0
 800a7ba:	9400      	str	r4, [sp, #0]
 800a7bc:	f7ff fff0 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800a7c0:	b002      	add	sp, #8
 800a7c2:	bd10      	pop	{r4, pc}

0800a7c4 <ucdr_init_buffer>:
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f7ff bff5 	b.w	800a7b4 <ucdr_init_buffer_origin>
 800a7ca:	bf00      	nop

0800a7cc <ucdr_alignment>:
 800a7cc:	fbb0 f3f1 	udiv	r3, r0, r1
 800a7d0:	fb03 0011 	mls	r0, r3, r1, r0
 800a7d4:	1a08      	subs	r0, r1, r0
 800a7d6:	3901      	subs	r1, #1
 800a7d8:	4008      	ands	r0, r1
 800a7da:	4770      	bx	lr

0800a7dc <ucdr_buffer_alignment>:
 800a7dc:	7d43      	ldrb	r3, [r0, #21]
 800a7de:	428b      	cmp	r3, r1
 800a7e0:	d208      	bcs.n	800a7f4 <ucdr_buffer_alignment+0x18>
 800a7e2:	6903      	ldr	r3, [r0, #16]
 800a7e4:	fbb3 f0f1 	udiv	r0, r3, r1
 800a7e8:	fb01 3010 	mls	r0, r1, r0, r3
 800a7ec:	1a08      	subs	r0, r1, r0
 800a7ee:	3901      	subs	r1, #1
 800a7f0:	4008      	ands	r0, r1
 800a7f2:	4770      	bx	lr
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	4770      	bx	lr

0800a7f8 <ucdr_align_to>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	460e      	mov	r6, r1
 800a7fe:	f7ff ffed 	bl	800a7dc <ucdr_buffer_alignment>
 800a802:	68a5      	ldr	r5, [r4, #8]
 800a804:	6863      	ldr	r3, [r4, #4]
 800a806:	6922      	ldr	r2, [r4, #16]
 800a808:	7566      	strb	r6, [r4, #21]
 800a80a:	4405      	add	r5, r0
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	4410      	add	r0, r2
 800a810:	bf28      	it	cs
 800a812:	462b      	movcs	r3, r5
 800a814:	6120      	str	r0, [r4, #16]
 800a816:	60a3      	str	r3, [r4, #8]
 800a818:	bd70      	pop	{r4, r5, r6, pc}
 800a81a:	bf00      	nop

0800a81c <ucdr_buffer_length>:
 800a81c:	6882      	ldr	r2, [r0, #8]
 800a81e:	6800      	ldr	r0, [r0, #0]
 800a820:	1a10      	subs	r0, r2, r0
 800a822:	4770      	bx	lr

0800a824 <ucdr_buffer_remaining>:
 800a824:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a828:	1a10      	subs	r0, r2, r0
 800a82a:	4770      	bx	lr

0800a82c <ucdr_check_final_buffer_behavior_array>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	7d83      	ldrb	r3, [r0, #22]
 800a830:	b963      	cbnz	r3, 800a84c <ucdr_check_final_buffer_behavior_array+0x20>
 800a832:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a836:	429a      	cmp	r2, r3
 800a838:	4604      	mov	r4, r0
 800a83a:	460d      	mov	r5, r1
 800a83c:	d308      	bcc.n	800a850 <ucdr_check_final_buffer_behavior_array+0x24>
 800a83e:	b139      	cbz	r1, 800a850 <ucdr_check_final_buffer_behavior_array+0x24>
 800a840:	6983      	ldr	r3, [r0, #24]
 800a842:	b163      	cbz	r3, 800a85e <ucdr_check_final_buffer_behavior_array+0x32>
 800a844:	69c1      	ldr	r1, [r0, #28]
 800a846:	4798      	blx	r3
 800a848:	75a0      	strb	r0, [r4, #22]
 800a84a:	b108      	cbz	r0, 800a850 <ucdr_check_final_buffer_behavior_array+0x24>
 800a84c:	2000      	movs	r0, #0
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff ffe7 	bl	800a824 <ucdr_buffer_remaining>
 800a856:	42a8      	cmp	r0, r5
 800a858:	bf28      	it	cs
 800a85a:	4628      	movcs	r0, r5
 800a85c:	bd38      	pop	{r3, r4, r5, pc}
 800a85e:	2301      	movs	r3, #1
 800a860:	7583      	strb	r3, [r0, #22]
 800a862:	e7f3      	b.n	800a84c <ucdr_check_final_buffer_behavior_array+0x20>

0800a864 <ucdr_advance_buffer>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4604      	mov	r4, r0
 800a868:	460d      	mov	r5, r1
 800a86a:	f7ff ff59 	bl	800a720 <ucdr_check_buffer_available_for>
 800a86e:	b178      	cbz	r0, 800a890 <ucdr_advance_buffer+0x2c>
 800a870:	68a3      	ldr	r3, [r4, #8]
 800a872:	6921      	ldr	r1, [r4, #16]
 800a874:	442b      	add	r3, r5
 800a876:	60a3      	str	r3, [r4, #8]
 800a878:	2301      	movs	r3, #1
 800a87a:	4429      	add	r1, r5
 800a87c:	7563      	strb	r3, [r4, #21]
 800a87e:	6121      	str	r1, [r4, #16]
 800a880:	bd38      	pop	{r3, r4, r5, pc}
 800a882:	68a2      	ldr	r2, [r4, #8]
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	4402      	add	r2, r0
 800a888:	4403      	add	r3, r0
 800a88a:	1a2d      	subs	r5, r5, r0
 800a88c:	60a2      	str	r2, [r4, #8]
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	2201      	movs	r2, #1
 800a892:	4629      	mov	r1, r5
 800a894:	4620      	mov	r0, r4
 800a896:	f7ff ffc9 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d1f1      	bne.n	800a882 <ucdr_advance_buffer+0x1e>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	7563      	strb	r3, [r4, #21]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}

0800a8a4 <uxr_buffer_delete_entity>:
 800a8a4:	b530      	push	{r4, r5, lr}
 800a8a6:	b08f      	sub	sp, #60	@ 0x3c
 800a8a8:	2403      	movs	r4, #3
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	e9cd 4500 	strd	r4, r5, [sp]
 800a8b0:	9202      	str	r2, [sp, #8]
 800a8b2:	ab06      	add	r3, sp, #24
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	9103      	str	r1, [sp, #12]
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	f001 f87b 	bl	800b9b4 <uxr_prepare_stream_to_write_submessage>
 800a8be:	b918      	cbnz	r0, 800a8c8 <uxr_buffer_delete_entity+0x24>
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	b00f      	add	sp, #60	@ 0x3c
 800a8c6:	bd30      	pop	{r4, r5, pc}
 800a8c8:	9902      	ldr	r1, [sp, #8]
 800a8ca:	aa05      	add	r2, sp, #20
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f001 f9ab 	bl	800bc28 <uxr_init_base_object_request>
 800a8d2:	a905      	add	r1, sp, #20
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	a806      	add	r0, sp, #24
 800a8d8:	f002 fafa 	bl	800ced0 <uxr_serialize_DELETE_Payload>
 800a8dc:	4620      	mov	r0, r4
 800a8de:	b00f      	add	sp, #60	@ 0x3c
 800a8e0:	bd30      	pop	{r4, r5, pc}
 800a8e2:	bf00      	nop

0800a8e4 <uxr_common_create_entity>:
 800a8e4:	b530      	push	{r4, r5, lr}
 800a8e6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a8ea:	b08d      	sub	sp, #52	@ 0x34
 800a8ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a8f0:	2d01      	cmp	r5, #1
 800a8f2:	bf0c      	ite	eq
 800a8f4:	f003 0201 	andeq.w	r2, r3, #1
 800a8f8:	2200      	movne	r2, #0
 800a8fa:	330e      	adds	r3, #14
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	441a      	add	r2, r3
 800a900:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 800a904:	9001      	str	r0, [sp, #4]
 800a906:	2101      	movs	r1, #1
 800a908:	9100      	str	r1, [sp, #0]
 800a90a:	b292      	uxth	r2, r2
 800a90c:	9903      	ldr	r1, [sp, #12]
 800a90e:	ab04      	add	r3, sp, #16
 800a910:	4620      	mov	r0, r4
 800a912:	f001 f84f 	bl	800b9b4 <uxr_prepare_stream_to_write_submessage>
 800a916:	b918      	cbnz	r0, 800a920 <uxr_common_create_entity+0x3c>
 800a918:	4604      	mov	r4, r0
 800a91a:	4620      	mov	r0, r4
 800a91c:	b00d      	add	sp, #52	@ 0x34
 800a91e:	bd30      	pop	{r4, r5, pc}
 800a920:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a922:	9902      	ldr	r1, [sp, #8]
 800a924:	4620      	mov	r0, r4
 800a926:	f001 f97f 	bl	800bc28 <uxr_init_base_object_request>
 800a92a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a92c:	4604      	mov	r4, r0
 800a92e:	a804      	add	r0, sp, #16
 800a930:	f002 fa22 	bl	800cd78 <uxr_serialize_CREATE_Payload>
 800a934:	4620      	mov	r0, r4
 800a936:	b00d      	add	sp, #52	@ 0x34
 800a938:	bd30      	pop	{r4, r5, pc}
 800a93a:	bf00      	nop

0800a93c <uxr_buffer_create_participant_bin>:
 800a93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a93e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800a942:	ac11      	add	r4, sp, #68	@ 0x44
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 800a948:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 800a94c:	2103      	movs	r1, #3
 800a94e:	7221      	strb	r1, [r4, #8]
 800a950:	2301      	movs	r3, #1
 800a952:	2100      	movs	r1, #0
 800a954:	7123      	strb	r3, [r4, #4]
 800a956:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 800a95a:	9202      	str	r2, [sp, #8]
 800a95c:	4605      	mov	r5, r0
 800a95e:	f88d 1014 	strb.w	r1, [sp, #20]
 800a962:	b1ce      	cbz	r6, 800a998 <uxr_buffer_create_participant_bin+0x5c>
 800a964:	f88d 301c 	strb.w	r3, [sp, #28]
 800a968:	9608      	str	r6, [sp, #32]
 800a96a:	a809      	add	r0, sp, #36	@ 0x24
 800a96c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a970:	a915      	add	r1, sp, #84	@ 0x54
 800a972:	f7ff ff27 	bl	800a7c4 <ucdr_init_buffer>
 800a976:	a905      	add	r1, sp, #20
 800a978:	a809      	add	r0, sp, #36	@ 0x24
 800a97a:	f001 feb1 	bl	800c6e0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800a97e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a980:	9401      	str	r4, [sp, #4]
 800a982:	b283      	uxth	r3, r0
 800a984:	9700      	str	r7, [sp, #0]
 800a986:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a98a:	60e0      	str	r0, [r4, #12]
 800a98c:	4628      	mov	r0, r5
 800a98e:	f7ff ffa9 	bl	800a8e4 <uxr_common_create_entity>
 800a992:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 800a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a998:	f88d 601c 	strb.w	r6, [sp, #28]
 800a99c:	e7e5      	b.n	800a96a <uxr_buffer_create_participant_bin+0x2e>
 800a99e:	bf00      	nop

0800a9a0 <uxr_buffer_create_topic_bin>:
 800a9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a2:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a9a6:	ac13      	add	r4, sp, #76	@ 0x4c
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	9105      	str	r1, [sp, #20]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	a997      	add	r1, sp, #604	@ 0x25c
 800a9b0:	2602      	movs	r6, #2
 800a9b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800a9b6:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 800a9ba:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 800a9be:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 800a9c0:	f000 f8ea 	bl	800ab98 <uxr_object_id_to_raw>
 800a9c4:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 800a9c6:	9206      	str	r2, [sp, #24]
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	7223      	strb	r3, [r4, #8]
 800a9ce:	a80b      	add	r0, sp, #44	@ 0x2c
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9d6:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800a9da:	a917      	add	r1, sp, #92	@ 0x5c
 800a9dc:	f88d 301c 	strb.w	r3, [sp, #28]
 800a9e0:	960a      	str	r6, [sp, #40]	@ 0x28
 800a9e2:	f7ff feef 	bl	800a7c4 <ucdr_init_buffer>
 800a9e6:	a906      	add	r1, sp, #24
 800a9e8:	a80b      	add	r0, sp, #44	@ 0x2c
 800a9ea:	f001 fe9b 	bl	800c724 <uxr_serialize_OBJK_Topic_Binary>
 800a9ee:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a9f0:	9401      	str	r4, [sp, #4]
 800a9f2:	9700      	str	r7, [sp, #0]
 800a9f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	b2b3      	uxth	r3, r6
 800a9fc:	60e6      	str	r6, [r4, #12]
 800a9fe:	f7ff ff71 	bl	800a8e4 <uxr_common_create_entity>
 800aa02:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800aa06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa08 <uxr_buffer_create_publisher_bin>:
 800aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa0a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800aa0e:	ac0e      	add	r4, sp, #56	@ 0x38
 800aa10:	4605      	mov	r5, r0
 800aa12:	9105      	str	r1, [sp, #20]
 800aa14:	4618      	mov	r0, r3
 800aa16:	2603      	movs	r6, #3
 800aa18:	a992      	add	r1, sp, #584	@ 0x248
 800aa1a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800aa1e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800aa22:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800aa26:	f000 f8b7 	bl	800ab98 <uxr_object_id_to_raw>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	a806      	add	r0, sp, #24
 800aa2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa32:	a912      	add	r1, sp, #72	@ 0x48
 800aa34:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800aa38:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800aa3c:	7226      	strb	r6, [r4, #8]
 800aa3e:	f7ff fec1 	bl	800a7c4 <ucdr_init_buffer>
 800aa42:	a993      	add	r1, sp, #588	@ 0x24c
 800aa44:	a806      	add	r0, sp, #24
 800aa46:	f001 ff21 	bl	800c88c <uxr_serialize_OBJK_Publisher_Binary>
 800aa4a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa4c:	9700      	str	r7, [sp, #0]
 800aa4e:	9401      	str	r4, [sp, #4]
 800aa50:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800aa54:	4628      	mov	r0, r5
 800aa56:	b2b3      	uxth	r3, r6
 800aa58:	60e6      	str	r6, [r4, #12]
 800aa5a:	f7ff ff43 	bl	800a8e4 <uxr_common_create_entity>
 800aa5e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa64 <uxr_buffer_create_datawriter_bin>:
 800aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800aa6c:	ac1d      	add	r4, sp, #116	@ 0x74
 800aa6e:	2505      	movs	r5, #5
 800aa70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800aa74:	9105      	str	r1, [sp, #20]
 800aa76:	4606      	mov	r6, r0
 800aa78:	a9a1      	add	r1, sp, #644	@ 0x284
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	7125      	strb	r5, [r4, #4]
 800aa7e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800aa82:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800aa86:	2703      	movs	r7, #3
 800aa88:	f000 f886 	bl	800ab98 <uxr_object_id_to_raw>
 800aa8c:	a90e      	add	r1, sp, #56	@ 0x38
 800aa8e:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800aa90:	7227      	strb	r7, [r4, #8]
 800aa92:	f000 f881 	bl	800ab98 <uxr_object_id_to_raw>
 800aa96:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800aa9a:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 800aa9e:	3d00      	subs	r5, #0
 800aaa0:	f04f 0300 	mov.w	r3, #0
 800aaa4:	bf18      	it	ne
 800aaa6:	2501      	movne	r5, #1
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800aaae:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800aab2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800aab6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800aaba:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800aabe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800aac2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800aac6:	bb89      	cbnz	r1, 800ab2c <uxr_buffer_create_datawriter_bin+0xc8>
 800aac8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800aacc:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800aad0:	f04f 0c13 	mov.w	ip, #19
 800aad4:	250b      	movs	r5, #11
 800aad6:	2221      	movs	r2, #33	@ 0x21
 800aad8:	2111      	movs	r1, #17
 800aada:	2009      	movs	r0, #9
 800aadc:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800aae0:	b923      	cbnz	r3, 800aaec <uxr_buffer_create_datawriter_bin+0x88>
 800aae2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800aae6:	4672      	mov	r2, lr
 800aae8:	4661      	mov	r1, ip
 800aaea:	4628      	mov	r0, r5
 800aaec:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d025      	beq.n	800ab40 <uxr_buffer_create_datawriter_bin+0xdc>
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d029      	beq.n	800ab4c <uxr_buffer_create_datawriter_bin+0xe8>
 800aaf8:	b32b      	cbz	r3, 800ab46 <uxr_buffer_create_datawriter_bin+0xe2>
 800aafa:	a806      	add	r0, sp, #24
 800aafc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab00:	a921      	add	r1, sp, #132	@ 0x84
 800ab02:	f7ff fe5f 	bl	800a7c4 <ucdr_init_buffer>
 800ab06:	a90e      	add	r1, sp, #56	@ 0x38
 800ab08:	a806      	add	r0, sp, #24
 800ab0a:	f001 ff35 	bl	800c978 <uxr_serialize_OBJK_DataWriter_Binary>
 800ab0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab10:	9401      	str	r4, [sp, #4]
 800ab12:	b283      	uxth	r3, r0
 800ab14:	f8cd 8000 	str.w	r8, [sp]
 800ab18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ab1c:	60e0      	str	r0, [r4, #12]
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7ff fee0 	bl	800a8e4 <uxr_common_create_entity>
 800ab24:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab2c:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ab30:	f04f 0c12 	mov.w	ip, #18
 800ab34:	250a      	movs	r5, #10
 800ab36:	2220      	movs	r2, #32
 800ab38:	2110      	movs	r1, #16
 800ab3a:	2008      	movs	r0, #8
 800ab3c:	2702      	movs	r7, #2
 800ab3e:	e7cd      	b.n	800aadc <uxr_buffer_create_datawriter_bin+0x78>
 800ab40:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ab44:	e7d9      	b.n	800aafa <uxr_buffer_create_datawriter_bin+0x96>
 800ab46:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ab4a:	e7d6      	b.n	800aafa <uxr_buffer_create_datawriter_bin+0x96>
 800ab4c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ab50:	e7d3      	b.n	800aafa <uxr_buffer_create_datawriter_bin+0x96>
 800ab52:	bf00      	nop

0800ab54 <uxr_object_id>:
 800ab54:	b082      	sub	sp, #8
 800ab56:	2300      	movs	r3, #0
 800ab58:	f88d 1006 	strb.w	r1, [sp, #6]
 800ab5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab60:	f360 030f 	bfi	r3, r0, #0, #16
 800ab64:	f362 431f 	bfi	r3, r2, #16, #16
 800ab68:	4618      	mov	r0, r3
 800ab6a:	b002      	add	sp, #8
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop

0800ab70 <uxr_object_id_from_raw>:
 800ab70:	7843      	ldrb	r3, [r0, #1]
 800ab72:	7801      	ldrb	r1, [r0, #0]
 800ab74:	b082      	sub	sp, #8
 800ab76:	f003 000f 	and.w	r0, r3, #15
 800ab7a:	f88d 0006 	strb.w	r0, [sp, #6]
 800ab7e:	091b      	lsrs	r3, r3, #4
 800ab80:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ab84:	2200      	movs	r2, #0
 800ab86:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800ab8a:	f363 020f 	bfi	r2, r3, #0, #16
 800ab8e:	f361 421f 	bfi	r2, r1, #16, #16
 800ab92:	4610      	mov	r0, r2
 800ab94:	b002      	add	sp, #8
 800ab96:	4770      	bx	lr

0800ab98 <uxr_object_id_to_raw>:
 800ab98:	4602      	mov	r2, r0
 800ab9a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ab9e:	b082      	sub	sp, #8
 800aba0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800aba4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800aba8:	700a      	strb	r2, [r1, #0]
 800abaa:	704b      	strb	r3, [r1, #1]
 800abac:	b002      	add	sp, #8
 800abae:	4770      	bx	lr

0800abb0 <on_get_fragmentation_info>:
 800abb0:	b500      	push	{lr}
 800abb2:	b08b      	sub	sp, #44	@ 0x2c
 800abb4:	4601      	mov	r1, r0
 800abb6:	2204      	movs	r2, #4
 800abb8:	a802      	add	r0, sp, #8
 800abba:	f7ff fe03 	bl	800a7c4 <ucdr_init_buffer>
 800abbe:	f10d 0305 	add.w	r3, sp, #5
 800abc2:	a802      	add	r0, sp, #8
 800abc4:	f10d 0206 	add.w	r2, sp, #6
 800abc8:	a901      	add	r1, sp, #4
 800abca:	f001 f9b1 	bl	800bf30 <uxr_read_submessage_header>
 800abce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800abd2:	2b0d      	cmp	r3, #13
 800abd4:	d003      	beq.n	800abde <on_get_fragmentation_info+0x2e>
 800abd6:	2000      	movs	r0, #0
 800abd8:	b00b      	add	sp, #44	@ 0x2c
 800abda:	f85d fb04 	ldr.w	pc, [sp], #4
 800abde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800abe2:	f013 0f02 	tst.w	r3, #2
 800abe6:	bf14      	ite	ne
 800abe8:	2002      	movne	r0, #2
 800abea:	2001      	moveq	r0, #1
 800abec:	b00b      	add	sp, #44	@ 0x2c
 800abee:	f85d fb04 	ldr.w	pc, [sp], #4
 800abf2:	bf00      	nop

0800abf4 <read_submessage_get_info>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	2500      	movs	r5, #0
 800abf8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800abfc:	4604      	mov	r4, r0
 800abfe:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ac02:	460e      	mov	r6, r1
 800ac04:	a810      	add	r0, sp, #64	@ 0x40
 800ac06:	4629      	mov	r1, r5
 800ac08:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ac0c:	f006 fe52 	bl	80118b4 <memset>
 800ac10:	a903      	add	r1, sp, #12
 800ac12:	4630      	mov	r0, r6
 800ac14:	f002 f948 	bl	800cea8 <uxr_deserialize_GET_INFO_Payload>
 800ac18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ac1c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fff9 	bl	800bc18 <uxr_session_header_offset>
 800ac26:	462b      	mov	r3, r5
 800ac28:	9000      	str	r0, [sp, #0]
 800ac2a:	a905      	add	r1, sp, #20
 800ac2c:	a808      	add	r0, sp, #32
 800ac2e:	220c      	movs	r2, #12
 800ac30:	f7ff fdb6 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800ac34:	a910      	add	r1, sp, #64	@ 0x40
 800ac36:	a808      	add	r0, sp, #32
 800ac38:	f002 f9a8 	bl	800cf8c <uxr_serialize_INFO_Payload>
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4629      	mov	r1, r5
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 ff90 	bl	800bb68 <uxr_stamp_session_header>
 800ac48:	a808      	add	r0, sp, #32
 800ac4a:	f7ff fde7 	bl	800a81c <ucdr_buffer_length>
 800ac4e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ac50:	4602      	mov	r2, r0
 800ac52:	a905      	add	r1, sp, #20
 800ac54:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ac58:	47a0      	blx	r4
 800ac5a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}

0800ac60 <write_submessage_acknack.isra.0>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	b092      	sub	sp, #72	@ 0x48
 800ac64:	4605      	mov	r5, r0
 800ac66:	460e      	mov	r6, r1
 800ac68:	4614      	mov	r4, r2
 800ac6a:	f000 ffd5 	bl	800bc18 <uxr_session_header_offset>
 800ac6e:	a905      	add	r1, sp, #20
 800ac70:	9000      	str	r0, [sp, #0]
 800ac72:	2300      	movs	r3, #0
 800ac74:	a80a      	add	r0, sp, #40	@ 0x28
 800ac76:	2211      	movs	r2, #17
 800ac78:	f7ff fd92 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800ac7c:	2218      	movs	r2, #24
 800ac7e:	fb02 5404 	mla	r4, r2, r4, r5
 800ac82:	2300      	movs	r3, #0
 800ac84:	2205      	movs	r2, #5
 800ac86:	3450      	adds	r4, #80	@ 0x50
 800ac88:	a80a      	add	r0, sp, #40	@ 0x28
 800ac8a:	210a      	movs	r1, #10
 800ac8c:	f001 f936 	bl	800befc <uxr_buffer_submessage_header>
 800ac90:	a903      	add	r1, sp, #12
 800ac92:	4620      	mov	r0, r4
 800ac94:	f004 ff14 	bl	800fac0 <uxr_compute_acknack>
 800ac98:	a903      	add	r1, sp, #12
 800ac9a:	ba43      	rev16	r3, r0
 800ac9c:	a80a      	add	r0, sp, #40	@ 0x28
 800ac9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aca2:	f88d 6010 	strb.w	r6, [sp, #16]
 800aca6:	f002 f9e1 	bl	800d06c <uxr_serialize_ACKNACK_Payload>
 800acaa:	2200      	movs	r2, #0
 800acac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acae:	4611      	mov	r1, r2
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 ff59 	bl	800bb68 <uxr_stamp_session_header>
 800acb6:	a80a      	add	r0, sp, #40	@ 0x28
 800acb8:	f7ff fdb0 	bl	800a81c <ucdr_buffer_length>
 800acbc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800acbe:	4602      	mov	r2, r0
 800acc0:	a905      	add	r1, sp, #20
 800acc2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800acc6:	47a0      	blx	r4
 800acc8:	b012      	add	sp, #72	@ 0x48
 800acca:	bd70      	pop	{r4, r5, r6, pc}

0800accc <uxr_init_session>:
 800accc:	b5d0      	push	{r4, r6, r7, lr}
 800acce:	2300      	movs	r3, #0
 800acd0:	2600      	movs	r6, #0
 800acd2:	2700      	movs	r7, #0
 800acd4:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 800acd8:	4604      	mov	r4, r0
 800acda:	6701      	str	r1, [r0, #112]	@ 0x70
 800acdc:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 800ace0:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 800ace4:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 800ace8:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 800acec:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 800acf0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800acf4:	2181      	movs	r1, #129	@ 0x81
 800acf6:	f000 fea1 	bl	800ba3c <uxr_init_session_info>
 800acfa:	f104 0008 	add.w	r0, r4, #8
 800acfe:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800ad02:	f001 b817 	b.w	800bd34 <uxr_init_stream_storage>
 800ad06:	bf00      	nop

0800ad08 <uxr_set_status_callback>:
 800ad08:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop

0800ad10 <uxr_set_topic_callback>:
 800ad10:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop

0800ad18 <uxr_set_request_callback>:
 800ad18:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop

0800ad20 <uxr_set_reply_callback>:
 800ad20:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop

0800ad28 <uxr_create_output_best_effort_stream>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	e9cd 2100 	strd	r2, r1, [sp]
 800ad30:	4604      	mov	r4, r0
 800ad32:	f000 ff71 	bl	800bc18 <uxr_session_header_offset>
 800ad36:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f104 0008 	add.w	r0, r4, #8
 800ad40:	b004      	add	sp, #16
 800ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad46:	f001 b83f 	b.w	800bdc8 <uxr_add_output_best_effort_buffer>
 800ad4a:	bf00      	nop

0800ad4c <uxr_create_output_reliable_stream>:
 800ad4c:	b530      	push	{r4, r5, lr}
 800ad4e:	b089      	sub	sp, #36	@ 0x24
 800ad50:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ad54:	9303      	str	r3, [sp, #12]
 800ad56:	4604      	mov	r4, r0
 800ad58:	f000 ff5e 	bl	800bc18 <uxr_session_header_offset>
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ad62:	9905      	ldr	r1, [sp, #20]
 800ad64:	9500      	str	r5, [sp, #0]
 800ad66:	f104 0008 	add.w	r0, r4, #8
 800ad6a:	f001 f83f 	bl	800bdec <uxr_add_output_reliable_buffer>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	b2c3      	uxtb	r3, r0
 800ad72:	f363 0207 	bfi	r2, r3, #0, #8
 800ad76:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ad7a:	f363 220f 	bfi	r2, r3, #8, #8
 800ad7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ad82:	f363 4217 	bfi	r2, r3, #16, #8
 800ad86:	0e03      	lsrs	r3, r0, #24
 800ad88:	f363 621f 	bfi	r2, r3, #24, #8
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	b009      	add	sp, #36	@ 0x24
 800ad90:	bd30      	pop	{r4, r5, pc}
 800ad92:	bf00      	nop

0800ad94 <uxr_create_input_best_effort_stream>:
 800ad94:	b082      	sub	sp, #8
 800ad96:	3008      	adds	r0, #8
 800ad98:	b002      	add	sp, #8
 800ad9a:	f001 b841 	b.w	800be20 <uxr_add_input_best_effort_buffer>
 800ad9e:	bf00      	nop

0800ada0 <uxr_create_input_reliable_stream>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	4c0b      	ldr	r4, [pc, #44]	@ (800add4 <uxr_create_input_reliable_stream+0x34>)
 800ada6:	9400      	str	r4, [sp, #0]
 800ada8:	3008      	adds	r0, #8
 800adaa:	f001 f84f 	bl	800be4c <uxr_add_input_reliable_buffer>
 800adae:	2200      	movs	r2, #0
 800adb0:	b2c3      	uxtb	r3, r0
 800adb2:	f363 0207 	bfi	r2, r3, #0, #8
 800adb6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800adba:	f363 220f 	bfi	r2, r3, #8, #8
 800adbe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800adc2:	f363 4217 	bfi	r2, r3, #16, #8
 800adc6:	0e03      	lsrs	r3, r0, #24
 800adc8:	f363 621f 	bfi	r2, r3, #24, #8
 800adcc:	4610      	mov	r0, r2
 800adce:	b004      	add	sp, #16
 800add0:	bd10      	pop	{r4, pc}
 800add2:	bf00      	nop
 800add4:	0800abb1 	.word	0x0800abb1

0800add8 <uxr_epoch_nanos>:
 800add8:	b510      	push	{r4, lr}
 800adda:	4604      	mov	r4, r0
 800addc:	f001 f8f0 	bl	800bfc0 <uxr_nanos>
 800ade0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ade4:	1ac0      	subs	r0, r0, r3
 800ade6:	eb61 0102 	sbc.w	r1, r1, r2
 800adea:	bd10      	pop	{r4, pc}

0800adec <uxr_flash_output_streams>:
 800adec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf0:	7e03      	ldrb	r3, [r0, #24]
 800adf2:	b084      	sub	sp, #16
 800adf4:	4604      	mov	r4, r0
 800adf6:	b1fb      	cbz	r3, 800ae38 <uxr_flash_output_streams+0x4c>
 800adf8:	f04f 0900 	mov.w	r9, #0
 800adfc:	4648      	mov	r0, r9
 800adfe:	f10d 0802 	add.w	r8, sp, #2
 800ae02:	af03      	add	r7, sp, #12
 800ae04:	ae02      	add	r6, sp, #8
 800ae06:	2201      	movs	r2, #1
 800ae08:	4611      	mov	r1, r2
 800ae0a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ae0e:	f000 ff3b 	bl	800bc88 <uxr_stream_id>
 800ae12:	3508      	adds	r5, #8
 800ae14:	4684      	mov	ip, r0
 800ae16:	4643      	mov	r3, r8
 800ae18:	4628      	mov	r0, r5
 800ae1a:	463a      	mov	r2, r7
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	f8cd c004 	str.w	ip, [sp, #4]
 800ae22:	f004 fed5 	bl	800fbd0 <uxr_prepare_best_effort_buffer_to_send>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d13d      	bne.n	800aea6 <uxr_flash_output_streams+0xba>
 800ae2a:	7e23      	ldrb	r3, [r4, #24]
 800ae2c:	f109 0901 	add.w	r9, r9, #1
 800ae30:	fa5f f089 	uxtb.w	r0, r9
 800ae34:	4283      	cmp	r3, r0
 800ae36:	d8e6      	bhi.n	800ae06 <uxr_flash_output_streams+0x1a>
 800ae38:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ae3c:	b383      	cbz	r3, 800aea0 <uxr_flash_output_streams+0xb4>
 800ae3e:	f04f 0900 	mov.w	r9, #0
 800ae42:	4648      	mov	r0, r9
 800ae44:	f10d 0802 	add.w	r8, sp, #2
 800ae48:	af03      	add	r7, sp, #12
 800ae4a:	ae02      	add	r6, sp, #8
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	2102      	movs	r1, #2
 800ae50:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ae54:	f000 ff18 	bl	800bc88 <uxr_stream_id>
 800ae58:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ae5c:	3520      	adds	r5, #32
 800ae5e:	9001      	str	r0, [sp, #4]
 800ae60:	e00c      	b.n	800ae7c <uxr_flash_output_streams+0x90>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ae68:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ae6c:	f000 fe7c 	bl	800bb68 <uxr_stamp_session_header>
 800ae70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ae72:	9a03      	ldr	r2, [sp, #12]
 800ae74:	9902      	ldr	r1, [sp, #8]
 800ae76:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ae7a:	47d0      	blx	sl
 800ae7c:	4643      	mov	r3, r8
 800ae7e:	463a      	mov	r2, r7
 800ae80:	4631      	mov	r1, r6
 800ae82:	4628      	mov	r0, r5
 800ae84:	f005 f8b8 	bl	800fff8 <uxr_prepare_next_reliable_buffer_to_send>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e8      	bne.n	800ae62 <uxr_flash_output_streams+0x76>
 800ae90:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ae94:	f109 0901 	add.w	r9, r9, #1
 800ae98:	fa5f f089 	uxtb.w	r0, r9
 800ae9c:	4283      	cmp	r3, r0
 800ae9e:	d8d5      	bhi.n	800ae4c <uxr_flash_output_streams+0x60>
 800aea0:	b004      	add	sp, #16
 800aea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800aeac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fe59 	bl	800bb68 <uxr_stamp_session_header>
 800aeb6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800aeb8:	9a03      	ldr	r2, [sp, #12]
 800aeba:	9902      	ldr	r1, [sp, #8]
 800aebc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800aec0:	47a8      	blx	r5
 800aec2:	f109 0901 	add.w	r9, r9, #1
 800aec6:	7e23      	ldrb	r3, [r4, #24]
 800aec8:	fa5f f089 	uxtb.w	r0, r9
 800aecc:	4283      	cmp	r3, r0
 800aece:	d89a      	bhi.n	800ae06 <uxr_flash_output_streams+0x1a>
 800aed0:	e7b2      	b.n	800ae38 <uxr_flash_output_streams+0x4c>
 800aed2:	bf00      	nop

0800aed4 <read_submessage_info>:
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed8:	460d      	mov	r5, r1
 800aeda:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800aede:	4669      	mov	r1, sp
 800aee0:	4607      	mov	r7, r0
 800aee2:	4628      	mov	r0, r5
 800aee4:	f001 fee6 	bl	800ccb4 <uxr_deserialize_BaseObjectReply>
 800aee8:	a902      	add	r1, sp, #8
 800aeea:	4604      	mov	r4, r0
 800aeec:	4628      	mov	r0, r5
 800aeee:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800aef2:	f7fe fca3 	bl	800983c <ucdr_deserialize_bool>
 800aef6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800aefa:	4004      	ands	r4, r0
 800aefc:	b2e4      	uxtb	r4, r4
 800aefe:	b95b      	cbnz	r3, 800af18 <read_submessage_info+0x44>
 800af00:	a987      	add	r1, sp, #540	@ 0x21c
 800af02:	4628      	mov	r0, r5
 800af04:	f7fe fc9a 	bl	800983c <ucdr_deserialize_bool>
 800af08:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800af0c:	4606      	mov	r6, r0
 800af0e:	b94b      	cbnz	r3, 800af24 <read_submessage_info+0x50>
 800af10:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af18:	a903      	add	r1, sp, #12
 800af1a:	4628      	mov	r0, r5
 800af1c:	f001 fd58 	bl	800c9d0 <uxr_deserialize_ObjectVariant>
 800af20:	4004      	ands	r4, r0
 800af22:	e7ed      	b.n	800af00 <read_submessage_info+0x2c>
 800af24:	a988      	add	r1, sp, #544	@ 0x220
 800af26:	4628      	mov	r0, r5
 800af28:	f7fe fcb8 	bl	800989c <ucdr_deserialize_uint8_t>
 800af2c:	4234      	tst	r4, r6
 800af2e:	d0ef      	beq.n	800af10 <read_submessage_info+0x3c>
 800af30:	2800      	cmp	r0, #0
 800af32:	d0ed      	beq.n	800af10 <read_submessage_info+0x3c>
 800af34:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800af38:	2b0d      	cmp	r3, #13
 800af3a:	d1e9      	bne.n	800af10 <read_submessage_info+0x3c>
 800af3c:	4628      	mov	r0, r5
 800af3e:	a98a      	add	r1, sp, #552	@ 0x228
 800af40:	f7ff fa52 	bl	800a3e8 <ucdr_deserialize_int16_t>
 800af44:	b140      	cbz	r0, 800af58 <read_submessage_info+0x84>
 800af46:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd07      	ble.n	800af5e <read_submessage_info+0x8a>
 800af4e:	f1b8 0f00 	cmp.w	r8, #0
 800af52:	bf14      	ite	ne
 800af54:	2001      	movne	r0, #1
 800af56:	2002      	moveq	r0, #2
 800af58:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800af5c:	e7d8      	b.n	800af10 <read_submessage_info+0x3c>
 800af5e:	2000      	movs	r0, #0
 800af60:	e7fa      	b.n	800af58 <read_submessage_info+0x84>
 800af62:	bf00      	nop

0800af64 <read_submessage_list>:
 800af64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af68:	b098      	sub	sp, #96	@ 0x60
 800af6a:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 800b270 <read_submessage_list+0x30c>
 800af6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800af70:	4604      	mov	r4, r0
 800af72:	4688      	mov	r8, r1
 800af74:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 800af78:	aa0e      	add	r2, sp, #56	@ 0x38
 800af7a:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 800af7e:	4640      	mov	r0, r8
 800af80:	f000 ffd6 	bl	800bf30 <uxr_read_submessage_header>
 800af84:	2800      	cmp	r0, #0
 800af86:	f000 813d 	beq.w	800b204 <read_submessage_list+0x2a0>
 800af8a:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 800af8e:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 800af92:	3b02      	subs	r3, #2
 800af94:	2b0d      	cmp	r3, #13
 800af96:	d8ed      	bhi.n	800af74 <read_submessage_list+0x10>
 800af98:	a101      	add	r1, pc, #4	@ (adr r1, 800afa0 <read_submessage_list+0x3c>)
 800af9a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b1fb 	.word	0x0800b1fb
 800afa4:	0800af75 	.word	0x0800af75
 800afa8:	0800b1eb 	.word	0x0800b1eb
 800afac:	0800b18f 	.word	0x0800b18f
 800afb0:	0800b185 	.word	0x0800b185
 800afb4:	0800af75 	.word	0x0800af75
 800afb8:	0800af75 	.word	0x0800af75
 800afbc:	0800b0e7 	.word	0x0800b0e7
 800afc0:	0800b079 	.word	0x0800b079
 800afc4:	0800b037 	.word	0x0800b037
 800afc8:	0800af75 	.word	0x0800af75
 800afcc:	0800af75 	.word	0x0800af75
 800afd0:	0800af75 	.word	0x0800af75
 800afd4:	0800afd9 	.word	0x0800afd9
 800afd8:	a912      	add	r1, sp, #72	@ 0x48
 800afda:	4640      	mov	r0, r8
 800afdc:	f002 f896 	bl	800d10c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800afe0:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 800afe4:	2d00      	cmp	r5, #0
 800afe6:	f000 8115 	beq.w	800b214 <read_submessage_list+0x2b0>
 800afea:	f000 ffe9 	bl	800bfc0 <uxr_nanos>
 800afee:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800aff0:	460b      	mov	r3, r1
 800aff2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800aff4:	2700      	movs	r7, #0
 800aff6:	fbc9 6701 	smlal	r6, r7, r9, r1
 800affa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800affe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b000:	4602      	mov	r2, r0
 800b002:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b004:	460e      	mov	r6, r1
 800b006:	2700      	movs	r7, #0
 800b008:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800b00c:	9106      	str	r1, [sp, #24]
 800b00e:	fbc9 6700 	smlal	r6, r7, r9, r0
 800b012:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b014:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b018:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b01a:	2700      	movs	r7, #0
 800b01c:	4608      	mov	r0, r1
 800b01e:	4639      	mov	r1, r7
 800b020:	fbc9 0106 	smlal	r0, r1, r9, r6
 800b024:	e9cd 0100 	strd	r0, r1, [sp]
 800b028:	4620      	mov	r0, r4
 800b02a:	47a8      	blx	r5
 800b02c:	f04f 0301 	mov.w	r3, #1
 800b030:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800b034:	e79e      	b.n	800af74 <read_submessage_list+0x10>
 800b036:	a912      	add	r1, sp, #72	@ 0x48
 800b038:	4640      	mov	r0, r8
 800b03a:	f002 f855 	bl	800d0e8 <uxr_deserialize_HEARTBEAT_Payload>
 800b03e:	2100      	movs	r1, #0
 800b040:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800b044:	f000 fe4a 	bl	800bcdc <uxr_stream_id_from_raw>
 800b048:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b04c:	4603      	mov	r3, r0
 800b04e:	4629      	mov	r1, r5
 800b050:	f104 0008 	add.w	r0, r4, #8
 800b054:	9311      	str	r3, [sp, #68]	@ 0x44
 800b056:	f000 ff2f 	bl	800beb8 <uxr_get_input_reliable_stream>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d08a      	beq.n	800af74 <read_submessage_list+0x10>
 800b05e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 800b062:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 800b066:	f004 fd1f 	bl	800faa8 <uxr_process_heartbeat>
 800b06a:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 800b06e:	462a      	mov	r2, r5
 800b070:	4620      	mov	r0, r4
 800b072:	f7ff fdf5 	bl	800ac60 <write_submessage_acknack.isra.0>
 800b076:	e77d      	b.n	800af74 <read_submessage_list+0x10>
 800b078:	a912      	add	r1, sp, #72	@ 0x48
 800b07a:	4640      	mov	r0, r8
 800b07c:	f002 f80c 	bl	800d098 <uxr_deserialize_ACKNACK_Payload>
 800b080:	2100      	movs	r1, #0
 800b082:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800b086:	f000 fe29 	bl	800bcdc <uxr_stream_id_from_raw>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800b090:	f104 0008 	add.w	r0, r4, #8
 800b094:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b096:	f000 fef9 	bl	800be8c <uxr_get_output_reliable_stream>
 800b09a:	4605      	mov	r5, r0
 800b09c:	2800      	cmp	r0, #0
 800b09e:	f43f af69 	beq.w	800af74 <read_submessage_list+0x10>
 800b0a2:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 800b0a6:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 800b0aa:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800b0ae:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b0b2:	b289      	uxth	r1, r1
 800b0b4:	f005 f848 	bl	8010148 <uxr_process_acknack>
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f005 f80b 	bl	80100d4 <uxr_begin_output_nack_buffer_it>
 800b0be:	af10      	add	r7, sp, #64	@ 0x40
 800b0c0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800b0c4:	e005      	b.n	800b0d2 <read_submessage_list+0x16e>
 800b0c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b0c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b0cc:	e9d3 0600 	ldrd	r0, r6, [r3]
 800b0d0:	47b0      	blx	r6
 800b0d2:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 800b0d6:	aa11      	add	r2, sp, #68	@ 0x44
 800b0d8:	4639      	mov	r1, r7
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f004 fffc 	bl	80100d8 <uxr_next_reliable_nack_buffer_to_send>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d1f0      	bne.n	800b0c6 <read_submessage_list+0x162>
 800b0e4:	e746      	b.n	800af74 <read_submessage_list+0x10>
 800b0e6:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 800b0ea:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 800b0ee:	af10      	add	r7, sp, #64	@ 0x40
 800b0f0:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 800b0f4:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 800b0f8:	4639      	mov	r1, r7
 800b0fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800b0fe:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 800b102:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800b106:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 800b10a:	4640      	mov	r0, r8
 800b10c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800b110:	f001 fd0c 	bl	800cb2c <uxr_deserialize_BaseObjectRequest>
 800b114:	4638      	mov	r0, r7
 800b116:	a911      	add	r1, sp, #68	@ 0x44
 800b118:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 800b11c:	f000 fda2 	bl	800bc64 <uxr_parse_base_object_request>
 800b120:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800b124:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b126:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 800b12a:	9112      	str	r1, [sp, #72]	@ 0x48
 800b12c:	3d04      	subs	r5, #4
 800b12e:	f006 060e 	and.w	r6, r6, #14
 800b132:	b2ad      	uxth	r5, r5
 800b134:	f1ba 0f00 	cmp.w	sl, #0
 800b138:	d006      	beq.n	800b148 <read_submessage_list+0x1e4>
 800b13a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	463a      	mov	r2, r7
 800b142:	2300      	movs	r3, #0
 800b144:	4620      	mov	r0, r4
 800b146:	47d0      	blx	sl
 800b148:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800b14a:	b168      	cbz	r0, 800b168 <read_submessage_list+0x204>
 800b14c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800b14e:	2300      	movs	r3, #0
 800b150:	3902      	subs	r1, #2
 800b152:	e002      	b.n	800b15a <read_submessage_list+0x1f6>
 800b154:	3301      	adds	r3, #1
 800b156:	4283      	cmp	r3, r0
 800b158:	d006      	beq.n	800b168 <read_submessage_list+0x204>
 800b15a:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800b15e:	42ba      	cmp	r2, r7
 800b160:	d1f8      	bne.n	800b154 <read_submessage_list+0x1f0>
 800b162:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800b164:	2100      	movs	r1, #0
 800b166:	54d1      	strb	r1, [r2, r3]
 800b168:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b16a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b16c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 800b170:	9302      	str	r3, [sp, #8]
 800b172:	e9cd 1000 	strd	r1, r0, [sp]
 800b176:	4633      	mov	r3, r6
 800b178:	462a      	mov	r2, r5
 800b17a:	4641      	mov	r1, r8
 800b17c:	4620      	mov	r0, r4
 800b17e:	f005 f867 	bl	8010250 <read_submessage_format>
 800b182:	e6f7      	b.n	800af74 <read_submessage_list+0x10>
 800b184:	4641      	mov	r1, r8
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff fea4 	bl	800aed4 <read_submessage_info>
 800b18c:	e6f2      	b.n	800af74 <read_submessage_list+0x10>
 800b18e:	2a00      	cmp	r2, #0
 800b190:	d03b      	beq.n	800b20a <read_submessage_list+0x2a6>
 800b192:	a912      	add	r1, sp, #72	@ 0x48
 800b194:	4640      	mov	r0, r8
 800b196:	f001 fedb 	bl	800cf50 <uxr_deserialize_STATUS_Payload>
 800b19a:	a910      	add	r1, sp, #64	@ 0x40
 800b19c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b19e:	a812      	add	r0, sp, #72	@ 0x48
 800b1a0:	f000 fd60 	bl	800bc64 <uxr_parse_base_object_request>
 800b1a4:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800b1a8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b1aa:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 800b1ae:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 800b1b2:	9111      	str	r1, [sp, #68]	@ 0x44
 800b1b4:	b135      	cbz	r5, 800b1c4 <read_submessage_list+0x260>
 800b1b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	47a8      	blx	r5
 800b1c4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f43f aed4 	beq.w	800af74 <read_submessage_list+0x10>
 800b1cc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	3802      	subs	r0, #2
 800b1d2:	e003      	b.n	800b1dc <read_submessage_list+0x278>
 800b1d4:	3101      	adds	r1, #1
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	f43f aecc 	beq.w	800af74 <read_submessage_list+0x10>
 800b1dc:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800b1e0:	42b2      	cmp	r2, r6
 800b1e2:	d1f7      	bne.n	800b1d4 <read_submessage_list+0x270>
 800b1e4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b1e6:	545f      	strb	r7, [r3, r1]
 800b1e8:	e6c4      	b.n	800af74 <read_submessage_list+0x10>
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	f47f aec2 	bne.w	800af74 <read_submessage_list+0x10>
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fc7a 	bl	800baec <uxr_read_create_session_status>
 800b1f8:	e6bc      	b.n	800af74 <read_submessage_list+0x10>
 800b1fa:	4641      	mov	r1, r8
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7ff fcf9 	bl	800abf4 <read_submessage_get_info>
 800b202:	e6b7      	b.n	800af74 <read_submessage_list+0x10>
 800b204:	b018      	add	sp, #96	@ 0x60
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20a:	4641      	mov	r1, r8
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 fc79 	bl	800bb04 <uxr_read_delete_session_status>
 800b212:	e6af      	b.n	800af74 <read_submessage_list+0x10>
 800b214:	f000 fed4 	bl	800bfc0 <uxr_nanos>
 800b218:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b21a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800b21c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b21e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b220:	2700      	movs	r7, #0
 800b222:	fbc9 6703 	smlal	r6, r7, r9, r3
 800b226:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b228:	eb16 0c00 	adds.w	ip, r6, r0
 800b22c:	4618      	mov	r0, r3
 800b22e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b230:	eb47 0e01 	adc.w	lr, r7, r1
 800b234:	461e      	mov	r6, r3
 800b236:	2100      	movs	r1, #0
 800b238:	2700      	movs	r7, #0
 800b23a:	fbc9 0105 	smlal	r0, r1, r9, r5
 800b23e:	fbc9 6702 	smlal	r6, r7, r9, r2
 800b242:	1983      	adds	r3, r0, r6
 800b244:	eb41 0207 	adc.w	r2, r1, r7
 800b248:	ebbc 0303 	subs.w	r3, ip, r3
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	eb6e 0302 	sbc.w	r3, lr, r2
 800b252:	9309      	str	r3, [sp, #36]	@ 0x24
 800b254:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b258:	0fd3      	lsrs	r3, r2, #31
 800b25a:	18c9      	adds	r1, r1, r3
 800b25c:	f142 0200 	adc.w	r2, r2, #0
 800b260:	084b      	lsrs	r3, r1, #1
 800b262:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800b266:	1052      	asrs	r2, r2, #1
 800b268:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 800b26c:	e6de      	b.n	800b02c <read_submessage_list+0xc8>
 800b26e:	bf00      	nop
 800b270:	3b9aca00 	.word	0x3b9aca00

0800b274 <listen_message_reliably>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	1e0b      	subs	r3, r1, #0
 800b27a:	b09d      	sub	sp, #116	@ 0x74
 800b27c:	bfb8      	it	lt
 800b27e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800b282:	9305      	str	r3, [sp, #20]
 800b284:	4607      	mov	r7, r0
 800b286:	f000 fe7f 	bl	800bf88 <uxr_millis>
 800b28a:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800b28e:	4681      	mov	r9, r0
 800b290:	2a00      	cmp	r2, #0
 800b292:	f000 8095 	beq.w	800b3c0 <listen_message_reliably+0x14c>
 800b296:	2600      	movs	r6, #0
 800b298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b29c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b2a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4688      	mov	r8, r1
 800b2a8:	46ca      	mov	sl, r9
 800b2aa:	e00f      	b.n	800b2cc <listen_message_reliably+0x58>
 800b2ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b2b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2b4:	42a2      	cmp	r2, r4
 800b2b6:	eb73 0105 	sbcs.w	r1, r3, r5
 800b2ba:	bfb8      	it	lt
 800b2bc:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800b2c0:	3601      	adds	r6, #1
 800b2c2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b2c6:	b2f0      	uxtb	r0, r6
 800b2c8:	4283      	cmp	r3, r0
 800b2ca:	d951      	bls.n	800b370 <listen_message_reliably+0xfc>
 800b2cc:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	f000 fcd8 	bl	800bc88 <uxr_stream_id>
 800b2d8:	00e4      	lsls	r4, r4, #3
 800b2da:	f104 0520 	add.w	r5, r4, #32
 800b2de:	443d      	add	r5, r7
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	4643      	mov	r3, r8
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2ea:	f004 fec7 	bl	801007c <uxr_update_output_stream_heartbeat_timestamp>
 800b2ee:	193b      	adds	r3, r7, r4
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d0db      	beq.n	800b2ac <listen_message_reliably+0x38>
 800b2f4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800b2f8:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f000 fc8b 	bl	800bc18 <uxr_session_header_offset>
 800b302:	3501      	adds	r5, #1
 800b304:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 800b308:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b30c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800b310:	9000      	str	r0, [sp, #0]
 800b312:	2300      	movs	r3, #0
 800b314:	4658      	mov	r0, fp
 800b316:	2211      	movs	r2, #17
 800b318:	a90c      	add	r1, sp, #48	@ 0x30
 800b31a:	f7ff fa41 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800b31e:	2300      	movs	r3, #0
 800b320:	2205      	movs	r2, #5
 800b322:	210b      	movs	r1, #11
 800b324:	4658      	mov	r0, fp
 800b326:	f000 fde9 	bl	800befc <uxr_buffer_submessage_header>
 800b32a:	8968      	ldrh	r0, [r5, #10]
 800b32c:	2101      	movs	r1, #1
 800b32e:	f005 f84f 	bl	80103d0 <uxr_seq_num_add>
 800b332:	892a      	ldrh	r2, [r5, #8]
 800b334:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800b338:	4603      	mov	r3, r0
 800b33a:	a90a      	add	r1, sp, #40	@ 0x28
 800b33c:	4658      	mov	r0, fp
 800b33e:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800b342:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 800b346:	f001 febb 	bl	800d0c0 <uxr_serialize_HEARTBEAT_Payload>
 800b34a:	2200      	movs	r2, #0
 800b34c:	4611      	mov	r1, r2
 800b34e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b350:	4638      	mov	r0, r7
 800b352:	f000 fc09 	bl	800bb68 <uxr_stamp_session_header>
 800b356:	4658      	mov	r0, fp
 800b358:	f7ff fa60 	bl	800a81c <ucdr_buffer_length>
 800b35c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b35e:	4602      	mov	r2, r0
 800b360:	a90c      	add	r1, sp, #48	@ 0x30
 800b362:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b366:	443c      	add	r4, r7
 800b368:	47a8      	blx	r5
 800b36a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800b36e:	e79f      	b.n	800b2b0 <listen_message_reliably+0x3c>
 800b370:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800b374:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b378:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b37c:	4294      	cmp	r4, r2
 800b37e:	bf08      	it	eq
 800b380:	428b      	cmpeq	r3, r1
 800b382:	d01d      	beq.n	800b3c0 <listen_message_reliably+0x14c>
 800b384:	eba3 030a 	sub.w	r3, r3, sl
 800b388:	9905      	ldr	r1, [sp, #20]
 800b38a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bf08      	it	eq
 800b390:	2301      	moveq	r3, #1
 800b392:	4299      	cmp	r1, r3
 800b394:	bfa8      	it	ge
 800b396:	4619      	movge	r1, r3
 800b398:	6894      	ldr	r4, [r2, #8]
 800b39a:	6810      	ldr	r0, [r2, #0]
 800b39c:	4689      	mov	r9, r1
 800b39e:	460b      	mov	r3, r1
 800b3a0:	aa08      	add	r2, sp, #32
 800b3a2:	a907      	add	r1, sp, #28
 800b3a4:	47a0      	blx	r4
 800b3a6:	b968      	cbnz	r0, 800b3c4 <listen_message_reliably+0x150>
 800b3a8:	9b05      	ldr	r3, [sp, #20]
 800b3aa:	eba3 0309 	sub.w	r3, r3, r9
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	9305      	str	r3, [sp, #20]
 800b3b2:	f73f af68 	bgt.w	800b286 <listen_message_reliably+0x12>
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	b01d      	add	sp, #116	@ 0x74
 800b3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c0:	9b05      	ldr	r3, [sp, #20]
 800b3c2:	e7e1      	b.n	800b388 <listen_message_reliably+0x114>
 800b3c4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	a80c      	add	r0, sp, #48	@ 0x30
 800b3cc:	f7ff f9fa 	bl	800a7c4 <ucdr_init_buffer>
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	a90c      	add	r1, sp, #48	@ 0x30
 800b3d4:	f10d 031a 	add.w	r3, sp, #26
 800b3d8:	aa06      	add	r2, sp, #24
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f88d 5018 	strb.w	r5, [sp, #24]
 800b3e0:	f000 fbd8 	bl	800bb94 <uxr_read_session_header>
 800b3e4:	b918      	cbnz	r0, 800b3ee <listen_message_reliably+0x17a>
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	b01d      	add	sp, #116	@ 0x74
 800b3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b3f4:	f000 fc72 	bl	800bcdc <uxr_stream_id_from_raw>
 800b3f8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b3fc:	2e01      	cmp	r6, #1
 800b3fe:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800b402:	900a      	str	r0, [sp, #40]	@ 0x28
 800b404:	fa5f fa80 	uxtb.w	sl, r0
 800b408:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b40c:	d04b      	beq.n	800b4a6 <listen_message_reliably+0x232>
 800b40e:	2e02      	cmp	r6, #2
 800b410:	d00f      	beq.n	800b432 <listen_message_reliably+0x1be>
 800b412:	2e00      	cmp	r6, #0
 800b414:	d1e7      	bne.n	800b3e6 <listen_message_reliably+0x172>
 800b416:	4631      	mov	r1, r6
 800b418:	4630      	mov	r0, r6
 800b41a:	f000 fc5f 	bl	800bcdc <uxr_stream_id_from_raw>
 800b41e:	a90c      	add	r1, sp, #48	@ 0x30
 800b420:	4602      	mov	r2, r0
 800b422:	4638      	mov	r0, r7
 800b424:	920a      	str	r2, [sp, #40]	@ 0x28
 800b426:	f7ff fd9d 	bl	800af64 <read_submessage_list>
 800b42a:	4620      	mov	r0, r4
 800b42c:	b01d      	add	sp, #116	@ 0x74
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	4629      	mov	r1, r5
 800b434:	f107 0008 	add.w	r0, r7, #8
 800b438:	f000 fd3e 	bl	800beb8 <uxr_get_input_reliable_stream>
 800b43c:	4680      	mov	r8, r0
 800b43e:	b348      	cbz	r0, 800b494 <listen_message_reliably+0x220>
 800b440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b442:	9202      	str	r2, [sp, #8]
 800b444:	a80c      	add	r0, sp, #48	@ 0x30
 800b446:	f7ff f9ed 	bl	800a824 <ucdr_buffer_remaining>
 800b44a:	4603      	mov	r3, r0
 800b44c:	f10d 0019 	add.w	r0, sp, #25
 800b450:	9000      	str	r0, [sp, #0]
 800b452:	9a02      	ldr	r2, [sp, #8]
 800b454:	4649      	mov	r1, r9
 800b456:	4640      	mov	r0, r8
 800b458:	f004 fa28 	bl	800f8ac <uxr_receive_reliable_message>
 800b45c:	b1d0      	cbz	r0, 800b494 <listen_message_reliably+0x220>
 800b45e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d037      	beq.n	800b4d6 <listen_message_reliably+0x262>
 800b466:	ae14      	add	r6, sp, #80	@ 0x50
 800b468:	f04f 0902 	mov.w	r9, #2
 800b46c:	e008      	b.n	800b480 <listen_message_reliably+0x20c>
 800b46e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800b472:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800b476:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800b47a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b47c:	f7ff fd72 	bl	800af64 <read_submessage_list>
 800b480:	4631      	mov	r1, r6
 800b482:	2204      	movs	r2, #4
 800b484:	4640      	mov	r0, r8
 800b486:	f004 fa91 	bl	800f9ac <uxr_next_input_reliable_buffer_available>
 800b48a:	4603      	mov	r3, r0
 800b48c:	4631      	mov	r1, r6
 800b48e:	4638      	mov	r0, r7
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1ec      	bne.n	800b46e <listen_message_reliably+0x1fa>
 800b494:	4638      	mov	r0, r7
 800b496:	462a      	mov	r2, r5
 800b498:	4651      	mov	r1, sl
 800b49a:	f7ff fbe1 	bl	800ac60 <write_submessage_acknack.isra.0>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	b01d      	add	sp, #116	@ 0x74
 800b4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f107 0008 	add.w	r0, r7, #8
 800b4ac:	f000 fcfa 	bl	800bea4 <uxr_get_input_best_effort_stream>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d098      	beq.n	800b3e6 <listen_message_reliably+0x172>
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	f004 f975 	bl	800f7a4 <uxr_receive_best_effort_message>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d093      	beq.n	800b3e6 <listen_message_reliably+0x172>
 800b4be:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800b4c2:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800b4c6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4cc:	a90c      	add	r1, sp, #48	@ 0x30
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7ff fd48 	bl	800af64 <read_submessage_list>
 800b4d4:	e787      	b.n	800b3e6 <listen_message_reliably+0x172>
 800b4d6:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800b4da:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800b4de:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800b4e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4e4:	a90c      	add	r1, sp, #48	@ 0x30
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	f7ff fd3c 	bl	800af64 <read_submessage_list>
 800b4ec:	e7bb      	b.n	800b466 <listen_message_reliably+0x1f2>
 800b4ee:	bf00      	nop

0800b4f0 <uxr_run_session_until_confirm_delivery>:
 800b4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	f000 fd46 	bl	800bf88 <uxr_millis>
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7ff fc74 	bl	800adec <uxr_flash_output_streams>
 800b504:	2d00      	cmp	r5, #0
 800b506:	f106 0808 	add.w	r8, r6, #8
 800b50a:	bfa8      	it	ge
 800b50c:	462c      	movge	r4, r5
 800b50e:	da07      	bge.n	800b520 <uxr_run_session_until_confirm_delivery+0x30>
 800b510:	e00e      	b.n	800b530 <uxr_run_session_until_confirm_delivery+0x40>
 800b512:	f7ff feaf 	bl	800b274 <listen_message_reliably>
 800b516:	f000 fd37 	bl	800bf88 <uxr_millis>
 800b51a:	1bc3      	subs	r3, r0, r7
 800b51c:	1aec      	subs	r4, r5, r3
 800b51e:	d407      	bmi.n	800b530 <uxr_run_session_until_confirm_delivery+0x40>
 800b520:	4640      	mov	r0, r8
 800b522:	f000 fcd5 	bl	800bed0 <uxr_output_streams_confirmed>
 800b526:	4603      	mov	r3, r0
 800b528:	4621      	mov	r1, r4
 800b52a:	4630      	mov	r0, r6
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d0f0      	beq.n	800b512 <uxr_run_session_until_confirm_delivery+0x22>
 800b530:	4640      	mov	r0, r8
 800b532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b536:	f000 bccb 	b.w	800bed0 <uxr_output_streams_confirmed>
 800b53a:	bf00      	nop

0800b53c <uxr_run_session_until_all_status>:
 800b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	9d08      	ldr	r5, [sp, #32]
 800b542:	460f      	mov	r7, r1
 800b544:	4692      	mov	sl, r2
 800b546:	461c      	mov	r4, r3
 800b548:	4606      	mov	r6, r0
 800b54a:	f7ff fc4f 	bl	800adec <uxr_flash_output_streams>
 800b54e:	b125      	cbz	r5, 800b55a <uxr_run_session_until_all_status+0x1e>
 800b550:	462a      	mov	r2, r5
 800b552:	21ff      	movs	r1, #255	@ 0xff
 800b554:	4620      	mov	r0, r4
 800b556:	f006 f9ad 	bl	80118b4 <memset>
 800b55a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 800b55e:	67f5      	str	r5, [r6, #124]	@ 0x7c
 800b560:	f000 fd12 	bl	800bf88 <uxr_millis>
 800b564:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 800b568:	f1aa 0a02 	sub.w	sl, sl, #2
 800b56c:	4680      	mov	r8, r0
 800b56e:	4639      	mov	r1, r7
 800b570:	4630      	mov	r0, r6
 800b572:	f7ff fe7f 	bl	800b274 <listen_message_reliably>
 800b576:	f000 fd07 	bl	800bf88 <uxr_millis>
 800b57a:	eba0 0008 	sub.w	r0, r0, r8
 800b57e:	1a39      	subs	r1, r7, r0
 800b580:	b33d      	cbz	r5, 800b5d2 <uxr_run_session_until_all_status+0x96>
 800b582:	46cc      	mov	ip, r9
 800b584:	464a      	mov	r2, r9
 800b586:	2301      	movs	r3, #1
 800b588:	e002      	b.n	800b590 <uxr_run_session_until_all_status+0x54>
 800b58a:	42ab      	cmp	r3, r5
 800b58c:	d20c      	bcs.n	800b5a8 <uxr_run_session_until_all_status+0x6c>
 800b58e:	3301      	adds	r3, #1
 800b590:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800b594:	2cff      	cmp	r4, #255	@ 0xff
 800b596:	d1f8      	bne.n	800b58a <uxr_run_session_until_all_status+0x4e>
 800b598:	42ab      	cmp	r3, r5
 800b59a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800b59e:	d213      	bcs.n	800b5c8 <uxr_run_session_until_all_status+0x8c>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0f4      	beq.n	800b58e <uxr_run_session_until_all_status+0x52>
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	dce3      	bgt.n	800b570 <uxr_run_session_until_all_status+0x34>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	444d      	add	r5, r9
 800b5ac:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800b5ae:	e001      	b.n	800b5b4 <uxr_run_session_until_all_status+0x78>
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d812      	bhi.n	800b5da <uxr_run_session_until_all_status+0x9e>
 800b5b4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800b5b8:	4565      	cmp	r5, ip
 800b5ba:	d1f9      	bne.n	800b5b0 <uxr_run_session_until_all_status+0x74>
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	bf8c      	ite	hi
 800b5c0:	2000      	movhi	r0, #0
 800b5c2:	2001      	movls	r0, #1
 800b5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	dded      	ble.n	800b5a8 <uxr_run_session_until_all_status+0x6c>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1cf      	bne.n	800b570 <uxr_run_session_until_all_status+0x34>
 800b5d0:	e7ea      	b.n	800b5a8 <uxr_run_session_until_all_status+0x6c>
 800b5d2:	67f5      	str	r5, [r6, #124]	@ 0x7c
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b5e0 <uxr_create_session>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	ed2d 8b02 	vpush	{d8}
 800b5e8:	f100 0808 	add.w	r8, r0, #8
 800b5ec:	b0a9      	sub	sp, #164	@ 0xa4
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	f000 fba9 	bl	800bd48 <uxr_reset_stream_storage>
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 fb0e 	bl	800bc18 <uxr_session_header_offset>
 800b5fc:	a909      	add	r1, sp, #36	@ 0x24
 800b5fe:	9000      	str	r0, [sp, #0]
 800b600:	2300      	movs	r3, #0
 800b602:	a810      	add	r0, sp, #64	@ 0x40
 800b604:	221c      	movs	r2, #28
 800b606:	f7ff f8cb 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800b60a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b60c:	8a1a      	ldrh	r2, [r3, #16]
 800b60e:	3a04      	subs	r2, #4
 800b610:	b292      	uxth	r2, r2
 800b612:	4620      	mov	r0, r4
 800b614:	a910      	add	r1, sp, #64	@ 0x40
 800b616:	f000 fa23 	bl	800ba60 <uxr_buffer_create_session>
 800b61a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fa8f 	bl	800bb40 <uxr_stamp_create_session_header>
 800b622:	a810      	add	r0, sp, #64	@ 0x40
 800b624:	f7ff f8fa 	bl	800a81c <ucdr_buffer_length>
 800b628:	23ff      	movs	r3, #255	@ 0xff
 800b62a:	ee08 0a10 	vmov	s16, r0
 800b62e:	7163      	strb	r3, [r4, #5]
 800b630:	f04f 090a 	mov.w	r9, #10
 800b634:	46c2      	mov	sl, r8
 800b636:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b638:	ee18 2a10 	vmov	r2, s16
 800b63c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b640:	a909      	add	r1, sp, #36	@ 0x24
 800b642:	47a8      	blx	r5
 800b644:	f000 fca0 	bl	800bf88 <uxr_millis>
 800b648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b64c:	9002      	str	r0, [sp, #8]
 800b64e:	e00c      	b.n	800b66a <uxr_create_session+0x8a>
 800b650:	f000 fc9a 	bl	800bf88 <uxr_millis>
 800b654:	9b02      	ldr	r3, [sp, #8]
 800b656:	7962      	ldrb	r2, [r4, #5]
 800b658:	1ac0      	subs	r0, r0, r3
 800b65a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f340 8094 	ble.w	800b78c <uxr_create_session+0x1ac>
 800b664:	2aff      	cmp	r2, #255	@ 0xff
 800b666:	f040 8097 	bne.w	800b798 <uxr_create_session+0x1b8>
 800b66a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b66c:	a905      	add	r1, sp, #20
 800b66e:	6895      	ldr	r5, [r2, #8]
 800b670:	6810      	ldr	r0, [r2, #0]
 800b672:	aa06      	add	r2, sp, #24
 800b674:	47a8      	blx	r5
 800b676:	2800      	cmp	r0, #0
 800b678:	d0ea      	beq.n	800b650 <uxr_create_session+0x70>
 800b67a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800b67e:	a818      	add	r0, sp, #96	@ 0x60
 800b680:	f7ff f8a0 	bl	800a7c4 <ucdr_init_buffer>
 800b684:	2500      	movs	r5, #0
 800b686:	f10d 0312 	add.w	r3, sp, #18
 800b68a:	aa04      	add	r2, sp, #16
 800b68c:	a918      	add	r1, sp, #96	@ 0x60
 800b68e:	4620      	mov	r0, r4
 800b690:	f88d 5010 	strb.w	r5, [sp, #16]
 800b694:	f000 fa7e 	bl	800bb94 <uxr_read_session_header>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d0d9      	beq.n	800b650 <uxr_create_session+0x70>
 800b69c:	4629      	mov	r1, r5
 800b69e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800b6a2:	f000 fb1b 	bl	800bcdc <uxr_stream_id_from_raw>
 800b6a6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b6aa:	2f01      	cmp	r7, #1
 800b6ac:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b6b0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800b6b4:	fa5f f880 	uxtb.w	r8, r0
 800b6b8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b6bc:	d04d      	beq.n	800b75a <uxr_create_session+0x17a>
 800b6be:	2f02      	cmp	r7, #2
 800b6c0:	d00c      	beq.n	800b6dc <uxr_create_session+0xfc>
 800b6c2:	2f00      	cmp	r7, #0
 800b6c4:	d1c4      	bne.n	800b650 <uxr_create_session+0x70>
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f000 fb07 	bl	800bcdc <uxr_stream_id_from_raw>
 800b6ce:	a918      	add	r1, sp, #96	@ 0x60
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	9208      	str	r2, [sp, #32]
 800b6d6:	f7ff fc45 	bl	800af64 <read_submessage_list>
 800b6da:	e7b9      	b.n	800b650 <uxr_create_session+0x70>
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4650      	mov	r0, sl
 800b6e0:	f000 fbea 	bl	800beb8 <uxr_get_input_reliable_stream>
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	b390      	cbz	r0, 800b74e <uxr_create_session+0x16e>
 800b6e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b6ea:	9203      	str	r2, [sp, #12]
 800b6ec:	a818      	add	r0, sp, #96	@ 0x60
 800b6ee:	f7ff f899 	bl	800a824 <ucdr_buffer_remaining>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f10d 0011 	add.w	r0, sp, #17
 800b6f8:	9000      	str	r0, [sp, #0]
 800b6fa:	9a03      	ldr	r2, [sp, #12]
 800b6fc:	4659      	mov	r1, fp
 800b6fe:	4630      	mov	r0, r6
 800b700:	f004 f8d4 	bl	800f8ac <uxr_receive_reliable_message>
 800b704:	b318      	cbz	r0, 800b74e <uxr_create_session+0x16e>
 800b706:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800b70a:	b9b3      	cbnz	r3, 800b73a <uxr_create_session+0x15a>
 800b70c:	f88d 8020 	strb.w	r8, [sp, #32]
 800b710:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800b714:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800b718:	9a08      	ldr	r2, [sp, #32]
 800b71a:	a918      	add	r1, sp, #96	@ 0x60
 800b71c:	4620      	mov	r0, r4
 800b71e:	f7ff fc21 	bl	800af64 <read_submessage_list>
 800b722:	e00a      	b.n	800b73a <uxr_create_session+0x15a>
 800b724:	f04f 0302 	mov.w	r3, #2
 800b728:	f88d 8020 	strb.w	r8, [sp, #32]
 800b72c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800b730:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 800b734:	9a08      	ldr	r2, [sp, #32]
 800b736:	f7ff fc15 	bl	800af64 <read_submessage_list>
 800b73a:	a920      	add	r1, sp, #128	@ 0x80
 800b73c:	2204      	movs	r2, #4
 800b73e:	4630      	mov	r0, r6
 800b740:	f004 f934 	bl	800f9ac <uxr_next_input_reliable_buffer_available>
 800b744:	4603      	mov	r3, r0
 800b746:	a920      	add	r1, sp, #128	@ 0x80
 800b748:	4620      	mov	r0, r4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1ea      	bne.n	800b724 <uxr_create_session+0x144>
 800b74e:	462a      	mov	r2, r5
 800b750:	4641      	mov	r1, r8
 800b752:	4620      	mov	r0, r4
 800b754:	f7ff fa84 	bl	800ac60 <write_submessage_acknack.isra.0>
 800b758:	e77a      	b.n	800b650 <uxr_create_session+0x70>
 800b75a:	4629      	mov	r1, r5
 800b75c:	4650      	mov	r0, sl
 800b75e:	f000 fba1 	bl	800bea4 <uxr_get_input_best_effort_stream>
 800b762:	2800      	cmp	r0, #0
 800b764:	f43f af74 	beq.w	800b650 <uxr_create_session+0x70>
 800b768:	4659      	mov	r1, fp
 800b76a:	f004 f81b 	bl	800f7a4 <uxr_receive_best_effort_message>
 800b76e:	2800      	cmp	r0, #0
 800b770:	f43f af6e 	beq.w	800b650 <uxr_create_session+0x70>
 800b774:	f88d 8020 	strb.w	r8, [sp, #32]
 800b778:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800b77c:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800b780:	9a08      	ldr	r2, [sp, #32]
 800b782:	a918      	add	r1, sp, #96	@ 0x60
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff fbed 	bl	800af64 <read_submessage_list>
 800b78a:	e761      	b.n	800b650 <uxr_create_session+0x70>
 800b78c:	f1b9 0901 	subs.w	r9, r9, #1
 800b790:	d002      	beq.n	800b798 <uxr_create_session+0x1b8>
 800b792:	2aff      	cmp	r2, #255	@ 0xff
 800b794:	f43f af4f 	beq.w	800b636 <uxr_create_session+0x56>
 800b798:	b12a      	cbz	r2, 800b7a6 <uxr_create_session+0x1c6>
 800b79a:	2000      	movs	r0, #0
 800b79c:	b029      	add	sp, #164	@ 0xa4
 800b79e:	ecbd 8b02 	vpop	{d8}
 800b7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	f000 face 	bl	800bd48 <uxr_reset_stream_storage>
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	b029      	add	sp, #164	@ 0xa4
 800b7b0:	ecbd 8b02 	vpop	{d8}
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7b8 <wait_session_status>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	4604      	mov	r4, r0
 800b7be:	b09d      	sub	sp, #116	@ 0x74
 800b7c0:	20ff      	movs	r0, #255	@ 0xff
 800b7c2:	7160      	strb	r0, [r4, #5]
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 80b8 	beq.w	800b93c <wait_session_status+0x184>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	468b      	mov	fp, r1
 800b7d0:	4692      	mov	sl, r2
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b7d6:	4652      	mov	r2, sl
 800b7d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b7dc:	4659      	mov	r1, fp
 800b7de:	47a8      	blx	r5
 800b7e0:	f000 fbd2 	bl	800bf88 <uxr_millis>
 800b7e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	e009      	b.n	800b800 <wait_session_status+0x48>
 800b7ec:	f000 fbcc 	bl	800bf88 <uxr_millis>
 800b7f0:	1b40      	subs	r0, r0, r5
 800b7f2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dd42      	ble.n	800b880 <wait_session_status+0xc8>
 800b7fa:	7960      	ldrb	r0, [r4, #5]
 800b7fc:	28ff      	cmp	r0, #255	@ 0xff
 800b7fe:	d148      	bne.n	800b892 <wait_session_status+0xda>
 800b800:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b802:	a908      	add	r1, sp, #32
 800b804:	6896      	ldr	r6, [r2, #8]
 800b806:	6810      	ldr	r0, [r2, #0]
 800b808:	aa09      	add	r2, sp, #36	@ 0x24
 800b80a:	47b0      	blx	r6
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d0ed      	beq.n	800b7ec <wait_session_status+0x34>
 800b810:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b814:	a80c      	add	r0, sp, #48	@ 0x30
 800b816:	f7fe ffd5 	bl	800a7c4 <ucdr_init_buffer>
 800b81a:	2600      	movs	r6, #0
 800b81c:	f10d 031e 	add.w	r3, sp, #30
 800b820:	aa07      	add	r2, sp, #28
 800b822:	a90c      	add	r1, sp, #48	@ 0x30
 800b824:	4620      	mov	r0, r4
 800b826:	f88d 601c 	strb.w	r6, [sp, #28]
 800b82a:	f000 f9b3 	bl	800bb94 <uxr_read_session_header>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d0dc      	beq.n	800b7ec <wait_session_status+0x34>
 800b832:	4631      	mov	r1, r6
 800b834:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b838:	f000 fa50 	bl	800bcdc <uxr_stream_id_from_raw>
 800b83c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b840:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b844:	9302      	str	r3, [sp, #8]
 800b846:	2f01      	cmp	r7, #1
 800b848:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800b84c:	fa5f f880 	uxtb.w	r8, r0
 800b850:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b854:	d058      	beq.n	800b908 <wait_session_status+0x150>
 800b856:	2f02      	cmp	r7, #2
 800b858:	d021      	beq.n	800b89e <wait_session_status+0xe6>
 800b85a:	2f00      	cmp	r7, #0
 800b85c:	d1c6      	bne.n	800b7ec <wait_session_status+0x34>
 800b85e:	4639      	mov	r1, r7
 800b860:	4638      	mov	r0, r7
 800b862:	f000 fa3b 	bl	800bcdc <uxr_stream_id_from_raw>
 800b866:	a90c      	add	r1, sp, #48	@ 0x30
 800b868:	4602      	mov	r2, r0
 800b86a:	4620      	mov	r0, r4
 800b86c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b86e:	f7ff fb79 	bl	800af64 <read_submessage_list>
 800b872:	f000 fb89 	bl	800bf88 <uxr_millis>
 800b876:	1b40      	subs	r0, r0, r5
 800b878:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dcbc      	bgt.n	800b7fa <wait_session_status+0x42>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	9a04      	ldr	r2, [sp, #16]
 800b884:	7960      	ldrb	r0, [r4, #5]
 800b886:	3301      	adds	r3, #1
 800b888:	429a      	cmp	r2, r3
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	d001      	beq.n	800b892 <wait_session_status+0xda>
 800b88e:	28ff      	cmp	r0, #255	@ 0xff
 800b890:	d0a0      	beq.n	800b7d4 <wait_session_status+0x1c>
 800b892:	38ff      	subs	r0, #255	@ 0xff
 800b894:	bf18      	it	ne
 800b896:	2001      	movne	r0, #1
 800b898:	b01d      	add	sp, #116	@ 0x74
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89e:	4631      	mov	r1, r6
 800b8a0:	f104 0008 	add.w	r0, r4, #8
 800b8a4:	f000 fb08 	bl	800beb8 <uxr_get_input_reliable_stream>
 800b8a8:	4681      	mov	r9, r0
 800b8aa:	b338      	cbz	r0, 800b8fc <wait_session_status+0x144>
 800b8ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8ae:	9205      	str	r2, [sp, #20]
 800b8b0:	a80c      	add	r0, sp, #48	@ 0x30
 800b8b2:	f7fe ffb7 	bl	800a824 <ucdr_buffer_remaining>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	f10d 001d 	add.w	r0, sp, #29
 800b8bc:	9000      	str	r0, [sp, #0]
 800b8be:	9a05      	ldr	r2, [sp, #20]
 800b8c0:	9902      	ldr	r1, [sp, #8]
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f003 fff2 	bl	800f8ac <uxr_receive_reliable_message>
 800b8c8:	b1c0      	cbz	r0, 800b8fc <wait_session_status+0x144>
 800b8ca:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b8ce:	b95b      	cbnz	r3, 800b8e8 <wait_session_status+0x130>
 800b8d0:	e03c      	b.n	800b94c <wait_session_status+0x194>
 800b8d2:	f04f 0302 	mov.w	r3, #2
 800b8d6:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800b8da:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b8de:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800b8e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8e4:	f7ff fb3e 	bl	800af64 <read_submessage_list>
 800b8e8:	a914      	add	r1, sp, #80	@ 0x50
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f004 f85d 	bl	800f9ac <uxr_next_input_reliable_buffer_available>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	a914      	add	r1, sp, #80	@ 0x50
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1ea      	bne.n	800b8d2 <wait_session_status+0x11a>
 800b8fc:	4632      	mov	r2, r6
 800b8fe:	4641      	mov	r1, r8
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff f9ad 	bl	800ac60 <write_submessage_acknack.isra.0>
 800b906:	e771      	b.n	800b7ec <wait_session_status+0x34>
 800b908:	4631      	mov	r1, r6
 800b90a:	f104 0008 	add.w	r0, r4, #8
 800b90e:	f000 fac9 	bl	800bea4 <uxr_get_input_best_effort_stream>
 800b912:	2800      	cmp	r0, #0
 800b914:	f43f af6a 	beq.w	800b7ec <wait_session_status+0x34>
 800b918:	9902      	ldr	r1, [sp, #8]
 800b91a:	f003 ff43 	bl	800f7a4 <uxr_receive_best_effort_message>
 800b91e:	2800      	cmp	r0, #0
 800b920:	f43f af64 	beq.w	800b7ec <wait_session_status+0x34>
 800b924:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800b928:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b92c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b930:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b932:	a90c      	add	r1, sp, #48	@ 0x30
 800b934:	4620      	mov	r0, r4
 800b936:	f7ff fb15 	bl	800af64 <read_submessage_list>
 800b93a:	e757      	b.n	800b7ec <wait_session_status+0x34>
 800b93c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b93e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b942:	47a0      	blx	r4
 800b944:	2001      	movs	r0, #1
 800b946:	b01d      	add	sp, #116	@ 0x74
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800b950:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800b954:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800b958:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b95a:	a90c      	add	r1, sp, #48	@ 0x30
 800b95c:	4620      	mov	r0, r4
 800b95e:	f7ff fb01 	bl	800af64 <read_submessage_list>
 800b962:	e7c1      	b.n	800b8e8 <wait_session_status+0x130>

0800b964 <uxr_delete_session_retries>:
 800b964:	b530      	push	{r4, r5, lr}
 800b966:	b08f      	sub	sp, #60	@ 0x3c
 800b968:	4604      	mov	r4, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	f000 f954 	bl	800bc18 <uxr_session_header_offset>
 800b970:	2300      	movs	r3, #0
 800b972:	2210      	movs	r2, #16
 800b974:	9000      	str	r0, [sp, #0]
 800b976:	a902      	add	r1, sp, #8
 800b978:	a806      	add	r0, sp, #24
 800b97a:	f7fe ff11 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800b97e:	a906      	add	r1, sp, #24
 800b980:	4620      	mov	r0, r4
 800b982:	f000 f897 	bl	800bab4 <uxr_buffer_delete_session>
 800b986:	2200      	movs	r2, #0
 800b988:	4611      	mov	r1, r2
 800b98a:	9b06      	ldr	r3, [sp, #24]
 800b98c:	4620      	mov	r0, r4
 800b98e:	f000 f8eb 	bl	800bb68 <uxr_stamp_session_header>
 800b992:	a806      	add	r0, sp, #24
 800b994:	f7fe ff42 	bl	800a81c <ucdr_buffer_length>
 800b998:	462b      	mov	r3, r5
 800b99a:	4602      	mov	r2, r0
 800b99c:	a902      	add	r1, sp, #8
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f7ff ff0a 	bl	800b7b8 <wait_session_status>
 800b9a4:	b118      	cbz	r0, 800b9ae <uxr_delete_session_retries+0x4a>
 800b9a6:	7960      	ldrb	r0, [r4, #5]
 800b9a8:	fab0 f080 	clz	r0, r0
 800b9ac:	0940      	lsrs	r0, r0, #5
 800b9ae:	b00f      	add	sp, #60	@ 0x3c
 800b9b0:	bd30      	pop	{r4, r5, pc}
 800b9b2:	bf00      	nop

0800b9b4 <uxr_prepare_stream_to_write_submessage>:
 800b9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	4682      	mov	sl, r0
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4615      	mov	r5, r2
 800b9c0:	461e      	mov	r6, r3
 800b9c2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800b9c6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800b9ca:	9101      	str	r1, [sp, #4]
 800b9cc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b9d0:	f000 fad4 	bl	800bf7c <uxr_submessage_padding>
 800b9d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9d8:	f105 0904 	add.w	r9, r5, #4
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	4481      	add	r9, r0
 800b9e0:	d01d      	beq.n	800ba1e <uxr_prepare_stream_to_write_submessage+0x6a>
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d116      	bne.n	800ba14 <uxr_prepare_stream_to_write_submessage+0x60>
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	f10a 0008 	add.w	r0, sl, #8
 800b9ec:	f000 fa4e 	bl	800be8c <uxr_get_output_reliable_stream>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	b158      	cbz	r0, 800ba0c <uxr_prepare_stream_to_write_submessage+0x58>
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	f004 f98e 	bl	800fd18 <uxr_prepare_reliable_buffer_to_write>
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	b12c      	cbz	r4, 800ba0c <uxr_prepare_stream_to_write_submessage+0x58>
 800ba00:	4643      	mov	r3, r8
 800ba02:	b2aa      	uxth	r2, r5
 800ba04:	4639      	mov	r1, r7
 800ba06:	4630      	mov	r0, r6
 800ba08:	f000 fa78 	bl	800befc <uxr_buffer_submessage_header>
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	b002      	add	sp, #8
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	2400      	movs	r4, #0
 800ba16:	4620      	mov	r0, r4
 800ba18:	b002      	add	sp, #8
 800ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1e:	4621      	mov	r1, r4
 800ba20:	f10a 0008 	add.w	r0, sl, #8
 800ba24:	f000 fa2a 	bl	800be7c <uxr_get_output_best_effort_stream>
 800ba28:	4604      	mov	r4, r0
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d0ee      	beq.n	800ba0c <uxr_prepare_stream_to_write_submessage+0x58>
 800ba2e:	4649      	mov	r1, r9
 800ba30:	4632      	mov	r2, r6
 800ba32:	f004 f8ad 	bl	800fb90 <uxr_prepare_best_effort_buffer_to_write>
 800ba36:	4604      	mov	r4, r0
 800ba38:	e7e1      	b.n	800b9fe <uxr_prepare_stream_to_write_submessage+0x4a>
 800ba3a:	bf00      	nop

0800ba3c <uxr_init_session_info>:
 800ba3c:	b470      	push	{r4, r5, r6}
 800ba3e:	7102      	strb	r2, [r0, #4]
 800ba40:	0e16      	lsrs	r6, r2, #24
 800ba42:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800ba46:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800ba4a:	23ff      	movs	r3, #255	@ 0xff
 800ba4c:	2209      	movs	r2, #9
 800ba4e:	7046      	strb	r6, [r0, #1]
 800ba50:	7085      	strb	r5, [r0, #2]
 800ba52:	70c4      	strb	r4, [r0, #3]
 800ba54:	7001      	strb	r1, [r0, #0]
 800ba56:	bc70      	pop	{r4, r5, r6}
 800ba58:	80c2      	strh	r2, [r0, #6]
 800ba5a:	7143      	strb	r3, [r0, #5]
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop

0800ba60 <uxr_buffer_create_session>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	2300      	movs	r3, #0
 800ba66:	4d12      	ldr	r5, [pc, #72]	@ (800bab0 <uxr_buffer_create_session+0x50>)
 800ba68:	9307      	str	r3, [sp, #28]
 800ba6a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ba6e:	7802      	ldrb	r2, [r0, #0]
 800ba70:	9303      	str	r3, [sp, #12]
 800ba72:	460c      	mov	r4, r1
 800ba74:	f88d 200c 	strb.w	r2, [sp, #12]
 800ba78:	2101      	movs	r1, #1
 800ba7a:	682a      	ldr	r2, [r5, #0]
 800ba7c:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800ba80:	88ad      	ldrh	r5, [r5, #4]
 800ba82:	80c1      	strh	r1, [r0, #6]
 800ba84:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ba88:	9200      	str	r2, [sp, #0]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	2210      	movs	r2, #16
 800ba8e:	4620      	mov	r0, r4
 800ba90:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ba94:	9306      	str	r3, [sp, #24]
 800ba96:	f88d 300d 	strb.w	r3, [sp, #13]
 800ba9a:	9602      	str	r6, [sp, #8]
 800ba9c:	f8ad 5006 	strh.w	r5, [sp, #6]
 800baa0:	f000 fa2c 	bl	800befc <uxr_buffer_submessage_header>
 800baa4:	4620      	mov	r0, r4
 800baa6:	4669      	mov	r1, sp
 800baa8:	f001 f964 	bl	800cd74 <uxr_serialize_CREATE_CLIENT_Payload>
 800baac:	b008      	add	sp, #32
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	08012878 	.word	0x08012878

0800bab4 <uxr_buffer_delete_session>:
 800bab4:	b530      	push	{r4, r5, lr}
 800bab6:	4b0c      	ldr	r3, [pc, #48]	@ (800bae8 <uxr_buffer_delete_session+0x34>)
 800bab8:	b083      	sub	sp, #12
 800baba:	891b      	ldrh	r3, [r3, #8]
 800babc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bac0:	2202      	movs	r2, #2
 800bac2:	460c      	mov	r4, r1
 800bac4:	80c2      	strh	r2, [r0, #6]
 800bac6:	2300      	movs	r3, #0
 800bac8:	2204      	movs	r2, #4
 800baca:	4608      	mov	r0, r1
 800bacc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800bad0:	2103      	movs	r1, #3
 800bad2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800bad6:	f000 fa11 	bl	800befc <uxr_buffer_submessage_header>
 800bada:	4620      	mov	r0, r4
 800badc:	a901      	add	r1, sp, #4
 800bade:	f001 f9f7 	bl	800ced0 <uxr_serialize_DELETE_Payload>
 800bae2:	b003      	add	sp, #12
 800bae4:	bd30      	pop	{r4, r5, pc}
 800bae6:	bf00      	nop
 800bae8:	08012878 	.word	0x08012878

0800baec <uxr_read_create_session_status>:
 800baec:	b510      	push	{r4, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	4604      	mov	r4, r0
 800baf2:	4608      	mov	r0, r1
 800baf4:	a901      	add	r1, sp, #4
 800baf6:	f001 f9fb 	bl	800cef0 <uxr_deserialize_STATUS_AGENT_Payload>
 800bafa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bafe:	7163      	strb	r3, [r4, #5]
 800bb00:	b008      	add	sp, #32
 800bb02:	bd10      	pop	{r4, pc}

0800bb04 <uxr_read_delete_session_status>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	4604      	mov	r4, r0
 800bb08:	b084      	sub	sp, #16
 800bb0a:	4608      	mov	r0, r1
 800bb0c:	a902      	add	r1, sp, #8
 800bb0e:	f001 fa1f 	bl	800cf50 <uxr_deserialize_STATUS_Payload>
 800bb12:	88e3      	ldrh	r3, [r4, #6]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d001      	beq.n	800bb1c <uxr_read_delete_session_status+0x18>
 800bb18:	b004      	add	sp, #16
 800bb1a:	bd10      	pop	{r4, pc}
 800bb1c:	f10d 000a 	add.w	r0, sp, #10
 800bb20:	f7ff f826 	bl	800ab70 <uxr_object_id_from_raw>
 800bb24:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800bb28:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800bb2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	bf04      	itt	eq
 800bb36:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800bb3a:	7163      	strbeq	r3, [r4, #5]
 800bb3c:	b004      	add	sp, #16
 800bb3e:	bd10      	pop	{r4, pc}

0800bb40 <uxr_stamp_create_session_header>:
 800bb40:	b510      	push	{r4, lr}
 800bb42:	4604      	mov	r4, r0
 800bb44:	b08a      	sub	sp, #40	@ 0x28
 800bb46:	a802      	add	r0, sp, #8
 800bb48:	2208      	movs	r2, #8
 800bb4a:	f7fe fe3b 	bl	800a7c4 <ucdr_init_buffer>
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	9400      	str	r4, [sp, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	a802      	add	r0, sp, #8
 800bb58:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	f000 fbcb 	bl	800c2f8 <uxr_serialize_message_header>
 800bb62:	b00a      	add	sp, #40	@ 0x28
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	bf00      	nop

0800bb68 <uxr_stamp_session_header>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	b08c      	sub	sp, #48	@ 0x30
 800bb6e:	460d      	mov	r5, r1
 800bb70:	4616      	mov	r6, r2
 800bb72:	4619      	mov	r1, r3
 800bb74:	a804      	add	r0, sp, #16
 800bb76:	2208      	movs	r2, #8
 800bb78:	9603      	str	r6, [sp, #12]
 800bb7a:	f7fe fe23 	bl	800a7c4 <ucdr_init_buffer>
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	9b03      	ldr	r3, [sp, #12]
 800bb84:	9400      	str	r4, [sp, #0]
 800bb86:	462a      	mov	r2, r5
 800bb88:	a804      	add	r0, sp, #16
 800bb8a:	f000 fbb5 	bl	800c2f8 <uxr_serialize_message_header>
 800bb8e:	b00c      	add	sp, #48	@ 0x30
 800bb90:	bd70      	pop	{r4, r5, r6, pc}
 800bb92:	bf00      	nop

0800bb94 <uxr_read_session_header>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	4607      	mov	r7, r0
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	460c      	mov	r4, r1
 800bba0:	4615      	mov	r5, r2
 800bba2:	461e      	mov	r6, r3
 800bba4:	f7fe fe3e 	bl	800a824 <ucdr_buffer_remaining>
 800bba8:	2808      	cmp	r0, #8
 800bbaa:	d803      	bhi.n	800bbb4 <uxr_read_session_header+0x20>
 800bbac:	2000      	movs	r0, #0
 800bbae:	b004      	add	sp, #16
 800bbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb4:	f10d 080c 	add.w	r8, sp, #12
 800bbb8:	4633      	mov	r3, r6
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f8cd 8000 	str.w	r8, [sp]
 800bbc2:	f10d 010b 	add.w	r1, sp, #11
 800bbc6:	f000 fbb5 	bl	800c334 <uxr_deserialize_message_header>
 800bbca:	783a      	ldrb	r2, [r7, #0]
 800bbcc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d1eb      	bne.n	800bbac <uxr_read_session_header+0x18>
 800bbd4:	061b      	lsls	r3, r3, #24
 800bbd6:	d41c      	bmi.n	800bc12 <uxr_read_session_header+0x7e>
 800bbd8:	f898 2000 	ldrb.w	r2, [r8]
 800bbdc:	787b      	ldrb	r3, [r7, #1]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d003      	beq.n	800bbea <uxr_read_session_header+0x56>
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	f080 0001 	eor.w	r0, r0, #1
 800bbe8:	e7e1      	b.n	800bbae <uxr_read_session_header+0x1a>
 800bbea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800bbee:	78bb      	ldrb	r3, [r7, #2]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	f107 0102 	add.w	r1, r7, #2
 800bbf6:	d1f4      	bne.n	800bbe2 <uxr_read_session_header+0x4e>
 800bbf8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800bbfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d1ee      	bne.n	800bbe2 <uxr_read_session_header+0x4e>
 800bc04:	784b      	ldrb	r3, [r1, #1]
 800bc06:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d1e9      	bne.n	800bbe2 <uxr_read_session_header+0x4e>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e7e8      	b.n	800bbe4 <uxr_read_session_header+0x50>
 800bc12:	2001      	movs	r0, #1
 800bc14:	e7cb      	b.n	800bbae <uxr_read_session_header+0x1a>
 800bc16:	bf00      	nop

0800bc18 <uxr_session_header_offset>:
 800bc18:	f990 3000 	ldrsb.w	r3, [r0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	bfac      	ite	ge
 800bc20:	2008      	movge	r0, #8
 800bc22:	2004      	movlt	r0, #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop

0800bc28 <uxr_init_base_object_request>:
 800bc28:	b530      	push	{r4, r5, lr}
 800bc2a:	88c3      	ldrh	r3, [r0, #6]
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800bc32:	9101      	str	r1, [sp, #4]
 800bc34:	f1a3 010a 	sub.w	r1, r3, #10
 800bc38:	b289      	uxth	r1, r1
 800bc3a:	42a1      	cmp	r1, r4
 800bc3c:	d80e      	bhi.n	800bc5c <uxr_init_base_object_request+0x34>
 800bc3e:	3301      	adds	r3, #1
 800bc40:	b29c      	uxth	r4, r3
 800bc42:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	80c4      	strh	r4, [r0, #6]
 800bc4a:	1c91      	adds	r1, r2, #2
 800bc4c:	9801      	ldr	r0, [sp, #4]
 800bc4e:	7015      	strb	r5, [r2, #0]
 800bc50:	7053      	strb	r3, [r2, #1]
 800bc52:	f7fe ffa1 	bl	800ab98 <uxr_object_id_to_raw>
 800bc56:	4620      	mov	r0, r4
 800bc58:	b003      	add	sp, #12
 800bc5a:	bd30      	pop	{r4, r5, pc}
 800bc5c:	230a      	movs	r3, #10
 800bc5e:	461c      	mov	r4, r3
 800bc60:	2500      	movs	r5, #0
 800bc62:	e7f1      	b.n	800bc48 <uxr_init_base_object_request+0x20>

0800bc64 <uxr_parse_base_object_request>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	4604      	mov	r4, r0
 800bc68:	3002      	adds	r0, #2
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	f7fe ff7f 	bl	800ab70 <uxr_object_id_from_raw>
 800bc72:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800bc76:	8028      	strh	r0, [r5, #0]
 800bc78:	806b      	strh	r3, [r5, #2]
 800bc7a:	7822      	ldrb	r2, [r4, #0]
 800bc7c:	7863      	ldrb	r3, [r4, #1]
 800bc7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bc82:	8033      	strh	r3, [r6, #0]
 800bc84:	bd70      	pop	{r4, r5, r6, pc}
 800bc86:	bf00      	nop

0800bc88 <uxr_stream_id>:
 800bc88:	b410      	push	{r4}
 800bc8a:	2901      	cmp	r1, #1
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	d01f      	beq.n	800bcd0 <uxr_stream_id+0x48>
 800bc90:	2902      	cmp	r1, #2
 800bc92:	f04f 0400 	mov.w	r4, #0
 800bc96:	d01e      	beq.n	800bcd6 <uxr_stream_id+0x4e>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f364 0307 	bfi	r3, r4, #0, #8
 800bc9e:	f360 230f 	bfi	r3, r0, #8, #8
 800bca2:	f361 4317 	bfi	r3, r1, #16, #8
 800bca6:	f362 631f 	bfi	r3, r2, #24, #8
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	2000      	movs	r0, #0
 800bcae:	f362 0007 	bfi	r0, r2, #0, #8
 800bcb2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bcb6:	f362 200f 	bfi	r0, r2, #8, #8
 800bcba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bcbe:	f362 4017 	bfi	r0, r2, #16, #8
 800bcc2:	0e1b      	lsrs	r3, r3, #24
 800bcc4:	f363 601f 	bfi	r0, r3, #24, #8
 800bcc8:	b003      	add	sp, #12
 800bcca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	1c44      	adds	r4, r0, #1
 800bcd2:	b2e4      	uxtb	r4, r4
 800bcd4:	e7e0      	b.n	800bc98 <uxr_stream_id+0x10>
 800bcd6:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 800bcda:	e7dd      	b.n	800bc98 <uxr_stream_id+0x10>

0800bcdc <uxr_stream_id_from_raw>:
 800bcdc:	b410      	push	{r4}
 800bcde:	b083      	sub	sp, #12
 800bce0:	b128      	cbz	r0, 800bcee <uxr_stream_id_from_raw+0x12>
 800bce2:	0603      	lsls	r3, r0, #24
 800bce4:	d421      	bmi.n	800bd2a <uxr_stream_id_from_raw+0x4e>
 800bce6:	1e42      	subs	r2, r0, #1
 800bce8:	b2d2      	uxtb	r2, r2
 800bcea:	2401      	movs	r4, #1
 800bcec:	e001      	b.n	800bcf2 <uxr_stream_id_from_raw+0x16>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f360 0307 	bfi	r3, r0, #0, #8
 800bcf8:	f362 230f 	bfi	r3, r2, #8, #8
 800bcfc:	f364 4317 	bfi	r3, r4, #16, #8
 800bd00:	f361 631f 	bfi	r3, r1, #24, #8
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	2000      	movs	r0, #0
 800bd08:	f362 0007 	bfi	r0, r2, #0, #8
 800bd0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bd10:	f362 200f 	bfi	r0, r2, #8, #8
 800bd14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bd18:	f362 4017 	bfi	r0, r2, #16, #8
 800bd1c:	0e1b      	lsrs	r3, r3, #24
 800bd1e:	f363 601f 	bfi	r0, r3, #24, #8
 800bd22:	b003      	add	sp, #12
 800bd24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800bd2e:	2402      	movs	r4, #2
 800bd30:	e7df      	b.n	800bcf2 <uxr_stream_id_from_raw+0x16>
 800bd32:	bf00      	nop

0800bd34 <uxr_init_stream_storage>:
 800bd34:	2300      	movs	r3, #0
 800bd36:	7403      	strb	r3, [r0, #16]
 800bd38:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800bd3c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800bd40:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop

0800bd48 <uxr_reset_stream_storage>:
 800bd48:	b570      	push	{r4, r5, r6, lr}
 800bd4a:	7c03      	ldrb	r3, [r0, #16]
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	b153      	cbz	r3, 800bd66 <uxr_reset_stream_storage+0x1e>
 800bd50:	4606      	mov	r6, r0
 800bd52:	2500      	movs	r5, #0
 800bd54:	4630      	mov	r0, r6
 800bd56:	f003 ff15 	bl	800fb84 <uxr_reset_output_best_effort_stream>
 800bd5a:	7c23      	ldrb	r3, [r4, #16]
 800bd5c:	3501      	adds	r5, #1
 800bd5e:	42ab      	cmp	r3, r5
 800bd60:	f106 0610 	add.w	r6, r6, #16
 800bd64:	d8f6      	bhi.n	800bd54 <uxr_reset_stream_storage+0xc>
 800bd66:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bd6a:	b163      	cbz	r3, 800bd86 <uxr_reset_stream_storage+0x3e>
 800bd6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd70:	2500      	movs	r5, #0
 800bd72:	4630      	mov	r0, r6
 800bd74:	f003 fd12 	bl	800f79c <uxr_reset_input_best_effort_stream>
 800bd78:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	42ab      	cmp	r3, r5
 800bd80:	f106 0602 	add.w	r6, r6, #2
 800bd84:	d8f5      	bhi.n	800bd72 <uxr_reset_stream_storage+0x2a>
 800bd86:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800bd8a:	b163      	cbz	r3, 800bda6 <uxr_reset_stream_storage+0x5e>
 800bd8c:	f104 0618 	add.w	r6, r4, #24
 800bd90:	2500      	movs	r5, #0
 800bd92:	4630      	mov	r0, r6
 800bd94:	f003 ff96 	bl	800fcc4 <uxr_reset_output_reliable_stream>
 800bd98:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800bd9c:	3501      	adds	r5, #1
 800bd9e:	42ab      	cmp	r3, r5
 800bda0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800bda4:	d8f5      	bhi.n	800bd92 <uxr_reset_stream_storage+0x4a>
 800bda6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800bdaa:	b163      	cbz	r3, 800bdc6 <uxr_reset_stream_storage+0x7e>
 800bdac:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800bdb0:	2500      	movs	r5, #0
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f003 fd5a 	bl	800f86c <uxr_reset_input_reliable_stream>
 800bdb8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800bdbc:	3501      	adds	r5, #1
 800bdbe:	42ab      	cmp	r3, r5
 800bdc0:	f106 0618 	add.w	r6, r6, #24
 800bdc4:	d8f5      	bhi.n	800bdb2 <uxr_reset_stream_storage+0x6a>
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}

0800bdc8 <uxr_add_output_best_effort_buffer>:
 800bdc8:	b530      	push	{r4, r5, lr}
 800bdca:	7c04      	ldrb	r4, [r0, #16]
 800bdcc:	1c65      	adds	r5, r4, #1
 800bdce:	b083      	sub	sp, #12
 800bdd0:	7405      	strb	r5, [r0, #16]
 800bdd2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800bdd6:	f003 fec9 	bl	800fb6c <uxr_init_output_best_effort_stream>
 800bdda:	2201      	movs	r2, #1
 800bddc:	4620      	mov	r0, r4
 800bdde:	4611      	mov	r1, r2
 800bde0:	b003      	add	sp, #12
 800bde2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bde6:	f7ff bf4f 	b.w	800bc88 <uxr_stream_id>
 800bdea:	bf00      	nop

0800bdec <uxr_add_output_reliable_buffer>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 800bdf4:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800bdf8:	9600      	str	r6, [sp, #0]
 800bdfa:	2528      	movs	r5, #40	@ 0x28
 800bdfc:	1c66      	adds	r6, r4, #1
 800bdfe:	fb05 0504 	mla	r5, r5, r4, r0
 800be02:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 800be06:	f105 0018 	add.w	r0, r5, #24
 800be0a:	f003 ff29 	bl	800fc60 <uxr_init_output_reliable_stream>
 800be0e:	4620      	mov	r0, r4
 800be10:	2201      	movs	r2, #1
 800be12:	2102      	movs	r1, #2
 800be14:	b004      	add	sp, #16
 800be16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be1a:	f7ff bf35 	b.w	800bc88 <uxr_stream_id>
 800be1e:	bf00      	nop

0800be20 <uxr_add_input_best_effort_buffer>:
 800be20:	b510      	push	{r4, lr}
 800be22:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800be26:	1c62      	adds	r2, r4, #1
 800be28:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800be2c:	b082      	sub	sp, #8
 800be2e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800be32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800be36:	f003 fcad 	bl	800f794 <uxr_init_input_best_effort_stream>
 800be3a:	4620      	mov	r0, r4
 800be3c:	2200      	movs	r2, #0
 800be3e:	2101      	movs	r1, #1
 800be40:	b002      	add	sp, #8
 800be42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be46:	f7ff bf1f 	b.w	800bc88 <uxr_stream_id>
 800be4a:	bf00      	nop

0800be4c <uxr_add_input_reliable_buffer>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800be54:	9e08      	ldr	r6, [sp, #32]
 800be56:	9600      	str	r6, [sp, #0]
 800be58:	2518      	movs	r5, #24
 800be5a:	1c66      	adds	r6, r4, #1
 800be5c:	fb05 0504 	mla	r5, r5, r4, r0
 800be60:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 800be64:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800be68:	f003 fcdc 	bl	800f824 <uxr_init_input_reliable_stream>
 800be6c:	4620      	mov	r0, r4
 800be6e:	2200      	movs	r2, #0
 800be70:	2102      	movs	r1, #2
 800be72:	b004      	add	sp, #16
 800be74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be78:	f7ff bf06 	b.w	800bc88 <uxr_stream_id>

0800be7c <uxr_get_output_best_effort_stream>:
 800be7c:	7c03      	ldrb	r3, [r0, #16]
 800be7e:	428b      	cmp	r3, r1
 800be80:	bf8c      	ite	hi
 800be82:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800be86:	2000      	movls	r0, #0
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop

0800be8c <uxr_get_output_reliable_stream>:
 800be8c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800be90:	428b      	cmp	r3, r1
 800be92:	bf83      	ittte	hi
 800be94:	2328      	movhi	r3, #40	@ 0x28
 800be96:	fb03 0101 	mlahi	r1, r3, r1, r0
 800be9a:	f101 0018 	addhi.w	r0, r1, #24
 800be9e:	2000      	movls	r0, #0
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop

0800bea4 <uxr_get_input_best_effort_stream>:
 800bea4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bea8:	428b      	cmp	r3, r1
 800beaa:	bf86      	itte	hi
 800beac:	3121      	addhi	r1, #33	@ 0x21
 800beae:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800beb2:	2000      	movls	r0, #0
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop

0800beb8 <uxr_get_input_reliable_stream>:
 800beb8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800bebc:	428b      	cmp	r3, r1
 800bebe:	bf83      	ittte	hi
 800bec0:	2318      	movhi	r3, #24
 800bec2:	fb03 0101 	mlahi	r1, r3, r1, r0
 800bec6:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 800beca:	2000      	movls	r0, #0
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop

0800bed0 <uxr_output_streams_confirmed>:
 800bed0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bed4:	b183      	cbz	r3, 800bef8 <uxr_output_streams_confirmed+0x28>
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	4606      	mov	r6, r0
 800beda:	f100 0518 	add.w	r5, r0, #24
 800bede:	2400      	movs	r4, #0
 800bee0:	e001      	b.n	800bee6 <uxr_output_streams_confirmed+0x16>
 800bee2:	3528      	adds	r5, #40	@ 0x28
 800bee4:	b138      	cbz	r0, 800bef6 <uxr_output_streams_confirmed+0x26>
 800bee6:	4628      	mov	r0, r5
 800bee8:	f004 f95c 	bl	80101a4 <uxr_is_output_up_to_date>
 800beec:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800bef0:	3401      	adds	r4, #1
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	d8f5      	bhi.n	800bee2 <uxr_output_streams_confirmed+0x12>
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	2001      	movs	r0, #1
 800befa:	4770      	bx	lr

0800befc <uxr_buffer_submessage_header>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	4604      	mov	r4, r0
 800bf00:	460e      	mov	r6, r1
 800bf02:	2104      	movs	r1, #4
 800bf04:	4615      	mov	r5, r2
 800bf06:	461f      	mov	r7, r3
 800bf08:	f7fe fc76 	bl	800a7f8 <ucdr_align_to>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	ea47 0203 	orr.w	r2, r7, r3
 800bf12:	4631      	mov	r1, r6
 800bf14:	7523      	strb	r3, [r4, #20]
 800bf16:	4620      	mov	r0, r4
 800bf18:	462b      	mov	r3, r5
 800bf1a:	f000 fa2b 	bl	800c374 <uxr_serialize_submessage_header>
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7fe fc80 	bl	800a824 <ucdr_buffer_remaining>
 800bf24:	42a8      	cmp	r0, r5
 800bf26:	bf34      	ite	cc
 800bf28:	2000      	movcc	r0, #0
 800bf2a:	2001      	movcs	r0, #1
 800bf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf2e:	bf00      	nop

0800bf30 <uxr_read_submessage_header>:
 800bf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf34:	4604      	mov	r4, r0
 800bf36:	460d      	mov	r5, r1
 800bf38:	2104      	movs	r1, #4
 800bf3a:	4616      	mov	r6, r2
 800bf3c:	4698      	mov	r8, r3
 800bf3e:	f7fe fc5b 	bl	800a7f8 <ucdr_align_to>
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7fe fc6e 	bl	800a824 <ucdr_buffer_remaining>
 800bf48:	2803      	cmp	r0, #3
 800bf4a:	bf8c      	ite	hi
 800bf4c:	2701      	movhi	r7, #1
 800bf4e:	2700      	movls	r7, #0
 800bf50:	d802      	bhi.n	800bf58 <uxr_read_submessage_header+0x28>
 800bf52:	4638      	mov	r0, r7
 800bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf58:	4633      	mov	r3, r6
 800bf5a:	4642      	mov	r2, r8
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f000 fa1c 	bl	800c39c <uxr_deserialize_submessage_header>
 800bf64:	f898 3000 	ldrb.w	r3, [r8]
 800bf68:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	f888 2000 	strb.w	r2, [r8]
 800bf74:	7523      	strb	r3, [r4, #20]
 800bf76:	4638      	mov	r0, r7
 800bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf7c <uxr_submessage_padding>:
 800bf7c:	f010 0003 	ands.w	r0, r0, #3
 800bf80:	bf18      	it	ne
 800bf82:	f1c0 0004 	rsbne	r0, r0, #4
 800bf86:	4770      	bx	lr

0800bf88 <uxr_millis>:
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	4669      	mov	r1, sp
 800bf8e:	2001      	movs	r0, #1
 800bf90:	f7f5 fb16 	bl	80015c0 <clock_gettime>
 800bf94:	e9dd 2400 	ldrd	r2, r4, [sp]
 800bf98:	4907      	ldr	r1, [pc, #28]	@ (800bfb8 <uxr_millis+0x30>)
 800bf9a:	9802      	ldr	r0, [sp, #8]
 800bf9c:	fba2 2301 	umull	r2, r3, r2, r1
 800bfa0:	fb01 3304 	mla	r3, r1, r4, r3
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	1810      	adds	r0, r2, r0
 800bfa8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800bfac:	4a03      	ldr	r2, [pc, #12]	@ (800bfbc <uxr_millis+0x34>)
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f7f4 f97e 	bl	80002b0 <__aeabi_ldivmod>
 800bfb4:	b004      	add	sp, #16
 800bfb6:	bd10      	pop	{r4, pc}
 800bfb8:	3b9aca00 	.word	0x3b9aca00
 800bfbc:	000f4240 	.word	0x000f4240

0800bfc0 <uxr_nanos>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	4669      	mov	r1, sp
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f7f5 fafa 	bl	80015c0 <clock_gettime>
 800bfcc:	e9dd 2400 	ldrd	r2, r4, [sp]
 800bfd0:	4905      	ldr	r1, [pc, #20]	@ (800bfe8 <uxr_nanos+0x28>)
 800bfd2:	9802      	ldr	r0, [sp, #8]
 800bfd4:	fba2 2301 	umull	r2, r3, r2, r1
 800bfd8:	fb01 3304 	mla	r3, r1, r4, r3
 800bfdc:	4604      	mov	r4, r0
 800bfde:	1810      	adds	r0, r2, r0
 800bfe0:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800bfe4:	b004      	add	sp, #16
 800bfe6:	bd10      	pop	{r4, pc}
 800bfe8:	3b9aca00 	.word	0x3b9aca00

0800bfec <on_full_output_buffer_fragmented>:
 800bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff0:	460c      	mov	r4, r1
 800bff2:	b08a      	sub	sp, #40	@ 0x28
 800bff4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800bff8:	4606      	mov	r6, r0
 800bffa:	f104 0008 	add.w	r0, r4, #8
 800bffe:	f7ff ff45 	bl	800be8c <uxr_get_output_reliable_stream>
 800c002:	4605      	mov	r5, r0
 800c004:	f004 f8d8 	bl	80101b8 <get_available_free_slots>
 800c008:	b968      	cbnz	r0, 800c026 <on_full_output_buffer_fragmented+0x3a>
 800c00a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800c00e:	4620      	mov	r0, r4
 800c010:	4798      	blx	r3
 800c012:	b918      	cbnz	r0, 800c01c <on_full_output_buffer_fragmented+0x30>
 800c014:	2001      	movs	r0, #1
 800c016:	b00a      	add	sp, #40	@ 0x28
 800c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c01c:	4628      	mov	r0, r5
 800c01e:	f004 f8cb 	bl	80101b8 <get_available_free_slots>
 800c022:	2800      	cmp	r0, #0
 800c024:	d0f6      	beq.n	800c014 <on_full_output_buffer_fragmented+0x28>
 800c026:	8928      	ldrh	r0, [r5, #8]
 800c028:	89eb      	ldrh	r3, [r5, #14]
 800c02a:	7b2a      	ldrb	r2, [r5, #12]
 800c02c:	fbb3 f1f0 	udiv	r1, r3, r0
 800c030:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 800c034:	fb00 3111 	mls	r1, r0, r1, r3
 800c038:	b28b      	uxth	r3, r1
 800c03a:	32fc      	adds	r2, #252	@ 0xfc
 800c03c:	6869      	ldr	r1, [r5, #4]
 800c03e:	fbb1 f1f0 	udiv	r1, r1, r0
 800c042:	1f0f      	subs	r7, r1, #4
 800c044:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 800c048:	fb01 f103 	mul.w	r1, r1, r3
 800c04c:	443a      	add	r2, r7
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	fa1f f882 	uxth.w	r8, r2
 800c054:	3104      	adds	r1, #4
 800c056:	4419      	add	r1, r3
 800c058:	eba0 0008 	sub.w	r0, r0, r8
 800c05c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800c060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	463a      	mov	r2, r7
 800c068:	2300      	movs	r3, #0
 800c06a:	a802      	add	r0, sp, #8
 800c06c:	f7fe fb98 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800c070:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800c074:	f102 0308 	add.w	r3, r2, #8
 800c078:	42bb      	cmp	r3, r7
 800c07a:	d927      	bls.n	800c0cc <on_full_output_buffer_fragmented+0xe0>
 800c07c:	4642      	mov	r2, r8
 800c07e:	2300      	movs	r3, #0
 800c080:	210d      	movs	r1, #13
 800c082:	a802      	add	r0, sp, #8
 800c084:	f7ff ff3a 	bl	800befc <uxr_buffer_submessage_header>
 800c088:	8928      	ldrh	r0, [r5, #8]
 800c08a:	89eb      	ldrh	r3, [r5, #14]
 800c08c:	fbb3 f1f0 	udiv	r1, r3, r0
 800c090:	fb00 3111 	mls	r1, r0, r1, r3
 800c094:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c098:	b289      	uxth	r1, r1
 800c09a:	fbb3 f3f0 	udiv	r3, r3, r0
 800c09e:	fb03 f301 	mul.w	r3, r3, r1
 800c0a2:	50d7      	str	r7, [r2, r3]
 800c0a4:	89e8      	ldrh	r0, [r5, #14]
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	f004 f992 	bl	80103d0 <uxr_seq_num_add>
 800c0ac:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800c0b0:	81e8      	strh	r0, [r5, #14]
 800c0b2:	1a52      	subs	r2, r2, r1
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7fe fb85 	bl	800a7c4 <ucdr_init_buffer>
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	490f      	ldr	r1, [pc, #60]	@ (800c0fc <on_full_output_buffer_fragmented+0x110>)
 800c0be:	4622      	mov	r2, r4
 800c0c0:	f7fe fb56 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	b00a      	add	sp, #40	@ 0x28
 800c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0cc:	b292      	uxth	r2, r2
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	210d      	movs	r1, #13
 800c0d2:	a802      	add	r0, sp, #8
 800c0d4:	f7ff ff12 	bl	800befc <uxr_buffer_submessage_header>
 800c0d8:	8928      	ldrh	r0, [r5, #8]
 800c0da:	89eb      	ldrh	r3, [r5, #14]
 800c0dc:	fbb3 f2f0 	udiv	r2, r3, r0
 800c0e0:	fb00 3212 	mls	r2, r0, r2, r3
 800c0e4:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800c0e8:	686b      	ldr	r3, [r5, #4]
 800c0ea:	fbb3 f3f0 	udiv	r3, r3, r0
 800c0ee:	b292      	uxth	r2, r2
 800c0f0:	6828      	ldr	r0, [r5, #0]
 800c0f2:	fb03 f302 	mul.w	r3, r3, r2
 800c0f6:	3108      	adds	r1, #8
 800c0f8:	50c1      	str	r1, [r0, r3]
 800c0fa:	e7d3      	b.n	800c0a4 <on_full_output_buffer_fragmented+0xb8>
 800c0fc:	0800bfed 	.word	0x0800bfed

0800c100 <uxr_prepare_output_stream>:
 800c100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c102:	b087      	sub	sp, #28
 800c104:	2407      	movs	r4, #7
 800c106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c108:	9202      	str	r2, [sp, #8]
 800c10a:	2500      	movs	r5, #0
 800c10c:	1d32      	adds	r2, r6, #4
 800c10e:	e9cd 4500 	strd	r4, r5, [sp]
 800c112:	9103      	str	r1, [sp, #12]
 800c114:	461c      	mov	r4, r3
 800c116:	4606      	mov	r6, r0
 800c118:	f7ff fc4c 	bl	800b9b4 <uxr_prepare_stream_to_write_submessage>
 800c11c:	f080 0201 	eor.w	r2, r0, #1
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	75a2      	strb	r2, [r4, #22]
 800c124:	b112      	cbz	r2, 800c12c <uxr_prepare_output_stream+0x2c>
 800c126:	4628      	mov	r0, r5
 800c128:	b007      	add	sp, #28
 800c12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12c:	aa05      	add	r2, sp, #20
 800c12e:	9902      	ldr	r1, [sp, #8]
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff fd79 	bl	800bc28 <uxr_init_base_object_request>
 800c136:	a905      	add	r1, sp, #20
 800c138:	4605      	mov	r5, r0
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 ff86 	bl	800d04c <uxr_serialize_WRITE_DATA_Payload_Data>
 800c140:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c144:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800c148:	1a52      	subs	r2, r2, r1
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7fe fb3a 	bl	800a7c4 <ucdr_init_buffer>
 800c150:	4620      	mov	r0, r4
 800c152:	463a      	mov	r2, r7
 800c154:	4631      	mov	r1, r6
 800c156:	f7fe fb0b 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800c15a:	4628      	mov	r0, r5
 800c15c:	b007      	add	sp, #28
 800c15e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c160 <uxr_prepare_output_stream_fragmented>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	b093      	sub	sp, #76	@ 0x4c
 800c166:	4605      	mov	r5, r0
 800c168:	9107      	str	r1, [sp, #28]
 800c16a:	3008      	adds	r0, #8
 800c16c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c170:	9303      	str	r3, [sp, #12]
 800c172:	9206      	str	r2, [sp, #24]
 800c174:	f7ff fe8a 	bl	800be8c <uxr_get_output_reliable_stream>
 800c178:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	f000 8094 	beq.w	800c2aa <uxr_prepare_output_stream_fragmented+0x14a>
 800c182:	4604      	mov	r4, r0
 800c184:	2800      	cmp	r0, #0
 800c186:	f000 8090 	beq.w	800c2aa <uxr_prepare_output_stream_fragmented+0x14a>
 800c18a:	f004 f815 	bl	80101b8 <get_available_free_slots>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f000 8086 	beq.w	800c2a0 <uxr_prepare_output_stream_fragmented+0x140>
 800c194:	8922      	ldrh	r2, [r4, #8]
 800c196:	89e7      	ldrh	r7, [r4, #14]
 800c198:	fbb7 f8f2 	udiv	r8, r7, r2
 800c19c:	e9d4 3100 	ldrd	r3, r1, [r4]
 800c1a0:	fb02 7818 	mls	r8, r2, r8, r7
 800c1a4:	fa1f f888 	uxth.w	r8, r8
 800c1a8:	fbb1 f2f2 	udiv	r2, r1, r2
 800c1ac:	fb02 f808 	mul.w	r8, r2, r8
 800c1b0:	f108 0804 	add.w	r8, r8, #4
 800c1b4:	4498      	add	r8, r3
 800c1b6:	7b23      	ldrb	r3, [r4, #12]
 800c1b8:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800c1bc:	9204      	str	r2, [sp, #16]
 800c1be:	4553      	cmp	r3, sl
 800c1c0:	f1a2 0b04 	sub.w	fp, r2, #4
 800c1c4:	d37d      	bcc.n	800c2c2 <uxr_prepare_output_stream_fragmented+0x162>
 800c1c6:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c1c8:	f8cd a000 	str.w	sl, [sp]
 800c1cc:	f1ab 0904 	sub.w	r9, fp, #4
 800c1d0:	eba9 0903 	sub.w	r9, r9, r3
 800c1d4:	3608      	adds	r6, #8
 800c1d6:	a80a      	add	r0, sp, #40	@ 0x28
 800c1d8:	2300      	movs	r3, #0
 800c1da:	465a      	mov	r2, fp
 800c1dc:	4641      	mov	r1, r8
 800c1de:	fa1f f989 	uxth.w	r9, r9
 800c1e2:	9605      	str	r6, [sp, #20]
 800c1e4:	f7fe fadc 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800c1e8:	455e      	cmp	r6, fp
 800c1ea:	bf34      	ite	cc
 800c1ec:	2302      	movcc	r3, #2
 800c1ee:	2300      	movcs	r3, #0
 800c1f0:	464a      	mov	r2, r9
 800c1f2:	210d      	movs	r1, #13
 800c1f4:	a80a      	add	r0, sp, #40	@ 0x28
 800c1f6:	f7ff fe81 	bl	800befc <uxr_buffer_submessage_header>
 800c1fa:	8920      	ldrh	r0, [r4, #8]
 800c1fc:	fbb7 f3f0 	udiv	r3, r7, r0
 800c200:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c204:	fb00 7313 	mls	r3, r0, r3, r7
 800c208:	b29b      	uxth	r3, r3
 800c20a:	fbb1 f1f0 	udiv	r1, r1, r0
 800c20e:	fb03 f301 	mul.w	r3, r3, r1
 800c212:	4638      	mov	r0, r7
 800c214:	f842 b003 	str.w	fp, [r2, r3]
 800c218:	2101      	movs	r1, #1
 800c21a:	f004 f8d9 	bl	80103d0 <uxr_seq_num_add>
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	9e03      	ldr	r6, [sp, #12]
 800c222:	f1a3 0208 	sub.w	r2, r3, #8
 800c226:	f10a 0104 	add.w	r1, sl, #4
 800c22a:	4607      	mov	r7, r0
 800c22c:	eba2 020a 	sub.w	r2, r2, sl
 800c230:	4441      	add	r1, r8
 800c232:	4630      	mov	r0, r6
 800c234:	f7fe fac6 	bl	800a7c4 <ucdr_init_buffer>
 800c238:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c23a:	81e7      	strh	r7, [r4, #14]
 800c23c:	1d1a      	adds	r2, r3, #4
 800c23e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c242:	bf28      	it	cs
 800c244:	2200      	movcs	r2, #0
 800c246:	b292      	uxth	r2, r2
 800c248:	2300      	movs	r3, #0
 800c24a:	2107      	movs	r1, #7
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7ff fe55 	bl	800befc <uxr_buffer_submessage_header>
 800c252:	9906      	ldr	r1, [sp, #24]
 800c254:	aa09      	add	r2, sp, #36	@ 0x24
 800c256:	4628      	mov	r0, r5
 800c258:	f7ff fce6 	bl	800bc28 <uxr_init_base_object_request>
 800c25c:	4604      	mov	r4, r0
 800c25e:	b328      	cbz	r0, 800c2ac <uxr_prepare_output_stream_fragmented+0x14c>
 800c260:	9e03      	ldr	r6, [sp, #12]
 800c262:	a909      	add	r1, sp, #36	@ 0x24
 800c264:	4630      	mov	r0, r6
 800c266:	f000 fef1 	bl	800d04c <uxr_serialize_WRITE_DATA_Payload_Data>
 800c26a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c26e:	4630      	mov	r0, r6
 800c270:	1a52      	subs	r2, r2, r1
 800c272:	f7fe faa7 	bl	800a7c4 <ucdr_init_buffer>
 800c276:	9a05      	ldr	r2, [sp, #20]
 800c278:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 800c27c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c27e:	9b07      	ldr	r3, [sp, #28]
 800c280:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 800c284:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800c286:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 800c28a:	4630      	mov	r0, r6
 800c28c:	4919      	ldr	r1, [pc, #100]	@ (800c2f4 <uxr_prepare_output_stream_fragmented+0x194>)
 800c28e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800c292:	462a      	mov	r2, r5
 800c294:	f7fe fa6c 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800c298:	4620      	mov	r0, r4
 800c29a:	b013      	add	sp, #76	@ 0x4c
 800c29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800c2a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	4798      	blx	r3
 800c2a8:	b920      	cbnz	r0, 800c2b4 <uxr_prepare_output_stream_fragmented+0x154>
 800c2aa:	2400      	movs	r4, #0
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	b013      	add	sp, #76	@ 0x4c
 800c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f003 ff7f 	bl	80101b8 <get_available_free_slots>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	f47f af6a 	bne.w	800c194 <uxr_prepare_output_stream_fragmented+0x34>
 800c2c0:	e7f3      	b.n	800c2aa <uxr_prepare_output_stream_fragmented+0x14a>
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	f004 f883 	bl	80103d0 <uxr_seq_num_add>
 800c2ca:	8922      	ldrh	r2, [r4, #8]
 800c2cc:	fbb0 f8f2 	udiv	r8, r0, r2
 800c2d0:	fb02 0818 	mls	r8, r2, r8, r0
 800c2d4:	fa1f f888 	uxth.w	r8, r8
 800c2d8:	6863      	ldr	r3, [r4, #4]
 800c2da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2de:	6822      	ldr	r2, [r4, #0]
 800c2e0:	fb08 f803 	mul.w	r8, r8, r3
 800c2e4:	f108 0804 	add.w	r8, r8, #4
 800c2e8:	4490      	add	r8, r2
 800c2ea:	7b23      	ldrb	r3, [r4, #12]
 800c2ec:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	e768      	b.n	800c1c6 <uxr_prepare_output_stream_fragmented+0x66>
 800c2f4:	0800bfed 	.word	0x0800bfed

0800c2f8 <uxr_serialize_message_header>:
 800c2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	4604      	mov	r4, r0
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	460d      	mov	r5, r1
 800c304:	9f08      	ldr	r7, [sp, #32]
 800c306:	f7fd fab3 	bl	8009870 <ucdr_serialize_uint8_t>
 800c30a:	4631      	mov	r1, r6
 800c30c:	4620      	mov	r0, r4
 800c30e:	f7fd faaf 	bl	8009870 <ucdr_serialize_uint8_t>
 800c312:	9a01      	ldr	r2, [sp, #4]
 800c314:	4620      	mov	r0, r4
 800c316:	2101      	movs	r1, #1
 800c318:	f7fd fb56 	bl	80099c8 <ucdr_serialize_endian_uint16_t>
 800c31c:	062b      	lsls	r3, r5, #24
 800c31e:	d501      	bpl.n	800c324 <uxr_serialize_message_header+0x2c>
 800c320:	b003      	add	sp, #12
 800c322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c324:	4639      	mov	r1, r7
 800c326:	4620      	mov	r0, r4
 800c328:	2204      	movs	r2, #4
 800c32a:	b003      	add	sp, #12
 800c32c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c330:	f003 b838 	b.w	800f3a4 <ucdr_serialize_array_uint8_t>

0800c334 <uxr_deserialize_message_header>:
 800c334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c336:	b083      	sub	sp, #12
 800c338:	4616      	mov	r6, r2
 800c33a:	4604      	mov	r4, r0
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	460d      	mov	r5, r1
 800c340:	9f08      	ldr	r7, [sp, #32]
 800c342:	f7fd faab 	bl	800989c <ucdr_deserialize_uint8_t>
 800c346:	4631      	mov	r1, r6
 800c348:	4620      	mov	r0, r4
 800c34a:	f7fd faa7 	bl	800989c <ucdr_deserialize_uint8_t>
 800c34e:	9a01      	ldr	r2, [sp, #4]
 800c350:	4620      	mov	r0, r4
 800c352:	2101      	movs	r1, #1
 800c354:	f7fd fc2c 	bl	8009bb0 <ucdr_deserialize_endian_uint16_t>
 800c358:	f995 3000 	ldrsb.w	r3, [r5]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	da01      	bge.n	800c364 <uxr_deserialize_message_header+0x30>
 800c360:	b003      	add	sp, #12
 800c362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c364:	4639      	mov	r1, r7
 800c366:	4620      	mov	r0, r4
 800c368:	2204      	movs	r2, #4
 800c36a:	b003      	add	sp, #12
 800c36c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c370:	f003 b87c 	b.w	800f46c <ucdr_deserialize_array_uint8_t>

0800c374 <uxr_serialize_submessage_header>:
 800c374:	b530      	push	{r4, r5, lr}
 800c376:	b083      	sub	sp, #12
 800c378:	4615      	mov	r5, r2
 800c37a:	4604      	mov	r4, r0
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	f7fd fa77 	bl	8009870 <ucdr_serialize_uint8_t>
 800c382:	4629      	mov	r1, r5
 800c384:	4620      	mov	r0, r4
 800c386:	f7fd fa73 	bl	8009870 <ucdr_serialize_uint8_t>
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	4620      	mov	r0, r4
 800c38e:	2101      	movs	r1, #1
 800c390:	b003      	add	sp, #12
 800c392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c396:	f7fd bb17 	b.w	80099c8 <ucdr_serialize_endian_uint16_t>
 800c39a:	bf00      	nop

0800c39c <uxr_deserialize_submessage_header>:
 800c39c:	b530      	push	{r4, r5, lr}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	4615      	mov	r5, r2
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	f7fd fa79 	bl	800989c <ucdr_deserialize_uint8_t>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f7fd fa75 	bl	800989c <ucdr_deserialize_uint8_t>
 800c3b2:	9a01      	ldr	r2, [sp, #4]
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	b003      	add	sp, #12
 800c3ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3be:	f7fd bbf7 	b.w	8009bb0 <ucdr_deserialize_endian_uint16_t>
 800c3c2:	bf00      	nop

0800c3c4 <uxr_serialize_CLIENT_Representation>:
 800c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	2204      	movs	r2, #4
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	f002 ffe9 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c3d2:	1d21      	adds	r1, r4, #4
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f002 ffe3 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c3de:	1da1      	adds	r1, r4, #6
 800c3e0:	4007      	ands	r7, r0
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f002 ffdd 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c3ea:	fa5f f887 	uxtb.w	r8, r7
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	f104 0108 	add.w	r1, r4, #8
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f002 ffd4 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c3fc:	ea08 0707 	and.w	r7, r8, r7
 800c400:	7b21      	ldrb	r1, [r4, #12]
 800c402:	4680      	mov	r8, r0
 800c404:	4628      	mov	r0, r5
 800c406:	f7fd fa33 	bl	8009870 <ucdr_serialize_uint8_t>
 800c40a:	ea08 0807 	and.w	r8, r8, r7
 800c40e:	7b61      	ldrb	r1, [r4, #13]
 800c410:	4607      	mov	r7, r0
 800c412:	4628      	mov	r0, r5
 800c414:	f7fd f9fc 	bl	8009810 <ucdr_serialize_bool>
 800c418:	7b63      	ldrb	r3, [r4, #13]
 800c41a:	ea08 0707 	and.w	r7, r8, r7
 800c41e:	ea07 0600 	and.w	r6, r7, r0
 800c422:	b933      	cbnz	r3, 800c432 <uxr_serialize_CLIENT_Representation+0x6e>
 800c424:	8ba1      	ldrh	r1, [r4, #28]
 800c426:	4628      	mov	r0, r5
 800c428:	f7fd fa4e 	bl	80098c8 <ucdr_serialize_uint16_t>
 800c42c:	4030      	ands	r0, r6
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c432:	6921      	ldr	r1, [r4, #16]
 800c434:	4628      	mov	r0, r5
 800c436:	f7fd fc31 	bl	8009c9c <ucdr_serialize_uint32_t>
 800c43a:	6923      	ldr	r3, [r4, #16]
 800c43c:	b1cb      	cbz	r3, 800c472 <uxr_serialize_CLIENT_Representation+0xae>
 800c43e:	b1d0      	cbz	r0, 800c476 <uxr_serialize_CLIENT_Representation+0xb2>
 800c440:	46a0      	mov	r8, r4
 800c442:	f04f 0900 	mov.w	r9, #0
 800c446:	e002      	b.n	800c44e <uxr_serialize_CLIENT_Representation+0x8a>
 800c448:	f108 0808 	add.w	r8, r8, #8
 800c44c:	b198      	cbz	r0, 800c476 <uxr_serialize_CLIENT_Representation+0xb2>
 800c44e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c452:	4628      	mov	r0, r5
 800c454:	f003 f8c6 	bl	800f5e4 <ucdr_serialize_string>
 800c458:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c45c:	4607      	mov	r7, r0
 800c45e:	4628      	mov	r0, r5
 800c460:	f003 f8c0 	bl	800f5e4 <ucdr_serialize_string>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	f109 0901 	add.w	r9, r9, #1
 800c46a:	4038      	ands	r0, r7
 800c46c:	4599      	cmp	r9, r3
 800c46e:	b2c0      	uxtb	r0, r0
 800c470:	d3ea      	bcc.n	800c448 <uxr_serialize_CLIENT_Representation+0x84>
 800c472:	4006      	ands	r6, r0
 800c474:	e7d6      	b.n	800c424 <uxr_serialize_CLIENT_Representation+0x60>
 800c476:	2600      	movs	r6, #0
 800c478:	e7d4      	b.n	800c424 <uxr_serialize_CLIENT_Representation+0x60>
 800c47a:	bf00      	nop

0800c47c <uxr_deserialize_CLIENT_Representation>:
 800c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c480:	2204      	movs	r2, #4
 800c482:	460c      	mov	r4, r1
 800c484:	4605      	mov	r5, r0
 800c486:	f002 fff1 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800c48a:	1d21      	adds	r1, r4, #4
 800c48c:	4607      	mov	r7, r0
 800c48e:	2202      	movs	r2, #2
 800c490:	4628      	mov	r0, r5
 800c492:	f002 ffeb 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800c496:	1da1      	adds	r1, r4, #6
 800c498:	4007      	ands	r7, r0
 800c49a:	2202      	movs	r2, #2
 800c49c:	4628      	mov	r0, r5
 800c49e:	f002 ffe5 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800c4a2:	fa5f f887 	uxtb.w	r8, r7
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	f104 0108 	add.w	r1, r4, #8
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f002 ffdc 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800c4b4:	ea08 0707 	and.w	r7, r8, r7
 800c4b8:	f104 010c 	add.w	r1, r4, #12
 800c4bc:	4680      	mov	r8, r0
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f7fd f9ec 	bl	800989c <ucdr_deserialize_uint8_t>
 800c4c4:	ea08 0807 	and.w	r8, r8, r7
 800c4c8:	f104 010d 	add.w	r1, r4, #13
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7fd f9b4 	bl	800983c <ucdr_deserialize_bool>
 800c4d4:	7b63      	ldrb	r3, [r4, #13]
 800c4d6:	ea08 0707 	and.w	r7, r8, r7
 800c4da:	ea07 0600 	and.w	r6, r7, r0
 800c4de:	b93b      	cbnz	r3, 800c4f0 <uxr_deserialize_CLIENT_Representation+0x74>
 800c4e0:	f104 011c 	add.w	r1, r4, #28
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f7fd faef 	bl	8009ac8 <ucdr_deserialize_uint16_t>
 800c4ea:	4030      	ands	r0, r6
 800c4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f0:	f104 0110 	add.w	r1, r4, #16
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f7fd fd01 	bl	8009efc <ucdr_deserialize_uint32_t>
 800c4fa:	6923      	ldr	r3, [r4, #16]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d903      	bls.n	800c508 <uxr_deserialize_CLIENT_Representation+0x8c>
 800c500:	2301      	movs	r3, #1
 800c502:	75ab      	strb	r3, [r5, #22]
 800c504:	2600      	movs	r6, #0
 800c506:	e7eb      	b.n	800c4e0 <uxr_deserialize_CLIENT_Representation+0x64>
 800c508:	b1fb      	cbz	r3, 800c54a <uxr_deserialize_CLIENT_Representation+0xce>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d0fa      	beq.n	800c504 <uxr_deserialize_CLIENT_Representation+0x88>
 800c50e:	46a0      	mov	r8, r4
 800c510:	f04f 0900 	mov.w	r9, #0
 800c514:	e003      	b.n	800c51e <uxr_deserialize_CLIENT_Representation+0xa2>
 800c516:	f108 0808 	add.w	r8, r8, #8
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d0f2      	beq.n	800c504 <uxr_deserialize_CLIENT_Representation+0x88>
 800c51e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c526:	4628      	mov	r0, r5
 800c528:	f003 f86c 	bl	800f604 <ucdr_deserialize_string>
 800c52c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c530:	4607      	mov	r7, r0
 800c532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c536:	4628      	mov	r0, r5
 800c538:	f003 f864 	bl	800f604 <ucdr_deserialize_string>
 800c53c:	6923      	ldr	r3, [r4, #16]
 800c53e:	f109 0901 	add.w	r9, r9, #1
 800c542:	4038      	ands	r0, r7
 800c544:	4599      	cmp	r9, r3
 800c546:	b2c0      	uxtb	r0, r0
 800c548:	d3e5      	bcc.n	800c516 <uxr_deserialize_CLIENT_Representation+0x9a>
 800c54a:	4006      	ands	r6, r0
 800c54c:	e7c8      	b.n	800c4e0 <uxr_deserialize_CLIENT_Representation+0x64>
 800c54e:	bf00      	nop

0800c550 <uxr_serialize_AGENT_Representation>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	2204      	movs	r2, #4
 800c556:	460c      	mov	r4, r1
 800c558:	4605      	mov	r5, r0
 800c55a:	f002 ff23 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c55e:	1d21      	adds	r1, r4, #4
 800c560:	4606      	mov	r6, r0
 800c562:	2202      	movs	r2, #2
 800c564:	4628      	mov	r0, r5
 800c566:	f002 ff1d 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c56a:	1da1      	adds	r1, r4, #6
 800c56c:	4006      	ands	r6, r0
 800c56e:	2202      	movs	r2, #2
 800c570:	4628      	mov	r0, r5
 800c572:	f002 ff17 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c576:	b2f6      	uxtb	r6, r6
 800c578:	4603      	mov	r3, r0
 800c57a:	7a21      	ldrb	r1, [r4, #8]
 800c57c:	4628      	mov	r0, r5
 800c57e:	401e      	ands	r6, r3
 800c580:	f7fd f946 	bl	8009810 <ucdr_serialize_bool>
 800c584:	7a23      	ldrb	r3, [r4, #8]
 800c586:	ea00 0706 	and.w	r7, r0, r6
 800c58a:	b913      	cbnz	r3, 800c592 <uxr_serialize_AGENT_Representation+0x42>
 800c58c:	4638      	mov	r0, r7
 800c58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c592:	68e1      	ldr	r1, [r4, #12]
 800c594:	4628      	mov	r0, r5
 800c596:	f7fd fb81 	bl	8009c9c <ucdr_serialize_uint32_t>
 800c59a:	68e3      	ldr	r3, [r4, #12]
 800c59c:	b313      	cbz	r3, 800c5e4 <uxr_serialize_AGENT_Representation+0x94>
 800c59e:	b1e8      	cbz	r0, 800c5dc <uxr_serialize_AGENT_Representation+0x8c>
 800c5a0:	46a0      	mov	r8, r4
 800c5a2:	f04f 0900 	mov.w	r9, #0
 800c5a6:	e002      	b.n	800c5ae <uxr_serialize_AGENT_Representation+0x5e>
 800c5a8:	f108 0808 	add.w	r8, r8, #8
 800c5ac:	b1b3      	cbz	r3, 800c5dc <uxr_serialize_AGENT_Representation+0x8c>
 800c5ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f003 f816 	bl	800f5e4 <ucdr_serialize_string>
 800c5b8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c5bc:	4606      	mov	r6, r0
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f003 f810 	bl	800f5e4 <ucdr_serialize_string>
 800c5c4:	68e2      	ldr	r2, [r4, #12]
 800c5c6:	f109 0901 	add.w	r9, r9, #1
 800c5ca:	ea06 0300 	and.w	r3, r6, r0
 800c5ce:	4591      	cmp	r9, r2
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	d3e9      	bcc.n	800c5a8 <uxr_serialize_AGENT_Representation+0x58>
 800c5d4:	401f      	ands	r7, r3
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5dc:	2700      	movs	r7, #0
 800c5de:	4638      	mov	r0, r7
 800c5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e4:	4007      	ands	r7, r0
 800c5e6:	e7d1      	b.n	800c58c <uxr_serialize_AGENT_Representation+0x3c>

0800c5e8 <uxr_serialize_ObjectVariant.part.0>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	780b      	ldrb	r3, [r1, #0]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	2b0d      	cmp	r3, #13
 800c5f4:	d869      	bhi.n	800c6ca <uxr_serialize_ObjectVariant.part.0+0xe2>
 800c5f6:	e8df f003 	tbb	[pc, r3]
 800c5fa:	074a      	.short	0x074a
 800c5fc:	07073030 	.word	0x07073030
 800c600:	21680707 	.word	0x21680707
 800c604:	45632121 	.word	0x45632121
 800c608:	7909      	ldrb	r1, [r1, #4]
 800c60a:	f7fd f931 	bl	8009870 <ucdr_serialize_uint8_t>
 800c60e:	4606      	mov	r6, r0
 800c610:	b158      	cbz	r0, 800c62a <uxr_serialize_ObjectVariant.part.0+0x42>
 800c612:	7923      	ldrb	r3, [r4, #4]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d003      	beq.n	800c620 <uxr_serialize_ObjectVariant.part.0+0x38>
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d029      	beq.n	800c670 <uxr_serialize_ObjectVariant.part.0+0x88>
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d104      	bne.n	800c62a <uxr_serialize_ObjectVariant.part.0+0x42>
 800c620:	68a1      	ldr	r1, [r4, #8]
 800c622:	4628      	mov	r0, r5
 800c624:	f002 ffde 	bl	800f5e4 <ucdr_serialize_string>
 800c628:	4606      	mov	r6, r0
 800c62a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800c62e:	4628      	mov	r0, r5
 800c630:	2202      	movs	r2, #2
 800c632:	f002 feb7 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c636:	4030      	ands	r0, r6
 800c638:	b2c0      	uxtb	r0, r0
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	7909      	ldrb	r1, [r1, #4]
 800c63e:	f7fd f917 	bl	8009870 <ucdr_serialize_uint8_t>
 800c642:	b1e8      	cbz	r0, 800c680 <uxr_serialize_ObjectVariant.part.0+0x98>
 800c644:	7923      	ldrb	r3, [r4, #4]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d001      	beq.n	800c64e <uxr_serialize_ObjectVariant.part.0+0x66>
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d13d      	bne.n	800c6ca <uxr_serialize_ObjectVariant.part.0+0xe2>
 800c64e:	68a1      	ldr	r1, [r4, #8]
 800c650:	4628      	mov	r0, r5
 800c652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c656:	f002 bfc5 	b.w	800f5e4 <ucdr_serialize_string>
 800c65a:	7909      	ldrb	r1, [r1, #4]
 800c65c:	f7fd f908 	bl	8009870 <ucdr_serialize_uint8_t>
 800c660:	4606      	mov	r6, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	d0e1      	beq.n	800c62a <uxr_serialize_ObjectVariant.part.0+0x42>
 800c666:	7923      	ldrb	r3, [r4, #4]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d0d9      	beq.n	800c620 <uxr_serialize_ObjectVariant.part.0+0x38>
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d1dc      	bne.n	800c62a <uxr_serialize_ObjectVariant.part.0+0x42>
 800c670:	68a2      	ldr	r2, [r4, #8]
 800c672:	f104 010c 	add.w	r1, r4, #12
 800c676:	4628      	mov	r0, r5
 800c678:	f002 ff88 	bl	800f58c <ucdr_serialize_sequence_uint8_t>
 800c67c:	4606      	mov	r6, r0
 800c67e:	e7d4      	b.n	800c62a <uxr_serialize_ObjectVariant.part.0+0x42>
 800c680:	2000      	movs	r0, #0
 800c682:	bd70      	pop	{r4, r5, r6, pc}
 800c684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c688:	3104      	adds	r1, #4
 800c68a:	f7ff be9b 	b.w	800c3c4 <uxr_serialize_CLIENT_Representation>
 800c68e:	7909      	ldrb	r1, [r1, #4]
 800c690:	f7fd f8ee 	bl	8009870 <ucdr_serialize_uint8_t>
 800c694:	4606      	mov	r6, r0
 800c696:	b158      	cbz	r0, 800c6b0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c698:	7923      	ldrb	r3, [r4, #4]
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d003      	beq.n	800c6a6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d015      	beq.n	800c6ce <uxr_serialize_ObjectVariant.part.0+0xe6>
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d104      	bne.n	800c6b0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c6a6:	68a1      	ldr	r1, [r4, #8]
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f002 ff9b 	bl	800f5e4 <ucdr_serialize_string>
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f7fd fe17 	bl	800a2e8 <ucdr_serialize_int16_t>
 800c6ba:	4030      	ands	r0, r6
 800c6bc:	b2c0      	uxtb	r0, r0
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6c4:	3104      	adds	r1, #4
 800c6c6:	f7ff bf43 	b.w	800c550 <uxr_serialize_AGENT_Representation>
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	68a2      	ldr	r2, [r4, #8]
 800c6d0:	f104 010c 	add.w	r1, r4, #12
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f002 ff59 	bl	800f58c <ucdr_serialize_sequence_uint8_t>
 800c6da:	4606      	mov	r6, r0
 800c6dc:	e7e8      	b.n	800c6b0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c6de:	bf00      	nop

0800c6e0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c6e0:	b570      	push	{r4, r5, r6, lr}
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	7809      	ldrb	r1, [r1, #0]
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	f7fd f892 	bl	8009810 <ucdr_serialize_bool>
 800c6ec:	782b      	ldrb	r3, [r5, #0]
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	b94b      	cbnz	r3, 800c706 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c6f2:	7a29      	ldrb	r1, [r5, #8]
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7fd f88b 	bl	8009810 <ucdr_serialize_bool>
 800c6fa:	7a2b      	ldrb	r3, [r5, #8]
 800c6fc:	4004      	ands	r4, r0
 800c6fe:	b2e4      	uxtb	r4, r4
 800c700:	b943      	cbnz	r3, 800c714 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c702:	4620      	mov	r0, r4
 800c704:	bd70      	pop	{r4, r5, r6, pc}
 800c706:	6869      	ldr	r1, [r5, #4]
 800c708:	4630      	mov	r0, r6
 800c70a:	f002 ff6b 	bl	800f5e4 <ucdr_serialize_string>
 800c70e:	4004      	ands	r4, r0
 800c710:	b2e4      	uxtb	r4, r4
 800c712:	e7ee      	b.n	800c6f2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c714:	68e9      	ldr	r1, [r5, #12]
 800c716:	4630      	mov	r0, r6
 800c718:	f002 ff64 	bl	800f5e4 <ucdr_serialize_string>
 800c71c:	4004      	ands	r4, r0
 800c71e:	4620      	mov	r0, r4
 800c720:	bd70      	pop	{r4, r5, r6, pc}
 800c722:	bf00      	nop

0800c724 <uxr_serialize_OBJK_Topic_Binary>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	460d      	mov	r5, r1
 800c728:	6809      	ldr	r1, [r1, #0]
 800c72a:	4606      	mov	r6, r0
 800c72c:	f002 ff5a 	bl	800f5e4 <ucdr_serialize_string>
 800c730:	7929      	ldrb	r1, [r5, #4]
 800c732:	4604      	mov	r4, r0
 800c734:	4630      	mov	r0, r6
 800c736:	f7fd f86b 	bl	8009810 <ucdr_serialize_bool>
 800c73a:	792b      	ldrb	r3, [r5, #4]
 800c73c:	4004      	ands	r4, r0
 800c73e:	b2e4      	uxtb	r4, r4
 800c740:	b943      	cbnz	r3, 800c754 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c742:	7b29      	ldrb	r1, [r5, #12]
 800c744:	4630      	mov	r0, r6
 800c746:	f7fd f863 	bl	8009810 <ucdr_serialize_bool>
 800c74a:	7b2b      	ldrb	r3, [r5, #12]
 800c74c:	4004      	ands	r4, r0
 800c74e:	b93b      	cbnz	r3, 800c760 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c750:	4620      	mov	r0, r4
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	68a9      	ldr	r1, [r5, #8]
 800c756:	4630      	mov	r0, r6
 800c758:	f002 ff44 	bl	800f5e4 <ucdr_serialize_string>
 800c75c:	4004      	ands	r4, r0
 800c75e:	e7f0      	b.n	800c742 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c760:	6929      	ldr	r1, [r5, #16]
 800c762:	4630      	mov	r0, r6
 800c764:	f002 ff3e 	bl	800f5e4 <ucdr_serialize_string>
 800c768:	4004      	ands	r4, r0
 800c76a:	b2e4      	uxtb	r4, r4
 800c76c:	4620      	mov	r0, r4
 800c76e:	bd70      	pop	{r4, r5, r6, pc}

0800c770 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c774:	460c      	mov	r4, r1
 800c776:	7809      	ldrb	r1, [r1, #0]
 800c778:	4606      	mov	r6, r0
 800c77a:	f7fd f849 	bl	8009810 <ucdr_serialize_bool>
 800c77e:	7823      	ldrb	r3, [r4, #0]
 800c780:	4605      	mov	r5, r0
 800c782:	b96b      	cbnz	r3, 800c7a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c784:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800c788:	4630      	mov	r0, r6
 800c78a:	f7fd f841 	bl	8009810 <ucdr_serialize_bool>
 800c78e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c792:	4005      	ands	r5, r0
 800c794:	b2ed      	uxtb	r5, r5
 800c796:	2b00      	cmp	r3, #0
 800c798:	d169      	bne.n	800c86e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c79a:	4628      	mov	r0, r5
 800c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a0:	6861      	ldr	r1, [r4, #4]
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7fd fa7a 	bl	8009c9c <ucdr_serialize_uint32_t>
 800c7a8:	6863      	ldr	r3, [r4, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d06b      	beq.n	800c886 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d067      	beq.n	800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7b2:	68a1      	ldr	r1, [r4, #8]
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f002 ff15 	bl	800f5e4 <ucdr_serialize_string>
 800c7ba:	6863      	ldr	r3, [r4, #4]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d953      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d05e      	beq.n	800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7c4:	68e1      	ldr	r1, [r4, #12]
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f002 ff0c 	bl	800f5e4 <ucdr_serialize_string>
 800c7cc:	6863      	ldr	r3, [r4, #4]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d94a      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d055      	beq.n	800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7d6:	6921      	ldr	r1, [r4, #16]
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f002 ff03 	bl	800f5e4 <ucdr_serialize_string>
 800c7de:	6863      	ldr	r3, [r4, #4]
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d941      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d04c      	beq.n	800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7e8:	6961      	ldr	r1, [r4, #20]
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f002 fefa 	bl	800f5e4 <ucdr_serialize_string>
 800c7f0:	6863      	ldr	r3, [r4, #4]
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d938      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d043      	beq.n	800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c7fa:	69a1      	ldr	r1, [r4, #24]
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f002 fef1 	bl	800f5e4 <ucdr_serialize_string>
 800c802:	6863      	ldr	r3, [r4, #4]
 800c804:	2b05      	cmp	r3, #5
 800c806:	d92f      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d03a      	beq.n	800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c80c:	69e1      	ldr	r1, [r4, #28]
 800c80e:	4630      	mov	r0, r6
 800c810:	f002 fee8 	bl	800f5e4 <ucdr_serialize_string>
 800c814:	6863      	ldr	r3, [r4, #4]
 800c816:	2b06      	cmp	r3, #6
 800c818:	d926      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c81a:	b390      	cbz	r0, 800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c81c:	6a21      	ldr	r1, [r4, #32]
 800c81e:	4630      	mov	r0, r6
 800c820:	f002 fee0 	bl	800f5e4 <ucdr_serialize_string>
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	2b07      	cmp	r3, #7
 800c828:	d91e      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c82a:	b350      	cbz	r0, 800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c82c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c82e:	4630      	mov	r0, r6
 800c830:	f002 fed8 	bl	800f5e4 <ucdr_serialize_string>
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	2b08      	cmp	r3, #8
 800c838:	d916      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c83a:	b310      	cbz	r0, 800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c83c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c83e:	4630      	mov	r0, r6
 800c840:	f002 fed0 	bl	800f5e4 <ucdr_serialize_string>
 800c844:	6863      	ldr	r3, [r4, #4]
 800c846:	2b09      	cmp	r3, #9
 800c848:	d90e      	bls.n	800c868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c84a:	b1d0      	cbz	r0, 800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c84c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800c850:	2709      	movs	r7, #9
 800c852:	e000      	b.n	800c856 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c854:	b1a8      	cbz	r0, 800c882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c856:	f858 1b04 	ldr.w	r1, [r8], #4
 800c85a:	4630      	mov	r0, r6
 800c85c:	f002 fec2 	bl	800f5e4 <ucdr_serialize_string>
 800c860:	6862      	ldr	r2, [r4, #4]
 800c862:	3701      	adds	r7, #1
 800c864:	4297      	cmp	r7, r2
 800c866:	d3f5      	bcc.n	800c854 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c868:	4005      	ands	r5, r0
 800c86a:	b2ed      	uxtb	r5, r5
 800c86c:	e78a      	b.n	800c784 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c86e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c870:	4630      	mov	r0, r6
 800c872:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c876:	f002 fe89 	bl	800f58c <ucdr_serialize_sequence_uint8_t>
 800c87a:	4005      	ands	r5, r0
 800c87c:	4628      	mov	r0, r5
 800c87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c882:	2500      	movs	r5, #0
 800c884:	e77e      	b.n	800c784 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c886:	4028      	ands	r0, r5
 800c888:	b2c5      	uxtb	r5, r0
 800c88a:	e77b      	b.n	800c784 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c88c <uxr_serialize_OBJK_Publisher_Binary>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	460d      	mov	r5, r1
 800c890:	7809      	ldrb	r1, [r1, #0]
 800c892:	4606      	mov	r6, r0
 800c894:	f7fc ffbc 	bl	8009810 <ucdr_serialize_bool>
 800c898:	782b      	ldrb	r3, [r5, #0]
 800c89a:	4604      	mov	r4, r0
 800c89c:	b94b      	cbnz	r3, 800c8b2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c89e:	7a29      	ldrb	r1, [r5, #8]
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7fc ffb5 	bl	8009810 <ucdr_serialize_bool>
 800c8a6:	7a2b      	ldrb	r3, [r5, #8]
 800c8a8:	4004      	ands	r4, r0
 800c8aa:	b2e4      	uxtb	r4, r4
 800c8ac:	b943      	cbnz	r3, 800c8c0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
 800c8b2:	6869      	ldr	r1, [r5, #4]
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f002 fe95 	bl	800f5e4 <ucdr_serialize_string>
 800c8ba:	4004      	ands	r4, r0
 800c8bc:	b2e4      	uxtb	r4, r4
 800c8be:	e7ee      	b.n	800c89e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800c8c0:	f105 010c 	add.w	r1, r5, #12
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff ff53 	bl	800c770 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800c8ca:	4004      	ands	r4, r0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}

0800c8d0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800c8d0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800c8d4:	4688      	mov	r8, r1
 800c8d6:	8809      	ldrh	r1, [r1, #0]
 800c8d8:	4681      	mov	r9, r0
 800c8da:	f7fc fff5 	bl	80098c8 <ucdr_serialize_uint16_t>
 800c8de:	f898 1002 	ldrb.w	r1, [r8, #2]
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	4648      	mov	r0, r9
 800c8e6:	f7fc ff93 	bl	8009810 <ucdr_serialize_bool>
 800c8ea:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c8ee:	4030      	ands	r0, r6
 800c8f0:	b2c5      	uxtb	r5, r0
 800c8f2:	b9eb      	cbnz	r3, 800c930 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800c8f4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800c8f8:	4648      	mov	r0, r9
 800c8fa:	f7fc ff89 	bl	8009810 <ucdr_serialize_bool>
 800c8fe:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c902:	4005      	ands	r5, r0
 800c904:	bb7b      	cbnz	r3, 800c966 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800c906:	f898 100c 	ldrb.w	r1, [r8, #12]
 800c90a:	4648      	mov	r0, r9
 800c90c:	f7fc ff80 	bl	8009810 <ucdr_serialize_bool>
 800c910:	f898 300c 	ldrb.w	r3, [r8, #12]
 800c914:	4005      	ands	r5, r0
 800c916:	b9f3      	cbnz	r3, 800c956 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800c918:	f898 1014 	ldrb.w	r1, [r8, #20]
 800c91c:	4648      	mov	r0, r9
 800c91e:	f7fc ff77 	bl	8009810 <ucdr_serialize_bool>
 800c922:	f898 3014 	ldrb.w	r3, [r8, #20]
 800c926:	4005      	ands	r5, r0
 800c928:	b94b      	cbnz	r3, 800c93e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800c92a:	4628      	mov	r0, r5
 800c92c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c930:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800c934:	4648      	mov	r0, r9
 800c936:	f7fc ffc7 	bl	80098c8 <ucdr_serialize_uint16_t>
 800c93a:	4005      	ands	r5, r0
 800c93c:	e7da      	b.n	800c8f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800c93e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c942:	4648      	mov	r0, r9
 800c944:	f108 011c 	add.w	r1, r8, #28
 800c948:	f002 fe20 	bl	800f58c <ucdr_serialize_sequence_uint8_t>
 800c94c:	4028      	ands	r0, r5
 800c94e:	b2c5      	uxtb	r5, r0
 800c950:	4628      	mov	r0, r5
 800c952:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800c956:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c95a:	4648      	mov	r0, r9
 800c95c:	f7fd f99e 	bl	8009c9c <ucdr_serialize_uint32_t>
 800c960:	4028      	ands	r0, r5
 800c962:	b2c5      	uxtb	r5, r0
 800c964:	e7d8      	b.n	800c918 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800c966:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c96a:	4648      	mov	r0, r9
 800c96c:	f7fd f996 	bl	8009c9c <ucdr_serialize_uint32_t>
 800c970:	4028      	ands	r0, r5
 800c972:	b2c5      	uxtb	r5, r0
 800c974:	e7c7      	b.n	800c906 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800c976:	bf00      	nop

0800c978 <uxr_serialize_OBJK_DataWriter_Binary>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	2202      	movs	r2, #2
 800c97c:	460d      	mov	r5, r1
 800c97e:	4606      	mov	r6, r0
 800c980:	f002 fd10 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800c984:	78a9      	ldrb	r1, [r5, #2]
 800c986:	4604      	mov	r4, r0
 800c988:	4630      	mov	r0, r6
 800c98a:	f7fc ff41 	bl	8009810 <ucdr_serialize_bool>
 800c98e:	78ab      	ldrb	r3, [r5, #2]
 800c990:	4004      	ands	r4, r0
 800c992:	b2e4      	uxtb	r4, r4
 800c994:	b90b      	cbnz	r3, 800c99a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800c996:	4620      	mov	r0, r4
 800c998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99a:	f105 0108 	add.w	r1, r5, #8
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7ff ff96 	bl	800c8d0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800c9a4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f7fc ff30 	bl	8009810 <ucdr_serialize_bool>
 800c9b0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800c9b4:	4007      	ands	r7, r0
 800c9b6:	b2ff      	uxtb	r7, r7
 800c9b8:	b913      	cbnz	r3, 800c9c0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800c9ba:	403c      	ands	r4, r7
 800c9bc:	4620      	mov	r0, r4
 800c9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9c0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7fd fbbf 	bl	800a148 <ucdr_serialize_uint64_t>
 800c9ca:	4007      	ands	r7, r0
 800c9cc:	e7f5      	b.n	800c9ba <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800c9ce:	bf00      	nop

0800c9d0 <uxr_deserialize_ObjectVariant>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	460e      	mov	r6, r1
 800c9d6:	f7fc ff61 	bl	800989c <ucdr_deserialize_uint8_t>
 800c9da:	b320      	cbz	r0, 800ca26 <uxr_deserialize_ObjectVariant+0x56>
 800c9dc:	7833      	ldrb	r3, [r6, #0]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	2b0d      	cmp	r3, #13
 800c9e4:	d81d      	bhi.n	800ca22 <uxr_deserialize_ObjectVariant+0x52>
 800c9e6:	e8df f003 	tbb	[pc, r3]
 800c9ea:	2107      	.short	0x2107
 800c9ec:	21214b4b 	.word	0x21214b4b
 800c9f0:	381c2121 	.word	0x381c2121
 800c9f4:	876a3838 	.word	0x876a3838
 800c9f8:	1d31      	adds	r1, r6, #4
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f7fc ff4e 	bl	800989c <ucdr_deserialize_uint8_t>
 800ca00:	4607      	mov	r7, r0
 800ca02:	b138      	cbz	r0, 800ca14 <uxr_deserialize_ObjectVariant+0x44>
 800ca04:	7933      	ldrb	r3, [r6, #4]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d07c      	beq.n	800cb04 <uxr_deserialize_ObjectVariant+0x134>
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	f000 8082 	beq.w	800cb14 <uxr_deserialize_ObjectVariant+0x144>
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d077      	beq.n	800cb04 <uxr_deserialize_ObjectVariant+0x134>
 800ca14:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f7fd fce5 	bl	800a3e8 <ucdr_deserialize_int16_t>
 800ca1e:	4038      	ands	r0, r7
 800ca20:	b2c4      	uxtb	r4, r0
 800ca22:	4620      	mov	r0, r4
 800ca24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca26:	2400      	movs	r4, #0
 800ca28:	4620      	mov	r0, r4
 800ca2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca2c:	1d31      	adds	r1, r6, #4
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f7fc ff34 	bl	800989c <ucdr_deserialize_uint8_t>
 800ca34:	4607      	mov	r7, r0
 800ca36:	b130      	cbz	r0, 800ca46 <uxr_deserialize_ObjectVariant+0x76>
 800ca38:	7933      	ldrb	r3, [r6, #4]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d037      	beq.n	800caae <uxr_deserialize_ObjectVariant+0xde>
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	d02a      	beq.n	800ca98 <uxr_deserialize_ObjectVariant+0xc8>
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d033      	beq.n	800caae <uxr_deserialize_ObjectVariant+0xde>
 800ca46:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	f002 fd0d 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800ca52:	4038      	ands	r0, r7
 800ca54:	b2c4      	uxtb	r4, r0
 800ca56:	4620      	mov	r0, r4
 800ca58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca5a:	1d31      	adds	r1, r6, #4
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7fc ff1d 	bl	800989c <ucdr_deserialize_uint8_t>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d0df      	beq.n	800ca26 <uxr_deserialize_ObjectVariant+0x56>
 800ca66:	7933      	ldrb	r3, [r6, #4]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d001      	beq.n	800ca70 <uxr_deserialize_ObjectVariant+0xa0>
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d1d8      	bne.n	800ca22 <uxr_deserialize_ObjectVariant+0x52>
 800ca70:	68b1      	ldr	r1, [r6, #8]
 800ca72:	4628      	mov	r0, r5
 800ca74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca7c:	f002 bdc2 	b.w	800f604 <ucdr_deserialize_string>
 800ca80:	1d31      	adds	r1, r6, #4
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7fc ff0a 	bl	800989c <ucdr_deserialize_uint8_t>
 800ca88:	4607      	mov	r7, r0
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d0db      	beq.n	800ca46 <uxr_deserialize_ObjectVariant+0x76>
 800ca8e:	7933      	ldrb	r3, [r6, #4]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d00c      	beq.n	800caae <uxr_deserialize_ObjectVariant+0xde>
 800ca94:	2b03      	cmp	r3, #3
 800ca96:	d1d6      	bne.n	800ca46 <uxr_deserialize_ObjectVariant+0x76>
 800ca98:	f106 0308 	add.w	r3, r6, #8
 800ca9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800caa0:	f106 010c 	add.w	r1, r6, #12
 800caa4:	4628      	mov	r0, r5
 800caa6:	f002 fd83 	bl	800f5b0 <ucdr_deserialize_sequence_uint8_t>
 800caaa:	4607      	mov	r7, r0
 800caac:	e7cb      	b.n	800ca46 <uxr_deserialize_ObjectVariant+0x76>
 800caae:	68b1      	ldr	r1, [r6, #8]
 800cab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cab4:	4628      	mov	r0, r5
 800cab6:	f002 fda5 	bl	800f604 <ucdr_deserialize_string>
 800caba:	4607      	mov	r7, r0
 800cabc:	e7c3      	b.n	800ca46 <uxr_deserialize_ObjectVariant+0x76>
 800cabe:	2204      	movs	r2, #4
 800cac0:	18b1      	adds	r1, r6, r2
 800cac2:	4628      	mov	r0, r5
 800cac4:	f002 fcd2 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cac8:	2202      	movs	r2, #2
 800caca:	4604      	mov	r4, r0
 800cacc:	f106 0108 	add.w	r1, r6, #8
 800cad0:	4628      	mov	r0, r5
 800cad2:	f002 fccb 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cad6:	2202      	movs	r2, #2
 800cad8:	4004      	ands	r4, r0
 800cada:	f106 010a 	add.w	r1, r6, #10
 800cade:	4628      	mov	r0, r5
 800cae0:	f002 fcc4 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cae4:	b2e4      	uxtb	r4, r4
 800cae6:	4603      	mov	r3, r0
 800cae8:	f106 010c 	add.w	r1, r6, #12
 800caec:	4628      	mov	r0, r5
 800caee:	401c      	ands	r4, r3
 800caf0:	f7fc fea4 	bl	800983c <ucdr_deserialize_bool>
 800caf4:	4004      	ands	r4, r0
 800caf6:	e794      	b.n	800ca22 <uxr_deserialize_ObjectVariant+0x52>
 800caf8:	1d31      	adds	r1, r6, #4
 800cafa:	4628      	mov	r0, r5
 800cafc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cb00:	f7ff bcbc 	b.w	800c47c <uxr_deserialize_CLIENT_Representation>
 800cb04:	68b1      	ldr	r1, [r6, #8]
 800cb06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f002 fd7a 	bl	800f604 <ucdr_deserialize_string>
 800cb10:	4607      	mov	r7, r0
 800cb12:	e77f      	b.n	800ca14 <uxr_deserialize_ObjectVariant+0x44>
 800cb14:	f106 0308 	add.w	r3, r6, #8
 800cb18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb1c:	f106 010c 	add.w	r1, r6, #12
 800cb20:	4628      	mov	r0, r5
 800cb22:	f002 fd45 	bl	800f5b0 <ucdr_deserialize_sequence_uint8_t>
 800cb26:	4607      	mov	r7, r0
 800cb28:	e774      	b.n	800ca14 <uxr_deserialize_ObjectVariant+0x44>
 800cb2a:	bf00      	nop

0800cb2c <uxr_deserialize_BaseObjectRequest>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	2202      	movs	r2, #2
 800cb30:	4605      	mov	r5, r0
 800cb32:	460e      	mov	r6, r1
 800cb34:	f002 fc9a 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cb38:	1cb1      	adds	r1, r6, #2
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f002 fc94 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cb44:	4020      	ands	r0, r4
 800cb46:	b2c0      	uxtb	r0, r0
 800cb48:	bd70      	pop	{r4, r5, r6, pc}
 800cb4a:	bf00      	nop

0800cb4c <uxr_serialize_AGENT_ActivityInfo>:
 800cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb50:	460e      	mov	r6, r1
 800cb52:	f9b1 1000 	ldrsh.w	r1, [r1]
 800cb56:	4607      	mov	r7, r0
 800cb58:	f7fd fbc6 	bl	800a2e8 <ucdr_serialize_int16_t>
 800cb5c:	6871      	ldr	r1, [r6, #4]
 800cb5e:	4680      	mov	r8, r0
 800cb60:	4638      	mov	r0, r7
 800cb62:	f7fd f89b 	bl	8009c9c <ucdr_serialize_uint32_t>
 800cb66:	6873      	ldr	r3, [r6, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d06a      	beq.n	800cc42 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800cb6c:	b318      	cbz	r0, 800cbb6 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800cb6e:	f106 0904 	add.w	r9, r6, #4
 800cb72:	2500      	movs	r5, #0
 800cb74:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800cb78:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800cb7c:	7a21      	ldrb	r1, [r4, #8]
 800cb7e:	4638      	mov	r0, r7
 800cb80:	f7fc fe76 	bl	8009870 <ucdr_serialize_uint8_t>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d051      	beq.n	800cc2c <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800cb88:	7a23      	ldrb	r3, [r4, #8]
 800cb8a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cb8e:	00c9      	lsls	r1, r1, #3
 800cb90:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d859      	bhi.n	800cc4c <uxr_serialize_AGENT_ActivityInfo+0x100>
 800cb98:	e8df f003 	tbb	[pc, r3]
 800cb9c:	02122436 	.word	0x02122436
 800cba0:	4449      	add	r1, r9
 800cba2:	4638      	mov	r0, r7
 800cba4:	6889      	ldr	r1, [r1, #8]
 800cba6:	f002 fd1d 	bl	800f5e4 <ucdr_serialize_string>
 800cbaa:	6873      	ldr	r3, [r6, #4]
 800cbac:	3501      	adds	r5, #1
 800cbae:	429d      	cmp	r5, r3
 800cbb0:	d240      	bcs.n	800cc34 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d1de      	bne.n	800cb74 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800cbb6:	f04f 0800 	mov.w	r8, #0
 800cbba:	4640      	mov	r0, r8
 800cbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc0:	3108      	adds	r1, #8
 800cbc2:	4449      	add	r1, r9
 800cbc4:	2210      	movs	r2, #16
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f002 fbec 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cbcc:	44aa      	add	sl, r5
 800cbce:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	f8da 101c 	ldr.w	r1, [sl, #28]
 800cbd8:	4638      	mov	r0, r7
 800cbda:	f7fd f85f 	bl	8009c9c <ucdr_serialize_uint32_t>
 800cbde:	4020      	ands	r0, r4
 800cbe0:	b2c0      	uxtb	r0, r0
 800cbe2:	e7e2      	b.n	800cbaa <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800cbe4:	3108      	adds	r1, #8
 800cbe6:	4449      	add	r1, r9
 800cbe8:	2204      	movs	r2, #4
 800cbea:	4638      	mov	r0, r7
 800cbec:	f002 fbda 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cbf0:	44aa      	add	sl, r5
 800cbf2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7fc fe63 	bl	80098c8 <ucdr_serialize_uint16_t>
 800cc02:	4020      	ands	r0, r4
 800cc04:	b2c0      	uxtb	r0, r0
 800cc06:	e7d0      	b.n	800cbaa <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800cc08:	3108      	adds	r1, #8
 800cc0a:	4449      	add	r1, r9
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	4638      	mov	r0, r7
 800cc10:	f002 fbc8 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cc14:	44aa      	add	sl, r5
 800cc16:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800cc20:	4638      	mov	r0, r7
 800cc22:	f7fc fe25 	bl	8009870 <ucdr_serialize_uint8_t>
 800cc26:	4020      	ands	r0, r4
 800cc28:	b2c0      	uxtb	r0, r0
 800cc2a:	e7be      	b.n	800cbaa <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800cc2c:	6873      	ldr	r3, [r6, #4]
 800cc2e:	3501      	adds	r5, #1
 800cc30:	429d      	cmp	r5, r3
 800cc32:	d3c0      	bcc.n	800cbb6 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800cc34:	ea08 0000 	and.w	r0, r8, r0
 800cc38:	fa5f f880 	uxtb.w	r8, r0
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc42:	ea08 0800 	and.w	r8, r8, r0
 800cc46:	fa5f f888 	uxtb.w	r8, r8
 800cc4a:	e7b6      	b.n	800cbba <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800cc4c:	6873      	ldr	r3, [r6, #4]
 800cc4e:	3501      	adds	r5, #1
 800cc50:	42ab      	cmp	r3, r5
 800cc52:	f104 0418 	add.w	r4, r4, #24
 800cc56:	d891      	bhi.n	800cb7c <uxr_serialize_AGENT_ActivityInfo+0x30>
 800cc58:	e7af      	b.n	800cbba <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800cc5a:	bf00      	nop

0800cc5c <uxr_serialize_ActivityInfoVariant>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	460d      	mov	r5, r1
 800cc60:	7809      	ldrb	r1, [r1, #0]
 800cc62:	4606      	mov	r6, r0
 800cc64:	f7fc fe04 	bl	8009870 <ucdr_serialize_uint8_t>
 800cc68:	b130      	cbz	r0, 800cc78 <uxr_serialize_ActivityInfoVariant+0x1c>
 800cc6a:	782b      	ldrb	r3, [r5, #0]
 800cc6c:	2b06      	cmp	r3, #6
 800cc6e:	d019      	beq.n	800cca4 <uxr_serialize_ActivityInfoVariant+0x48>
 800cc70:	2b0d      	cmp	r3, #13
 800cc72:	d010      	beq.n	800cc96 <uxr_serialize_ActivityInfoVariant+0x3a>
 800cc74:	2b05      	cmp	r3, #5
 800cc76:	d000      	beq.n	800cc7a <uxr_serialize_ActivityInfoVariant+0x1e>
 800cc78:	bd70      	pop	{r4, r5, r6, pc}
 800cc7a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f7fd fb32 	bl	800a2e8 <ucdr_serialize_int16_t>
 800cc84:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800cc88:	4604      	mov	r4, r0
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7fd fa5c 	bl	800a148 <ucdr_serialize_uint64_t>
 800cc90:	4020      	ands	r0, r4
 800cc92:	b2c0      	uxtb	r0, r0
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
 800cc96:	f105 0108 	add.w	r1, r5, #8
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cca0:	f7ff bf54 	b.w	800cb4c <uxr_serialize_AGENT_ActivityInfo>
 800cca4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cca8:	4630      	mov	r0, r6
 800ccaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccae:	f7fd bb1b 	b.w	800a2e8 <ucdr_serialize_int16_t>
 800ccb2:	bf00      	nop

0800ccb4 <uxr_deserialize_BaseObjectReply>:
 800ccb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb8:	2202      	movs	r2, #2
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	f002 fbd5 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800ccc2:	2202      	movs	r2, #2
 800ccc4:	1cb9      	adds	r1, r7, #2
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f002 fbcf 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800ccce:	1d39      	adds	r1, r7, #4
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7fc fde2 	bl	800989c <ucdr_deserialize_uint8_t>
 800ccd8:	1d79      	adds	r1, r7, #5
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f7fc fddd 	bl	800989c <ucdr_deserialize_uint8_t>
 800cce2:	ea05 0508 	and.w	r5, r5, r8
 800cce6:	402c      	ands	r4, r5
 800cce8:	4020      	ands	r0, r4
 800ccea:	b2c0      	uxtb	r0, r0
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ccf0 <uxr_serialize_ReadSpecification>:
 800ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf4:	460e      	mov	r6, r1
 800ccf6:	7809      	ldrb	r1, [r1, #0]
 800ccf8:	4607      	mov	r7, r0
 800ccfa:	f7fc fdb9 	bl	8009870 <ucdr_serialize_uint8_t>
 800ccfe:	7871      	ldrb	r1, [r6, #1]
 800cd00:	4604      	mov	r4, r0
 800cd02:	4638      	mov	r0, r7
 800cd04:	f7fc fdb4 	bl	8009870 <ucdr_serialize_uint8_t>
 800cd08:	78b1      	ldrb	r1, [r6, #2]
 800cd0a:	4004      	ands	r4, r0
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	f7fc fd7f 	bl	8009810 <ucdr_serialize_bool>
 800cd12:	78b3      	ldrb	r3, [r6, #2]
 800cd14:	b2e4      	uxtb	r4, r4
 800cd16:	4004      	ands	r4, r0
 800cd18:	b94b      	cbnz	r3, 800cd2e <uxr_serialize_ReadSpecification+0x3e>
 800cd1a:	7a31      	ldrb	r1, [r6, #8]
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	f7fc fd77 	bl	8009810 <ucdr_serialize_bool>
 800cd22:	7a33      	ldrb	r3, [r6, #8]
 800cd24:	4004      	ands	r4, r0
 800cd26:	b943      	cbnz	r3, 800cd3a <uxr_serialize_ReadSpecification+0x4a>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2e:	6871      	ldr	r1, [r6, #4]
 800cd30:	4638      	mov	r0, r7
 800cd32:	f002 fc57 	bl	800f5e4 <ucdr_serialize_string>
 800cd36:	4004      	ands	r4, r0
 800cd38:	e7ef      	b.n	800cd1a <uxr_serialize_ReadSpecification+0x2a>
 800cd3a:	8971      	ldrh	r1, [r6, #10]
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f7fc fdc3 	bl	80098c8 <ucdr_serialize_uint16_t>
 800cd42:	89b1      	ldrh	r1, [r6, #12]
 800cd44:	4605      	mov	r5, r0
 800cd46:	4638      	mov	r0, r7
 800cd48:	f7fc fdbe 	bl	80098c8 <ucdr_serialize_uint16_t>
 800cd4c:	89f1      	ldrh	r1, [r6, #14]
 800cd4e:	4005      	ands	r5, r0
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7fc fdb9 	bl	80098c8 <ucdr_serialize_uint16_t>
 800cd56:	8a31      	ldrh	r1, [r6, #16]
 800cd58:	4680      	mov	r8, r0
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f7fc fdb4 	bl	80098c8 <ucdr_serialize_uint16_t>
 800cd60:	b2ed      	uxtb	r5, r5
 800cd62:	4025      	ands	r5, r4
 800cd64:	ea08 0505 	and.w	r5, r8, r5
 800cd68:	ea00 0405 	and.w	r4, r0, r5
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd72:	bf00      	nop

0800cd74 <uxr_serialize_CREATE_CLIENT_Payload>:
 800cd74:	f7ff bb26 	b.w	800c3c4 <uxr_serialize_CLIENT_Representation>

0800cd78 <uxr_serialize_CREATE_Payload>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	460d      	mov	r5, r1
 800cd80:	f002 fb10 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cd84:	1ca9      	adds	r1, r5, #2
 800cd86:	4604      	mov	r4, r0
 800cd88:	2202      	movs	r2, #2
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f002 fb0a 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cd90:	7929      	ldrb	r1, [r5, #4]
 800cd92:	4607      	mov	r7, r0
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7fc fd6b 	bl	8009870 <ucdr_serialize_uint8_t>
 800cd9a:	b328      	cbz	r0, 800cde8 <uxr_serialize_CREATE_Payload+0x70>
 800cd9c:	792b      	ldrb	r3, [r5, #4]
 800cd9e:	403c      	ands	r4, r7
 800cda0:	3b01      	subs	r3, #1
 800cda2:	b2e4      	uxtb	r4, r4
 800cda4:	2b0d      	cmp	r3, #13
 800cda6:	d81d      	bhi.n	800cde4 <uxr_serialize_CREATE_Payload+0x6c>
 800cda8:	e8df f003 	tbb	[pc, r3]
 800cdac:	32320753 	.word	0x32320753
 800cdb0:	07070707 	.word	0x07070707
 800cdb4:	2121211c 	.word	0x2121211c
 800cdb8:	684c      	.short	0x684c
 800cdba:	7a29      	ldrb	r1, [r5, #8]
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	f7fc fd57 	bl	8009870 <ucdr_serialize_uint8_t>
 800cdc2:	4607      	mov	r7, r0
 800cdc4:	b130      	cbz	r0, 800cdd4 <uxr_serialize_CREATE_Payload+0x5c>
 800cdc6:	7a2b      	ldrb	r3, [r5, #8]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d035      	beq.n	800ce38 <uxr_serialize_CREATE_Payload+0xc0>
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d02b      	beq.n	800ce28 <uxr_serialize_CREATE_Payload+0xb0>
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d031      	beq.n	800ce38 <uxr_serialize_CREATE_Payload+0xc0>
 800cdd4:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800cdd8:	4630      	mov	r0, r6
 800cdda:	2202      	movs	r2, #2
 800cddc:	f002 fae2 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cde0:	4038      	ands	r0, r7
 800cde2:	4004      	ands	r4, r0
 800cde4:	4620      	mov	r0, r4
 800cde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde8:	2400      	movs	r4, #0
 800cdea:	4620      	mov	r0, r4
 800cdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdee:	7a29      	ldrb	r1, [r5, #8]
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f7fc fd3d 	bl	8009870 <ucdr_serialize_uint8_t>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d0f6      	beq.n	800cde8 <uxr_serialize_CREATE_Payload+0x70>
 800cdfa:	7a2b      	ldrb	r3, [r5, #8]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d001      	beq.n	800ce04 <uxr_serialize_CREATE_Payload+0x8c>
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d1ef      	bne.n	800cde4 <uxr_serialize_CREATE_Payload+0x6c>
 800ce04:	68e9      	ldr	r1, [r5, #12]
 800ce06:	4630      	mov	r0, r6
 800ce08:	f002 fbec 	bl	800f5e4 <ucdr_serialize_string>
 800ce0c:	4004      	ands	r4, r0
 800ce0e:	e7e9      	b.n	800cde4 <uxr_serialize_CREATE_Payload+0x6c>
 800ce10:	7a29      	ldrb	r1, [r5, #8]
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7fc fd2c 	bl	8009870 <ucdr_serialize_uint8_t>
 800ce18:	4607      	mov	r7, r0
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d0da      	beq.n	800cdd4 <uxr_serialize_CREATE_Payload+0x5c>
 800ce1e:	7a2b      	ldrb	r3, [r5, #8]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d009      	beq.n	800ce38 <uxr_serialize_CREATE_Payload+0xc0>
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	d1d5      	bne.n	800cdd4 <uxr_serialize_CREATE_Payload+0x5c>
 800ce28:	68ea      	ldr	r2, [r5, #12]
 800ce2a:	f105 0110 	add.w	r1, r5, #16
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f002 fbac 	bl	800f58c <ucdr_serialize_sequence_uint8_t>
 800ce34:	4607      	mov	r7, r0
 800ce36:	e7cd      	b.n	800cdd4 <uxr_serialize_CREATE_Payload+0x5c>
 800ce38:	68e9      	ldr	r1, [r5, #12]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f002 fbd2 	bl	800f5e4 <ucdr_serialize_string>
 800ce40:	4607      	mov	r7, r0
 800ce42:	e7c7      	b.n	800cdd4 <uxr_serialize_CREATE_Payload+0x5c>
 800ce44:	f105 0108 	add.w	r1, r5, #8
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f7ff fb81 	bl	800c550 <uxr_serialize_AGENT_Representation>
 800ce4e:	4004      	ands	r4, r0
 800ce50:	e7c8      	b.n	800cde4 <uxr_serialize_CREATE_Payload+0x6c>
 800ce52:	7a29      	ldrb	r1, [r5, #8]
 800ce54:	4630      	mov	r0, r6
 800ce56:	f7fc fd0b 	bl	8009870 <ucdr_serialize_uint8_t>
 800ce5a:	4607      	mov	r7, r0
 800ce5c:	b130      	cbz	r0, 800ce6c <uxr_serialize_CREATE_Payload+0xf4>
 800ce5e:	7a2b      	ldrb	r3, [r5, #8]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d012      	beq.n	800ce8a <uxr_serialize_CREATE_Payload+0x112>
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d016      	beq.n	800ce96 <uxr_serialize_CREATE_Payload+0x11e>
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d00e      	beq.n	800ce8a <uxr_serialize_CREATE_Payload+0x112>
 800ce6c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800ce70:	4630      	mov	r0, r6
 800ce72:	f7fd fa39 	bl	800a2e8 <ucdr_serialize_int16_t>
 800ce76:	4038      	ands	r0, r7
 800ce78:	4004      	ands	r4, r0
 800ce7a:	e7b3      	b.n	800cde4 <uxr_serialize_CREATE_Payload+0x6c>
 800ce7c:	f105 0108 	add.w	r1, r5, #8
 800ce80:	4630      	mov	r0, r6
 800ce82:	f7ff fa9f 	bl	800c3c4 <uxr_serialize_CLIENT_Representation>
 800ce86:	4004      	ands	r4, r0
 800ce88:	e7ac      	b.n	800cde4 <uxr_serialize_CREATE_Payload+0x6c>
 800ce8a:	68e9      	ldr	r1, [r5, #12]
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f002 fba9 	bl	800f5e4 <ucdr_serialize_string>
 800ce92:	4607      	mov	r7, r0
 800ce94:	e7ea      	b.n	800ce6c <uxr_serialize_CREATE_Payload+0xf4>
 800ce96:	68ea      	ldr	r2, [r5, #12]
 800ce98:	f105 0110 	add.w	r1, r5, #16
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f002 fb75 	bl	800f58c <ucdr_serialize_sequence_uint8_t>
 800cea2:	4607      	mov	r7, r0
 800cea4:	e7e2      	b.n	800ce6c <uxr_serialize_CREATE_Payload+0xf4>
 800cea6:	bf00      	nop

0800cea8 <uxr_deserialize_GET_INFO_Payload>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	2202      	movs	r2, #2
 800ceac:	4605      	mov	r5, r0
 800ceae:	460e      	mov	r6, r1
 800ceb0:	f002 fadc 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800ceb4:	1cb1      	adds	r1, r6, #2
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	4604      	mov	r4, r0
 800ceba:	4628      	mov	r0, r5
 800cebc:	f002 fad6 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cec0:	1d31      	adds	r1, r6, #4
 800cec2:	4004      	ands	r4, r0
 800cec4:	4628      	mov	r0, r5
 800cec6:	f7fd f819 	bl	8009efc <ucdr_deserialize_uint32_t>
 800ceca:	b2e4      	uxtb	r4, r4
 800cecc:	4020      	ands	r0, r4
 800cece:	bd70      	pop	{r4, r5, r6, pc}

0800ced0 <uxr_serialize_DELETE_Payload>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	2202      	movs	r2, #2
 800ced4:	4605      	mov	r5, r0
 800ced6:	460e      	mov	r6, r1
 800ced8:	f002 fa64 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cedc:	1cb1      	adds	r1, r6, #2
 800cede:	4604      	mov	r4, r0
 800cee0:	2202      	movs	r2, #2
 800cee2:	4628      	mov	r0, r5
 800cee4:	f002 fa5e 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cee8:	4020      	ands	r0, r4
 800ceea:	b2c0      	uxtb	r0, r0
 800ceec:	bd70      	pop	{r4, r5, r6, pc}
 800ceee:	bf00      	nop

0800cef0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	4606      	mov	r6, r0
 800cef6:	460f      	mov	r7, r1
 800cef8:	f7fc fcd0 	bl	800989c <ucdr_deserialize_uint8_t>
 800cefc:	1c79      	adds	r1, r7, #1
 800cefe:	4605      	mov	r5, r0
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7fc fccb 	bl	800989c <ucdr_deserialize_uint8_t>
 800cf06:	1d39      	adds	r1, r7, #4
 800cf08:	4681      	mov	r9, r0
 800cf0a:	2204      	movs	r2, #4
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f002 faad 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cf12:	f107 0108 	add.w	r1, r7, #8
 800cf16:	4604      	mov	r4, r0
 800cf18:	2202      	movs	r2, #2
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f002 faa6 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cf20:	f107 010a 	add.w	r1, r7, #10
 800cf24:	4680      	mov	r8, r0
 800cf26:	2202      	movs	r2, #2
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f002 fa9f 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cf2e:	ea05 0509 	and.w	r5, r5, r9
 800cf32:	b2ed      	uxtb	r5, r5
 800cf34:	402c      	ands	r4, r5
 800cf36:	f107 010c 	add.w	r1, r7, #12
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f7fc fc7d 	bl	800983c <ucdr_deserialize_bool>
 800cf42:	ea08 0404 	and.w	r4, r8, r4
 800cf46:	4025      	ands	r5, r4
 800cf48:	4028      	ands	r0, r5
 800cf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf4e:	bf00      	nop

0800cf50 <uxr_deserialize_STATUS_Payload>:
 800cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf54:	2202      	movs	r2, #2
 800cf56:	4606      	mov	r6, r0
 800cf58:	460f      	mov	r7, r1
 800cf5a:	f002 fa87 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cf5e:	2202      	movs	r2, #2
 800cf60:	1cb9      	adds	r1, r7, #2
 800cf62:	4605      	mov	r5, r0
 800cf64:	4630      	mov	r0, r6
 800cf66:	f002 fa81 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800cf6a:	1d39      	adds	r1, r7, #4
 800cf6c:	4680      	mov	r8, r0
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7fc fc94 	bl	800989c <ucdr_deserialize_uint8_t>
 800cf74:	1d79      	adds	r1, r7, #5
 800cf76:	4604      	mov	r4, r0
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7fc fc8f 	bl	800989c <ucdr_deserialize_uint8_t>
 800cf7e:	ea05 0508 	and.w	r5, r5, r8
 800cf82:	402c      	ands	r4, r5
 800cf84:	4020      	ands	r0, r4
 800cf86:	b2c0      	uxtb	r0, r0
 800cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf8c <uxr_serialize_INFO_Payload>:
 800cf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf90:	2202      	movs	r2, #2
 800cf92:	460c      	mov	r4, r1
 800cf94:	4605      	mov	r5, r0
 800cf96:	f002 fa05 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	1ca1      	adds	r1, r4, #2
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f002 f9ff 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800cfa6:	7921      	ldrb	r1, [r4, #4]
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7fc fc60 	bl	8009870 <ucdr_serialize_uint8_t>
 800cfb0:	7961      	ldrb	r1, [r4, #5]
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f7fc fc5b 	bl	8009870 <ucdr_serialize_uint8_t>
 800cfba:	ea08 0807 	and.w	r8, r8, r7
 800cfbe:	ea06 0608 	and.w	r6, r6, r8
 800cfc2:	4006      	ands	r6, r0
 800cfc4:	7a21      	ldrb	r1, [r4, #8]
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	f7fc fc22 	bl	8009810 <ucdr_serialize_bool>
 800cfcc:	7a23      	ldrb	r3, [r4, #8]
 800cfce:	b2f7      	uxtb	r7, r6
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	b96b      	cbnz	r3, 800cff0 <uxr_serialize_INFO_Payload+0x64>
 800cfd4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f7fc fc19 	bl	8009810 <ucdr_serialize_bool>
 800cfde:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800cfe2:	4030      	ands	r0, r6
 800cfe4:	b2c6      	uxtb	r6, r0
 800cfe6:	b983      	cbnz	r3, 800d00a <uxr_serialize_INFO_Payload+0x7e>
 800cfe8:	ea06 0007 	and.w	r0, r6, r7
 800cfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff0:	7b21      	ldrb	r1, [r4, #12]
 800cff2:	4628      	mov	r0, r5
 800cff4:	f7fc fc3c 	bl	8009870 <ucdr_serialize_uint8_t>
 800cff8:	b188      	cbz	r0, 800d01e <uxr_serialize_INFO_Payload+0x92>
 800cffa:	f104 010c 	add.w	r1, r4, #12
 800cffe:	4628      	mov	r0, r5
 800d000:	f7ff faf2 	bl	800c5e8 <uxr_serialize_ObjectVariant.part.0>
 800d004:	4030      	ands	r0, r6
 800d006:	b2c6      	uxtb	r6, r0
 800d008:	e7e4      	b.n	800cfd4 <uxr_serialize_INFO_Payload+0x48>
 800d00a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800d00e:	4628      	mov	r0, r5
 800d010:	f7ff fe24 	bl	800cc5c <uxr_serialize_ActivityInfoVariant>
 800d014:	4006      	ands	r6, r0
 800d016:	ea06 0007 	and.w	r0, r6, r7
 800d01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01e:	4606      	mov	r6, r0
 800d020:	e7d8      	b.n	800cfd4 <uxr_serialize_INFO_Payload+0x48>
 800d022:	bf00      	nop

0800d024 <uxr_serialize_READ_DATA_Payload>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	2202      	movs	r2, #2
 800d028:	4605      	mov	r5, r0
 800d02a:	460e      	mov	r6, r1
 800d02c:	f002 f9ba 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800d030:	1cb1      	adds	r1, r6, #2
 800d032:	2202      	movs	r2, #2
 800d034:	4604      	mov	r4, r0
 800d036:	4628      	mov	r0, r5
 800d038:	f002 f9b4 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800d03c:	1d31      	adds	r1, r6, #4
 800d03e:	4004      	ands	r4, r0
 800d040:	4628      	mov	r0, r5
 800d042:	f7ff fe55 	bl	800ccf0 <uxr_serialize_ReadSpecification>
 800d046:	b2e4      	uxtb	r4, r4
 800d048:	4020      	ands	r0, r4
 800d04a:	bd70      	pop	{r4, r5, r6, pc}

0800d04c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	2202      	movs	r2, #2
 800d050:	4605      	mov	r5, r0
 800d052:	460e      	mov	r6, r1
 800d054:	f002 f9a6 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800d058:	1cb1      	adds	r1, r6, #2
 800d05a:	4604      	mov	r4, r0
 800d05c:	2202      	movs	r2, #2
 800d05e:	4628      	mov	r0, r5
 800d060:	f002 f9a0 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800d064:	4020      	ands	r0, r4
 800d066:	b2c0      	uxtb	r0, r0
 800d068:	bd70      	pop	{r4, r5, r6, pc}
 800d06a:	bf00      	nop

0800d06c <uxr_serialize_ACKNACK_Payload>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	460f      	mov	r7, r1
 800d070:	460e      	mov	r6, r1
 800d072:	f837 1b02 	ldrh.w	r1, [r7], #2
 800d076:	4605      	mov	r5, r0
 800d078:	f7fc fc26 	bl	80098c8 <ucdr_serialize_uint16_t>
 800d07c:	4639      	mov	r1, r7
 800d07e:	2202      	movs	r2, #2
 800d080:	4604      	mov	r4, r0
 800d082:	4628      	mov	r0, r5
 800d084:	f002 f98e 	bl	800f3a4 <ucdr_serialize_array_uint8_t>
 800d088:	7931      	ldrb	r1, [r6, #4]
 800d08a:	4004      	ands	r4, r0
 800d08c:	4628      	mov	r0, r5
 800d08e:	f7fc fbef 	bl	8009870 <ucdr_serialize_uint8_t>
 800d092:	b2e4      	uxtb	r4, r4
 800d094:	4020      	ands	r0, r4
 800d096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d098 <uxr_deserialize_ACKNACK_Payload>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	4605      	mov	r5, r0
 800d09c:	460e      	mov	r6, r1
 800d09e:	f7fc fd13 	bl	8009ac8 <ucdr_deserialize_uint16_t>
 800d0a2:	1cb1      	adds	r1, r6, #2
 800d0a4:	2202      	movs	r2, #2
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f002 f9df 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800d0ae:	1d31      	adds	r1, r6, #4
 800d0b0:	4004      	ands	r4, r0
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	f7fc fbf2 	bl	800989c <ucdr_deserialize_uint8_t>
 800d0b8:	b2e4      	uxtb	r4, r4
 800d0ba:	4020      	ands	r0, r4
 800d0bc:	bd70      	pop	{r4, r5, r6, pc}
 800d0be:	bf00      	nop

0800d0c0 <uxr_serialize_HEARTBEAT_Payload>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	8809      	ldrh	r1, [r1, #0]
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	f7fc fbfe 	bl	80098c8 <ucdr_serialize_uint16_t>
 800d0cc:	8869      	ldrh	r1, [r5, #2]
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7fc fbf9 	bl	80098c8 <ucdr_serialize_uint16_t>
 800d0d6:	7929      	ldrb	r1, [r5, #4]
 800d0d8:	4004      	ands	r4, r0
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f7fc fbc8 	bl	8009870 <ucdr_serialize_uint8_t>
 800d0e0:	b2e4      	uxtb	r4, r4
 800d0e2:	4020      	ands	r0, r4
 800d0e4:	bd70      	pop	{r4, r5, r6, pc}
 800d0e6:	bf00      	nop

0800d0e8 <uxr_deserialize_HEARTBEAT_Payload>:
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	460e      	mov	r6, r1
 800d0ee:	f7fc fceb 	bl	8009ac8 <ucdr_deserialize_uint16_t>
 800d0f2:	1cb1      	adds	r1, r6, #2
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f7fc fce6 	bl	8009ac8 <ucdr_deserialize_uint16_t>
 800d0fc:	1d31      	adds	r1, r6, #4
 800d0fe:	4004      	ands	r4, r0
 800d100:	4628      	mov	r0, r5
 800d102:	f7fc fbcb 	bl	800989c <ucdr_deserialize_uint8_t>
 800d106:	b2e4      	uxtb	r4, r4
 800d108:	4020      	ands	r0, r4
 800d10a:	bd70      	pop	{r4, r5, r6, pc}

0800d10c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800d10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d110:	4605      	mov	r5, r0
 800d112:	460e      	mov	r6, r1
 800d114:	f7fd fa74 	bl	800a600 <ucdr_deserialize_int32_t>
 800d118:	1d31      	adds	r1, r6, #4
 800d11a:	4607      	mov	r7, r0
 800d11c:	4628      	mov	r0, r5
 800d11e:	f7fc feed 	bl	8009efc <ucdr_deserialize_uint32_t>
 800d122:	f106 0108 	add.w	r1, r6, #8
 800d126:	4680      	mov	r8, r0
 800d128:	4628      	mov	r0, r5
 800d12a:	f7fd fa69 	bl	800a600 <ucdr_deserialize_int32_t>
 800d12e:	f106 010c 	add.w	r1, r6, #12
 800d132:	4604      	mov	r4, r0
 800d134:	4628      	mov	r0, r5
 800d136:	f7fc fee1 	bl	8009efc <ucdr_deserialize_uint32_t>
 800d13a:	ea07 0708 	and.w	r7, r7, r8
 800d13e:	403c      	ands	r4, r7
 800d140:	f106 0110 	add.w	r1, r6, #16
 800d144:	4004      	ands	r4, r0
 800d146:	4628      	mov	r0, r5
 800d148:	f7fd fa5a 	bl	800a600 <ucdr_deserialize_int32_t>
 800d14c:	f106 0114 	add.w	r1, r6, #20
 800d150:	4603      	mov	r3, r0
 800d152:	4628      	mov	r0, r5
 800d154:	461d      	mov	r5, r3
 800d156:	f7fc fed1 	bl	8009efc <ucdr_deserialize_uint32_t>
 800d15a:	b2e4      	uxtb	r4, r4
 800d15c:	402c      	ands	r4, r5
 800d15e:	4020      	ands	r0, r4
 800d160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d164 <uxr_deserialize_SampleIdentity>:
 800d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d168:	220c      	movs	r2, #12
 800d16a:	4604      	mov	r4, r0
 800d16c:	460d      	mov	r5, r1
 800d16e:	f002 f97d 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800d172:	2203      	movs	r2, #3
 800d174:	f105 010c 	add.w	r1, r5, #12
 800d178:	4607      	mov	r7, r0
 800d17a:	4620      	mov	r0, r4
 800d17c:	f002 f976 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 800d180:	f105 010f 	add.w	r1, r5, #15
 800d184:	4680      	mov	r8, r0
 800d186:	4620      	mov	r0, r4
 800d188:	f7fc fb88 	bl	800989c <ucdr_deserialize_uint8_t>
 800d18c:	f105 0110 	add.w	r1, r5, #16
 800d190:	4606      	mov	r6, r0
 800d192:	4620      	mov	r0, r4
 800d194:	f7fd fa34 	bl	800a600 <ucdr_deserialize_int32_t>
 800d198:	f105 0114 	add.w	r1, r5, #20
 800d19c:	4603      	mov	r3, r0
 800d19e:	4620      	mov	r0, r4
 800d1a0:	ea07 0708 	and.w	r7, r7, r8
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	f7fc fea9 	bl	8009efc <ucdr_deserialize_uint32_t>
 800d1aa:	403e      	ands	r6, r7
 800d1ac:	4034      	ands	r4, r6
 800d1ae:	4020      	ands	r0, r4
 800d1b0:	b2c0      	uxtb	r0, r0
 800d1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b6:	bf00      	nop

0800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>:
 800d1b8:	280b      	cmp	r0, #11
 800d1ba:	dc0d      	bgt.n	800d1d8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	db09      	blt.n	800d1d4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d1c0:	280b      	cmp	r0, #11
 800d1c2:	d807      	bhi.n	800d1d4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d1c4:	e8df f000 	tbb	[pc, r0]
 800d1c8:	07060607 	.word	0x07060607
 800d1cc:	06060606 	.word	0x06060606
 800d1d0:	07070606 	.word	0x07070606
 800d1d4:	2001      	movs	r0, #1
 800d1d6:	4770      	bx	lr
 800d1d8:	28cb      	cmp	r0, #203	@ 0xcb
 800d1da:	bf18      	it	ne
 800d1dc:	2001      	movne	r0, #1
 800d1de:	4770      	bx	lr

0800d1e0 <rcl_get_zero_initialized_context>:
 800d1e0:	4a03      	ldr	r2, [pc, #12]	@ (800d1f0 <rcl_get_zero_initialized_context+0x10>)
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	4770      	bx	lr
 800d1f0:	080129f0 	.word	0x080129f0

0800d1f4 <rcl_context_is_valid>:
 800d1f4:	b118      	cbz	r0, 800d1fe <rcl_context_is_valid+0xa>
 800d1f6:	6840      	ldr	r0, [r0, #4]
 800d1f8:	3800      	subs	r0, #0
 800d1fa:	bf18      	it	ne
 800d1fc:	2001      	movne	r0, #1
 800d1fe:	4770      	bx	lr

0800d200 <__cleanup_context>:
 800d200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d204:	4606      	mov	r6, r0
 800d206:	6800      	ldr	r0, [r0, #0]
 800d208:	2300      	movs	r3, #0
 800d20a:	6073      	str	r3, [r6, #4]
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d04d      	beq.n	800d2ac <__cleanup_context+0xac>
 800d210:	6947      	ldr	r7, [r0, #20]
 800d212:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d216:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d21a:	b137      	cbz	r7, 800d22a <__cleanup_context+0x2a>
 800d21c:	3014      	adds	r0, #20
 800d21e:	f000 fb1d 	bl	800d85c <rcl_init_options_fini>
 800d222:	4607      	mov	r7, r0
 800d224:	2800      	cmp	r0, #0
 800d226:	d148      	bne.n	800d2ba <__cleanup_context+0xba>
 800d228:	6830      	ldr	r0, [r6, #0]
 800d22a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d22c:	b143      	cbz	r3, 800d240 <__cleanup_context+0x40>
 800d22e:	3028      	adds	r0, #40	@ 0x28
 800d230:	f001 fdd4 	bl	800eddc <rmw_context_fini>
 800d234:	b118      	cbz	r0, 800d23e <__cleanup_context+0x3e>
 800d236:	2f00      	cmp	r7, #0
 800d238:	d042      	beq.n	800d2c0 <__cleanup_context+0xc0>
 800d23a:	f7fb fc0d 	bl	8008a58 <rcutils_reset_error>
 800d23e:	6830      	ldr	r0, [r6, #0]
 800d240:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800d244:	f1bc 0f00 	cmp.w	ip, #0
 800d248:	d01c      	beq.n	800d284 <__cleanup_context+0x84>
 800d24a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d24e:	2a01      	cmp	r2, #1
 800d250:	f173 0100 	sbcs.w	r1, r3, #0
 800d254:	db12      	blt.n	800d27c <__cleanup_context+0x7c>
 800d256:	2400      	movs	r4, #0
 800d258:	2500      	movs	r5, #0
 800d25a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800d25e:	4649      	mov	r1, r9
 800d260:	b1c0      	cbz	r0, 800d294 <__cleanup_context+0x94>
 800d262:	47c0      	blx	r8
 800d264:	6831      	ldr	r1, [r6, #0]
 800d266:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800d26a:	3401      	adds	r4, #1
 800d26c:	f145 0500 	adc.w	r5, r5, #0
 800d270:	4294      	cmp	r4, r2
 800d272:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800d276:	eb75 0103 	sbcs.w	r1, r5, r3
 800d27a:	dbee      	blt.n	800d25a <__cleanup_context+0x5a>
 800d27c:	4660      	mov	r0, ip
 800d27e:	4649      	mov	r1, r9
 800d280:	47c0      	blx	r8
 800d282:	6830      	ldr	r0, [r6, #0]
 800d284:	4649      	mov	r1, r9
 800d286:	47c0      	blx	r8
 800d288:	2300      	movs	r3, #0
 800d28a:	e9c6 3300 	strd	r3, r3, [r6]
 800d28e:	4638      	mov	r0, r7
 800d290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d294:	3401      	adds	r4, #1
 800d296:	f145 0500 	adc.w	r5, r5, #0
 800d29a:	4294      	cmp	r4, r2
 800d29c:	eb75 0103 	sbcs.w	r1, r5, r3
 800d2a0:	dbdb      	blt.n	800d25a <__cleanup_context+0x5a>
 800d2a2:	4660      	mov	r0, ip
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	47c0      	blx	r8
 800d2a8:	6830      	ldr	r0, [r6, #0]
 800d2aa:	e7eb      	b.n	800d284 <__cleanup_context+0x84>
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e9c6 3300 	strd	r3, r3, [r6]
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ba:	f7fb fbcd 	bl	8008a58 <rcutils_reset_error>
 800d2be:	e7b3      	b.n	800d228 <__cleanup_context+0x28>
 800d2c0:	f7ff ff7a 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	e7b8      	b.n	800d23a <__cleanup_context+0x3a>

0800d2c8 <rcl_expand_topic_name>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	b08b      	sub	sp, #44	@ 0x2c
 800d2ce:	9306      	str	r3, [sp, #24]
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	f000 80d2 	beq.w	800d47a <rcl_expand_topic_name+0x1b2>
 800d2d6:	460e      	mov	r6, r1
 800d2d8:	2900      	cmp	r1, #0
 800d2da:	f000 80ce 	beq.w	800d47a <rcl_expand_topic_name+0x1b2>
 800d2de:	4617      	mov	r7, r2
 800d2e0:	2a00      	cmp	r2, #0
 800d2e2:	f000 80ca 	beq.w	800d47a <rcl_expand_topic_name+0x1b2>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 80c7 	beq.w	800d47a <rcl_expand_topic_name+0x1b2>
 800d2ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 80c3 	beq.w	800d47a <rcl_expand_topic_name+0x1b2>
 800d2f4:	a909      	add	r1, sp, #36	@ 0x24
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	f000 ff67 	bl	800e1cc <rcl_validate_topic_name>
 800d2fe:	4604      	mov	r4, r0
 800d300:	2800      	cmp	r0, #0
 800d302:	f040 80b6 	bne.w	800d472 <rcl_expand_topic_name+0x1aa>
 800d306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f040 80bf 	bne.w	800d48c <rcl_expand_topic_name+0x1c4>
 800d30e:	4602      	mov	r2, r0
 800d310:	a909      	add	r1, sp, #36	@ 0x24
 800d312:	4630      	mov	r0, r6
 800d314:	f001 fac8 	bl	800e8a8 <rmw_validate_node_name>
 800d318:	2800      	cmp	r0, #0
 800d31a:	f040 80b3 	bne.w	800d484 <rcl_expand_topic_name+0x1bc>
 800d31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d320:	2a00      	cmp	r2, #0
 800d322:	f040 80b8 	bne.w	800d496 <rcl_expand_topic_name+0x1ce>
 800d326:	a909      	add	r1, sp, #36	@ 0x24
 800d328:	4638      	mov	r0, r7
 800d32a:	f001 fa9f 	bl	800e86c <rmw_validate_namespace>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f040 80a8 	bne.w	800d484 <rcl_expand_topic_name+0x1bc>
 800d334:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d336:	2c00      	cmp	r4, #0
 800d338:	f040 80f6 	bne.w	800d528 <rcl_expand_topic_name+0x260>
 800d33c:	217b      	movs	r1, #123	@ 0x7b
 800d33e:	4640      	mov	r0, r8
 800d340:	f004 fac0 	bl	80118c4 <strchr>
 800d344:	f898 3000 	ldrb.w	r3, [r8]
 800d348:	2b2f      	cmp	r3, #47	@ 0x2f
 800d34a:	4605      	mov	r5, r0
 800d34c:	f000 80c4 	beq.w	800d4d8 <rcl_expand_topic_name+0x210>
 800d350:	2b7e      	cmp	r3, #126	@ 0x7e
 800d352:	d16f      	bne.n	800d434 <rcl_expand_topic_name+0x16c>
 800d354:	4638      	mov	r0, r7
 800d356:	f7f2 ff4d 	bl	80001f4 <strlen>
 800d35a:	4b87      	ldr	r3, [pc, #540]	@ (800d578 <rcl_expand_topic_name+0x2b0>)
 800d35c:	4987      	ldr	r1, [pc, #540]	@ (800d57c <rcl_expand_topic_name+0x2b4>)
 800d35e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d360:	9604      	str	r6, [sp, #16]
 800d362:	2801      	cmp	r0, #1
 800d364:	bf0c      	ite	eq
 800d366:	4618      	moveq	r0, r3
 800d368:	4608      	movne	r0, r1
 800d36a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d36e:	e9cd 2300 	strd	r2, r3, [sp]
 800d372:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800d376:	f108 0101 	add.w	r1, r8, #1
 800d37a:	9105      	str	r1, [sp, #20]
 800d37c:	ab14      	add	r3, sp, #80	@ 0x50
 800d37e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d380:	f001 f852 	bl	800e428 <rcutils_format_string_limit>
 800d384:	4682      	mov	sl, r0
 800d386:	2800      	cmp	r0, #0
 800d388:	f000 80d0 	beq.w	800d52c <rcl_expand_topic_name+0x264>
 800d38c:	2d00      	cmp	r5, #0
 800d38e:	f000 80aa 	beq.w	800d4e6 <rcl_expand_topic_name+0x21e>
 800d392:	217b      	movs	r1, #123	@ 0x7b
 800d394:	f004 fa96 	bl	80118c4 <strchr>
 800d398:	46d1      	mov	r9, sl
 800d39a:	4605      	mov	r5, r0
 800d39c:	9407      	str	r4, [sp, #28]
 800d39e:	46d3      	mov	fp, sl
 800d3a0:	464c      	mov	r4, r9
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	f000 80c7 	beq.w	800d536 <rcl_expand_topic_name+0x26e>
 800d3a8:	217d      	movs	r1, #125	@ 0x7d
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f004 fa8a 	bl	80118c4 <strchr>
 800d3b0:	eba0 0905 	sub.w	r9, r0, r5
 800d3b4:	f109 0a01 	add.w	sl, r9, #1
 800d3b8:	4871      	ldr	r0, [pc, #452]	@ (800d580 <rcl_expand_topic_name+0x2b8>)
 800d3ba:	4652      	mov	r2, sl
 800d3bc:	4629      	mov	r1, r5
 800d3be:	f004 fa8e 	bl	80118de <strncmp>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	f000 808d 	beq.w	800d4e2 <rcl_expand_topic_name+0x21a>
 800d3c8:	486e      	ldr	r0, [pc, #440]	@ (800d584 <rcl_expand_topic_name+0x2bc>)
 800d3ca:	4652      	mov	r2, sl
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	f004 fa86 	bl	80118de <strncmp>
 800d3d2:	b130      	cbz	r0, 800d3e2 <rcl_expand_topic_name+0x11a>
 800d3d4:	486c      	ldr	r0, [pc, #432]	@ (800d588 <rcl_expand_topic_name+0x2c0>)
 800d3d6:	4652      	mov	r2, sl
 800d3d8:	4629      	mov	r1, r5
 800d3da:	f004 fa80 	bl	80118de <strncmp>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d15b      	bne.n	800d49a <rcl_expand_topic_name+0x1d2>
 800d3e2:	46b9      	mov	r9, r7
 800d3e4:	ab16      	add	r3, sp, #88	@ 0x58
 800d3e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d3ee:	ab14      	add	r3, sp, #80	@ 0x50
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	cb0c      	ldmia	r3, {r2, r3}
 800d3f4:	4651      	mov	r1, sl
 800d3f6:	f001 f963 	bl	800e6c0 <rcutils_strndup>
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	f000 80a4 	beq.w	800d54a <rcl_expand_topic_name+0x282>
 800d402:	464a      	mov	r2, r9
 800d404:	4620      	mov	r0, r4
 800d406:	ab14      	add	r3, sp, #80	@ 0x50
 800d408:	4629      	mov	r1, r5
 800d40a:	f001 f85f 	bl	800e4cc <rcutils_repl_str>
 800d40e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d410:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d412:	4604      	mov	r4, r0
 800d414:	4628      	mov	r0, r5
 800d416:	4798      	blx	r3
 800d418:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d41a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d41c:	4658      	mov	r0, fp
 800d41e:	4798      	blx	r3
 800d420:	2c00      	cmp	r4, #0
 800d422:	f000 8083 	beq.w	800d52c <rcl_expand_topic_name+0x264>
 800d426:	217b      	movs	r1, #123	@ 0x7b
 800d428:	4620      	mov	r0, r4
 800d42a:	f004 fa4b 	bl	80118c4 <strchr>
 800d42e:	46a3      	mov	fp, r4
 800d430:	4605      	mov	r5, r0
 800d432:	e7b6      	b.n	800d3a2 <rcl_expand_topic_name+0xda>
 800d434:	2800      	cmp	r0, #0
 800d436:	d151      	bne.n	800d4dc <rcl_expand_topic_name+0x214>
 800d438:	4638      	mov	r0, r7
 800d43a:	f7f2 fedb 	bl	80001f4 <strlen>
 800d43e:	4b53      	ldr	r3, [pc, #332]	@ (800d58c <rcl_expand_topic_name+0x2c4>)
 800d440:	4a53      	ldr	r2, [pc, #332]	@ (800d590 <rcl_expand_topic_name+0x2c8>)
 800d442:	f8cd 8010 	str.w	r8, [sp, #16]
 800d446:	2801      	cmp	r0, #1
 800d448:	bf0c      	ite	eq
 800d44a:	4618      	moveq	r0, r3
 800d44c:	4610      	movne	r0, r2
 800d44e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d454:	e9cd 3200 	strd	r3, r2, [sp]
 800d458:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800d45c:	ab14      	add	r3, sp, #80	@ 0x50
 800d45e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d460:	f000 ffe2 	bl	800e428 <rcutils_format_string_limit>
 800d464:	4682      	mov	sl, r0
 800d466:	4653      	mov	r3, sl
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d05f      	beq.n	800d52c <rcl_expand_topic_name+0x264>
 800d46c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d46e:	f8c3 a000 	str.w	sl, [r3]
 800d472:	4620      	mov	r0, r4
 800d474:	b00b      	add	sp, #44	@ 0x2c
 800d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47a:	240b      	movs	r4, #11
 800d47c:	4620      	mov	r0, r4
 800d47e:	b00b      	add	sp, #44	@ 0x2c
 800d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d484:	f7ff fe98 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d488:	4604      	mov	r4, r0
 800d48a:	e7f2      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d48c:	2467      	movs	r4, #103	@ 0x67
 800d48e:	4620      	mov	r0, r4
 800d490:	b00b      	add	sp, #44	@ 0x2c
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d496:	24c9      	movs	r4, #201	@ 0xc9
 800d498:	e7eb      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d49a:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800d49e:	9806      	ldr	r0, [sp, #24]
 800d4a0:	1c69      	adds	r1, r5, #1
 800d4a2:	f7fb fbef 	bl	8008c84 <rcutils_string_map_getn>
 800d4a6:	4681      	mov	r9, r0
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d19b      	bne.n	800d3e4 <rcl_expand_topic_name+0x11c>
 800d4ac:	aa16      	add	r2, sp, #88	@ 0x58
 800d4ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4b2:	f8c3 9000 	str.w	r9, [r3]
 800d4b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d4ba:	ab14      	add	r3, sp, #80	@ 0x50
 800d4bc:	cb0c      	ldmia	r3, {r2, r3}
 800d4be:	4651      	mov	r1, sl
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	f001 f8fd 	bl	800e6c0 <rcutils_strndup>
 800d4c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d4c8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d4ca:	4798      	blx	r3
 800d4cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d4ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d4d0:	4658      	mov	r0, fp
 800d4d2:	4798      	blx	r3
 800d4d4:	2469      	movs	r4, #105	@ 0x69
 800d4d6:	e7cc      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d03e      	beq.n	800d55a <rcl_expand_topic_name+0x292>
 800d4dc:	46c1      	mov	r9, r8
 800d4de:	46a2      	mov	sl, r4
 800d4e0:	e75c      	b.n	800d39c <rcl_expand_topic_name+0xd4>
 800d4e2:	46b1      	mov	r9, r6
 800d4e4:	e77e      	b.n	800d3e4 <rcl_expand_topic_name+0x11c>
 800d4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800d4ec:	d0be      	beq.n	800d46c <rcl_expand_topic_name+0x1a4>
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	f7f2 fe80 	bl	80001f4 <strlen>
 800d4f4:	4b25      	ldr	r3, [pc, #148]	@ (800d58c <rcl_expand_topic_name+0x2c4>)
 800d4f6:	4926      	ldr	r1, [pc, #152]	@ (800d590 <rcl_expand_topic_name+0x2c8>)
 800d4f8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d4fa:	f8cd a010 	str.w	sl, [sp, #16]
 800d4fe:	2801      	cmp	r0, #1
 800d500:	bf0c      	ite	eq
 800d502:	4618      	moveq	r0, r3
 800d504:	4608      	movne	r0, r1
 800d506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d50a:	e9cd 2300 	strd	r2, r3, [sp]
 800d50e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800d512:	ab14      	add	r3, sp, #80	@ 0x50
 800d514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d516:	f000 ff87 	bl	800e428 <rcutils_format_string_limit>
 800d51a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d51c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d51e:	4603      	mov	r3, r0
 800d520:	4650      	mov	r0, sl
 800d522:	469a      	mov	sl, r3
 800d524:	4790      	blx	r2
 800d526:	e79e      	b.n	800d466 <rcl_expand_topic_name+0x19e>
 800d528:	24ca      	movs	r4, #202	@ 0xca
 800d52a:	e7a2      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d52c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d52e:	2300      	movs	r3, #0
 800d530:	6013      	str	r3, [r2, #0]
 800d532:	240a      	movs	r4, #10
 800d534:	e79d      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d536:	465b      	mov	r3, fp
 800d538:	9c07      	ldr	r4, [sp, #28]
 800d53a:	46da      	mov	sl, fp
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1d2      	bne.n	800d4e6 <rcl_expand_topic_name+0x21e>
 800d540:	f898 3000 	ldrb.w	r3, [r8]
 800d544:	2b2f      	cmp	r3, #47	@ 0x2f
 800d546:	d091      	beq.n	800d46c <rcl_expand_topic_name+0x1a4>
 800d548:	e776      	b.n	800d438 <rcl_expand_topic_name+0x170>
 800d54a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d54c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800d54e:	601d      	str	r5, [r3, #0]
 800d550:	4658      	mov	r0, fp
 800d552:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d554:	4798      	blx	r3
 800d556:	240a      	movs	r4, #10
 800d558:	e78b      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d55a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 800d55e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d562:	ab14      	add	r3, sp, #80	@ 0x50
 800d564:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d566:	4640      	mov	r0, r8
 800d568:	f001 f888 	bl	800e67c <rcutils_strdup>
 800d56c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d56e:	2800      	cmp	r0, #0
 800d570:	bf08      	it	eq
 800d572:	240a      	moveq	r4, #10
 800d574:	6018      	str	r0, [r3, #0]
 800d576:	e77c      	b.n	800d472 <rcl_expand_topic_name+0x1aa>
 800d578:	080129b8 	.word	0x080129b8
 800d57c:	080129f8 	.word	0x080129f8
 800d580:	08012a08 	.word	0x08012a08
 800d584:	08012a10 	.word	0x08012a10
 800d588:	08012a18 	.word	0x08012a18
 800d58c:	080129c8 	.word	0x080129c8
 800d590:	08012a00 	.word	0x08012a00

0800d594 <rcl_get_default_topic_name_substitutions>:
 800d594:	2800      	cmp	r0, #0
 800d596:	bf0c      	ite	eq
 800d598:	200b      	moveq	r0, #11
 800d59a:	2000      	movne	r0, #0
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop

0800d5a0 <rcl_init>:
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	1e07      	subs	r7, r0, #0
 800d5a6:	b09f      	sub	sp, #124	@ 0x7c
 800d5a8:	4688      	mov	r8, r1
 800d5aa:	4692      	mov	sl, r2
 800d5ac:	4699      	mov	r9, r3
 800d5ae:	f340 8097 	ble.w	800d6e0 <rcl_init+0x140>
 800d5b2:	2900      	cmp	r1, #0
 800d5b4:	f000 8097 	beq.w	800d6e6 <rcl_init+0x146>
 800d5b8:	1f0d      	subs	r5, r1, #4
 800d5ba:	2400      	movs	r4, #0
 800d5bc:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800d5c0:	3401      	adds	r4, #1
 800d5c2:	2e00      	cmp	r6, #0
 800d5c4:	f000 808f 	beq.w	800d6e6 <rcl_init+0x146>
 800d5c8:	42a7      	cmp	r7, r4
 800d5ca:	d1f7      	bne.n	800d5bc <rcl_init+0x1c>
 800d5cc:	f1ba 0f00 	cmp.w	sl, #0
 800d5d0:	f000 8089 	beq.w	800d6e6 <rcl_init+0x146>
 800d5d4:	f8da 4000 	ldr.w	r4, [sl]
 800d5d8:	2c00      	cmp	r4, #0
 800d5da:	f000 8084 	beq.w	800d6e6 <rcl_init+0x146>
 800d5de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5e0:	ad19      	add	r5, sp, #100	@ 0x64
 800d5e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	602b      	str	r3, [r5, #0]
 800d5e8:	a819      	add	r0, sp, #100	@ 0x64
 800d5ea:	f7fb fa11 	bl	8008a10 <rcutils_allocator_is_valid>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d079      	beq.n	800d6e6 <rcl_init+0x146>
 800d5f2:	f1b9 0f00 	cmp.w	r9, #0
 800d5f6:	d076      	beq.n	800d6e6 <rcl_init+0x146>
 800d5f8:	f8d9 3000 	ldr.w	r3, [r9]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d177      	bne.n	800d6f0 <rcl_init+0x150>
 800d600:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800d604:	2178      	movs	r1, #120	@ 0x78
 800d606:	2001      	movs	r0, #1
 800d608:	4798      	blx	r3
 800d60a:	4604      	mov	r4, r0
 800d60c:	f8c9 0000 	str.w	r0, [r9]
 800d610:	2800      	cmp	r0, #0
 800d612:	f000 80ba 	beq.w	800d78a <rcl_init+0x1ea>
 800d616:	a802      	add	r0, sp, #8
 800d618:	f001 f8be 	bl	800e798 <rmw_get_zero_initialized_context>
 800d61c:	a902      	add	r1, sp, #8
 800d61e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d622:	2250      	movs	r2, #80	@ 0x50
 800d624:	ac19      	add	r4, sp, #100	@ 0x64
 800d626:	f004 fa0e 	bl	8011a46 <memcpy>
 800d62a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d62c:	f8d9 5000 	ldr.w	r5, [r9]
 800d630:	6826      	ldr	r6, [r4, #0]
 800d632:	462c      	mov	r4, r5
 800d634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d636:	f105 0114 	add.w	r1, r5, #20
 800d63a:	6026      	str	r6, [r4, #0]
 800d63c:	4650      	mov	r0, sl
 800d63e:	f000 f931 	bl	800d8a4 <rcl_init_options_copy>
 800d642:	4606      	mov	r6, r0
 800d644:	2800      	cmp	r0, #0
 800d646:	d144      	bne.n	800d6d2 <rcl_init+0x132>
 800d648:	f8d9 a000 	ldr.w	sl, [r9]
 800d64c:	463c      	mov	r4, r7
 800d64e:	17fd      	asrs	r5, r7, #31
 800d650:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800d654:	f8ca 0020 	str.w	r0, [sl, #32]
 800d658:	2f00      	cmp	r7, #0
 800d65a:	d050      	beq.n	800d6fe <rcl_init+0x15e>
 800d65c:	f1b8 0f00 	cmp.w	r8, #0
 800d660:	d04d      	beq.n	800d6fe <rcl_init+0x15e>
 800d662:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800d666:	4638      	mov	r0, r7
 800d668:	2104      	movs	r1, #4
 800d66a:	4798      	blx	r3
 800d66c:	f8ca 0020 	str.w	r0, [sl, #32]
 800d670:	f8d9 a000 	ldr.w	sl, [r9]
 800d674:	f8da 3020 	ldr.w	r3, [sl, #32]
 800d678:	46d3      	mov	fp, sl
 800d67a:	b34b      	cbz	r3, 800d6d0 <rcl_init+0x130>
 800d67c:	2f01      	cmp	r7, #1
 800d67e:	f175 0300 	sbcs.w	r3, r5, #0
 800d682:	db3c      	blt.n	800d6fe <rcl_init+0x15e>
 800d684:	f1a8 0804 	sub.w	r8, r8, #4
 800d688:	2600      	movs	r6, #0
 800d68a:	2700      	movs	r7, #0
 800d68c:	e00c      	b.n	800d6a8 <rcl_init+0x108>
 800d68e:	f8d8 1000 	ldr.w	r1, [r8]
 800d692:	f004 f9d8 	bl	8011a46 <memcpy>
 800d696:	3601      	adds	r6, #1
 800d698:	f147 0700 	adc.w	r7, r7, #0
 800d69c:	42bd      	cmp	r5, r7
 800d69e:	bf08      	it	eq
 800d6a0:	42b4      	cmpeq	r4, r6
 800d6a2:	d02a      	beq.n	800d6fa <rcl_init+0x15a>
 800d6a4:	f8d9 b000 	ldr.w	fp, [r9]
 800d6a8:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800d6ac:	f7f2 fda2 	bl	80001f4 <strlen>
 800d6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6b2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800d6b4:	f8db a020 	ldr.w	sl, [fp, #32]
 800d6b8:	9001      	str	r0, [sp, #4]
 800d6ba:	4798      	blx	r3
 800d6bc:	f8d9 1000 	ldr.w	r1, [r9]
 800d6c0:	9a01      	ldr	r2, [sp, #4]
 800d6c2:	6a09      	ldr	r1, [r1, #32]
 800d6c4:	00b3      	lsls	r3, r6, #2
 800d6c6:	f84a 0003 	str.w	r0, [sl, r3]
 800d6ca:	58c8      	ldr	r0, [r1, r3]
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d1de      	bne.n	800d68e <rcl_init+0xee>
 800d6d0:	260a      	movs	r6, #10
 800d6d2:	4648      	mov	r0, r9
 800d6d4:	f7ff fd94 	bl	800d200 <__cleanup_context>
 800d6d8:	4630      	mov	r0, r6
 800d6da:	b01f      	add	sp, #124	@ 0x7c
 800d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e0:	2900      	cmp	r1, #0
 800d6e2:	f43f af73 	beq.w	800d5cc <rcl_init+0x2c>
 800d6e6:	260b      	movs	r6, #11
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	b01f      	add	sp, #124	@ 0x7c
 800d6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f0:	2664      	movs	r6, #100	@ 0x64
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	b01f      	add	sp, #124	@ 0x7c
 800d6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fa:	f8d9 a000 	ldr.w	sl, [r9]
 800d6fe:	4a2c      	ldr	r2, [pc, #176]	@ (800d7b0 <rcl_init+0x210>)
 800d700:	6813      	ldr	r3, [r2, #0]
 800d702:	3301      	adds	r3, #1
 800d704:	d03b      	beq.n	800d77e <rcl_init+0x1de>
 800d706:	6013      	str	r3, [r2, #0]
 800d708:	4619      	mov	r1, r3
 800d70a:	2000      	movs	r0, #0
 800d70c:	f8da 4014 	ldr.w	r4, [sl, #20]
 800d710:	f8c9 3004 	str.w	r3, [r9, #4]
 800d714:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d716:	3301      	adds	r3, #1
 800d718:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800d71c:	d039      	beq.n	800d792 <rcl_init+0x1f2>
 800d71e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800d722:	b94b      	cbnz	r3, 800d738 <rcl_init+0x198>
 800d724:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800d728:	f000 f962 	bl	800d9f0 <rcl_get_localhost_only>
 800d72c:	4606      	mov	r6, r0
 800d72e:	2800      	cmp	r0, #0
 800d730:	d1cf      	bne.n	800d6d2 <rcl_init+0x132>
 800d732:	f8d9 3000 	ldr.w	r3, [r9]
 800d736:	695c      	ldr	r4, [r3, #20]
 800d738:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800d73a:	aa18      	add	r2, sp, #96	@ 0x60
 800d73c:	a917      	add	r1, sp, #92	@ 0x5c
 800d73e:	f000 fd33 	bl	800e1a8 <rcl_validate_enclave_name>
 800d742:	4606      	mov	r6, r0
 800d744:	2800      	cmp	r0, #0
 800d746:	d1c4      	bne.n	800d6d2 <rcl_init+0x132>
 800d748:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d74a:	bb03      	cbnz	r3, 800d78e <rcl_init+0x1ee>
 800d74c:	f8d9 1000 	ldr.w	r1, [r9]
 800d750:	694b      	ldr	r3, [r1, #20]
 800d752:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800d754:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800d758:	f000 fbf2 	bl	800df40 <rcl_get_security_options_from_environment>
 800d75c:	4606      	mov	r6, r0
 800d75e:	2800      	cmp	r0, #0
 800d760:	d1b7      	bne.n	800d6d2 <rcl_init+0x132>
 800d762:	f8d9 1000 	ldr.w	r1, [r9]
 800d766:	6948      	ldr	r0, [r1, #20]
 800d768:	3128      	adds	r1, #40	@ 0x28
 800d76a:	3018      	adds	r0, #24
 800d76c:	f001 f9fe 	bl	800eb6c <rmw_init>
 800d770:	4606      	mov	r6, r0
 800d772:	2800      	cmp	r0, #0
 800d774:	d0b8      	beq.n	800d6e8 <rcl_init+0x148>
 800d776:	f7ff fd1f 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d77a:	4606      	mov	r6, r0
 800d77c:	e7a9      	b.n	800d6d2 <rcl_init+0x132>
 800d77e:	2401      	movs	r4, #1
 800d780:	4618      	mov	r0, r3
 800d782:	4621      	mov	r1, r4
 800d784:	6014      	str	r4, [r2, #0]
 800d786:	4623      	mov	r3, r4
 800d788:	e7c0      	b.n	800d70c <rcl_init+0x16c>
 800d78a:	260a      	movs	r6, #10
 800d78c:	e7ac      	b.n	800d6e8 <rcl_init+0x148>
 800d78e:	2601      	movs	r6, #1
 800d790:	e79f      	b.n	800d6d2 <rcl_init+0x132>
 800d792:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d796:	f003 fab9 	bl	8010d0c <rcl_get_default_domain_id>
 800d79a:	4606      	mov	r6, r0
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d198      	bne.n	800d6d2 <rcl_init+0x132>
 800d7a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	f8d9 3000 	ldr.w	r3, [r9]
 800d7a8:	bf08      	it	eq
 800d7aa:	6260      	streq	r0, [r4, #36]	@ 0x24
 800d7ac:	695c      	ldr	r4, [r3, #20]
 800d7ae:	e7b6      	b.n	800d71e <rcl_init+0x17e>
 800d7b0:	200091f8 	.word	0x200091f8

0800d7b4 <rcl_get_zero_initialized_init_options>:
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	4770      	bx	lr

0800d7b8 <rcl_init_options_init>:
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7bc:	b091      	sub	sp, #68	@ 0x44
 800d7be:	af17      	add	r7, sp, #92	@ 0x5c
 800d7c0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d044      	beq.n	800d852 <rcl_init_options_init+0x9a>
 800d7c8:	6803      	ldr	r3, [r0, #0]
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	b133      	cbz	r3, 800d7dc <rcl_init_options_init+0x24>
 800d7ce:	2464      	movs	r4, #100	@ 0x64
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	b011      	add	sp, #68	@ 0x44
 800d7d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d7d8:	b004      	add	sp, #16
 800d7da:	4770      	bx	lr
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7fb f917 	bl	8008a10 <rcutils_allocator_is_valid>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d035      	beq.n	800d852 <rcl_init_options_init+0x9a>
 800d7e6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7e8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800d7ea:	2050      	movs	r0, #80	@ 0x50
 800d7ec:	4798      	blx	r3
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	6030      	str	r0, [r6, #0]
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d02f      	beq.n	800d856 <rcl_init_options_init+0x9e>
 800d7f6:	46bc      	mov	ip, r7
 800d7f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7fc:	4625      	mov	r5, r4
 800d7fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d800:	f8dc 3000 	ldr.w	r3, [ip]
 800d804:	602b      	str	r3, [r5, #0]
 800d806:	a802      	add	r0, sp, #8
 800d808:	ad02      	add	r5, sp, #8
 800d80a:	f000 ffcd 	bl	800e7a8 <rmw_get_zero_initialized_init_options>
 800d80e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d810:	3418      	adds	r4, #24
 800d812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d81a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d81c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d820:	6833      	ldr	r3, [r6, #0]
 800d822:	e884 0003 	stmia.w	r4, {r0, r1}
 800d826:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800d82a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d82e:	f103 0018 	add.w	r0, r3, #24
 800d832:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d836:	f001 f8bf 	bl	800e9b8 <rmw_init_options_init>
 800d83a:	4604      	mov	r4, r0
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d0c7      	beq.n	800d7d0 <rcl_init_options_init+0x18>
 800d840:	6830      	ldr	r0, [r6, #0]
 800d842:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d844:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800d846:	4798      	blx	r3
 800d848:	4620      	mov	r0, r4
 800d84a:	f7ff fcb5 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d84e:	4604      	mov	r4, r0
 800d850:	e7be      	b.n	800d7d0 <rcl_init_options_init+0x18>
 800d852:	240b      	movs	r4, #11
 800d854:	e7bc      	b.n	800d7d0 <rcl_init_options_init+0x18>
 800d856:	240a      	movs	r4, #10
 800d858:	e7ba      	b.n	800d7d0 <rcl_init_options_init+0x18>
 800d85a:	bf00      	nop

0800d85c <rcl_init_options_fini>:
 800d85c:	b570      	push	{r4, r5, r6, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	b1c0      	cbz	r0, 800d894 <rcl_init_options_fini+0x38>
 800d862:	6804      	ldr	r4, [r0, #0]
 800d864:	4606      	mov	r6, r0
 800d866:	b1ac      	cbz	r4, 800d894 <rcl_init_options_fini+0x38>
 800d868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d86a:	ad01      	add	r5, sp, #4
 800d86c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	602b      	str	r3, [r5, #0]
 800d872:	a801      	add	r0, sp, #4
 800d874:	f7fb f8cc 	bl	8008a10 <rcutils_allocator_is_valid>
 800d878:	b160      	cbz	r0, 800d894 <rcl_init_options_fini+0x38>
 800d87a:	6830      	ldr	r0, [r6, #0]
 800d87c:	3018      	adds	r0, #24
 800d87e:	f001 f935 	bl	800eaec <rmw_init_options_fini>
 800d882:	4604      	mov	r4, r0
 800d884:	b950      	cbnz	r0, 800d89c <rcl_init_options_fini+0x40>
 800d886:	6830      	ldr	r0, [r6, #0]
 800d888:	9b02      	ldr	r3, [sp, #8]
 800d88a:	9905      	ldr	r1, [sp, #20]
 800d88c:	4798      	blx	r3
 800d88e:	4620      	mov	r0, r4
 800d890:	b006      	add	sp, #24
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	240b      	movs	r4, #11
 800d896:	4620      	mov	r0, r4
 800d898:	b006      	add	sp, #24
 800d89a:	bd70      	pop	{r4, r5, r6, pc}
 800d89c:	f7ff fc8c 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	e7f8      	b.n	800d896 <rcl_init_options_fini+0x3a>

0800d8a4 <rcl_init_options_copy>:
 800d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a8:	b096      	sub	sp, #88	@ 0x58
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d063      	beq.n	800d976 <rcl_init_options_copy+0xd2>
 800d8ae:	6806      	ldr	r6, [r0, #0]
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	2e00      	cmp	r6, #0
 800d8b4:	d05f      	beq.n	800d976 <rcl_init_options_copy+0xd2>
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	d05c      	beq.n	800d976 <rcl_init_options_copy+0xd2>
 800d8bc:	680b      	ldr	r3, [r1, #0]
 800d8be:	b123      	cbz	r3, 800d8ca <rcl_init_options_copy+0x26>
 800d8c0:	2664      	movs	r6, #100	@ 0x64
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	b016      	add	sp, #88	@ 0x58
 800d8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d8cc:	af11      	add	r7, sp, #68	@ 0x44
 800d8ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d8d0:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800d8d4:	6833      	ldr	r3, [r6, #0]
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	4640      	mov	r0, r8
 800d8da:	f7fb f899 	bl	8008a10 <rcutils_allocator_is_valid>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d049      	beq.n	800d976 <rcl_init_options_copy+0xd2>
 800d8e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d8e4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800d8e6:	2050      	movs	r0, #80	@ 0x50
 800d8e8:	4798      	blx	r3
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	6020      	str	r0, [r4, #0]
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d077      	beq.n	800d9e2 <rcl_init_options_copy+0x13e>
 800d8f2:	46c4      	mov	ip, r8
 800d8f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d8f8:	4637      	mov	r7, r6
 800d8fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d8fc:	f8dc 3000 	ldr.w	r3, [ip]
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	a802      	add	r0, sp, #8
 800d904:	af02      	add	r7, sp, #8
 800d906:	f000 ff4f 	bl	800e7a8 <rmw_get_zero_initialized_init_options>
 800d90a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d90c:	3618      	adds	r6, #24
 800d90e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d910:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d912:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d914:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d916:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d918:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d91c:	ab16      	add	r3, sp, #88	@ 0x58
 800d91e:	e886 0003 	stmia.w	r6, {r0, r1}
 800d922:	e913 0003 	ldmdb	r3, {r0, r1}
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d92c:	f103 0018 	add.w	r0, r3, #24
 800d930:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800d934:	f001 f840 	bl	800e9b8 <rmw_init_options_init>
 800d938:	4606      	mov	r6, r0
 800d93a:	bb08      	cbnz	r0, 800d980 <rcl_init_options_copy+0xdc>
 800d93c:	682f      	ldr	r7, [r5, #0]
 800d93e:	f8d4 c000 	ldr.w	ip, [r4]
 800d942:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d944:	4666      	mov	r6, ip
 800d946:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	6033      	str	r3, [r6, #0]
 800d94c:	f10c 0018 	add.w	r0, ip, #24
 800d950:	f001 f8cc 	bl	800eaec <rmw_init_options_fini>
 800d954:	4607      	mov	r7, r0
 800d956:	b1f0      	cbz	r0, 800d996 <rcl_init_options_copy+0xf2>
 800d958:	f7fb f868 	bl	8008a2c <rcutils_get_error_string>
 800d95c:	f7fb f87c 	bl	8008a58 <rcutils_reset_error>
 800d960:	4620      	mov	r0, r4
 800d962:	f7ff ff7b 	bl	800d85c <rcl_init_options_fini>
 800d966:	4606      	mov	r6, r0
 800d968:	2800      	cmp	r0, #0
 800d96a:	d1aa      	bne.n	800d8c2 <rcl_init_options_copy+0x1e>
 800d96c:	4638      	mov	r0, r7
 800d96e:	f7ff fc23 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d972:	4606      	mov	r6, r0
 800d974:	e7a5      	b.n	800d8c2 <rcl_init_options_copy+0x1e>
 800d976:	260b      	movs	r6, #11
 800d978:	4630      	mov	r0, r6
 800d97a:	b016      	add	sp, #88	@ 0x58
 800d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d980:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d982:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800d984:	6820      	ldr	r0, [r4, #0]
 800d986:	4798      	blx	r3
 800d988:	4630      	mov	r0, r6
 800d98a:	f7ff fc15 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d98e:	4606      	mov	r6, r0
 800d990:	2800      	cmp	r0, #0
 800d992:	d0d3      	beq.n	800d93c <rcl_init_options_copy+0x98>
 800d994:	e795      	b.n	800d8c2 <rcl_init_options_copy+0x1e>
 800d996:	a802      	add	r0, sp, #8
 800d998:	ae02      	add	r6, sp, #8
 800d99a:	6827      	ldr	r7, [r4, #0]
 800d99c:	f000 ff04 	bl	800e7a8 <rmw_get_zero_initialized_init_options>
 800d9a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d9a2:	3718      	adds	r7, #24
 800d9a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d9a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d9a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d9aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d9ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d9ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d9b2:	682a      	ldr	r2, [r5, #0]
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	e887 0003 	stmia.w	r7, {r0, r1}
 800d9ba:	f102 0018 	add.w	r0, r2, #24
 800d9be:	f103 0118 	add.w	r1, r3, #24
 800d9c2:	f001 f851 	bl	800ea68 <rmw_init_options_copy>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f43f af7a 	beq.w	800d8c2 <rcl_init_options_copy+0x1e>
 800d9ce:	f7fb f82d 	bl	8008a2c <rcutils_get_error_string>
 800d9d2:	f7fb f841 	bl	8008a58 <rcutils_reset_error>
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff ff40 	bl	800d85c <rcl_init_options_fini>
 800d9dc:	b118      	cbz	r0, 800d9e6 <rcl_init_options_copy+0x142>
 800d9de:	4606      	mov	r6, r0
 800d9e0:	e76f      	b.n	800d8c2 <rcl_init_options_copy+0x1e>
 800d9e2:	260a      	movs	r6, #10
 800d9e4:	e76d      	b.n	800d8c2 <rcl_init_options_copy+0x1e>
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f7ff fbe6 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	e768      	b.n	800d8c2 <rcl_init_options_copy+0x1e>

0800d9f0 <rcl_get_localhost_only>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	b1b8      	cbz	r0, 800da2a <rcl_get_localhost_only+0x3a>
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	a901      	add	r1, sp, #4
 800d9fe:	480c      	ldr	r0, [pc, #48]	@ (800da30 <rcl_get_localhost_only+0x40>)
 800da00:	f000 fd4c 	bl	800e49c <rcutils_get_env>
 800da04:	b110      	cbz	r0, 800da0c <rcl_get_localhost_only+0x1c>
 800da06:	2001      	movs	r0, #1
 800da08:	b002      	add	sp, #8
 800da0a:	bd10      	pop	{r4, pc}
 800da0c:	9b01      	ldr	r3, [sp, #4]
 800da0e:	b113      	cbz	r3, 800da16 <rcl_get_localhost_only+0x26>
 800da10:	781a      	ldrb	r2, [r3, #0]
 800da12:	2a31      	cmp	r2, #49	@ 0x31
 800da14:	d004      	beq.n	800da20 <rcl_get_localhost_only+0x30>
 800da16:	2302      	movs	r3, #2
 800da18:	2000      	movs	r0, #0
 800da1a:	7023      	strb	r3, [r4, #0]
 800da1c:	b002      	add	sp, #8
 800da1e:	bd10      	pop	{r4, pc}
 800da20:	785b      	ldrb	r3, [r3, #1]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1f7      	bne.n	800da16 <rcl_get_localhost_only+0x26>
 800da26:	2301      	movs	r3, #1
 800da28:	e7f6      	b.n	800da18 <rcl_get_localhost_only+0x28>
 800da2a:	200b      	movs	r0, #11
 800da2c:	b002      	add	sp, #8
 800da2e:	bd10      	pop	{r4, pc}
 800da30:	08012a24 	.word	0x08012a24

0800da34 <rcl_get_zero_initialized_node>:
 800da34:	4a03      	ldr	r2, [pc, #12]	@ (800da44 <rcl_get_zero_initialized_node+0x10>)
 800da36:	4603      	mov	r3, r0
 800da38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da3c:	e883 0003 	stmia.w	r3, {r0, r1}
 800da40:	4618      	mov	r0, r3
 800da42:	4770      	bx	lr
 800da44:	08012a44 	.word	0x08012a44

0800da48 <rcl_node_init>:
 800da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	b09b      	sub	sp, #108	@ 0x6c
 800da4e:	4604      	mov	r4, r0
 800da50:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 800da54:	f04f 0c00 	mov.w	ip, #0
 800da58:	a815      	add	r0, sp, #84	@ 0x54
 800da5a:	460e      	mov	r6, r1
 800da5c:	4615      	mov	r5, r2
 800da5e:	461f      	mov	r7, r3
 800da60:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 800da64:	f003 fa0e 	bl	8010e84 <rcl_guard_condition_get_default_options>
 800da68:	f1b8 0f00 	cmp.w	r8, #0
 800da6c:	f000 80fd 	beq.w	800dc6a <rcl_node_init+0x222>
 800da70:	f108 0b04 	add.w	fp, r8, #4
 800da74:	4658      	mov	r0, fp
 800da76:	f7fa ffcb 	bl	8008a10 <rcutils_allocator_is_valid>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f000 80f5 	beq.w	800dc6a <rcl_node_init+0x222>
 800da80:	2e00      	cmp	r6, #0
 800da82:	f000 80f2 	beq.w	800dc6a <rcl_node_init+0x222>
 800da86:	2d00      	cmp	r5, #0
 800da88:	f000 80ef 	beq.w	800dc6a <rcl_node_init+0x222>
 800da8c:	2c00      	cmp	r4, #0
 800da8e:	f000 80ec 	beq.w	800dc6a <rcl_node_init+0x222>
 800da92:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800da96:	f1b9 0f00 	cmp.w	r9, #0
 800da9a:	f040 8112 	bne.w	800dcc2 <rcl_node_init+0x27a>
 800da9e:	2f00      	cmp	r7, #0
 800daa0:	f000 80e3 	beq.w	800dc6a <rcl_node_init+0x222>
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff fba5 	bl	800d1f4 <rcl_context_is_valid>
 800daaa:	4682      	mov	sl, r0
 800daac:	2800      	cmp	r0, #0
 800daae:	f000 80e2 	beq.w	800dc76 <rcl_node_init+0x22e>
 800dab2:	464a      	mov	r2, r9
 800dab4:	a914      	add	r1, sp, #80	@ 0x50
 800dab6:	4630      	mov	r0, r6
 800dab8:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 800dabc:	f000 fef4 	bl	800e8a8 <rmw_validate_node_name>
 800dac0:	4681      	mov	r9, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	f040 80d3 	bne.w	800dc6e <rcl_node_init+0x226>
 800dac8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800daca:	2800      	cmp	r0, #0
 800dacc:	f040 8105 	bne.w	800dcda <rcl_node_init+0x292>
 800dad0:	4628      	mov	r0, r5
 800dad2:	f7f2 fb8f 	bl	80001f4 <strlen>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	f040 80d0 	bne.w	800dc7c <rcl_node_init+0x234>
 800dadc:	4d8e      	ldr	r5, [pc, #568]	@ (800dd18 <rcl_node_init+0x2d0>)
 800dade:	a914      	add	r1, sp, #80	@ 0x50
 800dae0:	2200      	movs	r2, #0
 800dae2:	4628      	mov	r0, r5
 800dae4:	f000 fec2 	bl	800e86c <rmw_validate_namespace>
 800dae8:	4681      	mov	r9, r0
 800daea:	2800      	cmp	r0, #0
 800daec:	f040 80bf 	bne.w	800dc6e <rcl_node_init+0x226>
 800daf0:	4682      	mov	sl, r0
 800daf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f040 80f5 	bne.w	800dce4 <rcl_node_init+0x29c>
 800dafa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800dafe:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800db02:	9307      	str	r3, [sp, #28]
 800db04:	2030      	movs	r0, #48	@ 0x30
 800db06:	4790      	blx	r2
 800db08:	4681      	mov	r9, r0
 800db0a:	6060      	str	r0, [r4, #4]
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f000 80de 	beq.w	800dcce <rcl_node_init+0x286>
 800db12:	9b07      	ldr	r3, [sp, #28]
 800db14:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800db18:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800db1c:	a80a      	add	r0, sp, #40	@ 0x28
 800db1e:	f000 f92b 	bl	800dd78 <rcl_node_get_default_options>
 800db22:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 800db26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db2a:	46cc      	mov	ip, r9
 800db2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db30:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800db34:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800db38:	6861      	ldr	r1, [r4, #4]
 800db3a:	6027      	str	r7, [r4, #0]
 800db3c:	4640      	mov	r0, r8
 800db3e:	f000 f937 	bl	800ddb0 <rcl_node_options_copy>
 800db42:	2800      	cmp	r0, #0
 800db44:	d167      	bne.n	800dc16 <rcl_node_init+0x1ce>
 800db46:	4628      	mov	r0, r5
 800db48:	f7f2 fb54 	bl	80001f4 <strlen>
 800db4c:	4428      	add	r0, r5
 800db4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db52:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800db56:	2b2f      	cmp	r3, #47	@ 0x2f
 800db58:	bf08      	it	eq
 800db5a:	4970      	ldreq	r1, [pc, #448]	@ (800dd1c <rcl_node_init+0x2d4>)
 800db5c:	f8db 3010 	ldr.w	r3, [fp, #16]
 800db60:	bf18      	it	ne
 800db62:	496f      	ldrne	r1, [pc, #444]	@ (800dd20 <rcl_node_init+0x2d8>)
 800db64:	9604      	str	r6, [sp, #16]
 800db66:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800db6a:	e9cd 3200 	strd	r3, r2, [sp]
 800db6e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800db72:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800db76:	f000 fc57 	bl	800e428 <rcutils_format_string_limit>
 800db7a:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 800db7e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800db82:	f8d9 3000 	ldr.w	r3, [r9]
 800db86:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db88:	1c59      	adds	r1, r3, #1
 800db8a:	f000 80b7 	beq.w	800dcfc <rcl_node_init+0x2b4>
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	f8c9 301c 	str.w	r3, [r9, #28]
 800db94:	6952      	ldr	r2, [r2, #20]
 800db96:	6821      	ldr	r1, [r4, #0]
 800db98:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800db9c:	6808      	ldr	r0, [r1, #0]
 800db9e:	f1a2 0201 	sub.w	r2, r2, #1
 800dba2:	fab2 f282 	clz	r2, r2
 800dba6:	0952      	lsrs	r2, r2, #5
 800dba8:	9200      	str	r2, [sp, #0]
 800dbaa:	4631      	mov	r1, r6
 800dbac:	3028      	adds	r0, #40	@ 0x28
 800dbae:	462a      	mov	r2, r5
 800dbb0:	f001 fa32 	bl	800f018 <rmw_create_node>
 800dbb4:	6863      	ldr	r3, [r4, #4]
 800dbb6:	f8c9 0020 	str.w	r0, [r9, #32]
 800dbba:	6a18      	ldr	r0, [r3, #32]
 800dbbc:	b368      	cbz	r0, 800dc1a <rcl_node_init+0x1d2>
 800dbbe:	f001 fabf 	bl	800f140 <rmw_node_get_graph_guard_condition>
 800dbc2:	4681      	mov	r9, r0
 800dbc4:	b338      	cbz	r0, 800dc16 <rcl_node_init+0x1ce>
 800dbc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbca:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dbce:	6866      	ldr	r6, [r4, #4]
 800dbd0:	2008      	movs	r0, #8
 800dbd2:	4798      	blx	r3
 800dbd4:	6863      	ldr	r3, [r4, #4]
 800dbd6:	6270      	str	r0, [r6, #36]	@ 0x24
 800dbd8:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800dbda:	b1f6      	cbz	r6, 800dc1a <rcl_node_init+0x1d2>
 800dbdc:	a808      	add	r0, sp, #32
 800dbde:	f003 f8c9 	bl	8010d74 <rcl_get_zero_initialized_guard_condition>
 800dbe2:	a808      	add	r0, sp, #32
 800dbe4:	c803      	ldmia	r0, {r0, r1}
 800dbe6:	e886 0003 	stmia.w	r6, {r0, r1}
 800dbea:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800dbee:	ae15      	add	r6, sp, #84	@ 0x54
 800dbf0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dbf2:	f8db 3000 	ldr.w	r3, [fp]
 800dbf6:	6033      	str	r3, [r6, #0]
 800dbf8:	ab1a      	add	r3, sp, #104	@ 0x68
 800dbfa:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800dbfe:	6866      	ldr	r6, [r4, #4]
 800dc00:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 800dc02:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc06:	4649      	mov	r1, r9
 800dc08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	463a      	mov	r2, r7
 800dc0e:	f003 f8bb 	bl	8010d88 <rcl_guard_condition_init_from_rmw>
 800dc12:	4681      	mov	r9, r0
 800dc14:	b328      	cbz	r0, 800dc62 <rcl_node_init+0x21a>
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	b1f3      	cbz	r3, 800dc58 <rcl_node_init+0x210>
 800dc1a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800dc1c:	b128      	cbz	r0, 800dc2a <rcl_node_init+0x1e2>
 800dc1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc22:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dc26:	4798      	blx	r3
 800dc28:	6863      	ldr	r3, [r4, #4]
 800dc2a:	6a18      	ldr	r0, [r3, #32]
 800dc2c:	b110      	cbz	r0, 800dc34 <rcl_node_init+0x1ec>
 800dc2e:	f001 fa0b 	bl	800f048 <rmw_destroy_node>
 800dc32:	6863      	ldr	r3, [r4, #4]
 800dc34:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800dc36:	b148      	cbz	r0, 800dc4c <rcl_node_init+0x204>
 800dc38:	f003 f8fe 	bl	8010e38 <rcl_guard_condition_fini>
 800dc3c:	6862      	ldr	r2, [r4, #4]
 800dc3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc42:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800dc44:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dc48:	4798      	blx	r3
 800dc4a:	6863      	ldr	r3, [r4, #4]
 800dc4c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800dc50:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dc54:	4618      	mov	r0, r3
 800dc56:	4790      	blx	r2
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e9c4 3300 	strd	r3, r3, [r4]
 800dc5e:	f04f 0901 	mov.w	r9, #1
 800dc62:	f1ba 0f00 	cmp.w	sl, #0
 800dc66:	d125      	bne.n	800dcb4 <rcl_node_init+0x26c>
 800dc68:	e001      	b.n	800dc6e <rcl_node_init+0x226>
 800dc6a:	f04f 090b 	mov.w	r9, #11
 800dc6e:	4648      	mov	r0, r9
 800dc70:	b01b      	add	sp, #108	@ 0x6c
 800dc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc76:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800dc7a:	e7f8      	b.n	800dc6e <rcl_node_init+0x226>
 800dc7c:	782b      	ldrb	r3, [r5, #0]
 800dc7e:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc80:	f43f af2d 	beq.w	800dade <rcl_node_init+0x96>
 800dc84:	4927      	ldr	r1, [pc, #156]	@ (800dd24 <rcl_node_init+0x2dc>)
 800dc86:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dc90:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800dc94:	9503      	str	r5, [sp, #12]
 800dc96:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800dc9a:	f000 fbc5 	bl	800e428 <rcutils_format_string_limit>
 800dc9e:	4605      	mov	r5, r0
 800dca0:	b348      	cbz	r0, 800dcf6 <rcl_node_init+0x2ae>
 800dca2:	2200      	movs	r2, #0
 800dca4:	a914      	add	r1, sp, #80	@ 0x50
 800dca6:	9214      	str	r2, [sp, #80]	@ 0x50
 800dca8:	f000 fde0 	bl	800e86c <rmw_validate_namespace>
 800dcac:	4681      	mov	r9, r0
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	f43f af1f 	beq.w	800daf2 <rcl_node_init+0xaa>
 800dcb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcb8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	4798      	blx	r3
 800dcc0:	e7d5      	b.n	800dc6e <rcl_node_init+0x226>
 800dcc2:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800dcc6:	4648      	mov	r0, r9
 800dcc8:	b01b      	add	sp, #108	@ 0x6c
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	f04f 090a 	mov.w	r9, #10
 800dcd2:	f1ba 0f00 	cmp.w	sl, #0
 800dcd6:	d1ed      	bne.n	800dcb4 <rcl_node_init+0x26c>
 800dcd8:	e7c9      	b.n	800dc6e <rcl_node_init+0x226>
 800dcda:	f000 fe37 	bl	800e94c <rmw_node_name_validation_result_string>
 800dcde:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800dce2:	e7c4      	b.n	800dc6e <rcl_node_init+0x226>
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 fdd3 	bl	800e890 <rmw_namespace_validation_result_string>
 800dcea:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800dcee:	f1ba 0f00 	cmp.w	sl, #0
 800dcf2:	d1df      	bne.n	800dcb4 <rcl_node_init+0x26c>
 800dcf4:	e7bb      	b.n	800dc6e <rcl_node_init+0x226>
 800dcf6:	f04f 090a 	mov.w	r9, #10
 800dcfa:	e7b8      	b.n	800dc6e <rcl_node_init+0x226>
 800dcfc:	a813      	add	r0, sp, #76	@ 0x4c
 800dcfe:	f003 f805 	bl	8010d0c <rcl_get_default_domain_id>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d187      	bne.n	800dc16 <rcl_node_init+0x1ce>
 800dd06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd08:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	bf04      	itt	eq
 800dd10:	9013      	streq	r0, [sp, #76]	@ 0x4c
 800dd12:	4603      	moveq	r3, r0
 800dd14:	e73b      	b.n	800db8e <rcl_node_init+0x146>
 800dd16:	bf00      	nop
 800dd18:	08012a3c 	.word	0x08012a3c
 800dd1c:	080129c8 	.word	0x080129c8
 800dd20:	08012a00 	.word	0x08012a00
 800dd24:	08012a40 	.word	0x08012a40

0800dd28 <rcl_node_is_valid>:
 800dd28:	b130      	cbz	r0, 800dd38 <rcl_node_is_valid+0x10>
 800dd2a:	6843      	ldr	r3, [r0, #4]
 800dd2c:	b123      	cbz	r3, 800dd38 <rcl_node_is_valid+0x10>
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	b113      	cbz	r3, 800dd38 <rcl_node_is_valid+0x10>
 800dd32:	6800      	ldr	r0, [r0, #0]
 800dd34:	f7ff ba5e 	b.w	800d1f4 <rcl_context_is_valid>
 800dd38:	2000      	movs	r0, #0
 800dd3a:	4770      	bx	lr

0800dd3c <rcl_node_get_name>:
 800dd3c:	b120      	cbz	r0, 800dd48 <rcl_node_get_name+0xc>
 800dd3e:	6840      	ldr	r0, [r0, #4]
 800dd40:	b110      	cbz	r0, 800dd48 <rcl_node_get_name+0xc>
 800dd42:	6a00      	ldr	r0, [r0, #32]
 800dd44:	b100      	cbz	r0, 800dd48 <rcl_node_get_name+0xc>
 800dd46:	6880      	ldr	r0, [r0, #8]
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop

0800dd4c <rcl_node_get_namespace>:
 800dd4c:	b120      	cbz	r0, 800dd58 <rcl_node_get_namespace+0xc>
 800dd4e:	6840      	ldr	r0, [r0, #4]
 800dd50:	b110      	cbz	r0, 800dd58 <rcl_node_get_namespace+0xc>
 800dd52:	6a00      	ldr	r0, [r0, #32]
 800dd54:	b100      	cbz	r0, 800dd58 <rcl_node_get_namespace+0xc>
 800dd56:	68c0      	ldr	r0, [r0, #12]
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop

0800dd5c <rcl_node_get_options>:
 800dd5c:	b128      	cbz	r0, 800dd6a <rcl_node_get_options+0xe>
 800dd5e:	6840      	ldr	r0, [r0, #4]
 800dd60:	b118      	cbz	r0, 800dd6a <rcl_node_get_options+0xe>
 800dd62:	6a03      	ldr	r3, [r0, #32]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bf08      	it	eq
 800dd68:	2000      	moveq	r0, #0
 800dd6a:	4770      	bx	lr

0800dd6c <rcl_node_get_rmw_handle>:
 800dd6c:	b110      	cbz	r0, 800dd74 <rcl_node_get_rmw_handle+0x8>
 800dd6e:	6840      	ldr	r0, [r0, #4]
 800dd70:	b100      	cbz	r0, 800dd74 <rcl_node_get_rmw_handle+0x8>
 800dd72:	6a00      	ldr	r0, [r0, #32]
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop

0800dd78 <rcl_node_get_default_options>:
 800dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	466d      	mov	r5, sp
 800dd80:	4668      	mov	r0, sp
 800dd82:	f7fa fe37 	bl	80089f4 <rcutils_get_default_allocator>
 800dd86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd88:	4c08      	ldr	r4, [pc, #32]	@ (800ddac <rcl_node_get_default_options+0x34>)
 800dd8a:	f8d5 c000 	ldr.w	ip, [r5]
 800dd8e:	1d26      	adds	r6, r4, #4
 800dd90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dd92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd94:	463d      	mov	r5, r7
 800dd96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd98:	f8c6 c000 	str.w	ip, [r6]
 800dd9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800dda0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800dda4:	4638      	mov	r0, r7
 800dda6:	b007      	add	sp, #28
 800dda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	20000054 	.word	0x20000054

0800ddb0 <rcl_node_options_copy>:
 800ddb0:	b1c8      	cbz	r0, 800dde6 <rcl_node_options_copy+0x36>
 800ddb2:	b4f0      	push	{r4, r5, r6, r7}
 800ddb4:	460f      	mov	r7, r1
 800ddb6:	b199      	cbz	r1, 800dde0 <rcl_node_options_copy+0x30>
 800ddb8:	4288      	cmp	r0, r1
 800ddba:	4606      	mov	r6, r0
 800ddbc:	d010      	beq.n	800dde0 <rcl_node_options_copy+0x30>
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddc6:	f844 3b04 	str.w	r3, [r4], #4
 800ddca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddce:	7e32      	ldrb	r2, [r6, #24]
 800ddd0:	6829      	ldr	r1, [r5, #0]
 800ddd2:	7e73      	ldrb	r3, [r6, #25]
 800ddd4:	6021      	str	r1, [r4, #0]
 800ddd6:	2000      	movs	r0, #0
 800ddd8:	763a      	strb	r2, [r7, #24]
 800ddda:	767b      	strb	r3, [r7, #25]
 800dddc:	bcf0      	pop	{r4, r5, r6, r7}
 800ddde:	4770      	bx	lr
 800dde0:	200b      	movs	r0, #11
 800dde2:	bcf0      	pop	{r4, r5, r6, r7}
 800dde4:	4770      	bx	lr
 800dde6:	200b      	movs	r0, #11
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop

0800ddec <exact_match_lookup>:
 800ddec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddee:	f102 0708 	add.w	r7, r2, #8
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4614      	mov	r4, r2
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ddfc:	b085      	sub	sp, #20
 800ddfe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800de02:	4618      	mov	r0, r3
 800de04:	4918      	ldr	r1, [pc, #96]	@ (800de68 <exact_match_lookup+0x7c>)
 800de06:	e894 000c 	ldmia.w	r4, {r2, r3}
 800de0a:	f000 faff 	bl	800e40c <rcutils_join_path>
 800de0e:	7833      	ldrb	r3, [r6, #0]
 800de10:	2b2f      	cmp	r3, #47	@ 0x2f
 800de12:	4605      	mov	r5, r0
 800de14:	d021      	beq.n	800de5a <exact_match_lookup+0x6e>
 800de16:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800de1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800de1e:	1c70      	adds	r0, r6, #1
 800de20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800de24:	f000 faf8 	bl	800e418 <rcutils_to_native_path>
 800de28:	4606      	mov	r6, r0
 800de2a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800de2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800de32:	4631      	mov	r1, r6
 800de34:	e894 000c 	ldmia.w	r4, {r2, r3}
 800de38:	4628      	mov	r0, r5
 800de3a:	f000 fae7 	bl	800e40c <rcutils_join_path>
 800de3e:	6862      	ldr	r2, [r4, #4]
 800de40:	6921      	ldr	r1, [r4, #16]
 800de42:	4603      	mov	r3, r0
 800de44:	4630      	mov	r0, r6
 800de46:	461e      	mov	r6, r3
 800de48:	4790      	blx	r2
 800de4a:	4628      	mov	r0, r5
 800de4c:	6863      	ldr	r3, [r4, #4]
 800de4e:	6921      	ldr	r1, [r4, #16]
 800de50:	4798      	blx	r3
 800de52:	4635      	mov	r5, r6
 800de54:	4628      	mov	r0, r5
 800de56:	b005      	add	sp, #20
 800de58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de5a:	7873      	ldrb	r3, [r6, #1]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1da      	bne.n	800de16 <exact_match_lookup+0x2a>
 800de60:	4628      	mov	r0, r5
 800de62:	b005      	add	sp, #20
 800de64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de66:	bf00      	nop
 800de68:	08012a88 	.word	0x08012a88

0800de6c <rcl_get_secure_root>:
 800de6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de70:	b085      	sub	sp, #20
 800de72:	b168      	cbz	r0, 800de90 <rcl_get_secure_root+0x24>
 800de74:	4607      	mov	r7, r0
 800de76:	4608      	mov	r0, r1
 800de78:	460c      	mov	r4, r1
 800de7a:	f7fa fdc9 	bl	8008a10 <rcutils_allocator_is_valid>
 800de7e:	b138      	cbz	r0, 800de90 <rcl_get_secure_root+0x24>
 800de80:	2300      	movs	r3, #0
 800de82:	482d      	ldr	r0, [pc, #180]	@ (800df38 <rcl_get_secure_root+0xcc>)
 800de84:	9303      	str	r3, [sp, #12]
 800de86:	a903      	add	r1, sp, #12
 800de88:	f000 fb08 	bl	800e49c <rcutils_get_env>
 800de8c:	4605      	mov	r5, r0
 800de8e:	b120      	cbz	r0, 800de9a <rcl_get_secure_root+0x2e>
 800de90:	2500      	movs	r5, #0
 800de92:	4628      	mov	r0, r5
 800de94:	b005      	add	sp, #20
 800de96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de9a:	9b03      	ldr	r3, [sp, #12]
 800de9c:	781a      	ldrb	r2, [r3, #0]
 800de9e:	2a00      	cmp	r2, #0
 800dea0:	d0f6      	beq.n	800de90 <rcl_get_secure_root+0x24>
 800dea2:	f104 090c 	add.w	r9, r4, #12
 800dea6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800deaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800deae:	4618      	mov	r0, r3
 800deb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800deb4:	f000 fbe2 	bl	800e67c <rcutils_strdup>
 800deb8:	4680      	mov	r8, r0
 800deba:	2800      	cmp	r0, #0
 800debc:	d0e8      	beq.n	800de90 <rcl_get_secure_root+0x24>
 800debe:	481f      	ldr	r0, [pc, #124]	@ (800df3c <rcl_get_secure_root+0xd0>)
 800dec0:	9503      	str	r5, [sp, #12]
 800dec2:	a903      	add	r1, sp, #12
 800dec4:	f000 faea 	bl	800e49c <rcutils_get_env>
 800dec8:	b160      	cbz	r0, 800dee4 <rcl_get_secure_root+0x78>
 800deca:	2600      	movs	r6, #0
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	6921      	ldr	r1, [r4, #16]
 800ded0:	4630      	mov	r0, r6
 800ded2:	4798      	blx	r3
 800ded4:	4640      	mov	r0, r8
 800ded6:	6863      	ldr	r3, [r4, #4]
 800ded8:	6921      	ldr	r1, [r4, #16]
 800deda:	4798      	blx	r3
 800dedc:	4628      	mov	r0, r5
 800dede:	b005      	add	sp, #20
 800dee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	781e      	ldrb	r6, [r3, #0]
 800dee8:	b1f6      	cbz	r6, 800df28 <rcl_get_secure_root+0xbc>
 800deea:	e899 0003 	ldmia.w	r9, {r0, r1}
 800deee:	e88d 0003 	stmia.w	sp, {r0, r1}
 800def2:	4618      	mov	r0, r3
 800def4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800def8:	f000 fbc0 	bl	800e67c <rcutils_strdup>
 800defc:	4606      	mov	r6, r0
 800defe:	2800      	cmp	r0, #0
 800df00:	d0e3      	beq.n	800deca <rcl_get_secure_root+0x5e>
 800df02:	4622      	mov	r2, r4
 800df04:	4641      	mov	r1, r8
 800df06:	f7ff ff71 	bl	800ddec <exact_match_lookup>
 800df0a:	4605      	mov	r5, r0
 800df0c:	2d00      	cmp	r5, #0
 800df0e:	d0dd      	beq.n	800decc <rcl_get_secure_root+0x60>
 800df10:	4628      	mov	r0, r5
 800df12:	f000 fa79 	bl	800e408 <rcutils_is_directory>
 800df16:	4607      	mov	r7, r0
 800df18:	2800      	cmp	r0, #0
 800df1a:	d1d7      	bne.n	800decc <rcl_get_secure_root+0x60>
 800df1c:	4628      	mov	r0, r5
 800df1e:	6863      	ldr	r3, [r4, #4]
 800df20:	6921      	ldr	r1, [r4, #16]
 800df22:	4798      	blx	r3
 800df24:	463d      	mov	r5, r7
 800df26:	e7d1      	b.n	800decc <rcl_get_secure_root+0x60>
 800df28:	4638      	mov	r0, r7
 800df2a:	4622      	mov	r2, r4
 800df2c:	4641      	mov	r1, r8
 800df2e:	f7ff ff5d 	bl	800ddec <exact_match_lookup>
 800df32:	4605      	mov	r5, r0
 800df34:	e7ea      	b.n	800df0c <rcl_get_secure_root+0xa0>
 800df36:	bf00      	nop
 800df38:	08012a94 	.word	0x08012a94
 800df3c:	08012aac 	.word	0x08012aac

0800df40 <rcl_get_security_options_from_environment>:
 800df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df44:	b082      	sub	sp, #8
 800df46:	4607      	mov	r7, r0
 800df48:	4688      	mov	r8, r1
 800df4a:	2400      	movs	r4, #0
 800df4c:	481d      	ldr	r0, [pc, #116]	@ (800dfc4 <rcl_get_security_options_from_environment+0x84>)
 800df4e:	9401      	str	r4, [sp, #4]
 800df50:	a901      	add	r1, sp, #4
 800df52:	4616      	mov	r6, r2
 800df54:	f000 faa2 	bl	800e49c <rcutils_get_env>
 800df58:	b120      	cbz	r0, 800df64 <rcl_get_security_options_from_environment+0x24>
 800df5a:	2501      	movs	r5, #1
 800df5c:	4628      	mov	r0, r5
 800df5e:	b002      	add	sp, #8
 800df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df64:	4918      	ldr	r1, [pc, #96]	@ (800dfc8 <rcl_get_security_options_from_environment+0x88>)
 800df66:	4604      	mov	r4, r0
 800df68:	9801      	ldr	r0, [sp, #4]
 800df6a:	f7f2 f939 	bl	80001e0 <strcmp>
 800df6e:	4605      	mov	r5, r0
 800df70:	b9c8      	cbnz	r0, 800dfa6 <rcl_get_security_options_from_environment+0x66>
 800df72:	9001      	str	r0, [sp, #4]
 800df74:	b1ee      	cbz	r6, 800dfb2 <rcl_get_security_options_from_environment+0x72>
 800df76:	4815      	ldr	r0, [pc, #84]	@ (800dfcc <rcl_get_security_options_from_environment+0x8c>)
 800df78:	a901      	add	r1, sp, #4
 800df7a:	f000 fa8f 	bl	800e49c <rcutils_get_env>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d1eb      	bne.n	800df5a <rcl_get_security_options_from_environment+0x1a>
 800df82:	4913      	ldr	r1, [pc, #76]	@ (800dfd0 <rcl_get_security_options_from_environment+0x90>)
 800df84:	9801      	ldr	r0, [sp, #4]
 800df86:	f7f2 f92b 	bl	80001e0 <strcmp>
 800df8a:	fab0 f080 	clz	r0, r0
 800df8e:	0940      	lsrs	r0, r0, #5
 800df90:	7030      	strb	r0, [r6, #0]
 800df92:	4641      	mov	r1, r8
 800df94:	4638      	mov	r0, r7
 800df96:	f7ff ff69 	bl	800de6c <rcl_get_secure_root>
 800df9a:	b160      	cbz	r0, 800dfb6 <rcl_get_security_options_from_environment+0x76>
 800df9c:	6070      	str	r0, [r6, #4]
 800df9e:	4628      	mov	r0, r5
 800dfa0:	b002      	add	sp, #8
 800dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa6:	4625      	mov	r5, r4
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	7034      	strb	r4, [r6, #0]
 800dfac:	b002      	add	sp, #8
 800dfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb2:	250b      	movs	r5, #11
 800dfb4:	e7d2      	b.n	800df5c <rcl_get_security_options_from_environment+0x1c>
 800dfb6:	7835      	ldrb	r5, [r6, #0]
 800dfb8:	f1a5 0501 	sub.w	r5, r5, #1
 800dfbc:	fab5 f585 	clz	r5, r5
 800dfc0:	096d      	lsrs	r5, r5, #5
 800dfc2:	e7cb      	b.n	800df5c <rcl_get_security_options_from_environment+0x1c>
 800dfc4:	08012a4c 	.word	0x08012a4c
 800dfc8:	08012a60 	.word	0x08012a60
 800dfcc:	08012a68 	.word	0x08012a68
 800dfd0:	08012a80 	.word	0x08012a80

0800dfd4 <rcl_get_system_time>:
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	f000 bb8f 	b.w	800e6f8 <rcutils_system_time_now>
 800dfda:	bf00      	nop

0800dfdc <rcl_get_steady_time>:
 800dfdc:	4608      	mov	r0, r1
 800dfde:	f000 bbb3 	b.w	800e748 <rcutils_steady_time_now>
 800dfe2:	bf00      	nop

0800dfe4 <rcl_get_ros_time>:
 800dfe4:	7a03      	ldrb	r3, [r0, #8]
 800dfe6:	b510      	push	{r4, lr}
 800dfe8:	460c      	mov	r4, r1
 800dfea:	b133      	cbz	r3, 800dffa <rcl_get_ros_time+0x16>
 800dfec:	2105      	movs	r1, #5
 800dfee:	f000 f9d7 	bl	800e3a0 <__atomic_load_8>
 800dff2:	e9c4 0100 	strd	r0, r1, [r4]
 800dff6:	2000      	movs	r0, #0
 800dff8:	bd10      	pop	{r4, pc}
 800dffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dffe:	4608      	mov	r0, r1
 800e000:	f000 bb7a 	b.w	800e6f8 <rcutils_system_time_now>

0800e004 <rcl_clock_init>:
 800e004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e008:	4606      	mov	r6, r0
 800e00a:	4610      	mov	r0, r2
 800e00c:	4614      	mov	r4, r2
 800e00e:	460d      	mov	r5, r1
 800e010:	f7fa fcfe 	bl	8008a10 <rcutils_allocator_is_valid>
 800e014:	b128      	cbz	r0, 800e022 <rcl_clock_init+0x1e>
 800e016:	2e03      	cmp	r6, #3
 800e018:	d803      	bhi.n	800e022 <rcl_clock_init+0x1e>
 800e01a:	e8df f006 	tbb	[pc, r6]
 800e01e:	2c1b      	.short	0x2c1b
 800e020:	0554      	.short	0x0554
 800e022:	200b      	movs	r0, #11
 800e024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e028:	2d00      	cmp	r5, #0
 800e02a:	d0fa      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e02c:	2c00      	cmp	r4, #0
 800e02e:	d0f8      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e030:	2600      	movs	r6, #0
 800e032:	702e      	strb	r6, [r5, #0]
 800e034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e036:	f105 0714 	add.w	r7, r5, #20
 800e03a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e03e:	612e      	str	r6, [r5, #16]
 800e040:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	603b      	str	r3, [r7, #0]
 800e046:	2303      	movs	r3, #3
 800e048:	4a2b      	ldr	r2, [pc, #172]	@ (800e0f8 <rcl_clock_init+0xf4>)
 800e04a:	702b      	strb	r3, [r5, #0]
 800e04c:	4630      	mov	r0, r6
 800e04e:	60ea      	str	r2, [r5, #12]
 800e050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e054:	2d00      	cmp	r5, #0
 800e056:	d0e4      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e058:	2600      	movs	r6, #0
 800e05a:	702e      	strb	r6, [r5, #0]
 800e05c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e05e:	f105 0714 	add.w	r7, r5, #20
 800e062:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e066:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800e06a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	4630      	mov	r0, r6
 800e072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e076:	2d00      	cmp	r5, #0
 800e078:	d0d3      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e07a:	2c00      	cmp	r4, #0
 800e07c:	d0d1      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e07e:	2600      	movs	r6, #0
 800e080:	702e      	strb	r6, [r5, #0]
 800e082:	46a4      	mov	ip, r4
 800e084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e088:	f105 0714 	add.w	r7, r5, #20
 800e08c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e090:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800e094:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e096:	f8dc 3000 	ldr.w	r3, [ip]
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	6921      	ldr	r1, [r4, #16]
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	2010      	movs	r0, #16
 800e0a2:	4798      	blx	r3
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	6128      	str	r0, [r5, #16]
 800e0a8:	b318      	cbz	r0, 800e0f2 <rcl_clock_init+0xee>
 800e0aa:	f04f 0800 	mov.w	r8, #0
 800e0ae:	f04f 0900 	mov.w	r9, #0
 800e0b2:	7206      	strb	r6, [r0, #8]
 800e0b4:	e9c3 8900 	strd	r8, r9, [r3]
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	4a10      	ldr	r2, [pc, #64]	@ (800e0fc <rcl_clock_init+0xf8>)
 800e0bc:	702b      	strb	r3, [r5, #0]
 800e0be:	4630      	mov	r0, r6
 800e0c0:	60ea      	str	r2, [r5, #12]
 800e0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c6:	2d00      	cmp	r5, #0
 800e0c8:	d0ab      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e0ca:	2c00      	cmp	r4, #0
 800e0cc:	d0a9      	beq.n	800e022 <rcl_clock_init+0x1e>
 800e0ce:	2600      	movs	r6, #0
 800e0d0:	702e      	strb	r6, [r5, #0]
 800e0d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0d4:	f105 0714 	add.w	r7, r5, #20
 800e0d8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e0dc:	612e      	str	r6, [r5, #16]
 800e0de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	603b      	str	r3, [r7, #0]
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	4a06      	ldr	r2, [pc, #24]	@ (800e100 <rcl_clock_init+0xfc>)
 800e0e8:	702b      	strb	r3, [r5, #0]
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	60ea      	str	r2, [r5, #12]
 800e0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f2:	200a      	movs	r0, #10
 800e0f4:	e796      	b.n	800e024 <rcl_clock_init+0x20>
 800e0f6:	bf00      	nop
 800e0f8:	0800dfdd 	.word	0x0800dfdd
 800e0fc:	0800dfe5 	.word	0x0800dfe5
 800e100:	0800dfd5 	.word	0x0800dfd5

0800e104 <rcl_validate_enclave_name_with_size>:
 800e104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e106:	b0c3      	sub	sp, #268	@ 0x10c
 800e108:	b1d0      	cbz	r0, 800e140 <rcl_validate_enclave_name_with_size+0x3c>
 800e10a:	4615      	mov	r5, r2
 800e10c:	b1c2      	cbz	r2, 800e140 <rcl_validate_enclave_name_with_size+0x3c>
 800e10e:	461f      	mov	r7, r3
 800e110:	466a      	mov	r2, sp
 800e112:	ab01      	add	r3, sp, #4
 800e114:	460e      	mov	r6, r1
 800e116:	f000 fb5b 	bl	800e7d0 <rmw_validate_namespace_with_size>
 800e11a:	4604      	mov	r4, r0
 800e11c:	b9e0      	cbnz	r0, 800e158 <rcl_validate_enclave_name_with_size+0x54>
 800e11e:	9b00      	ldr	r3, [sp, #0]
 800e120:	b923      	cbnz	r3, 800e12c <rcl_validate_enclave_name_with_size+0x28>
 800e122:	2300      	movs	r3, #0
 800e124:	602b      	str	r3, [r5, #0]
 800e126:	4620      	mov	r0, r4
 800e128:	b043      	add	sp, #268	@ 0x10c
 800e12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e12c:	2b07      	cmp	r3, #7
 800e12e:	d00b      	beq.n	800e148 <rcl_validate_enclave_name_with_size+0x44>
 800e130:	1e5a      	subs	r2, r3, #1
 800e132:	2a05      	cmp	r2, #5
 800e134:	d82e      	bhi.n	800e194 <rcl_validate_enclave_name_with_size+0x90>
 800e136:	e8df f002 	tbb	[pc, r2]
 800e13a:	211e      	.short	0x211e
 800e13c:	152a2724 	.word	0x152a2724
 800e140:	240b      	movs	r4, #11
 800e142:	4620      	mov	r0, r4
 800e144:	b043      	add	sp, #268	@ 0x10c
 800e146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e148:	2eff      	cmp	r6, #255	@ 0xff
 800e14a:	d9ea      	bls.n	800e122 <rcl_validate_enclave_name_with_size+0x1e>
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	2f00      	cmp	r7, #0
 800e150:	d0e9      	beq.n	800e126 <rcl_validate_enclave_name_with_size+0x22>
 800e152:	23fe      	movs	r3, #254	@ 0xfe
 800e154:	603b      	str	r3, [r7, #0]
 800e156:	e7e6      	b.n	800e126 <rcl_validate_enclave_name_with_size+0x22>
 800e158:	f7ff f82e 	bl	800d1b8 <rcl_convert_rmw_ret_to_rcl_ret>
 800e15c:	4604      	mov	r4, r0
 800e15e:	4620      	mov	r0, r4
 800e160:	b043      	add	sp, #268	@ 0x10c
 800e162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e164:	2306      	movs	r3, #6
 800e166:	602b      	str	r3, [r5, #0]
 800e168:	2f00      	cmp	r7, #0
 800e16a:	d0dc      	beq.n	800e126 <rcl_validate_enclave_name_with_size+0x22>
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	603b      	str	r3, [r7, #0]
 800e170:	4620      	mov	r0, r4
 800e172:	b043      	add	sp, #268	@ 0x10c
 800e174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e176:	2301      	movs	r3, #1
 800e178:	602b      	str	r3, [r5, #0]
 800e17a:	e7f5      	b.n	800e168 <rcl_validate_enclave_name_with_size+0x64>
 800e17c:	2302      	movs	r3, #2
 800e17e:	602b      	str	r3, [r5, #0]
 800e180:	e7f2      	b.n	800e168 <rcl_validate_enclave_name_with_size+0x64>
 800e182:	2303      	movs	r3, #3
 800e184:	602b      	str	r3, [r5, #0]
 800e186:	e7ef      	b.n	800e168 <rcl_validate_enclave_name_with_size+0x64>
 800e188:	2304      	movs	r3, #4
 800e18a:	602b      	str	r3, [r5, #0]
 800e18c:	e7ec      	b.n	800e168 <rcl_validate_enclave_name_with_size+0x64>
 800e18e:	2305      	movs	r3, #5
 800e190:	602b      	str	r3, [r5, #0]
 800e192:	e7e9      	b.n	800e168 <rcl_validate_enclave_name_with_size+0x64>
 800e194:	4a03      	ldr	r2, [pc, #12]	@ (800e1a4 <rcl_validate_enclave_name_with_size+0xa0>)
 800e196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e19a:	a802      	add	r0, sp, #8
 800e19c:	f000 fa42 	bl	800e624 <rcutils_snprintf>
 800e1a0:	2401      	movs	r4, #1
 800e1a2:	e7c0      	b.n	800e126 <rcl_validate_enclave_name_with_size+0x22>
 800e1a4:	08012acc 	.word	0x08012acc

0800e1a8 <rcl_validate_enclave_name>:
 800e1a8:	b168      	cbz	r0, 800e1c6 <rcl_validate_enclave_name+0x1e>
 800e1aa:	b570      	push	{r4, r5, r6, lr}
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	4616      	mov	r6, r2
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	f7f2 f81f 	bl	80001f4 <strlen>
 800e1b6:	4633      	mov	r3, r6
 800e1b8:	4601      	mov	r1, r0
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4620      	mov	r0, r4
 800e1be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1c2:	f7ff bf9f 	b.w	800e104 <rcl_validate_enclave_name_with_size>
 800e1c6:	200b      	movs	r0, #11
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop

0800e1cc <rcl_validate_topic_name>:
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	f000 808b 	beq.w	800e2e8 <rcl_validate_topic_name+0x11c>
 800e1d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d6:	460e      	mov	r6, r1
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	f000 808c 	beq.w	800e2f6 <rcl_validate_topic_name+0x12a>
 800e1de:	4617      	mov	r7, r2
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	f7f2 f807 	bl	80001f4 <strlen>
 800e1e6:	b1b0      	cbz	r0, 800e216 <rcl_validate_topic_name+0x4a>
 800e1e8:	f895 9000 	ldrb.w	r9, [r5]
 800e1ec:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800e39c <rcl_validate_topic_name+0x1d0>
 800e1f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800e1f4:	f013 0304 	ands.w	r3, r3, #4
 800e1f8:	d178      	bne.n	800e2ec <rcl_validate_topic_name+0x120>
 800e1fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800e1fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 800e202:	2a2f      	cmp	r2, #47	@ 0x2f
 800e204:	d10e      	bne.n	800e224 <rcl_validate_topic_name+0x58>
 800e206:	2202      	movs	r2, #2
 800e208:	6032      	str	r2, [r6, #0]
 800e20a:	b36f      	cbz	r7, 800e268 <rcl_validate_topic_name+0x9c>
 800e20c:	f8c7 8000 	str.w	r8, [r7]
 800e210:	4618      	mov	r0, r3
 800e212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e216:	2301      	movs	r3, #1
 800e218:	6033      	str	r3, [r6, #0]
 800e21a:	b32f      	cbz	r7, 800e268 <rcl_validate_topic_name+0x9c>
 800e21c:	2000      	movs	r0, #0
 800e21e:	6038      	str	r0, [r7, #0]
 800e220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e224:	461c      	mov	r4, r3
 800e226:	4619      	mov	r1, r3
 800e228:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800e22c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800e230:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e234:	f1be 0f09 	cmp.w	lr, #9
 800e238:	d946      	bls.n	800e2c8 <rcl_validate_topic_name+0xfc>
 800e23a:	f022 0e20 	bic.w	lr, r2, #32
 800e23e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800e242:	f1be 0f19 	cmp.w	lr, #25
 800e246:	d93f      	bls.n	800e2c8 <rcl_validate_topic_name+0xfc>
 800e248:	2a5f      	cmp	r2, #95	@ 0x5f
 800e24a:	d014      	beq.n	800e276 <rcl_validate_topic_name+0xaa>
 800e24c:	2a2f      	cmp	r2, #47	@ 0x2f
 800e24e:	d05b      	beq.n	800e308 <rcl_validate_topic_name+0x13c>
 800e250:	2a7e      	cmp	r2, #126	@ 0x7e
 800e252:	d052      	beq.n	800e2fa <rcl_validate_topic_name+0x12e>
 800e254:	2a7b      	cmp	r2, #123	@ 0x7b
 800e256:	d00a      	beq.n	800e26e <rcl_validate_topic_name+0xa2>
 800e258:	2a7d      	cmp	r2, #125	@ 0x7d
 800e25a:	d16f      	bne.n	800e33c <rcl_validate_topic_name+0x170>
 800e25c:	2c00      	cmp	r4, #0
 800e25e:	d15e      	bne.n	800e31e <rcl_validate_topic_name+0x152>
 800e260:	2305      	movs	r3, #5
 800e262:	6033      	str	r3, [r6, #0]
 800e264:	b107      	cbz	r7, 800e268 <rcl_validate_topic_name+0x9c>
 800e266:	6039      	str	r1, [r7, #0]
 800e268:	2000      	movs	r0, #0
 800e26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26e:	2c00      	cmp	r4, #0
 800e270:	d14c      	bne.n	800e30c <rcl_validate_topic_name+0x140>
 800e272:	460b      	mov	r3, r1
 800e274:	2401      	movs	r4, #1
 800e276:	3101      	adds	r1, #1
 800e278:	4288      	cmp	r0, r1
 800e27a:	d1d7      	bne.n	800e22c <rcl_validate_topic_name+0x60>
 800e27c:	2c00      	cmp	r4, #0
 800e27e:	d156      	bne.n	800e32e <rcl_validate_topic_name+0x162>
 800e280:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800e284:	4620      	mov	r0, r4
 800e286:	d061      	beq.n	800e34c <rcl_validate_topic_name+0x180>
 800e288:	f108 0e01 	add.w	lr, r8, #1
 800e28c:	e007      	b.n	800e29e <rcl_validate_topic_name+0xd2>
 800e28e:	2801      	cmp	r0, #1
 800e290:	d047      	beq.n	800e322 <rcl_validate_topic_name+0x156>
 800e292:	461a      	mov	r2, r3
 800e294:	4291      	cmp	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f105 0501 	add.w	r5, r5, #1
 800e29c:	d944      	bls.n	800e328 <rcl_validate_topic_name+0x15c>
 800e29e:	4580      	cmp	r8, r0
 800e2a0:	f100 0301 	add.w	r3, r0, #1
 800e2a4:	d037      	beq.n	800e316 <rcl_validate_topic_name+0x14a>
 800e2a6:	782a      	ldrb	r2, [r5, #0]
 800e2a8:	2a2f      	cmp	r2, #47	@ 0x2f
 800e2aa:	d1f0      	bne.n	800e28e <rcl_validate_topic_name+0xc2>
 800e2ac:	786b      	ldrb	r3, [r5, #1]
 800e2ae:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	0760      	lsls	r0, r4, #29
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	d5ec      	bpl.n	800e294 <rcl_validate_topic_name+0xc8>
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	6033      	str	r3, [r6, #0]
 800e2be:	2f00      	cmp	r7, #0
 800e2c0:	d0d2      	beq.n	800e268 <rcl_validate_topic_name+0x9c>
 800e2c2:	603a      	str	r2, [r7, #0]
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	e7ab      	b.n	800e220 <rcl_validate_topic_name+0x54>
 800e2c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800e2cc:	0752      	lsls	r2, r2, #29
 800e2ce:	d5d2      	bpl.n	800e276 <rcl_validate_topic_name+0xaa>
 800e2d0:	2c00      	cmp	r4, #0
 800e2d2:	d0d0      	beq.n	800e276 <rcl_validate_topic_name+0xaa>
 800e2d4:	2900      	cmp	r1, #0
 800e2d6:	d0ce      	beq.n	800e276 <rcl_validate_topic_name+0xaa>
 800e2d8:	1e4a      	subs	r2, r1, #1
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d1cb      	bne.n	800e276 <rcl_validate_topic_name+0xaa>
 800e2de:	2309      	movs	r3, #9
 800e2e0:	6033      	str	r3, [r6, #0]
 800e2e2:	2f00      	cmp	r7, #0
 800e2e4:	d1bf      	bne.n	800e266 <rcl_validate_topic_name+0x9a>
 800e2e6:	e7bf      	b.n	800e268 <rcl_validate_topic_name+0x9c>
 800e2e8:	200b      	movs	r0, #11
 800e2ea:	4770      	bx	lr
 800e2ec:	2304      	movs	r3, #4
 800e2ee:	6033      	str	r3, [r6, #0]
 800e2f0:	2f00      	cmp	r7, #0
 800e2f2:	d193      	bne.n	800e21c <rcl_validate_topic_name+0x50>
 800e2f4:	e7b8      	b.n	800e268 <rcl_validate_topic_name+0x9c>
 800e2f6:	200b      	movs	r0, #11
 800e2f8:	e792      	b.n	800e220 <rcl_validate_topic_name+0x54>
 800e2fa:	2900      	cmp	r1, #0
 800e2fc:	d0bb      	beq.n	800e276 <rcl_validate_topic_name+0xaa>
 800e2fe:	2306      	movs	r3, #6
 800e300:	6033      	str	r3, [r6, #0]
 800e302:	2f00      	cmp	r7, #0
 800e304:	d1af      	bne.n	800e266 <rcl_validate_topic_name+0x9a>
 800e306:	e7af      	b.n	800e268 <rcl_validate_topic_name+0x9c>
 800e308:	2c00      	cmp	r4, #0
 800e30a:	d0b4      	beq.n	800e276 <rcl_validate_topic_name+0xaa>
 800e30c:	2308      	movs	r3, #8
 800e30e:	6033      	str	r3, [r6, #0]
 800e310:	2f00      	cmp	r7, #0
 800e312:	d1a8      	bne.n	800e266 <rcl_validate_topic_name+0x9a>
 800e314:	e7a8      	b.n	800e268 <rcl_validate_topic_name+0x9c>
 800e316:	4672      	mov	r2, lr
 800e318:	f108 0301 	add.w	r3, r8, #1
 800e31c:	e7ba      	b.n	800e294 <rcl_validate_topic_name+0xc8>
 800e31e:	2400      	movs	r4, #0
 800e320:	e7a9      	b.n	800e276 <rcl_validate_topic_name+0xaa>
 800e322:	2202      	movs	r2, #2
 800e324:	4613      	mov	r3, r2
 800e326:	e7b5      	b.n	800e294 <rcl_validate_topic_name+0xc8>
 800e328:	2000      	movs	r0, #0
 800e32a:	6030      	str	r0, [r6, #0]
 800e32c:	e778      	b.n	800e220 <rcl_validate_topic_name+0x54>
 800e32e:	2205      	movs	r2, #5
 800e330:	6032      	str	r2, [r6, #0]
 800e332:	2f00      	cmp	r7, #0
 800e334:	d098      	beq.n	800e268 <rcl_validate_topic_name+0x9c>
 800e336:	603b      	str	r3, [r7, #0]
 800e338:	2000      	movs	r0, #0
 800e33a:	e771      	b.n	800e220 <rcl_validate_topic_name+0x54>
 800e33c:	2c00      	cmp	r4, #0
 800e33e:	bf14      	ite	ne
 800e340:	2308      	movne	r3, #8
 800e342:	2303      	moveq	r3, #3
 800e344:	6033      	str	r3, [r6, #0]
 800e346:	2f00      	cmp	r7, #0
 800e348:	d18d      	bne.n	800e266 <rcl_validate_topic_name+0x9a>
 800e34a:	e78d      	b.n	800e268 <rcl_validate_topic_name+0x9c>
 800e34c:	f108 0401 	add.w	r4, r8, #1
 800e350:	e007      	b.n	800e362 <rcl_validate_topic_name+0x196>
 800e352:	2801      	cmp	r0, #1
 800e354:	d019      	beq.n	800e38a <rcl_validate_topic_name+0x1be>
 800e356:	461a      	mov	r2, r3
 800e358:	4291      	cmp	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f105 0501 	add.w	r5, r5, #1
 800e360:	d9e2      	bls.n	800e328 <rcl_validate_topic_name+0x15c>
 800e362:	4580      	cmp	r8, r0
 800e364:	f100 0301 	add.w	r3, r0, #1
 800e368:	d00b      	beq.n	800e382 <rcl_validate_topic_name+0x1b6>
 800e36a:	782a      	ldrb	r2, [r5, #0]
 800e36c:	2a2f      	cmp	r2, #47	@ 0x2f
 800e36e:	d1f0      	bne.n	800e352 <rcl_validate_topic_name+0x186>
 800e370:	786b      	ldrb	r3, [r5, #1]
 800e372:	f81c e003 	ldrb.w	lr, [ip, r3]
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	f01e 0f04 	tst.w	lr, #4
 800e37c:	461a      	mov	r2, r3
 800e37e:	d0eb      	beq.n	800e358 <rcl_validate_topic_name+0x18c>
 800e380:	e79b      	b.n	800e2ba <rcl_validate_topic_name+0xee>
 800e382:	4622      	mov	r2, r4
 800e384:	f108 0301 	add.w	r3, r8, #1
 800e388:	e7e6      	b.n	800e358 <rcl_validate_topic_name+0x18c>
 800e38a:	2307      	movs	r3, #7
 800e38c:	6033      	str	r3, [r6, #0]
 800e38e:	2f00      	cmp	r7, #0
 800e390:	f43f af6a 	beq.w	800e268 <rcl_validate_topic_name+0x9c>
 800e394:	6038      	str	r0, [r7, #0]
 800e396:	2000      	movs	r0, #0
 800e398:	e742      	b.n	800e220 <rcl_validate_topic_name+0x54>
 800e39a:	bf00      	nop
 800e39c:	08013120 	.word	0x08013120

0800e3a0 <__atomic_load_8>:
 800e3a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e3a4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800e3a8:	4b14      	ldr	r3, [pc, #80]	@ (800e3fc <__atomic_load_8+0x5c>)
 800e3aa:	4a15      	ldr	r2, [pc, #84]	@ (800e400 <__atomic_load_8+0x60>)
 800e3ac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e3b0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e3b4:	fb03 f301 	mul.w	r3, r3, r1
 800e3b8:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800e3bc:	fba2 1203 	umull	r1, r2, r2, r3
 800e3c0:	0912      	lsrs	r2, r2, #4
 800e3c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e3c6:	b430      	push	{r4, r5}
 800e3c8:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800e3cc:	4c0d      	ldr	r4, [pc, #52]	@ (800e404 <__atomic_load_8+0x64>)
 800e3ce:	1a9b      	subs	r3, r3, r2
 800e3d0:	18e1      	adds	r1, r4, r3
 800e3d2:	f04f 0501 	mov.w	r5, #1
 800e3d6:	e8d1 2f4f 	ldrexb	r2, [r1]
 800e3da:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800e3de:	f1bc 0f00 	cmp.w	ip, #0
 800e3e2:	d1f8      	bne.n	800e3d6 <__atomic_load_8+0x36>
 800e3e4:	f3bf 8f5b 	dmb	ish
 800e3e8:	b2d2      	uxtb	r2, r2
 800e3ea:	2a00      	cmp	r2, #0
 800e3ec:	d1f3      	bne.n	800e3d6 <__atomic_load_8+0x36>
 800e3ee:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e3f2:	f3bf 8f5b 	dmb	ish
 800e3f6:	54e2      	strb	r2, [r4, r3]
 800e3f8:	bc30      	pop	{r4, r5}
 800e3fa:	4770      	bx	lr
 800e3fc:	27d4eb2d 	.word	0x27d4eb2d
 800e400:	b21642c9 	.word	0xb21642c9
 800e404:	200091fc 	.word	0x200091fc

0800e408 <rcutils_is_directory>:
 800e408:	2000      	movs	r0, #0
 800e40a:	4770      	bx	lr

0800e40c <rcutils_join_path>:
 800e40c:	b082      	sub	sp, #8
 800e40e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e412:	2000      	movs	r0, #0
 800e414:	b002      	add	sp, #8
 800e416:	4770      	bx	lr

0800e418 <rcutils_to_native_path>:
 800e418:	b084      	sub	sp, #16
 800e41a:	a801      	add	r0, sp, #4
 800e41c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e420:	b004      	add	sp, #16
 800e422:	2000      	movs	r0, #0
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop

0800e428 <rcutils_format_string_limit>:
 800e428:	b40f      	push	{r0, r1, r2, r3}
 800e42a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e42c:	b083      	sub	sp, #12
 800e42e:	ac08      	add	r4, sp, #32
 800e430:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e436:	b34e      	cbz	r6, 800e48c <rcutils_format_string_limit+0x64>
 800e438:	a808      	add	r0, sp, #32
 800e43a:	f7fa fae9 	bl	8008a10 <rcutils_allocator_is_valid>
 800e43e:	b328      	cbz	r0, 800e48c <rcutils_format_string_limit+0x64>
 800e440:	2100      	movs	r1, #0
 800e442:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e444:	4608      	mov	r0, r1
 800e446:	4632      	mov	r2, r6
 800e448:	e9cd 3300 	strd	r3, r3, [sp]
 800e44c:	f000 f904 	bl	800e658 <rcutils_vsnprintf>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	4605      	mov	r5, r0
 800e454:	d01a      	beq.n	800e48c <rcutils_format_string_limit+0x64>
 800e456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e458:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e45a:	1c47      	adds	r7, r0, #1
 800e45c:	429f      	cmp	r7, r3
 800e45e:	bf84      	itt	hi
 800e460:	461f      	movhi	r7, r3
 800e462:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800e466:	4638      	mov	r0, r7
 800e468:	9b08      	ldr	r3, [sp, #32]
 800e46a:	4798      	blx	r3
 800e46c:	4604      	mov	r4, r0
 800e46e:	b168      	cbz	r0, 800e48c <rcutils_format_string_limit+0x64>
 800e470:	9b01      	ldr	r3, [sp, #4]
 800e472:	4632      	mov	r2, r6
 800e474:	4639      	mov	r1, r7
 800e476:	f000 f8ef 	bl	800e658 <rcutils_vsnprintf>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	db02      	blt.n	800e484 <rcutils_format_string_limit+0x5c>
 800e47e:	2300      	movs	r3, #0
 800e480:	5563      	strb	r3, [r4, r5]
 800e482:	e004      	b.n	800e48e <rcutils_format_string_limit+0x66>
 800e484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e486:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e488:	4620      	mov	r0, r4
 800e48a:	4798      	blx	r3
 800e48c:	2400      	movs	r4, #0
 800e48e:	4620      	mov	r0, r4
 800e490:	b003      	add	sp, #12
 800e492:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e496:	b004      	add	sp, #16
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop

0800e49c <rcutils_get_env>:
 800e49c:	b168      	cbz	r0, 800e4ba <rcutils_get_env+0x1e>
 800e49e:	b510      	push	{r4, lr}
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	b129      	cbz	r1, 800e4b0 <rcutils_get_env+0x14>
 800e4a4:	f002 fe74 	bl	8011190 <getenv>
 800e4a8:	b120      	cbz	r0, 800e4b4 <rcutils_get_env+0x18>
 800e4aa:	6020      	str	r0, [r4, #0]
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	bd10      	pop	{r4, pc}
 800e4b0:	4803      	ldr	r0, [pc, #12]	@ (800e4c0 <rcutils_get_env+0x24>)
 800e4b2:	bd10      	pop	{r4, pc}
 800e4b4:	4b03      	ldr	r3, [pc, #12]	@ (800e4c4 <rcutils_get_env+0x28>)
 800e4b6:	6023      	str	r3, [r4, #0]
 800e4b8:	bd10      	pop	{r4, pc}
 800e4ba:	4803      	ldr	r0, [pc, #12]	@ (800e4c8 <rcutils_get_env+0x2c>)
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	08012b48 	.word	0x08012b48
 800e4c4:	08012c6c 	.word	0x08012c6c
 800e4c8:	08012b2c 	.word	0x08012b2c

0800e4cc <rcutils_repl_str>:
 800e4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d0:	ed2d 8b02 	vpush	{d8}
 800e4d4:	b087      	sub	sp, #28
 800e4d6:	4680      	mov	r8, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	f8cd 8000 	str.w	r8, [sp]
 800e4de:	ee08 2a10 	vmov	s16, r2
 800e4e2:	468a      	mov	sl, r1
 800e4e4:	4699      	mov	r9, r3
 800e4e6:	f7f1 fe85 	bl	80001f4 <strlen>
 800e4ea:	2600      	movs	r6, #0
 800e4ec:	4647      	mov	r7, r8
 800e4ee:	9001      	str	r0, [sp, #4]
 800e4f0:	46b3      	mov	fp, r6
 800e4f2:	2510      	movs	r5, #16
 800e4f4:	46b0      	mov	r8, r6
 800e4f6:	e01d      	b.n	800e534 <rcutils_repl_str+0x68>
 800e4f8:	f10b 0b01 	add.w	fp, fp, #1
 800e4fc:	455e      	cmp	r6, fp
 800e4fe:	d211      	bcs.n	800e524 <rcutils_repl_str+0x58>
 800e500:	442e      	add	r6, r5
 800e502:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e506:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e50a:	00b1      	lsls	r1, r6, #2
 800e50c:	4798      	blx	r3
 800e50e:	2800      	cmp	r0, #0
 800e510:	f000 8084 	beq.w	800e61c <rcutils_repl_str+0x150>
 800e514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e518:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e51c:	bf28      	it	cs
 800e51e:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e522:	4680      	mov	r8, r0
 800e524:	9a00      	ldr	r2, [sp, #0]
 800e526:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e52a:	1aa2      	subs	r2, r4, r2
 800e52c:	f843 2c04 	str.w	r2, [r3, #-4]
 800e530:	9b01      	ldr	r3, [sp, #4]
 800e532:	18e7      	adds	r7, r4, r3
 800e534:	4651      	mov	r1, sl
 800e536:	4638      	mov	r0, r7
 800e538:	f003 f9e3 	bl	8011902 <strstr>
 800e53c:	4604      	mov	r4, r0
 800e53e:	4640      	mov	r0, r8
 800e540:	2c00      	cmp	r4, #0
 800e542:	d1d9      	bne.n	800e4f8 <rcutils_repl_str+0x2c>
 800e544:	46b8      	mov	r8, r7
 800e546:	4607      	mov	r7, r0
 800e548:	4640      	mov	r0, r8
 800e54a:	f7f1 fe53 	bl	80001f4 <strlen>
 800e54e:	9b00      	ldr	r3, [sp, #0]
 800e550:	eba8 0303 	sub.w	r3, r8, r3
 800e554:	181d      	adds	r5, r3, r0
 800e556:	9504      	str	r5, [sp, #16]
 800e558:	f1bb 0f00 	cmp.w	fp, #0
 800e55c:	d03d      	beq.n	800e5da <rcutils_repl_str+0x10e>
 800e55e:	ee18 0a10 	vmov	r0, s16
 800e562:	f7f1 fe47 	bl	80001f4 <strlen>
 800e566:	9b01      	ldr	r3, [sp, #4]
 800e568:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e56c:	1ac3      	subs	r3, r0, r3
 800e56e:	fb0b 5303 	mla	r3, fp, r3, r5
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	4606      	mov	r6, r0
 800e576:	1c58      	adds	r0, r3, #1
 800e578:	f8d9 3000 	ldr.w	r3, [r9]
 800e57c:	4798      	blx	r3
 800e57e:	9003      	str	r0, [sp, #12]
 800e580:	2800      	cmp	r0, #0
 800e582:	d04c      	beq.n	800e61e <rcutils_repl_str+0x152>
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	9900      	ldr	r1, [sp, #0]
 800e588:	f003 fa5d 	bl	8011a46 <memcpy>
 800e58c:	9b03      	ldr	r3, [sp, #12]
 800e58e:	683d      	ldr	r5, [r7, #0]
 800e590:	ee18 8a10 	vmov	r8, s16
 800e594:	441d      	add	r5, r3
 800e596:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 800e59a:	9302      	str	r3, [sp, #8]
 800e59c:	46ba      	mov	sl, r7
 800e59e:	4632      	mov	r2, r6
 800e5a0:	4641      	mov	r1, r8
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f003 fa4f 	bl	8011a46 <memcpy>
 800e5a8:	9b01      	ldr	r3, [sp, #4]
 800e5aa:	f85a 2b04 	ldr.w	r2, [sl], #4
 800e5ae:	441a      	add	r2, r3
 800e5b0:	9b00      	ldr	r3, [sp, #0]
 800e5b2:	1899      	adds	r1, r3, r2
 800e5b4:	9b02      	ldr	r3, [sp, #8]
 800e5b6:	4435      	add	r5, r6
 800e5b8:	429c      	cmp	r4, r3
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	d025      	beq.n	800e60a <rcutils_repl_str+0x13e>
 800e5be:	f8da 3000 	ldr.w	r3, [sl]
 800e5c2:	3401      	adds	r4, #1
 800e5c4:	1a9a      	subs	r2, r3, r2
 800e5c6:	4415      	add	r5, r2
 800e5c8:	f003 fa3d 	bl	8011a46 <memcpy>
 800e5cc:	455c      	cmp	r4, fp
 800e5ce:	d3e6      	bcc.n	800e59e <rcutils_repl_str+0xd2>
 800e5d0:	9a03      	ldr	r2, [sp, #12]
 800e5d2:	9905      	ldr	r1, [sp, #20]
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	5453      	strb	r3, [r2, r1]
 800e5d8:	e00b      	b.n	800e5f2 <rcutils_repl_str+0x126>
 800e5da:	4628      	mov	r0, r5
 800e5dc:	f8d9 3000 	ldr.w	r3, [r9]
 800e5e0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	4798      	blx	r3
 800e5e8:	9003      	str	r0, [sp, #12]
 800e5ea:	b110      	cbz	r0, 800e5f2 <rcutils_repl_str+0x126>
 800e5ec:	9900      	ldr	r1, [sp, #0]
 800e5ee:	f003 fa22 	bl	8011a36 <strcpy>
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e5f8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e5fc:	4798      	blx	r3
 800e5fe:	9803      	ldr	r0, [sp, #12]
 800e600:	b007      	add	sp, #28
 800e602:	ecbd 8b02 	vpop	{d8}
 800e606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60a:	9b04      	ldr	r3, [sp, #16]
 800e60c:	3401      	adds	r4, #1
 800e60e:	1a9a      	subs	r2, r3, r2
 800e610:	4415      	add	r5, r2
 800e612:	f003 fa18 	bl	8011a46 <memcpy>
 800e616:	455c      	cmp	r4, fp
 800e618:	d3c1      	bcc.n	800e59e <rcutils_repl_str+0xd2>
 800e61a:	e7d9      	b.n	800e5d0 <rcutils_repl_str+0x104>
 800e61c:	4647      	mov	r7, r8
 800e61e:	2300      	movs	r3, #0
 800e620:	9303      	str	r3, [sp, #12]
 800e622:	e7e6      	b.n	800e5f2 <rcutils_repl_str+0x126>

0800e624 <rcutils_snprintf>:
 800e624:	b40c      	push	{r2, r3}
 800e626:	b530      	push	{r4, r5, lr}
 800e628:	b083      	sub	sp, #12
 800e62a:	ab06      	add	r3, sp, #24
 800e62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e630:	9301      	str	r3, [sp, #4]
 800e632:	b152      	cbz	r2, 800e64a <rcutils_snprintf+0x26>
 800e634:	b138      	cbz	r0, 800e646 <rcutils_snprintf+0x22>
 800e636:	b141      	cbz	r1, 800e64a <rcutils_snprintf+0x26>
 800e638:	f003 f92e 	bl	8011898 <vsniprintf>
 800e63c:	b003      	add	sp, #12
 800e63e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e642:	b002      	add	sp, #8
 800e644:	4770      	bx	lr
 800e646:	2900      	cmp	r1, #0
 800e648:	d0f6      	beq.n	800e638 <rcutils_snprintf+0x14>
 800e64a:	f003 f9c7 	bl	80119dc <__errno>
 800e64e:	2316      	movs	r3, #22
 800e650:	6003      	str	r3, [r0, #0]
 800e652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e656:	e7f1      	b.n	800e63c <rcutils_snprintf+0x18>

0800e658 <rcutils_vsnprintf>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	b13a      	cbz	r2, 800e66c <rcutils_vsnprintf+0x14>
 800e65c:	b120      	cbz	r0, 800e668 <rcutils_vsnprintf+0x10>
 800e65e:	b129      	cbz	r1, 800e66c <rcutils_vsnprintf+0x14>
 800e660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e664:	f003 b918 	b.w	8011898 <vsniprintf>
 800e668:	2900      	cmp	r1, #0
 800e66a:	d0f9      	beq.n	800e660 <rcutils_vsnprintf+0x8>
 800e66c:	f003 f9b6 	bl	80119dc <__errno>
 800e670:	2316      	movs	r3, #22
 800e672:	6003      	str	r3, [r0, #0]
 800e674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e678:	bd70      	pop	{r4, r5, r6, pc}
 800e67a:	bf00      	nop

0800e67c <rcutils_strdup>:
 800e67c:	b084      	sub	sp, #16
 800e67e:	b570      	push	{r4, r5, r6, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	ac07      	add	r4, sp, #28
 800e684:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e688:	4605      	mov	r5, r0
 800e68a:	b1b0      	cbz	r0, 800e6ba <rcutils_strdup+0x3e>
 800e68c:	f7f1 fdb2 	bl	80001f4 <strlen>
 800e690:	1c42      	adds	r2, r0, #1
 800e692:	9b07      	ldr	r3, [sp, #28]
 800e694:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e696:	9201      	str	r2, [sp, #4]
 800e698:	4606      	mov	r6, r0
 800e69a:	4610      	mov	r0, r2
 800e69c:	4798      	blx	r3
 800e69e:	4604      	mov	r4, r0
 800e6a0:	b128      	cbz	r0, 800e6ae <rcutils_strdup+0x32>
 800e6a2:	9a01      	ldr	r2, [sp, #4]
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	f003 f9ce 	bl	8011a46 <memcpy>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	55a3      	strb	r3, [r4, r6]
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	b002      	add	sp, #8
 800e6b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6b6:	b004      	add	sp, #16
 800e6b8:	4770      	bx	lr
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	e7f7      	b.n	800e6ae <rcutils_strdup+0x32>
 800e6be:	bf00      	nop

0800e6c0 <rcutils_strndup>:
 800e6c0:	b082      	sub	sp, #8
 800e6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c4:	460e      	mov	r6, r1
 800e6c6:	a906      	add	r1, sp, #24
 800e6c8:	e881 000c 	stmia.w	r1, {r2, r3}
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	b180      	cbz	r0, 800e6f2 <rcutils_strndup+0x32>
 800e6d0:	1c77      	adds	r7, r6, #1
 800e6d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e6d4:	4638      	mov	r0, r7
 800e6d6:	4790      	blx	r2
 800e6d8:	4604      	mov	r4, r0
 800e6da:	b128      	cbz	r0, 800e6e8 <rcutils_strndup+0x28>
 800e6dc:	463a      	mov	r2, r7
 800e6de:	4629      	mov	r1, r5
 800e6e0:	f003 f9b1 	bl	8011a46 <memcpy>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	55a3      	strb	r3, [r4, r6]
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6ee:	b002      	add	sp, #8
 800e6f0:	4770      	bx	lr
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	e7f8      	b.n	800e6e8 <rcutils_strndup+0x28>
 800e6f6:	bf00      	nop

0800e6f8 <rcutils_system_time_now>:
 800e6f8:	b310      	cbz	r0, 800e740 <rcutils_system_time_now+0x48>
 800e6fa:	b570      	push	{r4, r5, r6, lr}
 800e6fc:	b084      	sub	sp, #16
 800e6fe:	4669      	mov	r1, sp
 800e700:	4604      	mov	r4, r0
 800e702:	2001      	movs	r0, #1
 800e704:	f7f2 ff5c 	bl	80015c0 <clock_gettime>
 800e708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e70c:	2800      	cmp	r0, #0
 800e70e:	f171 0300 	sbcs.w	r3, r1, #0
 800e712:	db12      	blt.n	800e73a <rcutils_system_time_now+0x42>
 800e714:	9d02      	ldr	r5, [sp, #8]
 800e716:	2d00      	cmp	r5, #0
 800e718:	db0c      	blt.n	800e734 <rcutils_system_time_now+0x3c>
 800e71a:	4e0a      	ldr	r6, [pc, #40]	@ (800e744 <rcutils_system_time_now+0x4c>)
 800e71c:	fba0 2306 	umull	r2, r3, r0, r6
 800e720:	1952      	adds	r2, r2, r5
 800e722:	fb06 3301 	mla	r3, r6, r1, r3
 800e726:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800e72a:	2000      	movs	r0, #0
 800e72c:	e9c4 2300 	strd	r2, r3, [r4]
 800e730:	b004      	add	sp, #16
 800e732:	bd70      	pop	{r4, r5, r6, pc}
 800e734:	ea50 0301 	orrs.w	r3, r0, r1
 800e738:	d1ef      	bne.n	800e71a <rcutils_system_time_now+0x22>
 800e73a:	2002      	movs	r0, #2
 800e73c:	b004      	add	sp, #16
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	200b      	movs	r0, #11
 800e742:	4770      	bx	lr
 800e744:	3b9aca00 	.word	0x3b9aca00

0800e748 <rcutils_steady_time_now>:
 800e748:	b310      	cbz	r0, 800e790 <rcutils_steady_time_now+0x48>
 800e74a:	b570      	push	{r4, r5, r6, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	4669      	mov	r1, sp
 800e750:	4604      	mov	r4, r0
 800e752:	2000      	movs	r0, #0
 800e754:	f7f2 ff34 	bl	80015c0 <clock_gettime>
 800e758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e75c:	2800      	cmp	r0, #0
 800e75e:	f171 0300 	sbcs.w	r3, r1, #0
 800e762:	db12      	blt.n	800e78a <rcutils_steady_time_now+0x42>
 800e764:	9d02      	ldr	r5, [sp, #8]
 800e766:	2d00      	cmp	r5, #0
 800e768:	db0c      	blt.n	800e784 <rcutils_steady_time_now+0x3c>
 800e76a:	4e0a      	ldr	r6, [pc, #40]	@ (800e794 <rcutils_steady_time_now+0x4c>)
 800e76c:	fba0 2306 	umull	r2, r3, r0, r6
 800e770:	1952      	adds	r2, r2, r5
 800e772:	fb06 3301 	mla	r3, r6, r1, r3
 800e776:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800e77a:	2000      	movs	r0, #0
 800e77c:	e9c4 2300 	strd	r2, r3, [r4]
 800e780:	b004      	add	sp, #16
 800e782:	bd70      	pop	{r4, r5, r6, pc}
 800e784:	ea50 0301 	orrs.w	r3, r0, r1
 800e788:	d1ef      	bne.n	800e76a <rcutils_steady_time_now+0x22>
 800e78a:	2002      	movs	r0, #2
 800e78c:	b004      	add	sp, #16
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
 800e790:	200b      	movs	r0, #11
 800e792:	4770      	bx	lr
 800e794:	3b9aca00 	.word	0x3b9aca00

0800e798 <rmw_get_zero_initialized_context>:
 800e798:	b510      	push	{r4, lr}
 800e79a:	2250      	movs	r2, #80	@ 0x50
 800e79c:	4604      	mov	r4, r0
 800e79e:	2100      	movs	r1, #0
 800e7a0:	f003 f888 	bl	80118b4 <memset>
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	bd10      	pop	{r4, pc}

0800e7a8 <rmw_get_zero_initialized_init_options>:
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	2238      	movs	r2, #56	@ 0x38
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	f003 f880 	bl	80118b4 <memset>
 800e7b4:	f104 0010 	add.w	r0, r4, #16
 800e7b8:	f000 f806 	bl	800e7c8 <rmw_get_default_security_options>
 800e7bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7c0:	60e3      	str	r3, [r4, #12]
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	bf00      	nop

0800e7c8 <rmw_get_default_security_options>:
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	7002      	strb	r2, [r0, #0]
 800e7cc:	6042      	str	r2, [r0, #4]
 800e7ce:	4770      	bx	lr

0800e7d0 <rmw_validate_namespace_with_size>:
 800e7d0:	b340      	cbz	r0, 800e824 <rmw_validate_namespace_with_size+0x54>
 800e7d2:	b5d0      	push	{r4, r6, r7, lr}
 800e7d4:	4614      	mov	r4, r2
 800e7d6:	b0c2      	sub	sp, #264	@ 0x108
 800e7d8:	b332      	cbz	r2, 800e828 <rmw_validate_namespace_with_size+0x58>
 800e7da:	2901      	cmp	r1, #1
 800e7dc:	460f      	mov	r7, r1
 800e7de:	461e      	mov	r6, r3
 800e7e0:	d102      	bne.n	800e7e8 <rmw_validate_namespace_with_size+0x18>
 800e7e2:	7803      	ldrb	r3, [r0, #0]
 800e7e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7e6:	d019      	beq.n	800e81c <rmw_validate_namespace_with_size+0x4c>
 800e7e8:	aa01      	add	r2, sp, #4
 800e7ea:	4669      	mov	r1, sp
 800e7ec:	f7fa fa7e 	bl	8008cec <rmw_validate_full_topic_name>
 800e7f0:	b990      	cbnz	r0, 800e818 <rmw_validate_namespace_with_size+0x48>
 800e7f2:	9b00      	ldr	r3, [sp, #0]
 800e7f4:	b14b      	cbz	r3, 800e80a <rmw_validate_namespace_with_size+0x3a>
 800e7f6:	2b07      	cmp	r3, #7
 800e7f8:	d007      	beq.n	800e80a <rmw_validate_namespace_with_size+0x3a>
 800e7fa:	1e5a      	subs	r2, r3, #1
 800e7fc:	2a05      	cmp	r2, #5
 800e7fe:	d82b      	bhi.n	800e858 <rmw_validate_namespace_with_size+0x88>
 800e800:	e8df f002 	tbb	[pc, r2]
 800e804:	24211e1b 	.word	0x24211e1b
 800e808:	1427      	.short	0x1427
 800e80a:	2ff5      	cmp	r7, #245	@ 0xf5
 800e80c:	d906      	bls.n	800e81c <rmw_validate_namespace_with_size+0x4c>
 800e80e:	2307      	movs	r3, #7
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	b10e      	cbz	r6, 800e818 <rmw_validate_namespace_with_size+0x48>
 800e814:	23f4      	movs	r3, #244	@ 0xf4
 800e816:	6033      	str	r3, [r6, #0]
 800e818:	b042      	add	sp, #264	@ 0x108
 800e81a:	bdd0      	pop	{r4, r6, r7, pc}
 800e81c:	2000      	movs	r0, #0
 800e81e:	6020      	str	r0, [r4, #0]
 800e820:	b042      	add	sp, #264	@ 0x108
 800e822:	bdd0      	pop	{r4, r6, r7, pc}
 800e824:	200b      	movs	r0, #11
 800e826:	4770      	bx	lr
 800e828:	200b      	movs	r0, #11
 800e82a:	e7f5      	b.n	800e818 <rmw_validate_namespace_with_size+0x48>
 800e82c:	2306      	movs	r3, #6
 800e82e:	6023      	str	r3, [r4, #0]
 800e830:	2e00      	cmp	r6, #0
 800e832:	d0f1      	beq.n	800e818 <rmw_validate_namespace_with_size+0x48>
 800e834:	9b01      	ldr	r3, [sp, #4]
 800e836:	6033      	str	r3, [r6, #0]
 800e838:	e7ee      	b.n	800e818 <rmw_validate_namespace_with_size+0x48>
 800e83a:	2301      	movs	r3, #1
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	e7f7      	b.n	800e830 <rmw_validate_namespace_with_size+0x60>
 800e840:	2302      	movs	r3, #2
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	e7f4      	b.n	800e830 <rmw_validate_namespace_with_size+0x60>
 800e846:	2303      	movs	r3, #3
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	e7f1      	b.n	800e830 <rmw_validate_namespace_with_size+0x60>
 800e84c:	2304      	movs	r3, #4
 800e84e:	6023      	str	r3, [r4, #0]
 800e850:	e7ee      	b.n	800e830 <rmw_validate_namespace_with_size+0x60>
 800e852:	2305      	movs	r3, #5
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	e7eb      	b.n	800e830 <rmw_validate_namespace_with_size+0x60>
 800e858:	4a03      	ldr	r2, [pc, #12]	@ (800e868 <rmw_validate_namespace_with_size+0x98>)
 800e85a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e85e:	a802      	add	r0, sp, #8
 800e860:	f7ff fee0 	bl	800e624 <rcutils_snprintf>
 800e864:	2001      	movs	r0, #1
 800e866:	e7d7      	b.n	800e818 <rmw_validate_namespace_with_size+0x48>
 800e868:	08012b64 	.word	0x08012b64

0800e86c <rmw_validate_namespace>:
 800e86c:	b168      	cbz	r0, 800e88a <rmw_validate_namespace+0x1e>
 800e86e:	b570      	push	{r4, r5, r6, lr}
 800e870:	460d      	mov	r5, r1
 800e872:	4616      	mov	r6, r2
 800e874:	4604      	mov	r4, r0
 800e876:	f7f1 fcbd 	bl	80001f4 <strlen>
 800e87a:	4633      	mov	r3, r6
 800e87c:	4601      	mov	r1, r0
 800e87e:	462a      	mov	r2, r5
 800e880:	4620      	mov	r0, r4
 800e882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e886:	f7ff bfa3 	b.w	800e7d0 <rmw_validate_namespace_with_size>
 800e88a:	200b      	movs	r0, #11
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop

0800e890 <rmw_namespace_validation_result_string>:
 800e890:	2807      	cmp	r0, #7
 800e892:	bf9a      	itte	ls
 800e894:	4b02      	ldrls	r3, [pc, #8]	@ (800e8a0 <rmw_namespace_validation_result_string+0x10>)
 800e896:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e89a:	4802      	ldrhi	r0, [pc, #8]	@ (800e8a4 <rmw_namespace_validation_result_string+0x14>)
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	08012d5c 	.word	0x08012d5c
 800e8a4:	08012bb4 	.word	0x08012bb4

0800e8a8 <rmw_validate_node_name>:
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d03b      	beq.n	800e924 <rmw_validate_node_name+0x7c>
 800e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	2900      	cmp	r1, #0
 800e8b4:	d038      	beq.n	800e928 <rmw_validate_node_name+0x80>
 800e8b6:	4615      	mov	r5, r2
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	f7f1 fc9b 	bl	80001f4 <strlen>
 800e8be:	b1e0      	cbz	r0, 800e8fa <rmw_validate_node_name+0x52>
 800e8c0:	1e63      	subs	r3, r4, #1
 800e8c2:	eb03 0e00 	add.w	lr, r3, r0
 800e8c6:	f1c4 0c01 	rsb	ip, r4, #1
 800e8ca:	eb0c 0803 	add.w	r8, ip, r3
 800e8ce:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800e8d2:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 800e8d6:	f026 0220 	bic.w	r2, r6, #32
 800e8da:	2909      	cmp	r1, #9
 800e8dc:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 800e8e0:	d913      	bls.n	800e90a <rmw_validate_node_name+0x62>
 800e8e2:	2a19      	cmp	r2, #25
 800e8e4:	d911      	bls.n	800e90a <rmw_validate_node_name+0x62>
 800e8e6:	2e5f      	cmp	r6, #95	@ 0x5f
 800e8e8:	d00f      	beq.n	800e90a <rmw_validate_node_name+0x62>
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	603b      	str	r3, [r7, #0]
 800e8ee:	b10d      	cbz	r5, 800e8f4 <rmw_validate_node_name+0x4c>
 800e8f0:	f8c5 8000 	str.w	r8, [r5]
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	603b      	str	r3, [r7, #0]
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	d0f8      	beq.n	800e8f4 <rmw_validate_node_name+0x4c>
 800e902:	2000      	movs	r0, #0
 800e904:	6028      	str	r0, [r5, #0]
 800e906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e90a:	4573      	cmp	r3, lr
 800e90c:	d1dd      	bne.n	800e8ca <rmw_validate_node_name+0x22>
 800e90e:	7822      	ldrb	r2, [r4, #0]
 800e910:	4b0d      	ldr	r3, [pc, #52]	@ (800e948 <rmw_validate_node_name+0xa0>)
 800e912:	5cd3      	ldrb	r3, [r2, r3]
 800e914:	f013 0304 	ands.w	r3, r3, #4
 800e918:	d110      	bne.n	800e93c <rmw_validate_node_name+0x94>
 800e91a:	28ff      	cmp	r0, #255	@ 0xff
 800e91c:	d806      	bhi.n	800e92c <rmw_validate_node_name+0x84>
 800e91e:	603b      	str	r3, [r7, #0]
 800e920:	4618      	mov	r0, r3
 800e922:	e7e8      	b.n	800e8f6 <rmw_validate_node_name+0x4e>
 800e924:	200b      	movs	r0, #11
 800e926:	4770      	bx	lr
 800e928:	200b      	movs	r0, #11
 800e92a:	e7e4      	b.n	800e8f6 <rmw_validate_node_name+0x4e>
 800e92c:	2204      	movs	r2, #4
 800e92e:	603a      	str	r2, [r7, #0]
 800e930:	2d00      	cmp	r5, #0
 800e932:	d0df      	beq.n	800e8f4 <rmw_validate_node_name+0x4c>
 800e934:	22fe      	movs	r2, #254	@ 0xfe
 800e936:	4618      	mov	r0, r3
 800e938:	602a      	str	r2, [r5, #0]
 800e93a:	e7dc      	b.n	800e8f6 <rmw_validate_node_name+0x4e>
 800e93c:	2303      	movs	r3, #3
 800e93e:	603b      	str	r3, [r7, #0]
 800e940:	2d00      	cmp	r5, #0
 800e942:	d1de      	bne.n	800e902 <rmw_validate_node_name+0x5a>
 800e944:	e7d6      	b.n	800e8f4 <rmw_validate_node_name+0x4c>
 800e946:	bf00      	nop
 800e948:	08013120 	.word	0x08013120

0800e94c <rmw_node_name_validation_result_string>:
 800e94c:	2804      	cmp	r0, #4
 800e94e:	bf9a      	itte	ls
 800e950:	4b02      	ldrls	r3, [pc, #8]	@ (800e95c <rmw_node_name_validation_result_string+0x10>)
 800e952:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e956:	4802      	ldrhi	r0, [pc, #8]	@ (800e960 <rmw_node_name_validation_result_string+0x14>)
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	08012e68 	.word	0x08012e68
 800e960:	08012d7c 	.word	0x08012d7c

0800e964 <get_memory>:
 800e964:	4603      	mov	r3, r0
 800e966:	6840      	ldr	r0, [r0, #4]
 800e968:	b158      	cbz	r0, 800e982 <get_memory+0x1e>
 800e96a:	6882      	ldr	r2, [r0, #8]
 800e96c:	605a      	str	r2, [r3, #4]
 800e96e:	b10a      	cbz	r2, 800e974 <get_memory+0x10>
 800e970:	2100      	movs	r1, #0
 800e972:	6051      	str	r1, [r2, #4]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	6082      	str	r2, [r0, #8]
 800e978:	b102      	cbz	r2, 800e97c <get_memory+0x18>
 800e97a:	6050      	str	r0, [r2, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	6042      	str	r2, [r0, #4]
 800e980:	6018      	str	r0, [r3, #0]
 800e982:	4770      	bx	lr

0800e984 <put_memory>:
 800e984:	684b      	ldr	r3, [r1, #4]
 800e986:	b10b      	cbz	r3, 800e98c <put_memory+0x8>
 800e988:	688a      	ldr	r2, [r1, #8]
 800e98a:	609a      	str	r2, [r3, #8]
 800e98c:	688a      	ldr	r2, [r1, #8]
 800e98e:	b102      	cbz	r2, 800e992 <put_memory+0xe>
 800e990:	6053      	str	r3, [r2, #4]
 800e992:	6803      	ldr	r3, [r0, #0]
 800e994:	428b      	cmp	r3, r1
 800e996:	6843      	ldr	r3, [r0, #4]
 800e998:	bf08      	it	eq
 800e99a:	6002      	streq	r2, [r0, #0]
 800e99c:	608b      	str	r3, [r1, #8]
 800e99e:	b103      	cbz	r3, 800e9a2 <put_memory+0x1e>
 800e9a0:	6059      	str	r1, [r3, #4]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	604b      	str	r3, [r1, #4]
 800e9a6:	6041      	str	r1, [r0, #4]
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop

0800e9ac <rmw_get_implementation_identifier>:
 800e9ac:	4b01      	ldr	r3, [pc, #4]	@ (800e9b4 <rmw_get_implementation_identifier+0x8>)
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	08012e94 	.word	0x08012e94

0800e9b8 <rmw_init_options_init>:
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9be:	ad09      	add	r5, sp, #36	@ 0x24
 800e9c0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e9c4:	b130      	cbz	r0, 800e9d4 <rmw_init_options_init+0x1c>
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	f7fa f821 	bl	8008a10 <rcutils_allocator_is_valid>
 800e9ce:	b108      	cbz	r0, 800e9d4 <rmw_init_options_init+0x1c>
 800e9d0:	68a3      	ldr	r3, [r4, #8]
 800e9d2:	b123      	cbz	r3, 800e9de <rmw_init_options_init+0x26>
 800e9d4:	200b      	movs	r0, #11
 800e9d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9da:	b004      	add	sp, #16
 800e9dc:	4770      	bx	lr
 800e9de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9e0:	4f1c      	ldr	r7, [pc, #112]	@ (800ea54 <rmw_init_options_init+0x9c>)
 800e9e2:	682e      	ldr	r6, [r5, #0]
 800e9e4:	683d      	ldr	r5, [r7, #0]
 800e9e6:	60a5      	str	r5, [r4, #8]
 800e9e8:	f04f 0800 	mov.w	r8, #0
 800e9ec:	f04f 0900 	mov.w	r9, #0
 800e9f0:	f104 0520 	add.w	r5, r4, #32
 800e9f4:	e9c4 8900 	strd	r8, r9, [r4]
 800e9f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9fa:	4b17      	ldr	r3, [pc, #92]	@ (800ea58 <rmw_init_options_init+0xa0>)
 800e9fc:	4817      	ldr	r0, [pc, #92]	@ (800ea5c <rmw_init_options_init+0xa4>)
 800e9fe:	602e      	str	r6, [r5, #0]
 800ea00:	4917      	ldr	r1, [pc, #92]	@ (800ea60 <rmw_init_options_init+0xa8>)
 800ea02:	61e3      	str	r3, [r4, #28]
 800ea04:	2203      	movs	r2, #3
 800ea06:	f7fa fc83 	bl	8009310 <rmw_uxrce_init_init_options_impl_memory>
 800ea0a:	4814      	ldr	r0, [pc, #80]	@ (800ea5c <rmw_init_options_init+0xa4>)
 800ea0c:	f7ff ffaa 	bl	800e964 <get_memory>
 800ea10:	b1e8      	cbz	r0, 800ea4e <rmw_init_options_init+0x96>
 800ea12:	4a14      	ldr	r2, [pc, #80]	@ (800ea64 <rmw_init_options_init+0xac>)
 800ea14:	68c3      	ldr	r3, [r0, #12]
 800ea16:	6851      	ldr	r1, [r2, #4]
 800ea18:	7810      	ldrb	r0, [r2, #0]
 800ea1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea1c:	7418      	strb	r0, [r3, #16]
 800ea1e:	6159      	str	r1, [r3, #20]
 800ea20:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800ea24:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800ea28:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800ea2c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800ea30:	f7fd fac6 	bl	800bfc0 <uxr_nanos>
 800ea34:	f002 fcb2 	bl	801139c <srand>
 800ea38:	f002 fcde 	bl	80113f8 <rand>
 800ea3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea3e:	6298      	str	r0, [r3, #40]	@ 0x28
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d0f9      	beq.n	800ea38 <rmw_init_options_init+0x80>
 800ea44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea48:	2000      	movs	r0, #0
 800ea4a:	b004      	add	sp, #16
 800ea4c:	4770      	bx	lr
 800ea4e:	2001      	movs	r0, #1
 800ea50:	e7c1      	b.n	800e9d6 <rmw_init_options_init+0x1e>
 800ea52:	bf00      	nop
 800ea54:	08012e94 	.word	0x08012e94
 800ea58:	08012a3c 	.word	0x08012a3c
 800ea5c:	2000c78c 	.word	0x2000c78c
 800ea60:	2000c3e0 	.word	0x2000c3e0
 800ea64:	20009470 	.word	0x20009470

0800ea68 <rmw_init_options_copy>:
 800ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6a:	b158      	cbz	r0, 800ea84 <rmw_init_options_copy+0x1c>
 800ea6c:	460e      	mov	r6, r1
 800ea6e:	b149      	cbz	r1, 800ea84 <rmw_init_options_copy+0x1c>
 800ea70:	4604      	mov	r4, r0
 800ea72:	6880      	ldr	r0, [r0, #8]
 800ea74:	b120      	cbz	r0, 800ea80 <rmw_init_options_copy+0x18>
 800ea76:	4b1b      	ldr	r3, [pc, #108]	@ (800eae4 <rmw_init_options_copy+0x7c>)
 800ea78:	6819      	ldr	r1, [r3, #0]
 800ea7a:	f7f1 fbb1 	bl	80001e0 <strcmp>
 800ea7e:	bb60      	cbnz	r0, 800eada <rmw_init_options_copy+0x72>
 800ea80:	68b3      	ldr	r3, [r6, #8]
 800ea82:	b113      	cbz	r3, 800ea8a <rmw_init_options_copy+0x22>
 800ea84:	230b      	movs	r3, #11
 800ea86:	4618      	mov	r0, r3
 800ea88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea8a:	4623      	mov	r3, r4
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800ea92:	681d      	ldr	r5, [r3, #0]
 800ea94:	6858      	ldr	r0, [r3, #4]
 800ea96:	6899      	ldr	r1, [r3, #8]
 800ea98:	68df      	ldr	r7, [r3, #12]
 800ea9a:	60d7      	str	r7, [r2, #12]
 800ea9c:	3310      	adds	r3, #16
 800ea9e:	4563      	cmp	r3, ip
 800eaa0:	6015      	str	r5, [r2, #0]
 800eaa2:	6050      	str	r0, [r2, #4]
 800eaa4:	6091      	str	r1, [r2, #8]
 800eaa6:	f102 0210 	add.w	r2, r2, #16
 800eaaa:	d1f2      	bne.n	800ea92 <rmw_init_options_copy+0x2a>
 800eaac:	6819      	ldr	r1, [r3, #0]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	480d      	ldr	r0, [pc, #52]	@ (800eae8 <rmw_init_options_copy+0x80>)
 800eab2:	6053      	str	r3, [r2, #4]
 800eab4:	6011      	str	r1, [r2, #0]
 800eab6:	f7ff ff55 	bl	800e964 <get_memory>
 800eaba:	b188      	cbz	r0, 800eae0 <rmw_init_options_copy+0x78>
 800eabc:	68c5      	ldr	r5, [r0, #12]
 800eabe:	6375      	str	r5, [r6, #52]	@ 0x34
 800eac0:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800eac2:	3610      	adds	r6, #16
 800eac4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eac6:	f105 0410 	add.w	r4, r5, #16
 800eaca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eacc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ead0:	2300      	movs	r3, #0
 800ead2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ead6:	4618      	mov	r0, r3
 800ead8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eada:	230c      	movs	r3, #12
 800eadc:	4618      	mov	r0, r3
 800eade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eae0:	2301      	movs	r3, #1
 800eae2:	e7d0      	b.n	800ea86 <rmw_init_options_copy+0x1e>
 800eae4:	08012e94 	.word	0x08012e94
 800eae8:	2000c78c 	.word	0x2000c78c

0800eaec <rmw_init_options_fini>:
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d036      	beq.n	800eb5e <rmw_init_options_fini+0x72>
 800eaf0:	b530      	push	{r4, r5, lr}
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	b08f      	sub	sp, #60	@ 0x3c
 800eaf6:	3020      	adds	r0, #32
 800eaf8:	f7f9 ff8a 	bl	8008a10 <rcutils_allocator_is_valid>
 800eafc:	b328      	cbz	r0, 800eb4a <rmw_init_options_fini+0x5e>
 800eafe:	68a0      	ldr	r0, [r4, #8]
 800eb00:	b120      	cbz	r0, 800eb0c <rmw_init_options_fini+0x20>
 800eb02:	4b18      	ldr	r3, [pc, #96]	@ (800eb64 <rmw_init_options_fini+0x78>)
 800eb04:	6819      	ldr	r1, [r3, #0]
 800eb06:	f7f1 fb6b 	bl	80001e0 <strcmp>
 800eb0a:	bb30      	cbnz	r0, 800eb5a <rmw_init_options_fini+0x6e>
 800eb0c:	4b16      	ldr	r3, [pc, #88]	@ (800eb68 <rmw_init_options_fini+0x7c>)
 800eb0e:	6819      	ldr	r1, [r3, #0]
 800eb10:	b1f9      	cbz	r1, 800eb52 <rmw_init_options_fini+0x66>
 800eb12:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800eb14:	e001      	b.n	800eb1a <rmw_init_options_fini+0x2e>
 800eb16:	6889      	ldr	r1, [r1, #8]
 800eb18:	b1d9      	cbz	r1, 800eb52 <rmw_init_options_fini+0x66>
 800eb1a:	68cb      	ldr	r3, [r1, #12]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d1fa      	bne.n	800eb16 <rmw_init_options_fini+0x2a>
 800eb20:	4811      	ldr	r0, [pc, #68]	@ (800eb68 <rmw_init_options_fini+0x7c>)
 800eb22:	f7ff ff2f 	bl	800e984 <put_memory>
 800eb26:	466d      	mov	r5, sp
 800eb28:	4668      	mov	r0, sp
 800eb2a:	f7ff fe3d 	bl	800e7a8 <rmw_get_zero_initialized_init_options>
 800eb2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eb3e:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb42:	2300      	movs	r3, #0
 800eb44:	4618      	mov	r0, r3
 800eb46:	b00f      	add	sp, #60	@ 0x3c
 800eb48:	bd30      	pop	{r4, r5, pc}
 800eb4a:	230b      	movs	r3, #11
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	b00f      	add	sp, #60	@ 0x3c
 800eb50:	bd30      	pop	{r4, r5, pc}
 800eb52:	2301      	movs	r3, #1
 800eb54:	4618      	mov	r0, r3
 800eb56:	b00f      	add	sp, #60	@ 0x3c
 800eb58:	bd30      	pop	{r4, r5, pc}
 800eb5a:	230c      	movs	r3, #12
 800eb5c:	e7f2      	b.n	800eb44 <rmw_init_options_fini+0x58>
 800eb5e:	230b      	movs	r3, #11
 800eb60:	4618      	mov	r0, r3
 800eb62:	4770      	bx	lr
 800eb64:	08012e94 	.word	0x08012e94
 800eb68:	2000c78c 	.word	0x2000c78c

0800eb6c <rmw_init>:
 800eb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb70:	b082      	sub	sp, #8
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f000 80d6 	beq.w	800ed24 <rmw_init+0x1b8>
 800eb78:	460e      	mov	r6, r1
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	f000 80d2 	beq.w	800ed24 <rmw_init+0x1b8>
 800eb80:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800eb82:	4605      	mov	r5, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f000 80cd 	beq.w	800ed24 <rmw_init+0x1b8>
 800eb8a:	4b79      	ldr	r3, [pc, #484]	@ (800ed70 <rmw_init+0x204>)
 800eb8c:	6880      	ldr	r0, [r0, #8]
 800eb8e:	f8d3 9000 	ldr.w	r9, [r3]
 800eb92:	b128      	cbz	r0, 800eba0 <rmw_init+0x34>
 800eb94:	4649      	mov	r1, r9
 800eb96:	f7f1 fb23 	bl	80001e0 <strcmp>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f040 80cc 	bne.w	800ed38 <rmw_init+0x1cc>
 800eba0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800eba4:	68eb      	ldr	r3, [r5, #12]
 800eba6:	61f3      	str	r3, [r6, #28]
 800eba8:	e9c6 0100 	strd	r0, r1, [r6]
 800ebac:	2201      	movs	r2, #1
 800ebae:	4971      	ldr	r1, [pc, #452]	@ (800ed74 <rmw_init+0x208>)
 800ebb0:	4871      	ldr	r0, [pc, #452]	@ (800ed78 <rmw_init+0x20c>)
 800ebb2:	f8c6 9008 	str.w	r9, [r6, #8]
 800ebb6:	f7fa fb53 	bl	8009260 <rmw_uxrce_init_session_memory>
 800ebba:	4870      	ldr	r0, [pc, #448]	@ (800ed7c <rmw_init+0x210>)
 800ebbc:	4970      	ldr	r1, [pc, #448]	@ (800ed80 <rmw_init+0x214>)
 800ebbe:	2204      	movs	r2, #4
 800ebc0:	f7fa fb88 	bl	80092d4 <rmw_uxrce_init_static_input_buffer_memory>
 800ebc4:	486c      	ldr	r0, [pc, #432]	@ (800ed78 <rmw_init+0x20c>)
 800ebc6:	f7ff fecd 	bl	800e964 <get_memory>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	f000 80af 	beq.w	800ed2e <rmw_init+0x1c2>
 800ebd0:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800ebd2:	68c4      	ldr	r4, [r0, #12]
 800ebd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebd6:	7c39      	ldrb	r1, [r7, #16]
 800ebd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ebdc:	9001      	str	r0, [sp, #4]
 800ebde:	6a38      	ldr	r0, [r7, #32]
 800ebe0:	9000      	str	r0, [sp, #0]
 800ebe2:	f104 0a10 	add.w	sl, r4, #16
 800ebe6:	4650      	mov	r0, sl
 800ebe8:	f000 fd90 	bl	800f70c <uxr_set_custom_transport_callbacks>
 800ebec:	f241 5294 	movw	r2, #5524	@ 0x1594
 800ebf0:	f241 5398 	movw	r3, #5528	@ 0x1598
 800ebf4:	f04f 0800 	mov.w	r8, #0
 800ebf8:	f241 509c 	movw	r0, #5532	@ 0x159c
 800ebfc:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800ec00:	f844 8002 	str.w	r8, [r4, r2]
 800ec04:	f844 8003 	str.w	r8, [r4, r3]
 800ec08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ec0c:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800ec10:	f844 8000 	str.w	r8, [r4, r0]
 800ec14:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800ec18:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ec1c:	4859      	ldr	r0, [pc, #356]	@ (800ed84 <rmw_init+0x218>)
 800ec1e:	f8c1 8000 	str.w	r8, [r1]
 800ec22:	2201      	movs	r2, #1
 800ec24:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800ec28:	4957      	ldr	r1, [pc, #348]	@ (800ed88 <rmw_init+0x21c>)
 800ec2a:	64b4      	str	r4, [r6, #72]	@ 0x48
 800ec2c:	f7fa fafe 	bl	800922c <rmw_uxrce_init_node_memory>
 800ec30:	4956      	ldr	r1, [pc, #344]	@ (800ed8c <rmw_init+0x220>)
 800ec32:	4857      	ldr	r0, [pc, #348]	@ (800ed90 <rmw_init+0x224>)
 800ec34:	2205      	movs	r2, #5
 800ec36:	f7fa fadf 	bl	80091f8 <rmw_uxrce_init_subscription_memory>
 800ec3a:	4956      	ldr	r1, [pc, #344]	@ (800ed94 <rmw_init+0x228>)
 800ec3c:	4856      	ldr	r0, [pc, #344]	@ (800ed98 <rmw_init+0x22c>)
 800ec3e:	220a      	movs	r2, #10
 800ec40:	f7fa fac0 	bl	80091c4 <rmw_uxrce_init_publisher_memory>
 800ec44:	4955      	ldr	r1, [pc, #340]	@ (800ed9c <rmw_init+0x230>)
 800ec46:	4856      	ldr	r0, [pc, #344]	@ (800eda0 <rmw_init+0x234>)
 800ec48:	2201      	movs	r2, #1
 800ec4a:	f7fa fa87 	bl	800915c <rmw_uxrce_init_service_memory>
 800ec4e:	4955      	ldr	r1, [pc, #340]	@ (800eda4 <rmw_init+0x238>)
 800ec50:	4855      	ldr	r0, [pc, #340]	@ (800eda8 <rmw_init+0x23c>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	f7fa fa9c 	bl	8009190 <rmw_uxrce_init_client_memory>
 800ec58:	4954      	ldr	r1, [pc, #336]	@ (800edac <rmw_init+0x240>)
 800ec5a:	4855      	ldr	r0, [pc, #340]	@ (800edb0 <rmw_init+0x244>)
 800ec5c:	220f      	movs	r2, #15
 800ec5e:	f7fa fb1d 	bl	800929c <rmw_uxrce_init_topic_memory>
 800ec62:	4954      	ldr	r1, [pc, #336]	@ (800edb4 <rmw_init+0x248>)
 800ec64:	4854      	ldr	r0, [pc, #336]	@ (800edb8 <rmw_init+0x24c>)
 800ec66:	2203      	movs	r2, #3
 800ec68:	f7fa fb52 	bl	8009310 <rmw_uxrce_init_init_options_impl_memory>
 800ec6c:	4953      	ldr	r1, [pc, #332]	@ (800edbc <rmw_init+0x250>)
 800ec6e:	4854      	ldr	r0, [pc, #336]	@ (800edc0 <rmw_init+0x254>)
 800ec70:	2204      	movs	r2, #4
 800ec72:	f7fa fb67 	bl	8009344 <rmw_uxrce_init_wait_set_memory>
 800ec76:	4953      	ldr	r1, [pc, #332]	@ (800edc4 <rmw_init+0x258>)
 800ec78:	4853      	ldr	r0, [pc, #332]	@ (800edc8 <rmw_init+0x25c>)
 800ec7a:	2204      	movs	r2, #4
 800ec7c:	f7fa fb7e 	bl	800937c <rmw_uxrce_init_guard_condition_memory>
 800ec80:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ec82:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800ec84:	4642      	mov	r2, r8
 800ec86:	f000 fb03 	bl	800f290 <rmw_uxrce_transport_init>
 800ec8a:	4607      	mov	r7, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d158      	bne.n	800ed42 <rmw_init+0x1d6>
 800ec90:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ec92:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ec96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ec98:	4628      	mov	r0, r5
 800ec9a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ec9e:	f7fc f815 	bl	800accc <uxr_init_session>
 800eca2:	494a      	ldr	r1, [pc, #296]	@ (800edcc <rmw_init+0x260>)
 800eca4:	4622      	mov	r2, r4
 800eca6:	4628      	mov	r0, r5
 800eca8:	f7fc f832 	bl	800ad10 <uxr_set_topic_callback>
 800ecac:	4948      	ldr	r1, [pc, #288]	@ (800edd0 <rmw_init+0x264>)
 800ecae:	463a      	mov	r2, r7
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f7fc f829 	bl	800ad08 <uxr_set_status_callback>
 800ecb6:	4947      	ldr	r1, [pc, #284]	@ (800edd4 <rmw_init+0x268>)
 800ecb8:	463a      	mov	r2, r7
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f7fc f82c 	bl	800ad18 <uxr_set_request_callback>
 800ecc0:	4945      	ldr	r1, [pc, #276]	@ (800edd8 <rmw_init+0x26c>)
 800ecc2:	463a      	mov	r2, r7
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	f7fc f82b 	bl	800ad20 <uxr_set_reply_callback>
 800ecca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ecce:	2304      	movs	r3, #4
 800ecd0:	0092      	lsls	r2, r2, #2
 800ecd2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	f7fc f862 	bl	800ada0 <uxr_create_input_reliable_stream>
 800ecdc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ece0:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800ece4:	0092      	lsls	r2, r2, #2
 800ece6:	2304      	movs	r3, #4
 800ece8:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ecec:	4628      	mov	r0, r5
 800ecee:	f7fc f82d 	bl	800ad4c <uxr_create_output_reliable_stream>
 800ecf2:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f7fc f84c 	bl	800ad94 <uxr_create_input_best_effort_stream>
 800ecfc:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ed00:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ed04:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ed08:	4628      	mov	r0, r5
 800ed0a:	3114      	adds	r1, #20
 800ed0c:	f7fc f80c 	bl	800ad28 <uxr_create_output_best_effort_stream>
 800ed10:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ed14:	4628      	mov	r0, r5
 800ed16:	f7fc fc63 	bl	800b5e0 <uxr_create_session>
 800ed1a:	b1f8      	cbz	r0, 800ed5c <rmw_init+0x1f0>
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	b002      	add	sp, #8
 800ed20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed24:	270b      	movs	r7, #11
 800ed26:	4638      	mov	r0, r7
 800ed28:	b002      	add	sp, #8
 800ed2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed2e:	2701      	movs	r7, #1
 800ed30:	4638      	mov	r0, r7
 800ed32:	b002      	add	sp, #8
 800ed34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed38:	270c      	movs	r7, #12
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	b002      	add	sp, #8
 800ed3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed42:	4650      	mov	r0, sl
 800ed44:	f000 fd22 	bl	800f78c <uxr_close_custom_transport>
 800ed48:	480b      	ldr	r0, [pc, #44]	@ (800ed78 <rmw_init+0x20c>)
 800ed4a:	4621      	mov	r1, r4
 800ed4c:	f7ff fe1a 	bl	800e984 <put_memory>
 800ed50:	4638      	mov	r0, r7
 800ed52:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800ed56:	b002      	add	sp, #8
 800ed58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5c:	4650      	mov	r0, sl
 800ed5e:	f000 fd15 	bl	800f78c <uxr_close_custom_transport>
 800ed62:	4805      	ldr	r0, [pc, #20]	@ (800ed78 <rmw_init+0x20c>)
 800ed64:	4621      	mov	r1, r4
 800ed66:	f7ff fe0d 	bl	800e984 <put_memory>
 800ed6a:	64b7      	str	r7, [r6, #72]	@ 0x48
 800ed6c:	2701      	movs	r7, #1
 800ed6e:	e7d5      	b.n	800ed1c <rmw_init+0x1b0>
 800ed70:	08012e94 	.word	0x08012e94
 800ed74:	2000c868 	.word	0x2000c868
 800ed78:	2000c638 	.word	0x2000c638
 800ed7c:	20009490 	.word	0x20009490
 800ed80:	2000a270 	.word	0x2000a270
 800ed84:	2000c464 	.word	0x2000c464
 800ed88:	2000c648 	.word	0x2000c648
 800ed8c:	20009d98 	.word	0x20009d98
 800ed90:	2000c6fc 	.word	0x2000c6fc
 800ed94:	200094b0 	.word	0x200094b0
 800ed98:	200094a0 	.word	0x200094a0
 800ed9c:	2000c7a0 	.word	0x2000c7a0
 800eda0:	2000c6ec 	.word	0x2000c6ec
 800eda4:	2000a1a8 	.word	0x2000a1a8
 800eda8:	20009d20 	.word	0x20009d20
 800edac:	2000c474 	.word	0x2000c474
 800edb0:	2000c628 	.word	0x2000c628
 800edb4:	2000c3e0 	.word	0x2000c3e0
 800edb8:	2000c78c 	.word	0x2000c78c
 800edbc:	2000c370 	.word	0x2000c370
 800edc0:	2000de10 	.word	0x2000de10
 800edc4:	2000c70c 	.word	0x2000c70c
 800edc8:	2000c618 	.word	0x2000c618
 800edcc:	08010ec1 	.word	0x08010ec1
 800edd0:	08010eb9 	.word	0x08010eb9
 800edd4:	08010f55 	.word	0x08010f55
 800edd8:	08010fed 	.word	0x08010fed

0800eddc <rmw_context_fini>:
 800eddc:	4b17      	ldr	r3, [pc, #92]	@ (800ee3c <rmw_context_fini+0x60>)
 800edde:	b570      	push	{r4, r5, r6, lr}
 800ede0:	681c      	ldr	r4, [r3, #0]
 800ede2:	4605      	mov	r5, r0
 800ede4:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800ede6:	b33c      	cbz	r4, 800ee38 <rmw_context_fini+0x5c>
 800ede8:	2600      	movs	r6, #0
 800edea:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800edee:	691a      	ldr	r2, [r3, #16]
 800edf0:	4282      	cmp	r2, r0
 800edf2:	d018      	beq.n	800ee26 <rmw_context_fini+0x4a>
 800edf4:	2c00      	cmp	r4, #0
 800edf6:	d1f8      	bne.n	800edea <rmw_context_fini+0xe>
 800edf8:	b188      	cbz	r0, 800ee1e <rmw_context_fini+0x42>
 800edfa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800edfe:	789b      	ldrb	r3, [r3, #2]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	bf14      	ite	ne
 800ee04:	210a      	movne	r1, #10
 800ee06:	2100      	moveq	r1, #0
 800ee08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee0c:	f7fc fdaa 	bl	800b964 <uxr_delete_session_retries>
 800ee10:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ee12:	f7fa facd 	bl	80093b0 <rmw_uxrce_fini_session_memory>
 800ee16:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ee18:	3010      	adds	r0, #16
 800ee1a:	f000 fcb7 	bl	800f78c <uxr_close_custom_transport>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	4630      	mov	r0, r6
 800ee22:	64ab      	str	r3, [r5, #72]	@ 0x48
 800ee24:	bd70      	pop	{r4, r5, r6, pc}
 800ee26:	f103 0018 	add.w	r0, r3, #24
 800ee2a:	f000 f90d 	bl	800f048 <rmw_destroy_node>
 800ee2e:	4606      	mov	r6, r0
 800ee30:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ee32:	2c00      	cmp	r4, #0
 800ee34:	d1d9      	bne.n	800edea <rmw_context_fini+0xe>
 800ee36:	e7df      	b.n	800edf8 <rmw_context_fini+0x1c>
 800ee38:	4626      	mov	r6, r4
 800ee3a:	e7dd      	b.n	800edf8 <rmw_context_fini+0x1c>
 800ee3c:	2000c464 	.word	0x2000c464

0800ee40 <create_topic>:
 800ee40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee44:	4607      	mov	r7, r0
 800ee46:	b084      	sub	sp, #16
 800ee48:	4822      	ldr	r0, [pc, #136]	@ (800eed4 <create_topic+0x94>)
 800ee4a:	4689      	mov	r9, r1
 800ee4c:	4690      	mov	r8, r2
 800ee4e:	f7ff fd89 	bl	800e964 <get_memory>
 800ee52:	4604      	mov	r4, r0
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d038      	beq.n	800eeca <create_topic+0x8a>
 800ee58:	693e      	ldr	r6, [r7, #16]
 800ee5a:	68c4      	ldr	r4, [r0, #12]
 800ee5c:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800eedc <create_topic+0x9c>
 800ee60:	61a7      	str	r7, [r4, #24]
 800ee62:	f241 5596 	movw	r5, #5526	@ 0x1596
 800ee66:	f8c4 8014 	str.w	r8, [r4, #20]
 800ee6a:	5b70      	ldrh	r0, [r6, r5]
 800ee6c:	1c42      	adds	r2, r0, #1
 800ee6e:	5372      	strh	r2, [r6, r5]
 800ee70:	2102      	movs	r1, #2
 800ee72:	f7fb fe6f 	bl	800ab54 <uxr_object_id>
 800ee76:	4651      	mov	r1, sl
 800ee78:	6120      	str	r0, [r4, #16]
 800ee7a:	223c      	movs	r2, #60	@ 0x3c
 800ee7c:	4648      	mov	r0, r9
 800ee7e:	f7fa fbcb 	bl	8009618 <generate_topic_name>
 800ee82:	b1f0      	cbz	r0, 800eec2 <create_topic+0x82>
 800ee84:	4d14      	ldr	r5, [pc, #80]	@ (800eed8 <create_topic+0x98>)
 800ee86:	4640      	mov	r0, r8
 800ee88:	4629      	mov	r1, r5
 800ee8a:	2264      	movs	r2, #100	@ 0x64
 800ee8c:	f7fa fb94 	bl	80095b8 <generate_type_name>
 800ee90:	b1b8      	cbz	r0, 800eec2 <create_topic+0x82>
 800ee92:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 800ee96:	2106      	movs	r1, #6
 800ee98:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ee9c:	9501      	str	r5, [sp, #4]
 800ee9e:	f8cd a000 	str.w	sl, [sp]
 800eea2:	9102      	str	r1, [sp, #8]
 800eea4:	6811      	ldr	r1, [r2, #0]
 800eea6:	6922      	ldr	r2, [r4, #16]
 800eea8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eeac:	f7fb fd78 	bl	800a9a0 <uxr_buffer_create_topic_bin>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	6938      	ldr	r0, [r7, #16]
 800eeb4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eeb8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eebc:	f7fa fb46 	bl	800954c <run_xrce_session>
 800eec0:	b918      	cbnz	r0, 800eeca <create_topic+0x8a>
 800eec2:	4620      	mov	r0, r4
 800eec4:	f7fa faea 	bl	800949c <rmw_uxrce_fini_topic_memory>
 800eec8:	2400      	movs	r4, #0
 800eeca:	4620      	mov	r0, r4
 800eecc:	b004      	add	sp, #16
 800eece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed2:	bf00      	nop
 800eed4:	2000c628 	.word	0x2000c628
 800eed8:	20009250 	.word	0x20009250
 800eedc:	20009214 	.word	0x20009214

0800eee0 <destroy_topic>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	6985      	ldr	r5, [r0, #24]
 800eee4:	b1d5      	cbz	r5, 800ef1c <destroy_topic+0x3c>
 800eee6:	4604      	mov	r4, r0
 800eee8:	6928      	ldr	r0, [r5, #16]
 800eeea:	6922      	ldr	r2, [r4, #16]
 800eeec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eef0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eef4:	6819      	ldr	r1, [r3, #0]
 800eef6:	f7fb fcd5 	bl	800a8a4 <uxr_buffer_delete_entity>
 800eefa:	4602      	mov	r2, r0
 800eefc:	6928      	ldr	r0, [r5, #16]
 800eefe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ef02:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ef06:	f7fa fb21 	bl	800954c <run_xrce_session>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	bf14      	ite	ne
 800ef10:	2400      	movne	r4, #0
 800ef12:	2402      	moveq	r4, #2
 800ef14:	f7fa fac2 	bl	800949c <rmw_uxrce_fini_topic_memory>
 800ef18:	4620      	mov	r0, r4
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	2401      	movs	r4, #1
 800ef1e:	4620      	mov	r0, r4
 800ef20:	bd38      	pop	{r3, r4, r5, pc}
 800ef22:	bf00      	nop

0800ef24 <create_node>:
 800ef24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef28:	b083      	sub	sp, #12
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d05f      	beq.n	800efee <create_node+0xca>
 800ef2e:	4606      	mov	r6, r0
 800ef30:	4835      	ldr	r0, [pc, #212]	@ (800f008 <create_node+0xe4>)
 800ef32:	460f      	mov	r7, r1
 800ef34:	4690      	mov	r8, r2
 800ef36:	461d      	mov	r5, r3
 800ef38:	f7ff fd14 	bl	800e964 <get_memory>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d056      	beq.n	800efee <create_node+0xca>
 800ef40:	68c4      	ldr	r4, [r0, #12]
 800ef42:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800ef44:	6123      	str	r3, [r4, #16]
 800ef46:	f7ff fd31 	bl	800e9ac <rmw_get_implementation_identifier>
 800ef4a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ef4e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ef52:	f8c4 9020 	str.w	r9, [r4, #32]
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7f1 f94c 	bl	80001f4 <strlen>
 800ef5c:	1c42      	adds	r2, r0, #1
 800ef5e:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef60:	f104 0518 	add.w	r5, r4, #24
 800ef64:	d840      	bhi.n	800efe8 <create_node+0xc4>
 800ef66:	4648      	mov	r0, r9
 800ef68:	4631      	mov	r1, r6
 800ef6a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ef6e:	f002 fd6a 	bl	8011a46 <memcpy>
 800ef72:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800ef76:	4638      	mov	r0, r7
 800ef78:	f7f1 f93c 	bl	80001f4 <strlen>
 800ef7c:	1c42      	adds	r2, r0, #1
 800ef7e:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef80:	d832      	bhi.n	800efe8 <create_node+0xc4>
 800ef82:	4639      	mov	r1, r7
 800ef84:	4648      	mov	r0, r9
 800ef86:	f002 fd5e 	bl	8011a46 <memcpy>
 800ef8a:	f241 5394 	movw	r3, #5524	@ 0x1594
 800ef8e:	6922      	ldr	r2, [r4, #16]
 800ef90:	5ad0      	ldrh	r0, [r2, r3]
 800ef92:	2101      	movs	r1, #1
 800ef94:	eb00 0c01 	add.w	ip, r0, r1
 800ef98:	f822 c003 	strh.w	ip, [r2, r3]
 800ef9c:	f7fb fdda 	bl	800ab54 <uxr_object_id>
 800efa0:	6160      	str	r0, [r4, #20]
 800efa2:	783b      	ldrb	r3, [r7, #0]
 800efa4:	2b2f      	cmp	r3, #47	@ 0x2f
 800efa6:	d127      	bne.n	800eff8 <create_node+0xd4>
 800efa8:	787b      	ldrb	r3, [r7, #1]
 800efaa:	bb2b      	cbnz	r3, 800eff8 <create_node+0xd4>
 800efac:	4a17      	ldr	r2, [pc, #92]	@ (800f00c <create_node+0xe8>)
 800efae:	4818      	ldr	r0, [pc, #96]	@ (800f010 <create_node+0xec>)
 800efb0:	4633      	mov	r3, r6
 800efb2:	213c      	movs	r1, #60	@ 0x3c
 800efb4:	f002 fbce 	bl	8011754 <sniprintf>
 800efb8:	6920      	ldr	r0, [r4, #16]
 800efba:	4b15      	ldr	r3, [pc, #84]	@ (800f010 <create_node+0xec>)
 800efbc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	2306      	movs	r3, #6
 800efc4:	9301      	str	r3, [sp, #4]
 800efc6:	6811      	ldr	r1, [r2, #0]
 800efc8:	6962      	ldr	r2, [r4, #20]
 800efca:	fa1f f388 	uxth.w	r3, r8
 800efce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efd2:	f7fb fcb3 	bl	800a93c <uxr_buffer_create_participant_bin>
 800efd6:	4602      	mov	r2, r0
 800efd8:	6920      	ldr	r0, [r4, #16]
 800efda:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800efde:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800efe2:	f7fa fab3 	bl	800954c <run_xrce_session>
 800efe6:	b918      	cbnz	r0, 800eff0 <create_node+0xcc>
 800efe8:	4628      	mov	r0, r5
 800efea:	f7fa f9e7 	bl	80093bc <rmw_uxrce_fini_node_memory>
 800efee:	2500      	movs	r5, #0
 800eff0:	4628      	mov	r0, r5
 800eff2:	b003      	add	sp, #12
 800eff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff8:	4a06      	ldr	r2, [pc, #24]	@ (800f014 <create_node+0xf0>)
 800effa:	9600      	str	r6, [sp, #0]
 800effc:	463b      	mov	r3, r7
 800effe:	213c      	movs	r1, #60	@ 0x3c
 800f000:	4803      	ldr	r0, [pc, #12]	@ (800f010 <create_node+0xec>)
 800f002:	f002 fba7 	bl	8011754 <sniprintf>
 800f006:	e7d7      	b.n	800efb8 <create_node+0x94>
 800f008:	2000c464 	.word	0x2000c464
 800f00c:	080129bc 	.word	0x080129bc
 800f010:	200092b4 	.word	0x200092b4
 800f014:	08012a00 	.word	0x08012a00

0800f018 <rmw_create_node>:
 800f018:	b199      	cbz	r1, 800f042 <rmw_create_node+0x2a>
 800f01a:	b430      	push	{r4, r5}
 800f01c:	4615      	mov	r5, r2
 800f01e:	461a      	mov	r2, r3
 800f020:	780b      	ldrb	r3, [r1, #0]
 800f022:	460c      	mov	r4, r1
 800f024:	b153      	cbz	r3, 800f03c <rmw_create_node+0x24>
 800f026:	b14d      	cbz	r5, 800f03c <rmw_create_node+0x24>
 800f028:	782b      	ldrb	r3, [r5, #0]
 800f02a:	b13b      	cbz	r3, 800f03c <rmw_create_node+0x24>
 800f02c:	b902      	cbnz	r2, 800f030 <rmw_create_node+0x18>
 800f02e:	69c2      	ldr	r2, [r0, #28]
 800f030:	4603      	mov	r3, r0
 800f032:	4629      	mov	r1, r5
 800f034:	4620      	mov	r0, r4
 800f036:	bc30      	pop	{r4, r5}
 800f038:	f7ff bf74 	b.w	800ef24 <create_node>
 800f03c:	2000      	movs	r0, #0
 800f03e:	bc30      	pop	{r4, r5}
 800f040:	4770      	bx	lr
 800f042:	2000      	movs	r0, #0
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop

0800f048 <rmw_destroy_node>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	b328      	cbz	r0, 800f098 <rmw_destroy_node+0x50>
 800f04c:	4607      	mov	r7, r0
 800f04e:	6800      	ldr	r0, [r0, #0]
 800f050:	b120      	cbz	r0, 800f05c <rmw_destroy_node+0x14>
 800f052:	4b36      	ldr	r3, [pc, #216]	@ (800f12c <rmw_destroy_node+0xe4>)
 800f054:	6819      	ldr	r1, [r3, #0]
 800f056:	f7f1 f8c3 	bl	80001e0 <strcmp>
 800f05a:	b9e8      	cbnz	r0, 800f098 <rmw_destroy_node+0x50>
 800f05c:	687d      	ldr	r5, [r7, #4]
 800f05e:	b1dd      	cbz	r5, 800f098 <rmw_destroy_node+0x50>
 800f060:	4b33      	ldr	r3, [pc, #204]	@ (800f130 <rmw_destroy_node+0xe8>)
 800f062:	681c      	ldr	r4, [r3, #0]
 800f064:	2c00      	cmp	r4, #0
 800f066:	d05f      	beq.n	800f128 <rmw_destroy_node+0xe0>
 800f068:	2600      	movs	r6, #0
 800f06a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f06e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f072:	429d      	cmp	r5, r3
 800f074:	d013      	beq.n	800f09e <rmw_destroy_node+0x56>
 800f076:	2c00      	cmp	r4, #0
 800f078:	d1f7      	bne.n	800f06a <rmw_destroy_node+0x22>
 800f07a:	4b2e      	ldr	r3, [pc, #184]	@ (800f134 <rmw_destroy_node+0xec>)
 800f07c:	681c      	ldr	r4, [r3, #0]
 800f07e:	b1c4      	cbz	r4, 800f0b2 <rmw_destroy_node+0x6a>
 800f080:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f084:	6a0b      	ldr	r3, [r1, #32]
 800f086:	429d      	cmp	r5, r3
 800f088:	d1f9      	bne.n	800f07e <rmw_destroy_node+0x36>
 800f08a:	317c      	adds	r1, #124	@ 0x7c
 800f08c:	4638      	mov	r0, r7
 800f08e:	f000 f8a1 	bl	800f1d4 <rmw_destroy_subscription>
 800f092:	2801      	cmp	r0, #1
 800f094:	4606      	mov	r6, r0
 800f096:	d1f2      	bne.n	800f07e <rmw_destroy_node+0x36>
 800f098:	2601      	movs	r6, #1
 800f09a:	4630      	mov	r0, r6
 800f09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f09e:	3184      	adds	r1, #132	@ 0x84
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f7fa f80b 	bl	80090bc <rmw_destroy_publisher>
 800f0a6:	2801      	cmp	r0, #1
 800f0a8:	4606      	mov	r6, r0
 800f0aa:	d0f5      	beq.n	800f098 <rmw_destroy_node+0x50>
 800f0ac:	2c00      	cmp	r4, #0
 800f0ae:	d1dc      	bne.n	800f06a <rmw_destroy_node+0x22>
 800f0b0:	e7e3      	b.n	800f07a <rmw_destroy_node+0x32>
 800f0b2:	4b21      	ldr	r3, [pc, #132]	@ (800f138 <rmw_destroy_node+0xf0>)
 800f0b4:	681c      	ldr	r4, [r3, #0]
 800f0b6:	b16c      	cbz	r4, 800f0d4 <rmw_destroy_node+0x8c>
 800f0b8:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f0bc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f0be:	429d      	cmp	r5, r3
 800f0c0:	d1f9      	bne.n	800f0b6 <rmw_destroy_node+0x6e>
 800f0c2:	317c      	adds	r1, #124	@ 0x7c
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	f000 f841 	bl	800f14c <rmw_destroy_service>
 800f0ca:	2801      	cmp	r0, #1
 800f0cc:	4606      	mov	r6, r0
 800f0ce:	d0e3      	beq.n	800f098 <rmw_destroy_node+0x50>
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	d1f1      	bne.n	800f0b8 <rmw_destroy_node+0x70>
 800f0d4:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <rmw_destroy_node+0xf4>)
 800f0d6:	681c      	ldr	r4, [r3, #0]
 800f0d8:	b16c      	cbz	r4, 800f0f6 <rmw_destroy_node+0xae>
 800f0da:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f0de:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f0e0:	429d      	cmp	r5, r3
 800f0e2:	d1f9      	bne.n	800f0d8 <rmw_destroy_node+0x90>
 800f0e4:	317c      	adds	r1, #124	@ 0x7c
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	f001 ffca 	bl	8011080 <rmw_destroy_client>
 800f0ec:	2801      	cmp	r0, #1
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	d0d2      	beq.n	800f098 <rmw_destroy_node+0x50>
 800f0f2:	2c00      	cmp	r4, #0
 800f0f4:	d1f1      	bne.n	800f0da <rmw_destroy_node+0x92>
 800f0f6:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800f0fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f0fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f102:	6819      	ldr	r1, [r3, #0]
 800f104:	f7fb fbce 	bl	800a8a4 <uxr_buffer_delete_entity>
 800f108:	4602      	mov	r2, r0
 800f10a:	6928      	ldr	r0, [r5, #16]
 800f10c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f110:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f114:	f7fa fa1a 	bl	800954c <run_xrce_session>
 800f118:	2800      	cmp	r0, #0
 800f11a:	bf08      	it	eq
 800f11c:	2602      	moveq	r6, #2
 800f11e:	4638      	mov	r0, r7
 800f120:	f7fa f94c 	bl	80093bc <rmw_uxrce_fini_node_memory>
 800f124:	4630      	mov	r0, r6
 800f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f128:	4626      	mov	r6, r4
 800f12a:	e7a6      	b.n	800f07a <rmw_destroy_node+0x32>
 800f12c:	08012e94 	.word	0x08012e94
 800f130:	200094a0 	.word	0x200094a0
 800f134:	2000c6fc 	.word	0x2000c6fc
 800f138:	2000c6ec 	.word	0x2000c6ec
 800f13c:	20009d20 	.word	0x20009d20

0800f140 <rmw_node_get_graph_guard_condition>:
 800f140:	6843      	ldr	r3, [r0, #4]
 800f142:	6918      	ldr	r0, [r3, #16]
 800f144:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop

0800f14c <rmw_destroy_service>:
 800f14c:	b570      	push	{r4, r5, r6, lr}
 800f14e:	b128      	cbz	r0, 800f15c <rmw_destroy_service+0x10>
 800f150:	4604      	mov	r4, r0
 800f152:	6800      	ldr	r0, [r0, #0]
 800f154:	460d      	mov	r5, r1
 800f156:	f7fa fa79 	bl	800964c <is_uxrce_rmw_identifier_valid>
 800f15a:	b910      	cbnz	r0, 800f162 <rmw_destroy_service+0x16>
 800f15c:	2401      	movs	r4, #1
 800f15e:	4620      	mov	r0, r4
 800f160:	bd70      	pop	{r4, r5, r6, pc}
 800f162:	6863      	ldr	r3, [r4, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d0f9      	beq.n	800f15c <rmw_destroy_service+0x10>
 800f168:	2d00      	cmp	r5, #0
 800f16a:	d0f7      	beq.n	800f15c <rmw_destroy_service+0x10>
 800f16c:	6828      	ldr	r0, [r5, #0]
 800f16e:	f7fa fa6d 	bl	800964c <is_uxrce_rmw_identifier_valid>
 800f172:	2800      	cmp	r0, #0
 800f174:	d0f2      	beq.n	800f15c <rmw_destroy_service+0x10>
 800f176:	686e      	ldr	r6, [r5, #4]
 800f178:	2e00      	cmp	r6, #0
 800f17a:	d0ef      	beq.n	800f15c <rmw_destroy_service+0x10>
 800f17c:	6864      	ldr	r4, [r4, #4]
 800f17e:	6932      	ldr	r2, [r6, #16]
 800f180:	6920      	ldr	r0, [r4, #16]
 800f182:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f186:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f18a:	6819      	ldr	r1, [r3, #0]
 800f18c:	f001 f834 	bl	80101f8 <uxr_buffer_cancel_data>
 800f190:	4602      	mov	r2, r0
 800f192:	6920      	ldr	r0, [r4, #16]
 800f194:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f198:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f19c:	f7fa f9d6 	bl	800954c <run_xrce_session>
 800f1a0:	6920      	ldr	r0, [r4, #16]
 800f1a2:	6932      	ldr	r2, [r6, #16]
 800f1a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f1a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1ac:	6819      	ldr	r1, [r3, #0]
 800f1ae:	f7fb fb79 	bl	800a8a4 <uxr_buffer_delete_entity>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	6920      	ldr	r0, [r4, #16]
 800f1b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f1ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f1be:	f7fa f9c5 	bl	800954c <run_xrce_session>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	bf14      	ite	ne
 800f1c8:	2400      	movne	r4, #0
 800f1ca:	2402      	moveq	r4, #2
 800f1cc:	f7fa f93a 	bl	8009444 <rmw_uxrce_fini_service_memory>
 800f1d0:	e7c5      	b.n	800f15e <rmw_destroy_service+0x12>
 800f1d2:	bf00      	nop

0800f1d4 <rmw_destroy_subscription>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	b128      	cbz	r0, 800f1e4 <rmw_destroy_subscription+0x10>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	6800      	ldr	r0, [r0, #0]
 800f1dc:	460d      	mov	r5, r1
 800f1de:	f7fa fa35 	bl	800964c <is_uxrce_rmw_identifier_valid>
 800f1e2:	b910      	cbnz	r0, 800f1ea <rmw_destroy_subscription+0x16>
 800f1e4:	2401      	movs	r4, #1
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ea:	6863      	ldr	r3, [r4, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d0f9      	beq.n	800f1e4 <rmw_destroy_subscription+0x10>
 800f1f0:	2d00      	cmp	r5, #0
 800f1f2:	d0f7      	beq.n	800f1e4 <rmw_destroy_subscription+0x10>
 800f1f4:	6828      	ldr	r0, [r5, #0]
 800f1f6:	f7fa fa29 	bl	800964c <is_uxrce_rmw_identifier_valid>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d0f2      	beq.n	800f1e4 <rmw_destroy_subscription+0x10>
 800f1fe:	686c      	ldr	r4, [r5, #4]
 800f200:	2c00      	cmp	r4, #0
 800f202:	d0ef      	beq.n	800f1e4 <rmw_destroy_subscription+0x10>
 800f204:	6a26      	ldr	r6, [r4, #32]
 800f206:	6962      	ldr	r2, [r4, #20]
 800f208:	6930      	ldr	r0, [r6, #16]
 800f20a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f20e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f212:	6819      	ldr	r1, [r3, #0]
 800f214:	f000 fff0 	bl	80101f8 <uxr_buffer_cancel_data>
 800f218:	4602      	mov	r2, r0
 800f21a:	6930      	ldr	r0, [r6, #16]
 800f21c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f220:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f224:	f7fa f992 	bl	800954c <run_xrce_session>
 800f228:	69e0      	ldr	r0, [r4, #28]
 800f22a:	f7ff fe59 	bl	800eee0 <destroy_topic>
 800f22e:	6a23      	ldr	r3, [r4, #32]
 800f230:	6962      	ldr	r2, [r4, #20]
 800f232:	6918      	ldr	r0, [r3, #16]
 800f234:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f238:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f23c:	6819      	ldr	r1, [r3, #0]
 800f23e:	f7fb fb31 	bl	800a8a4 <uxr_buffer_delete_entity>
 800f242:	6a21      	ldr	r1, [r4, #32]
 800f244:	6922      	ldr	r2, [r4, #16]
 800f246:	4603      	mov	r3, r0
 800f248:	6908      	ldr	r0, [r1, #16]
 800f24a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f24e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f252:	6809      	ldr	r1, [r1, #0]
 800f254:	461c      	mov	r4, r3
 800f256:	f7fb fb25 	bl	800a8a4 <uxr_buffer_delete_entity>
 800f25a:	4607      	mov	r7, r0
 800f25c:	6930      	ldr	r0, [r6, #16]
 800f25e:	4622      	mov	r2, r4
 800f260:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f264:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f268:	f7fa f970 	bl	800954c <run_xrce_session>
 800f26c:	4604      	mov	r4, r0
 800f26e:	6930      	ldr	r0, [r6, #16]
 800f270:	463a      	mov	r2, r7
 800f272:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f276:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f27a:	f7fa f967 	bl	800954c <run_xrce_session>
 800f27e:	b12c      	cbz	r4, 800f28c <rmw_destroy_subscription+0xb8>
 800f280:	b120      	cbz	r0, 800f28c <rmw_destroy_subscription+0xb8>
 800f282:	2400      	movs	r4, #0
 800f284:	4628      	mov	r0, r5
 800f286:	f7fa f8c7 	bl	8009418 <rmw_uxrce_fini_subscription_memory>
 800f28a:	e7ac      	b.n	800f1e6 <rmw_destroy_subscription+0x12>
 800f28c:	2402      	movs	r4, #2
 800f28e:	e7f9      	b.n	800f284 <rmw_destroy_subscription+0xb0>

0800f290 <rmw_uxrce_transport_init>:
 800f290:	b508      	push	{r3, lr}
 800f292:	b108      	cbz	r0, 800f298 <rmw_uxrce_transport_init+0x8>
 800f294:	f100 0210 	add.w	r2, r0, #16
 800f298:	b139      	cbz	r1, 800f2aa <rmw_uxrce_transport_init+0x1a>
 800f29a:	6949      	ldr	r1, [r1, #20]
 800f29c:	4610      	mov	r0, r2
 800f29e:	f000 fa41 	bl	800f724 <uxr_init_custom_transport>
 800f2a2:	f080 0001 	eor.w	r0, r0, #1
 800f2a6:	b2c0      	uxtb	r0, r0
 800f2a8:	bd08      	pop	{r3, pc}
 800f2aa:	4b04      	ldr	r3, [pc, #16]	@ (800f2bc <rmw_uxrce_transport_init+0x2c>)
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	6859      	ldr	r1, [r3, #4]
 800f2b0:	f000 fa38 	bl	800f724 <uxr_init_custom_transport>
 800f2b4:	f080 0001 	eor.w	r0, r0, #1
 800f2b8:	b2c0      	uxtb	r0, r0
 800f2ba:	bd08      	pop	{r3, pc}
 800f2bc:	20009470 	.word	0x20009470

0800f2c0 <rmw_uros_epoch_nanos>:
 800f2c0:	4b05      	ldr	r3, [pc, #20]	@ (800f2d8 <rmw_uros_epoch_nanos+0x18>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	b123      	cbz	r3, 800f2d0 <rmw_uros_epoch_nanos+0x10>
 800f2c6:	68d8      	ldr	r0, [r3, #12]
 800f2c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f2cc:	f7fb bd84 	b.w	800add8 <uxr_epoch_nanos>
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	2000c638 	.word	0x2000c638

0800f2dc <ucdr_serialize_endian_array_char>:
 800f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	461e      	mov	r6, r3
 800f2e4:	4690      	mov	r8, r2
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	f7fb fa1a 	bl	800a720 <ucdr_check_buffer_available_for>
 800f2ec:	b9e0      	cbnz	r0, 800f328 <ucdr_serialize_endian_array_char+0x4c>
 800f2ee:	4637      	mov	r7, r6
 800f2f0:	e009      	b.n	800f306 <ucdr_serialize_endian_array_char+0x2a>
 800f2f2:	68a0      	ldr	r0, [r4, #8]
 800f2f4:	f002 fba7 	bl	8011a46 <memcpy>
 800f2f8:	68a2      	ldr	r2, [r4, #8]
 800f2fa:	6923      	ldr	r3, [r4, #16]
 800f2fc:	442a      	add	r2, r5
 800f2fe:	442b      	add	r3, r5
 800f300:	1b7f      	subs	r7, r7, r5
 800f302:	60a2      	str	r2, [r4, #8]
 800f304:	6123      	str	r3, [r4, #16]
 800f306:	2201      	movs	r2, #1
 800f308:	4639      	mov	r1, r7
 800f30a:	4620      	mov	r0, r4
 800f30c:	f7fb fa8e 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800f310:	1bf1      	subs	r1, r6, r7
 800f312:	4441      	add	r1, r8
 800f314:	4605      	mov	r5, r0
 800f316:	4602      	mov	r2, r0
 800f318:	2800      	cmp	r0, #0
 800f31a:	d1ea      	bne.n	800f2f2 <ucdr_serialize_endian_array_char+0x16>
 800f31c:	2301      	movs	r3, #1
 800f31e:	7da0      	ldrb	r0, [r4, #22]
 800f320:	7563      	strb	r3, [r4, #21]
 800f322:	4058      	eors	r0, r3
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f328:	4632      	mov	r2, r6
 800f32a:	68a0      	ldr	r0, [r4, #8]
 800f32c:	4641      	mov	r1, r8
 800f32e:	f002 fb8a 	bl	8011a46 <memcpy>
 800f332:	68a2      	ldr	r2, [r4, #8]
 800f334:	6923      	ldr	r3, [r4, #16]
 800f336:	4432      	add	r2, r6
 800f338:	4433      	add	r3, r6
 800f33a:	60a2      	str	r2, [r4, #8]
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	e7ed      	b.n	800f31c <ucdr_serialize_endian_array_char+0x40>

0800f340 <ucdr_deserialize_endian_array_char>:
 800f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f344:	4619      	mov	r1, r3
 800f346:	461e      	mov	r6, r3
 800f348:	4690      	mov	r8, r2
 800f34a:	4604      	mov	r4, r0
 800f34c:	f7fb f9e8 	bl	800a720 <ucdr_check_buffer_available_for>
 800f350:	b9e0      	cbnz	r0, 800f38c <ucdr_deserialize_endian_array_char+0x4c>
 800f352:	4637      	mov	r7, r6
 800f354:	e009      	b.n	800f36a <ucdr_deserialize_endian_array_char+0x2a>
 800f356:	68a1      	ldr	r1, [r4, #8]
 800f358:	f002 fb75 	bl	8011a46 <memcpy>
 800f35c:	68a2      	ldr	r2, [r4, #8]
 800f35e:	6923      	ldr	r3, [r4, #16]
 800f360:	442a      	add	r2, r5
 800f362:	442b      	add	r3, r5
 800f364:	1b7f      	subs	r7, r7, r5
 800f366:	60a2      	str	r2, [r4, #8]
 800f368:	6123      	str	r3, [r4, #16]
 800f36a:	2201      	movs	r2, #1
 800f36c:	4639      	mov	r1, r7
 800f36e:	4620      	mov	r0, r4
 800f370:	f7fb fa5c 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800f374:	4605      	mov	r5, r0
 800f376:	1bf0      	subs	r0, r6, r7
 800f378:	4440      	add	r0, r8
 800f37a:	462a      	mov	r2, r5
 800f37c:	2d00      	cmp	r5, #0
 800f37e:	d1ea      	bne.n	800f356 <ucdr_deserialize_endian_array_char+0x16>
 800f380:	2301      	movs	r3, #1
 800f382:	7da0      	ldrb	r0, [r4, #22]
 800f384:	7563      	strb	r3, [r4, #21]
 800f386:	4058      	eors	r0, r3
 800f388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38c:	4632      	mov	r2, r6
 800f38e:	68a1      	ldr	r1, [r4, #8]
 800f390:	4640      	mov	r0, r8
 800f392:	f002 fb58 	bl	8011a46 <memcpy>
 800f396:	68a2      	ldr	r2, [r4, #8]
 800f398:	6923      	ldr	r3, [r4, #16]
 800f39a:	4432      	add	r2, r6
 800f39c:	4433      	add	r3, r6
 800f39e:	60a2      	str	r2, [r4, #8]
 800f3a0:	6123      	str	r3, [r4, #16]
 800f3a2:	e7ed      	b.n	800f380 <ucdr_deserialize_endian_array_char+0x40>

0800f3a4 <ucdr_serialize_array_uint8_t>:
 800f3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a8:	4688      	mov	r8, r1
 800f3aa:	4611      	mov	r1, r2
 800f3ac:	4616      	mov	r6, r2
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	f7fb f9b6 	bl	800a720 <ucdr_check_buffer_available_for>
 800f3b4:	b9e0      	cbnz	r0, 800f3f0 <ucdr_serialize_array_uint8_t+0x4c>
 800f3b6:	4637      	mov	r7, r6
 800f3b8:	e009      	b.n	800f3ce <ucdr_serialize_array_uint8_t+0x2a>
 800f3ba:	68a0      	ldr	r0, [r4, #8]
 800f3bc:	f002 fb43 	bl	8011a46 <memcpy>
 800f3c0:	68a2      	ldr	r2, [r4, #8]
 800f3c2:	6923      	ldr	r3, [r4, #16]
 800f3c4:	442a      	add	r2, r5
 800f3c6:	442b      	add	r3, r5
 800f3c8:	1b7f      	subs	r7, r7, r5
 800f3ca:	60a2      	str	r2, [r4, #8]
 800f3cc:	6123      	str	r3, [r4, #16]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f7fb fa2a 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800f3d8:	1bf1      	subs	r1, r6, r7
 800f3da:	4441      	add	r1, r8
 800f3dc:	4605      	mov	r5, r0
 800f3de:	4602      	mov	r2, r0
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d1ea      	bne.n	800f3ba <ucdr_serialize_array_uint8_t+0x16>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	7da0      	ldrb	r0, [r4, #22]
 800f3e8:	7563      	strb	r3, [r4, #21]
 800f3ea:	4058      	eors	r0, r3
 800f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f0:	4632      	mov	r2, r6
 800f3f2:	68a0      	ldr	r0, [r4, #8]
 800f3f4:	4641      	mov	r1, r8
 800f3f6:	f002 fb26 	bl	8011a46 <memcpy>
 800f3fa:	68a3      	ldr	r3, [r4, #8]
 800f3fc:	6922      	ldr	r2, [r4, #16]
 800f3fe:	4433      	add	r3, r6
 800f400:	4432      	add	r2, r6
 800f402:	60a3      	str	r3, [r4, #8]
 800f404:	6122      	str	r2, [r4, #16]
 800f406:	e7ed      	b.n	800f3e4 <ucdr_serialize_array_uint8_t+0x40>

0800f408 <ucdr_serialize_endian_array_uint8_t>:
 800f408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40c:	4619      	mov	r1, r3
 800f40e:	461e      	mov	r6, r3
 800f410:	4690      	mov	r8, r2
 800f412:	4604      	mov	r4, r0
 800f414:	f7fb f984 	bl	800a720 <ucdr_check_buffer_available_for>
 800f418:	b9e0      	cbnz	r0, 800f454 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f41a:	4637      	mov	r7, r6
 800f41c:	e009      	b.n	800f432 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f41e:	68a0      	ldr	r0, [r4, #8]
 800f420:	f002 fb11 	bl	8011a46 <memcpy>
 800f424:	68a2      	ldr	r2, [r4, #8]
 800f426:	6923      	ldr	r3, [r4, #16]
 800f428:	442a      	add	r2, r5
 800f42a:	442b      	add	r3, r5
 800f42c:	1b7f      	subs	r7, r7, r5
 800f42e:	60a2      	str	r2, [r4, #8]
 800f430:	6123      	str	r3, [r4, #16]
 800f432:	2201      	movs	r2, #1
 800f434:	4639      	mov	r1, r7
 800f436:	4620      	mov	r0, r4
 800f438:	f7fb f9f8 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800f43c:	1bf1      	subs	r1, r6, r7
 800f43e:	4441      	add	r1, r8
 800f440:	4605      	mov	r5, r0
 800f442:	4602      	mov	r2, r0
 800f444:	2800      	cmp	r0, #0
 800f446:	d1ea      	bne.n	800f41e <ucdr_serialize_endian_array_uint8_t+0x16>
 800f448:	2301      	movs	r3, #1
 800f44a:	7da0      	ldrb	r0, [r4, #22]
 800f44c:	7563      	strb	r3, [r4, #21]
 800f44e:	4058      	eors	r0, r3
 800f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f454:	4632      	mov	r2, r6
 800f456:	68a0      	ldr	r0, [r4, #8]
 800f458:	4641      	mov	r1, r8
 800f45a:	f002 faf4 	bl	8011a46 <memcpy>
 800f45e:	68a2      	ldr	r2, [r4, #8]
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	4432      	add	r2, r6
 800f464:	4433      	add	r3, r6
 800f466:	60a2      	str	r2, [r4, #8]
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	e7ed      	b.n	800f448 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f46c <ucdr_deserialize_array_uint8_t>:
 800f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f470:	4688      	mov	r8, r1
 800f472:	4611      	mov	r1, r2
 800f474:	4616      	mov	r6, r2
 800f476:	4604      	mov	r4, r0
 800f478:	f7fb f952 	bl	800a720 <ucdr_check_buffer_available_for>
 800f47c:	b9e0      	cbnz	r0, 800f4b8 <ucdr_deserialize_array_uint8_t+0x4c>
 800f47e:	4637      	mov	r7, r6
 800f480:	e009      	b.n	800f496 <ucdr_deserialize_array_uint8_t+0x2a>
 800f482:	68a1      	ldr	r1, [r4, #8]
 800f484:	f002 fadf 	bl	8011a46 <memcpy>
 800f488:	68a2      	ldr	r2, [r4, #8]
 800f48a:	6923      	ldr	r3, [r4, #16]
 800f48c:	442a      	add	r2, r5
 800f48e:	442b      	add	r3, r5
 800f490:	1b7f      	subs	r7, r7, r5
 800f492:	60a2      	str	r2, [r4, #8]
 800f494:	6123      	str	r3, [r4, #16]
 800f496:	2201      	movs	r2, #1
 800f498:	4639      	mov	r1, r7
 800f49a:	4620      	mov	r0, r4
 800f49c:	f7fb f9c6 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	1bf0      	subs	r0, r6, r7
 800f4a4:	4440      	add	r0, r8
 800f4a6:	462a      	mov	r2, r5
 800f4a8:	2d00      	cmp	r5, #0
 800f4aa:	d1ea      	bne.n	800f482 <ucdr_deserialize_array_uint8_t+0x16>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	7da0      	ldrb	r0, [r4, #22]
 800f4b0:	7563      	strb	r3, [r4, #21]
 800f4b2:	4058      	eors	r0, r3
 800f4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b8:	4632      	mov	r2, r6
 800f4ba:	68a1      	ldr	r1, [r4, #8]
 800f4bc:	4640      	mov	r0, r8
 800f4be:	f002 fac2 	bl	8011a46 <memcpy>
 800f4c2:	68a3      	ldr	r3, [r4, #8]
 800f4c4:	6922      	ldr	r2, [r4, #16]
 800f4c6:	4433      	add	r3, r6
 800f4c8:	4432      	add	r2, r6
 800f4ca:	60a3      	str	r3, [r4, #8]
 800f4cc:	6122      	str	r2, [r4, #16]
 800f4ce:	e7ed      	b.n	800f4ac <ucdr_deserialize_array_uint8_t+0x40>

0800f4d0 <ucdr_deserialize_endian_array_uint8_t>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	461e      	mov	r6, r3
 800f4d8:	4690      	mov	r8, r2
 800f4da:	4604      	mov	r4, r0
 800f4dc:	f7fb f920 	bl	800a720 <ucdr_check_buffer_available_for>
 800f4e0:	b9e0      	cbnz	r0, 800f51c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f4e2:	4637      	mov	r7, r6
 800f4e4:	e009      	b.n	800f4fa <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f4e6:	68a1      	ldr	r1, [r4, #8]
 800f4e8:	f002 faad 	bl	8011a46 <memcpy>
 800f4ec:	68a2      	ldr	r2, [r4, #8]
 800f4ee:	6923      	ldr	r3, [r4, #16]
 800f4f0:	442a      	add	r2, r5
 800f4f2:	442b      	add	r3, r5
 800f4f4:	1b7f      	subs	r7, r7, r5
 800f4f6:	60a2      	str	r2, [r4, #8]
 800f4f8:	6123      	str	r3, [r4, #16]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	4620      	mov	r0, r4
 800f500:	f7fb f994 	bl	800a82c <ucdr_check_final_buffer_behavior_array>
 800f504:	4605      	mov	r5, r0
 800f506:	1bf0      	subs	r0, r6, r7
 800f508:	4440      	add	r0, r8
 800f50a:	462a      	mov	r2, r5
 800f50c:	2d00      	cmp	r5, #0
 800f50e:	d1ea      	bne.n	800f4e6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f510:	2301      	movs	r3, #1
 800f512:	7da0      	ldrb	r0, [r4, #22]
 800f514:	7563      	strb	r3, [r4, #21]
 800f516:	4058      	eors	r0, r3
 800f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51c:	4632      	mov	r2, r6
 800f51e:	68a1      	ldr	r1, [r4, #8]
 800f520:	4640      	mov	r0, r8
 800f522:	f002 fa90 	bl	8011a46 <memcpy>
 800f526:	68a2      	ldr	r2, [r4, #8]
 800f528:	6923      	ldr	r3, [r4, #16]
 800f52a:	4432      	add	r2, r6
 800f52c:	4433      	add	r3, r6
 800f52e:	60a2      	str	r2, [r4, #8]
 800f530:	6123      	str	r3, [r4, #16]
 800f532:	e7ed      	b.n	800f510 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f534 <ucdr_serialize_sequence_char>:
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	460e      	mov	r6, r1
 800f538:	4615      	mov	r5, r2
 800f53a:	7d01      	ldrb	r1, [r0, #20]
 800f53c:	4604      	mov	r4, r0
 800f53e:	f7fa fc45 	bl	8009dcc <ucdr_serialize_endian_uint32_t>
 800f542:	b90d      	cbnz	r5, 800f548 <ucdr_serialize_sequence_char+0x14>
 800f544:	2001      	movs	r0, #1
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	7d21      	ldrb	r1, [r4, #20]
 800f54a:	462b      	mov	r3, r5
 800f54c:	4632      	mov	r2, r6
 800f54e:	4620      	mov	r0, r4
 800f550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f554:	f7ff bec2 	b.w	800f2dc <ucdr_serialize_endian_array_char>

0800f558 <ucdr_deserialize_sequence_char>:
 800f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f55c:	461d      	mov	r5, r3
 800f55e:	4616      	mov	r6, r2
 800f560:	460f      	mov	r7, r1
 800f562:	461a      	mov	r2, r3
 800f564:	7d01      	ldrb	r1, [r0, #20]
 800f566:	4604      	mov	r4, r0
 800f568:	f7fa fd58 	bl	800a01c <ucdr_deserialize_endian_uint32_t>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	429e      	cmp	r6, r3
 800f570:	bf3c      	itt	cc
 800f572:	2201      	movcc	r2, #1
 800f574:	75a2      	strbcc	r2, [r4, #22]
 800f576:	b913      	cbnz	r3, 800f57e <ucdr_deserialize_sequence_char+0x26>
 800f578:	2001      	movs	r0, #1
 800f57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57e:	7d21      	ldrb	r1, [r4, #20]
 800f580:	463a      	mov	r2, r7
 800f582:	4620      	mov	r0, r4
 800f584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f588:	f7ff beda 	b.w	800f340 <ucdr_deserialize_endian_array_char>

0800f58c <ucdr_serialize_sequence_uint8_t>:
 800f58c:	b570      	push	{r4, r5, r6, lr}
 800f58e:	460e      	mov	r6, r1
 800f590:	4615      	mov	r5, r2
 800f592:	7d01      	ldrb	r1, [r0, #20]
 800f594:	4604      	mov	r4, r0
 800f596:	f7fa fc19 	bl	8009dcc <ucdr_serialize_endian_uint32_t>
 800f59a:	b90d      	cbnz	r5, 800f5a0 <ucdr_serialize_sequence_uint8_t+0x14>
 800f59c:	2001      	movs	r0, #1
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	7d21      	ldrb	r1, [r4, #20]
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	4632      	mov	r2, r6
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5ac:	f7ff bf2c 	b.w	800f408 <ucdr_serialize_endian_array_uint8_t>

0800f5b0 <ucdr_deserialize_sequence_uint8_t>:
 800f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b4:	461d      	mov	r5, r3
 800f5b6:	4616      	mov	r6, r2
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	7d01      	ldrb	r1, [r0, #20]
 800f5be:	4604      	mov	r4, r0
 800f5c0:	f7fa fd2c 	bl	800a01c <ucdr_deserialize_endian_uint32_t>
 800f5c4:	682b      	ldr	r3, [r5, #0]
 800f5c6:	429e      	cmp	r6, r3
 800f5c8:	bf3c      	itt	cc
 800f5ca:	2201      	movcc	r2, #1
 800f5cc:	75a2      	strbcc	r2, [r4, #22]
 800f5ce:	b913      	cbnz	r3, 800f5d6 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f5d0:	2001      	movs	r0, #1
 800f5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d6:	7d21      	ldrb	r1, [r4, #20]
 800f5d8:	463a      	mov	r2, r7
 800f5da:	4620      	mov	r0, r4
 800f5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e0:	f7ff bf76 	b.w	800f4d0 <ucdr_deserialize_endian_array_uint8_t>

0800f5e4 <ucdr_serialize_string>:
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	9101      	str	r1, [sp, #4]
 800f5ee:	f7f0 fe01 	bl	80001f4 <strlen>
 800f5f2:	9901      	ldr	r1, [sp, #4]
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	3201      	adds	r2, #1
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	b002      	add	sp, #8
 800f5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f600:	f7ff bf98 	b.w	800f534 <ucdr_serialize_sequence_char>

0800f604 <ucdr_deserialize_string>:
 800f604:	b500      	push	{lr}
 800f606:	b083      	sub	sp, #12
 800f608:	ab01      	add	r3, sp, #4
 800f60a:	f7ff ffa5 	bl	800f558 <ucdr_deserialize_sequence_char>
 800f60e:	b003      	add	sp, #12
 800f610:	f85d fb04 	ldr.w	pc, [sp], #4

0800f614 <get_custom_error>:
 800f614:	4b01      	ldr	r3, [pc, #4]	@ (800f61c <get_custom_error+0x8>)
 800f616:	7818      	ldrb	r0, [r3, #0]
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	200092f0 	.word	0x200092f0

0800f620 <recv_custom_msg>:
 800f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800f628:	b089      	sub	sp, #36	@ 0x24
 800f62a:	2600      	movs	r6, #0
 800f62c:	4604      	mov	r4, r0
 800f62e:	9305      	str	r3, [sp, #20]
 800f630:	468a      	mov	sl, r1
 800f632:	4693      	mov	fp, r2
 800f634:	f88d 601e 	strb.w	r6, [sp, #30]
 800f638:	b325      	cbz	r5, 800f684 <recv_custom_msg+0x64>
 800f63a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800f63e:	f10d 081f 	add.w	r8, sp, #31
 800f642:	af05      	add	r7, sp, #20
 800f644:	f10d 061e 	add.w	r6, sp, #30
 800f648:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800f64c:	e002      	b.n	800f654 <recv_custom_msg+0x34>
 800f64e:	9b05      	ldr	r3, [sp, #20]
 800f650:	2b00      	cmp	r3, #0
 800f652:	dd0f      	ble.n	800f674 <recv_custom_msg+0x54>
 800f654:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f658:	e9cd 5600 	strd	r5, r6, [sp]
 800f65c:	4623      	mov	r3, r4
 800f65e:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800f662:	4622      	mov	r2, r4
 800f664:	4648      	mov	r0, r9
 800f666:	f001 f8c1 	bl	80107ec <uxr_read_framed_msg>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d0ef      	beq.n	800f64e <recv_custom_msg+0x2e>
 800f66e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f672:	b1b3      	cbz	r3, 800f6a2 <recv_custom_msg+0x82>
 800f674:	4b0f      	ldr	r3, [pc, #60]	@ (800f6b4 <recv_custom_msg+0x94>)
 800f676:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f67a:	701a      	strb	r2, [r3, #0]
 800f67c:	2000      	movs	r0, #0
 800f67e:	b009      	add	sp, #36	@ 0x24
 800f680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f684:	f10d 021f 	add.w	r2, sp, #31
 800f688:	9200      	str	r2, [sp, #0]
 800f68a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800f68e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f692:	4601      	mov	r1, r0
 800f694:	47a8      	blx	r5
 800f696:	2800      	cmp	r0, #0
 800f698:	d0ec      	beq.n	800f674 <recv_custom_msg+0x54>
 800f69a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1e8      	bne.n	800f674 <recv_custom_msg+0x54>
 800f6a2:	f8cb 0000 	str.w	r0, [fp]
 800f6a6:	2001      	movs	r0, #1
 800f6a8:	f8ca 4000 	str.w	r4, [sl]
 800f6ac:	b009      	add	sp, #36	@ 0x24
 800f6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b2:	bf00      	nop
 800f6b4:	200092f0 	.word	0x200092f0

0800f6b8 <send_custom_msg>:
 800f6b8:	b570      	push	{r4, r5, r6, lr}
 800f6ba:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800f6be:	b086      	sub	sp, #24
 800f6c0:	4616      	mov	r6, r2
 800f6c2:	b975      	cbnz	r5, 800f6e2 <send_custom_msg+0x2a>
 800f6c4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800f6c8:	f10d 0317 	add.w	r3, sp, #23
 800f6cc:	47a0      	blx	r4
 800f6ce:	b108      	cbz	r0, 800f6d4 <send_custom_msg+0x1c>
 800f6d0:	42b0      	cmp	r0, r6
 800f6d2:	d015      	beq.n	800f700 <send_custom_msg+0x48>
 800f6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f708 <send_custom_msg+0x50>)
 800f6d6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f6da:	701a      	strb	r2, [r3, #0]
 800f6dc:	2000      	movs	r0, #0
 800f6de:	b006      	add	sp, #24
 800f6e0:	bd70      	pop	{r4, r5, r6, pc}
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f10d 0117 	add.w	r1, sp, #23
 800f6ea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f6ee:	9600      	str	r6, [sp, #0]
 800f6f0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800f6fa:	f000 fe8f 	bl	801041c <uxr_write_framed_msg>
 800f6fe:	e7e6      	b.n	800f6ce <send_custom_msg+0x16>
 800f700:	2001      	movs	r0, #1
 800f702:	b006      	add	sp, #24
 800f704:	bd70      	pop	{r4, r5, r6, pc}
 800f706:	bf00      	nop
 800f708:	200092f0 	.word	0x200092f0

0800f70c <uxr_set_custom_transport_callbacks>:
 800f70c:	b430      	push	{r4, r5}
 800f70e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800f712:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800f716:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 800f71a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800f71e:	bc30      	pop	{r4, r5}
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop

0800f724 <uxr_init_custom_transport>:
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800f72a:	b303      	cbz	r3, 800f76e <uxr_init_custom_transport+0x4a>
 800f72c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800f730:	4604      	mov	r4, r0
 800f732:	b1e2      	cbz	r2, 800f76e <uxr_init_custom_transport+0x4a>
 800f734:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800f738:	b1ca      	cbz	r2, 800f76e <uxr_init_custom_transport+0x4a>
 800f73a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800f73e:	b1b2      	cbz	r2, 800f76e <uxr_init_custom_transport+0x4a>
 800f740:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800f744:	4798      	blx	r3
 800f746:	4605      	mov	r5, r0
 800f748:	b188      	cbz	r0, 800f76e <uxr_init_custom_transport+0x4a>
 800f74a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800f74e:	b98b      	cbnz	r3, 800f774 <uxr_init_custom_transport+0x50>
 800f750:	480b      	ldr	r0, [pc, #44]	@ (800f780 <uxr_init_custom_transport+0x5c>)
 800f752:	490c      	ldr	r1, [pc, #48]	@ (800f784 <uxr_init_custom_transport+0x60>)
 800f754:	4a0c      	ldr	r2, [pc, #48]	@ (800f788 <uxr_init_custom_transport+0x64>)
 800f756:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 800f75a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f75e:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 800f762:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800f766:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800f76a:	4628      	mov	r0, r5
 800f76c:	bd38      	pop	{r3, r4, r5, pc}
 800f76e:	2500      	movs	r5, #0
 800f770:	4628      	mov	r0, r5
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	2100      	movs	r1, #0
 800f776:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800f77a:	f000 fe49 	bl	8010410 <uxr_init_framing_io>
 800f77e:	e7e7      	b.n	800f750 <uxr_init_custom_transport+0x2c>
 800f780:	0800f6b9 	.word	0x0800f6b9
 800f784:	0800f621 	.word	0x0800f621
 800f788:	0800f615 	.word	0x0800f615

0800f78c <uxr_close_custom_transport>:
 800f78c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800f790:	4718      	bx	r3
 800f792:	bf00      	nop

0800f794 <uxr_init_input_best_effort_stream>:
 800f794:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f798:	8003      	strh	r3, [r0, #0]
 800f79a:	4770      	bx	lr

0800f79c <uxr_reset_input_best_effort_stream>:
 800f79c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f7a0:	8003      	strh	r3, [r0, #0]
 800f7a2:	4770      	bx	lr

0800f7a4 <uxr_receive_best_effort_message>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	8800      	ldrh	r0, [r0, #0]
 800f7aa:	460d      	mov	r5, r1
 800f7ac:	f000 fe18 	bl	80103e0 <uxr_seq_num_cmp>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800f7b8:	bfb8      	it	lt
 800f7ba:	8025      	strhlt	r5, [r4, #0]
 800f7bc:	bd38      	pop	{r3, r4, r5, pc}
 800f7be:	bf00      	nop

0800f7c0 <on_full_input_buffer>:
 800f7c0:	b570      	push	{r4, r5, r6, lr}
 800f7c2:	6802      	ldr	r2, [r0, #0]
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	6809      	ldr	r1, [r1, #0]
 800f7c8:	686c      	ldr	r4, [r5, #4]
 800f7ca:	1a53      	subs	r3, r2, r1
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	8928      	ldrh	r0, [r5, #8]
 800f7d0:	fbb4 f4f0 	udiv	r4, r4, r0
 800f7d4:	fbb3 f3f4 	udiv	r3, r3, r4
 800f7d8:	3301      	adds	r3, #1
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	fbb3 f2f0 	udiv	r2, r3, r0
 800f7e0:	fb00 3312 	mls	r3, r0, r2, r3
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	fb04 f403 	mul.w	r4, r4, r3
 800f7ea:	1d23      	adds	r3, r4, #4
 800f7ec:	440b      	add	r3, r1
 800f7ee:	7d28      	ldrb	r0, [r5, #20]
 800f7f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800f7f4:	b110      	cbz	r0, 800f7fc <on_full_input_buffer+0x3c>
 800f7f6:	2000      	movs	r0, #0
 800f7f8:	f843 0c04 	str.w	r0, [r3, #-4]
 800f7fc:	2a03      	cmp	r2, #3
 800f7fe:	d801      	bhi.n	800f804 <on_full_input_buffer+0x44>
 800f800:	2001      	movs	r0, #1
 800f802:	bd70      	pop	{r4, r5, r6, pc}
 800f804:	3408      	adds	r4, #8
 800f806:	6933      	ldr	r3, [r6, #16]
 800f808:	4421      	add	r1, r4
 800f80a:	4630      	mov	r0, r6
 800f80c:	3a04      	subs	r2, #4
 800f80e:	f7fa ffd1 	bl	800a7b4 <ucdr_init_buffer_origin>
 800f812:	4630      	mov	r0, r6
 800f814:	4902      	ldr	r1, [pc, #8]	@ (800f820 <on_full_input_buffer+0x60>)
 800f816:	462a      	mov	r2, r5
 800f818:	f7fa ffaa 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800f81c:	2000      	movs	r0, #0
 800f81e:	bd70      	pop	{r4, r5, r6, pc}
 800f820:	0800f7c1 	.word	0x0800f7c1

0800f824 <uxr_init_input_reliable_stream>:
 800f824:	b470      	push	{r4, r5, r6}
 800f826:	9c03      	ldr	r4, [sp, #12]
 800f828:	6001      	str	r1, [r0, #0]
 800f82a:	2600      	movs	r6, #0
 800f82c:	8103      	strh	r3, [r0, #8]
 800f82e:	6042      	str	r2, [r0, #4]
 800f830:	6104      	str	r4, [r0, #16]
 800f832:	7506      	strb	r6, [r0, #20]
 800f834:	b1ab      	cbz	r3, 800f862 <uxr_init_input_reliable_stream+0x3e>
 800f836:	600e      	str	r6, [r1, #0]
 800f838:	8901      	ldrh	r1, [r0, #8]
 800f83a:	2901      	cmp	r1, #1
 800f83c:	d911      	bls.n	800f862 <uxr_init_input_reliable_stream+0x3e>
 800f83e:	2201      	movs	r2, #1
 800f840:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f844:	fbb2 f3f1 	udiv	r3, r2, r1
 800f848:	fb01 2313 	mls	r3, r1, r3, r2
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	fbb4 f1f1 	udiv	r1, r4, r1
 800f852:	fb03 f301 	mul.w	r3, r3, r1
 800f856:	3201      	adds	r2, #1
 800f858:	50ee      	str	r6, [r5, r3]
 800f85a:	8901      	ldrh	r1, [r0, #8]
 800f85c:	b292      	uxth	r2, r2
 800f85e:	4291      	cmp	r1, r2
 800f860:	d8ee      	bhi.n	800f840 <uxr_init_input_reliable_stream+0x1c>
 800f862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f866:	bc70      	pop	{r4, r5, r6}
 800f868:	60c3      	str	r3, [r0, #12]
 800f86a:	4770      	bx	lr

0800f86c <uxr_reset_input_reliable_stream>:
 800f86c:	8902      	ldrh	r2, [r0, #8]
 800f86e:	b1ca      	cbz	r2, 800f8a4 <uxr_reset_input_reliable_stream+0x38>
 800f870:	b470      	push	{r4, r5, r6}
 800f872:	2400      	movs	r4, #0
 800f874:	4621      	mov	r1, r4
 800f876:	4626      	mov	r6, r4
 800f878:	fbb1 f3f2 	udiv	r3, r1, r2
 800f87c:	fb02 1313 	mls	r3, r2, r3, r1
 800f880:	e9d0 5100 	ldrd	r5, r1, [r0]
 800f884:	b29b      	uxth	r3, r3
 800f886:	fbb1 f2f2 	udiv	r2, r1, r2
 800f88a:	fb03 f302 	mul.w	r3, r3, r2
 800f88e:	3401      	adds	r4, #1
 800f890:	50ee      	str	r6, [r5, r3]
 800f892:	8902      	ldrh	r2, [r0, #8]
 800f894:	b2a1      	uxth	r1, r4
 800f896:	428a      	cmp	r2, r1
 800f898:	d8ee      	bhi.n	800f878 <uxr_reset_input_reliable_stream+0xc>
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f89e:	bc70      	pop	{r4, r5, r6}
 800f8a0:	60c3      	str	r3, [r0, #12]
 800f8a2:	4770      	bx	lr
 800f8a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f8a8:	60c3      	str	r3, [r0, #12]
 800f8aa:	4770      	bx	lr

0800f8ac <uxr_receive_reliable_message>:
 800f8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	8901      	ldrh	r1, [r0, #8]
 800f8b6:	8980      	ldrh	r0, [r0, #12]
 800f8b8:	4690      	mov	r8, r2
 800f8ba:	461f      	mov	r7, r3
 800f8bc:	f000 fd88 	bl	80103d0 <uxr_seq_num_add>
 800f8c0:	4629      	mov	r1, r5
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	89a0      	ldrh	r0, [r4, #12]
 800f8c6:	f000 fd8b 	bl	80103e0 <uxr_seq_num_cmp>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	db0a      	blt.n	800f8e4 <uxr_receive_reliable_message+0x38>
 800f8ce:	2600      	movs	r6, #0
 800f8d0:	89e0      	ldrh	r0, [r4, #14]
 800f8d2:	4629      	mov	r1, r5
 800f8d4:	f000 fd84 	bl	80103e0 <uxr_seq_num_cmp>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	bfb8      	it	lt
 800f8dc:	81e5      	strhlt	r5, [r4, #14]
 800f8de:	4630      	mov	r0, r6
 800f8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	f000 fd7a 	bl	80103e0 <uxr_seq_num_cmp>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	dbee      	blt.n	800f8ce <uxr_receive_reliable_message+0x22>
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	4798      	blx	r3
 800f8f6:	2101      	movs	r1, #1
 800f8f8:	4681      	mov	r9, r0
 800f8fa:	89a0      	ldrh	r0, [r4, #12]
 800f8fc:	f000 fd68 	bl	80103d0 <uxr_seq_num_add>
 800f900:	f1b9 0f00 	cmp.w	r9, #0
 800f904:	d101      	bne.n	800f90a <uxr_receive_reliable_message+0x5e>
 800f906:	4285      	cmp	r5, r0
 800f908:	d049      	beq.n	800f99e <uxr_receive_reliable_message+0xf2>
 800f90a:	8921      	ldrh	r1, [r4, #8]
 800f90c:	fbb5 f3f1 	udiv	r3, r5, r1
 800f910:	fb01 5313 	mls	r3, r1, r3, r5
 800f914:	b29b      	uxth	r3, r3
 800f916:	6862      	ldr	r2, [r4, #4]
 800f918:	6820      	ldr	r0, [r4, #0]
 800f91a:	fbb2 f2f1 	udiv	r2, r2, r1
 800f91e:	fb03 f302 	mul.w	r3, r3, r2
 800f922:	3304      	adds	r3, #4
 800f924:	4418      	add	r0, r3
 800f926:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1cf      	bne.n	800f8ce <uxr_receive_reliable_message+0x22>
 800f92e:	4641      	mov	r1, r8
 800f930:	463a      	mov	r2, r7
 800f932:	f002 f888 	bl	8011a46 <memcpy>
 800f936:	8921      	ldrh	r1, [r4, #8]
 800f938:	fbb5 f3f1 	udiv	r3, r5, r1
 800f93c:	fb01 5313 	mls	r3, r1, r3, r5
 800f940:	b29b      	uxth	r3, r3
 800f942:	6862      	ldr	r2, [r4, #4]
 800f944:	fbb2 f2f1 	udiv	r2, r2, r1
 800f948:	6821      	ldr	r1, [r4, #0]
 800f94a:	fb03 f302 	mul.w	r3, r3, r2
 800f94e:	2201      	movs	r2, #1
 800f950:	50cf      	str	r7, [r1, r3]
 800f952:	9b08      	ldr	r3, [sp, #32]
 800f954:	701a      	strb	r2, [r3, #0]
 800f956:	f1b9 0f00 	cmp.w	r9, #0
 800f95a:	d0b8      	beq.n	800f8ce <uxr_receive_reliable_message+0x22>
 800f95c:	89a6      	ldrh	r6, [r4, #12]
 800f95e:	e001      	b.n	800f964 <uxr_receive_reliable_message+0xb8>
 800f960:	2801      	cmp	r0, #1
 800f962:	d1b4      	bne.n	800f8ce <uxr_receive_reliable_message+0x22>
 800f964:	4630      	mov	r0, r6
 800f966:	2101      	movs	r1, #1
 800f968:	f000 fd32 	bl	80103d0 <uxr_seq_num_add>
 800f96c:	8921      	ldrh	r1, [r4, #8]
 800f96e:	fbb0 f3f1 	udiv	r3, r0, r1
 800f972:	fb01 0313 	mls	r3, r1, r3, r0
 800f976:	b29b      	uxth	r3, r3
 800f978:	6862      	ldr	r2, [r4, #4]
 800f97a:	fbb2 f2f1 	udiv	r2, r2, r1
 800f97e:	4606      	mov	r6, r0
 800f980:	fb03 f302 	mul.w	r3, r3, r2
 800f984:	6820      	ldr	r0, [r4, #0]
 800f986:	3304      	adds	r3, #4
 800f988:	4418      	add	r0, r3
 800f98a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d09d      	beq.n	800f8ce <uxr_receive_reliable_message+0x22>
 800f992:	6923      	ldr	r3, [r4, #16]
 800f994:	4798      	blx	r3
 800f996:	2802      	cmp	r0, #2
 800f998:	d1e2      	bne.n	800f960 <uxr_receive_reliable_message+0xb4>
 800f99a:	2601      	movs	r6, #1
 800f99c:	e798      	b.n	800f8d0 <uxr_receive_reliable_message+0x24>
 800f99e:	9b08      	ldr	r3, [sp, #32]
 800f9a0:	81a5      	strh	r5, [r4, #12]
 800f9a2:	2601      	movs	r6, #1
 800f9a4:	f883 9000 	strb.w	r9, [r3]
 800f9a8:	e792      	b.n	800f8d0 <uxr_receive_reliable_message+0x24>
 800f9aa:	bf00      	nop

0800f9ac <uxr_next_input_reliable_buffer_available>:
 800f9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	460e      	mov	r6, r1
 800f9b4:	8980      	ldrh	r0, [r0, #12]
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	4617      	mov	r7, r2
 800f9ba:	f000 fd09 	bl	80103d0 <uxr_seq_num_add>
 800f9be:	8921      	ldrh	r1, [r4, #8]
 800f9c0:	fbb0 f3f1 	udiv	r3, r0, r1
 800f9c4:	fb01 0313 	mls	r3, r1, r3, r0
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	6862      	ldr	r2, [r4, #4]
 800f9cc:	fbb2 f2f1 	udiv	r2, r2, r1
 800f9d0:	fb03 f302 	mul.w	r3, r3, r2
 800f9d4:	6822      	ldr	r2, [r4, #0]
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	eb02 0803 	add.w	r8, r2, r3
 800f9dc:	f858 9c04 	ldr.w	r9, [r8, #-4]
 800f9e0:	f1b9 0f00 	cmp.w	r9, #0
 800f9e4:	d025      	beq.n	800fa32 <uxr_next_input_reliable_buffer_available+0x86>
 800f9e6:	6923      	ldr	r3, [r4, #16]
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	4640      	mov	r0, r8
 800f9ec:	4798      	blx	r3
 800f9ee:	4682      	mov	sl, r0
 800f9f0:	b310      	cbz	r0, 800fa38 <uxr_next_input_reliable_buffer_available+0x8c>
 800f9f2:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800f9f6:	e005      	b.n	800fa04 <uxr_next_input_reliable_buffer_available+0x58>
 800f9f8:	6923      	ldr	r3, [r4, #16]
 800f9fa:	4798      	blx	r3
 800f9fc:	2802      	cmp	r0, #2
 800f9fe:	d032      	beq.n	800fa66 <uxr_next_input_reliable_buffer_available+0xba>
 800fa00:	2801      	cmp	r0, #1
 800fa02:	d116      	bne.n	800fa32 <uxr_next_input_reliable_buffer_available+0x86>
 800fa04:	4650      	mov	r0, sl
 800fa06:	2101      	movs	r1, #1
 800fa08:	f000 fce2 	bl	80103d0 <uxr_seq_num_add>
 800fa0c:	8921      	ldrh	r1, [r4, #8]
 800fa0e:	fbb0 f3f1 	udiv	r3, r0, r1
 800fa12:	fb01 0313 	mls	r3, r1, r3, r0
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	6862      	ldr	r2, [r4, #4]
 800fa1a:	fbb2 f2f1 	udiv	r2, r2, r1
 800fa1e:	4682      	mov	sl, r0
 800fa20:	fb03 f302 	mul.w	r3, r3, r2
 800fa24:	6820      	ldr	r0, [r4, #0]
 800fa26:	3304      	adds	r3, #4
 800fa28:	4418      	add	r0, r3
 800fa2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1e2      	bne.n	800f9f8 <uxr_next_input_reliable_buffer_available+0x4c>
 800fa32:	2000      	movs	r0, #0
 800fa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa38:	464a      	mov	r2, r9
 800fa3a:	4641      	mov	r1, r8
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f7fa fec1 	bl	800a7c4 <ucdr_init_buffer>
 800fa42:	8921      	ldrh	r1, [r4, #8]
 800fa44:	fbb5 f3f1 	udiv	r3, r5, r1
 800fa48:	fb01 5313 	mls	r3, r1, r3, r5
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	6862      	ldr	r2, [r4, #4]
 800fa50:	fbb2 f2f1 	udiv	r2, r2, r1
 800fa54:	6821      	ldr	r1, [r4, #0]
 800fa56:	fb03 f302 	mul.w	r3, r3, r2
 800fa5a:	2001      	movs	r0, #1
 800fa5c:	f841 a003 	str.w	sl, [r1, r3]
 800fa60:	81a5      	strh	r5, [r4, #12]
 800fa62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa66:	8922      	ldrh	r2, [r4, #8]
 800fa68:	fbb5 f0f2 	udiv	r0, r5, r2
 800fa6c:	fb02 5510 	mls	r5, r2, r0, r5
 800fa70:	b2ad      	uxth	r5, r5
 800fa72:	6863      	ldr	r3, [r4, #4]
 800fa74:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa78:	fb05 f503 	mul.w	r5, r5, r3
 800fa7c:	6823      	ldr	r3, [r4, #0]
 800fa7e:	2000      	movs	r0, #0
 800fa80:	5158      	str	r0, [r3, r5]
 800fa82:	eba9 0207 	sub.w	r2, r9, r7
 800fa86:	eb08 0107 	add.w	r1, r8, r7
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f7fa fe9a 	bl	800a7c4 <ucdr_init_buffer>
 800fa90:	4630      	mov	r0, r6
 800fa92:	4904      	ldr	r1, [pc, #16]	@ (800faa4 <uxr_next_input_reliable_buffer_available+0xf8>)
 800fa94:	4622      	mov	r2, r4
 800fa96:	f7fa fe6b 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800fa9a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800fa9e:	2001      	movs	r0, #1
 800faa0:	e7c8      	b.n	800fa34 <uxr_next_input_reliable_buffer_available+0x88>
 800faa2:	bf00      	nop
 800faa4:	0800f7c1 	.word	0x0800f7c1

0800faa8 <uxr_process_heartbeat>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4611      	mov	r1, r2
 800faac:	4604      	mov	r4, r0
 800faae:	89c0      	ldrh	r0, [r0, #14]
 800fab0:	4615      	mov	r5, r2
 800fab2:	f000 fc95 	bl	80103e0 <uxr_seq_num_cmp>
 800fab6:	2800      	cmp	r0, #0
 800fab8:	bfb8      	it	lt
 800faba:	81e5      	strhlt	r5, [r4, #14]
 800fabc:	bd38      	pop	{r3, r4, r5, pc}
 800fabe:	bf00      	nop

0800fac0 <uxr_compute_acknack>:
 800fac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac4:	8903      	ldrh	r3, [r0, #8]
 800fac6:	8986      	ldrh	r6, [r0, #12]
 800fac8:	4604      	mov	r4, r0
 800faca:	460d      	mov	r5, r1
 800facc:	b1d3      	cbz	r3, 800fb04 <uxr_compute_acknack+0x44>
 800face:	4630      	mov	r0, r6
 800fad0:	2701      	movs	r7, #1
 800fad2:	e003      	b.n	800fadc <uxr_compute_acknack+0x1c>
 800fad4:	4567      	cmp	r7, ip
 800fad6:	d215      	bcs.n	800fb04 <uxr_compute_acknack+0x44>
 800fad8:	89a0      	ldrh	r0, [r4, #12]
 800fada:	3701      	adds	r7, #1
 800fadc:	b2b9      	uxth	r1, r7
 800fade:	f000 fc77 	bl	80103d0 <uxr_seq_num_add>
 800fae2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fae6:	fbb0 f2fc 	udiv	r2, r0, ip
 800faea:	e9d4 1300 	ldrd	r1, r3, [r4]
 800faee:	fb0c 0212 	mls	r2, ip, r2, r0
 800faf2:	b292      	uxth	r2, r2
 800faf4:	fbb3 f3fc 	udiv	r3, r3, ip
 800faf8:	fb02 1303 	mla	r3, r2, r3, r1
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1e8      	bne.n	800fad4 <uxr_compute_acknack+0x14>
 800fb02:	4606      	mov	r6, r0
 800fb04:	802e      	strh	r6, [r5, #0]
 800fb06:	4630      	mov	r0, r6
 800fb08:	2101      	movs	r1, #1
 800fb0a:	89e6      	ldrh	r6, [r4, #14]
 800fb0c:	f000 fc64 	bl	80103d8 <uxr_seq_num_sub>
 800fb10:	4601      	mov	r1, r0
 800fb12:	4630      	mov	r0, r6
 800fb14:	f000 fc60 	bl	80103d8 <uxr_seq_num_sub>
 800fb18:	4606      	mov	r6, r0
 800fb1a:	b318      	cbz	r0, 800fb64 <uxr_compute_acknack+0xa4>
 800fb1c:	f04f 0900 	mov.w	r9, #0
 800fb20:	464f      	mov	r7, r9
 800fb22:	f04f 0801 	mov.w	r8, #1
 800fb26:	fa1f f189 	uxth.w	r1, r9
 800fb2a:	8828      	ldrh	r0, [r5, #0]
 800fb2c:	f000 fc50 	bl	80103d0 <uxr_seq_num_add>
 800fb30:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fb34:	6822      	ldr	r2, [r4, #0]
 800fb36:	fbb0 f1fc 	udiv	r1, r0, ip
 800fb3a:	fb01 011c 	mls	r1, r1, ip, r0
 800fb3e:	b289      	uxth	r1, r1
 800fb40:	6863      	ldr	r3, [r4, #4]
 800fb42:	fbb3 f3fc 	udiv	r3, r3, ip
 800fb46:	fb01 2303 	mla	r3, r1, r3, r2
 800fb4a:	fa08 f209 	lsl.w	r2, r8, r9
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f109 0901 	add.w	r9, r9, #1
 800fb54:	b90b      	cbnz	r3, 800fb5a <uxr_compute_acknack+0x9a>
 800fb56:	4317      	orrs	r7, r2
 800fb58:	b2bf      	uxth	r7, r7
 800fb5a:	454e      	cmp	r6, r9
 800fb5c:	d1e3      	bne.n	800fb26 <uxr_compute_acknack+0x66>
 800fb5e:	4638      	mov	r0, r7
 800fb60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb64:	4607      	mov	r7, r0
 800fb66:	4638      	mov	r0, r7
 800fb68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fb6c <uxr_init_output_best_effort_stream>:
 800fb6c:	b410      	push	{r4}
 800fb6e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800fb72:	81c4      	strh	r4, [r0, #14]
 800fb74:	e9c0 1300 	strd	r1, r3, [r0]
 800fb78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb7c:	7303      	strb	r3, [r0, #12]
 800fb7e:	6082      	str	r2, [r0, #8]
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop

0800fb84 <uxr_reset_output_best_effort_stream>:
 800fb84:	7b02      	ldrb	r2, [r0, #12]
 800fb86:	6042      	str	r2, [r0, #4]
 800fb88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb8c:	81c3      	strh	r3, [r0, #14]
 800fb8e:	4770      	bx	lr

0800fb90 <uxr_prepare_best_effort_buffer_to_write>:
 800fb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb92:	4604      	mov	r4, r0
 800fb94:	b083      	sub	sp, #12
 800fb96:	6840      	ldr	r0, [r0, #4]
 800fb98:	460d      	mov	r5, r1
 800fb9a:	4616      	mov	r6, r2
 800fb9c:	f7fc f9ee 	bl	800bf7c <uxr_submessage_padding>
 800fba0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800fba4:	4410      	add	r0, r2
 800fba6:	1942      	adds	r2, r0, r5
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	bf2c      	ite	cs
 800fbac:	2701      	movcs	r7, #1
 800fbae:	2700      	movcc	r7, #0
 800fbb0:	d202      	bcs.n	800fbb8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800fbb2:	4638      	mov	r0, r7
 800fbb4:	b003      	add	sp, #12
 800fbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb8:	9000      	str	r0, [sp, #0]
 800fbba:	6821      	ldr	r1, [r4, #0]
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f7fa fdee 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800fbc4:	6861      	ldr	r1, [r4, #4]
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	4429      	add	r1, r5
 800fbca:	6061      	str	r1, [r4, #4]
 800fbcc:	b003      	add	sp, #12
 800fbce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbd0 <uxr_prepare_best_effort_buffer_to_send>:
 800fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	6845      	ldr	r5, [r0, #4]
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	7b00      	ldrb	r0, [r0, #12]
 800fbda:	4285      	cmp	r5, r0
 800fbdc:	bf8c      	ite	hi
 800fbde:	2701      	movhi	r7, #1
 800fbe0:	2700      	movls	r7, #0
 800fbe2:	d802      	bhi.n	800fbea <uxr_prepare_best_effort_buffer_to_send+0x1a>
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbea:	4688      	mov	r8, r1
 800fbec:	89e0      	ldrh	r0, [r4, #14]
 800fbee:	2101      	movs	r1, #1
 800fbf0:	4615      	mov	r5, r2
 800fbf2:	461e      	mov	r6, r3
 800fbf4:	f000 fbec 	bl	80103d0 <uxr_seq_num_add>
 800fbf8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fbfc:	81e0      	strh	r0, [r4, #14]
 800fbfe:	8030      	strh	r0, [r6, #0]
 800fc00:	f8c8 2000 	str.w	r2, [r8]
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	7b23      	ldrb	r3, [r4, #12]
 800fc08:	6063      	str	r3, [r4, #4]
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fc10 <on_full_output_buffer>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	6802      	ldr	r2, [r0, #0]
 800fc14:	460d      	mov	r5, r1
 800fc16:	6809      	ldr	r1, [r1, #0]
 800fc18:	892f      	ldrh	r7, [r5, #8]
 800fc1a:	686c      	ldr	r4, [r5, #4]
 800fc1c:	fbb4 f4f7 	udiv	r4, r4, r7
 800fc20:	1a53      	subs	r3, r2, r1
 800fc22:	fbb3 f3f4 	udiv	r3, r3, r4
 800fc26:	3301      	adds	r3, #1
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	fbb3 f2f7 	udiv	r2, r3, r7
 800fc2e:	fb07 3312 	mls	r3, r7, r2, r3
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	fb04 f403 	mul.w	r4, r4, r3
 800fc38:	7b2f      	ldrb	r7, [r5, #12]
 800fc3a:	590a      	ldr	r2, [r1, r4]
 800fc3c:	6903      	ldr	r3, [r0, #16]
 800fc3e:	443c      	add	r4, r7
 800fc40:	3408      	adds	r4, #8
 800fc42:	1bd2      	subs	r2, r2, r7
 800fc44:	4606      	mov	r6, r0
 800fc46:	4421      	add	r1, r4
 800fc48:	3a04      	subs	r2, #4
 800fc4a:	f7fa fdb3 	bl	800a7b4 <ucdr_init_buffer_origin>
 800fc4e:	4630      	mov	r0, r6
 800fc50:	4902      	ldr	r1, [pc, #8]	@ (800fc5c <on_full_output_buffer+0x4c>)
 800fc52:	462a      	mov	r2, r5
 800fc54:	f7fa fd8c 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc5c:	0800fc11 	.word	0x0800fc11

0800fc60 <uxr_init_output_reliable_stream>:
 800fc60:	b430      	push	{r4, r5}
 800fc62:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800fc66:	6001      	str	r1, [r0, #0]
 800fc68:	8103      	strh	r3, [r0, #8]
 800fc6a:	6042      	str	r2, [r0, #4]
 800fc6c:	7304      	strb	r4, [r0, #12]
 800fc6e:	b1b3      	cbz	r3, 800fc9e <uxr_init_output_reliable_stream+0x3e>
 800fc70:	600c      	str	r4, [r1, #0]
 800fc72:	8901      	ldrh	r1, [r0, #8]
 800fc74:	2901      	cmp	r1, #1
 800fc76:	d912      	bls.n	800fc9e <uxr_init_output_reliable_stream+0x3e>
 800fc78:	2201      	movs	r2, #1
 800fc7a:	e9d0 5400 	ldrd	r5, r4, [r0]
 800fc7e:	fbb2 f3f1 	udiv	r3, r2, r1
 800fc82:	fb01 2313 	mls	r3, r1, r3, r2
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	fbb4 f1f1 	udiv	r1, r4, r1
 800fc8c:	fb03 f301 	mul.w	r3, r3, r1
 800fc90:	7b01      	ldrb	r1, [r0, #12]
 800fc92:	50e9      	str	r1, [r5, r3]
 800fc94:	3201      	adds	r2, #1
 800fc96:	8901      	ldrh	r1, [r0, #8]
 800fc98:	b292      	uxth	r2, r2
 800fc9a:	4291      	cmp	r1, r2
 800fc9c:	d8ed      	bhi.n	800fc7a <uxr_init_output_reliable_stream+0x1a>
 800fc9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fca2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fca6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fcaa:	4b05      	ldr	r3, [pc, #20]	@ (800fcc0 <uxr_init_output_reliable_stream+0x60>)
 800fcac:	f8c0 300e 	str.w	r3, [r0, #14]
 800fcb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	bc30      	pop	{r4, r5}
 800fcb8:	8242      	strh	r2, [r0, #18]
 800fcba:	8403      	strh	r3, [r0, #32]
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	ffff0000 	.word	0xffff0000

0800fcc4 <uxr_reset_output_reliable_stream>:
 800fcc4:	8902      	ldrh	r2, [r0, #8]
 800fcc6:	b430      	push	{r4, r5}
 800fcc8:	b19a      	cbz	r2, 800fcf2 <uxr_reset_output_reliable_stream+0x2e>
 800fcca:	2400      	movs	r4, #0
 800fccc:	4621      	mov	r1, r4
 800fcce:	fbb1 f3f2 	udiv	r3, r1, r2
 800fcd2:	fb02 1313 	mls	r3, r2, r3, r1
 800fcd6:	e9d0 5100 	ldrd	r5, r1, [r0]
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	fbb1 f2f2 	udiv	r2, r1, r2
 800fce0:	fb03 f302 	mul.w	r3, r3, r2
 800fce4:	7b02      	ldrb	r2, [r0, #12]
 800fce6:	50ea      	str	r2, [r5, r3]
 800fce8:	3401      	adds	r4, #1
 800fcea:	8902      	ldrh	r2, [r0, #8]
 800fcec:	b2a1      	uxth	r1, r4
 800fcee:	428a      	cmp	r2, r1
 800fcf0:	d8ed      	bhi.n	800fcce <uxr_reset_output_reliable_stream+0xa>
 800fcf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fcf6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fcfa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fcfe:	4b05      	ldr	r3, [pc, #20]	@ (800fd14 <uxr_reset_output_reliable_stream+0x50>)
 800fd00:	f8c0 300e 	str.w	r3, [r0, #14]
 800fd04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd08:	2300      	movs	r3, #0
 800fd0a:	bc30      	pop	{r4, r5}
 800fd0c:	8242      	strh	r2, [r0, #18]
 800fd0e:	8403      	strh	r3, [r0, #32]
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	ffff0000 	.word	0xffff0000

0800fd18 <uxr_prepare_reliable_buffer_to_write>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	89c6      	ldrh	r6, [r0, #14]
 800fd20:	8900      	ldrh	r0, [r0, #8]
 800fd22:	f8d4 c000 	ldr.w	ip, [r4]
 800fd26:	fbb6 f3f0 	udiv	r3, r6, r0
 800fd2a:	fb00 6313 	mls	r3, r0, r3, r6
 800fd2e:	b091      	sub	sp, #68	@ 0x44
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	6865      	ldr	r5, [r4, #4]
 800fd34:	fbb5 f5f0 	udiv	r5, r5, r0
 800fd38:	fb05 c303 	mla	r3, r5, r3, ip
 800fd3c:	9204      	str	r2, [sp, #16]
 800fd3e:	1d1a      	adds	r2, r3, #4
 800fd40:	f8d3 8000 	ldr.w	r8, [r3]
 800fd44:	f894 900c 	ldrb.w	r9, [r4, #12]
 800fd48:	9203      	str	r2, [sp, #12]
 800fd4a:	468b      	mov	fp, r1
 800fd4c:	1f2f      	subs	r7, r5, #4
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	f000 814e 	beq.w	800fff0 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 800fd54:	f04f 0e00 	mov.w	lr, #0
 800fd58:	46f2      	mov	sl, lr
 800fd5a:	4672      	mov	r2, lr
 800fd5c:	fbb2 f3f0 	udiv	r3, r2, r0
 800fd60:	fb00 2313 	mls	r3, r0, r3, r2
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	fb05 c303 	mla	r3, r5, r3, ip
 800fd6a:	f10e 0e01 	add.w	lr, lr, #1
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	454b      	cmp	r3, r9
 800fd72:	bf08      	it	eq
 800fd74:	f10a 0a01 	addeq.w	sl, sl, #1
 800fd78:	fa1f f28e 	uxth.w	r2, lr
 800fd7c:	bf08      	it	eq
 800fd7e:	fa1f fa8a 	uxtheq.w	sl, sl
 800fd82:	4282      	cmp	r2, r0
 800fd84:	d3ea      	bcc.n	800fd5c <uxr_prepare_reliable_buffer_to_write+0x44>
 800fd86:	4640      	mov	r0, r8
 800fd88:	2104      	movs	r1, #4
 800fd8a:	f8cd a014 	str.w	sl, [sp, #20]
 800fd8e:	f7fa fd1d 	bl	800a7cc <ucdr_alignment>
 800fd92:	4480      	add	r8, r0
 800fd94:	eb08 020b 	add.w	r2, r8, fp
 800fd98:	42ba      	cmp	r2, r7
 800fd9a:	f240 80cf 	bls.w	800ff3c <uxr_prepare_reliable_buffer_to_write+0x224>
 800fd9e:	7b22      	ldrb	r2, [r4, #12]
 800fda0:	445a      	add	r2, fp
 800fda2:	42ba      	cmp	r2, r7
 800fda4:	f240 80b7 	bls.w	800ff16 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 800fda8:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 800fdac:	33fc      	adds	r3, #252	@ 0xfc
 800fdae:	b2ba      	uxth	r2, r7
 800fdb0:	4413      	add	r3, r2
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	fb0a f903 	mul.w	r9, sl, r3
 800fdb8:	45d9      	cmp	r9, fp
 800fdba:	9305      	str	r3, [sp, #20]
 800fdbc:	9306      	str	r3, [sp, #24]
 800fdbe:	f0c0 80b9 	bcc.w	800ff34 <uxr_prepare_reliable_buffer_to_write+0x21c>
 800fdc2:	f108 0304 	add.w	r3, r8, #4
 800fdc6:	42bb      	cmp	r3, r7
 800fdc8:	f080 80dd 	bcs.w	800ff86 <uxr_prepare_reliable_buffer_to_write+0x26e>
 800fdcc:	f1a2 0904 	sub.w	r9, r2, #4
 800fdd0:	eba9 0908 	sub.w	r9, r9, r8
 800fdd4:	9b05      	ldr	r3, [sp, #20]
 800fdd6:	fa1f f989 	uxth.w	r9, r9
 800fdda:	ebab 0b09 	sub.w	fp, fp, r9
 800fdde:	fbbb f2f3 	udiv	r2, fp, r3
 800fde2:	fb03 b312 	mls	r3, r3, r2, fp
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 80ca 	beq.w	800ff80 <uxr_prepare_reliable_buffer_to_write+0x268>
 800fdec:	3201      	adds	r2, #1
 800fdee:	b292      	uxth	r2, r2
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	9306      	str	r3, [sp, #24]
 800fdf4:	4551      	cmp	r1, sl
 800fdf6:	f200 809d 	bhi.w	800ff34 <uxr_prepare_reliable_buffer_to_write+0x21c>
 800fdfa:	f10d 0b20 	add.w	fp, sp, #32
 800fdfe:	2900      	cmp	r1, #0
 800fe00:	d042      	beq.n	800fe88 <uxr_prepare_reliable_buffer_to_write+0x170>
 800fe02:	f8cd 801c 	str.w	r8, [sp, #28]
 800fe06:	f04f 0a00 	mov.w	sl, #0
 800fe0a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fe0e:	9505      	str	r5, [sp, #20]
 800fe10:	f10d 0b20 	add.w	fp, sp, #32
 800fe14:	460d      	mov	r5, r1
 800fe16:	e000      	b.n	800fe1a <uxr_prepare_reliable_buffer_to_write+0x102>
 800fe18:	46c1      	mov	r9, r8
 800fe1a:	8920      	ldrh	r0, [r4, #8]
 800fe1c:	fbb6 f1f0 	udiv	r1, r6, r0
 800fe20:	e9d4 3200 	ldrd	r3, r2, [r4]
 800fe24:	fb00 6111 	mls	r1, r0, r1, r6
 800fe28:	b289      	uxth	r1, r1
 800fe2a:	fbb2 f2f0 	udiv	r2, r2, r0
 800fe2e:	fb01 f102 	mul.w	r1, r1, r2
 800fe32:	3104      	adds	r1, #4
 800fe34:	4419      	add	r1, r3
 800fe36:	463a      	mov	r2, r7
 800fe38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	4658      	mov	r0, fp
 800fe40:	2300      	movs	r3, #0
 800fe42:	f7fa fcad 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800fe46:	464a      	mov	r2, r9
 800fe48:	2300      	movs	r3, #0
 800fe4a:	210d      	movs	r1, #13
 800fe4c:	4658      	mov	r0, fp
 800fe4e:	f7fc f855 	bl	800befc <uxr_buffer_submessage_header>
 800fe52:	8920      	ldrh	r0, [r4, #8]
 800fe54:	fbb6 f3f0 	udiv	r3, r6, r0
 800fe58:	e9d4 2100 	ldrd	r2, r1, [r4]
 800fe5c:	fb00 6313 	mls	r3, r0, r3, r6
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	fbb1 f1f0 	udiv	r1, r1, r0
 800fe66:	fb03 f301 	mul.w	r3, r3, r1
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	50d7      	str	r7, [r2, r3]
 800fe6e:	2101      	movs	r1, #1
 800fe70:	f000 faae 	bl	80103d0 <uxr_seq_num_add>
 800fe74:	f10a 0a01 	add.w	sl, sl, #1
 800fe78:	fa1f f38a 	uxth.w	r3, sl
 800fe7c:	429d      	cmp	r5, r3
 800fe7e:	4606      	mov	r6, r0
 800fe80:	d8ca      	bhi.n	800fe18 <uxr_prepare_reliable_buffer_to_write+0x100>
 800fe82:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fe86:	9d05      	ldr	r5, [sp, #20]
 800fe88:	8921      	ldrh	r1, [r4, #8]
 800fe8a:	fbb6 f3f1 	udiv	r3, r6, r1
 800fe8e:	fb01 6313 	mls	r3, r1, r3, r6
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	6862      	ldr	r2, [r4, #4]
 800fe96:	fbb2 f2f1 	udiv	r2, r2, r1
 800fe9a:	6821      	ldr	r1, [r4, #0]
 800fe9c:	fb03 f302 	mul.w	r3, r3, r2
 800fea0:	3304      	adds	r3, #4
 800fea2:	4419      	add	r1, r3
 800fea4:	463a      	mov	r2, r7
 800fea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	4658      	mov	r0, fp
 800feae:	2300      	movs	r3, #0
 800feb0:	f7fa fc76 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800feb4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800feb8:	4658      	mov	r0, fp
 800feba:	fa1f f289 	uxth.w	r2, r9
 800febe:	2302      	movs	r3, #2
 800fec0:	210d      	movs	r1, #13
 800fec2:	f7fc f81b 	bl	800befc <uxr_buffer_submessage_header>
 800fec6:	8921      	ldrh	r1, [r4, #8]
 800fec8:	7b27      	ldrb	r7, [r4, #12]
 800feca:	fbb6 f0f1 	udiv	r0, r6, r1
 800fece:	e9d4 3200 	ldrd	r3, r2, [r4]
 800fed2:	fb01 6010 	mls	r0, r1, r0, r6
 800fed6:	b280      	uxth	r0, r0
 800fed8:	fbb2 f2f1 	udiv	r2, r2, r1
 800fedc:	3704      	adds	r7, #4
 800fede:	fb00 f002 	mul.w	r0, r0, r2
 800fee2:	f1a5 0208 	sub.w	r2, r5, #8
 800fee6:	464d      	mov	r5, r9
 800fee8:	443d      	add	r5, r7
 800feea:	9f03      	ldr	r7, [sp, #12]
 800feec:	501d      	str	r5, [r3, r0]
 800feee:	f108 0104 	add.w	r1, r8, #4
 800fef2:	9d04      	ldr	r5, [sp, #16]
 800fef4:	440f      	add	r7, r1
 800fef6:	eba2 0208 	sub.w	r2, r2, r8
 800fefa:	4639      	mov	r1, r7
 800fefc:	4628      	mov	r0, r5
 800fefe:	f7fa fc61 	bl	800a7c4 <ucdr_init_buffer>
 800ff02:	4628      	mov	r0, r5
 800ff04:	493b      	ldr	r1, [pc, #236]	@ (800fff4 <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 800ff06:	4622      	mov	r2, r4
 800ff08:	f7fa fc32 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 800ff0c:	2001      	movs	r0, #1
 800ff0e:	81e6      	strh	r6, [r4, #14]
 800ff10:	b011      	add	sp, #68	@ 0x44
 800ff12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff16:	2101      	movs	r1, #1
 800ff18:	89e0      	ldrh	r0, [r4, #14]
 800ff1a:	f000 fa59 	bl	80103d0 <uxr_seq_num_add>
 800ff1e:	8921      	ldrh	r1, [r4, #8]
 800ff20:	4605      	mov	r5, r0
 800ff22:	8a60      	ldrh	r0, [r4, #18]
 800ff24:	f000 fa54 	bl	80103d0 <uxr_seq_num_add>
 800ff28:	4601      	mov	r1, r0
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f000 fa58 	bl	80103e0 <uxr_seq_num_cmp>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	dd42      	ble.n	800ffba <uxr_prepare_reliable_buffer_to_write+0x2a2>
 800ff34:	2000      	movs	r0, #0
 800ff36:	b011      	add	sp, #68	@ 0x44
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	8921      	ldrh	r1, [r4, #8]
 800ff3e:	8a60      	ldrh	r0, [r4, #18]
 800ff40:	9205      	str	r2, [sp, #20]
 800ff42:	f000 fa45 	bl	80103d0 <uxr_seq_num_add>
 800ff46:	4601      	mov	r1, r0
 800ff48:	4630      	mov	r0, r6
 800ff4a:	f000 fa49 	bl	80103e0 <uxr_seq_num_cmp>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	9a05      	ldr	r2, [sp, #20]
 800ff52:	dcef      	bgt.n	800ff34 <uxr_prepare_reliable_buffer_to_write+0x21c>
 800ff54:	8920      	ldrh	r0, [r4, #8]
 800ff56:	fbb6 f3f0 	udiv	r3, r6, r0
 800ff5a:	e9d4 4100 	ldrd	r4, r1, [r4]
 800ff5e:	fb00 6313 	mls	r3, r0, r3, r6
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	fbb1 f1f0 	udiv	r1, r1, r0
 800ff68:	fb03 f301 	mul.w	r3, r3, r1
 800ff6c:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800ff70:	50e2      	str	r2, [r4, r3]
 800ff72:	f8cd 8000 	str.w	r8, [sp]
 800ff76:	2300      	movs	r3, #0
 800ff78:	f7fa fc12 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800ff7c:	2001      	movs	r0, #1
 800ff7e:	e7da      	b.n	800ff36 <uxr_prepare_reliable_buffer_to_write+0x21e>
 800ff80:	b293      	uxth	r3, r2
 800ff82:	4619      	mov	r1, r3
 800ff84:	e736      	b.n	800fdf4 <uxr_prepare_reliable_buffer_to_write+0xdc>
 800ff86:	4630      	mov	r0, r6
 800ff88:	2101      	movs	r1, #1
 800ff8a:	9207      	str	r2, [sp, #28]
 800ff8c:	f000 fa20 	bl	80103d0 <uxr_seq_num_add>
 800ff90:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800ff94:	fbb0 f1fc 	udiv	r1, r0, ip
 800ff98:	fb0c 0111 	mls	r1, ip, r1, r0
 800ff9c:	b289      	uxth	r1, r1
 800ff9e:	6863      	ldr	r3, [r4, #4]
 800ffa0:	fbb3 f3fc 	udiv	r3, r3, ip
 800ffa4:	fb01 f103 	mul.w	r1, r1, r3
 800ffa8:	6823      	ldr	r3, [r4, #0]
 800ffaa:	9a07      	ldr	r2, [sp, #28]
 800ffac:	3104      	adds	r1, #4
 800ffae:	440b      	add	r3, r1
 800ffb0:	4606      	mov	r6, r0
 800ffb2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800ffb6:	9303      	str	r3, [sp, #12]
 800ffb8:	e708      	b.n	800fdcc <uxr_prepare_reliable_buffer_to_write+0xb4>
 800ffba:	8920      	ldrh	r0, [r4, #8]
 800ffbc:	fbb5 f3f0 	udiv	r3, r5, r0
 800ffc0:	fb00 5313 	mls	r3, r0, r3, r5
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	6862      	ldr	r2, [r4, #4]
 800ffc8:	6821      	ldr	r1, [r4, #0]
 800ffca:	fbb2 f0f0 	udiv	r0, r2, r0
 800ffce:	fb03 f300 	mul.w	r3, r3, r0
 800ffd2:	7b22      	ldrb	r2, [r4, #12]
 800ffd4:	9804      	ldr	r0, [sp, #16]
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	4419      	add	r1, r3
 800ffda:	445a      	add	r2, fp
 800ffdc:	f841 2c04 	str.w	r2, [r1, #-4]
 800ffe0:	7b23      	ldrb	r3, [r4, #12]
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f7fa fbdb 	bl	800a7a0 <ucdr_init_buffer_origin_offset>
 800ffea:	81e5      	strh	r5, [r4, #14]
 800ffec:	2001      	movs	r0, #1
 800ffee:	e7a2      	b.n	800ff36 <uxr_prepare_reliable_buffer_to_write+0x21e>
 800fff0:	4682      	mov	sl, r0
 800fff2:	e6c8      	b.n	800fd86 <uxr_prepare_reliable_buffer_to_write+0x6e>
 800fff4:	0800fc11 	.word	0x0800fc11

0800fff8 <uxr_prepare_next_reliable_buffer_to_send>:
 800fff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fffc:	4605      	mov	r5, r0
 800fffe:	4688      	mov	r8, r1
 8010000:	8a00      	ldrh	r0, [r0, #16]
 8010002:	2101      	movs	r1, #1
 8010004:	4617      	mov	r7, r2
 8010006:	461e      	mov	r6, r3
 8010008:	f000 f9e2 	bl	80103d0 <uxr_seq_num_add>
 801000c:	8030      	strh	r0, [r6, #0]
 801000e:	892a      	ldrh	r2, [r5, #8]
 8010010:	fbb0 f3f2 	udiv	r3, r0, r2
 8010014:	fb02 0413 	mls	r4, r2, r3, r0
 8010018:	b2a4      	uxth	r4, r4
 801001a:	686b      	ldr	r3, [r5, #4]
 801001c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	89e9      	ldrh	r1, [r5, #14]
 8010024:	fb04 f402 	mul.w	r4, r4, r2
 8010028:	3404      	adds	r4, #4
 801002a:	4423      	add	r3, r4
 801002c:	f8c8 3000 	str.w	r3, [r8]
 8010030:	682b      	ldr	r3, [r5, #0]
 8010032:	441c      	add	r4, r3
 8010034:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010038:	603b      	str	r3, [r7, #0]
 801003a:	f000 f9d1 	bl	80103e0 <uxr_seq_num_cmp>
 801003e:	2800      	cmp	r0, #0
 8010040:	dd02      	ble.n	8010048 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8010042:	2000      	movs	r0, #0
 8010044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010048:	683a      	ldr	r2, [r7, #0]
 801004a:	7b2b      	ldrb	r3, [r5, #12]
 801004c:	429a      	cmp	r2, r3
 801004e:	d9f8      	bls.n	8010042 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8010050:	8a69      	ldrh	r1, [r5, #18]
 8010052:	8a28      	ldrh	r0, [r5, #16]
 8010054:	f000 f9c0 	bl	80103d8 <uxr_seq_num_sub>
 8010058:	892b      	ldrh	r3, [r5, #8]
 801005a:	4283      	cmp	r3, r0
 801005c:	d0f1      	beq.n	8010042 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801005e:	8830      	ldrh	r0, [r6, #0]
 8010060:	89eb      	ldrh	r3, [r5, #14]
 8010062:	8228      	strh	r0, [r5, #16]
 8010064:	4298      	cmp	r0, r3
 8010066:	d002      	beq.n	801006e <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8010068:	2001      	movs	r0, #1
 801006a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006e:	2101      	movs	r1, #1
 8010070:	f000 f9ae 	bl	80103d0 <uxr_seq_num_add>
 8010074:	81e8      	strh	r0, [r5, #14]
 8010076:	2001      	movs	r0, #1
 8010078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801007c <uxr_update_output_stream_heartbeat_timestamp>:
 801007c:	b5d0      	push	{r4, r6, r7, lr}
 801007e:	8a01      	ldrh	r1, [r0, #16]
 8010080:	4604      	mov	r4, r0
 8010082:	8a40      	ldrh	r0, [r0, #18]
 8010084:	4616      	mov	r6, r2
 8010086:	461f      	mov	r7, r3
 8010088:	f000 f9aa 	bl	80103e0 <uxr_seq_num_cmp>
 801008c:	2800      	cmp	r0, #0
 801008e:	db07      	blt.n	80100a0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8010090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010094:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010098:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801009c:	2000      	movs	r0, #0
 801009e:	bdd0      	pop	{r4, r6, r7, pc}
 80100a0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80100a4:	b948      	cbnz	r0, 80100ba <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80100a6:	2301      	movs	r3, #1
 80100a8:	f884 3020 	strb.w	r3, [r4, #32]
 80100ac:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 80100b0:	f147 0200 	adc.w	r2, r7, #0
 80100b4:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80100b8:	bdd0      	pop	{r4, r6, r7, pc}
 80100ba:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80100be:	4296      	cmp	r6, r2
 80100c0:	eb77 0303 	sbcs.w	r3, r7, r3
 80100c4:	bfa5      	ittet	ge
 80100c6:	3001      	addge	r0, #1
 80100c8:	f884 0020 	strbge.w	r0, [r4, #32]
 80100cc:	2000      	movlt	r0, #0
 80100ce:	2001      	movge	r0, #1
 80100d0:	e7ec      	b.n	80100ac <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80100d2:	bf00      	nop

080100d4 <uxr_begin_output_nack_buffer_it>:
 80100d4:	8a40      	ldrh	r0, [r0, #18]
 80100d6:	4770      	bx	lr

080100d8 <uxr_next_reliable_nack_buffer_to_send>:
 80100d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100dc:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 80100e0:	f1b9 0f00 	cmp.w	r9, #0
 80100e4:	d011      	beq.n	801010a <uxr_next_reliable_nack_buffer_to_send+0x32>
 80100e6:	4605      	mov	r5, r0
 80100e8:	8818      	ldrh	r0, [r3, #0]
 80100ea:	460f      	mov	r7, r1
 80100ec:	4690      	mov	r8, r2
 80100ee:	461e      	mov	r6, r3
 80100f0:	2101      	movs	r1, #1
 80100f2:	f000 f96d 	bl	80103d0 <uxr_seq_num_add>
 80100f6:	8030      	strh	r0, [r6, #0]
 80100f8:	8a29      	ldrh	r1, [r5, #16]
 80100fa:	f000 f971 	bl	80103e0 <uxr_seq_num_cmp>
 80100fe:	2800      	cmp	r0, #0
 8010100:	dd06      	ble.n	8010110 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8010102:	f04f 0900 	mov.w	r9, #0
 8010106:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 801010a:	4648      	mov	r0, r9
 801010c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010110:	892a      	ldrh	r2, [r5, #8]
 8010112:	8830      	ldrh	r0, [r6, #0]
 8010114:	fbb0 f4f2 	udiv	r4, r0, r2
 8010118:	fb02 0414 	mls	r4, r2, r4, r0
 801011c:	b2a4      	uxth	r4, r4
 801011e:	686b      	ldr	r3, [r5, #4]
 8010120:	fbb3 f2f2 	udiv	r2, r3, r2
 8010124:	682b      	ldr	r3, [r5, #0]
 8010126:	fb04 f402 	mul.w	r4, r4, r2
 801012a:	3404      	adds	r4, #4
 801012c:	4423      	add	r3, r4
 801012e:	603b      	str	r3, [r7, #0]
 8010130:	682b      	ldr	r3, [r5, #0]
 8010132:	441c      	add	r4, r3
 8010134:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010138:	f8c8 3000 	str.w	r3, [r8]
 801013c:	7b2a      	ldrb	r2, [r5, #12]
 801013e:	429a      	cmp	r2, r3
 8010140:	d0d6      	beq.n	80100f0 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8010142:	4648      	mov	r0, r9
 8010144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010148 <uxr_process_acknack>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	4604      	mov	r4, r0
 801014c:	460e      	mov	r6, r1
 801014e:	4610      	mov	r0, r2
 8010150:	2101      	movs	r1, #1
 8010152:	f000 f941 	bl	80103d8 <uxr_seq_num_sub>
 8010156:	8a61      	ldrh	r1, [r4, #18]
 8010158:	f000 f93e 	bl	80103d8 <uxr_seq_num_sub>
 801015c:	b1c0      	cbz	r0, 8010190 <uxr_process_acknack+0x48>
 801015e:	4605      	mov	r5, r0
 8010160:	2700      	movs	r7, #0
 8010162:	2101      	movs	r1, #1
 8010164:	8a60      	ldrh	r0, [r4, #18]
 8010166:	f000 f933 	bl	80103d0 <uxr_seq_num_add>
 801016a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801016e:	fbb0 f3fc 	udiv	r3, r0, ip
 8010172:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010176:	fb0c 0313 	mls	r3, ip, r3, r0
 801017a:	b29b      	uxth	r3, r3
 801017c:	fbb1 f1fc 	udiv	r1, r1, ip
 8010180:	3701      	adds	r7, #1
 8010182:	fb03 f301 	mul.w	r3, r3, r1
 8010186:	42bd      	cmp	r5, r7
 8010188:	7b21      	ldrb	r1, [r4, #12]
 801018a:	8260      	strh	r0, [r4, #18]
 801018c:	50d1      	str	r1, [r2, r3]
 801018e:	d1e8      	bne.n	8010162 <uxr_process_acknack+0x1a>
 8010190:	3e00      	subs	r6, #0
 8010192:	f04f 0300 	mov.w	r3, #0
 8010196:	bf18      	it	ne
 8010198:	2601      	movne	r6, #1
 801019a:	f884 3020 	strb.w	r3, [r4, #32]
 801019e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80101a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101a4 <uxr_is_output_up_to_date>:
 80101a4:	8a01      	ldrh	r1, [r0, #16]
 80101a6:	8a40      	ldrh	r0, [r0, #18]
 80101a8:	b508      	push	{r3, lr}
 80101aa:	f000 f919 	bl	80103e0 <uxr_seq_num_cmp>
 80101ae:	fab0 f080 	clz	r0, r0
 80101b2:	0940      	lsrs	r0, r0, #5
 80101b4:	bd08      	pop	{r3, pc}
 80101b6:	bf00      	nop

080101b8 <get_available_free_slots>:
 80101b8:	8901      	ldrh	r1, [r0, #8]
 80101ba:	b1d9      	cbz	r1, 80101f4 <get_available_free_slots+0x3c>
 80101bc:	b4f0      	push	{r4, r5, r6, r7}
 80101be:	2400      	movs	r4, #0
 80101c0:	6845      	ldr	r5, [r0, #4]
 80101c2:	6807      	ldr	r7, [r0, #0]
 80101c4:	7b06      	ldrb	r6, [r0, #12]
 80101c6:	fbb5 f5f1 	udiv	r5, r5, r1
 80101ca:	4620      	mov	r0, r4
 80101cc:	4622      	mov	r2, r4
 80101ce:	fbb2 f3f1 	udiv	r3, r2, r1
 80101d2:	fb01 2313 	mls	r3, r1, r3, r2
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	fb05 7303 	mla	r3, r5, r3, r7
 80101dc:	3401      	adds	r4, #1
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	429e      	cmp	r6, r3
 80101e2:	bf08      	it	eq
 80101e4:	3001      	addeq	r0, #1
 80101e6:	b2a2      	uxth	r2, r4
 80101e8:	bf08      	it	eq
 80101ea:	b280      	uxtheq	r0, r0
 80101ec:	428a      	cmp	r2, r1
 80101ee:	d3ee      	bcc.n	80101ce <get_available_free_slots+0x16>
 80101f0:	bcf0      	pop	{r4, r5, r6, r7}
 80101f2:	4770      	bx	lr
 80101f4:	4608      	mov	r0, r1
 80101f6:	4770      	bx	lr

080101f8 <uxr_buffer_cancel_data>:
 80101f8:	b530      	push	{r4, r5, lr}
 80101fa:	b095      	sub	sp, #84	@ 0x54
 80101fc:	2400      	movs	r4, #0
 80101fe:	2308      	movs	r3, #8
 8010200:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010204:	9300      	str	r3, [sp, #0]
 8010206:	9205      	str	r2, [sp, #20]
 8010208:	2501      	movs	r5, #1
 801020a:	ab0c      	add	r3, sp, #48	@ 0x30
 801020c:	2210      	movs	r2, #16
 801020e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010212:	f88d 401e 	strb.w	r4, [sp, #30]
 8010216:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 801021a:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 801021e:	9103      	str	r1, [sp, #12]
 8010220:	4604      	mov	r4, r0
 8010222:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010226:	f7fb fbc5 	bl	800b9b4 <uxr_prepare_stream_to_write_submessage>
 801022a:	b918      	cbnz	r0, 8010234 <uxr_buffer_cancel_data+0x3c>
 801022c:	4604      	mov	r4, r0
 801022e:	4620      	mov	r0, r4
 8010230:	b015      	add	sp, #84	@ 0x54
 8010232:	bd30      	pop	{r4, r5, pc}
 8010234:	9905      	ldr	r1, [sp, #20]
 8010236:	aa06      	add	r2, sp, #24
 8010238:	4620      	mov	r0, r4
 801023a:	f7fb fcf5 	bl	800bc28 <uxr_init_base_object_request>
 801023e:	a906      	add	r1, sp, #24
 8010240:	4604      	mov	r4, r0
 8010242:	a80c      	add	r0, sp, #48	@ 0x30
 8010244:	f7fc feee 	bl	800d024 <uxr_serialize_READ_DATA_Payload>
 8010248:	4620      	mov	r0, r4
 801024a:	b015      	add	sp, #84	@ 0x54
 801024c:	bd30      	pop	{r4, r5, pc}
 801024e:	bf00      	nop

08010250 <read_submessage_format>:
 8010250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010254:	b095      	sub	sp, #84	@ 0x54
 8010256:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 801025a:	b113      	cbz	r3, 8010262 <read_submessage_format+0x12>
 801025c:	b015      	add	sp, #84	@ 0x54
 801025e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010262:	460c      	mov	r4, r1
 8010264:	4616      	mov	r6, r2
 8010266:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801026a:	461d      	mov	r5, r3
 801026c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801026e:	9304      	str	r3, [sp, #16]
 8010270:	1a52      	subs	r2, r2, r1
 8010272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010274:	9305      	str	r3, [sp, #20]
 8010276:	4607      	mov	r7, r0
 8010278:	a80c      	add	r0, sp, #48	@ 0x30
 801027a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801027e:	f7fa faa1 	bl	800a7c4 <ucdr_init_buffer>
 8010282:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010286:	a80c      	add	r0, sp, #48	@ 0x30
 8010288:	f7fa fa72 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 801028c:	69e3      	ldr	r3, [r4, #28]
 801028e:	b193      	cbz	r3, 80102b6 <read_submessage_format+0x66>
 8010290:	f1b8 0f07 	cmp.w	r8, #7
 8010294:	751d      	strb	r5, [r3, #20]
 8010296:	d03e      	beq.n	8010316 <read_submessage_format+0xc6>
 8010298:	f1b8 0f08 	cmp.w	r8, #8
 801029c:	d02c      	beq.n	80102f8 <read_submessage_format+0xa8>
 801029e:	f1b8 0f06 	cmp.w	r8, #6
 80102a2:	d011      	beq.n	80102c8 <read_submessage_format+0x78>
 80102a4:	2201      	movs	r2, #1
 80102a6:	751a      	strb	r2, [r3, #20]
 80102a8:	4631      	mov	r1, r6
 80102aa:	4620      	mov	r0, r4
 80102ac:	f7fa fada 	bl	800a864 <ucdr_advance_buffer>
 80102b0:	b015      	add	sp, #84	@ 0x54
 80102b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102b6:	f1b8 0f07 	cmp.w	r8, #7
 80102ba:	d02c      	beq.n	8010316 <read_submessage_format+0xc6>
 80102bc:	f1b8 0f08 	cmp.w	r8, #8
 80102c0:	d01a      	beq.n	80102f8 <read_submessage_format+0xa8>
 80102c2:	f1b8 0f06 	cmp.w	r8, #6
 80102c6:	d1ef      	bne.n	80102a8 <read_submessage_format+0x58>
 80102c8:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 80102cc:	b18d      	cbz	r5, 80102f2 <read_submessage_format+0xa2>
 80102ce:	2306      	movs	r3, #6
 80102d0:	f88d 3016 	strb.w	r3, [sp, #22]
 80102d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80102d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102da:	9302      	str	r3, [sp, #8]
 80102dc:	9200      	str	r2, [sp, #0]
 80102de:	9b04      	ldr	r3, [sp, #16]
 80102e0:	9905      	ldr	r1, [sp, #20]
 80102e2:	9601      	str	r6, [sp, #4]
 80102e4:	464a      	mov	r2, r9
 80102e6:	4638      	mov	r0, r7
 80102e8:	47a8      	blx	r5
 80102ea:	2301      	movs	r3, #1
 80102ec:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80102f0:	69e3      	ldr	r3, [r4, #28]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1d6      	bne.n	80102a4 <read_submessage_format+0x54>
 80102f6:	e7d7      	b.n	80102a8 <read_submessage_format+0x58>
 80102f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80102fc:	2a00      	cmp	r2, #0
 80102fe:	d0f8      	beq.n	80102f2 <read_submessage_format+0xa2>
 8010300:	a906      	add	r1, sp, #24
 8010302:	a80c      	add	r0, sp, #48	@ 0x30
 8010304:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010306:	f7fc ff2d 	bl	800d164 <uxr_deserialize_SampleIdentity>
 801030a:	2800      	cmp	r0, #0
 801030c:	d13c      	bne.n	8010388 <read_submessage_format+0x138>
 801030e:	69e3      	ldr	r3, [r4, #28]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d1c7      	bne.n	80102a4 <read_submessage_format+0x54>
 8010314:	e7c8      	b.n	80102a8 <read_submessage_format+0x58>
 8010316:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801031a:	b132      	cbz	r2, 801032a <read_submessage_format+0xda>
 801031c:	a906      	add	r1, sp, #24
 801031e:	a80c      	add	r0, sp, #48	@ 0x30
 8010320:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010322:	f7fc fc03 	bl	800cb2c <uxr_deserialize_BaseObjectRequest>
 8010326:	b930      	cbnz	r0, 8010336 <read_submessage_format+0xe6>
 8010328:	69e3      	ldr	r3, [r4, #28]
 801032a:	68a2      	ldr	r2, [r4, #8]
 801032c:	4432      	add	r2, r6
 801032e:	60a2      	str	r2, [r4, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1b7      	bne.n	80102a4 <read_submessage_format+0x54>
 8010334:	e7b8      	b.n	80102a8 <read_submessage_format+0x58>
 8010336:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801033a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801033c:	1a52      	subs	r2, r2, r1
 801033e:	a80c      	add	r0, sp, #48	@ 0x30
 8010340:	1aed      	subs	r5, r5, r3
 8010342:	f7fa fa3f 	bl	800a7c4 <ucdr_init_buffer>
 8010346:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801034a:	a80c      	add	r0, sp, #48	@ 0x30
 801034c:	f7fa fa10 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 8010350:	4435      	add	r5, r6
 8010352:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010356:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801035a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801035e:	9002      	str	r0, [sp, #8]
 8010360:	2207      	movs	r2, #7
 8010362:	f88d 2016 	strb.w	r2, [sp, #22]
 8010366:	b2ad      	uxth	r5, r5
 8010368:	aa0c      	add	r2, sp, #48	@ 0x30
 801036a:	9200      	str	r2, [sp, #0]
 801036c:	9501      	str	r5, [sp, #4]
 801036e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010372:	b29b      	uxth	r3, r3
 8010374:	9905      	ldr	r1, [sp, #20]
 8010376:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 801037a:	464a      	mov	r2, r9
 801037c:	4638      	mov	r0, r7
 801037e:	47a8      	blx	r5
 8010380:	2301      	movs	r3, #1
 8010382:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010386:	e7cf      	b.n	8010328 <read_submessage_format+0xd8>
 8010388:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801038c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801038e:	1a52      	subs	r2, r2, r1
 8010390:	a80c      	add	r0, sp, #48	@ 0x30
 8010392:	1aed      	subs	r5, r5, r3
 8010394:	f7fa fa16 	bl	800a7c4 <ucdr_init_buffer>
 8010398:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801039c:	a80c      	add	r0, sp, #48	@ 0x30
 801039e:	f7fa f9e7 	bl	800a770 <ucdr_set_on_full_buffer_callback>
 80103a2:	4435      	add	r5, r6
 80103a4:	2308      	movs	r3, #8
 80103a6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80103aa:	f88d 3016 	strb.w	r3, [sp, #22]
 80103ae:	b2ad      	uxth	r5, r5
 80103b0:	ab0c      	add	r3, sp, #48	@ 0x30
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	9002      	str	r0, [sp, #8]
 80103b6:	9501      	str	r5, [sp, #4]
 80103b8:	ab06      	add	r3, sp, #24
 80103ba:	9905      	ldr	r1, [sp, #20]
 80103bc:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 80103c0:	464a      	mov	r2, r9
 80103c2:	4638      	mov	r0, r7
 80103c4:	47a8      	blx	r5
 80103c6:	2301      	movs	r3, #1
 80103c8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80103cc:	e79f      	b.n	801030e <read_submessage_format+0xbe>
 80103ce:	bf00      	nop

080103d0 <uxr_seq_num_add>:
 80103d0:	4408      	add	r0, r1
 80103d2:	b280      	uxth	r0, r0
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop

080103d8 <uxr_seq_num_sub>:
 80103d8:	1a40      	subs	r0, r0, r1
 80103da:	b280      	uxth	r0, r0
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop

080103e0 <uxr_seq_num_cmp>:
 80103e0:	4288      	cmp	r0, r1
 80103e2:	d011      	beq.n	8010408 <uxr_seq_num_cmp+0x28>
 80103e4:	d309      	bcc.n	80103fa <uxr_seq_num_cmp+0x1a>
 80103e6:	4288      	cmp	r0, r1
 80103e8:	d910      	bls.n	801040c <uxr_seq_num_cmp+0x2c>
 80103ea:	1a40      	subs	r0, r0, r1
 80103ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80103f0:	bfd4      	ite	le
 80103f2:	2001      	movle	r0, #1
 80103f4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80103f8:	4770      	bx	lr
 80103fa:	1a0b      	subs	r3, r1, r0
 80103fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010400:	daf1      	bge.n	80103e6 <uxr_seq_num_cmp+0x6>
 8010402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010406:	4770      	bx	lr
 8010408:	2000      	movs	r0, #0
 801040a:	4770      	bx	lr
 801040c:	2001      	movs	r0, #1
 801040e:	4770      	bx	lr

08010410 <uxr_init_framing_io>:
 8010410:	2300      	movs	r3, #0
 8010412:	7041      	strb	r1, [r0, #1]
 8010414:	7003      	strb	r3, [r0, #0]
 8010416:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop

0801041c <uxr_write_framed_msg>:
 801041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010420:	7845      	ldrb	r5, [r0, #1]
 8010422:	b085      	sub	sp, #20
 8010424:	4604      	mov	r4, r0
 8010426:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801042a:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 801042e:	f1bc 0f01 	cmp.w	ip, #1
 8010432:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8010436:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801043a:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 801043e:	460e      	mov	r6, r1
 8010440:	4617      	mov	r7, r2
 8010442:	469b      	mov	fp, r3
 8010444:	f240 8116 	bls.w	8010674 <uxr_write_framed_msg+0x258>
 8010448:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801044c:	2302      	movs	r3, #2
 801044e:	2a01      	cmp	r2, #1
 8010450:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8010454:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010458:	f240 8091 	bls.w	801057e <uxr_write_framed_msg+0x162>
 801045c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801045e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010462:	b2d9      	uxtb	r1, r3
 8010464:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010468:	2203      	movs	r2, #3
 801046a:	2b01      	cmp	r3, #1
 801046c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010470:	f240 809a 	bls.w	80105a8 <uxr_write_framed_msg+0x18c>
 8010474:	18a3      	adds	r3, r4, r2
 8010476:	3201      	adds	r2, #1
 8010478:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801047c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010482:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010486:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801048a:	2901      	cmp	r1, #1
 801048c:	eb04 0102 	add.w	r1, r4, r2
 8010490:	f240 8101 	bls.w	8010696 <uxr_write_framed_msg+0x27a>
 8010494:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010498:	3201      	adds	r2, #1
 801049a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801049c:	b2d2      	uxtb	r2, r2
 801049e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 8106 	beq.w	80106b4 <uxr_write_framed_msg+0x298>
 80104a8:	f04f 0a00 	mov.w	sl, #0
 80104ac:	46d1      	mov	r9, sl
 80104ae:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80104b2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80104b6:	2901      	cmp	r1, #1
 80104b8:	f240 80a3 	bls.w	8010602 <uxr_write_framed_msg+0x1e6>
 80104bc:	2a29      	cmp	r2, #41	@ 0x29
 80104be:	d87f      	bhi.n	80105c0 <uxr_write_framed_msg+0x1a4>
 80104c0:	18a1      	adds	r1, r4, r2
 80104c2:	3201      	adds	r2, #1
 80104c4:	b2d2      	uxtb	r2, r2
 80104c6:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80104ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80104ce:	ea8a 0303 	eor.w	r3, sl, r3
 80104d2:	4984      	ldr	r1, [pc, #528]	@ (80106e4 <uxr_write_framed_msg+0x2c8>)
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	f109 0901 	add.w	r9, r9, #1
 80104da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104de:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80104e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104e4:	454b      	cmp	r3, r9
 80104e6:	d8e2      	bhi.n	80104ae <uxr_write_framed_msg+0x92>
 80104e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80104ec:	fa5f f98a 	uxtb.w	r9, sl
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	f04f 0b00 	mov.w	fp, #0
 80104f6:	f88d 900c 	strb.w	r9, [sp, #12]
 80104fa:	f88d 300d 	strb.w	r3, [sp, #13]
 80104fe:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 8010502:	fa5f f18a 	uxtb.w	r1, sl
 8010506:	2901      	cmp	r1, #1
 8010508:	d920      	bls.n	801054c <uxr_write_framed_msg+0x130>
 801050a:	2a29      	cmp	r2, #41	@ 0x29
 801050c:	f240 808b 	bls.w	8010626 <uxr_write_framed_msg+0x20a>
 8010510:	2500      	movs	r5, #0
 8010512:	e000      	b.n	8010516 <uxr_write_framed_msg+0xfa>
 8010514:	b160      	cbz	r0, 8010530 <uxr_write_framed_msg+0x114>
 8010516:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801051a:	1b52      	subs	r2, r2, r5
 801051c:	4421      	add	r1, r4
 801051e:	4643      	mov	r3, r8
 8010520:	4638      	mov	r0, r7
 8010522:	47b0      	blx	r6
 8010524:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010528:	4405      	add	r5, r0
 801052a:	4295      	cmp	r5, r2
 801052c:	d3f2      	bcc.n	8010514 <uxr_write_framed_msg+0xf8>
 801052e:	d003      	beq.n	8010538 <uxr_write_framed_msg+0x11c>
 8010530:	2000      	movs	r0, #0
 8010532:	b005      	add	sp, #20
 8010534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010538:	fa5f f18a 	uxtb.w	r1, sl
 801053c:	f04f 0300 	mov.w	r3, #0
 8010540:	2901      	cmp	r1, #1
 8010542:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010546:	f04f 0200 	mov.w	r2, #0
 801054a:	d86c      	bhi.n	8010626 <uxr_write_framed_msg+0x20a>
 801054c:	1c51      	adds	r1, r2, #1
 801054e:	b2c9      	uxtb	r1, r1
 8010550:	2929      	cmp	r1, #41	@ 0x29
 8010552:	d8dd      	bhi.n	8010510 <uxr_write_framed_msg+0xf4>
 8010554:	18a0      	adds	r0, r4, r2
 8010556:	3202      	adds	r2, #2
 8010558:	f089 0920 	eor.w	r9, r9, #32
 801055c:	b2d2      	uxtb	r2, r2
 801055e:	4659      	mov	r1, fp
 8010560:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010564:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 8010568:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801056c:	f04f 0b01 	mov.w	fp, #1
 8010570:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010574:	2900      	cmp	r1, #0
 8010576:	d162      	bne.n	801063e <uxr_write_framed_msg+0x222>
 8010578:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801057c:	e7bf      	b.n	80104fe <uxr_write_framed_msg+0xe2>
 801057e:	2204      	movs	r2, #4
 8010580:	2503      	movs	r5, #3
 8010582:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010584:	4423      	add	r3, r4
 8010586:	b2c9      	uxtb	r1, r1
 8010588:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801058c:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8010590:	4425      	add	r5, r4
 8010592:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8010596:	f080 0020 	eor.w	r0, r0, #32
 801059a:	2b01      	cmp	r3, #1
 801059c:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80105a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80105a4:	f63f af66 	bhi.w	8010474 <uxr_write_framed_msg+0x58>
 80105a8:	18a3      	adds	r3, r4, r2
 80105aa:	f081 0120 	eor.w	r1, r1, #32
 80105ae:	3202      	adds	r2, #2
 80105b0:	207d      	movs	r0, #125	@ 0x7d
 80105b2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80105b6:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 80105ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80105be:	e75f      	b.n	8010480 <uxr_write_framed_msg+0x64>
 80105c0:	2500      	movs	r5, #0
 80105c2:	e001      	b.n	80105c8 <uxr_write_framed_msg+0x1ac>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d0b3      	beq.n	8010530 <uxr_write_framed_msg+0x114>
 80105c8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80105cc:	1b52      	subs	r2, r2, r5
 80105ce:	4421      	add	r1, r4
 80105d0:	4643      	mov	r3, r8
 80105d2:	4638      	mov	r0, r7
 80105d4:	47b0      	blx	r6
 80105d6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80105da:	4405      	add	r5, r0
 80105dc:	4295      	cmp	r5, r2
 80105de:	d3f1      	bcc.n	80105c4 <uxr_write_framed_msg+0x1a8>
 80105e0:	d1a6      	bne.n	8010530 <uxr_write_framed_msg+0x114>
 80105e2:	f04f 0300 	mov.w	r3, #0
 80105e6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80105ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105ec:	454b      	cmp	r3, r9
 80105ee:	d971      	bls.n	80106d4 <uxr_write_framed_msg+0x2b8>
 80105f0:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80105f4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80105f8:	2901      	cmp	r1, #1
 80105fa:	f04f 0200 	mov.w	r2, #0
 80105fe:	f63f af5d 	bhi.w	80104bc <uxr_write_framed_msg+0xa0>
 8010602:	1c51      	adds	r1, r2, #1
 8010604:	b2c9      	uxtb	r1, r1
 8010606:	2929      	cmp	r1, #41	@ 0x29
 8010608:	d8da      	bhi.n	80105c0 <uxr_write_framed_msg+0x1a4>
 801060a:	18a0      	adds	r0, r4, r2
 801060c:	3202      	adds	r2, #2
 801060e:	b2d2      	uxtb	r2, r2
 8010610:	f083 0120 	eor.w	r1, r3, #32
 8010614:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8010618:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801061c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8010620:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010624:	e753      	b.n	80104ce <uxr_write_framed_msg+0xb2>
 8010626:	18a0      	adds	r0, r4, r2
 8010628:	3201      	adds	r2, #1
 801062a:	b2d2      	uxtb	r2, r2
 801062c:	4659      	mov	r1, fp
 801062e:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 8010632:	f04f 0b01 	mov.w	fp, #1
 8010636:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801063a:	2900      	cmp	r1, #0
 801063c:	d09c      	beq.n	8010578 <uxr_write_framed_msg+0x15c>
 801063e:	2500      	movs	r5, #0
 8010640:	e002      	b.n	8010648 <uxr_write_framed_msg+0x22c>
 8010642:	2800      	cmp	r0, #0
 8010644:	f43f af74 	beq.w	8010530 <uxr_write_framed_msg+0x114>
 8010648:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801064c:	1b52      	subs	r2, r2, r5
 801064e:	4421      	add	r1, r4
 8010650:	4643      	mov	r3, r8
 8010652:	4638      	mov	r0, r7
 8010654:	47b0      	blx	r6
 8010656:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801065a:	4405      	add	r5, r0
 801065c:	4295      	cmp	r5, r2
 801065e:	d3f0      	bcc.n	8010642 <uxr_write_framed_msg+0x226>
 8010660:	f47f af66 	bne.w	8010530 <uxr_write_framed_msg+0x114>
 8010664:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010666:	2300      	movs	r3, #0
 8010668:	b290      	uxth	r0, r2
 801066a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801066e:	b005      	add	sp, #20
 8010670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010674:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8010678:	f085 0520 	eor.w	r5, r5, #32
 801067c:	2303      	movs	r3, #3
 801067e:	217d      	movs	r1, #125	@ 0x7d
 8010680:	2a01      	cmp	r2, #1
 8010682:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 8010686:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801068a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801068e:	d814      	bhi.n	80106ba <uxr_write_framed_msg+0x29e>
 8010690:	2205      	movs	r2, #5
 8010692:	2504      	movs	r5, #4
 8010694:	e775      	b.n	8010582 <uxr_write_framed_msg+0x166>
 8010696:	f083 0320 	eor.w	r3, r3, #32
 801069a:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 801069e:	3202      	adds	r2, #2
 80106a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106a2:	b2d2      	uxtb	r2, r2
 80106a4:	207d      	movs	r0, #125	@ 0x7d
 80106a6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80106aa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f47f aefa 	bne.w	80104a8 <uxr_write_framed_msg+0x8c>
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	4699      	mov	r9, r3
 80106b8:	e71b      	b.n	80104f2 <uxr_write_framed_msg+0xd6>
 80106ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106bc:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80106c0:	b2d9      	uxtb	r1, r3
 80106c2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80106c6:	2204      	movs	r2, #4
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80106ce:	f63f aed1 	bhi.w	8010474 <uxr_write_framed_msg+0x58>
 80106d2:	e769      	b.n	80105a8 <uxr_write_framed_msg+0x18c>
 80106d4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80106d8:	fa5f f98a 	uxtb.w	r9, sl
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	e707      	b.n	80104f2 <uxr_write_framed_msg+0xd6>
 80106e2:	bf00      	nop
 80106e4:	08012e98 	.word	0x08012e98

080106e8 <uxr_framing_read_transport>:
 80106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	4604      	mov	r4, r0
 80106ee:	b083      	sub	sp, #12
 80106f0:	461f      	mov	r7, r3
 80106f2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80106f6:	4689      	mov	r9, r1
 80106f8:	4692      	mov	sl, r2
 80106fa:	f7fb fc45 	bl	800bf88 <uxr_millis>
 80106fe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010702:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8010706:	42b3      	cmp	r3, r6
 8010708:	4680      	mov	r8, r0
 801070a:	d05f      	beq.n	80107cc <uxr_framing_read_transport+0xe4>
 801070c:	d81b      	bhi.n	8010746 <uxr_framing_read_transport+0x5e>
 801070e:	1e75      	subs	r5, r6, #1
 8010710:	1aed      	subs	r5, r5, r3
 8010712:	b2ed      	uxtb	r5, r5
 8010714:	2600      	movs	r6, #0
 8010716:	455d      	cmp	r5, fp
 8010718:	d81e      	bhi.n	8010758 <uxr_framing_read_transport+0x70>
 801071a:	19ab      	adds	r3, r5, r6
 801071c:	455b      	cmp	r3, fp
 801071e:	bf84      	itt	hi
 8010720:	ebab 0605 	subhi.w	r6, fp, r5
 8010724:	b2f6      	uxtbhi	r6, r6
 8010726:	b9e5      	cbnz	r5, 8010762 <uxr_framing_read_transport+0x7a>
 8010728:	f04f 0b00 	mov.w	fp, #0
 801072c:	f7fb fc2c 	bl	800bf88 <uxr_millis>
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	eba0 0008 	sub.w	r0, r0, r8
 8010736:	1a1b      	subs	r3, r3, r0
 8010738:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801073c:	4658      	mov	r0, fp
 801073e:	603b      	str	r3, [r7, #0]
 8010740:	b003      	add	sp, #12
 8010742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010746:	2e00      	cmp	r6, #0
 8010748:	d048      	beq.n	80107dc <uxr_framing_read_transport+0xf4>
 801074a:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801074e:	b2ed      	uxtb	r5, r5
 8010750:	3e01      	subs	r6, #1
 8010752:	455d      	cmp	r5, fp
 8010754:	b2f6      	uxtb	r6, r6
 8010756:	d9e0      	bls.n	801071a <uxr_framing_read_transport+0x32>
 8010758:	fa5f f58b 	uxtb.w	r5, fp
 801075c:	2600      	movs	r6, #0
 801075e:	2d00      	cmp	r5, #0
 8010760:	d0e2      	beq.n	8010728 <uxr_framing_read_transport+0x40>
 8010762:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010766:	3102      	adds	r1, #2
 8010768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	4421      	add	r1, r4
 8010770:	462a      	mov	r2, r5
 8010772:	4650      	mov	r0, sl
 8010774:	47c8      	blx	r9
 8010776:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801077a:	4a1b      	ldr	r2, [pc, #108]	@ (80107e8 <uxr_framing_read_transport+0x100>)
 801077c:	4403      	add	r3, r0
 801077e:	0859      	lsrs	r1, r3, #1
 8010780:	fba2 2101 	umull	r2, r1, r2, r1
 8010784:	0889      	lsrs	r1, r1, #2
 8010786:	222a      	movs	r2, #42	@ 0x2a
 8010788:	fb02 3111 	mls	r1, r2, r1, r3
 801078c:	4683      	mov	fp, r0
 801078e:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8010792:	2800      	cmp	r0, #0
 8010794:	d0c8      	beq.n	8010728 <uxr_framing_read_transport+0x40>
 8010796:	42a8      	cmp	r0, r5
 8010798:	d1c8      	bne.n	801072c <uxr_framing_read_transport+0x44>
 801079a:	b31e      	cbz	r6, 80107e4 <uxr_framing_read_transport+0xfc>
 801079c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	3102      	adds	r1, #2
 80107a2:	4421      	add	r1, r4
 80107a4:	4632      	mov	r2, r6
 80107a6:	2300      	movs	r3, #0
 80107a8:	4650      	mov	r0, sl
 80107aa:	47c8      	blx	r9
 80107ac:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80107b0:	490d      	ldr	r1, [pc, #52]	@ (80107e8 <uxr_framing_read_transport+0x100>)
 80107b2:	181a      	adds	r2, r3, r0
 80107b4:	0853      	lsrs	r3, r2, #1
 80107b6:	fba1 1303 	umull	r1, r3, r1, r3
 80107ba:	089b      	lsrs	r3, r3, #2
 80107bc:	212a      	movs	r1, #42	@ 0x2a
 80107be:	fb01 2313 	mls	r3, r1, r3, r2
 80107c2:	eb00 0b05 	add.w	fp, r0, r5
 80107c6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80107ca:	e7af      	b.n	801072c <uxr_framing_read_transport+0x44>
 80107cc:	2600      	movs	r6, #0
 80107ce:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80107d2:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80107d4:	d9c0      	bls.n	8010758 <uxr_framing_read_transport+0x70>
 80107d6:	2102      	movs	r1, #2
 80107d8:	2529      	movs	r5, #41	@ 0x29
 80107da:	e7c5      	b.n	8010768 <uxr_framing_read_transport+0x80>
 80107dc:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80107e0:	b2ed      	uxtb	r5, r5
 80107e2:	e798      	b.n	8010716 <uxr_framing_read_transport+0x2e>
 80107e4:	46ab      	mov	fp, r5
 80107e6:	e7a1      	b.n	801072c <uxr_framing_read_transport+0x44>
 80107e8:	30c30c31 	.word	0x30c30c31

080107ec <uxr_read_framed_msg>:
 80107ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f0:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 80107f4:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80107f8:	42ae      	cmp	r6, r5
 80107fa:	b083      	sub	sp, #12
 80107fc:	4604      	mov	r4, r0
 80107fe:	461f      	mov	r7, r3
 8010800:	4689      	mov	r9, r1
 8010802:	4692      	mov	sl, r2
 8010804:	f000 817d 	beq.w	8010b02 <uxr_read_framed_msg+0x316>
 8010808:	7823      	ldrb	r3, [r4, #0]
 801080a:	4ecc      	ldr	r6, [pc, #816]	@ (8010b3c <uxr_read_framed_msg+0x350>)
 801080c:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 8010b40 <uxr_read_framed_msg+0x354>
 8010810:	2b07      	cmp	r3, #7
 8010812:	d8fd      	bhi.n	8010810 <uxr_read_framed_msg+0x24>
 8010814:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010818:	00f40113 	.word	0x00f40113
 801081c:	00b700d4 	.word	0x00b700d4
 8010820:	004d008e 	.word	0x004d008e
 8010824:	00080030 	.word	0x00080030
 8010828:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801082c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010830:	4298      	cmp	r0, r3
 8010832:	f000 8141 	beq.w	8010ab8 <uxr_read_framed_msg+0x2cc>
 8010836:	18e2      	adds	r2, r4, r3
 8010838:	7891      	ldrb	r1, [r2, #2]
 801083a:	297d      	cmp	r1, #125	@ 0x7d
 801083c:	f000 81a2 	beq.w	8010b84 <uxr_read_framed_msg+0x398>
 8010840:	3301      	adds	r3, #1
 8010842:	085a      	lsrs	r2, r3, #1
 8010844:	fba6 0202 	umull	r0, r2, r6, r2
 8010848:	0892      	lsrs	r2, r2, #2
 801084a:	202a      	movs	r0, #42	@ 0x2a
 801084c:	fb00 3312 	mls	r3, r0, r2, r3
 8010850:	297e      	cmp	r1, #126	@ 0x7e
 8010852:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010856:	f000 8251 	beq.w	8010cfc <uxr_read_framed_msg+0x510>
 801085a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801085c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801085e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010862:	b29b      	uxth	r3, r3
 8010864:	2100      	movs	r1, #0
 8010866:	429a      	cmp	r2, r3
 8010868:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801086a:	7021      	strb	r1, [r4, #0]
 801086c:	f000 8182 	beq.w	8010b74 <uxr_read_framed_msg+0x388>
 8010870:	2000      	movs	r0, #0
 8010872:	b003      	add	sp, #12
 8010874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010878:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801087c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010880:	4298      	cmp	r0, r3
 8010882:	f000 8128 	beq.w	8010ad6 <uxr_read_framed_msg+0x2ea>
 8010886:	18e2      	adds	r2, r4, r3
 8010888:	7891      	ldrb	r1, [r2, #2]
 801088a:	297d      	cmp	r1, #125	@ 0x7d
 801088c:	f000 8196 	beq.w	8010bbc <uxr_read_framed_msg+0x3d0>
 8010890:	3301      	adds	r3, #1
 8010892:	085a      	lsrs	r2, r3, #1
 8010894:	fba6 0202 	umull	r0, r2, r6, r2
 8010898:	0892      	lsrs	r2, r2, #2
 801089a:	202a      	movs	r0, #42	@ 0x2a
 801089c:	fb00 3312 	mls	r3, r0, r2, r3
 80108a0:	297e      	cmp	r1, #126	@ 0x7e
 80108a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80108a6:	f000 8219 	beq.w	8010cdc <uxr_read_framed_msg+0x4f0>
 80108aa:	2307      	movs	r3, #7
 80108ac:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80108ae:	7023      	strb	r3, [r4, #0]
 80108b0:	e7ae      	b.n	8010810 <uxr_read_framed_msg+0x24>
 80108b2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80108b4:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 80108b6:	429d      	cmp	r5, r3
 80108b8:	d937      	bls.n	801092a <uxr_read_framed_msg+0x13e>
 80108ba:	ee07 9a90 	vmov	s15, r9
 80108be:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80108c2:	e01e      	b.n	8010902 <uxr_read_framed_msg+0x116>
 80108c4:	f89e e002 	ldrb.w	lr, [lr, #2]
 80108c8:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 80108cc:	f000 80d2 	beq.w	8010a74 <uxr_read_framed_msg+0x288>
 80108d0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80108d4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80108d8:	f000 8214 	beq.w	8010d04 <uxr_read_framed_msg+0x518>
 80108dc:	f807 e003 	strb.w	lr, [r7, r3]
 80108e0:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80108e2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80108e4:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 80108e6:	ea80 010e 	eor.w	r1, r0, lr
 80108ea:	b2c9      	uxtb	r1, r1
 80108ec:	3301      	adds	r3, #1
 80108ee:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80108f8:	42ab      	cmp	r3, r5
 80108fa:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80108fc:	8663      	strh	r3, [r4, #50]	@ 0x32
 80108fe:	f080 8121 	bcs.w	8010b44 <uxr_read_framed_msg+0x358>
 8010902:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 8010906:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801090a:	f101 0b01 	add.w	fp, r1, #1
 801090e:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8010912:	fba6 9202 	umull	r9, r2, r6, r2
 8010916:	0892      	lsrs	r2, r2, #2
 8010918:	4288      	cmp	r0, r1
 801091a:	eb04 0e01 	add.w	lr, r4, r1
 801091e:	fb0c b212 	mls	r2, ip, r2, fp
 8010922:	d1cf      	bne.n	80108c4 <uxr_read_framed_msg+0xd8>
 8010924:	ee17 9a90 	vmov	r9, s15
 8010928:	429d      	cmp	r5, r3
 801092a:	f040 8112 	bne.w	8010b52 <uxr_read_framed_msg+0x366>
 801092e:	2306      	movs	r3, #6
 8010930:	7023      	strb	r3, [r4, #0]
 8010932:	e76d      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010934:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010938:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801093c:	4298      	cmp	r0, r3
 801093e:	f000 80bb 	beq.w	8010ab8 <uxr_read_framed_msg+0x2cc>
 8010942:	18e2      	adds	r2, r4, r3
 8010944:	7891      	ldrb	r1, [r2, #2]
 8010946:	297d      	cmp	r1, #125	@ 0x7d
 8010948:	f000 8153 	beq.w	8010bf2 <uxr_read_framed_msg+0x406>
 801094c:	3301      	adds	r3, #1
 801094e:	085a      	lsrs	r2, r3, #1
 8010950:	fba6 0202 	umull	r0, r2, r6, r2
 8010954:	0892      	lsrs	r2, r2, #2
 8010956:	202a      	movs	r0, #42	@ 0x2a
 8010958:	fb00 3212 	mls	r2, r0, r2, r3
 801095c:	297e      	cmp	r1, #126	@ 0x7e
 801095e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010962:	f000 81cb 	beq.w	8010cfc <uxr_read_framed_msg+0x510>
 8010966:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010968:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801096c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801096e:	b29b      	uxth	r3, r3
 8010970:	2000      	movs	r0, #0
 8010972:	428b      	cmp	r3, r1
 8010974:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010976:	8660      	strh	r0, [r4, #50]	@ 0x32
 8010978:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801097a:	f240 80db 	bls.w	8010b34 <uxr_read_framed_msg+0x348>
 801097e:	7020      	strb	r0, [r4, #0]
 8010980:	b003      	add	sp, #12
 8010982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010986:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801098a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801098e:	4298      	cmp	r0, r3
 8010990:	f000 80a1 	beq.w	8010ad6 <uxr_read_framed_msg+0x2ea>
 8010994:	18e2      	adds	r2, r4, r3
 8010996:	7891      	ldrb	r1, [r2, #2]
 8010998:	297d      	cmp	r1, #125	@ 0x7d
 801099a:	f000 8167 	beq.w	8010c6c <uxr_read_framed_msg+0x480>
 801099e:	3301      	adds	r3, #1
 80109a0:	085a      	lsrs	r2, r3, #1
 80109a2:	fba6 0202 	umull	r0, r2, r6, r2
 80109a6:	0892      	lsrs	r2, r2, #2
 80109a8:	202a      	movs	r0, #42	@ 0x2a
 80109aa:	fb00 3312 	mls	r3, r0, r2, r3
 80109ae:	297e      	cmp	r1, #126	@ 0x7e
 80109b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80109b4:	f000 8192 	beq.w	8010cdc <uxr_read_framed_msg+0x4f0>
 80109b8:	2304      	movs	r3, #4
 80109ba:	8621      	strh	r1, [r4, #48]	@ 0x30
 80109bc:	7023      	strb	r3, [r4, #0]
 80109be:	e727      	b.n	8010810 <uxr_read_framed_msg+0x24>
 80109c0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80109c4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80109c8:	4290      	cmp	r0, r2
 80109ca:	f000 80b1 	beq.w	8010b30 <uxr_read_framed_msg+0x344>
 80109ce:	18a3      	adds	r3, r4, r2
 80109d0:	7899      	ldrb	r1, [r3, #2]
 80109d2:	297d      	cmp	r1, #125	@ 0x7d
 80109d4:	f000 8166 	beq.w	8010ca4 <uxr_read_framed_msg+0x4b8>
 80109d8:	3201      	adds	r2, #1
 80109da:	0850      	lsrs	r0, r2, #1
 80109dc:	fba6 3000 	umull	r3, r0, r6, r0
 80109e0:	0880      	lsrs	r0, r0, #2
 80109e2:	232a      	movs	r3, #42	@ 0x2a
 80109e4:	fb03 2210 	mls	r2, r3, r0, r2
 80109e8:	297e      	cmp	r1, #126	@ 0x7e
 80109ea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80109ee:	f000 8187 	beq.w	8010d00 <uxr_read_framed_msg+0x514>
 80109f2:	7863      	ldrb	r3, [r4, #1]
 80109f4:	428b      	cmp	r3, r1
 80109f6:	bf0c      	ite	eq
 80109f8:	2303      	moveq	r3, #3
 80109fa:	2300      	movne	r3, #0
 80109fc:	7023      	strb	r3, [r4, #0]
 80109fe:	e707      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010a00:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010a04:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4299      	cmp	r1, r3
 8010a0c:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8010a10:	d063      	beq.n	8010ada <uxr_read_framed_msg+0x2ee>
 8010a12:	18e2      	adds	r2, r4, r3
 8010a14:	7892      	ldrb	r2, [r2, #2]
 8010a16:	2a7d      	cmp	r2, #125	@ 0x7d
 8010a18:	f000 8107 	beq.w	8010c2a <uxr_read_framed_msg+0x43e>
 8010a1c:	1c59      	adds	r1, r3, #1
 8010a1e:	084b      	lsrs	r3, r1, #1
 8010a20:	fba6 0303 	umull	r0, r3, r6, r3
 8010a24:	089b      	lsrs	r3, r3, #2
 8010a26:	202a      	movs	r0, #42	@ 0x2a
 8010a28:	fb00 1313 	mls	r3, r0, r3, r1
 8010a2c:	2a7e      	cmp	r2, #126	@ 0x7e
 8010a2e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8010a32:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a36:	d050      	beq.n	8010ada <uxr_read_framed_msg+0x2ee>
 8010a38:	2302      	movs	r3, #2
 8010a3a:	7023      	strb	r3, [r4, #0]
 8010a3c:	e6e8      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010a3e:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 8010a42:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010a46:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010a4a:	1c51      	adds	r1, r2, #1
 8010a4c:	084b      	lsrs	r3, r1, #1
 8010a4e:	fba6 5303 	umull	r5, r3, r6, r3
 8010a52:	089b      	lsrs	r3, r3, #2
 8010a54:	fb0c 1313 	mls	r3, ip, r3, r1
 8010a58:	4596      	cmp	lr, r2
 8010a5a:	eb04 0002 	add.w	r0, r4, r2
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	f43f af06 	beq.w	8010870 <uxr_read_framed_msg+0x84>
 8010a64:	7883      	ldrb	r3, [r0, #2]
 8010a66:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a6a:	2b7e      	cmp	r3, #126	@ 0x7e
 8010a6c:	d1ed      	bne.n	8010a4a <uxr_read_framed_msg+0x25e>
 8010a6e:	2301      	movs	r3, #1
 8010a70:	7023      	strb	r3, [r4, #0]
 8010a72:	e6cd      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010a74:	f101 0b01 	add.w	fp, r1, #1
 8010a78:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8010a7c:	fba6 e202 	umull	lr, r2, r6, r2
 8010a80:	3102      	adds	r1, #2
 8010a82:	0892      	lsrs	r2, r2, #2
 8010a84:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8010a88:	fb0c b212 	mls	r2, ip, r2, fp
 8010a8c:	fba6 9e0e 	umull	r9, lr, r6, lr
 8010a90:	eb04 0b02 	add.w	fp, r4, r2
 8010a94:	b2d2      	uxtb	r2, r2
 8010a96:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8010a9a:	4290      	cmp	r0, r2
 8010a9c:	fb0c 111e 	mls	r1, ip, lr, r1
 8010aa0:	f43f af40 	beq.w	8010924 <uxr_read_framed_msg+0x138>
 8010aa4:	f89b e002 	ldrb.w	lr, [fp, #2]
 8010aa8:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8010aac:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8010ab0:	d036      	beq.n	8010b20 <uxr_read_framed_msg+0x334>
 8010ab2:	f08e 0e20 	eor.w	lr, lr, #32
 8010ab6:	e711      	b.n	80108dc <uxr_read_framed_msg+0xf0>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010abc:	4649      	mov	r1, r9
 8010abe:	e9cd 2300 	strd	r2, r3, [sp]
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ac6:	4652      	mov	r2, sl
 8010ac8:	f7ff fe0e 	bl	80106e8 <uxr_framing_read_transport>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	f43f aecf 	beq.w	8010870 <uxr_read_framed_msg+0x84>
 8010ad2:	7823      	ldrb	r3, [r4, #0]
 8010ad4:	e69c      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	e7ef      	b.n	8010aba <uxr_read_framed_msg+0x2ce>
 8010ada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010adc:	2304      	movs	r3, #4
 8010ade:	e9cd 2300 	strd	r2, r3, [sp]
 8010ae2:	4649      	mov	r1, r9
 8010ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ae6:	4652      	mov	r2, sl
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f7ff fdfd 	bl	80106e8 <uxr_framing_read_transport>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d1ef      	bne.n	8010ad2 <uxr_read_framed_msg+0x2e6>
 8010af2:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8010af6:	387e      	subs	r0, #126	@ 0x7e
 8010af8:	bf18      	it	ne
 8010afa:	2001      	movne	r0, #1
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d0e8      	beq.n	8010ad2 <uxr_read_framed_msg+0x2e6>
 8010b00:	e6b6      	b.n	8010870 <uxr_read_framed_msg+0x84>
 8010b02:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010b04:	2305      	movs	r3, #5
 8010b06:	e9cd 5300 	strd	r5, r3, [sp]
 8010b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b0c:	f7ff fdec 	bl	80106e8 <uxr_framing_read_transport>
 8010b10:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010b14:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	f43f aea9 	beq.w	8010870 <uxr_read_framed_msg+0x84>
 8010b1e:	e673      	b.n	8010808 <uxr_read_framed_msg+0x1c>
 8010b20:	429d      	cmp	r5, r3
 8010b22:	ee17 9a90 	vmov	r9, s15
 8010b26:	f43f af02 	beq.w	801092e <uxr_read_framed_msg+0x142>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	7023      	strb	r3, [r4, #0]
 8010b2e:	e66f      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010b30:	2303      	movs	r3, #3
 8010b32:	e7c2      	b.n	8010aba <uxr_read_framed_msg+0x2ce>
 8010b34:	2305      	movs	r3, #5
 8010b36:	7023      	strb	r3, [r4, #0]
 8010b38:	e66a      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010b3a:	bf00      	nop
 8010b3c:	30c30c31 	.word	0x30c30c31
 8010b40:	08012e98 	.word	0x08012e98
 8010b44:	ee17 9a90 	vmov	r9, s15
 8010b48:	f43f aef1 	beq.w	801092e <uxr_read_framed_msg+0x142>
 8010b4c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8010b50:	d08d      	beq.n	8010a6e <uxr_read_framed_msg+0x282>
 8010b52:	1aeb      	subs	r3, r5, r3
 8010b54:	3302      	adds	r3, #2
 8010b56:	9301      	str	r3, [sp, #4]
 8010b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b5a:	9300      	str	r3, [sp, #0]
 8010b5c:	4652      	mov	r2, sl
 8010b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b60:	4649      	mov	r1, r9
 8010b62:	4620      	mov	r0, r4
 8010b64:	f7ff fdc0 	bl	80106e8 <uxr_framing_read_transport>
 8010b68:	fab0 f080 	clz	r0, r0
 8010b6c:	0940      	lsrs	r0, r0, #5
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0af      	beq.n	8010ad2 <uxr_read_framed_msg+0x2e6>
 8010b72:	e67d      	b.n	8010870 <uxr_read_framed_msg+0x84>
 8010b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010b76:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010b7a:	7013      	strb	r3, [r2, #0]
 8010b7c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8010b7e:	b003      	add	sp, #12
 8010b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b84:	1c59      	adds	r1, r3, #1
 8010b86:	084a      	lsrs	r2, r1, #1
 8010b88:	fba6 5202 	umull	r5, r2, r6, r2
 8010b8c:	0892      	lsrs	r2, r2, #2
 8010b8e:	252a      	movs	r5, #42	@ 0x2a
 8010b90:	fb05 1212 	mls	r2, r5, r2, r1
 8010b94:	b2d1      	uxtb	r1, r2
 8010b96:	4288      	cmp	r0, r1
 8010b98:	d08e      	beq.n	8010ab8 <uxr_read_framed_msg+0x2cc>
 8010b9a:	3302      	adds	r3, #2
 8010b9c:	4422      	add	r2, r4
 8010b9e:	0858      	lsrs	r0, r3, #1
 8010ba0:	fba6 1000 	umull	r1, r0, r6, r0
 8010ba4:	7891      	ldrb	r1, [r2, #2]
 8010ba6:	0882      	lsrs	r2, r0, #2
 8010ba8:	fb05 3312 	mls	r3, r5, r2, r3
 8010bac:	297e      	cmp	r1, #126	@ 0x7e
 8010bae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010bb2:	f000 80a3 	beq.w	8010cfc <uxr_read_framed_msg+0x510>
 8010bb6:	f081 0120 	eor.w	r1, r1, #32
 8010bba:	e64e      	b.n	801085a <uxr_read_framed_msg+0x6e>
 8010bbc:	1c59      	adds	r1, r3, #1
 8010bbe:	084a      	lsrs	r2, r1, #1
 8010bc0:	fba6 5202 	umull	r5, r2, r6, r2
 8010bc4:	0892      	lsrs	r2, r2, #2
 8010bc6:	252a      	movs	r5, #42	@ 0x2a
 8010bc8:	fb05 1212 	mls	r2, r5, r2, r1
 8010bcc:	b2d1      	uxtb	r1, r2
 8010bce:	4288      	cmp	r0, r1
 8010bd0:	d081      	beq.n	8010ad6 <uxr_read_framed_msg+0x2ea>
 8010bd2:	3302      	adds	r3, #2
 8010bd4:	4422      	add	r2, r4
 8010bd6:	0858      	lsrs	r0, r3, #1
 8010bd8:	fba6 1000 	umull	r1, r0, r6, r0
 8010bdc:	7891      	ldrb	r1, [r2, #2]
 8010bde:	0882      	lsrs	r2, r0, #2
 8010be0:	fb05 3312 	mls	r3, r5, r2, r3
 8010be4:	297e      	cmp	r1, #126	@ 0x7e
 8010be6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010bea:	d077      	beq.n	8010cdc <uxr_read_framed_msg+0x4f0>
 8010bec:	f081 0120 	eor.w	r1, r1, #32
 8010bf0:	e65b      	b.n	80108aa <uxr_read_framed_msg+0xbe>
 8010bf2:	1c59      	adds	r1, r3, #1
 8010bf4:	084a      	lsrs	r2, r1, #1
 8010bf6:	fba6 5202 	umull	r5, r2, r6, r2
 8010bfa:	0892      	lsrs	r2, r2, #2
 8010bfc:	252a      	movs	r5, #42	@ 0x2a
 8010bfe:	fb05 1212 	mls	r2, r5, r2, r1
 8010c02:	b2d1      	uxtb	r1, r2
 8010c04:	4288      	cmp	r0, r1
 8010c06:	f43f af57 	beq.w	8010ab8 <uxr_read_framed_msg+0x2cc>
 8010c0a:	3302      	adds	r3, #2
 8010c0c:	4422      	add	r2, r4
 8010c0e:	0858      	lsrs	r0, r3, #1
 8010c10:	fba6 1000 	umull	r1, r0, r6, r0
 8010c14:	7891      	ldrb	r1, [r2, #2]
 8010c16:	0882      	lsrs	r2, r0, #2
 8010c18:	fb05 3312 	mls	r3, r5, r2, r3
 8010c1c:	297e      	cmp	r1, #126	@ 0x7e
 8010c1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010c22:	d06b      	beq.n	8010cfc <uxr_read_framed_msg+0x510>
 8010c24:	f081 0120 	eor.w	r1, r1, #32
 8010c28:	e69d      	b.n	8010966 <uxr_read_framed_msg+0x17a>
 8010c2a:	1c5d      	adds	r5, r3, #1
 8010c2c:	086a      	lsrs	r2, r5, #1
 8010c2e:	fba6 0202 	umull	r0, r2, r6, r2
 8010c32:	0892      	lsrs	r2, r2, #2
 8010c34:	202a      	movs	r0, #42	@ 0x2a
 8010c36:	fb00 5212 	mls	r2, r0, r2, r5
 8010c3a:	b2d5      	uxtb	r5, r2
 8010c3c:	42a9      	cmp	r1, r5
 8010c3e:	f43f af4c 	beq.w	8010ada <uxr_read_framed_msg+0x2ee>
 8010c42:	3302      	adds	r3, #2
 8010c44:	4422      	add	r2, r4
 8010c46:	0859      	lsrs	r1, r3, #1
 8010c48:	fba6 5101 	umull	r5, r1, r6, r1
 8010c4c:	7895      	ldrb	r5, [r2, #2]
 8010c4e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8010c52:	088a      	lsrs	r2, r1, #2
 8010c54:	fb00 3312 	mls	r3, r0, r2, r3
 8010c58:	2d7e      	cmp	r5, #126	@ 0x7e
 8010c5a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010c5e:	f43f af3c 	beq.w	8010ada <uxr_read_framed_msg+0x2ee>
 8010c62:	f085 0520 	eor.w	r5, r5, #32
 8010c66:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8010c6a:	e6e5      	b.n	8010a38 <uxr_read_framed_msg+0x24c>
 8010c6c:	1c59      	adds	r1, r3, #1
 8010c6e:	084a      	lsrs	r2, r1, #1
 8010c70:	fba6 5202 	umull	r5, r2, r6, r2
 8010c74:	0892      	lsrs	r2, r2, #2
 8010c76:	252a      	movs	r5, #42	@ 0x2a
 8010c78:	fb05 1212 	mls	r2, r5, r2, r1
 8010c7c:	b2d1      	uxtb	r1, r2
 8010c7e:	4288      	cmp	r0, r1
 8010c80:	f43f af29 	beq.w	8010ad6 <uxr_read_framed_msg+0x2ea>
 8010c84:	3302      	adds	r3, #2
 8010c86:	4422      	add	r2, r4
 8010c88:	0858      	lsrs	r0, r3, #1
 8010c8a:	fba6 1000 	umull	r1, r0, r6, r0
 8010c8e:	7891      	ldrb	r1, [r2, #2]
 8010c90:	0882      	lsrs	r2, r0, #2
 8010c92:	fb05 3312 	mls	r3, r5, r2, r3
 8010c96:	297e      	cmp	r1, #126	@ 0x7e
 8010c98:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010c9c:	d01e      	beq.n	8010cdc <uxr_read_framed_msg+0x4f0>
 8010c9e:	f081 0120 	eor.w	r1, r1, #32
 8010ca2:	e689      	b.n	80109b8 <uxr_read_framed_msg+0x1cc>
 8010ca4:	1c51      	adds	r1, r2, #1
 8010ca6:	084b      	lsrs	r3, r1, #1
 8010ca8:	fba6 5303 	umull	r5, r3, r6, r3
 8010cac:	089b      	lsrs	r3, r3, #2
 8010cae:	252a      	movs	r5, #42	@ 0x2a
 8010cb0:	fb05 1313 	mls	r3, r5, r3, r1
 8010cb4:	b2d9      	uxtb	r1, r3
 8010cb6:	4288      	cmp	r0, r1
 8010cb8:	f43f af3a 	beq.w	8010b30 <uxr_read_framed_msg+0x344>
 8010cbc:	3202      	adds	r2, #2
 8010cbe:	4423      	add	r3, r4
 8010cc0:	0850      	lsrs	r0, r2, #1
 8010cc2:	789b      	ldrb	r3, [r3, #2]
 8010cc4:	fba6 1000 	umull	r1, r0, r6, r0
 8010cc8:	0880      	lsrs	r0, r0, #2
 8010cca:	fb05 2210 	mls	r2, r5, r0, r2
 8010cce:	2b7e      	cmp	r3, #126	@ 0x7e
 8010cd0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010cd4:	d014      	beq.n	8010d00 <uxr_read_framed_msg+0x514>
 8010cd6:	f083 0120 	eor.w	r1, r3, #32
 8010cda:	e68a      	b.n	80109f2 <uxr_read_framed_msg+0x206>
 8010cdc:	2302      	movs	r3, #2
 8010cde:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cea:	4652      	mov	r2, sl
 8010cec:	f7ff fcfc 	bl	80106e8 <uxr_framing_read_transport>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	f47f aeee 	bne.w	8010ad2 <uxr_read_framed_msg+0x2e6>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	7023      	strb	r3, [r4, #0]
 8010cfa:	e589      	b.n	8010810 <uxr_read_framed_msg+0x24>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	e7ee      	b.n	8010cde <uxr_read_framed_msg+0x4f2>
 8010d00:	2303      	movs	r3, #3
 8010d02:	e7ec      	b.n	8010cde <uxr_read_framed_msg+0x4f2>
 8010d04:	ee17 9a90 	vmov	r9, s15
 8010d08:	e6b1      	b.n	8010a6e <uxr_read_framed_msg+0x282>
 8010d0a:	bf00      	nop

08010d0c <rcl_get_default_domain_id>:
 8010d0c:	b530      	push	{r4, r5, lr}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	2300      	movs	r3, #0
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	b1d0      	cbz	r0, 8010d4c <rcl_get_default_domain_id+0x40>
 8010d16:	4604      	mov	r4, r0
 8010d18:	4669      	mov	r1, sp
 8010d1a:	4815      	ldr	r0, [pc, #84]	@ (8010d70 <rcl_get_default_domain_id+0x64>)
 8010d1c:	f7fd fbbe 	bl	800e49c <rcutils_get_env>
 8010d20:	4602      	mov	r2, r0
 8010d22:	b110      	cbz	r0, 8010d2a <rcl_get_default_domain_id+0x1e>
 8010d24:	2001      	movs	r0, #1
 8010d26:	b003      	add	sp, #12
 8010d28:	bd30      	pop	{r4, r5, pc}
 8010d2a:	9b00      	ldr	r3, [sp, #0]
 8010d2c:	b18b      	cbz	r3, 8010d52 <rcl_get_default_domain_id+0x46>
 8010d2e:	7818      	ldrb	r0, [r3, #0]
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d0f8      	beq.n	8010d26 <rcl_get_default_domain_id+0x1a>
 8010d34:	4618      	mov	r0, r3
 8010d36:	a901      	add	r1, sp, #4
 8010d38:	9201      	str	r2, [sp, #4]
 8010d3a:	f000 fc3f 	bl	80115bc <strtoul>
 8010d3e:	4605      	mov	r5, r0
 8010d40:	b150      	cbz	r0, 8010d58 <rcl_get_default_domain_id+0x4c>
 8010d42:	1c43      	adds	r3, r0, #1
 8010d44:	d00d      	beq.n	8010d62 <rcl_get_default_domain_id+0x56>
 8010d46:	6025      	str	r5, [r4, #0]
 8010d48:	2000      	movs	r0, #0
 8010d4a:	e7ec      	b.n	8010d26 <rcl_get_default_domain_id+0x1a>
 8010d4c:	200b      	movs	r0, #11
 8010d4e:	b003      	add	sp, #12
 8010d50:	bd30      	pop	{r4, r5, pc}
 8010d52:	4618      	mov	r0, r3
 8010d54:	b003      	add	sp, #12
 8010d56:	bd30      	pop	{r4, r5, pc}
 8010d58:	9b01      	ldr	r3, [sp, #4]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d0f2      	beq.n	8010d46 <rcl_get_default_domain_id+0x3a>
 8010d60:	e7e0      	b.n	8010d24 <rcl_get_default_domain_id+0x18>
 8010d62:	f000 fe3b 	bl	80119dc <__errno>
 8010d66:	6803      	ldr	r3, [r0, #0]
 8010d68:	2b22      	cmp	r3, #34	@ 0x22
 8010d6a:	d1ec      	bne.n	8010d46 <rcl_get_default_domain_id+0x3a>
 8010d6c:	e7da      	b.n	8010d24 <rcl_get_default_domain_id+0x18>
 8010d6e:	bf00      	nop
 8010d70:	08013098 	.word	0x08013098

08010d74 <rcl_get_zero_initialized_guard_condition>:
 8010d74:	4a03      	ldr	r2, [pc, #12]	@ (8010d84 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010d76:	4603      	mov	r3, r0
 8010d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010d80:	4618      	mov	r0, r3
 8010d82:	4770      	bx	lr
 8010d84:	080130a8 	.word	0x080130a8

08010d88 <rcl_guard_condition_init_from_rmw>:
 8010d88:	b082      	sub	sp, #8
 8010d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	ac0c      	add	r4, sp, #48	@ 0x30
 8010d92:	4684      	mov	ip, r0
 8010d94:	f844 3f04 	str.w	r3, [r4, #4]!
 8010d98:	460f      	mov	r7, r1
 8010d9a:	4690      	mov	r8, r2
 8010d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d9e:	ad01      	add	r5, sp, #4
 8010da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010da2:	6823      	ldr	r3, [r4, #0]
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	a801      	add	r0, sp, #4
 8010da8:	4664      	mov	r4, ip
 8010daa:	f7f7 fe31 	bl	8008a10 <rcutils_allocator_is_valid>
 8010dae:	b328      	cbz	r0, 8010dfc <rcl_guard_condition_init_from_rmw+0x74>
 8010db0:	b324      	cbz	r4, 8010dfc <rcl_guard_condition_init_from_rmw+0x74>
 8010db2:	6866      	ldr	r6, [r4, #4]
 8010db4:	b9e6      	cbnz	r6, 8010df0 <rcl_guard_condition_init_from_rmw+0x68>
 8010db6:	f1b8 0f00 	cmp.w	r8, #0
 8010dba:	d01f      	beq.n	8010dfc <rcl_guard_condition_init_from_rmw+0x74>
 8010dbc:	4640      	mov	r0, r8
 8010dbe:	f7fc fa19 	bl	800d1f4 <rcl_context_is_valid>
 8010dc2:	b308      	cbz	r0, 8010e08 <rcl_guard_condition_init_from_rmw+0x80>
 8010dc4:	9b01      	ldr	r3, [sp, #4]
 8010dc6:	9905      	ldr	r1, [sp, #20]
 8010dc8:	201c      	movs	r0, #28
 8010dca:	4798      	blx	r3
 8010dcc:	4605      	mov	r5, r0
 8010dce:	6060      	str	r0, [r4, #4]
 8010dd0:	b340      	cbz	r0, 8010e24 <rcl_guard_condition_init_from_rmw+0x9c>
 8010dd2:	b1df      	cbz	r7, 8010e0c <rcl_guard_condition_init_from_rmw+0x84>
 8010dd4:	6007      	str	r7, [r0, #0]
 8010dd6:	7106      	strb	r6, [r0, #4]
 8010dd8:	ac01      	add	r4, sp, #4
 8010dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ddc:	3508      	adds	r5, #8
 8010dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010de0:	6823      	ldr	r3, [r4, #0]
 8010de2:	602b      	str	r3, [r5, #0]
 8010de4:	2000      	movs	r0, #0
 8010de6:	b006      	add	sp, #24
 8010de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dec:	b002      	add	sp, #8
 8010dee:	4770      	bx	lr
 8010df0:	2064      	movs	r0, #100	@ 0x64
 8010df2:	b006      	add	sp, #24
 8010df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010df8:	b002      	add	sp, #8
 8010dfa:	4770      	bx	lr
 8010dfc:	200b      	movs	r0, #11
 8010dfe:	b006      	add	sp, #24
 8010e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e04:	b002      	add	sp, #8
 8010e06:	4770      	bx	lr
 8010e08:	2065      	movs	r0, #101	@ 0x65
 8010e0a:	e7f2      	b.n	8010df2 <rcl_guard_condition_init_from_rmw+0x6a>
 8010e0c:	f8d8 0000 	ldr.w	r0, [r8]
 8010e10:	3028      	adds	r0, #40	@ 0x28
 8010e12:	f000 f979 	bl	8011108 <rmw_create_guard_condition>
 8010e16:	6028      	str	r0, [r5, #0]
 8010e18:	6865      	ldr	r5, [r4, #4]
 8010e1a:	682e      	ldr	r6, [r5, #0]
 8010e1c:	b126      	cbz	r6, 8010e28 <rcl_guard_condition_init_from_rmw+0xa0>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	712b      	strb	r3, [r5, #4]
 8010e22:	e7d9      	b.n	8010dd8 <rcl_guard_condition_init_from_rmw+0x50>
 8010e24:	200a      	movs	r0, #10
 8010e26:	e7e4      	b.n	8010df2 <rcl_guard_condition_init_from_rmw+0x6a>
 8010e28:	4628      	mov	r0, r5
 8010e2a:	9b02      	ldr	r3, [sp, #8]
 8010e2c:	9905      	ldr	r1, [sp, #20]
 8010e2e:	4798      	blx	r3
 8010e30:	6066      	str	r6, [r4, #4]
 8010e32:	2001      	movs	r0, #1
 8010e34:	e7dd      	b.n	8010df2 <rcl_guard_condition_init_from_rmw+0x6a>
 8010e36:	bf00      	nop

08010e38 <rcl_guard_condition_fini>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	b1f0      	cbz	r0, 8010e7c <rcl_guard_condition_fini+0x44>
 8010e3e:	4604      	mov	r4, r0
 8010e40:	6840      	ldr	r0, [r0, #4]
 8010e42:	b158      	cbz	r0, 8010e5c <rcl_guard_condition_fini+0x24>
 8010e44:	6803      	ldr	r3, [r0, #0]
 8010e46:	68c6      	ldr	r6, [r0, #12]
 8010e48:	6981      	ldr	r1, [r0, #24]
 8010e4a:	b15b      	cbz	r3, 8010e64 <rcl_guard_condition_fini+0x2c>
 8010e4c:	7905      	ldrb	r5, [r0, #4]
 8010e4e:	b95d      	cbnz	r5, 8010e68 <rcl_guard_condition_fini+0x30>
 8010e50:	47b0      	blx	r6
 8010e52:	2300      	movs	r3, #0
 8010e54:	4628      	mov	r0, r5
 8010e56:	6063      	str	r3, [r4, #4]
 8010e58:	b002      	add	sp, #8
 8010e5a:	bd70      	pop	{r4, r5, r6, pc}
 8010e5c:	4605      	mov	r5, r0
 8010e5e:	4628      	mov	r0, r5
 8010e60:	b002      	add	sp, #8
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	461d      	mov	r5, r3
 8010e66:	e7f3      	b.n	8010e50 <rcl_guard_condition_fini+0x18>
 8010e68:	4618      	mov	r0, r3
 8010e6a:	9101      	str	r1, [sp, #4]
 8010e6c:	f000 f960 	bl	8011130 <rmw_destroy_guard_condition>
 8010e70:	1e05      	subs	r5, r0, #0
 8010e72:	9901      	ldr	r1, [sp, #4]
 8010e74:	6860      	ldr	r0, [r4, #4]
 8010e76:	bf18      	it	ne
 8010e78:	2501      	movne	r5, #1
 8010e7a:	e7e9      	b.n	8010e50 <rcl_guard_condition_fini+0x18>
 8010e7c:	250b      	movs	r5, #11
 8010e7e:	4628      	mov	r0, r5
 8010e80:	b002      	add	sp, #8
 8010e82:	bd70      	pop	{r4, r5, r6, pc}

08010e84 <rcl_guard_condition_get_default_options>:
 8010e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e86:	b087      	sub	sp, #28
 8010e88:	4607      	mov	r7, r0
 8010e8a:	466c      	mov	r4, sp
 8010e8c:	4668      	mov	r0, sp
 8010e8e:	f7f7 fdb1 	bl	80089f4 <rcutils_get_default_allocator>
 8010e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e94:	4d07      	ldr	r5, [pc, #28]	@ (8010eb4 <rcl_guard_condition_get_default_options+0x30>)
 8010e96:	f8d4 c000 	ldr.w	ip, [r4]
 8010e9a:	462e      	mov	r6, r5
 8010e9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010e9e:	462c      	mov	r4, r5
 8010ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ea2:	463c      	mov	r4, r7
 8010ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ea6:	4638      	mov	r0, r7
 8010ea8:	f8c6 c000 	str.w	ip, [r6]
 8010eac:	f8c4 c000 	str.w	ip, [r4]
 8010eb0:	b007      	add	sp, #28
 8010eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eb4:	200092f4 	.word	0x200092f4

08010eb8 <on_status>:
 8010eb8:	b082      	sub	sp, #8
 8010eba:	b002      	add	sp, #8
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <on_topic>:
 8010ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec4:	4a21      	ldr	r2, [pc, #132]	@ (8010f4c <on_topic+0x8c>)
 8010ec6:	b094      	sub	sp, #80	@ 0x50
 8010ec8:	6812      	ldr	r2, [r2, #0]
 8010eca:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010ecc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8010ed0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010ed2:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ed4:	b3ba      	cbz	r2, 8010f46 <on_topic+0x86>
 8010ed6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8010eda:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8010ede:	e001      	b.n	8010ee4 <on_topic+0x24>
 8010ee0:	6892      	ldr	r2, [r2, #8]
 8010ee2:	b382      	cbz	r2, 8010f46 <on_topic+0x86>
 8010ee4:	68d4      	ldr	r4, [r2, #12]
 8010ee6:	8aa3      	ldrh	r3, [r4, #20]
 8010ee8:	428b      	cmp	r3, r1
 8010eea:	d1f9      	bne.n	8010ee0 <on_topic+0x20>
 8010eec:	7da3      	ldrb	r3, [r4, #22]
 8010eee:	4283      	cmp	r3, r0
 8010ef0:	d1f6      	bne.n	8010ee0 <on_topic+0x20>
 8010ef2:	2248      	movs	r2, #72	@ 0x48
 8010ef4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010ef8:	4668      	mov	r0, sp
 8010efa:	f000 fda4 	bl	8011a46 <memcpy>
 8010efe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8010f02:	4620      	mov	r0, r4
 8010f04:	f7f8 fad6 	bl	80094b4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010f08:	4607      	mov	r7, r0
 8010f0a:	b1e0      	cbz	r0, 8010f46 <on_topic+0x86>
 8010f0c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010f10:	462a      	mov	r2, r5
 8010f12:	4630      	mov	r0, r6
 8010f14:	f108 0110 	add.w	r1, r8, #16
 8010f18:	f7fe faa8 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 8010f1c:	b930      	cbnz	r0, 8010f2c <on_topic+0x6c>
 8010f1e:	480c      	ldr	r0, [pc, #48]	@ (8010f50 <on_topic+0x90>)
 8010f20:	4639      	mov	r1, r7
 8010f22:	b014      	add	sp, #80	@ 0x50
 8010f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f28:	f7fd bd2c 	b.w	800e984 <put_memory>
 8010f2c:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8010f30:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8010f34:	f7fe f9c4 	bl	800f2c0 <rmw_uros_epoch_nanos>
 8010f38:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 8010f3c:	2305      	movs	r3, #5
 8010f3e:	e9c2 0100 	strd	r0, r1, [r2]
 8010f42:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8010f46:	b014      	add	sp, #80	@ 0x50
 8010f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f4c:	2000c6fc 	.word	0x2000c6fc
 8010f50:	20009490 	.word	0x20009490

08010f54 <on_request>:
 8010f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f58:	4822      	ldr	r0, [pc, #136]	@ (8010fe4 <on_request+0x90>)
 8010f5a:	b095      	sub	sp, #84	@ 0x54
 8010f5c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010f5e:	6801      	ldr	r1, [r0, #0]
 8010f60:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8010f62:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8010f66:	2900      	cmp	r1, #0
 8010f68:	d039      	beq.n	8010fde <on_request+0x8a>
 8010f6a:	461d      	mov	r5, r3
 8010f6c:	e001      	b.n	8010f72 <on_request+0x1e>
 8010f6e:	6889      	ldr	r1, [r1, #8]
 8010f70:	b3a9      	cbz	r1, 8010fde <on_request+0x8a>
 8010f72:	68cc      	ldr	r4, [r1, #12]
 8010f74:	8b20      	ldrh	r0, [r4, #24]
 8010f76:	4290      	cmp	r0, r2
 8010f78:	d1f9      	bne.n	8010f6e <on_request+0x1a>
 8010f7a:	2248      	movs	r2, #72	@ 0x48
 8010f7c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010f80:	4668      	mov	r0, sp
 8010f82:	f000 fd60 	bl	8011a46 <memcpy>
 8010f86:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f7f8 fa92 	bl	80094b4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010f90:	4680      	mov	r8, r0
 8010f92:	b320      	cbz	r0, 8010fde <on_request+0x8a>
 8010f94:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010f98:	4632      	mov	r2, r6
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	f109 0110 	add.w	r1, r9, #16
 8010fa0:	f7fe fa64 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 8010fa4:	b930      	cbnz	r0, 8010fb4 <on_request+0x60>
 8010fa6:	4810      	ldr	r0, [pc, #64]	@ (8010fe8 <on_request+0x94>)
 8010fa8:	4641      	mov	r1, r8
 8010faa:	b015      	add	sp, #84	@ 0x54
 8010fac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fb0:	f7fd bce8 	b.w	800e984 <put_memory>
 8010fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fb6:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8010fba:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 8010fbe:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8010fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010fc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010fc8:	e884 0003 	stmia.w	r4, {r0, r1}
 8010fcc:	f7fe f978 	bl	800f2c0 <rmw_uros_epoch_nanos>
 8010fd0:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8010fd4:	2303      	movs	r3, #3
 8010fd6:	e9c2 0100 	strd	r0, r1, [r2]
 8010fda:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8010fde:	b015      	add	sp, #84	@ 0x54
 8010fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fe4:	2000c6ec 	.word	0x2000c6ec
 8010fe8:	20009490 	.word	0x20009490

08010fec <on_reply>:
 8010fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ff0:	4821      	ldr	r0, [pc, #132]	@ (8011078 <on_reply+0x8c>)
 8010ff2:	b095      	sub	sp, #84	@ 0x54
 8010ff4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010ff6:	6801      	ldr	r1, [r0, #0]
 8010ff8:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8010ffa:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8010ffe:	b3b9      	cbz	r1, 8011070 <on_reply+0x84>
 8011000:	461d      	mov	r5, r3
 8011002:	e001      	b.n	8011008 <on_reply+0x1c>
 8011004:	6889      	ldr	r1, [r1, #8]
 8011006:	b399      	cbz	r1, 8011070 <on_reply+0x84>
 8011008:	68cc      	ldr	r4, [r1, #12]
 801100a:	8b20      	ldrh	r0, [r4, #24]
 801100c:	4290      	cmp	r0, r2
 801100e:	d1f9      	bne.n	8011004 <on_reply+0x18>
 8011010:	2248      	movs	r2, #72	@ 0x48
 8011012:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8011016:	4668      	mov	r0, sp
 8011018:	f000 fd15 	bl	8011a46 <memcpy>
 801101c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011020:	4620      	mov	r0, r4
 8011022:	f7f8 fa47 	bl	80094b4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011026:	4680      	mov	r8, r0
 8011028:	b310      	cbz	r0, 8011070 <on_reply+0x84>
 801102a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801102e:	4632      	mov	r2, r6
 8011030:	4638      	mov	r0, r7
 8011032:	f109 0110 	add.w	r1, r9, #16
 8011036:	f7fe fa19 	bl	800f46c <ucdr_deserialize_array_uint8_t>
 801103a:	b930      	cbnz	r0, 801104a <on_reply+0x5e>
 801103c:	480f      	ldr	r0, [pc, #60]	@ (801107c <on_reply+0x90>)
 801103e:	4641      	mov	r1, r8
 8011040:	b015      	add	sp, #84	@ 0x54
 8011042:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011046:	f7fd bc9d 	b.w	800e984 <put_memory>
 801104a:	b2aa      	uxth	r2, r5
 801104c:	2300      	movs	r3, #0
 801104e:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 8011052:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8011056:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 801105a:	e9c1 2300 	strd	r2, r3, [r1]
 801105e:	f7fe f92f 	bl	800f2c0 <rmw_uros_epoch_nanos>
 8011062:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8011066:	2304      	movs	r3, #4
 8011068:	e9c2 0100 	strd	r0, r1, [r2]
 801106c:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8011070:	b015      	add	sp, #84	@ 0x54
 8011072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011076:	bf00      	nop
 8011078:	20009d20 	.word	0x20009d20
 801107c:	20009490 	.word	0x20009490

08011080 <rmw_destroy_client>:
 8011080:	b570      	push	{r4, r5, r6, lr}
 8011082:	b128      	cbz	r0, 8011090 <rmw_destroy_client+0x10>
 8011084:	4604      	mov	r4, r0
 8011086:	6800      	ldr	r0, [r0, #0]
 8011088:	460d      	mov	r5, r1
 801108a:	f7f8 fadf 	bl	800964c <is_uxrce_rmw_identifier_valid>
 801108e:	b910      	cbnz	r0, 8011096 <rmw_destroy_client+0x16>
 8011090:	2401      	movs	r4, #1
 8011092:	4620      	mov	r0, r4
 8011094:	bd70      	pop	{r4, r5, r6, pc}
 8011096:	6863      	ldr	r3, [r4, #4]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d0f9      	beq.n	8011090 <rmw_destroy_client+0x10>
 801109c:	2d00      	cmp	r5, #0
 801109e:	d0f7      	beq.n	8011090 <rmw_destroy_client+0x10>
 80110a0:	6828      	ldr	r0, [r5, #0]
 80110a2:	f7f8 fad3 	bl	800964c <is_uxrce_rmw_identifier_valid>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d0f2      	beq.n	8011090 <rmw_destroy_client+0x10>
 80110aa:	686e      	ldr	r6, [r5, #4]
 80110ac:	2e00      	cmp	r6, #0
 80110ae:	d0ef      	beq.n	8011090 <rmw_destroy_client+0x10>
 80110b0:	6864      	ldr	r4, [r4, #4]
 80110b2:	6932      	ldr	r2, [r6, #16]
 80110b4:	6920      	ldr	r0, [r4, #16]
 80110b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80110ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110be:	6819      	ldr	r1, [r3, #0]
 80110c0:	f7ff f89a 	bl	80101f8 <uxr_buffer_cancel_data>
 80110c4:	4602      	mov	r2, r0
 80110c6:	6920      	ldr	r0, [r4, #16]
 80110c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80110cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80110d0:	f7f8 fa3c 	bl	800954c <run_xrce_session>
 80110d4:	6920      	ldr	r0, [r4, #16]
 80110d6:	6932      	ldr	r2, [r6, #16]
 80110d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80110dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110e0:	6819      	ldr	r1, [r3, #0]
 80110e2:	f7f9 fbdf 	bl	800a8a4 <uxr_buffer_delete_entity>
 80110e6:	4602      	mov	r2, r0
 80110e8:	6920      	ldr	r0, [r4, #16]
 80110ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80110ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80110f2:	f7f8 fa2b 	bl	800954c <run_xrce_session>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	4628      	mov	r0, r5
 80110fa:	bf14      	ite	ne
 80110fc:	2400      	movne	r4, #0
 80110fe:	2402      	moveq	r4, #2
 8011100:	f7f8 f9b6 	bl	8009470 <rmw_uxrce_fini_client_memory>
 8011104:	e7c5      	b.n	8011092 <rmw_destroy_client+0x12>
 8011106:	bf00      	nop

08011108 <rmw_create_guard_condition>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4605      	mov	r5, r0
 801110c:	4807      	ldr	r0, [pc, #28]	@ (801112c <rmw_create_guard_condition+0x24>)
 801110e:	f7fd fc29 	bl	800e964 <get_memory>
 8011112:	b148      	cbz	r0, 8011128 <rmw_create_guard_condition+0x20>
 8011114:	68c4      	ldr	r4, [r0, #12]
 8011116:	2300      	movs	r3, #0
 8011118:	61e5      	str	r5, [r4, #28]
 801111a:	7423      	strb	r3, [r4, #16]
 801111c:	f7fd fc46 	bl	800e9ac <rmw_get_implementation_identifier>
 8011120:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011124:	f104 0014 	add.w	r0, r4, #20
 8011128:	bd38      	pop	{r3, r4, r5, pc}
 801112a:	bf00      	nop
 801112c:	2000c618 	.word	0x2000c618

08011130 <rmw_destroy_guard_condition>:
 8011130:	b508      	push	{r3, lr}
 8011132:	4b08      	ldr	r3, [pc, #32]	@ (8011154 <rmw_destroy_guard_condition+0x24>)
 8011134:	6819      	ldr	r1, [r3, #0]
 8011136:	b911      	cbnz	r1, 801113e <rmw_destroy_guard_condition+0xe>
 8011138:	e00a      	b.n	8011150 <rmw_destroy_guard_condition+0x20>
 801113a:	6889      	ldr	r1, [r1, #8]
 801113c:	b141      	cbz	r1, 8011150 <rmw_destroy_guard_condition+0x20>
 801113e:	68cb      	ldr	r3, [r1, #12]
 8011140:	3314      	adds	r3, #20
 8011142:	4298      	cmp	r0, r3
 8011144:	d1f9      	bne.n	801113a <rmw_destroy_guard_condition+0xa>
 8011146:	4803      	ldr	r0, [pc, #12]	@ (8011154 <rmw_destroy_guard_condition+0x24>)
 8011148:	f7fd fc1c 	bl	800e984 <put_memory>
 801114c:	2000      	movs	r0, #0
 801114e:	bd08      	pop	{r3, pc}
 8011150:	2001      	movs	r0, #1
 8011152:	bd08      	pop	{r3, pc}
 8011154:	2000c618 	.word	0x2000c618

08011158 <calloc>:
 8011158:	4b02      	ldr	r3, [pc, #8]	@ (8011164 <calloc+0xc>)
 801115a:	460a      	mov	r2, r1
 801115c:	4601      	mov	r1, r0
 801115e:	6818      	ldr	r0, [r3, #0]
 8011160:	f000 b802 	b.w	8011168 <_calloc_r>
 8011164:	2000007c 	.word	0x2000007c

08011168 <_calloc_r>:
 8011168:	b570      	push	{r4, r5, r6, lr}
 801116a:	fba1 5402 	umull	r5, r4, r1, r2
 801116e:	b93c      	cbnz	r4, 8011180 <_calloc_r+0x18>
 8011170:	4629      	mov	r1, r5
 8011172:	f000 f887 	bl	8011284 <_malloc_r>
 8011176:	4606      	mov	r6, r0
 8011178:	b928      	cbnz	r0, 8011186 <_calloc_r+0x1e>
 801117a:	2600      	movs	r6, #0
 801117c:	4630      	mov	r0, r6
 801117e:	bd70      	pop	{r4, r5, r6, pc}
 8011180:	220c      	movs	r2, #12
 8011182:	6002      	str	r2, [r0, #0]
 8011184:	e7f9      	b.n	801117a <_calloc_r+0x12>
 8011186:	462a      	mov	r2, r5
 8011188:	4621      	mov	r1, r4
 801118a:	f000 fb93 	bl	80118b4 <memset>
 801118e:	e7f5      	b.n	801117c <_calloc_r+0x14>

08011190 <getenv>:
 8011190:	b507      	push	{r0, r1, r2, lr}
 8011192:	4b04      	ldr	r3, [pc, #16]	@ (80111a4 <getenv+0x14>)
 8011194:	4601      	mov	r1, r0
 8011196:	aa01      	add	r2, sp, #4
 8011198:	6818      	ldr	r0, [r3, #0]
 801119a:	f000 f805 	bl	80111a8 <_findenv_r>
 801119e:	b003      	add	sp, #12
 80111a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80111a4:	2000007c 	.word	0x2000007c

080111a8 <_findenv_r>:
 80111a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ac:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801121c <_findenv_r+0x74>
 80111b0:	4606      	mov	r6, r0
 80111b2:	4689      	mov	r9, r1
 80111b4:	4617      	mov	r7, r2
 80111b6:	f000 fc73 	bl	8011aa0 <__env_lock>
 80111ba:	f8da 4000 	ldr.w	r4, [sl]
 80111be:	b134      	cbz	r4, 80111ce <_findenv_r+0x26>
 80111c0:	464b      	mov	r3, r9
 80111c2:	4698      	mov	r8, r3
 80111c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111c8:	b13a      	cbz	r2, 80111da <_findenv_r+0x32>
 80111ca:	2a3d      	cmp	r2, #61	@ 0x3d
 80111cc:	d1f9      	bne.n	80111c2 <_findenv_r+0x1a>
 80111ce:	4630      	mov	r0, r6
 80111d0:	f000 fc6c 	bl	8011aac <__env_unlock>
 80111d4:	2000      	movs	r0, #0
 80111d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111da:	eba8 0809 	sub.w	r8, r8, r9
 80111de:	46a3      	mov	fp, r4
 80111e0:	f854 0b04 	ldr.w	r0, [r4], #4
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d0f2      	beq.n	80111ce <_findenv_r+0x26>
 80111e8:	4642      	mov	r2, r8
 80111ea:	4649      	mov	r1, r9
 80111ec:	f000 fb77 	bl	80118de <strncmp>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d1f4      	bne.n	80111de <_findenv_r+0x36>
 80111f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80111f8:	eb03 0508 	add.w	r5, r3, r8
 80111fc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011200:	2b3d      	cmp	r3, #61	@ 0x3d
 8011202:	d1ec      	bne.n	80111de <_findenv_r+0x36>
 8011204:	f8da 3000 	ldr.w	r3, [sl]
 8011208:	ebab 0303 	sub.w	r3, fp, r3
 801120c:	109b      	asrs	r3, r3, #2
 801120e:	4630      	mov	r0, r6
 8011210:	603b      	str	r3, [r7, #0]
 8011212:	f000 fc4b 	bl	8011aac <__env_unlock>
 8011216:	1c68      	adds	r0, r5, #1
 8011218:	e7dd      	b.n	80111d6 <_findenv_r+0x2e>
 801121a:	bf00      	nop
 801121c:	20000004 	.word	0x20000004

08011220 <malloc>:
 8011220:	4b02      	ldr	r3, [pc, #8]	@ (801122c <malloc+0xc>)
 8011222:	4601      	mov	r1, r0
 8011224:	6818      	ldr	r0, [r3, #0]
 8011226:	f000 b82d 	b.w	8011284 <_malloc_r>
 801122a:	bf00      	nop
 801122c:	2000007c 	.word	0x2000007c

08011230 <free>:
 8011230:	4b02      	ldr	r3, [pc, #8]	@ (801123c <free+0xc>)
 8011232:	4601      	mov	r1, r0
 8011234:	6818      	ldr	r0, [r3, #0]
 8011236:	f000 bc3f 	b.w	8011ab8 <_free_r>
 801123a:	bf00      	nop
 801123c:	2000007c 	.word	0x2000007c

08011240 <sbrk_aligned>:
 8011240:	b570      	push	{r4, r5, r6, lr}
 8011242:	4e0f      	ldr	r6, [pc, #60]	@ (8011280 <sbrk_aligned+0x40>)
 8011244:	460c      	mov	r4, r1
 8011246:	6831      	ldr	r1, [r6, #0]
 8011248:	4605      	mov	r5, r0
 801124a:	b911      	cbnz	r1, 8011252 <sbrk_aligned+0x12>
 801124c:	f000 fba4 	bl	8011998 <_sbrk_r>
 8011250:	6030      	str	r0, [r6, #0]
 8011252:	4621      	mov	r1, r4
 8011254:	4628      	mov	r0, r5
 8011256:	f000 fb9f 	bl	8011998 <_sbrk_r>
 801125a:	1c43      	adds	r3, r0, #1
 801125c:	d103      	bne.n	8011266 <sbrk_aligned+0x26>
 801125e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011262:	4620      	mov	r0, r4
 8011264:	bd70      	pop	{r4, r5, r6, pc}
 8011266:	1cc4      	adds	r4, r0, #3
 8011268:	f024 0403 	bic.w	r4, r4, #3
 801126c:	42a0      	cmp	r0, r4
 801126e:	d0f8      	beq.n	8011262 <sbrk_aligned+0x22>
 8011270:	1a21      	subs	r1, r4, r0
 8011272:	4628      	mov	r0, r5
 8011274:	f000 fb90 	bl	8011998 <_sbrk_r>
 8011278:	3001      	adds	r0, #1
 801127a:	d1f2      	bne.n	8011262 <sbrk_aligned+0x22>
 801127c:	e7ef      	b.n	801125e <sbrk_aligned+0x1e>
 801127e:	bf00      	nop
 8011280:	20009308 	.word	0x20009308

08011284 <_malloc_r>:
 8011284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011288:	1ccd      	adds	r5, r1, #3
 801128a:	f025 0503 	bic.w	r5, r5, #3
 801128e:	3508      	adds	r5, #8
 8011290:	2d0c      	cmp	r5, #12
 8011292:	bf38      	it	cc
 8011294:	250c      	movcc	r5, #12
 8011296:	2d00      	cmp	r5, #0
 8011298:	4606      	mov	r6, r0
 801129a:	db01      	blt.n	80112a0 <_malloc_r+0x1c>
 801129c:	42a9      	cmp	r1, r5
 801129e:	d904      	bls.n	80112aa <_malloc_r+0x26>
 80112a0:	230c      	movs	r3, #12
 80112a2:	6033      	str	r3, [r6, #0]
 80112a4:	2000      	movs	r0, #0
 80112a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011380 <_malloc_r+0xfc>
 80112ae:	f000 f869 	bl	8011384 <__malloc_lock>
 80112b2:	f8d8 3000 	ldr.w	r3, [r8]
 80112b6:	461c      	mov	r4, r3
 80112b8:	bb44      	cbnz	r4, 801130c <_malloc_r+0x88>
 80112ba:	4629      	mov	r1, r5
 80112bc:	4630      	mov	r0, r6
 80112be:	f7ff ffbf 	bl	8011240 <sbrk_aligned>
 80112c2:	1c43      	adds	r3, r0, #1
 80112c4:	4604      	mov	r4, r0
 80112c6:	d158      	bne.n	801137a <_malloc_r+0xf6>
 80112c8:	f8d8 4000 	ldr.w	r4, [r8]
 80112cc:	4627      	mov	r7, r4
 80112ce:	2f00      	cmp	r7, #0
 80112d0:	d143      	bne.n	801135a <_malloc_r+0xd6>
 80112d2:	2c00      	cmp	r4, #0
 80112d4:	d04b      	beq.n	801136e <_malloc_r+0xea>
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	4639      	mov	r1, r7
 80112da:	4630      	mov	r0, r6
 80112dc:	eb04 0903 	add.w	r9, r4, r3
 80112e0:	f000 fb5a 	bl	8011998 <_sbrk_r>
 80112e4:	4581      	cmp	r9, r0
 80112e6:	d142      	bne.n	801136e <_malloc_r+0xea>
 80112e8:	6821      	ldr	r1, [r4, #0]
 80112ea:	1a6d      	subs	r5, r5, r1
 80112ec:	4629      	mov	r1, r5
 80112ee:	4630      	mov	r0, r6
 80112f0:	f7ff ffa6 	bl	8011240 <sbrk_aligned>
 80112f4:	3001      	adds	r0, #1
 80112f6:	d03a      	beq.n	801136e <_malloc_r+0xea>
 80112f8:	6823      	ldr	r3, [r4, #0]
 80112fa:	442b      	add	r3, r5
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	f8d8 3000 	ldr.w	r3, [r8]
 8011302:	685a      	ldr	r2, [r3, #4]
 8011304:	bb62      	cbnz	r2, 8011360 <_malloc_r+0xdc>
 8011306:	f8c8 7000 	str.w	r7, [r8]
 801130a:	e00f      	b.n	801132c <_malloc_r+0xa8>
 801130c:	6822      	ldr	r2, [r4, #0]
 801130e:	1b52      	subs	r2, r2, r5
 8011310:	d420      	bmi.n	8011354 <_malloc_r+0xd0>
 8011312:	2a0b      	cmp	r2, #11
 8011314:	d917      	bls.n	8011346 <_malloc_r+0xc2>
 8011316:	1961      	adds	r1, r4, r5
 8011318:	42a3      	cmp	r3, r4
 801131a:	6025      	str	r5, [r4, #0]
 801131c:	bf18      	it	ne
 801131e:	6059      	strne	r1, [r3, #4]
 8011320:	6863      	ldr	r3, [r4, #4]
 8011322:	bf08      	it	eq
 8011324:	f8c8 1000 	streq.w	r1, [r8]
 8011328:	5162      	str	r2, [r4, r5]
 801132a:	604b      	str	r3, [r1, #4]
 801132c:	4630      	mov	r0, r6
 801132e:	f000 f82f 	bl	8011390 <__malloc_unlock>
 8011332:	f104 000b 	add.w	r0, r4, #11
 8011336:	1d23      	adds	r3, r4, #4
 8011338:	f020 0007 	bic.w	r0, r0, #7
 801133c:	1ac2      	subs	r2, r0, r3
 801133e:	bf1c      	itt	ne
 8011340:	1a1b      	subne	r3, r3, r0
 8011342:	50a3      	strne	r3, [r4, r2]
 8011344:	e7af      	b.n	80112a6 <_malloc_r+0x22>
 8011346:	6862      	ldr	r2, [r4, #4]
 8011348:	42a3      	cmp	r3, r4
 801134a:	bf0c      	ite	eq
 801134c:	f8c8 2000 	streq.w	r2, [r8]
 8011350:	605a      	strne	r2, [r3, #4]
 8011352:	e7eb      	b.n	801132c <_malloc_r+0xa8>
 8011354:	4623      	mov	r3, r4
 8011356:	6864      	ldr	r4, [r4, #4]
 8011358:	e7ae      	b.n	80112b8 <_malloc_r+0x34>
 801135a:	463c      	mov	r4, r7
 801135c:	687f      	ldr	r7, [r7, #4]
 801135e:	e7b6      	b.n	80112ce <_malloc_r+0x4a>
 8011360:	461a      	mov	r2, r3
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	42a3      	cmp	r3, r4
 8011366:	d1fb      	bne.n	8011360 <_malloc_r+0xdc>
 8011368:	2300      	movs	r3, #0
 801136a:	6053      	str	r3, [r2, #4]
 801136c:	e7de      	b.n	801132c <_malloc_r+0xa8>
 801136e:	230c      	movs	r3, #12
 8011370:	6033      	str	r3, [r6, #0]
 8011372:	4630      	mov	r0, r6
 8011374:	f000 f80c 	bl	8011390 <__malloc_unlock>
 8011378:	e794      	b.n	80112a4 <_malloc_r+0x20>
 801137a:	6005      	str	r5, [r0, #0]
 801137c:	e7d6      	b.n	801132c <_malloc_r+0xa8>
 801137e:	bf00      	nop
 8011380:	2000930c 	.word	0x2000930c

08011384 <__malloc_lock>:
 8011384:	4801      	ldr	r0, [pc, #4]	@ (801138c <__malloc_lock+0x8>)
 8011386:	f000 bb54 	b.w	8011a32 <__retarget_lock_acquire_recursive>
 801138a:	bf00      	nop
 801138c:	20009451 	.word	0x20009451

08011390 <__malloc_unlock>:
 8011390:	4801      	ldr	r0, [pc, #4]	@ (8011398 <__malloc_unlock+0x8>)
 8011392:	f000 bb4f 	b.w	8011a34 <__retarget_lock_release_recursive>
 8011396:	bf00      	nop
 8011398:	20009451 	.word	0x20009451

0801139c <srand>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	4b10      	ldr	r3, [pc, #64]	@ (80113e0 <srand+0x44>)
 80113a0:	681d      	ldr	r5, [r3, #0]
 80113a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113a4:	4604      	mov	r4, r0
 80113a6:	b9b3      	cbnz	r3, 80113d6 <srand+0x3a>
 80113a8:	2018      	movs	r0, #24
 80113aa:	f7ff ff39 	bl	8011220 <malloc>
 80113ae:	4602      	mov	r2, r0
 80113b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80113b2:	b920      	cbnz	r0, 80113be <srand+0x22>
 80113b4:	4b0b      	ldr	r3, [pc, #44]	@ (80113e4 <srand+0x48>)
 80113b6:	480c      	ldr	r0, [pc, #48]	@ (80113e8 <srand+0x4c>)
 80113b8:	2146      	movs	r1, #70	@ 0x46
 80113ba:	f000 fb53 	bl	8011a64 <__assert_func>
 80113be:	490b      	ldr	r1, [pc, #44]	@ (80113ec <srand+0x50>)
 80113c0:	4b0b      	ldr	r3, [pc, #44]	@ (80113f0 <srand+0x54>)
 80113c2:	e9c0 1300 	strd	r1, r3, [r0]
 80113c6:	4b0b      	ldr	r3, [pc, #44]	@ (80113f4 <srand+0x58>)
 80113c8:	6083      	str	r3, [r0, #8]
 80113ca:	230b      	movs	r3, #11
 80113cc:	8183      	strh	r3, [r0, #12]
 80113ce:	2100      	movs	r1, #0
 80113d0:	2001      	movs	r0, #1
 80113d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80113d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113d8:	2200      	movs	r2, #0
 80113da:	611c      	str	r4, [r3, #16]
 80113dc:	615a      	str	r2, [r3, #20]
 80113de:	bd38      	pop	{r3, r4, r5, pc}
 80113e0:	2000007c 	.word	0x2000007c
 80113e4:	080130b0 	.word	0x080130b0
 80113e8:	080130c7 	.word	0x080130c7
 80113ec:	abcd330e 	.word	0xabcd330e
 80113f0:	e66d1234 	.word	0xe66d1234
 80113f4:	0005deec 	.word	0x0005deec

080113f8 <rand>:
 80113f8:	4b16      	ldr	r3, [pc, #88]	@ (8011454 <rand+0x5c>)
 80113fa:	b510      	push	{r4, lr}
 80113fc:	681c      	ldr	r4, [r3, #0]
 80113fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011400:	b9b3      	cbnz	r3, 8011430 <rand+0x38>
 8011402:	2018      	movs	r0, #24
 8011404:	f7ff ff0c 	bl	8011220 <malloc>
 8011408:	4602      	mov	r2, r0
 801140a:	6320      	str	r0, [r4, #48]	@ 0x30
 801140c:	b920      	cbnz	r0, 8011418 <rand+0x20>
 801140e:	4b12      	ldr	r3, [pc, #72]	@ (8011458 <rand+0x60>)
 8011410:	4812      	ldr	r0, [pc, #72]	@ (801145c <rand+0x64>)
 8011412:	2152      	movs	r1, #82	@ 0x52
 8011414:	f000 fb26 	bl	8011a64 <__assert_func>
 8011418:	4911      	ldr	r1, [pc, #68]	@ (8011460 <rand+0x68>)
 801141a:	4b12      	ldr	r3, [pc, #72]	@ (8011464 <rand+0x6c>)
 801141c:	e9c0 1300 	strd	r1, r3, [r0]
 8011420:	4b11      	ldr	r3, [pc, #68]	@ (8011468 <rand+0x70>)
 8011422:	6083      	str	r3, [r0, #8]
 8011424:	230b      	movs	r3, #11
 8011426:	8183      	strh	r3, [r0, #12]
 8011428:	2100      	movs	r1, #0
 801142a:	2001      	movs	r0, #1
 801142c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011430:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011432:	480e      	ldr	r0, [pc, #56]	@ (801146c <rand+0x74>)
 8011434:	690b      	ldr	r3, [r1, #16]
 8011436:	694c      	ldr	r4, [r1, #20]
 8011438:	4a0d      	ldr	r2, [pc, #52]	@ (8011470 <rand+0x78>)
 801143a:	4358      	muls	r0, r3
 801143c:	fb02 0004 	mla	r0, r2, r4, r0
 8011440:	fba3 3202 	umull	r3, r2, r3, r2
 8011444:	3301      	adds	r3, #1
 8011446:	eb40 0002 	adc.w	r0, r0, r2
 801144a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801144e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011452:	bd10      	pop	{r4, pc}
 8011454:	2000007c 	.word	0x2000007c
 8011458:	080130b0 	.word	0x080130b0
 801145c:	080130c7 	.word	0x080130c7
 8011460:	abcd330e 	.word	0xabcd330e
 8011464:	e66d1234 	.word	0xe66d1234
 8011468:	0005deec 	.word	0x0005deec
 801146c:	5851f42d 	.word	0x5851f42d
 8011470:	4c957f2d 	.word	0x4c957f2d

08011474 <realloc>:
 8011474:	4b02      	ldr	r3, [pc, #8]	@ (8011480 <realloc+0xc>)
 8011476:	460a      	mov	r2, r1
 8011478:	4601      	mov	r1, r0
 801147a:	6818      	ldr	r0, [r3, #0]
 801147c:	f000 b802 	b.w	8011484 <_realloc_r>
 8011480:	2000007c 	.word	0x2000007c

08011484 <_realloc_r>:
 8011484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011488:	4680      	mov	r8, r0
 801148a:	4615      	mov	r5, r2
 801148c:	460c      	mov	r4, r1
 801148e:	b921      	cbnz	r1, 801149a <_realloc_r+0x16>
 8011490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011494:	4611      	mov	r1, r2
 8011496:	f7ff bef5 	b.w	8011284 <_malloc_r>
 801149a:	b92a      	cbnz	r2, 80114a8 <_realloc_r+0x24>
 801149c:	f000 fb0c 	bl	8011ab8 <_free_r>
 80114a0:	2400      	movs	r4, #0
 80114a2:	4620      	mov	r0, r4
 80114a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114a8:	f000 fb50 	bl	8011b4c <_malloc_usable_size_r>
 80114ac:	4285      	cmp	r5, r0
 80114ae:	4606      	mov	r6, r0
 80114b0:	d802      	bhi.n	80114b8 <_realloc_r+0x34>
 80114b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80114b6:	d8f4      	bhi.n	80114a2 <_realloc_r+0x1e>
 80114b8:	4629      	mov	r1, r5
 80114ba:	4640      	mov	r0, r8
 80114bc:	f7ff fee2 	bl	8011284 <_malloc_r>
 80114c0:	4607      	mov	r7, r0
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d0ec      	beq.n	80114a0 <_realloc_r+0x1c>
 80114c6:	42b5      	cmp	r5, r6
 80114c8:	462a      	mov	r2, r5
 80114ca:	4621      	mov	r1, r4
 80114cc:	bf28      	it	cs
 80114ce:	4632      	movcs	r2, r6
 80114d0:	f000 fab9 	bl	8011a46 <memcpy>
 80114d4:	4621      	mov	r1, r4
 80114d6:	4640      	mov	r0, r8
 80114d8:	f000 faee 	bl	8011ab8 <_free_r>
 80114dc:	463c      	mov	r4, r7
 80114de:	e7e0      	b.n	80114a2 <_realloc_r+0x1e>

080114e0 <_strtoul_l.constprop.0>:
 80114e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114e4:	4e34      	ldr	r6, [pc, #208]	@ (80115b8 <_strtoul_l.constprop.0+0xd8>)
 80114e6:	4686      	mov	lr, r0
 80114e8:	460d      	mov	r5, r1
 80114ea:	4628      	mov	r0, r5
 80114ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114f0:	5d37      	ldrb	r7, [r6, r4]
 80114f2:	f017 0708 	ands.w	r7, r7, #8
 80114f6:	d1f8      	bne.n	80114ea <_strtoul_l.constprop.0+0xa>
 80114f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80114fa:	d12f      	bne.n	801155c <_strtoul_l.constprop.0+0x7c>
 80114fc:	782c      	ldrb	r4, [r5, #0]
 80114fe:	2701      	movs	r7, #1
 8011500:	1c85      	adds	r5, r0, #2
 8011502:	f033 0010 	bics.w	r0, r3, #16
 8011506:	d109      	bne.n	801151c <_strtoul_l.constprop.0+0x3c>
 8011508:	2c30      	cmp	r4, #48	@ 0x30
 801150a:	d12c      	bne.n	8011566 <_strtoul_l.constprop.0+0x86>
 801150c:	7828      	ldrb	r0, [r5, #0]
 801150e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011512:	2858      	cmp	r0, #88	@ 0x58
 8011514:	d127      	bne.n	8011566 <_strtoul_l.constprop.0+0x86>
 8011516:	786c      	ldrb	r4, [r5, #1]
 8011518:	2310      	movs	r3, #16
 801151a:	3502      	adds	r5, #2
 801151c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011520:	2600      	movs	r6, #0
 8011522:	fbb8 f8f3 	udiv	r8, r8, r3
 8011526:	fb03 f908 	mul.w	r9, r3, r8
 801152a:	ea6f 0909 	mvn.w	r9, r9
 801152e:	4630      	mov	r0, r6
 8011530:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011534:	f1bc 0f09 	cmp.w	ip, #9
 8011538:	d81c      	bhi.n	8011574 <_strtoul_l.constprop.0+0x94>
 801153a:	4664      	mov	r4, ip
 801153c:	42a3      	cmp	r3, r4
 801153e:	dd2a      	ble.n	8011596 <_strtoul_l.constprop.0+0xb6>
 8011540:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011544:	d007      	beq.n	8011556 <_strtoul_l.constprop.0+0x76>
 8011546:	4580      	cmp	r8, r0
 8011548:	d322      	bcc.n	8011590 <_strtoul_l.constprop.0+0xb0>
 801154a:	d101      	bne.n	8011550 <_strtoul_l.constprop.0+0x70>
 801154c:	45a1      	cmp	r9, r4
 801154e:	db1f      	blt.n	8011590 <_strtoul_l.constprop.0+0xb0>
 8011550:	fb00 4003 	mla	r0, r0, r3, r4
 8011554:	2601      	movs	r6, #1
 8011556:	f815 4b01 	ldrb.w	r4, [r5], #1
 801155a:	e7e9      	b.n	8011530 <_strtoul_l.constprop.0+0x50>
 801155c:	2c2b      	cmp	r4, #43	@ 0x2b
 801155e:	bf04      	itt	eq
 8011560:	782c      	ldrbeq	r4, [r5, #0]
 8011562:	1c85      	addeq	r5, r0, #2
 8011564:	e7cd      	b.n	8011502 <_strtoul_l.constprop.0+0x22>
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1d8      	bne.n	801151c <_strtoul_l.constprop.0+0x3c>
 801156a:	2c30      	cmp	r4, #48	@ 0x30
 801156c:	bf0c      	ite	eq
 801156e:	2308      	moveq	r3, #8
 8011570:	230a      	movne	r3, #10
 8011572:	e7d3      	b.n	801151c <_strtoul_l.constprop.0+0x3c>
 8011574:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011578:	f1bc 0f19 	cmp.w	ip, #25
 801157c:	d801      	bhi.n	8011582 <_strtoul_l.constprop.0+0xa2>
 801157e:	3c37      	subs	r4, #55	@ 0x37
 8011580:	e7dc      	b.n	801153c <_strtoul_l.constprop.0+0x5c>
 8011582:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011586:	f1bc 0f19 	cmp.w	ip, #25
 801158a:	d804      	bhi.n	8011596 <_strtoul_l.constprop.0+0xb6>
 801158c:	3c57      	subs	r4, #87	@ 0x57
 801158e:	e7d5      	b.n	801153c <_strtoul_l.constprop.0+0x5c>
 8011590:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011594:	e7df      	b.n	8011556 <_strtoul_l.constprop.0+0x76>
 8011596:	1c73      	adds	r3, r6, #1
 8011598:	d106      	bne.n	80115a8 <_strtoul_l.constprop.0+0xc8>
 801159a:	2322      	movs	r3, #34	@ 0x22
 801159c:	f8ce 3000 	str.w	r3, [lr]
 80115a0:	4630      	mov	r0, r6
 80115a2:	b932      	cbnz	r2, 80115b2 <_strtoul_l.constprop.0+0xd2>
 80115a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115a8:	b107      	cbz	r7, 80115ac <_strtoul_l.constprop.0+0xcc>
 80115aa:	4240      	negs	r0, r0
 80115ac:	2a00      	cmp	r2, #0
 80115ae:	d0f9      	beq.n	80115a4 <_strtoul_l.constprop.0+0xc4>
 80115b0:	b106      	cbz	r6, 80115b4 <_strtoul_l.constprop.0+0xd4>
 80115b2:	1e69      	subs	r1, r5, #1
 80115b4:	6011      	str	r1, [r2, #0]
 80115b6:	e7f5      	b.n	80115a4 <_strtoul_l.constprop.0+0xc4>
 80115b8:	08013120 	.word	0x08013120

080115bc <strtoul>:
 80115bc:	4613      	mov	r3, r2
 80115be:	460a      	mov	r2, r1
 80115c0:	4601      	mov	r1, r0
 80115c2:	4802      	ldr	r0, [pc, #8]	@ (80115cc <strtoul+0x10>)
 80115c4:	6800      	ldr	r0, [r0, #0]
 80115c6:	f7ff bf8b 	b.w	80114e0 <_strtoul_l.constprop.0>
 80115ca:	bf00      	nop
 80115cc:	2000007c 	.word	0x2000007c

080115d0 <std>:
 80115d0:	2300      	movs	r3, #0
 80115d2:	b510      	push	{r4, lr}
 80115d4:	4604      	mov	r4, r0
 80115d6:	e9c0 3300 	strd	r3, r3, [r0]
 80115da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115de:	6083      	str	r3, [r0, #8]
 80115e0:	8181      	strh	r1, [r0, #12]
 80115e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80115e4:	81c2      	strh	r2, [r0, #14]
 80115e6:	6183      	str	r3, [r0, #24]
 80115e8:	4619      	mov	r1, r3
 80115ea:	2208      	movs	r2, #8
 80115ec:	305c      	adds	r0, #92	@ 0x5c
 80115ee:	f000 f961 	bl	80118b4 <memset>
 80115f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011628 <std+0x58>)
 80115f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80115f6:	4b0d      	ldr	r3, [pc, #52]	@ (801162c <std+0x5c>)
 80115f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80115fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011630 <std+0x60>)
 80115fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80115fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011634 <std+0x64>)
 8011600:	6323      	str	r3, [r4, #48]	@ 0x30
 8011602:	4b0d      	ldr	r3, [pc, #52]	@ (8011638 <std+0x68>)
 8011604:	6224      	str	r4, [r4, #32]
 8011606:	429c      	cmp	r4, r3
 8011608:	d006      	beq.n	8011618 <std+0x48>
 801160a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801160e:	4294      	cmp	r4, r2
 8011610:	d002      	beq.n	8011618 <std+0x48>
 8011612:	33d0      	adds	r3, #208	@ 0xd0
 8011614:	429c      	cmp	r4, r3
 8011616:	d105      	bne.n	8011624 <std+0x54>
 8011618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801161c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011620:	f000 ba06 	b.w	8011a30 <__retarget_lock_init_recursive>
 8011624:	bd10      	pop	{r4, pc}
 8011626:	bf00      	nop
 8011628:	080117bd 	.word	0x080117bd
 801162c:	080117df 	.word	0x080117df
 8011630:	08011817 	.word	0x08011817
 8011634:	0801183b 	.word	0x0801183b
 8011638:	20009310 	.word	0x20009310

0801163c <stdio_exit_handler>:
 801163c:	4a02      	ldr	r2, [pc, #8]	@ (8011648 <stdio_exit_handler+0xc>)
 801163e:	4903      	ldr	r1, [pc, #12]	@ (801164c <stdio_exit_handler+0x10>)
 8011640:	4803      	ldr	r0, [pc, #12]	@ (8011650 <stdio_exit_handler+0x14>)
 8011642:	f000 b869 	b.w	8011718 <_fwalk_sglue>
 8011646:	bf00      	nop
 8011648:	20000070 	.word	0x20000070
 801164c:	08012231 	.word	0x08012231
 8011650:	20000080 	.word	0x20000080

08011654 <cleanup_stdio>:
 8011654:	6841      	ldr	r1, [r0, #4]
 8011656:	4b0c      	ldr	r3, [pc, #48]	@ (8011688 <cleanup_stdio+0x34>)
 8011658:	4299      	cmp	r1, r3
 801165a:	b510      	push	{r4, lr}
 801165c:	4604      	mov	r4, r0
 801165e:	d001      	beq.n	8011664 <cleanup_stdio+0x10>
 8011660:	f000 fde6 	bl	8012230 <_fflush_r>
 8011664:	68a1      	ldr	r1, [r4, #8]
 8011666:	4b09      	ldr	r3, [pc, #36]	@ (801168c <cleanup_stdio+0x38>)
 8011668:	4299      	cmp	r1, r3
 801166a:	d002      	beq.n	8011672 <cleanup_stdio+0x1e>
 801166c:	4620      	mov	r0, r4
 801166e:	f000 fddf 	bl	8012230 <_fflush_r>
 8011672:	68e1      	ldr	r1, [r4, #12]
 8011674:	4b06      	ldr	r3, [pc, #24]	@ (8011690 <cleanup_stdio+0x3c>)
 8011676:	4299      	cmp	r1, r3
 8011678:	d004      	beq.n	8011684 <cleanup_stdio+0x30>
 801167a:	4620      	mov	r0, r4
 801167c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011680:	f000 bdd6 	b.w	8012230 <_fflush_r>
 8011684:	bd10      	pop	{r4, pc}
 8011686:	bf00      	nop
 8011688:	20009310 	.word	0x20009310
 801168c:	20009378 	.word	0x20009378
 8011690:	200093e0 	.word	0x200093e0

08011694 <global_stdio_init.part.0>:
 8011694:	b510      	push	{r4, lr}
 8011696:	4b0b      	ldr	r3, [pc, #44]	@ (80116c4 <global_stdio_init.part.0+0x30>)
 8011698:	4c0b      	ldr	r4, [pc, #44]	@ (80116c8 <global_stdio_init.part.0+0x34>)
 801169a:	4a0c      	ldr	r2, [pc, #48]	@ (80116cc <global_stdio_init.part.0+0x38>)
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	4620      	mov	r0, r4
 80116a0:	2200      	movs	r2, #0
 80116a2:	2104      	movs	r1, #4
 80116a4:	f7ff ff94 	bl	80115d0 <std>
 80116a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80116ac:	2201      	movs	r2, #1
 80116ae:	2109      	movs	r1, #9
 80116b0:	f7ff ff8e 	bl	80115d0 <std>
 80116b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80116b8:	2202      	movs	r2, #2
 80116ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116be:	2112      	movs	r1, #18
 80116c0:	f7ff bf86 	b.w	80115d0 <std>
 80116c4:	20009448 	.word	0x20009448
 80116c8:	20009310 	.word	0x20009310
 80116cc:	0801163d 	.word	0x0801163d

080116d0 <__sfp_lock_acquire>:
 80116d0:	4801      	ldr	r0, [pc, #4]	@ (80116d8 <__sfp_lock_acquire+0x8>)
 80116d2:	f000 b9ae 	b.w	8011a32 <__retarget_lock_acquire_recursive>
 80116d6:	bf00      	nop
 80116d8:	20009452 	.word	0x20009452

080116dc <__sfp_lock_release>:
 80116dc:	4801      	ldr	r0, [pc, #4]	@ (80116e4 <__sfp_lock_release+0x8>)
 80116de:	f000 b9a9 	b.w	8011a34 <__retarget_lock_release_recursive>
 80116e2:	bf00      	nop
 80116e4:	20009452 	.word	0x20009452

080116e8 <__sinit>:
 80116e8:	b510      	push	{r4, lr}
 80116ea:	4604      	mov	r4, r0
 80116ec:	f7ff fff0 	bl	80116d0 <__sfp_lock_acquire>
 80116f0:	6a23      	ldr	r3, [r4, #32]
 80116f2:	b11b      	cbz	r3, 80116fc <__sinit+0x14>
 80116f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116f8:	f7ff bff0 	b.w	80116dc <__sfp_lock_release>
 80116fc:	4b04      	ldr	r3, [pc, #16]	@ (8011710 <__sinit+0x28>)
 80116fe:	6223      	str	r3, [r4, #32]
 8011700:	4b04      	ldr	r3, [pc, #16]	@ (8011714 <__sinit+0x2c>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1f5      	bne.n	80116f4 <__sinit+0xc>
 8011708:	f7ff ffc4 	bl	8011694 <global_stdio_init.part.0>
 801170c:	e7f2      	b.n	80116f4 <__sinit+0xc>
 801170e:	bf00      	nop
 8011710:	08011655 	.word	0x08011655
 8011714:	20009448 	.word	0x20009448

08011718 <_fwalk_sglue>:
 8011718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801171c:	4607      	mov	r7, r0
 801171e:	4688      	mov	r8, r1
 8011720:	4614      	mov	r4, r2
 8011722:	2600      	movs	r6, #0
 8011724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011728:	f1b9 0901 	subs.w	r9, r9, #1
 801172c:	d505      	bpl.n	801173a <_fwalk_sglue+0x22>
 801172e:	6824      	ldr	r4, [r4, #0]
 8011730:	2c00      	cmp	r4, #0
 8011732:	d1f7      	bne.n	8011724 <_fwalk_sglue+0xc>
 8011734:	4630      	mov	r0, r6
 8011736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801173a:	89ab      	ldrh	r3, [r5, #12]
 801173c:	2b01      	cmp	r3, #1
 801173e:	d907      	bls.n	8011750 <_fwalk_sglue+0x38>
 8011740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011744:	3301      	adds	r3, #1
 8011746:	d003      	beq.n	8011750 <_fwalk_sglue+0x38>
 8011748:	4629      	mov	r1, r5
 801174a:	4638      	mov	r0, r7
 801174c:	47c0      	blx	r8
 801174e:	4306      	orrs	r6, r0
 8011750:	3568      	adds	r5, #104	@ 0x68
 8011752:	e7e9      	b.n	8011728 <_fwalk_sglue+0x10>

08011754 <sniprintf>:
 8011754:	b40c      	push	{r2, r3}
 8011756:	b530      	push	{r4, r5, lr}
 8011758:	4b17      	ldr	r3, [pc, #92]	@ (80117b8 <sniprintf+0x64>)
 801175a:	1e0c      	subs	r4, r1, #0
 801175c:	681d      	ldr	r5, [r3, #0]
 801175e:	b09d      	sub	sp, #116	@ 0x74
 8011760:	da08      	bge.n	8011774 <sniprintf+0x20>
 8011762:	238b      	movs	r3, #139	@ 0x8b
 8011764:	602b      	str	r3, [r5, #0]
 8011766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801176a:	b01d      	add	sp, #116	@ 0x74
 801176c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011770:	b002      	add	sp, #8
 8011772:	4770      	bx	lr
 8011774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011778:	f8ad 3014 	strh.w	r3, [sp, #20]
 801177c:	bf14      	ite	ne
 801177e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8011782:	4623      	moveq	r3, r4
 8011784:	9304      	str	r3, [sp, #16]
 8011786:	9307      	str	r3, [sp, #28]
 8011788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801178c:	9002      	str	r0, [sp, #8]
 801178e:	9006      	str	r0, [sp, #24]
 8011790:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011794:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011796:	ab21      	add	r3, sp, #132	@ 0x84
 8011798:	a902      	add	r1, sp, #8
 801179a:	4628      	mov	r0, r5
 801179c:	9301      	str	r3, [sp, #4]
 801179e:	f000 fa39 	bl	8011c14 <_svfiprintf_r>
 80117a2:	1c43      	adds	r3, r0, #1
 80117a4:	bfbc      	itt	lt
 80117a6:	238b      	movlt	r3, #139	@ 0x8b
 80117a8:	602b      	strlt	r3, [r5, #0]
 80117aa:	2c00      	cmp	r4, #0
 80117ac:	d0dd      	beq.n	801176a <sniprintf+0x16>
 80117ae:	9b02      	ldr	r3, [sp, #8]
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
 80117b4:	e7d9      	b.n	801176a <sniprintf+0x16>
 80117b6:	bf00      	nop
 80117b8:	2000007c 	.word	0x2000007c

080117bc <__sread>:
 80117bc:	b510      	push	{r4, lr}
 80117be:	460c      	mov	r4, r1
 80117c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c4:	f000 f8d6 	bl	8011974 <_read_r>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	bfab      	itete	ge
 80117cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80117ce:	89a3      	ldrhlt	r3, [r4, #12]
 80117d0:	181b      	addge	r3, r3, r0
 80117d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80117d6:	bfac      	ite	ge
 80117d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80117da:	81a3      	strhlt	r3, [r4, #12]
 80117dc:	bd10      	pop	{r4, pc}

080117de <__swrite>:
 80117de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e2:	461f      	mov	r7, r3
 80117e4:	898b      	ldrh	r3, [r1, #12]
 80117e6:	05db      	lsls	r3, r3, #23
 80117e8:	4605      	mov	r5, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	4616      	mov	r6, r2
 80117ee:	d505      	bpl.n	80117fc <__swrite+0x1e>
 80117f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117f4:	2302      	movs	r3, #2
 80117f6:	2200      	movs	r2, #0
 80117f8:	f000 f8aa 	bl	8011950 <_lseek_r>
 80117fc:	89a3      	ldrh	r3, [r4, #12]
 80117fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011806:	81a3      	strh	r3, [r4, #12]
 8011808:	4632      	mov	r2, r6
 801180a:	463b      	mov	r3, r7
 801180c:	4628      	mov	r0, r5
 801180e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011812:	f000 b8d1 	b.w	80119b8 <_write_r>

08011816 <__sseek>:
 8011816:	b510      	push	{r4, lr}
 8011818:	460c      	mov	r4, r1
 801181a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801181e:	f000 f897 	bl	8011950 <_lseek_r>
 8011822:	1c43      	adds	r3, r0, #1
 8011824:	89a3      	ldrh	r3, [r4, #12]
 8011826:	bf15      	itete	ne
 8011828:	6560      	strne	r0, [r4, #84]	@ 0x54
 801182a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801182e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011832:	81a3      	strheq	r3, [r4, #12]
 8011834:	bf18      	it	ne
 8011836:	81a3      	strhne	r3, [r4, #12]
 8011838:	bd10      	pop	{r4, pc}

0801183a <__sclose>:
 801183a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801183e:	f000 b877 	b.w	8011930 <_close_r>

08011842 <_vsniprintf_r>:
 8011842:	b530      	push	{r4, r5, lr}
 8011844:	4614      	mov	r4, r2
 8011846:	2c00      	cmp	r4, #0
 8011848:	b09b      	sub	sp, #108	@ 0x6c
 801184a:	4605      	mov	r5, r0
 801184c:	461a      	mov	r2, r3
 801184e:	da05      	bge.n	801185c <_vsniprintf_r+0x1a>
 8011850:	238b      	movs	r3, #139	@ 0x8b
 8011852:	6003      	str	r3, [r0, #0]
 8011854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011858:	b01b      	add	sp, #108	@ 0x6c
 801185a:	bd30      	pop	{r4, r5, pc}
 801185c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011860:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011864:	bf14      	ite	ne
 8011866:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801186a:	4623      	moveq	r3, r4
 801186c:	9302      	str	r3, [sp, #8]
 801186e:	9305      	str	r3, [sp, #20]
 8011870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011874:	9100      	str	r1, [sp, #0]
 8011876:	9104      	str	r1, [sp, #16]
 8011878:	f8ad 300e 	strh.w	r3, [sp, #14]
 801187c:	4669      	mov	r1, sp
 801187e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011880:	f000 f9c8 	bl	8011c14 <_svfiprintf_r>
 8011884:	1c43      	adds	r3, r0, #1
 8011886:	bfbc      	itt	lt
 8011888:	238b      	movlt	r3, #139	@ 0x8b
 801188a:	602b      	strlt	r3, [r5, #0]
 801188c:	2c00      	cmp	r4, #0
 801188e:	d0e3      	beq.n	8011858 <_vsniprintf_r+0x16>
 8011890:	9b00      	ldr	r3, [sp, #0]
 8011892:	2200      	movs	r2, #0
 8011894:	701a      	strb	r2, [r3, #0]
 8011896:	e7df      	b.n	8011858 <_vsniprintf_r+0x16>

08011898 <vsniprintf>:
 8011898:	b507      	push	{r0, r1, r2, lr}
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	4613      	mov	r3, r2
 801189e:	460a      	mov	r2, r1
 80118a0:	4601      	mov	r1, r0
 80118a2:	4803      	ldr	r0, [pc, #12]	@ (80118b0 <vsniprintf+0x18>)
 80118a4:	6800      	ldr	r0, [r0, #0]
 80118a6:	f7ff ffcc 	bl	8011842 <_vsniprintf_r>
 80118aa:	b003      	add	sp, #12
 80118ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80118b0:	2000007c 	.word	0x2000007c

080118b4 <memset>:
 80118b4:	4402      	add	r2, r0
 80118b6:	4603      	mov	r3, r0
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d100      	bne.n	80118be <memset+0xa>
 80118bc:	4770      	bx	lr
 80118be:	f803 1b01 	strb.w	r1, [r3], #1
 80118c2:	e7f9      	b.n	80118b8 <memset+0x4>

080118c4 <strchr>:
 80118c4:	b2c9      	uxtb	r1, r1
 80118c6:	4603      	mov	r3, r0
 80118c8:	4618      	mov	r0, r3
 80118ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118ce:	b112      	cbz	r2, 80118d6 <strchr+0x12>
 80118d0:	428a      	cmp	r2, r1
 80118d2:	d1f9      	bne.n	80118c8 <strchr+0x4>
 80118d4:	4770      	bx	lr
 80118d6:	2900      	cmp	r1, #0
 80118d8:	bf18      	it	ne
 80118da:	2000      	movne	r0, #0
 80118dc:	4770      	bx	lr

080118de <strncmp>:
 80118de:	b510      	push	{r4, lr}
 80118e0:	b16a      	cbz	r2, 80118fe <strncmp+0x20>
 80118e2:	3901      	subs	r1, #1
 80118e4:	1884      	adds	r4, r0, r2
 80118e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d103      	bne.n	80118fa <strncmp+0x1c>
 80118f2:	42a0      	cmp	r0, r4
 80118f4:	d001      	beq.n	80118fa <strncmp+0x1c>
 80118f6:	2a00      	cmp	r2, #0
 80118f8:	d1f5      	bne.n	80118e6 <strncmp+0x8>
 80118fa:	1ad0      	subs	r0, r2, r3
 80118fc:	bd10      	pop	{r4, pc}
 80118fe:	4610      	mov	r0, r2
 8011900:	e7fc      	b.n	80118fc <strncmp+0x1e>

08011902 <strstr>:
 8011902:	780a      	ldrb	r2, [r1, #0]
 8011904:	b570      	push	{r4, r5, r6, lr}
 8011906:	b96a      	cbnz	r2, 8011924 <strstr+0x22>
 8011908:	bd70      	pop	{r4, r5, r6, pc}
 801190a:	429a      	cmp	r2, r3
 801190c:	d109      	bne.n	8011922 <strstr+0x20>
 801190e:	460c      	mov	r4, r1
 8011910:	4605      	mov	r5, r0
 8011912:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011916:	2b00      	cmp	r3, #0
 8011918:	d0f6      	beq.n	8011908 <strstr+0x6>
 801191a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801191e:	429e      	cmp	r6, r3
 8011920:	d0f7      	beq.n	8011912 <strstr+0x10>
 8011922:	3001      	adds	r0, #1
 8011924:	7803      	ldrb	r3, [r0, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d1ef      	bne.n	801190a <strstr+0x8>
 801192a:	4618      	mov	r0, r3
 801192c:	e7ec      	b.n	8011908 <strstr+0x6>
	...

08011930 <_close_r>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	4d06      	ldr	r5, [pc, #24]	@ (801194c <_close_r+0x1c>)
 8011934:	2300      	movs	r3, #0
 8011936:	4604      	mov	r4, r0
 8011938:	4608      	mov	r0, r1
 801193a:	602b      	str	r3, [r5, #0]
 801193c:	f7f0 fa1a 	bl	8001d74 <_close>
 8011940:	1c43      	adds	r3, r0, #1
 8011942:	d102      	bne.n	801194a <_close_r+0x1a>
 8011944:	682b      	ldr	r3, [r5, #0]
 8011946:	b103      	cbz	r3, 801194a <_close_r+0x1a>
 8011948:	6023      	str	r3, [r4, #0]
 801194a:	bd38      	pop	{r3, r4, r5, pc}
 801194c:	2000944c 	.word	0x2000944c

08011950 <_lseek_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4d07      	ldr	r5, [pc, #28]	@ (8011970 <_lseek_r+0x20>)
 8011954:	4604      	mov	r4, r0
 8011956:	4608      	mov	r0, r1
 8011958:	4611      	mov	r1, r2
 801195a:	2200      	movs	r2, #0
 801195c:	602a      	str	r2, [r5, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	f7f0 fa2f 	bl	8001dc2 <_lseek>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d102      	bne.n	801196e <_lseek_r+0x1e>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	b103      	cbz	r3, 801196e <_lseek_r+0x1e>
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	bd38      	pop	{r3, r4, r5, pc}
 8011970:	2000944c 	.word	0x2000944c

08011974 <_read_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	4d07      	ldr	r5, [pc, #28]	@ (8011994 <_read_r+0x20>)
 8011978:	4604      	mov	r4, r0
 801197a:	4608      	mov	r0, r1
 801197c:	4611      	mov	r1, r2
 801197e:	2200      	movs	r2, #0
 8011980:	602a      	str	r2, [r5, #0]
 8011982:	461a      	mov	r2, r3
 8011984:	f7f0 f9bd 	bl	8001d02 <_read>
 8011988:	1c43      	adds	r3, r0, #1
 801198a:	d102      	bne.n	8011992 <_read_r+0x1e>
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	b103      	cbz	r3, 8011992 <_read_r+0x1e>
 8011990:	6023      	str	r3, [r4, #0]
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	2000944c 	.word	0x2000944c

08011998 <_sbrk_r>:
 8011998:	b538      	push	{r3, r4, r5, lr}
 801199a:	4d06      	ldr	r5, [pc, #24]	@ (80119b4 <_sbrk_r+0x1c>)
 801199c:	2300      	movs	r3, #0
 801199e:	4604      	mov	r4, r0
 80119a0:	4608      	mov	r0, r1
 80119a2:	602b      	str	r3, [r5, #0]
 80119a4:	f7f0 fa1a 	bl	8001ddc <_sbrk>
 80119a8:	1c43      	adds	r3, r0, #1
 80119aa:	d102      	bne.n	80119b2 <_sbrk_r+0x1a>
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	b103      	cbz	r3, 80119b2 <_sbrk_r+0x1a>
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	bd38      	pop	{r3, r4, r5, pc}
 80119b4:	2000944c 	.word	0x2000944c

080119b8 <_write_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d07      	ldr	r5, [pc, #28]	@ (80119d8 <_write_r+0x20>)
 80119bc:	4604      	mov	r4, r0
 80119be:	4608      	mov	r0, r1
 80119c0:	4611      	mov	r1, r2
 80119c2:	2200      	movs	r2, #0
 80119c4:	602a      	str	r2, [r5, #0]
 80119c6:	461a      	mov	r2, r3
 80119c8:	f7f0 f9b8 	bl	8001d3c <_write>
 80119cc:	1c43      	adds	r3, r0, #1
 80119ce:	d102      	bne.n	80119d6 <_write_r+0x1e>
 80119d0:	682b      	ldr	r3, [r5, #0]
 80119d2:	b103      	cbz	r3, 80119d6 <_write_r+0x1e>
 80119d4:	6023      	str	r3, [r4, #0]
 80119d6:	bd38      	pop	{r3, r4, r5, pc}
 80119d8:	2000944c 	.word	0x2000944c

080119dc <__errno>:
 80119dc:	4b01      	ldr	r3, [pc, #4]	@ (80119e4 <__errno+0x8>)
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	2000007c 	.word	0x2000007c

080119e8 <__libc_init_array>:
 80119e8:	b570      	push	{r4, r5, r6, lr}
 80119ea:	4d0d      	ldr	r5, [pc, #52]	@ (8011a20 <__libc_init_array+0x38>)
 80119ec:	4c0d      	ldr	r4, [pc, #52]	@ (8011a24 <__libc_init_array+0x3c>)
 80119ee:	1b64      	subs	r4, r4, r5
 80119f0:	10a4      	asrs	r4, r4, #2
 80119f2:	2600      	movs	r6, #0
 80119f4:	42a6      	cmp	r6, r4
 80119f6:	d109      	bne.n	8011a0c <__libc_init_array+0x24>
 80119f8:	4d0b      	ldr	r5, [pc, #44]	@ (8011a28 <__libc_init_array+0x40>)
 80119fa:	4c0c      	ldr	r4, [pc, #48]	@ (8011a2c <__libc_init_array+0x44>)
 80119fc:	f000 ff10 	bl	8012820 <_init>
 8011a00:	1b64      	subs	r4, r4, r5
 8011a02:	10a4      	asrs	r4, r4, #2
 8011a04:	2600      	movs	r6, #0
 8011a06:	42a6      	cmp	r6, r4
 8011a08:	d105      	bne.n	8011a16 <__libc_init_array+0x2e>
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}
 8011a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a10:	4798      	blx	r3
 8011a12:	3601      	adds	r6, #1
 8011a14:	e7ee      	b.n	80119f4 <__libc_init_array+0xc>
 8011a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a1a:	4798      	blx	r3
 8011a1c:	3601      	adds	r6, #1
 8011a1e:	e7f2      	b.n	8011a06 <__libc_init_array+0x1e>
 8011a20:	08013298 	.word	0x08013298
 8011a24:	08013298 	.word	0x08013298
 8011a28:	08013298 	.word	0x08013298
 8011a2c:	0801329c 	.word	0x0801329c

08011a30 <__retarget_lock_init_recursive>:
 8011a30:	4770      	bx	lr

08011a32 <__retarget_lock_acquire_recursive>:
 8011a32:	4770      	bx	lr

08011a34 <__retarget_lock_release_recursive>:
 8011a34:	4770      	bx	lr

08011a36 <strcpy>:
 8011a36:	4603      	mov	r3, r0
 8011a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a3c:	f803 2b01 	strb.w	r2, [r3], #1
 8011a40:	2a00      	cmp	r2, #0
 8011a42:	d1f9      	bne.n	8011a38 <strcpy+0x2>
 8011a44:	4770      	bx	lr

08011a46 <memcpy>:
 8011a46:	440a      	add	r2, r1
 8011a48:	4291      	cmp	r1, r2
 8011a4a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011a4e:	d100      	bne.n	8011a52 <memcpy+0xc>
 8011a50:	4770      	bx	lr
 8011a52:	b510      	push	{r4, lr}
 8011a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a5c:	4291      	cmp	r1, r2
 8011a5e:	d1f9      	bne.n	8011a54 <memcpy+0xe>
 8011a60:	bd10      	pop	{r4, pc}
	...

08011a64 <__assert_func>:
 8011a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a66:	4614      	mov	r4, r2
 8011a68:	461a      	mov	r2, r3
 8011a6a:	4b09      	ldr	r3, [pc, #36]	@ (8011a90 <__assert_func+0x2c>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4605      	mov	r5, r0
 8011a70:	68d8      	ldr	r0, [r3, #12]
 8011a72:	b954      	cbnz	r4, 8011a8a <__assert_func+0x26>
 8011a74:	4b07      	ldr	r3, [pc, #28]	@ (8011a94 <__assert_func+0x30>)
 8011a76:	461c      	mov	r4, r3
 8011a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a7c:	9100      	str	r1, [sp, #0]
 8011a7e:	462b      	mov	r3, r5
 8011a80:	4905      	ldr	r1, [pc, #20]	@ (8011a98 <__assert_func+0x34>)
 8011a82:	f000 fbfd 	bl	8012280 <fiprintf>
 8011a86:	f000 fc27 	bl	80122d8 <abort>
 8011a8a:	4b04      	ldr	r3, [pc, #16]	@ (8011a9c <__assert_func+0x38>)
 8011a8c:	e7f4      	b.n	8011a78 <__assert_func+0x14>
 8011a8e:	bf00      	nop
 8011a90:	2000007c 	.word	0x2000007c
 8011a94:	0801325b 	.word	0x0801325b
 8011a98:	0801322d 	.word	0x0801322d
 8011a9c:	08013220 	.word	0x08013220

08011aa0 <__env_lock>:
 8011aa0:	4801      	ldr	r0, [pc, #4]	@ (8011aa8 <__env_lock+0x8>)
 8011aa2:	f7ff bfc6 	b.w	8011a32 <__retarget_lock_acquire_recursive>
 8011aa6:	bf00      	nop
 8011aa8:	20009450 	.word	0x20009450

08011aac <__env_unlock>:
 8011aac:	4801      	ldr	r0, [pc, #4]	@ (8011ab4 <__env_unlock+0x8>)
 8011aae:	f7ff bfc1 	b.w	8011a34 <__retarget_lock_release_recursive>
 8011ab2:	bf00      	nop
 8011ab4:	20009450 	.word	0x20009450

08011ab8 <_free_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4605      	mov	r5, r0
 8011abc:	2900      	cmp	r1, #0
 8011abe:	d041      	beq.n	8011b44 <_free_r+0x8c>
 8011ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ac4:	1f0c      	subs	r4, r1, #4
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	bfb8      	it	lt
 8011aca:	18e4      	addlt	r4, r4, r3
 8011acc:	f7ff fc5a 	bl	8011384 <__malloc_lock>
 8011ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8011b48 <_free_r+0x90>)
 8011ad2:	6813      	ldr	r3, [r2, #0]
 8011ad4:	b933      	cbnz	r3, 8011ae4 <_free_r+0x2c>
 8011ad6:	6063      	str	r3, [r4, #4]
 8011ad8:	6014      	str	r4, [r2, #0]
 8011ada:	4628      	mov	r0, r5
 8011adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ae0:	f7ff bc56 	b.w	8011390 <__malloc_unlock>
 8011ae4:	42a3      	cmp	r3, r4
 8011ae6:	d908      	bls.n	8011afa <_free_r+0x42>
 8011ae8:	6820      	ldr	r0, [r4, #0]
 8011aea:	1821      	adds	r1, r4, r0
 8011aec:	428b      	cmp	r3, r1
 8011aee:	bf01      	itttt	eq
 8011af0:	6819      	ldreq	r1, [r3, #0]
 8011af2:	685b      	ldreq	r3, [r3, #4]
 8011af4:	1809      	addeq	r1, r1, r0
 8011af6:	6021      	streq	r1, [r4, #0]
 8011af8:	e7ed      	b.n	8011ad6 <_free_r+0x1e>
 8011afa:	461a      	mov	r2, r3
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	b10b      	cbz	r3, 8011b04 <_free_r+0x4c>
 8011b00:	42a3      	cmp	r3, r4
 8011b02:	d9fa      	bls.n	8011afa <_free_r+0x42>
 8011b04:	6811      	ldr	r1, [r2, #0]
 8011b06:	1850      	adds	r0, r2, r1
 8011b08:	42a0      	cmp	r0, r4
 8011b0a:	d10b      	bne.n	8011b24 <_free_r+0x6c>
 8011b0c:	6820      	ldr	r0, [r4, #0]
 8011b0e:	4401      	add	r1, r0
 8011b10:	1850      	adds	r0, r2, r1
 8011b12:	4283      	cmp	r3, r0
 8011b14:	6011      	str	r1, [r2, #0]
 8011b16:	d1e0      	bne.n	8011ada <_free_r+0x22>
 8011b18:	6818      	ldr	r0, [r3, #0]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	6053      	str	r3, [r2, #4]
 8011b1e:	4408      	add	r0, r1
 8011b20:	6010      	str	r0, [r2, #0]
 8011b22:	e7da      	b.n	8011ada <_free_r+0x22>
 8011b24:	d902      	bls.n	8011b2c <_free_r+0x74>
 8011b26:	230c      	movs	r3, #12
 8011b28:	602b      	str	r3, [r5, #0]
 8011b2a:	e7d6      	b.n	8011ada <_free_r+0x22>
 8011b2c:	6820      	ldr	r0, [r4, #0]
 8011b2e:	1821      	adds	r1, r4, r0
 8011b30:	428b      	cmp	r3, r1
 8011b32:	bf04      	itt	eq
 8011b34:	6819      	ldreq	r1, [r3, #0]
 8011b36:	685b      	ldreq	r3, [r3, #4]
 8011b38:	6063      	str	r3, [r4, #4]
 8011b3a:	bf04      	itt	eq
 8011b3c:	1809      	addeq	r1, r1, r0
 8011b3e:	6021      	streq	r1, [r4, #0]
 8011b40:	6054      	str	r4, [r2, #4]
 8011b42:	e7ca      	b.n	8011ada <_free_r+0x22>
 8011b44:	bd38      	pop	{r3, r4, r5, pc}
 8011b46:	bf00      	nop
 8011b48:	2000930c 	.word	0x2000930c

08011b4c <_malloc_usable_size_r>:
 8011b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b50:	1f18      	subs	r0, r3, #4
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	bfbc      	itt	lt
 8011b56:	580b      	ldrlt	r3, [r1, r0]
 8011b58:	18c0      	addlt	r0, r0, r3
 8011b5a:	4770      	bx	lr

08011b5c <__ssputs_r>:
 8011b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b60:	688e      	ldr	r6, [r1, #8]
 8011b62:	461f      	mov	r7, r3
 8011b64:	42be      	cmp	r6, r7
 8011b66:	680b      	ldr	r3, [r1, #0]
 8011b68:	4682      	mov	sl, r0
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	4690      	mov	r8, r2
 8011b6e:	d82d      	bhi.n	8011bcc <__ssputs_r+0x70>
 8011b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011b78:	d026      	beq.n	8011bc8 <__ssputs_r+0x6c>
 8011b7a:	6965      	ldr	r5, [r4, #20]
 8011b7c:	6909      	ldr	r1, [r1, #16]
 8011b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b82:	eba3 0901 	sub.w	r9, r3, r1
 8011b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b8a:	1c7b      	adds	r3, r7, #1
 8011b8c:	444b      	add	r3, r9
 8011b8e:	106d      	asrs	r5, r5, #1
 8011b90:	429d      	cmp	r5, r3
 8011b92:	bf38      	it	cc
 8011b94:	461d      	movcc	r5, r3
 8011b96:	0553      	lsls	r3, r2, #21
 8011b98:	d527      	bpl.n	8011bea <__ssputs_r+0x8e>
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	f7ff fb72 	bl	8011284 <_malloc_r>
 8011ba0:	4606      	mov	r6, r0
 8011ba2:	b360      	cbz	r0, 8011bfe <__ssputs_r+0xa2>
 8011ba4:	6921      	ldr	r1, [r4, #16]
 8011ba6:	464a      	mov	r2, r9
 8011ba8:	f7ff ff4d 	bl	8011a46 <memcpy>
 8011bac:	89a3      	ldrh	r3, [r4, #12]
 8011bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bb6:	81a3      	strh	r3, [r4, #12]
 8011bb8:	6126      	str	r6, [r4, #16]
 8011bba:	6165      	str	r5, [r4, #20]
 8011bbc:	444e      	add	r6, r9
 8011bbe:	eba5 0509 	sub.w	r5, r5, r9
 8011bc2:	6026      	str	r6, [r4, #0]
 8011bc4:	60a5      	str	r5, [r4, #8]
 8011bc6:	463e      	mov	r6, r7
 8011bc8:	42be      	cmp	r6, r7
 8011bca:	d900      	bls.n	8011bce <__ssputs_r+0x72>
 8011bcc:	463e      	mov	r6, r7
 8011bce:	6820      	ldr	r0, [r4, #0]
 8011bd0:	4632      	mov	r2, r6
 8011bd2:	4641      	mov	r1, r8
 8011bd4:	f000 fb66 	bl	80122a4 <memmove>
 8011bd8:	68a3      	ldr	r3, [r4, #8]
 8011bda:	1b9b      	subs	r3, r3, r6
 8011bdc:	60a3      	str	r3, [r4, #8]
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4433      	add	r3, r6
 8011be2:	6023      	str	r3, [r4, #0]
 8011be4:	2000      	movs	r0, #0
 8011be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bea:	462a      	mov	r2, r5
 8011bec:	f7ff fc4a 	bl	8011484 <_realloc_r>
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d1e0      	bne.n	8011bb8 <__ssputs_r+0x5c>
 8011bf6:	6921      	ldr	r1, [r4, #16]
 8011bf8:	4650      	mov	r0, sl
 8011bfa:	f7ff ff5d 	bl	8011ab8 <_free_r>
 8011bfe:	230c      	movs	r3, #12
 8011c00:	f8ca 3000 	str.w	r3, [sl]
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c0a:	81a3      	strh	r3, [r4, #12]
 8011c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c10:	e7e9      	b.n	8011be6 <__ssputs_r+0x8a>
	...

08011c14 <_svfiprintf_r>:
 8011c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c18:	4698      	mov	r8, r3
 8011c1a:	898b      	ldrh	r3, [r1, #12]
 8011c1c:	061b      	lsls	r3, r3, #24
 8011c1e:	b09d      	sub	sp, #116	@ 0x74
 8011c20:	4607      	mov	r7, r0
 8011c22:	460d      	mov	r5, r1
 8011c24:	4614      	mov	r4, r2
 8011c26:	d510      	bpl.n	8011c4a <_svfiprintf_r+0x36>
 8011c28:	690b      	ldr	r3, [r1, #16]
 8011c2a:	b973      	cbnz	r3, 8011c4a <_svfiprintf_r+0x36>
 8011c2c:	2140      	movs	r1, #64	@ 0x40
 8011c2e:	f7ff fb29 	bl	8011284 <_malloc_r>
 8011c32:	6028      	str	r0, [r5, #0]
 8011c34:	6128      	str	r0, [r5, #16]
 8011c36:	b930      	cbnz	r0, 8011c46 <_svfiprintf_r+0x32>
 8011c38:	230c      	movs	r3, #12
 8011c3a:	603b      	str	r3, [r7, #0]
 8011c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c40:	b01d      	add	sp, #116	@ 0x74
 8011c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c46:	2340      	movs	r3, #64	@ 0x40
 8011c48:	616b      	str	r3, [r5, #20]
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c4e:	2320      	movs	r3, #32
 8011c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c58:	2330      	movs	r3, #48	@ 0x30
 8011c5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011df8 <_svfiprintf_r+0x1e4>
 8011c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c62:	f04f 0901 	mov.w	r9, #1
 8011c66:	4623      	mov	r3, r4
 8011c68:	469a      	mov	sl, r3
 8011c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c6e:	b10a      	cbz	r2, 8011c74 <_svfiprintf_r+0x60>
 8011c70:	2a25      	cmp	r2, #37	@ 0x25
 8011c72:	d1f9      	bne.n	8011c68 <_svfiprintf_r+0x54>
 8011c74:	ebba 0b04 	subs.w	fp, sl, r4
 8011c78:	d00b      	beq.n	8011c92 <_svfiprintf_r+0x7e>
 8011c7a:	465b      	mov	r3, fp
 8011c7c:	4622      	mov	r2, r4
 8011c7e:	4629      	mov	r1, r5
 8011c80:	4638      	mov	r0, r7
 8011c82:	f7ff ff6b 	bl	8011b5c <__ssputs_r>
 8011c86:	3001      	adds	r0, #1
 8011c88:	f000 80a7 	beq.w	8011dda <_svfiprintf_r+0x1c6>
 8011c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c8e:	445a      	add	r2, fp
 8011c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c92:	f89a 3000 	ldrb.w	r3, [sl]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f000 809f 	beq.w	8011dda <_svfiprintf_r+0x1c6>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ca6:	f10a 0a01 	add.w	sl, sl, #1
 8011caa:	9304      	str	r3, [sp, #16]
 8011cac:	9307      	str	r3, [sp, #28]
 8011cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011cb4:	4654      	mov	r4, sl
 8011cb6:	2205      	movs	r2, #5
 8011cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cbc:	484e      	ldr	r0, [pc, #312]	@ (8011df8 <_svfiprintf_r+0x1e4>)
 8011cbe:	f7ee faa7 	bl	8000210 <memchr>
 8011cc2:	9a04      	ldr	r2, [sp, #16]
 8011cc4:	b9d8      	cbnz	r0, 8011cfe <_svfiprintf_r+0xea>
 8011cc6:	06d0      	lsls	r0, r2, #27
 8011cc8:	bf44      	itt	mi
 8011cca:	2320      	movmi	r3, #32
 8011ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cd0:	0711      	lsls	r1, r2, #28
 8011cd2:	bf44      	itt	mi
 8011cd4:	232b      	movmi	r3, #43	@ 0x2b
 8011cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cda:	f89a 3000 	ldrb.w	r3, [sl]
 8011cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ce0:	d015      	beq.n	8011d0e <_svfiprintf_r+0xfa>
 8011ce2:	9a07      	ldr	r2, [sp, #28]
 8011ce4:	4654      	mov	r4, sl
 8011ce6:	2000      	movs	r0, #0
 8011ce8:	f04f 0c0a 	mov.w	ip, #10
 8011cec:	4621      	mov	r1, r4
 8011cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cf2:	3b30      	subs	r3, #48	@ 0x30
 8011cf4:	2b09      	cmp	r3, #9
 8011cf6:	d94b      	bls.n	8011d90 <_svfiprintf_r+0x17c>
 8011cf8:	b1b0      	cbz	r0, 8011d28 <_svfiprintf_r+0x114>
 8011cfa:	9207      	str	r2, [sp, #28]
 8011cfc:	e014      	b.n	8011d28 <_svfiprintf_r+0x114>
 8011cfe:	eba0 0308 	sub.w	r3, r0, r8
 8011d02:	fa09 f303 	lsl.w	r3, r9, r3
 8011d06:	4313      	orrs	r3, r2
 8011d08:	9304      	str	r3, [sp, #16]
 8011d0a:	46a2      	mov	sl, r4
 8011d0c:	e7d2      	b.n	8011cb4 <_svfiprintf_r+0xa0>
 8011d0e:	9b03      	ldr	r3, [sp, #12]
 8011d10:	1d19      	adds	r1, r3, #4
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	9103      	str	r1, [sp, #12]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	bfbb      	ittet	lt
 8011d1a:	425b      	neglt	r3, r3
 8011d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8011d20:	9307      	strge	r3, [sp, #28]
 8011d22:	9307      	strlt	r3, [sp, #28]
 8011d24:	bfb8      	it	lt
 8011d26:	9204      	strlt	r2, [sp, #16]
 8011d28:	7823      	ldrb	r3, [r4, #0]
 8011d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d2c:	d10a      	bne.n	8011d44 <_svfiprintf_r+0x130>
 8011d2e:	7863      	ldrb	r3, [r4, #1]
 8011d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d32:	d132      	bne.n	8011d9a <_svfiprintf_r+0x186>
 8011d34:	9b03      	ldr	r3, [sp, #12]
 8011d36:	1d1a      	adds	r2, r3, #4
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	9203      	str	r2, [sp, #12]
 8011d3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d40:	3402      	adds	r4, #2
 8011d42:	9305      	str	r3, [sp, #20]
 8011d44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e08 <_svfiprintf_r+0x1f4>
 8011d48:	7821      	ldrb	r1, [r4, #0]
 8011d4a:	2203      	movs	r2, #3
 8011d4c:	4650      	mov	r0, sl
 8011d4e:	f7ee fa5f 	bl	8000210 <memchr>
 8011d52:	b138      	cbz	r0, 8011d64 <_svfiprintf_r+0x150>
 8011d54:	9b04      	ldr	r3, [sp, #16]
 8011d56:	eba0 000a 	sub.w	r0, r0, sl
 8011d5a:	2240      	movs	r2, #64	@ 0x40
 8011d5c:	4082      	lsls	r2, r0
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	3401      	adds	r4, #1
 8011d62:	9304      	str	r3, [sp, #16]
 8011d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d68:	4824      	ldr	r0, [pc, #144]	@ (8011dfc <_svfiprintf_r+0x1e8>)
 8011d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d6e:	2206      	movs	r2, #6
 8011d70:	f7ee fa4e 	bl	8000210 <memchr>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d036      	beq.n	8011de6 <_svfiprintf_r+0x1d2>
 8011d78:	4b21      	ldr	r3, [pc, #132]	@ (8011e00 <_svfiprintf_r+0x1ec>)
 8011d7a:	bb1b      	cbnz	r3, 8011dc4 <_svfiprintf_r+0x1b0>
 8011d7c:	9b03      	ldr	r3, [sp, #12]
 8011d7e:	3307      	adds	r3, #7
 8011d80:	f023 0307 	bic.w	r3, r3, #7
 8011d84:	3308      	adds	r3, #8
 8011d86:	9303      	str	r3, [sp, #12]
 8011d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d8a:	4433      	add	r3, r6
 8011d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d8e:	e76a      	b.n	8011c66 <_svfiprintf_r+0x52>
 8011d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d94:	460c      	mov	r4, r1
 8011d96:	2001      	movs	r0, #1
 8011d98:	e7a8      	b.n	8011cec <_svfiprintf_r+0xd8>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	3401      	adds	r4, #1
 8011d9e:	9305      	str	r3, [sp, #20]
 8011da0:	4619      	mov	r1, r3
 8011da2:	f04f 0c0a 	mov.w	ip, #10
 8011da6:	4620      	mov	r0, r4
 8011da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dac:	3a30      	subs	r2, #48	@ 0x30
 8011dae:	2a09      	cmp	r2, #9
 8011db0:	d903      	bls.n	8011dba <_svfiprintf_r+0x1a6>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d0c6      	beq.n	8011d44 <_svfiprintf_r+0x130>
 8011db6:	9105      	str	r1, [sp, #20]
 8011db8:	e7c4      	b.n	8011d44 <_svfiprintf_r+0x130>
 8011dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e7f0      	b.n	8011da6 <_svfiprintf_r+0x192>
 8011dc4:	ab03      	add	r3, sp, #12
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	462a      	mov	r2, r5
 8011dca:	4b0e      	ldr	r3, [pc, #56]	@ (8011e04 <_svfiprintf_r+0x1f0>)
 8011dcc:	a904      	add	r1, sp, #16
 8011dce:	4638      	mov	r0, r7
 8011dd0:	f3af 8000 	nop.w
 8011dd4:	1c42      	adds	r2, r0, #1
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	d1d6      	bne.n	8011d88 <_svfiprintf_r+0x174>
 8011dda:	89ab      	ldrh	r3, [r5, #12]
 8011ddc:	065b      	lsls	r3, r3, #25
 8011dde:	f53f af2d 	bmi.w	8011c3c <_svfiprintf_r+0x28>
 8011de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011de4:	e72c      	b.n	8011c40 <_svfiprintf_r+0x2c>
 8011de6:	ab03      	add	r3, sp, #12
 8011de8:	9300      	str	r3, [sp, #0]
 8011dea:	462a      	mov	r2, r5
 8011dec:	4b05      	ldr	r3, [pc, #20]	@ (8011e04 <_svfiprintf_r+0x1f0>)
 8011dee:	a904      	add	r1, sp, #16
 8011df0:	4638      	mov	r0, r7
 8011df2:	f000 f879 	bl	8011ee8 <_printf_i>
 8011df6:	e7ed      	b.n	8011dd4 <_svfiprintf_r+0x1c0>
 8011df8:	0801325c 	.word	0x0801325c
 8011dfc:	08013266 	.word	0x08013266
 8011e00:	00000000 	.word	0x00000000
 8011e04:	08011b5d 	.word	0x08011b5d
 8011e08:	08013262 	.word	0x08013262

08011e0c <_printf_common>:
 8011e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e10:	4616      	mov	r6, r2
 8011e12:	4698      	mov	r8, r3
 8011e14:	688a      	ldr	r2, [r1, #8]
 8011e16:	690b      	ldr	r3, [r1, #16]
 8011e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	bfb8      	it	lt
 8011e20:	4613      	movlt	r3, r2
 8011e22:	6033      	str	r3, [r6, #0]
 8011e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e28:	4607      	mov	r7, r0
 8011e2a:	460c      	mov	r4, r1
 8011e2c:	b10a      	cbz	r2, 8011e32 <_printf_common+0x26>
 8011e2e:	3301      	adds	r3, #1
 8011e30:	6033      	str	r3, [r6, #0]
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	0699      	lsls	r1, r3, #26
 8011e36:	bf42      	ittt	mi
 8011e38:	6833      	ldrmi	r3, [r6, #0]
 8011e3a:	3302      	addmi	r3, #2
 8011e3c:	6033      	strmi	r3, [r6, #0]
 8011e3e:	6825      	ldr	r5, [r4, #0]
 8011e40:	f015 0506 	ands.w	r5, r5, #6
 8011e44:	d106      	bne.n	8011e54 <_printf_common+0x48>
 8011e46:	f104 0a19 	add.w	sl, r4, #25
 8011e4a:	68e3      	ldr	r3, [r4, #12]
 8011e4c:	6832      	ldr	r2, [r6, #0]
 8011e4e:	1a9b      	subs	r3, r3, r2
 8011e50:	42ab      	cmp	r3, r5
 8011e52:	dc26      	bgt.n	8011ea2 <_printf_common+0x96>
 8011e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e58:	6822      	ldr	r2, [r4, #0]
 8011e5a:	3b00      	subs	r3, #0
 8011e5c:	bf18      	it	ne
 8011e5e:	2301      	movne	r3, #1
 8011e60:	0692      	lsls	r2, r2, #26
 8011e62:	d42b      	bmi.n	8011ebc <_printf_common+0xb0>
 8011e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e68:	4641      	mov	r1, r8
 8011e6a:	4638      	mov	r0, r7
 8011e6c:	47c8      	blx	r9
 8011e6e:	3001      	adds	r0, #1
 8011e70:	d01e      	beq.n	8011eb0 <_printf_common+0xa4>
 8011e72:	6823      	ldr	r3, [r4, #0]
 8011e74:	6922      	ldr	r2, [r4, #16]
 8011e76:	f003 0306 	and.w	r3, r3, #6
 8011e7a:	2b04      	cmp	r3, #4
 8011e7c:	bf02      	ittt	eq
 8011e7e:	68e5      	ldreq	r5, [r4, #12]
 8011e80:	6833      	ldreq	r3, [r6, #0]
 8011e82:	1aed      	subeq	r5, r5, r3
 8011e84:	68a3      	ldr	r3, [r4, #8]
 8011e86:	bf0c      	ite	eq
 8011e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e8c:	2500      	movne	r5, #0
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	bfc4      	itt	gt
 8011e92:	1a9b      	subgt	r3, r3, r2
 8011e94:	18ed      	addgt	r5, r5, r3
 8011e96:	2600      	movs	r6, #0
 8011e98:	341a      	adds	r4, #26
 8011e9a:	42b5      	cmp	r5, r6
 8011e9c:	d11a      	bne.n	8011ed4 <_printf_common+0xc8>
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	e008      	b.n	8011eb4 <_printf_common+0xa8>
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	4641      	mov	r1, r8
 8011ea8:	4638      	mov	r0, r7
 8011eaa:	47c8      	blx	r9
 8011eac:	3001      	adds	r0, #1
 8011eae:	d103      	bne.n	8011eb8 <_printf_common+0xac>
 8011eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eb8:	3501      	adds	r5, #1
 8011eba:	e7c6      	b.n	8011e4a <_printf_common+0x3e>
 8011ebc:	18e1      	adds	r1, r4, r3
 8011ebe:	1c5a      	adds	r2, r3, #1
 8011ec0:	2030      	movs	r0, #48	@ 0x30
 8011ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011ec6:	4422      	add	r2, r4
 8011ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011ed0:	3302      	adds	r3, #2
 8011ed2:	e7c7      	b.n	8011e64 <_printf_common+0x58>
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	4641      	mov	r1, r8
 8011eda:	4638      	mov	r0, r7
 8011edc:	47c8      	blx	r9
 8011ede:	3001      	adds	r0, #1
 8011ee0:	d0e6      	beq.n	8011eb0 <_printf_common+0xa4>
 8011ee2:	3601      	adds	r6, #1
 8011ee4:	e7d9      	b.n	8011e9a <_printf_common+0x8e>
	...

08011ee8 <_printf_i>:
 8011ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eec:	7e0f      	ldrb	r7, [r1, #24]
 8011eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011ef0:	2f78      	cmp	r7, #120	@ 0x78
 8011ef2:	4691      	mov	r9, r2
 8011ef4:	4680      	mov	r8, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	469a      	mov	sl, r3
 8011efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011efe:	d807      	bhi.n	8011f10 <_printf_i+0x28>
 8011f00:	2f62      	cmp	r7, #98	@ 0x62
 8011f02:	d80a      	bhi.n	8011f1a <_printf_i+0x32>
 8011f04:	2f00      	cmp	r7, #0
 8011f06:	f000 80d2 	beq.w	80120ae <_printf_i+0x1c6>
 8011f0a:	2f58      	cmp	r7, #88	@ 0x58
 8011f0c:	f000 80b9 	beq.w	8012082 <_printf_i+0x19a>
 8011f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f18:	e03a      	b.n	8011f90 <_printf_i+0xa8>
 8011f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f1e:	2b15      	cmp	r3, #21
 8011f20:	d8f6      	bhi.n	8011f10 <_printf_i+0x28>
 8011f22:	a101      	add	r1, pc, #4	@ (adr r1, 8011f28 <_printf_i+0x40>)
 8011f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f28:	08011f81 	.word	0x08011f81
 8011f2c:	08011f95 	.word	0x08011f95
 8011f30:	08011f11 	.word	0x08011f11
 8011f34:	08011f11 	.word	0x08011f11
 8011f38:	08011f11 	.word	0x08011f11
 8011f3c:	08011f11 	.word	0x08011f11
 8011f40:	08011f95 	.word	0x08011f95
 8011f44:	08011f11 	.word	0x08011f11
 8011f48:	08011f11 	.word	0x08011f11
 8011f4c:	08011f11 	.word	0x08011f11
 8011f50:	08011f11 	.word	0x08011f11
 8011f54:	08012095 	.word	0x08012095
 8011f58:	08011fbf 	.word	0x08011fbf
 8011f5c:	0801204f 	.word	0x0801204f
 8011f60:	08011f11 	.word	0x08011f11
 8011f64:	08011f11 	.word	0x08011f11
 8011f68:	080120b7 	.word	0x080120b7
 8011f6c:	08011f11 	.word	0x08011f11
 8011f70:	08011fbf 	.word	0x08011fbf
 8011f74:	08011f11 	.word	0x08011f11
 8011f78:	08011f11 	.word	0x08011f11
 8011f7c:	08012057 	.word	0x08012057
 8011f80:	6833      	ldr	r3, [r6, #0]
 8011f82:	1d1a      	adds	r2, r3, #4
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	6032      	str	r2, [r6, #0]
 8011f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011f90:	2301      	movs	r3, #1
 8011f92:	e09d      	b.n	80120d0 <_printf_i+0x1e8>
 8011f94:	6833      	ldr	r3, [r6, #0]
 8011f96:	6820      	ldr	r0, [r4, #0]
 8011f98:	1d19      	adds	r1, r3, #4
 8011f9a:	6031      	str	r1, [r6, #0]
 8011f9c:	0606      	lsls	r6, r0, #24
 8011f9e:	d501      	bpl.n	8011fa4 <_printf_i+0xbc>
 8011fa0:	681d      	ldr	r5, [r3, #0]
 8011fa2:	e003      	b.n	8011fac <_printf_i+0xc4>
 8011fa4:	0645      	lsls	r5, r0, #25
 8011fa6:	d5fb      	bpl.n	8011fa0 <_printf_i+0xb8>
 8011fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	da03      	bge.n	8011fb8 <_printf_i+0xd0>
 8011fb0:	232d      	movs	r3, #45	@ 0x2d
 8011fb2:	426d      	negs	r5, r5
 8011fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fb8:	4859      	ldr	r0, [pc, #356]	@ (8012120 <_printf_i+0x238>)
 8011fba:	230a      	movs	r3, #10
 8011fbc:	e011      	b.n	8011fe2 <_printf_i+0xfa>
 8011fbe:	6821      	ldr	r1, [r4, #0]
 8011fc0:	6833      	ldr	r3, [r6, #0]
 8011fc2:	0608      	lsls	r0, r1, #24
 8011fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011fc8:	d402      	bmi.n	8011fd0 <_printf_i+0xe8>
 8011fca:	0649      	lsls	r1, r1, #25
 8011fcc:	bf48      	it	mi
 8011fce:	b2ad      	uxthmi	r5, r5
 8011fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011fd2:	4853      	ldr	r0, [pc, #332]	@ (8012120 <_printf_i+0x238>)
 8011fd4:	6033      	str	r3, [r6, #0]
 8011fd6:	bf14      	ite	ne
 8011fd8:	230a      	movne	r3, #10
 8011fda:	2308      	moveq	r3, #8
 8011fdc:	2100      	movs	r1, #0
 8011fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011fe2:	6866      	ldr	r6, [r4, #4]
 8011fe4:	60a6      	str	r6, [r4, #8]
 8011fe6:	2e00      	cmp	r6, #0
 8011fe8:	bfa2      	ittt	ge
 8011fea:	6821      	ldrge	r1, [r4, #0]
 8011fec:	f021 0104 	bicge.w	r1, r1, #4
 8011ff0:	6021      	strge	r1, [r4, #0]
 8011ff2:	b90d      	cbnz	r5, 8011ff8 <_printf_i+0x110>
 8011ff4:	2e00      	cmp	r6, #0
 8011ff6:	d04b      	beq.n	8012090 <_printf_i+0x1a8>
 8011ff8:	4616      	mov	r6, r2
 8011ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8011ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8012002:	5dc7      	ldrb	r7, [r0, r7]
 8012004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012008:	462f      	mov	r7, r5
 801200a:	42bb      	cmp	r3, r7
 801200c:	460d      	mov	r5, r1
 801200e:	d9f4      	bls.n	8011ffa <_printf_i+0x112>
 8012010:	2b08      	cmp	r3, #8
 8012012:	d10b      	bne.n	801202c <_printf_i+0x144>
 8012014:	6823      	ldr	r3, [r4, #0]
 8012016:	07df      	lsls	r7, r3, #31
 8012018:	d508      	bpl.n	801202c <_printf_i+0x144>
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	6861      	ldr	r1, [r4, #4]
 801201e:	4299      	cmp	r1, r3
 8012020:	bfde      	ittt	le
 8012022:	2330      	movle	r3, #48	@ 0x30
 8012024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012028:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801202c:	1b92      	subs	r2, r2, r6
 801202e:	6122      	str	r2, [r4, #16]
 8012030:	f8cd a000 	str.w	sl, [sp]
 8012034:	464b      	mov	r3, r9
 8012036:	aa03      	add	r2, sp, #12
 8012038:	4621      	mov	r1, r4
 801203a:	4640      	mov	r0, r8
 801203c:	f7ff fee6 	bl	8011e0c <_printf_common>
 8012040:	3001      	adds	r0, #1
 8012042:	d14a      	bne.n	80120da <_printf_i+0x1f2>
 8012044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012048:	b004      	add	sp, #16
 801204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	f043 0320 	orr.w	r3, r3, #32
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	4833      	ldr	r0, [pc, #204]	@ (8012124 <_printf_i+0x23c>)
 8012058:	2778      	movs	r7, #120	@ 0x78
 801205a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801205e:	6823      	ldr	r3, [r4, #0]
 8012060:	6831      	ldr	r1, [r6, #0]
 8012062:	061f      	lsls	r7, r3, #24
 8012064:	f851 5b04 	ldr.w	r5, [r1], #4
 8012068:	d402      	bmi.n	8012070 <_printf_i+0x188>
 801206a:	065f      	lsls	r7, r3, #25
 801206c:	bf48      	it	mi
 801206e:	b2ad      	uxthmi	r5, r5
 8012070:	6031      	str	r1, [r6, #0]
 8012072:	07d9      	lsls	r1, r3, #31
 8012074:	bf44      	itt	mi
 8012076:	f043 0320 	orrmi.w	r3, r3, #32
 801207a:	6023      	strmi	r3, [r4, #0]
 801207c:	b11d      	cbz	r5, 8012086 <_printf_i+0x19e>
 801207e:	2310      	movs	r3, #16
 8012080:	e7ac      	b.n	8011fdc <_printf_i+0xf4>
 8012082:	4827      	ldr	r0, [pc, #156]	@ (8012120 <_printf_i+0x238>)
 8012084:	e7e9      	b.n	801205a <_printf_i+0x172>
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	f023 0320 	bic.w	r3, r3, #32
 801208c:	6023      	str	r3, [r4, #0]
 801208e:	e7f6      	b.n	801207e <_printf_i+0x196>
 8012090:	4616      	mov	r6, r2
 8012092:	e7bd      	b.n	8012010 <_printf_i+0x128>
 8012094:	6833      	ldr	r3, [r6, #0]
 8012096:	6825      	ldr	r5, [r4, #0]
 8012098:	6961      	ldr	r1, [r4, #20]
 801209a:	1d18      	adds	r0, r3, #4
 801209c:	6030      	str	r0, [r6, #0]
 801209e:	062e      	lsls	r6, r5, #24
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	d501      	bpl.n	80120a8 <_printf_i+0x1c0>
 80120a4:	6019      	str	r1, [r3, #0]
 80120a6:	e002      	b.n	80120ae <_printf_i+0x1c6>
 80120a8:	0668      	lsls	r0, r5, #25
 80120aa:	d5fb      	bpl.n	80120a4 <_printf_i+0x1bc>
 80120ac:	8019      	strh	r1, [r3, #0]
 80120ae:	2300      	movs	r3, #0
 80120b0:	6123      	str	r3, [r4, #16]
 80120b2:	4616      	mov	r6, r2
 80120b4:	e7bc      	b.n	8012030 <_printf_i+0x148>
 80120b6:	6833      	ldr	r3, [r6, #0]
 80120b8:	1d1a      	adds	r2, r3, #4
 80120ba:	6032      	str	r2, [r6, #0]
 80120bc:	681e      	ldr	r6, [r3, #0]
 80120be:	6862      	ldr	r2, [r4, #4]
 80120c0:	2100      	movs	r1, #0
 80120c2:	4630      	mov	r0, r6
 80120c4:	f7ee f8a4 	bl	8000210 <memchr>
 80120c8:	b108      	cbz	r0, 80120ce <_printf_i+0x1e6>
 80120ca:	1b80      	subs	r0, r0, r6
 80120cc:	6060      	str	r0, [r4, #4]
 80120ce:	6863      	ldr	r3, [r4, #4]
 80120d0:	6123      	str	r3, [r4, #16]
 80120d2:	2300      	movs	r3, #0
 80120d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120d8:	e7aa      	b.n	8012030 <_printf_i+0x148>
 80120da:	6923      	ldr	r3, [r4, #16]
 80120dc:	4632      	mov	r2, r6
 80120de:	4649      	mov	r1, r9
 80120e0:	4640      	mov	r0, r8
 80120e2:	47d0      	blx	sl
 80120e4:	3001      	adds	r0, #1
 80120e6:	d0ad      	beq.n	8012044 <_printf_i+0x15c>
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	079b      	lsls	r3, r3, #30
 80120ec:	d413      	bmi.n	8012116 <_printf_i+0x22e>
 80120ee:	68e0      	ldr	r0, [r4, #12]
 80120f0:	9b03      	ldr	r3, [sp, #12]
 80120f2:	4298      	cmp	r0, r3
 80120f4:	bfb8      	it	lt
 80120f6:	4618      	movlt	r0, r3
 80120f8:	e7a6      	b.n	8012048 <_printf_i+0x160>
 80120fa:	2301      	movs	r3, #1
 80120fc:	4632      	mov	r2, r6
 80120fe:	4649      	mov	r1, r9
 8012100:	4640      	mov	r0, r8
 8012102:	47d0      	blx	sl
 8012104:	3001      	adds	r0, #1
 8012106:	d09d      	beq.n	8012044 <_printf_i+0x15c>
 8012108:	3501      	adds	r5, #1
 801210a:	68e3      	ldr	r3, [r4, #12]
 801210c:	9903      	ldr	r1, [sp, #12]
 801210e:	1a5b      	subs	r3, r3, r1
 8012110:	42ab      	cmp	r3, r5
 8012112:	dcf2      	bgt.n	80120fa <_printf_i+0x212>
 8012114:	e7eb      	b.n	80120ee <_printf_i+0x206>
 8012116:	2500      	movs	r5, #0
 8012118:	f104 0619 	add.w	r6, r4, #25
 801211c:	e7f5      	b.n	801210a <_printf_i+0x222>
 801211e:	bf00      	nop
 8012120:	0801326d 	.word	0x0801326d
 8012124:	0801327e 	.word	0x0801327e

08012128 <__sflush_r>:
 8012128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012130:	0716      	lsls	r6, r2, #28
 8012132:	4605      	mov	r5, r0
 8012134:	460c      	mov	r4, r1
 8012136:	d454      	bmi.n	80121e2 <__sflush_r+0xba>
 8012138:	684b      	ldr	r3, [r1, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	dc02      	bgt.n	8012144 <__sflush_r+0x1c>
 801213e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012140:	2b00      	cmp	r3, #0
 8012142:	dd48      	ble.n	80121d6 <__sflush_r+0xae>
 8012144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012146:	2e00      	cmp	r6, #0
 8012148:	d045      	beq.n	80121d6 <__sflush_r+0xae>
 801214a:	2300      	movs	r3, #0
 801214c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012150:	682f      	ldr	r7, [r5, #0]
 8012152:	6a21      	ldr	r1, [r4, #32]
 8012154:	602b      	str	r3, [r5, #0]
 8012156:	d030      	beq.n	80121ba <__sflush_r+0x92>
 8012158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801215a:	89a3      	ldrh	r3, [r4, #12]
 801215c:	0759      	lsls	r1, r3, #29
 801215e:	d505      	bpl.n	801216c <__sflush_r+0x44>
 8012160:	6863      	ldr	r3, [r4, #4]
 8012162:	1ad2      	subs	r2, r2, r3
 8012164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012166:	b10b      	cbz	r3, 801216c <__sflush_r+0x44>
 8012168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801216a:	1ad2      	subs	r2, r2, r3
 801216c:	2300      	movs	r3, #0
 801216e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012170:	6a21      	ldr	r1, [r4, #32]
 8012172:	4628      	mov	r0, r5
 8012174:	47b0      	blx	r6
 8012176:	1c43      	adds	r3, r0, #1
 8012178:	89a3      	ldrh	r3, [r4, #12]
 801217a:	d106      	bne.n	801218a <__sflush_r+0x62>
 801217c:	6829      	ldr	r1, [r5, #0]
 801217e:	291d      	cmp	r1, #29
 8012180:	d82b      	bhi.n	80121da <__sflush_r+0xb2>
 8012182:	4a2a      	ldr	r2, [pc, #168]	@ (801222c <__sflush_r+0x104>)
 8012184:	410a      	asrs	r2, r1
 8012186:	07d6      	lsls	r6, r2, #31
 8012188:	d427      	bmi.n	80121da <__sflush_r+0xb2>
 801218a:	2200      	movs	r2, #0
 801218c:	6062      	str	r2, [r4, #4]
 801218e:	04d9      	lsls	r1, r3, #19
 8012190:	6922      	ldr	r2, [r4, #16]
 8012192:	6022      	str	r2, [r4, #0]
 8012194:	d504      	bpl.n	80121a0 <__sflush_r+0x78>
 8012196:	1c42      	adds	r2, r0, #1
 8012198:	d101      	bne.n	801219e <__sflush_r+0x76>
 801219a:	682b      	ldr	r3, [r5, #0]
 801219c:	b903      	cbnz	r3, 80121a0 <__sflush_r+0x78>
 801219e:	6560      	str	r0, [r4, #84]	@ 0x54
 80121a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121a2:	602f      	str	r7, [r5, #0]
 80121a4:	b1b9      	cbz	r1, 80121d6 <__sflush_r+0xae>
 80121a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121aa:	4299      	cmp	r1, r3
 80121ac:	d002      	beq.n	80121b4 <__sflush_r+0x8c>
 80121ae:	4628      	mov	r0, r5
 80121b0:	f7ff fc82 	bl	8011ab8 <_free_r>
 80121b4:	2300      	movs	r3, #0
 80121b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80121b8:	e00d      	b.n	80121d6 <__sflush_r+0xae>
 80121ba:	2301      	movs	r3, #1
 80121bc:	4628      	mov	r0, r5
 80121be:	47b0      	blx	r6
 80121c0:	4602      	mov	r2, r0
 80121c2:	1c50      	adds	r0, r2, #1
 80121c4:	d1c9      	bne.n	801215a <__sflush_r+0x32>
 80121c6:	682b      	ldr	r3, [r5, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d0c6      	beq.n	801215a <__sflush_r+0x32>
 80121cc:	2b1d      	cmp	r3, #29
 80121ce:	d001      	beq.n	80121d4 <__sflush_r+0xac>
 80121d0:	2b16      	cmp	r3, #22
 80121d2:	d11e      	bne.n	8012212 <__sflush_r+0xea>
 80121d4:	602f      	str	r7, [r5, #0]
 80121d6:	2000      	movs	r0, #0
 80121d8:	e022      	b.n	8012220 <__sflush_r+0xf8>
 80121da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121de:	b21b      	sxth	r3, r3
 80121e0:	e01b      	b.n	801221a <__sflush_r+0xf2>
 80121e2:	690f      	ldr	r7, [r1, #16]
 80121e4:	2f00      	cmp	r7, #0
 80121e6:	d0f6      	beq.n	80121d6 <__sflush_r+0xae>
 80121e8:	0793      	lsls	r3, r2, #30
 80121ea:	680e      	ldr	r6, [r1, #0]
 80121ec:	bf08      	it	eq
 80121ee:	694b      	ldreq	r3, [r1, #20]
 80121f0:	600f      	str	r7, [r1, #0]
 80121f2:	bf18      	it	ne
 80121f4:	2300      	movne	r3, #0
 80121f6:	eba6 0807 	sub.w	r8, r6, r7
 80121fa:	608b      	str	r3, [r1, #8]
 80121fc:	f1b8 0f00 	cmp.w	r8, #0
 8012200:	dde9      	ble.n	80121d6 <__sflush_r+0xae>
 8012202:	6a21      	ldr	r1, [r4, #32]
 8012204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012206:	4643      	mov	r3, r8
 8012208:	463a      	mov	r2, r7
 801220a:	4628      	mov	r0, r5
 801220c:	47b0      	blx	r6
 801220e:	2800      	cmp	r0, #0
 8012210:	dc08      	bgt.n	8012224 <__sflush_r+0xfc>
 8012212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801221a:	81a3      	strh	r3, [r4, #12]
 801221c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012224:	4407      	add	r7, r0
 8012226:	eba8 0800 	sub.w	r8, r8, r0
 801222a:	e7e7      	b.n	80121fc <__sflush_r+0xd4>
 801222c:	dfbffffe 	.word	0xdfbffffe

08012230 <_fflush_r>:
 8012230:	b538      	push	{r3, r4, r5, lr}
 8012232:	690b      	ldr	r3, [r1, #16]
 8012234:	4605      	mov	r5, r0
 8012236:	460c      	mov	r4, r1
 8012238:	b913      	cbnz	r3, 8012240 <_fflush_r+0x10>
 801223a:	2500      	movs	r5, #0
 801223c:	4628      	mov	r0, r5
 801223e:	bd38      	pop	{r3, r4, r5, pc}
 8012240:	b118      	cbz	r0, 801224a <_fflush_r+0x1a>
 8012242:	6a03      	ldr	r3, [r0, #32]
 8012244:	b90b      	cbnz	r3, 801224a <_fflush_r+0x1a>
 8012246:	f7ff fa4f 	bl	80116e8 <__sinit>
 801224a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d0f3      	beq.n	801223a <_fflush_r+0xa>
 8012252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012254:	07d0      	lsls	r0, r2, #31
 8012256:	d404      	bmi.n	8012262 <_fflush_r+0x32>
 8012258:	0599      	lsls	r1, r3, #22
 801225a:	d402      	bmi.n	8012262 <_fflush_r+0x32>
 801225c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801225e:	f7ff fbe8 	bl	8011a32 <__retarget_lock_acquire_recursive>
 8012262:	4628      	mov	r0, r5
 8012264:	4621      	mov	r1, r4
 8012266:	f7ff ff5f 	bl	8012128 <__sflush_r>
 801226a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801226c:	07da      	lsls	r2, r3, #31
 801226e:	4605      	mov	r5, r0
 8012270:	d4e4      	bmi.n	801223c <_fflush_r+0xc>
 8012272:	89a3      	ldrh	r3, [r4, #12]
 8012274:	059b      	lsls	r3, r3, #22
 8012276:	d4e1      	bmi.n	801223c <_fflush_r+0xc>
 8012278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801227a:	f7ff fbdb 	bl	8011a34 <__retarget_lock_release_recursive>
 801227e:	e7dd      	b.n	801223c <_fflush_r+0xc>

08012280 <fiprintf>:
 8012280:	b40e      	push	{r1, r2, r3}
 8012282:	b503      	push	{r0, r1, lr}
 8012284:	4601      	mov	r1, r0
 8012286:	ab03      	add	r3, sp, #12
 8012288:	4805      	ldr	r0, [pc, #20]	@ (80122a0 <fiprintf+0x20>)
 801228a:	f853 2b04 	ldr.w	r2, [r3], #4
 801228e:	6800      	ldr	r0, [r0, #0]
 8012290:	9301      	str	r3, [sp, #4]
 8012292:	f000 f851 	bl	8012338 <_vfiprintf_r>
 8012296:	b002      	add	sp, #8
 8012298:	f85d eb04 	ldr.w	lr, [sp], #4
 801229c:	b003      	add	sp, #12
 801229e:	4770      	bx	lr
 80122a0:	2000007c 	.word	0x2000007c

080122a4 <memmove>:
 80122a4:	4288      	cmp	r0, r1
 80122a6:	b510      	push	{r4, lr}
 80122a8:	eb01 0402 	add.w	r4, r1, r2
 80122ac:	d902      	bls.n	80122b4 <memmove+0x10>
 80122ae:	4284      	cmp	r4, r0
 80122b0:	4623      	mov	r3, r4
 80122b2:	d807      	bhi.n	80122c4 <memmove+0x20>
 80122b4:	1e43      	subs	r3, r0, #1
 80122b6:	42a1      	cmp	r1, r4
 80122b8:	d008      	beq.n	80122cc <memmove+0x28>
 80122ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122c2:	e7f8      	b.n	80122b6 <memmove+0x12>
 80122c4:	4402      	add	r2, r0
 80122c6:	4601      	mov	r1, r0
 80122c8:	428a      	cmp	r2, r1
 80122ca:	d100      	bne.n	80122ce <memmove+0x2a>
 80122cc:	bd10      	pop	{r4, pc}
 80122ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122d6:	e7f7      	b.n	80122c8 <memmove+0x24>

080122d8 <abort>:
 80122d8:	b508      	push	{r3, lr}
 80122da:	2006      	movs	r0, #6
 80122dc:	f000 fa00 	bl	80126e0 <raise>
 80122e0:	2001      	movs	r0, #1
 80122e2:	f7ef fd03 	bl	8001cec <_exit>

080122e6 <__sfputc_r>:
 80122e6:	6893      	ldr	r3, [r2, #8]
 80122e8:	3b01      	subs	r3, #1
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	b410      	push	{r4}
 80122ee:	6093      	str	r3, [r2, #8]
 80122f0:	da08      	bge.n	8012304 <__sfputc_r+0x1e>
 80122f2:	6994      	ldr	r4, [r2, #24]
 80122f4:	42a3      	cmp	r3, r4
 80122f6:	db01      	blt.n	80122fc <__sfputc_r+0x16>
 80122f8:	290a      	cmp	r1, #10
 80122fa:	d103      	bne.n	8012304 <__sfputc_r+0x1e>
 80122fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012300:	f000 b932 	b.w	8012568 <__swbuf_r>
 8012304:	6813      	ldr	r3, [r2, #0]
 8012306:	1c58      	adds	r0, r3, #1
 8012308:	6010      	str	r0, [r2, #0]
 801230a:	7019      	strb	r1, [r3, #0]
 801230c:	4608      	mov	r0, r1
 801230e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012312:	4770      	bx	lr

08012314 <__sfputs_r>:
 8012314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012316:	4606      	mov	r6, r0
 8012318:	460f      	mov	r7, r1
 801231a:	4614      	mov	r4, r2
 801231c:	18d5      	adds	r5, r2, r3
 801231e:	42ac      	cmp	r4, r5
 8012320:	d101      	bne.n	8012326 <__sfputs_r+0x12>
 8012322:	2000      	movs	r0, #0
 8012324:	e007      	b.n	8012336 <__sfputs_r+0x22>
 8012326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801232a:	463a      	mov	r2, r7
 801232c:	4630      	mov	r0, r6
 801232e:	f7ff ffda 	bl	80122e6 <__sfputc_r>
 8012332:	1c43      	adds	r3, r0, #1
 8012334:	d1f3      	bne.n	801231e <__sfputs_r+0xa>
 8012336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012338 <_vfiprintf_r>:
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	460d      	mov	r5, r1
 801233e:	b09d      	sub	sp, #116	@ 0x74
 8012340:	4614      	mov	r4, r2
 8012342:	4698      	mov	r8, r3
 8012344:	4606      	mov	r6, r0
 8012346:	b118      	cbz	r0, 8012350 <_vfiprintf_r+0x18>
 8012348:	6a03      	ldr	r3, [r0, #32]
 801234a:	b90b      	cbnz	r3, 8012350 <_vfiprintf_r+0x18>
 801234c:	f7ff f9cc 	bl	80116e8 <__sinit>
 8012350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012352:	07d9      	lsls	r1, r3, #31
 8012354:	d405      	bmi.n	8012362 <_vfiprintf_r+0x2a>
 8012356:	89ab      	ldrh	r3, [r5, #12]
 8012358:	059a      	lsls	r2, r3, #22
 801235a:	d402      	bmi.n	8012362 <_vfiprintf_r+0x2a>
 801235c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801235e:	f7ff fb68 	bl	8011a32 <__retarget_lock_acquire_recursive>
 8012362:	89ab      	ldrh	r3, [r5, #12]
 8012364:	071b      	lsls	r3, r3, #28
 8012366:	d501      	bpl.n	801236c <_vfiprintf_r+0x34>
 8012368:	692b      	ldr	r3, [r5, #16]
 801236a:	b99b      	cbnz	r3, 8012394 <_vfiprintf_r+0x5c>
 801236c:	4629      	mov	r1, r5
 801236e:	4630      	mov	r0, r6
 8012370:	f000 f938 	bl	80125e4 <__swsetup_r>
 8012374:	b170      	cbz	r0, 8012394 <_vfiprintf_r+0x5c>
 8012376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012378:	07dc      	lsls	r4, r3, #31
 801237a:	d504      	bpl.n	8012386 <_vfiprintf_r+0x4e>
 801237c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012380:	b01d      	add	sp, #116	@ 0x74
 8012382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012386:	89ab      	ldrh	r3, [r5, #12]
 8012388:	0598      	lsls	r0, r3, #22
 801238a:	d4f7      	bmi.n	801237c <_vfiprintf_r+0x44>
 801238c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801238e:	f7ff fb51 	bl	8011a34 <__retarget_lock_release_recursive>
 8012392:	e7f3      	b.n	801237c <_vfiprintf_r+0x44>
 8012394:	2300      	movs	r3, #0
 8012396:	9309      	str	r3, [sp, #36]	@ 0x24
 8012398:	2320      	movs	r3, #32
 801239a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801239e:	f8cd 800c 	str.w	r8, [sp, #12]
 80123a2:	2330      	movs	r3, #48	@ 0x30
 80123a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012554 <_vfiprintf_r+0x21c>
 80123a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123ac:	f04f 0901 	mov.w	r9, #1
 80123b0:	4623      	mov	r3, r4
 80123b2:	469a      	mov	sl, r3
 80123b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123b8:	b10a      	cbz	r2, 80123be <_vfiprintf_r+0x86>
 80123ba:	2a25      	cmp	r2, #37	@ 0x25
 80123bc:	d1f9      	bne.n	80123b2 <_vfiprintf_r+0x7a>
 80123be:	ebba 0b04 	subs.w	fp, sl, r4
 80123c2:	d00b      	beq.n	80123dc <_vfiprintf_r+0xa4>
 80123c4:	465b      	mov	r3, fp
 80123c6:	4622      	mov	r2, r4
 80123c8:	4629      	mov	r1, r5
 80123ca:	4630      	mov	r0, r6
 80123cc:	f7ff ffa2 	bl	8012314 <__sfputs_r>
 80123d0:	3001      	adds	r0, #1
 80123d2:	f000 80a7 	beq.w	8012524 <_vfiprintf_r+0x1ec>
 80123d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123d8:	445a      	add	r2, fp
 80123da:	9209      	str	r2, [sp, #36]	@ 0x24
 80123dc:	f89a 3000 	ldrb.w	r3, [sl]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f000 809f 	beq.w	8012524 <_vfiprintf_r+0x1ec>
 80123e6:	2300      	movs	r3, #0
 80123e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123f0:	f10a 0a01 	add.w	sl, sl, #1
 80123f4:	9304      	str	r3, [sp, #16]
 80123f6:	9307      	str	r3, [sp, #28]
 80123f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80123fe:	4654      	mov	r4, sl
 8012400:	2205      	movs	r2, #5
 8012402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012406:	4853      	ldr	r0, [pc, #332]	@ (8012554 <_vfiprintf_r+0x21c>)
 8012408:	f7ed ff02 	bl	8000210 <memchr>
 801240c:	9a04      	ldr	r2, [sp, #16]
 801240e:	b9d8      	cbnz	r0, 8012448 <_vfiprintf_r+0x110>
 8012410:	06d1      	lsls	r1, r2, #27
 8012412:	bf44      	itt	mi
 8012414:	2320      	movmi	r3, #32
 8012416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801241a:	0713      	lsls	r3, r2, #28
 801241c:	bf44      	itt	mi
 801241e:	232b      	movmi	r3, #43	@ 0x2b
 8012420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012424:	f89a 3000 	ldrb.w	r3, [sl]
 8012428:	2b2a      	cmp	r3, #42	@ 0x2a
 801242a:	d015      	beq.n	8012458 <_vfiprintf_r+0x120>
 801242c:	9a07      	ldr	r2, [sp, #28]
 801242e:	4654      	mov	r4, sl
 8012430:	2000      	movs	r0, #0
 8012432:	f04f 0c0a 	mov.w	ip, #10
 8012436:	4621      	mov	r1, r4
 8012438:	f811 3b01 	ldrb.w	r3, [r1], #1
 801243c:	3b30      	subs	r3, #48	@ 0x30
 801243e:	2b09      	cmp	r3, #9
 8012440:	d94b      	bls.n	80124da <_vfiprintf_r+0x1a2>
 8012442:	b1b0      	cbz	r0, 8012472 <_vfiprintf_r+0x13a>
 8012444:	9207      	str	r2, [sp, #28]
 8012446:	e014      	b.n	8012472 <_vfiprintf_r+0x13a>
 8012448:	eba0 0308 	sub.w	r3, r0, r8
 801244c:	fa09 f303 	lsl.w	r3, r9, r3
 8012450:	4313      	orrs	r3, r2
 8012452:	9304      	str	r3, [sp, #16]
 8012454:	46a2      	mov	sl, r4
 8012456:	e7d2      	b.n	80123fe <_vfiprintf_r+0xc6>
 8012458:	9b03      	ldr	r3, [sp, #12]
 801245a:	1d19      	adds	r1, r3, #4
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	9103      	str	r1, [sp, #12]
 8012460:	2b00      	cmp	r3, #0
 8012462:	bfbb      	ittet	lt
 8012464:	425b      	neglt	r3, r3
 8012466:	f042 0202 	orrlt.w	r2, r2, #2
 801246a:	9307      	strge	r3, [sp, #28]
 801246c:	9307      	strlt	r3, [sp, #28]
 801246e:	bfb8      	it	lt
 8012470:	9204      	strlt	r2, [sp, #16]
 8012472:	7823      	ldrb	r3, [r4, #0]
 8012474:	2b2e      	cmp	r3, #46	@ 0x2e
 8012476:	d10a      	bne.n	801248e <_vfiprintf_r+0x156>
 8012478:	7863      	ldrb	r3, [r4, #1]
 801247a:	2b2a      	cmp	r3, #42	@ 0x2a
 801247c:	d132      	bne.n	80124e4 <_vfiprintf_r+0x1ac>
 801247e:	9b03      	ldr	r3, [sp, #12]
 8012480:	1d1a      	adds	r2, r3, #4
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	9203      	str	r2, [sp, #12]
 8012486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801248a:	3402      	adds	r4, #2
 801248c:	9305      	str	r3, [sp, #20]
 801248e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012564 <_vfiprintf_r+0x22c>
 8012492:	7821      	ldrb	r1, [r4, #0]
 8012494:	2203      	movs	r2, #3
 8012496:	4650      	mov	r0, sl
 8012498:	f7ed feba 	bl	8000210 <memchr>
 801249c:	b138      	cbz	r0, 80124ae <_vfiprintf_r+0x176>
 801249e:	9b04      	ldr	r3, [sp, #16]
 80124a0:	eba0 000a 	sub.w	r0, r0, sl
 80124a4:	2240      	movs	r2, #64	@ 0x40
 80124a6:	4082      	lsls	r2, r0
 80124a8:	4313      	orrs	r3, r2
 80124aa:	3401      	adds	r4, #1
 80124ac:	9304      	str	r3, [sp, #16]
 80124ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124b2:	4829      	ldr	r0, [pc, #164]	@ (8012558 <_vfiprintf_r+0x220>)
 80124b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124b8:	2206      	movs	r2, #6
 80124ba:	f7ed fea9 	bl	8000210 <memchr>
 80124be:	2800      	cmp	r0, #0
 80124c0:	d03f      	beq.n	8012542 <_vfiprintf_r+0x20a>
 80124c2:	4b26      	ldr	r3, [pc, #152]	@ (801255c <_vfiprintf_r+0x224>)
 80124c4:	bb1b      	cbnz	r3, 801250e <_vfiprintf_r+0x1d6>
 80124c6:	9b03      	ldr	r3, [sp, #12]
 80124c8:	3307      	adds	r3, #7
 80124ca:	f023 0307 	bic.w	r3, r3, #7
 80124ce:	3308      	adds	r3, #8
 80124d0:	9303      	str	r3, [sp, #12]
 80124d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124d4:	443b      	add	r3, r7
 80124d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124d8:	e76a      	b.n	80123b0 <_vfiprintf_r+0x78>
 80124da:	fb0c 3202 	mla	r2, ip, r2, r3
 80124de:	460c      	mov	r4, r1
 80124e0:	2001      	movs	r0, #1
 80124e2:	e7a8      	b.n	8012436 <_vfiprintf_r+0xfe>
 80124e4:	2300      	movs	r3, #0
 80124e6:	3401      	adds	r4, #1
 80124e8:	9305      	str	r3, [sp, #20]
 80124ea:	4619      	mov	r1, r3
 80124ec:	f04f 0c0a 	mov.w	ip, #10
 80124f0:	4620      	mov	r0, r4
 80124f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124f6:	3a30      	subs	r2, #48	@ 0x30
 80124f8:	2a09      	cmp	r2, #9
 80124fa:	d903      	bls.n	8012504 <_vfiprintf_r+0x1cc>
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d0c6      	beq.n	801248e <_vfiprintf_r+0x156>
 8012500:	9105      	str	r1, [sp, #20]
 8012502:	e7c4      	b.n	801248e <_vfiprintf_r+0x156>
 8012504:	fb0c 2101 	mla	r1, ip, r1, r2
 8012508:	4604      	mov	r4, r0
 801250a:	2301      	movs	r3, #1
 801250c:	e7f0      	b.n	80124f0 <_vfiprintf_r+0x1b8>
 801250e:	ab03      	add	r3, sp, #12
 8012510:	9300      	str	r3, [sp, #0]
 8012512:	462a      	mov	r2, r5
 8012514:	4b12      	ldr	r3, [pc, #72]	@ (8012560 <_vfiprintf_r+0x228>)
 8012516:	a904      	add	r1, sp, #16
 8012518:	4630      	mov	r0, r6
 801251a:	f3af 8000 	nop.w
 801251e:	4607      	mov	r7, r0
 8012520:	1c78      	adds	r0, r7, #1
 8012522:	d1d6      	bne.n	80124d2 <_vfiprintf_r+0x19a>
 8012524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012526:	07d9      	lsls	r1, r3, #31
 8012528:	d405      	bmi.n	8012536 <_vfiprintf_r+0x1fe>
 801252a:	89ab      	ldrh	r3, [r5, #12]
 801252c:	059a      	lsls	r2, r3, #22
 801252e:	d402      	bmi.n	8012536 <_vfiprintf_r+0x1fe>
 8012530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012532:	f7ff fa7f 	bl	8011a34 <__retarget_lock_release_recursive>
 8012536:	89ab      	ldrh	r3, [r5, #12]
 8012538:	065b      	lsls	r3, r3, #25
 801253a:	f53f af1f 	bmi.w	801237c <_vfiprintf_r+0x44>
 801253e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012540:	e71e      	b.n	8012380 <_vfiprintf_r+0x48>
 8012542:	ab03      	add	r3, sp, #12
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	462a      	mov	r2, r5
 8012548:	4b05      	ldr	r3, [pc, #20]	@ (8012560 <_vfiprintf_r+0x228>)
 801254a:	a904      	add	r1, sp, #16
 801254c:	4630      	mov	r0, r6
 801254e:	f7ff fccb 	bl	8011ee8 <_printf_i>
 8012552:	e7e4      	b.n	801251e <_vfiprintf_r+0x1e6>
 8012554:	0801325c 	.word	0x0801325c
 8012558:	08013266 	.word	0x08013266
 801255c:	00000000 	.word	0x00000000
 8012560:	08012315 	.word	0x08012315
 8012564:	08013262 	.word	0x08013262

08012568 <__swbuf_r>:
 8012568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256a:	460e      	mov	r6, r1
 801256c:	4614      	mov	r4, r2
 801256e:	4605      	mov	r5, r0
 8012570:	b118      	cbz	r0, 801257a <__swbuf_r+0x12>
 8012572:	6a03      	ldr	r3, [r0, #32]
 8012574:	b90b      	cbnz	r3, 801257a <__swbuf_r+0x12>
 8012576:	f7ff f8b7 	bl	80116e8 <__sinit>
 801257a:	69a3      	ldr	r3, [r4, #24]
 801257c:	60a3      	str	r3, [r4, #8]
 801257e:	89a3      	ldrh	r3, [r4, #12]
 8012580:	071a      	lsls	r2, r3, #28
 8012582:	d501      	bpl.n	8012588 <__swbuf_r+0x20>
 8012584:	6923      	ldr	r3, [r4, #16]
 8012586:	b943      	cbnz	r3, 801259a <__swbuf_r+0x32>
 8012588:	4621      	mov	r1, r4
 801258a:	4628      	mov	r0, r5
 801258c:	f000 f82a 	bl	80125e4 <__swsetup_r>
 8012590:	b118      	cbz	r0, 801259a <__swbuf_r+0x32>
 8012592:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012596:	4638      	mov	r0, r7
 8012598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	6922      	ldr	r2, [r4, #16]
 801259e:	1a98      	subs	r0, r3, r2
 80125a0:	6963      	ldr	r3, [r4, #20]
 80125a2:	b2f6      	uxtb	r6, r6
 80125a4:	4283      	cmp	r3, r0
 80125a6:	4637      	mov	r7, r6
 80125a8:	dc05      	bgt.n	80125b6 <__swbuf_r+0x4e>
 80125aa:	4621      	mov	r1, r4
 80125ac:	4628      	mov	r0, r5
 80125ae:	f7ff fe3f 	bl	8012230 <_fflush_r>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d1ed      	bne.n	8012592 <__swbuf_r+0x2a>
 80125b6:	68a3      	ldr	r3, [r4, #8]
 80125b8:	3b01      	subs	r3, #1
 80125ba:	60a3      	str	r3, [r4, #8]
 80125bc:	6823      	ldr	r3, [r4, #0]
 80125be:	1c5a      	adds	r2, r3, #1
 80125c0:	6022      	str	r2, [r4, #0]
 80125c2:	701e      	strb	r6, [r3, #0]
 80125c4:	6962      	ldr	r2, [r4, #20]
 80125c6:	1c43      	adds	r3, r0, #1
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d004      	beq.n	80125d6 <__swbuf_r+0x6e>
 80125cc:	89a3      	ldrh	r3, [r4, #12]
 80125ce:	07db      	lsls	r3, r3, #31
 80125d0:	d5e1      	bpl.n	8012596 <__swbuf_r+0x2e>
 80125d2:	2e0a      	cmp	r6, #10
 80125d4:	d1df      	bne.n	8012596 <__swbuf_r+0x2e>
 80125d6:	4621      	mov	r1, r4
 80125d8:	4628      	mov	r0, r5
 80125da:	f7ff fe29 	bl	8012230 <_fflush_r>
 80125de:	2800      	cmp	r0, #0
 80125e0:	d0d9      	beq.n	8012596 <__swbuf_r+0x2e>
 80125e2:	e7d6      	b.n	8012592 <__swbuf_r+0x2a>

080125e4 <__swsetup_r>:
 80125e4:	b538      	push	{r3, r4, r5, lr}
 80125e6:	4b29      	ldr	r3, [pc, #164]	@ (801268c <__swsetup_r+0xa8>)
 80125e8:	4605      	mov	r5, r0
 80125ea:	6818      	ldr	r0, [r3, #0]
 80125ec:	460c      	mov	r4, r1
 80125ee:	b118      	cbz	r0, 80125f8 <__swsetup_r+0x14>
 80125f0:	6a03      	ldr	r3, [r0, #32]
 80125f2:	b90b      	cbnz	r3, 80125f8 <__swsetup_r+0x14>
 80125f4:	f7ff f878 	bl	80116e8 <__sinit>
 80125f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125fc:	0719      	lsls	r1, r3, #28
 80125fe:	d422      	bmi.n	8012646 <__swsetup_r+0x62>
 8012600:	06da      	lsls	r2, r3, #27
 8012602:	d407      	bmi.n	8012614 <__swsetup_r+0x30>
 8012604:	2209      	movs	r2, #9
 8012606:	602a      	str	r2, [r5, #0]
 8012608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801260c:	81a3      	strh	r3, [r4, #12]
 801260e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012612:	e033      	b.n	801267c <__swsetup_r+0x98>
 8012614:	0758      	lsls	r0, r3, #29
 8012616:	d512      	bpl.n	801263e <__swsetup_r+0x5a>
 8012618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801261a:	b141      	cbz	r1, 801262e <__swsetup_r+0x4a>
 801261c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012620:	4299      	cmp	r1, r3
 8012622:	d002      	beq.n	801262a <__swsetup_r+0x46>
 8012624:	4628      	mov	r0, r5
 8012626:	f7ff fa47 	bl	8011ab8 <_free_r>
 801262a:	2300      	movs	r3, #0
 801262c:	6363      	str	r3, [r4, #52]	@ 0x34
 801262e:	89a3      	ldrh	r3, [r4, #12]
 8012630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012634:	81a3      	strh	r3, [r4, #12]
 8012636:	2300      	movs	r3, #0
 8012638:	6063      	str	r3, [r4, #4]
 801263a:	6923      	ldr	r3, [r4, #16]
 801263c:	6023      	str	r3, [r4, #0]
 801263e:	89a3      	ldrh	r3, [r4, #12]
 8012640:	f043 0308 	orr.w	r3, r3, #8
 8012644:	81a3      	strh	r3, [r4, #12]
 8012646:	6923      	ldr	r3, [r4, #16]
 8012648:	b94b      	cbnz	r3, 801265e <__swsetup_r+0x7a>
 801264a:	89a3      	ldrh	r3, [r4, #12]
 801264c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012654:	d003      	beq.n	801265e <__swsetup_r+0x7a>
 8012656:	4621      	mov	r1, r4
 8012658:	4628      	mov	r0, r5
 801265a:	f000 f883 	bl	8012764 <__smakebuf_r>
 801265e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012662:	f013 0201 	ands.w	r2, r3, #1
 8012666:	d00a      	beq.n	801267e <__swsetup_r+0x9a>
 8012668:	2200      	movs	r2, #0
 801266a:	60a2      	str	r2, [r4, #8]
 801266c:	6962      	ldr	r2, [r4, #20]
 801266e:	4252      	negs	r2, r2
 8012670:	61a2      	str	r2, [r4, #24]
 8012672:	6922      	ldr	r2, [r4, #16]
 8012674:	b942      	cbnz	r2, 8012688 <__swsetup_r+0xa4>
 8012676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801267a:	d1c5      	bne.n	8012608 <__swsetup_r+0x24>
 801267c:	bd38      	pop	{r3, r4, r5, pc}
 801267e:	0799      	lsls	r1, r3, #30
 8012680:	bf58      	it	pl
 8012682:	6962      	ldrpl	r2, [r4, #20]
 8012684:	60a2      	str	r2, [r4, #8]
 8012686:	e7f4      	b.n	8012672 <__swsetup_r+0x8e>
 8012688:	2000      	movs	r0, #0
 801268a:	e7f7      	b.n	801267c <__swsetup_r+0x98>
 801268c:	2000007c 	.word	0x2000007c

08012690 <_raise_r>:
 8012690:	291f      	cmp	r1, #31
 8012692:	b538      	push	{r3, r4, r5, lr}
 8012694:	4605      	mov	r5, r0
 8012696:	460c      	mov	r4, r1
 8012698:	d904      	bls.n	80126a4 <_raise_r+0x14>
 801269a:	2316      	movs	r3, #22
 801269c:	6003      	str	r3, [r0, #0]
 801269e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126a2:	bd38      	pop	{r3, r4, r5, pc}
 80126a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80126a6:	b112      	cbz	r2, 80126ae <_raise_r+0x1e>
 80126a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126ac:	b94b      	cbnz	r3, 80126c2 <_raise_r+0x32>
 80126ae:	4628      	mov	r0, r5
 80126b0:	f000 f830 	bl	8012714 <_getpid_r>
 80126b4:	4622      	mov	r2, r4
 80126b6:	4601      	mov	r1, r0
 80126b8:	4628      	mov	r0, r5
 80126ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126be:	f000 b817 	b.w	80126f0 <_kill_r>
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d00a      	beq.n	80126dc <_raise_r+0x4c>
 80126c6:	1c59      	adds	r1, r3, #1
 80126c8:	d103      	bne.n	80126d2 <_raise_r+0x42>
 80126ca:	2316      	movs	r3, #22
 80126cc:	6003      	str	r3, [r0, #0]
 80126ce:	2001      	movs	r0, #1
 80126d0:	e7e7      	b.n	80126a2 <_raise_r+0x12>
 80126d2:	2100      	movs	r1, #0
 80126d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80126d8:	4620      	mov	r0, r4
 80126da:	4798      	blx	r3
 80126dc:	2000      	movs	r0, #0
 80126de:	e7e0      	b.n	80126a2 <_raise_r+0x12>

080126e0 <raise>:
 80126e0:	4b02      	ldr	r3, [pc, #8]	@ (80126ec <raise+0xc>)
 80126e2:	4601      	mov	r1, r0
 80126e4:	6818      	ldr	r0, [r3, #0]
 80126e6:	f7ff bfd3 	b.w	8012690 <_raise_r>
 80126ea:	bf00      	nop
 80126ec:	2000007c 	.word	0x2000007c

080126f0 <_kill_r>:
 80126f0:	b538      	push	{r3, r4, r5, lr}
 80126f2:	4d07      	ldr	r5, [pc, #28]	@ (8012710 <_kill_r+0x20>)
 80126f4:	2300      	movs	r3, #0
 80126f6:	4604      	mov	r4, r0
 80126f8:	4608      	mov	r0, r1
 80126fa:	4611      	mov	r1, r2
 80126fc:	602b      	str	r3, [r5, #0]
 80126fe:	f7ef fae5 	bl	8001ccc <_kill>
 8012702:	1c43      	adds	r3, r0, #1
 8012704:	d102      	bne.n	801270c <_kill_r+0x1c>
 8012706:	682b      	ldr	r3, [r5, #0]
 8012708:	b103      	cbz	r3, 801270c <_kill_r+0x1c>
 801270a:	6023      	str	r3, [r4, #0]
 801270c:	bd38      	pop	{r3, r4, r5, pc}
 801270e:	bf00      	nop
 8012710:	2000944c 	.word	0x2000944c

08012714 <_getpid_r>:
 8012714:	f7ef bad2 	b.w	8001cbc <_getpid>

08012718 <__swhatbuf_r>:
 8012718:	b570      	push	{r4, r5, r6, lr}
 801271a:	460c      	mov	r4, r1
 801271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012720:	2900      	cmp	r1, #0
 8012722:	b096      	sub	sp, #88	@ 0x58
 8012724:	4615      	mov	r5, r2
 8012726:	461e      	mov	r6, r3
 8012728:	da0d      	bge.n	8012746 <__swhatbuf_r+0x2e>
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012730:	f04f 0100 	mov.w	r1, #0
 8012734:	bf14      	ite	ne
 8012736:	2340      	movne	r3, #64	@ 0x40
 8012738:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801273c:	2000      	movs	r0, #0
 801273e:	6031      	str	r1, [r6, #0]
 8012740:	602b      	str	r3, [r5, #0]
 8012742:	b016      	add	sp, #88	@ 0x58
 8012744:	bd70      	pop	{r4, r5, r6, pc}
 8012746:	466a      	mov	r2, sp
 8012748:	f000 f848 	bl	80127dc <_fstat_r>
 801274c:	2800      	cmp	r0, #0
 801274e:	dbec      	blt.n	801272a <__swhatbuf_r+0x12>
 8012750:	9901      	ldr	r1, [sp, #4]
 8012752:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012756:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801275a:	4259      	negs	r1, r3
 801275c:	4159      	adcs	r1, r3
 801275e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012762:	e7eb      	b.n	801273c <__swhatbuf_r+0x24>

08012764 <__smakebuf_r>:
 8012764:	898b      	ldrh	r3, [r1, #12]
 8012766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012768:	079d      	lsls	r5, r3, #30
 801276a:	4606      	mov	r6, r0
 801276c:	460c      	mov	r4, r1
 801276e:	d507      	bpl.n	8012780 <__smakebuf_r+0x1c>
 8012770:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	6123      	str	r3, [r4, #16]
 8012778:	2301      	movs	r3, #1
 801277a:	6163      	str	r3, [r4, #20]
 801277c:	b003      	add	sp, #12
 801277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012780:	ab01      	add	r3, sp, #4
 8012782:	466a      	mov	r2, sp
 8012784:	f7ff ffc8 	bl	8012718 <__swhatbuf_r>
 8012788:	9f00      	ldr	r7, [sp, #0]
 801278a:	4605      	mov	r5, r0
 801278c:	4639      	mov	r1, r7
 801278e:	4630      	mov	r0, r6
 8012790:	f7fe fd78 	bl	8011284 <_malloc_r>
 8012794:	b948      	cbnz	r0, 80127aa <__smakebuf_r+0x46>
 8012796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801279a:	059a      	lsls	r2, r3, #22
 801279c:	d4ee      	bmi.n	801277c <__smakebuf_r+0x18>
 801279e:	f023 0303 	bic.w	r3, r3, #3
 80127a2:	f043 0302 	orr.w	r3, r3, #2
 80127a6:	81a3      	strh	r3, [r4, #12]
 80127a8:	e7e2      	b.n	8012770 <__smakebuf_r+0xc>
 80127aa:	89a3      	ldrh	r3, [r4, #12]
 80127ac:	6020      	str	r0, [r4, #0]
 80127ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127b2:	81a3      	strh	r3, [r4, #12]
 80127b4:	9b01      	ldr	r3, [sp, #4]
 80127b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80127ba:	b15b      	cbz	r3, 80127d4 <__smakebuf_r+0x70>
 80127bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127c0:	4630      	mov	r0, r6
 80127c2:	f000 f81d 	bl	8012800 <_isatty_r>
 80127c6:	b128      	cbz	r0, 80127d4 <__smakebuf_r+0x70>
 80127c8:	89a3      	ldrh	r3, [r4, #12]
 80127ca:	f023 0303 	bic.w	r3, r3, #3
 80127ce:	f043 0301 	orr.w	r3, r3, #1
 80127d2:	81a3      	strh	r3, [r4, #12]
 80127d4:	89a3      	ldrh	r3, [r4, #12]
 80127d6:	431d      	orrs	r5, r3
 80127d8:	81a5      	strh	r5, [r4, #12]
 80127da:	e7cf      	b.n	801277c <__smakebuf_r+0x18>

080127dc <_fstat_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4d07      	ldr	r5, [pc, #28]	@ (80127fc <_fstat_r+0x20>)
 80127e0:	2300      	movs	r3, #0
 80127e2:	4604      	mov	r4, r0
 80127e4:	4608      	mov	r0, r1
 80127e6:	4611      	mov	r1, r2
 80127e8:	602b      	str	r3, [r5, #0]
 80127ea:	f7ef facf 	bl	8001d8c <_fstat>
 80127ee:	1c43      	adds	r3, r0, #1
 80127f0:	d102      	bne.n	80127f8 <_fstat_r+0x1c>
 80127f2:	682b      	ldr	r3, [r5, #0]
 80127f4:	b103      	cbz	r3, 80127f8 <_fstat_r+0x1c>
 80127f6:	6023      	str	r3, [r4, #0]
 80127f8:	bd38      	pop	{r3, r4, r5, pc}
 80127fa:	bf00      	nop
 80127fc:	2000944c 	.word	0x2000944c

08012800 <_isatty_r>:
 8012800:	b538      	push	{r3, r4, r5, lr}
 8012802:	4d06      	ldr	r5, [pc, #24]	@ (801281c <_isatty_r+0x1c>)
 8012804:	2300      	movs	r3, #0
 8012806:	4604      	mov	r4, r0
 8012808:	4608      	mov	r0, r1
 801280a:	602b      	str	r3, [r5, #0]
 801280c:	f7ef face 	bl	8001dac <_isatty>
 8012810:	1c43      	adds	r3, r0, #1
 8012812:	d102      	bne.n	801281a <_isatty_r+0x1a>
 8012814:	682b      	ldr	r3, [r5, #0]
 8012816:	b103      	cbz	r3, 801281a <_isatty_r+0x1a>
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	2000944c 	.word	0x2000944c

08012820 <_init>:
 8012820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012822:	bf00      	nop
 8012824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012826:	bc08      	pop	{r3}
 8012828:	469e      	mov	lr, r3
 801282a:	4770      	bx	lr

0801282c <_fini>:
 801282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801282e:	bf00      	nop
 8012830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012832:	bc08      	pop	{r3}
 8012834:	469e      	mov	lr, r3
 8012836:	4770      	bx	lr
